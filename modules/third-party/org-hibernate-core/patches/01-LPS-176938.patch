diff --git a/org/hibernate/metamodel/internal/AttributeFactory.java b/org/hibernate/metamodel/internal/AttributeFactory.java
old mode 100644
new mode 100755
index f7b5629f337d..cee61225cc19
--- a/org/hibernate/metamodel/internal/AttributeFactory.java
+++ b/org/hibernate/metamodel/internal/AttributeFactory.java
@@ -633,6 +633,10 @@ public class AttributeFactory {
 	}
 
 	public static Attribute.PersistentAttributeType determineSingularAssociationAttributeType(Member member) {
+		if (member == null) {
+			return Attribute.PersistentAttributeType.MANY_TO_ONE;
+		}
+
 		if ( Field.class.isInstance( member ) ) {
 			return ( (Field) member ).getAnnotation( OneToOne.class ) != null
 					? Attribute.PersistentAttributeType.ONE_TO_ONE
@@ -1117,3 +1121,4 @@ public class AttributeFactory {
 		}
 	};
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/hibernate/tuple/component/PojoComponentTuplizer.java b/org/hibernate/tuple/component/PojoComponentTuplizer.java
index acaf5a2e7685..53ebb95d57b9 100644
--- a/org/hibernate/tuple/component/PojoComponentTuplizer.java
+++ b/org/hibernate/tuple/component/PojoComponentTuplizer.java
@@ -43,15 +43,6 @@ public class PojoComponentTuplizer extends AbstractComponentTuplizer {
 	public PojoComponentTuplizer(Component component) {
 		super( component );
 
-		String[] getterNames = new String[propertySpan];
-		String[] setterNames = new String[propertySpan];
-		Class[] propTypes = new Class[propertySpan];
-		for ( int i = 0; i < propertySpan; i++ ) {
-			getterNames[i] = getters[i].getMethodName();
-			setterNames[i] = setters[i].getMethodName();
-			propTypes[i] = getters[i].getReturnType();
-		}
-
 		final String parentPropertyName = component.getParentProperty();
 		if ( parentPropertyName == null ) {
 			parentSetter = null;
@@ -70,6 +61,15 @@ public class PojoComponentTuplizer extends AbstractComponentTuplizer {
 			optimizer = null;
 		}
 		else {
+			String[] getterNames = new String[propertySpan];
+			String[] setterNames = new String[propertySpan];
+			Class[] propTypes = new Class[propertySpan];
+			for ( int i = 0; i < propertySpan; i++ ) {
+				getterNames[i] = getters[i].getMethodName();
+				setterNames[i] = setters[i].getMethodName();
+				propTypes[i] = getters[i].getReturnType();
+			}
+
 			final BytecodeProvider bytecodeProvider = component.getServiceRegistry().getService( BytecodeProvider.class );
 			optimizer = bytecodeProvider.getReflectionOptimizer(
 					componentClass, getterNames, setterNames, propTypes
@@ -173,3 +173,4 @@ public class PojoComponentTuplizer extends AbstractComponentTuplizer {
 		}
 	}
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/hibernate/tuple/entity/PojoEntityTuplizer.java b/org/hibernate/tuple/entity/PojoEntityTuplizer.java
index ef6aaf97a13b..7654ebb71e23 100644
--- a/org/hibernate/tuple/entity/PojoEntityTuplizer.java
+++ b/org/hibernate/tuple/entity/PojoEntityTuplizer.java
@@ -55,19 +55,19 @@ public class PojoEntityTuplizer extends AbstractEntityTuplizer {
 		this.proxyInterface = mappedEntity.getProxyInterface();
 		this.lifecycleImplementor = Lifecycle.class.isAssignableFrom( mappedClass );
 
-		String[] getterNames = new String[propertySpan];
-		String[] setterNames = new String[propertySpan];
-		Class[] propTypes = new Class[propertySpan];
-		for ( int i = 0; i < propertySpan; i++ ) {
-			getterNames[i] = getters[i].getMethodName();
-			setterNames[i] = setters[i].getMethodName();
-			propTypes[i] = getters[i].getReturnType();
-		}
-
 		if ( hasCustomAccessors || !Environment.useReflectionOptimizer() ) {
 			optimizer = null;
 		}
 		else {
+			String[] getterNames = new String[propertySpan];
+			String[] setterNames = new String[propertySpan];
+			Class[] propTypes = new Class[propertySpan];
+			for ( int i = 0; i < propertySpan; i++ ) {
+				getterNames[i] = getters[i].getMethodName();
+				setterNames[i] = setters[i].getMethodName();
+				propTypes[i] = getters[i].getReturnType();
+			}
+
 			final BytecodeProvider bytecodeProvider = entityMetamodel.getSessionFactory().getServiceRegistry().getService( BytecodeProvider.class );
 			optimizer = bytecodeProvider.getReflectionOptimizer(
 					mappedClass,
@@ -256,3 +256,4 @@ public class PojoEntityTuplizer extends AbstractEntityTuplizer {
 		return null;
 	}
 }
+/* @generated */
\ No newline at end of file
