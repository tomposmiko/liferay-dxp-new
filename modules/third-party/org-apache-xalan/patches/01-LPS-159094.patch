diff --git a/org/apache/bcel/classfile/ConstantPool.java b/org/apache/bcel/classfile/ConstantPool.java
index a10ad43f10444..b94f6996be65e 100644
--- a/org/apache/bcel/classfile/ConstantPool.java
+++ b/org/apache/bcel/classfile/ConstantPool.java
@@ -55,6 +55,7 @@ package org.apache.bcel.classfile;
  */
 
 import  org.apache.bcel.Constants;
+import org.apache.bcel.generic.ConstantPoolGen;
 import  java.io.*;
 
 /**
@@ -219,9 +220,17 @@ public class ConstantPool implements Cloneable, Node {
    */
   public void dump(DataOutputStream file) throws IOException
   {
-    file.writeShort(constant_pool_count);
+    /*
+     * Constants over the size of the constant pool shall not be written out.
+     * This is a redundant measure as the ConstantPoolGen should have already
+     * reported an error back in the situation.
+     */
+    int size = constant_pool_count < ConstantPoolGen.CONSTANT_POOL_SIZE - 1 ?
+            constant_pool_count : ConstantPoolGen.CONSTANT_POOL_SIZE - 1;
 
-    for(int i=1; i < constant_pool_count; i++)
+    file.writeShort(size);
+
+    for(int i=1; i < size; i++)
       if(constant_pool[i] != null)
 	constant_pool[i].dump(file);
   }
@@ -367,3 +376,4 @@ public class ConstantPool implements Cloneable, Node {
     return c;
   }
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/bcel/generic/ConstantPoolGen.java b/org/apache/bcel/generic/ConstantPoolGen.java
index 54cf2bb14081b..ba785c2029ffe 100644
--- a/org/apache/bcel/generic/ConstantPoolGen.java
+++ b/org/apache/bcel/generic/ConstantPoolGen.java
@@ -73,6 +73,7 @@ import java.util.HashMap;
  * @see Constant
  */
 public class ConstantPoolGen {
+  public static final int CONSTANT_POOL_SIZE = 65536;
   protected int        size      = 1024; // Inital size, sufficient in most cases
   protected Constant[] constants = new Constant[size];
   protected int        index     = 1; // First entry (0) used by JVM
@@ -94,7 +95,7 @@ public class ConstantPoolGen {
    */
   public ConstantPoolGen(Constant[] cs) {
     if(cs.length > size) {
-      size      = cs.length;
+      size      = Math.min(cs.length, CONSTANT_POOL_SIZE);
       constants = new Constant[size];
     }
 
@@ -167,10 +168,19 @@ public class ConstantPoolGen {
   /** Resize internal array of constants.
    */
   protected void adjustSize() {
+    // 3 extra spaces are needed as some entries may take 3 slots
+    if (index + 3 >= CONSTANT_POOL_SIZE) {
+      throw new RuntimeException("The number of constants " + (index + 3)
+              + " is over the size of the constant pool: "
+              + (CONSTANT_POOL_SIZE - 1));
+    }
+
     if(index + 3 >= size) {
       Constant[] cs = constants;
 
       size      *= 2;
+      // the constant array shall not exceed the size of the constant pool
+      size = Math.min(size, CONSTANT_POOL_SIZE);
       constants  = new Constant[size];
       System.arraycopy(cs, 0, constants, 0, index);
     }
@@ -780,3 +790,4 @@ public class ConstantPoolGen {
     }
   }
 }
+/* @generated */
\ No newline at end of file
