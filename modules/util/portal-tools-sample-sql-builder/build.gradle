import java.util.jar.Attributes
import java.util.jar.JarFile

import org.gradle.util.VersionNumber

task writeReleases

baseline {
	onlyIf {
		Properties properties = new Properties()

		File bndBndFile = project.file("bnd.bnd")

		bndBndFile.withInputStream {
			properties.load it
		}

		return VersionNumber.parse(properties["Bundle-Version"]) > VersionNumber.parse("2.0.0")
	}
}

classes {
	dependsOn writeReleases
}

dependencies {
	compile group: "com.liferay.portal", name: "com.liferay.util.java", version: "default"
	compile group: "javax.portlet", name: "portlet-api", transitive: false, version: "3.0.1"
	compile project(":apps:asset:asset-entry-rel-service")
	compile project(":apps:blogs:blogs-api")
	compile project(":apps:blogs:blogs-service")
	compile project(":apps:commerce:commerce-currency-api")
	compile project(":apps:commerce:commerce-currency-service")
	compile project(":apps:commerce:commerce-product-api")
	compile project(":apps:commerce:commerce-product-service")
	compile project(":apps:document-library:document-library-api")
	compile project(":apps:dynamic-data-lists:dynamic-data-lists-api")
	compile project(":apps:dynamic-data-lists:dynamic-data-lists-service")
	compile project(":apps:dynamic-data-mapping:dynamic-data-mapping-api")
	compile project(":apps:dynamic-data-mapping:dynamic-data-mapping-service")
	compile project(":apps:dynamic-data-mapping:dynamic-data-mapping-web")
	compile project(":apps:fragment:fragment-api")
	compile project(":apps:fragment:fragment-service")
	compile project(":apps:friendly-url:friendly-url-api")
	compile project(":apps:friendly-url:friendly-url-service")
	compile project(":apps:hello-world:hello-world-web")
	compile project(":apps:journal:journal-api")
	compile project(":apps:journal:journal-service")
	compile project(":apps:layout:layout-api")
	compile project(":apps:layout:layout-page-template-api")
	compile project(":apps:layout:layout-page-template-service")
	compile project(":apps:login:login-web-api")
	compile project(":apps:message-boards:message-boards-api")
	compile project(":apps:message-boards:message-boards-service")
	compile project(":apps:subscription:subscription-api")
	compile project(":apps:subscription:subscription-service")
	compile project(":apps:view-count:view-count-api")
	compile project(":apps:view-count:view-count-service")
	compile project(":apps:wiki:wiki-api")
	compile project(":apps:wiki:wiki-service")

	compileOnly group: "com.liferay", name: "org.freemarker", version: "2.3.29.LIFERAY-PATCHED-2"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "default"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "default"
	compileOnly project(":core:petra:petra-function")
	compileOnly project(":core:petra:petra-io")
	compileOnly project(":core:petra:petra-reflect")
	compileOnly project(":core:petra:petra-string")

	testCompile group: "com.rometools", name: "rome", version: "1.16.0"
	testCompile group: "log4j", name: "apache-log4j-extras", version: "1.2.17"
	testCompile project(":apps:petra:petra-log4j")
}

writeReleases {
	dependsOn configurations.compile

	doLast {
		File releasesTxtFile = new File(processResources.destinationDir, "com/liferay/portal/tools/sample/sql/builder/dependencies/releases.txt")

		List<String> lines = []

		(configurations.compile + configurations.compileInclude).each {
			JarFile jarFile = new JarFile(it)

			Attributes mainAttributes = jarFile.manifest.mainAttributes

			String schemaVersion = mainAttributes.getValue("Liferay-Require-SchemaVersion")

			if (!schemaVersion) {
				return
			}

			logger.lifecycle "Adding release information from {} into {}.", it, releasesTxtFile

			String symbolicName = mainAttributes.getValue("Bundle-SymbolicName")

			lines.add("${symbolicName}:${schemaVersion}")
		}

		lines.sort()

		if (!releasesTxtFile.exists()) {
			mkdir releasesTxtFile.getParentFile()

			releasesTxtFile.createNewFile()
		}

		releasesTxtFile.setText lines.join('\n'), "UTF-8"
	}
}