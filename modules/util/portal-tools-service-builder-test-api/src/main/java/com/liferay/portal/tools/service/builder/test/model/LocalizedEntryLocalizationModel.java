/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.tools.service.builder.test.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.MVCCModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

/**
 * The base model interface for the LocalizedEntryLocalization service. Represents a row in the &quot;LocalizedEntryLocalization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.portal.tools.service.builder.test.model.impl.LocalizedEntryLocalizationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.portal.tools.service.builder.test.model.impl.LocalizedEntryLocalizationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LocalizedEntryLocalization
 * @see com.liferay.portal.tools.service.builder.test.model.impl.LocalizedEntryLocalizationImpl
 * @see com.liferay.portal.tools.service.builder.test.model.impl.LocalizedEntryLocalizationModelImpl
 * @generated
 */
@ProviderType
public interface LocalizedEntryLocalizationModel extends BaseModel<LocalizedEntryLocalization>,
	MVCCModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a localized entry localization model instance should use the {@link LocalizedEntryLocalization} interface instead.
	 */

	/**
	 * Returns the primary key of this localized entry localization.
	 *
	 * @return the primary key of this localized entry localization
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this localized entry localization.
	 *
	 * @param primaryKey the primary key of this localized entry localization
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the mvcc version of this localized entry localization.
	 *
	 * @return the mvcc version of this localized entry localization
	 */
	@Override
	public long getMvccVersion();

	/**
	 * Sets the mvcc version of this localized entry localization.
	 *
	 * @param mvccVersion the mvcc version of this localized entry localization
	 */
	@Override
	public void setMvccVersion(long mvccVersion);

	/**
	 * Returns the localized entry localization ID of this localized entry localization.
	 *
	 * @return the localized entry localization ID of this localized entry localization
	 */
	public long getLocalizedEntryLocalizationId();

	/**
	 * Sets the localized entry localization ID of this localized entry localization.
	 *
	 * @param localizedEntryLocalizationId the localized entry localization ID of this localized entry localization
	 */
	public void setLocalizedEntryLocalizationId(
		long localizedEntryLocalizationId);

	/**
	 * Returns the localized entry ID of this localized entry localization.
	 *
	 * @return the localized entry ID of this localized entry localization
	 */
	public long getLocalizedEntryId();

	/**
	 * Sets the localized entry ID of this localized entry localization.
	 *
	 * @param localizedEntryId the localized entry ID of this localized entry localization
	 */
	public void setLocalizedEntryId(long localizedEntryId);

	/**
	 * Returns the language ID of this localized entry localization.
	 *
	 * @return the language ID of this localized entry localization
	 */
	@AutoEscape
	public String getLanguageId();

	/**
	 * Sets the language ID of this localized entry localization.
	 *
	 * @param languageId the language ID of this localized entry localization
	 */
	public void setLanguageId(String languageId);

	/**
	 * Returns the title of this localized entry localization.
	 *
	 * @return the title of this localized entry localization
	 */
	@AutoEscape
	public String getTitle();

	/**
	 * Sets the title of this localized entry localization.
	 *
	 * @param title the title of this localized entry localization
	 */
	public void setTitle(String title);

	/**
	 * Returns the content of this localized entry localization.
	 *
	 * @return the content of this localized entry localization
	 */
	@AutoEscape
	public String getContent();

	/**
	 * Sets the content of this localized entry localization.
	 *
	 * @param content the content of this localized entry localization
	 */
	public void setContent(String content);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(LocalizedEntryLocalization localizedEntryLocalization);

	@Override
	public int hashCode();

	@Override
	public CacheModel<LocalizedEntryLocalization> toCacheModel();

	@Override
	public LocalizedEntryLocalization toEscapedModel();

	@Override
	public LocalizedEntryLocalization toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}