<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
	<module name="TreeWalker">
		<property name="tabWidth" value="4" />
		<module name="ArrayTypeStyleCheck" />
		<module name="AvoidNestedBlocksCheck" />
		<module name="DefaultComesLastCheck" />
		<module name="LocalFinalVariableNameCheck">
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local final variable ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="LocalVariableNameCheck">
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local non-final variable ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MemberNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public non-static field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MemberNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private non-static field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public method ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$|readObject|writeObject" />
			<message key="name.invalidPattern" value="Private method ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodParamPadCheck" />
		<module name="ModifierOrderCheck" />
		<module name="MultipleVariableDeclarationsCheck" />
		<module name="NoLineWrapCheck" />
		<module name="NoWhitespaceAfterCheck">
			<property name="tokens" value="ARRAY_DECLARATOR, ARRAY_INIT, BNOT, DEC, DOT, INC, INDEX_OP, LNOT, TYPECAST, UNARY_MINUS, UNARY_PLUS" />
		</module>
		<module name="NoWhitespaceBeforeCheck" />
		<module name="OneStatementPerLineCheck" />
		<module name="OperatorWrapCheck">
			<property name="option" value="eol" />
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
		</module>
		<module name="ParameterNameCheck">
			<message key="name.invalidPattern" value="Parameter ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StaticVariableNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public static non-final field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StaticVariableNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private static non-final field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StringLiteralEqualityCheck" />
		<module name="TypeNameCheck">
			<property name="format" value="^[A-Z][_a-zA-Z0-9]*" />
			<message key="name.invalidPattern" value="Class, interface, enum or annotation ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="UnnecessaryParenthesesCheck" />
		<module name="WhitespaceAfterCheck">
			<property name="tokens" value="COMMA, SEMI" />
		</module>
		<module name="WhitespaceAroundCheck">
			<property name="allowEmptyTypes" value="true" />
		</module>

		<!-- Custom checks -->

		<module name="com.liferay.source.formatter.checkstyle.checks.AppendCheck">
			<message key="end.character.invalid" value="When appending multiple literal strings, only the last literal string can end with ''{0}''" />
			<message key="line.break.incorrect" value="Avoid using line break when appending multiple literal strings" />
			<message key="literal.string.combine" value="Combine the literal strings ''{0}'' and ''{1}''" />
			<message key="literal.string.move" value="Add the string ''{0}'' to the previous literal string" />
			<message key="plus.incorrect" value="Incorrect use of ''+'' inside StringBundler" />
			<message key="start.character.invalid" value="When appending multiple literal strings, only the first literal string can start with ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.CamelCaseNameCheck">
			<message key="method.invalidName" value="''{0}'' should be followed by a lowercase character for method ''{1}''" />
			<message key="parameter.invalidName" value="''{0}'' should be followed by a lowercase character for parameter ''{1}''" />
			<message key="variable.invalidName" value="''{0}'' should be followed by a lowercase character for variable ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ConcatCheck">
			<message key="end.character.invalid" value="When concatenating multiple literal strings, only the last literal string can end with ''{0}''" />
			<message key="literal.string.combine" value="Combine the literal strings ''{0}'' and ''{1}''" />
			<message key="literal.string.move" value="Add the string ''{0}'' to the previous literal string" />
			<message key="plus.incorrect" value="Do not use ''+'' inside ''StringBundler.concat''" />
			<message key="start.character.invalid" value="When concatenating multiple literal strings, only the first literal string can start with ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ConstantNameCheck">
			<property name="camelCaseTypeNames" value="AggregateTestRule,CodeCoverageAssertor,LiferayIntegrationTestRule,Log,Pattern,TestRule" />
			<property name="immutableFieldTypes" value="boolean,byte,char,double,float,int,long,short,Boolean,Byte,Character,Class,Double,Float,Int,Long,Number,Short,String" />
			<message key="name.invalidConstantPattern" value="{0} constant ''{1}'' must match pattern ''{2}''" />
			<message key="name.invalidConstantTypePattern" value="{0} constant ''{1}'' of type ''{2}'' must match pattern ''{3}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ContractionsCheck">
			<message key="contraction.avoid" value="Avoid using contraction ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ExceptionMessageCheck">
			<message key="message.incorrect" value="Incorrect exception message. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/phrase_vs_sentence.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.FactoryCheck">
			<message key="factory.use" value="Use ''{0}'' to create new instance of ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.IfStatementCheck">
			<message key="if.statements.combine" value="Combine if-statements" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.InstanceofOrderCheck">
			<message key="instanceof.order" value="''{0}'' should come before ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.JSONNamingCheck">
			<message key="variable.name.reserved" value="{0} name ending with ''{1}'' is reserved for object ''{2}''" />
			<message key="variable.rename" value="Rename {0} ''{1}'' to ''{2}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.JSONUtilCheck">
			<message key="json.util.put.all.use" value="Use ''JSONUtil.putAll'' instead of chaining on ''JSONUtil.put''" />
			<message key="json.util.put.use" value="Combine calls ''{0}'' ({1}) and ''{2}'' ({3}) into single call ''{4}''. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/json_util.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LambdaCheck">
			<message key="lambda.simplify" value="Simplify lambda statement with single statement. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/lambda.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LineBreakAfterCommaCheck">
			<message key="line.break.incorrect" value="There should be a line break after ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LineBreakBeforeGenericStartCheck">
			<message key="line.break.incorrect" value="There should be a line break after ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LineEndCharacterCheck">
			<message key="end.line.character.incorrect" value="Line should not end with ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.ListUtilCheck">
			<message key="array.unneeded" value="Pass arguments directly to ''ListUtil.fromArray'' instead of passing new array. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/list_util.markdown" />
			<message key="list.util.use" value="Use ''ListUtil.fromArray'' to simplify code. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/list_util.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.LiteralStringEqualsCheck">
			<message key="objects.equals.use.1" value="Use ''Objects.equals'' instead of calling ''equals'' on a literal String" />
			<message key="objects.equals.use.2" value="Either use ''{0}'' or use ''Objects.equals'' if ''{1}'' can have a ''null'' value, instead of calling ''equals'' on a literal String" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MapIterationCheck">
			<message key="entry.set.use" value="Use Map.entrySet() to retrieve values. See https://github.com/liferay/liferay-portal/blob/master/modules/util/source-formatter/documentation/map_iteration.markdown" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MethodNamingCheck">
			<message key="method.rename" value="Rename method ''{0}'' to ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MissingDiamondOperatorCheck">
			<property name="enforceDiamondOperatorClassNames" value="" />
			<message key="diamond.operator.missing" value="Missing diamond operator ''&lt;&gt;'' for type ''{0}''" />
			<message key="generic.types.missing" value="Missing generic types ''{0}'' for type ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.MissingParenthesesCheck">
			<message key="parentheses.missing.1" value="Missing parentheses between the ''{0}'' operator and the ''{1}'' operator" />
			<message key="parentheses.missing.2" value="Missing parentheses around the {0} hand side argument of the ''{1}'' operator" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.NumberSuffixCheck">
			<message key="suffix.incorrect" value="Use uppercase ''{0}'' as suffix for the type ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.checks.OperatorOperandCheck">
			<property name="enabled" value="false" />
			<message key="readability.improve" value="Create a new variable for the {0} hand side operand of the ''{1}'' operator for better readability" />
		</module>
	</module>
</module>