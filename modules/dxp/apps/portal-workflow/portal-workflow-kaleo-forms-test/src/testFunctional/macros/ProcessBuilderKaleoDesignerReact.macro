definition {

	macro addConnector {
		MouseOver.mouseOverInvisible(
			key_direction = "${direction}",
			key_nodeType = "${connectorOut}",
			locator1 = "ProcessBuilderKaleoDesignerReact#CONNECTOR_SOURCE",
			value1 = "0,0");

		MouseDown.mouseDownAt(
			key_direction = "${direction}",
			key_nodeType = "${connectorOut}",
			locator1 = "ProcessBuilderKaleoDesignerReact#CONNECTOR_SOURCE",
			value1 = "0,0");

		MouseMove(
			key_nodeType = "${connectorIn}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_NODE",
			value1 = "0,47");

		MouseUp.mouseUpAt(
			key_nodeType = "${connectorIn}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_NODE",
			value1 = "0,47");

		Type(
			key_connectorLabel = "TRANSITION LABEL",
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_CONNECTOR_LABEL",
			value1 = "${connectorLabel}");
	}

	macro backArrowOnSidebar {
		Click(locator1 = "ProcessBuilderKaleoDesignerReact#BACK_TO_SIDEBAR_BUTTON");
	}

	macro clickDefaultToggle {
		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "${connectorLabel}");
	}

	macro deleteNodeOrConnection {
		Click(locator1 = "WorkflowConfiguration#BLOGS_MOVE_TO_RECYCLE_BIN");

		AssertElementPresent(
			key_title = "${title}",
			locator1 = "ProcessBuilderKaleoDesignerReact#VIEW_DELETE_MODAL");

		Click(locator1 = "ProcessBuilderKaleoDesignerReact#BUTTON_DELETE_MODAL");
	}

	macro dragAndDropDiagramNode {
		DragAndDrop.dragAndDrop(
			key_nodeType = "${nodeType}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_NODE",
			value1 = "${nodePosition}");
	}

	macro dragSidebarNodeAndMove {
		var key_nodeLabel = "${nodeLabel}";
		var key_nodeType = "${nodeType}";

		AssertClick.pauseAssertTextClickAt(
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_NODE",
			value1 = "${nodeLabel}");

		DragAndDrop.javaScriptDragAndDropToUp(
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_NODE",
			locator2 = "ProcessBuilderKaleoDesignerReact#REACT_PANEL",
			nodeLabel = "${nodeLabel}");

		DragAndDrop.dragAndDrop(
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_NODE",
			nodeType = "${nodeType}",
			value1 = "${nodePosition}");
	}

	macro editConnector {
		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "${connectorLabel}");

		Type(
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_CONNECTOR_LABEL",
			value1 = "${newConnectorLabel}");
	}

	macro editWorkflowTitle {
		PortletEntry.inputTitle(title = "${title}");
	}

	macro selectConnector {
		Click(
			key_connectorLabel = "${connectorLabel}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_CONNECTOR_LABEL");
	}

	macro selectNode {
		Click(
			key_nodeType = "${nodeType}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_NODE");
	}

	macro selectTranslationLanguage {
		var key_translationOptionSelected = "${translationOptionSelected}";
		var key_translationOption = "${newTranslationOption}";
		var key_translationStatus = "${translationStatus}";

		Click(
			locator1 = "ProcessBuilderKaleoDesignerReact#ICON_COUNTRY",
			translationOption = "${translationOptionSelected}");

		if (isSet(translationOption)) {
			Click(
				locator1 = "ProcessBuilderKaleoDesignerReact#TRANSLATION_COUNTRY_LABEL",
				translationOption = "${newTranslationOption}",
				translationStatus = "${translationStatus}");
		}
	}

	macro viewAndFillNotification {
		Click(locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_NEW_BUTTON");

		AssertElementPresent(
			key_inputOption = "Name",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATIONS_INPUT");

		AssertElementPresent(
			key_inputOption = "Description",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATIONS_INPUT");

		AssertElementPresent(
			key_selectorField = "Template Language",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS");

		AssertElementPresent(locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATIONS_TEMPLATE_TEXTAREA");

		AssertElementPresent(
			key_selectorField = "Notifications Type",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS");

		AssertElementPresent(
			key_selectorField = "Execution Type",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS");

		AssertElementPresent(
			key_selectorField = "Recipient Type",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS");

		if (isSet(name)) {
			Type(
				key_inputOption = "Name",
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATIONS_INPUT",
				value1 = "${name}");
		}

		if (isSet(description)) {
			Type(
				key_inputOption = "Description",
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATIONS_INPUT",
				value1 = "${description}");
		}

		if (isSet(templateLanguageOption)) {
			Select(
				key_selectorField = "Template Language",
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS",
				value1 = "${templateLanguageOption}");
		}

		if (isSet(notificationTemplateValue)) {
			Type(
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATIONS_TEMPLATE_TEXTAREA",
				value1 = "${notificationTemplateValue}");
		}

		if (isSet(notificationsTypeOption)) {
			Select(
				key_selectorField = "Notifications Type",
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS",
				value1 = "${notificationsTypeOption}");
		}

		if (isSet(executionTypeOption)) {
			Select(
				key_selectorField = "Execution Type",
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS",
				value1 = "${executionTypeOption}");
		}

		if (isSet(recipientTypeOption)) {
			Select(
				key_selectorField = "Recipient Type",
				locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_SELECTORS",
				value1 = "${recipientTypeOption}");
		}
	}

	macro viewConnectorNotPresent {
		AssertElementNotPresent(
			key_connectorLabel = "${connectorLabel}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_CONNECTOR_LABEL");
	}

	macro viewConnectorPresent {
		AssertTextEquals(
			key_connectorLabel = "${connectorLabel}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DIAGRAM_CONNECTOR_LABEL",
			value1 = "${connectorLabel}");
	}

	macro viewDefaultToggleStatus {
		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "${connectorLabel}");

		AssertElementPresent(
			key_defaultStatus = "${defaultStatus}",
			locator1 = "ProcessBuilderKaleoDesignerReact#DEFAULT_TOGGLE_SWITCH_STATUS");

		if ("${defaultStatus}" == "True") {
			AssertElementPresent(
				key_connectorLabel = "${connectorLabel}",
				key_transitionStyle = "0",
				locator1 = "ProcessBuilderKaleoDesignerReact#DEFAULT_TRANSITION_STYLE");
		}
		else {
			AssertElementPresent(
				key_connectorLabel = "${connectorLabel}",
				key_transitionStyle = "5",
				locator1 = "ProcessBuilderKaleoDesignerReact#DEFAULT_TRANSITION_STYLE");
		}
	}

	macro viewDescription {
		AssertTextEquals(
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_NODE_DESCRIPTION",
			value1 = "${description}");
	}

	macro viewTranslationLanguageStatus {
		AssertElementPresent(
			key_translationOption = "${newTranslationOption}",
			key_translationStatus = "${translationStatus}",
			locator1 = "ProcessBuilderKaleoDesignerReact#TRANSLATION_COUNTRY_LABEL");
	}

}