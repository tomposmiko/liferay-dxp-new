@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account Analytics Cloud";
	var testProduct = "Analytics Cloud";
	var testUserFirstName = "Test";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${testUserFirstName}");
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(
				status = "Expired",
				title = "${testAccount}");
		}

		task ("And I go through onboarding") {
			CP2Utils.onboardingFlow();
		}

		task ("Then I click on the AC product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-150650 | Test Summary: Verify if the user can add additional Incident Report Contacts using the 'Add Incident Report Contact' button"
	@priority = "3"
	test AddingAdditionalIncidentReportContacts {
		task ("And I assert that one more 'Incident Report Contact' field has been added") {
			CustomerPortal.clickOnFinishActivationButton();

			CustomerPortal.clickAtButton(text = "Add Incident Report Contact");

			CP2AnalyticsCloudSetup.assertFieldExtraIsVisible(
				field = "email",
				position = "2");
		}

		task ("Given that I click on the 'Remove Incident Report Contact' button") {
			CustomerPortal.clickAtButton(text = "Remove Incident Report Contact");
		}

		task ("Then I assert that the 'Incident Report Contact' field is no longer visible") {
			CP2AnalyticsCloudSetup.assertFieldExtraIsNotVisible(
				field = "email",
				position = "2");
		}
	}

	@description = "Automation ID: LPS-150654 | Test Summary: Verify if the user enters a wrong value in 'Owner Email' an error message is displayed"
	@priority = "3"
	test CanSeeTheErrorMessageInTheOwnerEmailField {
		task ("And I enter Setup AC") {
			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Then I assert that the 'Owner Email' field is required") {
			CP2AnalyticsCloudSetup.typeSetupAnalyticsCloudInfoFields(
				label = "Address",
				value = "");

			CustomerPortal.clickOnModal(text = "Set up Analytics Cloud");

			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-150649 | Test Summary: Verify if team member administrator can only submit the form after filling out all required fields"
	@priority = "4"
	test CanViewTheAdministratorSubmitTheForm {
		task ("And the Submit button must be disabled") {
			CustomerPortal.clickOnFinishActivationButton();

			CustomerPortal.assertButtonIsDisabled(text = "Submit");
		}

		task ("And I fill in all the required fields") {
			CP2AnalyticsCloudSetup.typeAllSetupAnalyticsCloudInfoFields();
		}

		task ("Then The Submit button should be active") {
			CustomerPortal.assertButtonIsActive(text = "Submit");
		}
	}

	@description = "Automation ID: LPS-150659 | Test Summary: Verify if the user enters an invalid e-mail address for the owner and contacts in the incident report an error message is displayed"
	@priority = "3"
	test CanViewTheErrorMessageInTheIncidentReportContactField {
		task ("And I enter Setup AC") {
			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Then I assert that the 'Incident Report Contact' field is required") {
			CP2AnalyticsCloudSetup.typeSetupAnalyticsCloudInfoFields(
				label = "email",
				value = "");

			CustomerPortal.clickOnModal(text = "Set up Analytics Cloud");

			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-150657 | Test Summary: Verify if the user enters a wrong value in 'Workspace Name', an error message is displayed"
	@priority
	test CanViewTheErrorMessageInTheWorkspaceNameField {
		task ("And I enter Setup AC") {
			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Then I assert that the 'Workspace Name' field is required") {
			CP2AnalyticsCloudSetup.typeSetupAnalyticsCloudInfoFields(
				label = "workspaceName",
				value = "");

			CustomerPortal.clickOnModal(text = "Set up Analytics Cloud");

			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-150660 | Test Summary: Verify if the user enters an invalid e-mail address for the owner and contacts in the incident report an error message is displayed"
	@priority = "3"
	test CanViewTheSuccessMessage {
		task ("When I fill in all the required fields") {
			CustomerPortal.clickOnFinishActivationButton();

			CP2AnalyticsCloudSetup.typeAllSetupAnalyticsCloudInfoFields();

			Button.click(button = "Submit");
		}

		task ("I assert that the form has been submitted") {
			CustomerPortal.viewConfirmationModal(text = "Thank you for submitting this request!");

			Button.click(button = "Done");
		}

		task ("Delete the entries and objects created") {
			CP2AnalyticsCloudSetup.clearAndDeleteCloudEntries(
				entry = "ERC-003",
				position = "3",
				status = "In-Progress");

			CP2Utils.deleteSpecificObjectEntry(
				email = "test@liferay.com",
				portlet = "Incident Report Contacts Analytics Cloud");
		}
	}

	@description = "Automation ID: LPS-150651 | Test Summary: Verify if the user can remove additional contacts from the incident report"
	@priority = "3"
	test RemovingAdditionalContactsFromTheIncidentReport {

		// TODO LPS-150651 RemovingAdditionalContactsFromTheIncidentReport was implemented in the test AddingAdditionalIncidentReportContacts

	}

}