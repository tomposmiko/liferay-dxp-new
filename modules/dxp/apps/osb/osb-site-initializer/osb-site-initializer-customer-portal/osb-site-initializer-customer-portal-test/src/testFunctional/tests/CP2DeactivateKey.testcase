@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = ${testSiteName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = ${testSiteName});
		}
	}

	@description = "LPS-148120 - Assert that a deactivated key will no longer appear."
	@ignore = "true"
	@priority = 5
	test CannotViewDeactivatedKeys {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then deactivating a key will ensure that key will no longer be available") {
			CP2ActivationKeys.deactivateExistingKey(environmentName = "Test3");

			Search.searchCP(searchTerm = "Test3");

			AssertElementNotPresent(
				key_text = "Test3",
				locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	@description = "Automation ID: LPS-150690 | Test Summary: Assert that the deactivated key is no longer displayed in the table"
	@ignore = "true"
	@priority = 5
	test CannotViewDeactivatedKeysForPortal {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "NASA ICE");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("Then deactivating a key will ensure that key will no longer be available") {
			CP2ActivationKeys.deactivateExistingKey(environmentName = "testt1");

			Search.searchCP(searchTerm = "testt1");

			AssertElementNotPresent(
				key_text = "testt1",
				locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	@description = "LPS-148121 - Assert that number of keys on 'All' tab is equal to number of total keys after deactivating."
	@ignore = "true"
	@priority = 3
	test CanViewChangeInNumberOfKeys {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then deactivating a key will ensure that the key will no longer be counted towards the final amount") {
			VerifyElementPresent(
				key_value = 33,
				locator1 = "CP2ActivationKeys#KEY_COUNT_ALL");

			CP2ActivationKeys.deactivateExistingKey(environmentName = "Test for Deactivation");

			TableViewBuilder.clearSearch();

			AssertElementPresent(
				key_value = 32,
				locator1 = "CP2ActivationKeys#KEY_COUNT_ALL");
		}
	}

	@description = "Automation ID: LPS-150689 | Test Summary: Assert that number of keys on 'All' tab changed after the key was deactivated"
	@ignore = "true"
	@priority = 3
	test CanViewChangeTheNumberOfTotalKeys {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "NASA ICE");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("Then deactivating a key will ensure that the key will no longer be counted towards the final amount") {
			VerifyElementPresent(
				key_value = 4,
				locator1 = "CP2ActivationKeys#KEY_COUNT_ALL");

			CP2ActivationKeys.deactivateExistingKey(environmentName = "testt1");

			TableViewBuilder.clearSearch();

			AssertElementPresent(
				key_value = 3,
				locator1 = "CP2ActivationKeys#KEY_COUNT_ALL");
		}
	}

	@description = "LPS-148117 - Assert that a pop-up appears after selecting multiple keys to deactivate."
	@ignore = "true"
	@priority = 5
	test CanViewPopUpInformation {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal and selects multiple keys to deactivate") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.selectAllKeysOnPage();

			Button.click(button = "Deactivate");
		}

		task ("Then a pop-up with info with deactivation terms will appear") {
			AssertElementPresent(
				key_text = "I certify that the instances activated with the selected activation keys have been shut down and that there is no Liferay software installed, deployed, used or executed that is activated with the selected activation keys.",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}
	}

	@description = "Automation ID: LPS-150687 | Test Summary: Assert that no changes were made after the user clicked 'Cancel' in the deactivation modal"
	@ignore = "true"
	@priority = 4
	test CanViewThatNoChangesWereMadeAfterClickingCancel {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal and selects multiple keys to deactivate") {
			CustomerPortal.enterOnProject(title = "NASA ICE");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");

			Search.searchCP(searchTerm = "redacted");

			CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(environmentName = "Redacted");

			Button.click(button = "Deactivate");
		}

		task ("Then clicking 'Cancel' will have user stay on DXP Product Activation page and the keys will not be deactivated") {
			Button.click(button = "Cancel");

			AssertElementPresent(
				key_productType = "Portal",
				locator1 = "CP2ActivationKeys#ACTIVE_PRODUCT_TYPE");

			AssertElementPresent(
				key_text = "Redacted",
				locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	@description = "Automation ID: LPS-150685 | Test Summary: Assert that a pop-up is displayed after the user clicks the disable button."
	@ignore = "true"
	@priority = 5
	test CanViewTheDeactivationPopUp {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal and selects multiple keys to deactivate") {
			CustomerPortal.enterOnProject(title = "NASA ICE");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");

			CP2ActivationKeys.selectAllKeysOnPage();

			Button.click(button = "Deactivate");
		}

		task ("Then a pop-up with info with deactivation terms will appear") {
			AssertElementPresent(
				key_text = "I certify that the instances activated with the selected activation keys have been shut down and that there is no Liferay software installed, deployed, used or executed that is activated with the selected activation keys.",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}
	}

	@description = "Automation ID: LPS-152856 | Test Summary: Verify that a modal confirming the deactivation of the key is displayed"
	@ignore = "true"
	@priority = 3
	test IfModalConfirmingTheDeactivationOfTheKeyAppears {

		// Needs refactor since it depends on example NASA ICE account

		var testAccount = "NASA ICE";

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = ${testAccount});
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Then I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("When the user selects multiple keys to deactivate") {
			Search.searchCP(searchTerm = "redacted");

			CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(environmentName = "Redacted");

			Button.click(button = "Deactivate");
		}

		task ("Then an informative modal is shown") {
			CustomerPortal.clickAtButton(text = "Confirm Deactivate Keys");

			CP2Utils.assertTextVisible(text = "A request was just sent to deactivate the selected activation keys. From now on they will be hidden and no longer be visible.");

			CustomerPortal.clickAtButton(text = "Continue");
		}
	}

	@description = "LPS-148118 - Assert there are no changes to selected keys after clicking 'Cancel' on the Deactivation Terms modal."
	@ignore = "true"
	@priority = 4
	test NoChangesMadeAfterClickingCancel {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("When the user selects a project in Customer Portal and selects multiple keys to deactivate") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			Search.searchCP(searchTerm = "test");

			for (var key_environmentName : list "Test2,Test3") {
				CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(environmentName = ${key_environmentName});
			}

			Button.click(button = "Deactivate");
		}

		task ("Then clicking 'Cancel' will have user stay on DXP Product Activation page and the keys will not be deactivated") {
			Button.click(button = "Cancel");

			AssertElementPresent(
				key_productType = "DXP",
				locator1 = "CP2ActivationKeys#ACTIVE_PRODUCT_TYPE");

			for (var key_environmentName : list "Test2,Test3") {
				AssertElementPresent(
					key_text = ${key_environmentName},
					locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
			}
		}
	}

}