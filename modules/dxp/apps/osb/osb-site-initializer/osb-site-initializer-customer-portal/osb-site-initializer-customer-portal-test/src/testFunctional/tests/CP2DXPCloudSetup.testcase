@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-144988 | Test Summary: Assert if button 'Add Another Admin' works when clicked"
	@priority = "4"
	test CanAddAnotherAdmin {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");

			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Fill out all the fields in the form") {
			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();
		}

		task ("Assert the new form fields") {
			CP2DXPCloudSetup.clickOnAddAnotherAdminButton();

			CP2DXPCloudSetup.viewSetupDXPCloudExtraFields();
		}
	}

	@description = "Automation ID: LPS-144976 | Test Summary: Verify if the user can choose an option at Disaster Recovery Data Center Region"
	@priority = "5"
	test CanChooseDisasterRecoveryDataCenter {
		task ("Activate object for disaster data center region") {
			CP2DXPCloudSetup.activeDisasterRecoveryDataCenter();
		}

		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding to Setup") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Assert the region options from the drop-down") {
			CP2DXPCloudSetup.viewDisasterRegionList(regionRow = "Dubai, UAE,Frankfurt, Germany,Hamina, Finland,Iowa, USA,jurong-west-singapore,London, England,Montreal, Canada,Mumbai, India,Oregon, USA,Sao Paulo, Brazil,Sydney, Australia,Tokyo, Japan");
		}

		task ("Deactivating object for the disaster data center region") {
			CP2DXPCloudSetup.deactivateDisasterRecoveryDataCenter(index = "6");
		}
	}

	@description = "Automation ID: LPS-144970 | Test Summary: Verify if the user can choose an option at 'Primary Data Center Region"
	@priority = "5"
	test CanChoosePrimaryDataCenter {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding to Setup") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Assert the drop-down options in primary data center region") {
			CP2DXPCloudSetup.viewRegionList(regionList = "Dubai, UAE,Frankfurt, Germany,Hamina, Finland,Iowa, USA,jurong-west-singapore,London, England,Montreal, Canada,Mumbai, India,Oregon, USA,Sao Paulo, Brazil,Sydney, Australia,Tokyo, Japan");
		}
	}

	@description = "Automation ID: LPS-144986 | Test Summary: Verify if Submit button is only enabled when all the fields are filled"
	@priority = "5"
	test CanClickSubmitButtonWithAllFilledIn {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding to Setup") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Assert that the submit button is enabled") {
			AssertElementPresent(locator1 = "CustomerPortalSite#SUBMIT_BUTTON");
		}
	}

	@description = "Automation ID: LPS-144990 | Test Summary: If the admin user selects 'Skip for Now' then the user is taken to that project's home page / subscriptions page"
	@priority = "4"
	test CanSkipForNowToOverview {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Assert that the user has been taken to the overview page") {
			AssertElementPresent(locator1 = "CP2NavigationMenu#OVERVIEW");
		}
	}

	@description = "Automation ID: LPS-144989 | Test Summary: Verify a success message is shown after finishing setting DXP Cloud up"
	@priority = "4"
	test CanViewDXPCloudSetupSuccessMessage {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Fill out the form and submit it") {
			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();

			Button.click(button = "Submit");
		}

		task ("Assert the success message when submitting the form") {
			Alert.viewSuccessMessage();
		}

		task ("Delete the entries and objects created") {
			CP2DXPCloudSetup.clearAndDeleteDXPCloudEntries();
		}
	}

	@description = "Automation ID: LPS-146684 | Test Summary: Verify if the admin user selects 'Cancel', then the user goes back to the project's Product Activation page"
	@priority = "4"
	test IfSelectsCancelThenTheUserGoesBackPreviousPage {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Go to the product activation page and open the card activation modal") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "LXC-SM");

			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Exit the modal and state that you are back to the project's Product Activation page") {
			CustomerPortal.clickOnCancelButton();

			AssertElementPresent(locator1 = "CustomerPortalSite#ACTIVATION_STATUS_PAGE");
		}
	}

	@description = "Automation ID: LPS-144977 | Test Summary: Verify message 'This field is required.' on DXP Cloud System Admin's Email Address"
	@priority = "4"
	test IsDXPCloudEmailRequired {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Filling in and deleting the DXP Cloud System Admin's Email Address field") {
			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "email",
				value = "test@liferay.com");

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "email",
				value = "");

			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
		}

		task ("Assert the error message") {
			Alert.viewErrorMessage(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-144978 | Test Summary: Verify message 'Please insert a valid e-mail.' on DXP Cloud System Admin's Email Address"
	@priority = "3"
	test IsDXPCloudEmailValid {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Filling in a wrong entry in the DXP Cloud System Admin email address field") {
			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "email",
				value = "test.com");

			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
		}

		task ("Assert the error message") {
			Alert.viewErrorMessage(errorMessage = "Please insert a valid e-mail.");
		}
	}

	@description = "Automation ID: LPS-144974 | Test Summary: Verify message 'This field is required.' in Project ID field"
	@priority = "4"
	test IsProjectIDRequired {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Filling and deleting the Project ID field") {
			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "projectId",
				value = "001");

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "projectId",
				value = "");

			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
		}

		task ("Assert the error message") {
			Alert.viewErrorMessage(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-144982 | Test Summary: Verify message 'This field is required.' on System Admin's First Name"
	@priority = "4"
	test IsSystemAdminFirstNameRequired {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Filling in and deleting the System Admin's First Name field") {
			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "firstName",
				value = "FirstName");

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "firstName",
				value = "");

			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
		}

		task ("Assert the error message") {
			Alert.viewErrorMessage(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-144985 | Test Summary: Verify message 'This field is required.' on System Admin's Github Username"
	@priority = "4"
	test IsSystemAdminGitUserRequired {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Filling in and deleting the System Admin's Github Username field") {
			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "github",
				value = "GitHubUser");

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "github",
				value = "");

			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
		}

		task ("Assert the error message") {
			Alert.viewErrorMessage(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-144984 | Test Summary: Verify message 'This field is required.' on System Admin's Last Name"
	@priority = "4"
	test IsSystemAdminLastNameRequired {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Filling in and deleting the System Admin's Last Name field") {
			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "lastName",
				value = "LastName");

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "lastName",
				value = "");

			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
		}

		task ("Assert the error message") {
			Alert.viewErrorMessage(errorMessage = "This field is required.");
		}
	}

	@description = "Automation ID: LPS-146677 | Test Summary: Verify if the project name and version is correct"
	@priority = "4"
	test NameAndVersionOfChosenProject {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Go to the product activation page and open the card activation modal") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "LXC-SM");

			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Assert the project name and version") {
			AssertTextEquals(
				key_name = "Test Account LXC-SM",
				locator1 = "CP2DXPCloudSetup#PROJECT_NAME_SETUP",
				value1 = "Test Account LXC-SM");
		}
	}

	@description = "Automation ID: LPS-146676 | Test Summary: Verify if that when you click 'Finish Activation' the DXP Cloud configuration modal is shown"
	@priority = "5"
	test OpenSetUpModal {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Go to the product activation page and open the card activation modal") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "LXC-SM");

			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Assert modal Setup LXC-SM") {
			AssertElementPresent(
				locator1 = "CustomerPortalSite#MODAL_PAGE",
				modal = "Set up LXC-SM");
		}
	}

	@description = "Automation ID: LPS-146686 | Test Summary: Verify if the activation status of the card changes to (In Progress) after filling out the DXP Cloud Set up"
	@priority = "4"
	test SeeIfTheCardActivationStatusChanges {
		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "Test Account LXC-SM");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Go to the product activation page and open the card activation modal") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "LXC-SM");

			CustomerPortal.clickOnFinishActivationButton();
		}

		task ("Fill out the form and submit it") {
			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();

			Button.click(button = "Submit");
		}

		task ("Assert that the card status has changed") {
			CP2DXPCloudSetup.assertCardStatusChanged(status = "In Progress");
		}

		task ("Delete the entries and objects created") {
			CP2DXPCloudSetup.clearAndDeleteDXPCloudEntries(status = "In-Progress");
		}
	}

}