@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account DXP";
	var testProduct = "DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = ${testSiteName});
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = ${testAccount});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = ${testSiteName});
		}
	}

	@description = "Automation ID: LPS-150811 | Test Summary: Verify if the right pane displays the following data (Product - Version - Environment Type - Subscription - Key Activations Available - Instance size)"
	@ignore = "true"
	@priority = 2
	test CanViewTheDataInThePanel {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production (Virtual Cluster)");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("Then the card will show all the details of the generated activation key") {
			CP2ActivationKeys.assertInfoNewKeyCard(
				activationsAvailable = 62,
				instanceSize = 1,
				licenseType = "Production (Virtual Cluster)",
				product = "DXP",
				subscription = "Jun 30, 2021 - Mar 30, 2023",
				version = "7.4");
		}
	}

	@description = "Automation ID: LPS-150809 | Test Summary: Verify that after filling out all required fields the Generate Cluster (Keys) button is enabled"
	@ignore = "true"
	@priority = 4
	test CanViewTheGenerateClusterButtonEnabled {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production (Virtual Cluster)");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("And The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate Cluster ( Keys)");
		}

		task ("After filling in the Cluster Nodes field the button is then enabled") {
			CP2ActivationKeys.environmentDetails(
				environmentDetails = "name",
				value = "Liferay Test");

			CP2ActivationKeys.selectClusterNodes(key_option = 1);
		}

		task ("Then I should be able to see that the Next button is enabled") {
			CustomerPortal.assertButtonIsActive(text = "Generate Cluster (1 Keys)");
		}
	}

	@description = "Automation ID: LPS-150805 | Test Summary: Verify if the user clicks the Cancel button the modal closes without saving anything"
	@ignore = "true"
	@priority = 3
	test CanViewTheModalClosing {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("I fulfill first phase form for Generate New License and click the Cancel button") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Cancel");
		}

		task ("So I should be able to see that no previously filled data is filled now") {
			CP2ActivationKeys.generateNewKey();

			CP2ActivationKeys.assertSignatureWithNoKeysIsVisible();
		}
	}

	@description = "Automation ID: LPS-150810 | Test Summary: Verify if the button name changes according to the number of keys generated by the user"
	@ignore = "true"
	@priority = 2
	test CanViewTheNumberOfKeysInTheButtonText {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the user can go through the first flow") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production (Virtual Cluster)");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			Button.click(button = "Next");
		}

		task ("The button will then display the number of keys selected") {
			CP2ActivationKeys.selectClusterNodes(key_option = 1);

			CP2ActivationKeys.assertTextButton(text = "Generate Cluster (1 Keys)");

			CP2ActivationKeys.selectClusterNodes(key_option = 2);

			CP2ActivationKeys.assertTextButton(text = "Generate Cluster (2 Keys)");
		}
	}

	@description = "Automation ID: LPS-150812 | Test Summary: Verify that when the user downloads the keys a success message appears"
	@priority = 3
	test CanViewTheSuccessMessageAfterDownloadingTheNewKey {

		// TODO LPS-150812 CanViewTheSuccessMessageAfterDownloadingTheNewKey pending implementation

	}

	@description = "Automation ID: LPS-150807 | Test Summary: Verify if the user goes back to the previous screen no changes have been made"
	@ignore = "true"
	@priority = 3
	test UserGoesBackToThePreviousScreenAndNoChangesAreMade {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production (Virtual Cluster)");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("Given I click at 'Provious' button") {
			CustomerPortal.clickAtButton(text = "Previous");
		}

		task ("Then I should be able to view the previous forms fields values") {
			CP2ActivationKeys.assertSelectedFieldText(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.assertSelectedFieldText(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.assertSelectedFieldText(
				field = "Key Type",
				option = "Production (Virtual Cluster)");
		}
	}

	@description = "Automation ID: LPS-150804 | Test Summary: Verify if the Cluster Nodes field is required"
	@ignore = "true"
	@priority = 4
	test VerifyClusterNodesField {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the user can go through the first flow") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production (Virtual Cluster)");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			Button.click(button = "Next");
		}

		task ("And the Generate button must be disabled") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate Cluster ( Keys)");
		}

		task ("After filling in the Cluster Nodes field the button is then enabled") {
			CP2ActivationKeys.environmentDetails(
				environmentDetails = "name",
				value = "Liferay Test");

			CP2ActivationKeys.selectClusterNodes(key_option = 2);

			CustomerPortal.assertButtonIsActive(text = "Generate Cluster (2 Keys)");
		}
	}

	@description = "Automation ID: LPS-150803 | Test Summary: Verify if the Environment Name field is required"
	@ignore = "true"
	@priority = 4
	test VerifyEnvironmentNameField {

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Then the 'Generate New'z option is selected in the drop-down of the Action button") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the user can go through the first flow") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			Button.click(button = "Next");
		}

		task ("When the Environment Name field is not filled the message 'This field is required.' is displayed") {
			CP2ActivationKeys.environmentDetails(
				environmentDetails = "name",
				value = "Liferay Test");

			CP2ActivationKeys.environmentDetails(
				environmentDetails = "name",
				value = "");

			KeyPress(
				locator1 = "CustomerPortalSite#BODY",
				value1 = "\ESCAPE");

			Alert.viewErrorMessage(errorMessage = "This field is required.");
		}
	}

}