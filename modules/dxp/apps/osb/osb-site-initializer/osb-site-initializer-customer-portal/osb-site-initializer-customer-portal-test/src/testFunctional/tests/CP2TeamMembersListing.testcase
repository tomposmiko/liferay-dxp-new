@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-149746 | Test Summary: Verify if the team member table contains the following data (Name - Email - Support Seat - Role - Status)"
	@priority = "4"
	test AssertAllItemsInTheTable {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Assert the details of the table and page") {
			CP2TeamMembers.viewTableValue(
				email = "test@liferay.com",
				name = "Test Test",
				role = "Administrator",
				status = "Active");

			CP2TeamMembers.viewSupportSeatsAvailable(available = "2 of 3 available");

			AssertElementPresent(locator1 = "CP2TeamMembers#INVITE_BUTTON");

			Tooltip.viewHelpInfo(info = "The limit of support seats available counts the total of Administrators & Requesters roles assigned due to both have role permissions to open support tickets.");
		}
	}

	@description = "Automation ID: LPS-149752 | Test Summary: Verify that in the table the guest user is below the current user and its status is displayed as invited"
	@priority = "5"
	test AssertTheStatusAndOrderOfTheGuestUser {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Adding a user to the project") {
			JSONUser.addUser(
				userEmailAddress = "test.user@liferay.com",
				userFirstName = "Test",
				userLastName = "User",
				userScreenName = "Testing");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "test.user@liferay.com");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Account.assignUsers(
				accountName = "${testAccount}",
				assigneeName = "Test User");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Assert the users and their respective statuses") {
			CP2TeamMembers.assertTheInvitedUser(
				name = "Test User",
				status = "Invited");
		}

		task ("Delete user created") {
			JSONUser.deleteUserByEmailAddress(userEmailAddress = "test.user@liferay.com");
		}
	}

}