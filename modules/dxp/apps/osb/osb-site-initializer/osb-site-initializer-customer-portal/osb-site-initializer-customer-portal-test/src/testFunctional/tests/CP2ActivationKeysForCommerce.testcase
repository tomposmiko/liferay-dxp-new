@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testSiteTamplate = "Liferay OSB Site Initializer Customer Portal";
	var pageTitle = "Activation Keys";
	var testUser = "Test Test";
	var userFirstName = "Test";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			Site.openSitesAdmin();

			TeamExtranet.addSiteTemplateCP(
				siteName = "${testSiteName}",
				siteTemplateName = "${testSiteTamplate}");
		}

		task ("Go to Customer Portal") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${userFirstName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Verify that after clicking the 'Download Key' button the user downloads the appropriate Commerce license"
	@priority = "4"
	test CanDownloadTheKeyWhenASubscriptionIsSelected {
		property portal.upstream = "quarantine";

		// "Reason: Not eble to reproduce scenario without OKTA workaround.""

		task ("Assert that project has DXP 7.2") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.2");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.2");
		}

		task ("Assert Access to Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Select DropDown list of LES subscription"

		CP2DataUtil.generateStaticFullStartAndEndDate();

		// "Select DateTime format"
		// Select an active subscription term
		// Assert that Download button is active

		Button.click(button = "Download Key");

		Alert.viewSuccessMessage();

		CP2FileUtil.assertDownloadedFileIsPresent(downloadedFileName = "Document_1.xml");

		//Alert.viewErrorMessage(errorMessage = "Unable to download key, please try again.");

	}

	@description = "LPS-146072 - Verify that when selecting the 'Commerce' product the 'Activation Keys' page opens"
	@priority = "4"
	test CanViewActivationKeysPage {
		var accountsList = "7.4,7.3,7.2,7.1,7.0";

		for (var account : list "${accountsList}") {
			task ("Go to Test Account") {
				CustomerPortal.enterOnProject(title = "Test Account QA ${account}");

				CP2NavigationMenu.goToProductActivation();
			}

			task ("Assert that project has DXP ${account}") {
				CP2NavigationMenu.clickOnProductButton(product = "DXP");

				CP2ActivationKeys.assertDropDownSelection(option = "${account}");
			}

			task ("Assert access to Commerce Activation Key Page") {
				CP2NavigationMenu.clickOnProductButton(product = "Commerce");

				CustomerPortal.assertPageTitle(title = "${pageTitle}");
			}

			task ("Go to Customer Portal") {
				ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

				CustomerPortal.waitCP20PageToLoad(userFirstName = "${userFirstName}");
			}
		}
	}

	test CanViewActivationTextWhenTheVersionHasNoValue {
		var accountsList = "7.4,7.3";

		for (var account : list "${accountsList}") {
			task ("Go to Test Account") {
				CustomerPortal.enterOnProject(title = "Test Account QA ${account}");

				CP2NavigationMenu.goToProductActivation();
			}

			task ("Assert that project has DXP ${account}") {
				CP2NavigationMenu.clickOnProductButton(product = "DXP");

				CP2ActivationKeys.assertDropDownSelection(option = "${account}");
			}

			task ("Assert access to Commerce Activation Key Page") {
				CP2NavigationMenu.clickOnProductButton(product = "Commerce");

				CustomerPortal.assertPageTitle(title = "${pageTitle}");
			}

			task ("Assert Commerce Activation Key Page") {
				CP2NavigationMenu.clickOnProductButton(product = "Commerce");

				CustomerPortal.assertPageTitle(title = "${pageTitle}");

				var versions = "DXP 7.4 GA1+,DXP 7.3 FP3/SP2+,DXP 7.3 FP2/SP1";
				var instructions = "All Commerce modules are enabled by default.,Commerce is activated using a portal property.,Commerce requires an activation key.";

				CP2ActivationKeys.assertInstructionsTable(textList = "${versions}");

				CP2ActivationKeys.assertInstructionsTable(textList = "${instructions}");
			}

			task ("Go to Customer Portal") {
				ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

				CustomerPortal.waitCP20PageToLoad(userFirstName = "${userFirstName}");
			}
		}
	}

	@description = "Verify that once a subscription is selected, the next drop-down is populated with a list of start and end dates."
	@priority = "4"
	test CanViewListOfStartAndEndDatesActiveSubscriptionTerms {
		property portal.upstream = "quarantine";

		// Reason: Not eble to reproduce scenario without OKTA workaround.

		task ("Assert that project has DXP 7.2") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.2");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.2");
		}

		task ("Assert Access Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Assert DropDown list of LES subscription is populated"
		// "Assert Subscription Start and End Date Time Option is populated"

		task ("Assert that project has DXP 7.1") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.1");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.1");
		}

		task ("Assert Access Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		task ("Assert that project has DXP 7.1") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.0");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.0");
		}

		task ("Assert Access Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Assert DropDown list of LES subscription is populated")
		// "Assert Subscription Start and End Date Time Option is populated")

	}

	@description = "Verify that when the DXP version of the project is below 7.3, clicking on subscriptions the user can select from a drop-down list their LES subscriptions."
	@priority = "5"
	test CanViewTheDropdownListWhenTheVersionIsLowerThanTheCurrentOne {
		property portal.upstream = "quarantine";

		// Reason: Not eble to reproduce scenario without OKTA workaround.

		task ("Assert that project has DXP 7.2") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.2");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.2");
		}

		task ("Assert Access to Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Assert DropDown list of LES subscription")

		task ("Go to Customer Portal") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Assert that project has DXP 7.1") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.1");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.1");
		}

		task ("Assert Access to Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Assert DropDown list of LES subscription"

		task ("Go to Customer Portal") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${userFirstName}");
		}

		task ("Assert that project has DXP 7.0") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.0");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.0");
		}

		task ("Assert Access to Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Assert DropDown list of LES subscription"

	}

	@description = "Verify that after choosing a subscription the 'Download Key' button is enabled."
	@priority = "4"
	test SelectingASubscriptionTheDownloadSearchButtonIsEnabled {
		property portal.upstream = "quarantine";

		// "Reason: Not eble to reproduce scenario without OKTA workaround.""

		task ("Assert that project has DXP 7.2") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.2");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.2");
		}

		task ("Assert Access to Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Select DropDown list of LES subscription"

		CP2DataUtil.generateStaticFullStartAndEndDate();

		// "Select DateTime format"
		// Select an active subscription term
		// Assert that Download button is active

	}

	@description = "Verify that the active subscription terms with the list of dates, is as follows (Dec 01, 2020 - Dec 01, 2021)."
	@priority = "4"
	test SetTheDateFormatOfTheActivationList {
		property portal.upstream = "quarantine";

		// "Reason: Not eble to reproduce scenario without OKTA workaround.""

		task ("Assert that project has DXP 7.2") {
			CustomerPortal.enterOnProject(title = "Test Account QA 7.2");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.assertDropDownSelection(option = "7.2");
		}

		task ("Assert Access to Commerce Activation Key Page") {
			CP2NavigationMenu.clickOnProductButton(product = "Commerce");

			CustomerPortal.assertPageTitle(title = "${pageTitle}");
		}

		// "Select DropDown list of LES subscription"

		CP2DataUtil.generateStaticFullStartAndEndDate();

		// "Assert DateTime format"

	}

}