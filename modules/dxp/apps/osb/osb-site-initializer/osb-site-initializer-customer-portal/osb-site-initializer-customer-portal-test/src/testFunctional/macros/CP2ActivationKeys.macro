definition {

	macro _formatCamelCase {
		var camelCase = StringUtil.replace("${camelCase}", " ", "");

		var camelCase = StringUtil.lowerCaseFirstLetter("${camelCase}");

		return "${camelCase}";
	}

	macro assertDropdownItemIsDisabled {
		var key_dropdownItem = "${dropdownItem}";

		AssertElementPresent(locator1 = "CP2ActivationKeys#DISABLED_DROPDOWN_ITEM_BUTTON");
	}

	macro assertDropdownItemIsEnabled {
		var key_dropdownItem = "${dropdownItem}";

		AssertElementPresent(locator1 = "CP2ActivationKeys#ENABLED_DROPDOWN_ITEM_BUTTON");
	}

	macro assertDropdownItemIsVisible {
		var key_dropdownItem = "${dropdownItem}";

		AssertVisible(locator1 = "CP2ActivationKeys#DROPDOWN_ITEM_BUTTON");
	}

	macro assertDropdownSelection {
		var key_option = "${option}";

		AssertVisible(locator1 = "CP2ActivationKeys#DROPDOWN");
	}

	macro assertInstructionsTable {
		for (var text : list "${textList}") {
			var key_text = "${text}";

			AssertVisible(locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	macro assertKeyDetailsEnvironmentElements {
		var key_group = "Environment";

		if (isSet(product)) {
			var key_label = "Version";
			var key_value = "${product}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(version)) {
			var key_label = "Version";
			var key_value = "${version}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(environmentType)) {
			var key_label = "Environment Type";
			var key_value = "${environmentType}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(subscriptionType)) {
			var key_label = "Environment Type";
			var key_value = "${subscriptionType}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(instanceSize)) {
			var key_label = "Instance Size";
			var key_value = "${instanceSize}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}
	}

	macro assertKeyDetailsServerElements {
		var key_group = "Server";

		if (isSet(keyType)) {
			var key_label = "Key Type";
			var key_value = "${keyType}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(hostName)) {
			var key_label = "Host Name";
			var key_value = "${hostName}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(ipAddress)) {
			var key_label = "IP Addresses";
			var key_value = "${ipAddress}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(macAddress)) {
			var key_label = "MAC Addresses";
			var key_value = "${macAddress}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(clusterNodes)) {
			var key_label = "Cluster Nodes";
			var key_value = "${clusterNodes}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}
	}

	macro assertKeyDetailsStatusElements {
		var key_group = "Activation Status";

		if (isSet(status)) {
			var key_label = "Status";
			var key_value = "${status}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(startDate)) {
			var key_label = "Start Date";
			var key_value = "${startDate}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(expirationDate)) {
			var key_label = "Expiration Date";
			var key_value = "${expiratonDate}";

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}
	}

	macro assertLicenseQuantity {
		var key_licenseTab = CP2ActivationKeys._formatCamelCase(camelCase = "${licenseTab}");
		var key_numberOfLicenses = "${numberOfLicenses}";

		AssertElementPresent(locator1 = "CP2ActivationKeys#LICENSE_TAB_BUTTON_NUMBER");
	}

	macro assertTextAtTable {
		var key_linePosition = "${linePosition}";
		var key_colunmPosition = "${lineColunm}";
		var key_text = "${text}";

		AssertTextEquals(
			locator1 = "CP2ActivationKeys#TABLE_ELEMENT_BY_POSITION",
			value1 = "${text}");
	}

	macro assertTooltipIsVisible {
		var key_text = "${text}";

		AssertVisible(locator1 = "CP2ActivationKeys#TOOLTIPS_TEXT");
	}

	macro clickAtDownloadButton {
		var key_entitlementName = "${entitlementName}";

		Click(locator1 = "CP2ActivationKeys#TABLES_DOWNLOAD_BUTTON");

		DownloadTempFile();
	}

	macro clickAtDropdownItem {
		var key_dropdownItem = "${dropdownItem}";

		Click(locator1 = "CP2ActivationKeys#DROPDOWN_ITEM_BUTTON");
	}

	macro countTableRows {
		var key_rowCount = "1";
		var rowCount = "0";
		var hasPagesToCount = "true";

		while (("${hasPagesToCount}" == "true")) {
			while ((IsElementPresent(locator1 = "CP2ActivationKeys#KEYS_TABLE_ROWS")) && (maxIterations = "51")) {
				var key_rowCount = ${key_rowCount} + 1;
				var rowCount = ${rowCount} + 1;
			}

			if ((IsElementPresent(locator1 = "CP2ActivationKeys#KEYS_TABLE_ROWS")) && (IsElementNotPresent(locator1 = "CP2ActivationKeys#DISABLED_NEXT_PAGE_BUTTON"))) {
				var key_rowCount = "1";

				CP2ActivationKeys.goToNextTablePage();
			}
			else {
				var hasPagesToCount = "false";
			}
		}

		return "${rowCount}";
	}

	macro deactivateExistingKey {
		Search.searchCP(searchTerm = "${environmentName}");

		CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(key_environmentName = "${environmentName}");

		Button.click(button = "Deactivate");

		WaitForElementPresent(
			key_text = "I certify that the instances activated with the selected activation keys has have been shut down and that there is no liferay software installed deployed used or executed that is activated with the selected activation keys.",
			locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");

		Button.click(button = "Confirm Deactivate Keys");

		Button.click(button = "continue");

		Alert.viewSuccessMessage();
	}

	macro exportAllKeyDetails {
		Click(
			key_text = "Actions",
			locator1 = "Button#ANY");

		Click(
			key_action = "Export All Key Details (csv)",
			locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

		Alert.viewSuccessMessage();

		CP2FileUtil.assertDownloadedFileIsPresent(downloadedFileName = "${fileName}");
	}

	macro filterKeyTable {
		var key_filterOption = "${filterOption}";

		CustomerPortal.clickAtButton(text = "Filter");

		CP2ActivationKeys.clickAtDropdownItem(key_dropdownItem = "${filterType}");

		Check.checkNotVisible(locator1 = "CP2ActivationKeys#FILTER_CHECKBOX");

		CustomerPortal.clickAtButton(text = "Apply");
	}

	macro formatLicenseFileName {
		if (!(isSet(licenseType))) {
			var licenseType = "";
		}
		else {
			var licenseType = "${licenseType}-";
		}

		if (!(isSet(product))) {
			var product = "";
		}
		else {
			var product = "${product}-";
		}

		if (!(isSet(version))) {
			var version = "";
		}
		else {
			var version = "${version}-";
		}

		if (!(isSet(licenseName))) {
			var licenseName = "";
		}

		if (!(isSet(copy))) {
			var copy = "";
		}
		else {
			var copy = " (${copy})";
		}

		var downloadedFileName = "${licenseType}${product}${version}${licenseName}";

		var downloadedFileName = StringUtil.toLowerCase("${downloadedFileName}");

		var downloadedFileName = StringUtil.replace("${downloadedFileName}", " ", "");

		var downloadedFileName = "${downloadedFileName}${copy}.${fileType}";

		echo("Expected file name: ${downloadedFileName}");

		return "${downloadedFileName}";
	}

	macro generateNewKey {
		Click(
			key_text = "Actions",
			locator1 = "Button#ANY");

		Click(
			key_action = "Generate New",
			locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

		AssertElementPresent(locator1 = "CP2ActivationKeys#GENERATE_KEY_FORM");
	}

	macro gotoKeyDeactivation {
		Click(
			key_text = "Actions",
			locator1 = "Button#ANY");

		Click(
			key_action = "Deactivate",
			locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

		AssertElementPresent(locator1 = "CP2ActivationKeys#DEACTIVATE_KEY_PAGE");
	}

	macro goToKeyTab {
		var key_licenseTab = CP2ActivationKeys._formatCamelCase(camelCase = "${licenseTab}");

		Click(locator1 = "CP2ActivationKeys#LICENSE_TAB_BUTTON");
	}

	macro goToNextTablePage {
		ScrollWebElementIntoView(locator1 = "CP2ActivationKeys#NEXT_PAGE_BUTTON");

		Click(locator1 = "CP2ActivationKeys#NEXT_PAGE_BUTTON");
	}

	macro putMouseOverElementAtTable {
		var key_text = "${text}";

		MouseOver(locator1 = "CP2ActivationKeys#TABLE_ELEMENT_BY_TEXT");
	}

	macro selectAllKeysOnPage {
		Check(locator1 = "CP2ActivationKeys#KEY_CHECKBOX_ALL");
	}

	macro selectKeyCheckboxByEnvironmentName {
		var key_environmentName = "${environmentName}";

		Check(locator1 = "CP2ActivationKeys#KEY_CHECKBOX");
	}

	macro selectKeyCheckboxByExpirationDate {
		var key_position = "${position}";
		var key_date = "${date}";

		Check(locator1 = "CP2ActivationKeys#KEY_CHECKBOX_BY_EXPIRATION_DATE");
	}

	macro selectKeyType {
		var key_label = "Key Type";

		Select(
			locator1 = "CP2ActivationKeys#KEY_COMPONENT_OPTION",
			value1 = "${key_option}");
	}

	macro selectPaginationQuantity {
		if (IsElementPresent(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON")) {
			Click(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON");

			AssertVisible(
				key_quantity = "${quantity}",
				locator1 = "CP2ActivationKeys#PAGINATION_BUTTON_ITEM");

			Click(
				key_quantity = "${quantity}",
				locator1 = "CP2ActivationKeys#PAGINATION_BUTTON_ITEM");
		}
	}

	macro selectProductVersion {
		var key_label = "Version";

		Select(
			locator1 = "CP2ActivationKeys#KEY_COMPONENT_OPTION",
			value1 = "${key_option}");
	}

	macro selectSubscription {
		Click(
			key_position = "${position}",
			locator1 = "CP2ActivationKeys#SUBSCRIPTION_CHOICE");
	}

	macro viewActivationKeyDetails {
		Search.searchCP(searchTerm = "${key_environmentName}");

		Click(
			key_text = "${key_environmentName}",
			locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");

		AssertElementPresent(
			key_environmentName = "${key_environmentName}",
			locator1 = "CP2ActivationKeys#KEY_DETAILS_MODAL");
	}

}