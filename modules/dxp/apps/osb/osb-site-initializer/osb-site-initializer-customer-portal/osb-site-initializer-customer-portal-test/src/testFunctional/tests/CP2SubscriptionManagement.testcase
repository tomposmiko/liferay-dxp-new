@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-147029 | Test Summary: Verify that the cards Subscriptions displays (Product logo - Subscription - Instance Size - Start Date - End Date)"
	@priority = "5"
	test AffirmAllCardInformation {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Assert the signature card details") {
			CustomerPortal.viewCardValue();
		}
	}

	@description = "Automation ID: LPS-147027 | Test Summary: Verify if the Active status reflects the dates displayed"
	@priority = "4"
	test IfActiveStatusReflectsDate {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account LXC-SM");
		}

		task ("Assert if the Active status reflects the dates") {
			AssertElementPresent(
				date = "03/31/2021 - 03/30/2022",
				locator1 = "CustomerPortalSite#CARD_DATE",
				status = "Active");
		}
	}

	@description = "Automation ID: LPS-147025 | Test Summary: Verify if the Expired status reflects the dates displayed"
	@priority = "4"
	test IfExpiredStatusReflectsDate {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(
				status = "Expired",
				title = "Test Account Analyticd Cloud");
		}

		task ("Assert if the Expired status reflects the dates") {
			AssertElementPresent(
				date = "03/31/2021 - 06/30/2021",
				locator1 = "CustomerPortalSite#CARD_DATE",
				status = "Expired");
		}
	}

	@description = "Automation ID: LPS-147026 | Test Summary: Verify if the Future status reflects the dates displayed"
	@priority = "4"
	test IfFutureStatusReflectsDate {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(
				status = "Future",
				title = "Test Account Portal");
		}

		task ("Assert if the Future status reflects the dates") {
			AssertElementPresent(
				date = "01/14/2023 - 01/13/2028",
				locator1 = "CustomerPortalSite#CARD_DATE",
				status = "Future");
		}
	}

	@description = "Automation ID: LPS-147021 | Test Summary: Verify if a tab is shown only if there are subscriptions to display on that tab"
	@priority = "5"
	test IfTabAppearOnlyWithSubscriptions {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(
				status = "Future",
				title = "Test Account Portal");
		}

		task ("Assert that the tab is being displayed") {
			AssertElementNotPresent(locator1 = "CustomerPortalSite#SUBSCRIPTION_NAVBAR1");
		}
	}

	@description = "Automation ID: LPS-147034 | Test Summary: Verify if when the project has up to 3 options in the tabs for subscription management, the tabs are listed side by side"
	@priority = "4"
	test LessThan5TabsAreSideBySide {
		task ("Given I set up the width of window desktop") {
			SetWindowSize(value1 = "1920,1080");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account Commerce");
		}

		task ("Assert that the signatures are being displayed in the tab") {
			CustomerPortal.viewSubscriptionManagementTab(productTab = "LXC-SM,Commerce,Enterprise Search");
		}
	}

	@description = "Automation ID: LPS-147022 | Test Summary: Verify if when the user doesn't have a subscription then a tab will not be shown"
	@priority = "4"
	test TabDontAppearWithoutSubscription {
		task ("Given I set up the width of window desktop") {
			SetWindowSize(value1 = "1920,1080");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account Partnership");
		}

		task ("Assert that no tabs are displayed") {
			AssertElementNotPresent(locator1 = "CustomerPortalSite#SUBSCRIPTION_NAVBAR");
		}
	}

	@description = "Automation ID: LPS-147035 | Test Summary: Verify if when a project has at least 5 options in the tabs for subscription management, the tab list turns into a dropdown list"
	@priority = "4"
	test Tabs5OrMoreBecamesDropdownList {
		task ("Given I set up the width of window desktop") {
			SetWindowSize(value1 = "1920,1080");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "Test Account Others");
		}

		task ("Assert the drop-down list") {
			CustomerPortal.viewSubscriptionManagementList(productList = "LXC-SM,DXP,Analytics Cloud,Commerce,Enterprise Search,Portal,Partnership");
		}
	}

}