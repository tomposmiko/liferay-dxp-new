@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account LXC - SM";
	var testProduct = "LXC - SM";
	var testUserFirstName = "Test";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-149145 | Test Summary: Verify if when a Liferay Staff fills out the activation form before the first client admin, it will not go through the form in the integration flow"
	@priority = "3"
	test CannotSeeTheFormInTheIntegrationFlow {

		// TODO LPS-149145 CannotSeeTheFormInTheIntegrationFlow pending implementation

	}

	@description = "Automation ID: LPS-149144 | Test Summary: Verify if after a user submits the DXP Cloud activation form and then tries to resend it (or another user) in another browser window a helpful message is shown"
	@priority = "4"
	test CanViewAUsefulMessage {
		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to Customer Portal Site") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${testUserFirstName}");
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("And I go through onboarding") {
			CP2Utils.onboardingFlow();
		}

		task ("Then I click on the LXC - SM product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Then I open a new browser tab and send the card activation form") {
			Open.openInTheNewTab(locator1 = "http://localhost:8080");

			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CustomerPortal.clickOnFinishActivationButton();

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();

			CustomerPortal.clickAtButton(text = "Submit");

			Navigator.closeWindow();
		}

		task ("And I go back to my first tab, fill in the form again and send it") {
			CustomerPortal.clickOnFinishActivationButton();

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();

			CustomerPortal.clickAtButton(text = "Submit");
		}

		task ("Then I assert that the form has already been sent") {
			CustomerPortal.viewConfirmationModal(text = "Another user already submitted the LXC - SM activation request.");

			CustomerPortal.clickAtButton(text = "Done");
		}

		task ("Delete the entries and objects created") {
			CP2DXPCloudSetup.clearAndDeleteDXPCloudEntries(
				position = "1",
				status = "In-Progress");

			CP2Utils.deleteSpecificObjectEntry(
				email = "test@liferay.com",
				portlet = "Admins DXP Cloud");
		}
	}

}