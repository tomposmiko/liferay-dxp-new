@component-name = "portal-solutions"
definition {

	property custom.properties = "javascript.single.page.application.enabled=false${line.separator}jsonws.web.service.paths.excludes=";
	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account QA 7.4";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

			CustomerPortal.customerPortalApisTearDown();
		}
	}

	@description = "LPS-148083 - Verify that an activation key's details pop up has all necessary information in the Environment, Status, and Server groups."
	@priority = "5"
	test IfAllKeyElementsArePresent {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then the modal will show all elements of the Environment, Server, and Status groups") {
			CP2ActivationKeys.assertKeyDetailsEnvironmentElements(
				environmentType = "Production",
				instanceSize = "1",
				product = "DXP",
				subscriptionType = "Subscription",
				version = "7.4");

			CP2ActivationKeys.assertKeyDetailsServerElements(
				hostName = "Redacted",
				ipAddress = "Redacted",
				keyType = "On-Premise",
				macAddress = "Redacted");

			CP2ActivationKeys.assertKeyDetailsStatusElements(
				expirationDate = "Does Not Expire",
				startDate = "Nov 30, 2021",
				status = "Activated");
		}
	}

	@description = "LPS-148088 - Verify that the close button on the Activation Key Details popup works."
	@priority = "3"
	test IfCloseButtonWorks {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and clicks on a key") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then the user will have the option to close the pop up modal") {
			Button.click(button = "Close");

			AssertElementNotPresent(
				key_environmentName = "Redacted",
				locator1 = "CP2ActivationKeys#KEY_DETAILS_MODAL");
		}
	}

	@description = "LPS-148086 - Verify that a Virtual activation key's details pop up will have a section for Cluster Nodes"
	@priority = "4"
	test IfClusterNodesIsOnServerColumn {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key with a Virtual Cluster key type") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Liferay");
		}

		task ("Then the modal will show 'Cluster Nodes' on the Server group") {
			CP2ActivationKeys.assertKeyDetailsServerElements(
				clusterNodes = "1",
				keyType = "Virtual Cluster");
		}
	}

	@description = "LPS-148085 - Verify that the copy button works on an activation key's details pop up window."
	@priority = "4"
	test IfCopyButtonWorks {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then clicking the copy icon for each value will save the value to the clipboard") {
			for (var serverValue : list "HOST_NAME,IP_ADDRESS,MAC_ADDRESS") {
				Click(locator1 = "CP2ActivationKeys#COPY_ICON_${serverValue}");

				Alert.viewSuccessMessage();
			}
		}
	}

	@description = "LPS-148079 - Verify that an activation key's details pop up appears when clicking on a key."
	@priority = "5"
	test PopUpShowsFromActivationKey {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then the user can click an individual key and a modal for the activation key's details will pop up") {
			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}
	}

}