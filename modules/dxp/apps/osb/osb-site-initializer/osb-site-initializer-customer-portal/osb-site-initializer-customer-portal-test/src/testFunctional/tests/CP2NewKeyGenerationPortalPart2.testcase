@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account Portal";
	var testProduct = "Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-151797 | Test Summary: Verify if '+ Add Activation Key' button is disabled when the user reaches the maximum number of activation keys allowed"
	@ignore = "true"
	@priority = "4"
	test IfAddActivationIsDisabledWithMaximumNumber {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I fulfill entire flow up to the second phase for Generate New License") {
			CP2ActivationKeys.generateKeyFlow(
				product = "Portal",
				project = "NASA ICE");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "Portal");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "6.1 GA1");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("Given I fulfill the Environment field") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");
		}

		task ("When I add the maximum of Activation Keys") {
			CP2ActivationKeys.fulfillActivationKey();
		}

		task ("Then I should be able to see the '+ Add Activation Key' button disabled") {
			CustomerPortal.assertButtonIsDisabled(text = "Add Activation Key");
		}

		task ("When I put the mouse over the '+ Add Activation Key' button") {
			CustomerPortal.putMouseOverButton(text = "Add Activation Key");
		}

		task ("Then I should be able to see the tool tip with the text 'Maximum number of Activation Keys reached for this subscription.'") {
			CP2ActivationKeys.assertTooltipIsVisible(text = "Maximum number of Activation Keys reached for this subscription.");
		}
	}

	@description = "Automation ID: LPS-151788 | Test Summary: Verify if when user fill the mandatory field and at least one detail from Activation Key Server Details, button 'Generate 1 Key' is already enable"
	@ignore = "true"
	@priority = "4"
	test IfGenerate1KeyIsEnable {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("And I go to generate a new key") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("Given I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "Portal");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "6.1 GA1");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("Then The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}

		task ("And when fulfill the Environment and Host name fields") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "localhost",
				field = "Host Name");
		}

		task ("Then The Generate button should be active") {
			CustomerPortal.assertButtonIsActive(text = "Generate 1 Key");
		}
	}

	@description = "Automation ID: LPS-151805 | Test Summary: Verify if 'Generate X Keys' is disabled if any of the server details have an unexpected format. (ex. invalid IP address)"
	@ignore = "true"
	@priority = "3"
	test IfGenerateXKeysIsDisabled {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I fulfill entire flow up to the second phase for Generate New License") {
			CP2ActivationKeys.generateKeyFlow(
				product = "Portal",
				project = "NASA ICE");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "Portal");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "6.1 GA1");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("Given I active IP and MAC Address field") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "",
				field = "IP Address");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "",
				field = "MAC Address");
		}

		task ("Given I fulfill the IP Address field with a invalid IP") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "1234567789",
				field = "IP Address");
		}

		task ("Then I should see the alert with the text 'Invalid IP.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "Invalid IP.");
		}

		task ("Given I fulfill the IP Address field with a IP with white spaces") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "192.168 .1.1",
				field = "IP Address");
		}

		task ("Then I should see the alert with the text 'The IP most not have spaces.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "The IP must not have spaces.");
		}

		task ("When I fulfill the IP Address field with a valid IP") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "192.168.1.1",
				field = "IP Address");
		}

		task ("Then I should not see the alert with the text 'Invalid IP.'") {
			CustomerPortal.assertErrorMessageIsNotVisible(errorMessage = "Invalid IP.");
		}

		task ("Then I should not see the alert with the text 'The IP must not have spaces.'") {
			CustomerPortal.assertErrorMessageIsNotVisible(errorMessage = "The IP must not have spaces.");
		}

		task ("When I fulfill the MAC Address field with a invalid MAC") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "InvalidMACAddress",
				field = "MAC Address");
		}

		task ("Then I should see the alert with the text 'Invalid Mac.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "Invalid MAC.");
		}

		task ("When I fulfill the MAC Address field with a MAC with white spaces") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "A0-B1-C2- D3-E4-F5",
				field = "MAC Address");
		}

		task ("Then I should see the alert with the text 'The Mac must not have spaces.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "The MAC must not have spaces.");
		}

		task ("When I fulfill the MAC Address field with a valid MAC") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "A0-B1-C2-D3-E4-F5",
				field = "MAC Address");
		}

		task ("Then I should not see the alert with the text 'Invalid MAC.'") {
			CustomerPortal.assertErrorMessageIsNotVisible(errorMessage = "Invalid MAC.");
		}
	}

	@description = "Automation ID: LPS-151804 | Test Summary: Verify if '- Remove Activation Key' is working if there are at least 2 sets of Server Details on the form"
	@ignore = "true"
	@priority = "4"
	test IfRemoveActivationKeyIsWorking {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I fulfill entire flow up to the second phase for Generate New License") {
			CP2ActivationKeys.generateKeyFlow(
				product = "Portal",
				project = "NASA ICE");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "Portal");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "6.1 GA1");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("Given I fulfill the Environment field") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");
		}

		task ("And the '- Remove Activation Key' button should not be preset") {
			CustomerPortal.assertButtonNotPresent(text = "Remove Activation Key");
		}

		task ("And I fulfill all fields") {
			CP2ActivationKeys.fulfillActivationKey();
		}

		task ("And I click at '+ Add Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Add Activation Key");
		}

		task ("Then I should be able to view '- Remove Activation Key' button") {
			CustomerPortal.viewButton(text = "Remove Activation Key");
		}

		task ("When I click at '- Remove Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Remove Activation Key");
		}

		task ("And I fulfill all fields two times") {
			CP2ActivationKeys.fulfillActivationKey(numberOfActivationKeys = "3");
		}

		task ("Then I should be able to view '- Remove Activation Key' button") {
			CustomerPortal.viewButton(text = "Remove Activation Key");
		}

		task ("When I click at '- Remove Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Remove Activation Key");
		}

		task ("Then I should be able to view '- Remove Activation Key' button") {
			CustomerPortal.viewButton(text = "Remove Activation Key");
		}

		task ("When I click at '- Remove Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Remove Activation Key");
		}

		task ("Then the '- Remove Activation Key' button should not be preset") {
			CustomerPortal.assertButtonNotPresent(text = "Remove Activation Key");
		}
	}

	@description = "Automation ID: LPS-151798 | Test Summary: Verify if the user can enter more than one IP addresses"
	@ignore = "true"
	@priority = "3"
	test IfUserCanAddMoreIPAddresses {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I fulfill entire flow up to the second phase for Generate New License") {
			CP2ActivationKeys.generateKeyFlow(
				product = "Portal",
				project = "NASA ICE");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "Portal");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "6.1 GA1");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("When I fulfill the IP Address field with a two valid IP") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "1.1.1.1",
				field = "IP Address");

			KeyPress.keyPressNoError(
				locator1 = "KaleoDesignerEditWorkflow#BODY",
				value1 = "\ENTER");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "2.2.2.2",
				field = "IP Address");
		}
	}

	@description = "Automation ID: LPS-151802 | Test Summary: Verify if the user can enter more than one MAC addresses"
	@ignore = "true"
	@priority = "3"
	test IfUserCanAddMoreMACAddresses {

		// Needs refactor since it depends on example NASA ICE account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I fulfill entire flow up to the second phase for Generate New License") {
			CP2ActivationKeys.generateKeyFlow(
				product = "Portal",
				project = "NASA ICE");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "Portal");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "6.1 GA1");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("When I fulfill the MAC Address field with a two valid MAC") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "10-10-10-10-10-10",
				field = "MAC Address");

			KeyPress.keyPressNoError(
				locator1 = "KaleoDesignerEditWorkflow#BODY",
				value1 = "\ENTER");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "20-20-20-20-20-20",
				field = "MAC Address");
		}
	}

}