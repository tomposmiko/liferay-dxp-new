@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testSiteTamplate = "Liferay OSB Site Initializer Customer Portal";
	var testAccount = "Test Account QA 7.4,Test Account QA 7.1";
	var testUserFirstName = "Test";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}

		task ("Login on OKTA") {
			CustomerPortal.loginOktaToUpdateCP();
		}

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${testUserFirstName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-147575 | Test Summary: Verify activation keys contain: Environment Name - Key Type - Environment Type - Exp. Date - Status - Download"
	@ignore = "true"
	@priority = "3"
	test AssertAllColumnsInTheTable {

		// Needs refactor since it depends on example NASA ICE account

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "NASA ICE");

			CustomerPortal.enterOnProject(title = "NASA ICE");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then I assert all the values from the table") {
			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "2",
				linePosition = "2",
				text = "Redacted");

			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "3",
				linePosition = "2",
				text = "On-Premise");

			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "4",
				linePosition = "2",
				text = "Non-Prod");

			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "5",
				linePosition = "2",
				text = "Sep 7, 2022");

			CP2ActivationKeys.putMouseOverStatusElementAtTable(
				linePosition = "2",
				status = "Expired");

			CP2ActivationKeys.assertTooltipIsVisible(text = "Expired");
		}
	}

	@description = "Automation ID: LPS-147571 | Test Summary: Assert that paging is only displayed when the table contains at least one key"
	@ignore = "true"
	@priority = "3"
	test AssertThatThePageIsNotShownWhenThereAreNoKeys {

		// Needs refactor since it depends on example NASA ICE account

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account DXP");

			CustomerPortal.enterOnProject(title = "Test Account DXP");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("When I enter a project that has no table/keys available, then I shouldn't see the pagination") {
			CP2ActivationKeys.assertTableIsNotVisible();

			CP2ActivationKeys.assertThatPaginationDoesNotAppear();
		}

		task ("Then I go to another project") {
			CP2Utils.clickBreadcrumb(project = "NASA ICE");
		}

		task ("And I click at the All tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "All");
		}

		task ("When I select 5 Items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "5");
		}

		task ("Then I should be able to see the pagination button with the text Show 5 Items") {
			CustomerPortal.assertButtonIsVisible(text = "Show 5 Items");
		}
	}

	@description = "Automation ID: LPS-147568 | Test Summary: Assert that the tab statuses reflect with the amount of keys displayed in the table"
	@priority = "4"
	test AssertThatTheTabDisplaysTheFollowingStatuses {

		// TODO LPS-147568 AssertThatTheTabDisplaysTheFollowingStatuses pending implementation

	}

	@description = "Automation ID: LPS-147582 | Test Summary: Verify that when the user clicks on the download icon a key is downloaded"
	@ignore = "true"
	@priority = "4"
	test CanViewTheActivationKeyDownload {

		// Needs refactor since it depends on example NASA ICE account

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "NASA ICE");

			CustomerPortal.enterOnProject(title = "NASA ICE");
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("And I get the formated name for the activation key file") {
			var expectedDownloadedFileName = CP2ActivationKeys.formatLicenseFileName(
				fileType = "xml",
				licenseName = "${testAccount}",
				licenseType = "activation-key",
				product = "DXP",
				version = "7.0");
		}

		task ("When I click on the download button at the Activation Keys Table") {
			CP2ActivationKeys.clickAtDownloadButton(entitlementName = "NASA ICE");
		}

		task ("Then I should see the downloaded file") {
			CP2FileUtil.assertDownloadedFileIsPresent(downloadedFileName = "${expectedDownloadedFileName}");
		}
	}

	@description = "LPS-150784 - Verify if the 'Activated' tab displays the number of keys for it"
	@ignore = "true"
	@priority = "4"
	test VerifyTheActivatedTabDisplaysTheNumberOfKeys {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "Activated";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("And I click at the Activated tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "${keyStatus}");
		}

		task ("When I count the numbers of rows") {
			var keyCount = CP2ActivationKeys.countTableRows();
		}

		task ("Then I assert that the amount of rows is equals to the number at the tab") {
			CP2ActivationKeys.assertLicenseQuantity(
				licenseTab = "${keyStatus}",
				numberOfLicenses = "${keyCount}");
		}
	}

	@description = "LPS-160211 - Verify if the 'All' tab displays the number of keys for it"
	@ignore = "true"
	@priority = "4"
	test VerifyTheAllTabDisplaysTheNumberOfKeys {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("And I click at the All tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "${keyStatus}");
		}

		task ("When I count the numbers of rows") {
			var keyCount = CP2ActivationKeys.countTableRows();
		}

		task ("Then I assert that the amount of rows is equals to the number at the tab") {
			CP2ActivationKeys.assertLicenseQuantity(
				licenseTab = "${keyStatus}",
				numberOfLicenses = "${keyCount}");
		}
	}

	@description = "LPS-150787 - Verify that by default pagination option is 'Show 5 Items'"
	@ignore = "true"
	@priority = "4"
	test VerifyTheDefaultPaginationOption {
		property portal.upstream = "quarantine";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("When I click at the All tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "All");
		}

		task ("Then I should be able to see the pagination button with the text 'Show 5 Items' by default") {
			CustomerPortal.assertButtonIsVisible(text = "Show 5 Items");
		}
	}

	@description = "LPS-150793 - Verify if the date from Expiration Date has a format like this (Month, Day, Year)"
	@ignore = "true"
	@priority = "4"
	test VerifyTheExpirationDateFormat {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("And I generate full start and end date for the license") {
			CP2DataUtil.generateStaticFullStartAndEndDate();
		}

		task ("Then I assert the the date is correct") {
			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "5",
				linePosition = "1",
				text = "${staticFullEndDate}");
		}
	}

	@description = "LPS-150786 - Verify if the 'Expired' tab displays the number of keys for it"
	@ignore = "true"
	@priority = "4"
	test VerifyTheExpiredTabDisplaysTheNumberOfKeys {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "Expired";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal}");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("And I click at the Expired tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "${keyStatus}");
		}

		task ("When I count the numbers of rows") {
			var keyCount = CP2ActivationKeys.countTableRows();
		}

		task ("Then I assert that the amount of rows is equals to the number at the tab") {
			CP2ActivationKeys.assertLicenseQuantity(
				licenseTab = "${keyStatus}",
				numberOfLicenses = "${keyCount}");
		}
	}

	@description = "LPS-150794 - Verify that when you hover the mouse over 'DNE' a tooltip appears with a message 'This key does not expire'"
	@ignore = "true"
	@priority = "3"
	test VerifyTheMessageWhenMouseOverDNE {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("When I put the mouse over the Enviroment Name of a key at the table") {
			CP2ActivationKeys.putMouseOverElementAtTable(text = "DNE");
		}

		task ("Then I should see a tooltip with the 'This key does not expire' text") {
			CP2ActivationKeys.assertTooltipIsVisible(text = "This key does not expire");
		}
	}

	@description = "LPS-150790 - Verify if when you hover the mouse over any cell 'Environment name' it shows a tooltip with the name of the environment and its description"
	@ignore = "true"
	@priority = "3"
	test VerifyTheMouserOverWorksInAnyCellEnvironmentName {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("When I put the mouse over the Enviroment Name of a key at the table") {
			CP2ActivationKeys.putMouseOverElementAtTable(text = "Redacted");
		}

		task ("Then I should see a tooltip with the Environment Name and Description") {
			CP2ActivationKeys.assertTooltipIsVisible(text = "Test Entitlement Name");
		}

		task ("Then I should see a tooltip with the Environment Description") {
			CP2ActivationKeys.assertTooltipIsVisible(text = "Test Entitlement Description");
		}
	}

	@description = "LPS-150785 - Verify if the 'Not Activated' tab displays the number of keys for it"
	@ignore = "true"
	@priority = "4"
	test VerifyTheNotActivatedTabDisplaysTheNumberOfKeys {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "Not Activated";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("And I click at the Not Activated tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "${keyStatus}");
		}

		task ("When I count the numbers of rows") {
			var keyCount = CP2ActivationKeys.countTableRows();
		}

		task ("Then I assert that the amount of rows is equals to the number at the tab") {
			CP2ActivationKeys.assertLicenseQuantity(
				licenseTab = "${keyStatus}",
				numberOfLicenses = "${keyCount}");
		}
	}

	@description = "LPS-150788 - Verify if the drop-down list contains the following options: Show 5 items - 10 items - 20 items - 50 items"
	@ignore = "true"
	@priority = "4"
	test VerifyTheOptionsOfTheDropdownList {
		property portal.upstream = "quarantine";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I click at the All tab") {
			CP2ActivationKeys.goToKeyTab(licenseTab = "All");
		}

		task ("When I select 5 Items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "5");
		}

		task ("Then I should be able to see the pagination button with the text 'Show 5 Items'") {
			CustomerPortal.assertButtonIsVisible(text = "Show 5 Items");
		}

		task ("When I select 10 Items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "10");
		}

		task ("Then I should be able to see the pagination button with the text 'Show 10 Items'") {
			CustomerPortal.assertButtonIsVisible(text = "Show 10 Items");
		}

		task ("When I select 20 Items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "20");
		}

		task ("Then I should be able to see the pagination button with the text 'Show 20 Items'") {
			CustomerPortal.assertButtonIsVisible(text = "Show 20 Items");
		}

		task ("When I select 15 Items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("Then I should be able to see the pagination button with the text 'Show 50 Items'") {
			CustomerPortal.assertButtonIsVisible(text = "Show 50 Items");
		}
	}

	@description = "LPS-150792 - Verify that for local keys the subtext is 'On-Premise'"
	@ignore = "true"
	@priority = "4"
	test VerifyTheSubTextForLocalKeys {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("Then I assert that local keys has key type as 'On-Premise'") {
			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "3",
				linePosition = "2",
				text = "On-Premise");

			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "3",
				linePosition = "2",
				text = "${testAccount}");
		}
	}

	@description = "LPS-150791 - Verify that for virtual keys the subtext is 'Cluster Nodes (Keys)'"
	@ignore = "true"
	@priority = "4"
	test VerifyTheSubTextForVirtualKeys {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("Then I assert that virtual clusters description has 'Cluster Nodes (Keys)' text") {
			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "3",
				linePosition = "3",
				text = "Virtual Cluster");

			CP2ActivationKeys.assertTextAtTable(
				lineColunm = "3",
				linePosition = "3",
				text = "1 Cluster Nodes (Keys)");
		}
	}

	@description = "LPS-150795 - Verify that when the key is downloaded a success message appears"
	@ignore = "true"
	@priority = "4"
	test VerifyTheSuccessMessageWhenDownloadTheKey {
		property portal.upstream = "quarantine";

		// Reason: Need refactor for cases with diferents Keys distribution at the fields.

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "Test Account QA 7.4");

			CustomerPortal.enterOnProject(title = "Test Account QA 7.4");
		}

		task ("And I click on Portal product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");
		}

		task ("And I get the formated name for the activation key file") {
			var expectedDownloadedFileName = CP2ActivationKeys.formatLicenseFileName(
				fileType = "xml",
				licenseName = "${testAccount}",
				licenseType = "activation-key",
				product = "Portal",
				version = "6.2");
		}

		task ("When I click on the download button at the Activation Keys Table") {
			CP2ActivationKeys.clickAtDownloadButton(entitlementName = "Test Account QA 7.4");
		}

		task ("Then I should see the downloaded file") {
			CP2FileUtil.assertDownloadedFileIsPresent(downloadedFileName = "${expectedDownloadedFileName}");
		}
	}

	@description = "Automation ID: LPS-147577 | Test Summary: Make sure that when you hover the mouse over 'DNE' a tooltip appears with a message This key does not expire"
	@ignore = "true"
	@priority = "3"
	test YouMaySeeAMessageAsATooltip {

		// Needs refactor since it depends on example NASA ICE account

		var keyStatus = "All";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "NASA ICE");

			CustomerPortal.enterOnProject(title = "NASA ICE");
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("And I select the pagination quantity to 50 items per page") {
			CP2ActivationKeys.selectPaginationQuantity(quantity = "50");
		}

		task ("When I put the mouse over the Enviroment Name of a key at the table") {
			CP2ActivationKeys.putMouseOverElementAtTable(text = "DNE");
		}

		task ("Then I should see a tooltip with the 'This key does not expire' text") {
			CP2ActivationKeys.assertTooltipIsVisible(text = "This key does not expire");
		}
	}

}