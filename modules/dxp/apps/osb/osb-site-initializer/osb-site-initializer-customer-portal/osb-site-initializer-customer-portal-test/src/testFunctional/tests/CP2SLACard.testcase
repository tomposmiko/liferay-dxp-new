definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount1 = "Test Account LXC - SM";
	var testAccount2 = "Test Account No SLA";
	var testAccount3 = "Test Account DXP";
	var testUserFirstName = "Test";
	var testProduct = "LXC - SM";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = ${testSiteName});
		}

		task ("Add user to the Liferay Staff organization and a account") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount1},${testAccount2},${testAccount3}");
		}

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = ${testSiteName});

			CustomerPortal.waitCP20PageToLoad(userFirstName = ${testUserFirstName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = ${testSiteName});
		}
	}

	@description = "Automation Ticket: LPS-147800 | Test Summary: Verify if the card displays (SLA Card - SLA Name - Start Date - End Date - SLA Status)"
	@priority = 4
	test AssertAllTitlesOnTheSLACard {
		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount1});

			CustomerPortal.enterOnProject(title = ${testAccount1});
		}

		task ("Then I should be able to view SLA Title, Status, Start Date and End Date for Platinum Support License.") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Platinum");

			CP2Overview.assertSLACardContentIsVisible(cardContent = "CURRENT");

			CP2Overview.assertSLACardContentIsVisible(cardContent = "08/24/2021 - 08/24/2022");

			CP2Overview.assertSLACardBackgroundColor(slaCardTitle = "Platinum");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("Then I should be able to view SLA Title, Status, Start Date and End Date for Gold Support License.") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Gold");

			CP2Overview.assertSLACardContentIsVisible(cardContent = "FUTURE");

			CP2Overview.assertSLACardContentIsVisible(cardContent = "08/25/2022 - 08/25/2023");

			CP2Overview.assertSLACardBackgroundColor(slaCardTitle = "Gold");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("Then I should be able to view SLA Title, Status, Start Date and End Date for Premium Support License.") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Premium");

			CP2Overview.assertSLACardContentIsVisible(cardContent = "EXPIRED");

			CP2Overview.assertSLACardContentIsVisible(cardContent = "08/23/2020 - 08/23/2021");

			CP2Overview.assertSLACardBackgroundColor(slaCardTitle = "Premium");
		}
	}

	@description = "Automation Ticket: LPS-147803 | Test Summary: Verify the message 'The project's Support Level is displayed here for projects with ticketing support.' if there is no SLA on the project"
	@priority = 4
	test CanViewErrorMessageIfThereIsNoSLAInTheProject {
		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount2});

			CustomerPortal.enterOnProject(title = ${testAccount2});
		}

		task ("Then I should be able to state the message in the SLA Card") {
			CP2Overview.assertEmptySLACardMessage(message = "The project's Support Level is displayed here for projects with ticketing support.");
		}
	}

	@description = "Automation Ticket: LPS-147804 | Test Summary: Check if when cards have the same support level the previous deadline date is extended."
	@priority = 4
	test CardsAtTheSameSupportLevelThePreviousDeadlineIsExtended {
		task ("Given I get the start date of oldest license") {
			var startDate = CustomerPortal.getValueFieldKoroneikiByAccountName(
				accountName = ${testAccount3},
				field = "SLA Expired Start Date");
		}

		task ("And I get the end date of the newest license") {
			var endDate = CustomerPortal.getValueFieldKoroneikiByAccountName(
				accountName = ${testAccount3},
				field = "SLA Future End Date");
		}

		task ("And to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = ${testSiteName});

			CustomerPortal.waitCP20PageToLoad(userFirstName = ${testUserFirstName});
		}

		task ("And I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount3});

			CustomerPortal.enterOnProject(title = ${testAccount3});
		}

		task ("Then I should be able to view SLA Start and End Date of Current") {
			CP2Overview.assertSLACardUnicContentIsVisible(cardContent = "12/31/2020 - 01/02/2024");
		}
	}

	@description = "Automation Ticket: LPS-147801 | Test Summary: Verify if when user has multiple statuses, the status order went from highest to lowest (Current > Future > Expired)."
	@priority = 5
	test StatusOrderFromHighestToLowest {
		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount1});

			CustomerPortal.enterOnProject(title = ${testAccount1});
		}

		task ("Then I should be able to view SLA Status Current") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "CURRENT");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("Then I should be able to view SLA Status Future") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "FUTURE");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("Then I should be able to view SLA Status Expired") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "EXPIRED");
		}
	}

	@description = "Automation Ticket: LPS-147802 | Test Summary: Check if the user can switch between SLA cards."
	@priority = 5
	test UserCanSwitchBetweenSLACards {
		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount1});

			CustomerPortal.enterOnProject(title = ${testAccount1});
		}

		task ("And I should be able to view SLA Title Platinum") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Platinum");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("Then I should be able to view SLA Title Gold") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Gold");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("Then I should be able to view SLA Title Premium") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Premium");
		}

		task ("When I shif the SLA card") {
			CP2Overview.switchSLACard();
		}

		task ("And I should be able to view SLA Title Platinum") {
			CP2Overview.assertSLACardContentIsVisible(cardContent = "Platinum");
		}
	}

}