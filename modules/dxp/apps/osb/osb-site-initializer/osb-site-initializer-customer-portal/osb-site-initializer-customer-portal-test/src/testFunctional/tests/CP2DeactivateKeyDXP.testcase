@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "LPS-148120 - Assert that a deactivated key will no longer appear."
	@priority = "5"
	test CannotViewDeactivatedKeys {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "Customer Portal Name");
		}

		task ("When the user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then deactivating a key will ensure that key will no longer be available") {
			CP2ActivationKeys.deactivateExistingKey(environmentName = "Test3");

			Search.searchCP(searchTerm = "Test3");

			AssertElementNotPresent(
				key_text = "Test3",
				locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	@description = "LPS-148121 - Assert that number of keys on 'All' tab is equal to number of total keys after deactivating."
	@priority = "3"
	test CanViewChangeInNumberOfKeys {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "Customer Portal Name");
		}

		task ("When the user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then deactivating a key will ensure that the key will no longer be counted towards the final amount") {
			VerifyElementPresent(
				key_value = "33",
				locator1 = "CP2ActivationKeys#KEY_COUNT_ALL");

			CP2ActivationKeys.deactivateExistingKey(environmentName = "Test for Deactivation");

			TableViewBuilder.clearSearch();

			AssertElementPresent(
				key_value = "32",
				locator1 = "CP2ActivationKeys#KEY_COUNT_ALL");
		}
	}

	@description = "LPS-148117 - Assert that a pop-up appears after selecting multiple keys to deactivate."
	@priority = "5"
	test CanViewPopUpInformation {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "Customer Portal Name");
		}

		task ("When the user selects a project in Customer Portal and selects multiple keys to deactivate") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.selectAllKeysOnPage();

			Button.click(button = "Deactivate");
		}

		task ("Then a pop-up with info with deactivation terms will appear") {
			AssertElementPresent(
				key_text = "I certify that the instances activated with the selected activation keys has have been shut down and that there is no liferay software installed deployed used or executed that is activated with the selected activation keys.",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}
	}

	@description = "LPS-148118 - Assert there are no changes to selected keys after clicking 'Cancel' on the Deactivation Terms modal."
	@priority = "4"
	test NoChangesMadeAfterClickingCancel {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "Customer Portal Name");
		}

		task ("When the user selects a project in Customer Portal and selects multiple keys to deactivate") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			Search.searchCP(searchTerm = "test");

			for (var key_environmentName : list "Test2,Test3") {
				CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(environmentName = "${key_environmentName}");
			}

			Button.click(button = "Deactivate");
		}

		task ("Then clicking 'Cancel' will have user stay on DXP Product Activation page and the keys will not be deactivated") {
			Button.click(button = "Cancel");

			AssertElementPresent(
				key_productType = "DXP",
				locator1 = "CP2ActivationKeys#ACTIVE_PRODUCT_TYPE");

			for (var key_environmentName : list "Test2,Test3") {
				AssertElementPresent(
					key_text = "${key_environmentName}",
					locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
			}
		}
	}

}