@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account LXC - SM";
	var testproduct = "LXC - SM";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-146856 | Test Summary: Verify that when the status is active the page displays (Subtitle - Link - Link redirects to another page)"
	@priority = "4"
	test AffirmAllTextAndLinksOnThePage {
		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Given I go to the test account") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Going through onboarding") {
			CustomerPortal.fullOnboardingFlow();
		}

		task ("Go to the product activation page, fill out the form and submit it") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testproduct}");

			CustomerPortal.clickOnFinishActivationButton();

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();

			Button.click(button = "Submit");
		}

		task ("Change the activation card status to Active") {
			CustomerPortal.activeStatusViaDropdown(
				dropdownItem = "Set to Active",
				value = "001");
		}

		task ("Assert that the activation card link has changed") {
			AssertElementPresent(
				locator1 = "CustomerPortalSite#PRODUCT_CONSOLE",
				value1 = "Go to Product Console");
		}

		task ("Access the link and affirm that a new page has opened") {
			CP2DXPCloudSetup.clickOnProductConsoleLink();

			SelectWindow(locator1 = "title=Log in | DXP Cloud");

			AssertElementPresent(locator1 = "CustomerPortalSite#YOUR_ACCOUNT");

			Navigator.closeWindow();
		}

		task ("Delete the entries and objects created") {
			CP2DXPCloudSetup.clearAndDeleteDXPCloudEntries(status = "Active");

			CP2Utils.deleteSpecificObjectEntry(
				email = "test@liferay.com",
				portlet = "Admins DXP Cloud");
		}
	}

	@description = "Automation ID: LPS-146843 | Test Summary: Verify that the Activation Form Card - DXP Cloud displays (Product logo - Subscription - Start Date - End Date - Page Subtitleis/Not Activated)"
	@priority = "4"
	test AssertTheCardDetails {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testproduct}");
		}

		task ("View card details") {
			CustomerPortal.viewActivationStatusCardValue(
				dates = "Invalid Date - Invalid Date",
				productIcon = "dxp_icon",
				project = "${testAccount}",
				status = "Not Activated",
				subtitle = "Almost there! Setup LXC - SM by finishing the activation form");
		}
	}

	@description = "Automation ID: LPS-146852 | Test Summary: Verify if when the status is 'In Progress' the page subtitle: 'Your LXC - SM environments are being set up and will be available soon' appears"
	@priority = "4"
	test CanViewCaptionWhenTheStatusIsInProgress {
		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Going through onboarding") {
			CustomerPortal.fullOnboardingFlow();
		}

		task ("Go to the product activation page, fill out the form and submit it") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testproduct}");

			CustomerPortal.clickOnFinishActivationButton();

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields();

			Button.click(button = "Submit");
		}

		//task ("Assert the card legend change") {
		//	AssertElementPresent(
		//		locator1 = "CustomerPortalSite#CARD_SUBSCRIPTION",
		//		title = "Your LXC - SM environments are being set up and will be available soon");
		//}

		task ("Delete the entries and objects created") {
			CP2DXPCloudSetup.clearAndDeleteDXPCloudEntries(status = "In-Progress");

			CP2Utils.deleteSpecificObjectEntry(
				email = "test@liferay.com",
				portlet = "Admins DXP Cloud");
		}
	}

	@description = "Automation ID: LPS-146849 | Test Summary: Verify if Link 'Finish Activation' hidden to requestor and user roles"
	@priority = "5"
	test NoLinkIsDisplayedWhenYouAreARequesterOrUserRoles {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testproduct}");
		}

		task ("Assert that the Finish Activation link is not present on the card") {
			AssertElementNotPresent(
				locator1 = "CustomerPortalSite#FINISH_ACTIVATION",
				value1 = "Finish Activation");
		}
	}

	@description = "Automation ID: LPS-146848 | Test Summary: Verify if Link 'Finish Activation' only visible to admin roles"
	@priority = "5"
	test YouCanSeeTheActivationLinkIfYouAreAdmin {
		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testproduct}");
		}

		task ("Assert that the card activation link is not shown") {
			AssertElementNotPresent(
				locator1 = "CustomerPortalSite#FINISH_ACTIVATION",
				value1 = "Finish Activation");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			Refresh();

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Going through onboarding") {
			CustomerPortal.fullOnboardingFlow();
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testproduct}");
		}

		task ("Assert that the activation link is present on the card") {
			AssertElementPresent(
				locator1 = "CustomerPortalSite#FINISH_ACTIVATION",
				value1 = "Finish Activation");
		}
	}

}