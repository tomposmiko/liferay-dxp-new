@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Adding a user to the project") {
			CustomerPortal.createUserForCP(
				accountName = "Test Account Portal",
				userFirstName = "User",
				userLastName = "2",
				userName = "User 2",
				userScreenName = "Testing");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONUser.deleteUserByEmailAddress(userEmailAddress = "test.user@liferay.com");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-150835 | Test Summary: Verify if no results are found show an error message"
	@ignore = "true"
	@priority = "4"
	test VerifyTheErrorMessageWhenNoResultsAreFound {

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(
				status = "Future",
				title = "${testAccount}");
		}

		task ("Go to the team members page") {
			CP2NavigationMenu.goToTeamMembers();
		}

		task ("Search for the user's first name") {
			CP2TeamMembers.searchCP(search = "abcd");

			KeyPress(
				locator1 = "CP2TeamMembers#SEARCH_TM",
				value1 = "\ENTER");
		}

		task ("Then I should see the alert with the text No team members found with this search criteria.") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "No team members found with this search criteria.");
		}
	}

	@description = "Automation ID: LPS-150834 | Test Summary: Verify if in the text box search it filters by email"
	@ignore = "true"
	@priority = "4"
	test VerifyTheSearchFiltersByEmail {

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(
				status = "Future",
				title = "${testAccount}");
		}

		task ("Go to the team members page") {
			CP2NavigationMenu.goToTeamMembers();
		}

		task ("Search for the user's first name and affirm that the search worked") {
			CP2TeamMembers.searchCP(search = "test.user@liferay.com");

			KeyPress(
				locator1 = "CP2TeamMembers#SEARCH_TM",
				value1 = "\ENTER");

			AssertElementPresent(
				locator1 = "CP2TeamMembers#SEARCH_RESULT",
				result = "1 result for test.user@liferay.com");
		}
	}

	@description = "Automation ID: LPS-150832 | Test Summary: Verify if the text box search filters by first and last name"
	@ignore = "true"
	@priority = "5"
	test VerifyTheSearchFiltersByFirstAndLastName {

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(
				status = "Future",
				title = "${testAccount}");
		}

		task ("Go to the team members page") {
			CP2NavigationMenu.goToTeamMembers();
		}

		task ("Search for the user's first name and affirm that the search worked") {
			CP2TeamMembers.searchCP(search = "User");

			KeyPress(
				locator1 = "CP2TeamMembers#SEARCH_TM",
				value1 = "\ENTER");

			AssertElementPresent(
				locator1 = "CP2TeamMembers#SEARCH_RESULT",
				result = "1 result for User");

			var search = "User";

			AssertElementPresent(
				locator1 = "CP2TeamMembers#SEARCH_TM",
				value1 = "${search}");
		}

		task ("When user clicks on cancel icon") {
			Click(locator1 = "CP2TeamMembers#CLOSE_BUTTON");
		}

		task ("Search for the user's Last name and affirm that the search worked") {
			CP2TeamMembers.searchCP(search = "2");

			KeyPress(
				locator1 = "CP2TeamMembers#SEARCH_TM",
				value1 = "\ENTER");

			AssertElementPresent(
				locator1 = "CP2TeamMembers#SEARCH_RESULT",
				result = "1 result for 2");

			var search = "2";

			AssertElementPresent(
				locator1 = "CP2TeamMembers#SEARCH_TM",
				value1 = "${search}");
		}
	}

}