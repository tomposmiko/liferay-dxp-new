@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account Analytics Cloud";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-149758 | Test Summary: Verify if team members with the role Partner Managers can invite users"
	@priority = "5"
	test CanViewPartnerManagerInviteUsers {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Partner Manager",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project") {
			CustomerPortal.enterOnProject(
				status = "Expired",
				title = "${testAccount}");
		}

		task ("Go to the Team Members page and click on the Invite button") {
			CP2NavigationMenu.goToTeamMembers();

			CP2TeamMembers.clickInviteMembers();
		}

		task ("Assert the 'Invite Your Team Members' modal") {
			AssertElementPresent(
				key_title = "Invite your team members",
				locator1 = "CP2TeamMembers#MODAL_TM");
		}
	}

	@description = "Automation ID: LPS-149761 | Test Summary: Verify if team members with the role Partner Managers can remove team members"
	@priority = "5"
	test RemovingTeamMembers {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Adding a user to the project") {
			JSONUser.addUser(
				userEmailAddress = "test.user@liferay.com",
				userFirstName = "Test",
				userLastName = "User",
				userScreenName = "Testing");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "test.user@liferay.com");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Account.assignUsers(
				accountName = "${testAccount}",
				assigneeName = "Test User");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Partner Manager",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Login in Okta") {
			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project") {
			CustomerPortal.enterOnProject(
				status = "Expired",
				title = "${testAccount}");
		}

		task ("Go to the team members page and remove a guest user") {
			CP2NavigationMenu.goToTeamMembers();

			CP2Utils.openActionMenu(
				menuItem = "Remove",
				openUser = "Test User");

			Button.click(button = "Remove");

			Alert.viewSuccessMessage();
		}

		task ("Assert that the user has indeed been removed") {
			CP2TeamMembers.assertInvitedUserIsNotVisible(
				name = "Test User",
				status = "Invited");
		}

		task ("Delete user created") {
			JSONUser.deleteUserByEmailAddress(userEmailAddress = "test.user@liferay.com");
		}
	}

}