@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account DXP";
	var testUserFirstName = "Test";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = ${testSiteName});
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = ${testAccount});
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to Customer Portal Site") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.waitCP20PageToLoad(userFirstName = ${testUserFirstName});
		}

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("And I go through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Then I click on the Liferay Experience Cloud option on side menu") {
			CustomerPortal.clickAtButton(text = "Liferay Experience Cloud");
		}

		task ("And I enter Setup LXC") {
			CustomerPortal.clickOnFinishActivationButton();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = ${testSiteName});
		}
	}

	@description = "Automation ID: LPS-169248 | Test Summary: Assert that the user will have the option to remove additional Admins from the project before submitting the form"
	@ignore = "true"
	@priority = 3
	test AssertThatTheAdditionalFieldsHaveBeenRemoved {

		// Needs refactor since it depends on example FIFA account

		task ("Then I add three extra fields") {
			CustomerPortal.clickAtButton(text = "Add Another Admin");

			CP2LXCSetup.assertThatTheExtraFieldsAreVisible(
				fieldsList = "fullName,email,github",
				position = 2);
		}

		task ("And I assert that when I click the 'Remove Project Admin' button, no extra fields are shown in the form") {
			CustomerPortal.clickAtButton(text = "Remove Project Admin");

			CP2LXCSetup.assertThatTheExtraFieldsIsNotVisible(
				fieldsList = "fullName,email,github",
				position = 2);
		}
	}

	@description = "Automation ID: LPS-169246 | Test Summary: Assert that the user can only submit the form after filling out all required fields (Project ID - Primary Region - Project Admin - First Name - Last Name - Email Address - GitHub Username - Incident Management Contact)"
	@ignore = "true"
	@priority = 4
	test AssertThatTheUserCanOnlySubmitTheFormAfterFillingOutAllRequiredFields {

		// Needs refactor since it depends on example FIFA account

		task ("Given I fill in all the required fields") {
			CP2LXCSetup.typeAllSetupLXCInfoFields(
				email = "test@liferay.com",
				fullName = "Test Test",
				github = "testUser",
				incidentManagementEmail = "test@liferay.com",
				incidentManagementFullName = "Test User",
				projectId = 3809080,
				region = "South America");
		}

		task ("Then I assert that all fields are required") {
			CP2LXCSetup.clearInfoSetupLXCFields();

			CP2LXCSetup.viewMessageErrorList(fieldsList = "projectId,fullName,email,github,incidentManagementFullName,incidentManagementEmail");
		}
	}

	@description = "Automation ID: LPS-169249 | Test Summary: Assert that the user is not allowed to continue if they have entered an invalid business email address for the owner and incident management contacts"
	@ignore = "true"
	@priority = 3
	test AssertTheErrorMessageIfTheUserEntersAnInvalidBusinessEmailAddress {

		// Needs refactor since it depends on example FIFA account

		task ("Then I assert that a valid email address is required in the 'Incident Management Contact's Email Address' field") {
			CP2Utils.typeSetupInfoFields(
				label = "incidentManagementEmail",
				value = "test.com");

			CustomerPortal.clickOnModal(text = "Set Up Liferay Experience Cloud");

			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "Please insert a valid email.");
		}
	}

	@description = "Automation ID: LPS-169250 | Test Summary: Assert the success message: Thank you for submitting this request! Your Liferay Experience Cloud project will be provisioned within 3 business days. An email will be sent once your project is ready."
	@ignore = "true"
	@priority = 3
	test AssertTheSuccessMessage {

		// Needs refactor since it depends on example FIFA account

		task ("Given I fill in all the required fields") {
			CP2LXCSetup.typeAllSetupLXCInfoFields(
				email = "test@liferay.com",
				fullName = "Test Test",
				github = "testUser",
				incidentManagementEmail = "test@liferay.com",
				incidentManagementFullName = "Test User",
				projectId = 3809080,
				region = "South America");

			Button.click(button = "Submit");
		}

		task ("I assert that the form has been submitted") {
			CustomerPortal.viewConfirmationModal(text = "Thank you for submitting this request!");

			Button.click(button = "Done");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.showCPObject(title = "Liferay Experience Cloud Environment");

			CP2Utils.deleteSpecificObjectEntry(
				entry = "test@liferay.com",
				portlet = "Liferay Experience Cloud Environments");

			CP2Utils.deleteActivationStatus(
				position = 30,
				status = "In Progress");
		}
	}

	@description = "Automation ID: LPS-169247 | Test Summary: Assert that the user can add additional project administrators using the 'Add project administrator' button"
	@ignore = "true"
	@priority = 4
	test CanViewTheAdditionalFields {

		// Needs refactor since it depends on example FIFA account

		task ("And I assert that by clicking the 'Add Another Admin' button three more fields are shown in the form") {
			CustomerPortal.clickAtButton(text = "Add Another Admin");

			CP2LXCSetup.assertThatTheExtraFieldsAreVisible(
				fieldsList = "fullName,email,github",
				position = 2);
		}
	}

}