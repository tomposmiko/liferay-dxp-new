@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "NASA ICE";
	var testProduct = "DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-146195 | Test Summary: Verify that when you click the Download Key button a file is downloaded."
	@ignore = "true"
	@priority = "5"
	test AssertsThatTheFileHasBeenDownloaded {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Signs in OKTA to update and go to Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Select a project and go to activation page") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Assert that text 'To activate a local Liferay DXP instance, download a development key for your Liferay DXP version' is present") {
			AssertElementPresent(locator1 = "CP2Utils#CAPTION_ABOVE_MENU");
		}

		task ("Select 1 key and click in Download key") {
			CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(environmentName = "Redacted");

			CustomerPortal.clickAtButton(text = "Download Key");
		}

		task ("Assest the success message") {
			Alert.viewSuccessMessage();
		}

		task ("Assert that the Activation Key was downloaded") {
			CP2FileUtil.assertDownloadedFileIsPresent(downloadedFileName = "activation-key-dxpdevelopment-7.0-nasaice.xml");
		}
	}

	@description = "Automation ID: LPS-151318 | Test Summary: Verify that when you insert a not valid value, a erro message appear."
	@ignore = "true"
	@priority = "3"
	test AssertTheErrorMessage {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Type a invalid value in the field and assert the error message") {
			Type(
				locator1 = "CP2NavigationMenu#NODES_CLUSTER_ENABLE",
				value1 = "0");

			AssertElementPresent(
				key_error = "enter-a-minimum-node-value-greater-than-0",
				locator1 = "CP2NavigationMenu#NODES_ERROR");

			Type(
				locator1 = "CP2NavigationMenu#NODES_CLUSTER_ENABLE",
				value1 = "1");

			AssertElementPresent(
				key_error = "max-nodes-must-be-greater-than-min-nodes",
				locator1 = "CP2NavigationMenu#NODES_ERROR");

			CustomerPortal.clickAtButton(text = "Filter");
		}

		task ("Type a invalid value on search bar and assert the error message") {
			CP2Utils.searchKeys(searchinput = "NothingIsFound");

			AssertElementPresent(locator1 = "CP2NavigationMenu#SEARCH_NO_RESULT");
		}
	}

	@description = "Automation ID: LPS-151312 | Test Summary: Verify if Environment Type and if the User can Search for a Environment Type."
	@ignore = "true"
	@priority = " 4"
	test CanViewAndSearchForEnvironmentType {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Open Environment Type tab and Assert the environment type options") {
			CustomerPortal.clickAtButton(text = "Filter");

			Click.pauseClickAt(
				key_text = "Environment Type",
				locator1 = "CustomerPortalSite#ANY_BUTTON");

			for (var environmentName : list "Non-Production,Production,Subscription") {
				AssertElementPresent(
					key_checkbox = "${environmentName}",
					key_menu = "Environment Type",
					locator1 = "CP2NavigationMenu#FILTER_CHECKBOX");
			}
		}

		task ("Search for a key and assert the result of the search") {
			CP2Utils.searchKeys(searchinput = "test");

			AssertElementPresent(
				key_text = "test",
				locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	@description = "Automation ID: LPS-146199 | Test Summary: Verify that when clicking on the Deploying Activation Keys article link, the user is redirected to another page."
	@ignore = "true"
	@priority = "3"
	test ConfirmRedirectionFromDxpToAnotherPage {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Open the dropdown and verify that there are 5 DXP versions") {
			CustomerPortal.viewVersions(dropDownItems = "7.4,7.3,7.2,7.1,7.0");
		}

		task ("Click in the link 'deploying activation keys article' and go to the page") {
			Click(locator1 = "CustomerPortalSite#DEPLOY_ARTICLE_PAGE");

			Navigator.selectSpecificWindow(windowTitle = "Deploying Activation Keys â€“ Liferay Help Center");
		}

		task ("Assert that a new page is opened and go back to 'Product Activation page'") {
			AssertElementPresent(locator1 = "CustomerPortalSite#DEPLOY_ACTIVATION_PAGE");

			Navigator.closeWindow();
		}
	}

	@description = "Automation ID: LPS-151315 | Test Summary: Verify that the Fields Min and Max are enabled and disabled based on the filter selection.S"
	@ignore = "true"
	@priority = "3"
	test TheMinAndMaxFieldsCanBeDisableAndEnable {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Open Environment Type tab and Assert the nodes field is disable") {
			CustomerPortal.clickAtButton(text = "Filter");

			CP2Utils.clickAtFilterMenu(
				checkbox = "On-Premise",
				menu = "Key Type",
				text = "Key Type");

			AssertElementPresent(locator1 = "CP2NavigationMenu#NODES_CLUSTER_DISABLE");
		}

		task ("Open Environment Type tab and Assert the nodes field is enable") {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "On-Premise",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Click.clickNoWaitForVisible(
				key_checkbox = "Virtual Cluster",
				key_menu = "Key Type",
				locator1 = "CP2NavigationMenu#FILTER_CHECKBOX");

			AssertElementPresent(locator1 = "CP2NavigationMenu#NODES_CLUSTER_ENABLE");
		}
	}

	@description = "Automation ID: LPS-166936 | Test Summary: Verify that the user with the Admin and Partner Manager roles can see the actions (Generate New - Deactivate - Actions Menu - Deactivate button)"
	@ignore = "true"
	@priority = "4"
	test UserAdminAndPartnerManagerRoleCanSeeAndPerformAllActionsForDXP {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");
		}

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "NASA ICE");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Partner Manager",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			Refresh();

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Going through onboarding") {
			CustomerPortal.clickOnStartProjectSetup();

			CustomerPortal.clickOnSkipForNowButton();
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Click in the Action button and assert if the user with the right role can see the options") {
			CustomerPortal.clickAtButton(text = "Actions");

			AssertVisible(
				key_action = "Export All Key Details (csv)",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

			CustomerPortal.clickAtButton(text = "Actions");

			CP2ActivationKeys.exportAllKeyDetails(fileName = "activation-keys.csv");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "NASA ICE");

			Account.unassignUserRole(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");

			Account.unassignUserRole(
				accountRoleTitle = "Partner Manager",
				accountUserName = "Test Test");
		}
	}

	@description = "Automation ID: LPS-166937 | Test Summary: Assert that users with the roles Partner Members, Requesters and Users cannot see the actions (Generate New - Deactivate - Actions Menu - Deactivate button)"
	@ignore = "true"
	@priority = "4"
	test UserPartnerMemberAndRequesterRoleCannotSeeSomeActionsForDXP {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Click in the Action button and assert the user with the right role can see the option") {
			CustomerPortal.clickAtButton(text = "Actions");

			AssertVisible(
				key_action = "Export All Key Details (csv)",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");
		}

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "NASA ICE");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Partner Member",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Requester",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			Refresh();

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Click in the Action button and assert if the user with the right role can see the options") {
			CustomerPortal.clickAtButton(text = "Actions");

			AssertElementNotPresent(
				key_text = "Generate New",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

			CustomerPortal.clickAtButton(text = "Actions");

			AssertElementNotPresent(
				key_text = "Deactivate",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "NASA ICE");

			Account.unassignUserRole(
				accountRoleTitle = "Requester",
				accountUserName = "Test Test");

			Account.unassignUserRole(
				accountRoleTitle = "Partner Member",
				accountUserName = "Test Test");
		}
	}

	@description = "Automation ID: LPS-166940 | Test Summary: Verify that users with the roles Partner Members, Requesters and Users cannot see the actions (Generate New - Deactivate - Actions Menu - Deactivate button)."
	@ignore = "true"
	@priority = "4"
	test UserPartnerMemberAndRequesterRoleCanSeeAndPerformActionsForDXP {

		// Needs refactor since it depends on example Avangrid Portals account

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Click in the Action button and assert the user with the right role can see the option") {
			CustomerPortal.clickAtButton(text = "Actions");

			AssertVisible(
				key_action = "Export All Key Details (csv)",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");
		}

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "NASA ICE");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Partner Member",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Requester",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			Refresh();

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("Click in the Action button and assert if the user with the right role can see the options") {
			CustomerPortal.clickAtButton(text = "Actions");

			AssertVisible(
				key_action = "Export All Key Details (csv)",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

			CustomerPortal.clickAtButton(text = "Actions");

			CP2ActivationKeys.exportAllKeyDetails(fileName = "activation-keys.csv");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "NASA ICE");

			Account.unassignUserRole(
				accountRoleTitle = "Requester",
				accountUserName = "Test Test");

			Account.unassignUserRole(
				accountRoleTitle = "Partner Member",
				accountUserName = "Test Test");
		}
	}

}