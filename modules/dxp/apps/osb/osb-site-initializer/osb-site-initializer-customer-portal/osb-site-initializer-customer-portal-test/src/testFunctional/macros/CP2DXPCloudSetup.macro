definition {

	macro activeFieldDisasterRecoveryDataCenter {
		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Account Subscriptions");

		Search.searchCP(searchTerm = ${accountKey});

		if (IsElementPresent(key_accountName = ${accountKey}, locator1 = "CP2Utils#ANY_ACCOUNT_ELLIPSIS_BUTTON")) {
			Click(
				key_accountName = ${accountKey},
				locator1 = "CP2Utils#ANY_ACCOUNT_ELLIPSIS_BUTTON");

			MenuItem.click(menuItem = "View");

			Click(locator1 = "CP2DXPCloudSetup#HAS_DISASTER_DATA_CENTER_REGION");

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();
		}
	}

	macro assertCardStatusChanged {
		AssertElementPresent(
			key_status = ${status},
			locator1 = "CustomerPortalSite#STATUS_CARD");
	}

	macro clickOnAddAnotherAdminButton {
		Click(locator1 = "CP2DXPCloudSetup#ADD_ANOTHER_ADMIN");
	}

	macro clickOnProductConsoleLink {
		Click(locator1 = "CustomerPortalSite#PRODUCT_CONSOLE");
	}

	macro clickOnRemoveThisAdminButton {
		Click(locator1 = "CP2DXPCloudSetup#REMOVE_THIS_ADMIN_DXP_CLOUD");
	}

	macro deactivateFieldDisasterRecoveryDataCenter {
		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Account Subscriptions");

		Search.searchCP(searchTerm = ${accountKey});

		if (IsElementPresent(key_accountName = ${accountKey}, locator1 = "CP2Utils#ANY_ACCOUNT_ELLIPSIS_BUTTON")) {
			Click(
				key_accountName = ${accountKey},
				locator1 = "CP2Utils#ANY_ACCOUNT_ELLIPSIS_BUTTON");

			MenuItem.click(menuItem = "View");

			Click(locator1 = "CP2DXPCloudSetup#HAS_DISASTER_DATA_CENTER_REGION");

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();
		}
	}

	macro deleteDXPCloudEnvironments {
		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Objects");

		CustomerPortal.viewCPObjectCustomInfo(position = 14);

		CreateObject.checkToggleActive();

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Choose an Option");

		CustomerPortal.checkToggleHideWidget();

		CreateObject.saveObject();
	}

	macro notViewSetupDXPCloufEXtraInfo {
		AssertElementNotPresent(
			key_index = 2,
			label = "email",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");

		AssertElementNotPresent(
			key_index = 2,
			label = "firstName",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");

		AssertElementNotPresent(
			key_index = 2,
			label = "lastName",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");

		AssertElementNotPresent(
			key_index = 2,
			label = "github",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");
	}

	macro typeAllSetupDXPCloudInfoFields {
		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "projectId",
			value = 001);

		Select(
			locator1 = "CP2DXPCloudSetup#SELECT_DATA_CENTER_REGION",
			value1 = "Iowa, USA");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "email",
			value = "test@liferay.com");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "firstName",
			value = "FirstName");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "lastName",
			value = "LastName");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "github",
			value = "GitHubUser");
	}

	macro typeAllSetupDXPCloufEXtraInfo {
		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "email",
			position = 2,
			value = "test@liferay.com");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "firstName",
			position = 2,
			value = "FirstName");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "lastName",
			position = 2,
			value = "LastName");

		CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
			label = "github",
			position = 2,
			value = "GitHubUser");
	}

	macro typeSetupDXPCloudInfoFields {
		if (!(isSet(position))) {
			var position = 1;
		}

		var key_index = ${position};

		Type(
			locator1 = "CustomerPortalSite#SETUP_FIELDS",
			value1 = ${value});
	}

	macro viewDisasterRegionList {
		Click(locator1 = "CP2DXPCloudSetup#SELECT_DISASTER_REGION");

		for (var region : list ${regionRow}) {
			AssertElementPresent(
				key_region = ${regionRow},
				locator1 = "CP2DXPCloudSetup#DISASTER_REGION",
				value1 = ${region});
		}
	}

	macro viewRegionList {
		Click(locator1 = "CP2DXPCloudSetup#SELECT_DATA_CENTER_REGION");

		for (var regionName : list ${regionList}) {
			AssertElementPresent(
				key_regionName = ${regionList},
				locator1 = "CP2DXPCloudSetup#REGIONS_NAMES",
				value1 = ${regionName});
		}
	}

	macro viewSetupDXPCloudExtraFields {
		AssertElementPresent(
			key_index = 2,
			label = "email",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");

		AssertElementPresent(
			key_index = 2,
			label = "firstName",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");

		AssertElementPresent(
			key_index = 2,
			label = "lastName",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");

		AssertElementPresent(
			key_index = 2,
			label = "github",
			locator1 = "CustomerPortalSite#SETUP_FIELDS");
	}

	macro viewSetupDXPCloudExtraInfo {
		AssertElementPresent(
			key_index = 2,
			label = "email",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "test@liferay.com");

		AssertElementPresent(
			key_index = 2,
			label = "firstName",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "FirstName");

		AssertElementPresent(
			key_index = 2,
			label = "lastName",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "LastName");

		AssertElementPresent(
			key_index = 2,
			label = "github",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "GitHubUser");
	}

	macro viewSetupDXPCloufInfo {
		AssertElementPresent(
			label = "projectId",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = 001);

		AssertElementPresent(
			locator1 = "CP2DXPCloudSetup#SELECT_DATA_CENTER_REGION",
			value1 = "Iowa, USA");

		AssertElementPresent(
			label = "email",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "test@liferay.com");

		AssertElementPresent(
			label = "firstName",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "FirstName");

		AssertElementPresent(
			label = "lastName",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "LastName");

		AssertElementPresent(
			label = "github",
			locator1 = "CustomerPortalSite#SETUP_VALUE",
			value = "GitHubUser");
	}

}