@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account QA 7.4";
	var testProduct = "DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		CustomerPortal.customerPortalApisTearDown();

		JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

		PortalInstances.tearDownCP();
	}

	@description = "LPS-149705 - Verify if the amount of available keys are shown on subscriptions."
	@priority = "5"
	test IfAvailableKeysAreDisplayedOnSubscriptions {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the subscription option will display remaining available key activations") {
			AssertTextEquals.assertPartialText(
				locator1 = "CP2ActivationKeys#SUBSCRIPTION_KEY_AVAILABLE",
				value1 = "Key activation available: 1 of");
		}
	}

	@description = "LPS-149727 - Verify if 'Cancel' button brings user back to Product Actiation DXP Page."
	@priority = "4"
	test IfCancelButtonBringsToActivationDXPPage {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then clicking 'Cancel' will redirect back to the Product Activation page") {
			Button.click(button = "Cancel");

			AssertElementPresent(
				key_productType = "${testProduct}",
				locator1 = "CP2ActivationKeys#ACTIVE_PRODUCT_TYPE");
		}
	}

	@description = "LPS-149703 - Verify if user can select the Key Type when generating a new key."
	@priority = "4"
	test IfKeyTypeCanBeSelected {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the user can select the Key Type") {
			CP2ActivationKeys.selectKeyType(key_option = "Production (Virtual Cluster)");
		}
	}

	@description = "LPS-149707 - Verify a message with valid activation dates appears after a subscription is selected"
	@priority = "3"
	test IfMessageAppearsAfterSelectSubscription {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("And when the user goes to generate a new key and selects a Key Type that does not have permanent licenses") {
			CP2ActivationKeys.generateNewKey();

			CP2ActivationKeys.selectKeyType(key_option = "Production (Virtual Cluster)");
		}

		task ("Then a message will appear after the user selects a subscription with the active dates") {
			var key_position = "1";
			var activeDate = selenium.getText("CP2ActivationKeys#SUBSCRIPTION_LENGTH");

			CP2ActivationKeys.selectSubscription(position = "${key_position}");

			AssertTextEquals(
				locator1 = "Message#INFO",
				value1 = "Activation Keys will be valid ${activeDate}");
		}
	}

	@description = "LPS-149708 - Verify a message appears after selecting a subscription with a permanent license"
	@priority = "3"
	test IfMessageAppearsOnSubscriptionsThatAllowPermanentLicenses {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then a message will appear after the user selects a subscription with a permanent license type") {
			CP2ActivationKeys.selectSubscription(position = "1");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#INFO",
				value1 = "Activation Keys will be valid indefinitely");
		}
	}

	@description = "LPS-149706 - Verify if a subscription has 0 keys then the option is disabled."
	@priority = "5"
	test IfNoAvailableKeysAreDisplayedOnSubscriptions {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then a user can see that disabled subscriptions will have 0 keys available") {
			AssertTextEquals.assertPartialText(
				locator1 = "CP2ActivationKeys#SUBSCRIPTION_KEY_DISABLED",
				value1 = "Key activation available: 0 of");
		}
	}

	@description = "LPS-149731 - Verify if product field is already enabled with the product the user selected in product activation."
	@priority = "4"
	test IfProductEnabledFromStart {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a DXP project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the product field will be filled in by default with the project selected - DXP") {
			AssertTextEquals(
				locator1 = "CP2ActivationKeys#ENABLED_PRODUCT",
				value1 = "${testProduct}");
		}
	}

	@description = "LPS-149702 - Verify if user can select the Version when generating a new key."
	@priority = "5"
	test IfProductVersionCanBeSelected {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the user can select the Product Version") {
			CP2ActivationKeys.selectProductVersion(key_option = "7.3");
		}
	}

	@description = "LPS-149704 - Verify if start and end dates are displayed on subscriptions."
	@priority = "4"
	test IfStartAndEndDateAreDisplayedOnSubscriptions {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the subscription options will display a start and end date") {
			AssertTextEquals(
				key_position = "1",
				locator1 = "CP2ActivationKeys#SUBSCRIPTION_LENGTH",
				value1 = "Aug 2, 2022 - Jul 3, 2023");
		}
	}

	@description = "LPS-149715 - Verify the 'Next' button is disabled until required options are selected."
	@priority = "3"
	test NextButtonOnlyAvailableIfAllOptionsAreSelected {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example Solutions account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "Test Account Solutions");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

		task ("Then the 'Next' button will be disabled until after the user makes a subscription selection. All other required fields have a default option selected") {
			AssertElementPresent(
				key_text = "Next",
				locator1 = "Button#ANY_DISABLED");

			CP2ActivationKeys.selectSubscription(position = "1");

			AssertElementPresent(
				key_text = "Next",
				locator1 = "Button#ANY_ENABLED");
		}
	}

}