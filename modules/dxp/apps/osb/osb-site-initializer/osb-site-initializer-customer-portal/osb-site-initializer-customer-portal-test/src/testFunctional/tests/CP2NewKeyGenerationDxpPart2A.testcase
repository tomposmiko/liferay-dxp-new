@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testSiteTamplate = "Liferay OSB Site Initializer Customer Portal";
	var testUser = "Test Test";
	var userFirstName = "Test";
	var testAccount = "Test Account DXP";
	var testProduct = "DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}

		task ("Login on OKTA") {
			CustomerPortal.loginOktaToUpdateCP();
		}

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${userFirstName}");
		}

		task ("I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("I generate a new key") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Automation ID: LPS-157445 | Test Summary: Verify if the fields (Environment Name - Host Name) are required"
	@ignore = "true"
	@priority = "5"
	test CanViewAMandatoryMessageForBothFields {
		task ("Given I go to next form at Genarate New Key") {
			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("And The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}

		task ("And I fulfill the Environment and Host name fields") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "localhost",
				field = "Host Name");
		}

		task ("Then The Generate button should be active") {
			CustomerPortal.assertButtonIsActive(text = "Generate 1 Key");
		}

		task ("When I erase the Environment Name field content") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "",
				field = "Environment Name");
		}

		task ("Then I should see the alert with the text 'This field is required.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "This field is required.");
		}

		task ("And The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}

		task ("When I erase the Host Name field content") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "",
				field = "Host Name");
		}

		task ("Then The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}
	}

	@description = "Automation Ticket: LPS-157448 | Test Summary: Verify if the button '+ Add Activation Key' is disabled when the user reaches the maximum number of activation keys allowed."
	@ignore = "true"
	@priority = "4"
	test CanViewTheAddActivationKeysButtonIsDisabled {
		task ("Given I fulfill the Environment field") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");
		}

		task ("When I add the maximum of Activation Keys") {
			CP2ActivationKeys.fulfillActivationKey();
		}

		task ("Then I should be able to see the '+ Add Activation Key' button disabled") {
			CustomerPortal.assertButtonIsDisabled(text = "Add Activation Key");
		}

		task ("When I put the mouse over the '+ Add Activation Key' button") {
			CustomerPortal.putMouseOverButton(text = "Add Activation Key");
		}

		task ("Then I should be able to see the tool tip with the text 'Maximum number of Activation Keys reached for this subscription.'") {
			CP2ActivationKeys.assertTooltipIsVisible(text = "Maximum number of Activation Keys reached for this subscription.");
		}
	}

	@description = "Automation ID: LPS-157446 | Test Summary: Verify if the user enters an invalid IP address and Mac Address an error message appears"
	@ignore = "true"
	@priority = "3"
	test CanViewTheErrorMessageForInvalidIPAddressAndMACAddress {
		task ("Given I active IP and MAC Address field") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "",
				field = "IP Address");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "",
				field = "MAC Address");
		}

		task ("Given I fulfill the IP Address field with a invalid IP") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "1234567789",
				field = "IP Address");
		}

		task ("Then I should see the alert with the text 'Invalid IP.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "Invalid IP.");
		}

		task ("Given I fulfill the IP Address field with a IP with white spaces") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "192.168 .1.1",
				field = "IP Address");
		}

		task ("Then I should see the alert with the text 'The IP most not have spaces.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "The IP must not have spaces.");
		}

		task ("When I fulfill the IP Address field with a valid IP") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "192.168.1.1",
				field = "IP Address");
		}

		task ("Then I should not see the alert with the text 'Invalid IP.'") {
			CustomerPortal.assertErrorMessageIsNotVisible(errorMessage = "Invalid IP.");
		}

		task ("Then I should not see the alert with the text 'The IP must not have spaces.'") {
			CustomerPortal.assertErrorMessageIsNotVisible(errorMessage = "The IP must not have spaces.");
		}

		task ("When I fulfill the MAC Address field with a invalid MAC") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "InvalidMACAddress",
				field = "MAC Address");
		}

		task ("Then I should see the alert with the text 'Invalid Mac.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "Invalid MAC.");
		}

		task ("When I fulfill the MAC Address field with a MAC with white spaces") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "A0-B1-C2- D3-E4-F5",
				field = "MAC Address");
		}

		task ("Then I should see the alert with the text 'The Mac must not have spaces.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "The MAC must not have spaces.");
		}

		task ("When I fulfill the MAC Address field with a valid MAC") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "A0-B1-C2-D3-E4-F5",
				field = "MAC Address");
		}

		task ("Then I should not see the alert with the text 'Invalid MAC.'") {
			CustomerPortal.assertErrorMessageIsNotVisible(errorMessage = "Invalid MAC.");
		}
	}

	@description = "Automation Ticket: LPS-157449 | Test Summary: Verify that when you click Previous you go back to the previous step with the same selections you entered"
	@ignore = "true"
	@priority = "4"
	test CanViewTheRemoveActivationKeyButton {
		task ("Given I fulfill the Environment field") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");
		}

		task ("And the '- Remove Activation Key' button should not preset") {
			CustomerPortal.assertButtonNotPresent(text = "Remove Activation Key");
		}

		task ("And I fulfill all fields") {
			CP2ActivationKeys.fulfillActivationKey();
		}

		task ("And I click at '+ Add Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Add Activation Key");
		}

		task ("Then I should be able to view '- Remove Activation Key' button") {
			CustomerPortal.viewButton(text = "Remove Activation Key");
		}

		task ("When I click at '- Remove Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Remove Activation Key");
		}

		task ("And I fulfill all fields two times") {
			CP2ActivationKeys.fulfillActivationKey(numberOfActivationKeys = "3");
		}

		task ("Then I should be able to view '- Remove Activation Key' button") {
			CustomerPortal.viewButton(text = "Remove Activation Key");
		}

		task ("When I click at '- Remove Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Remove Activation Key");
		}

		task ("Then I should be able to view '- Remove Activation Key' button") {
			CustomerPortal.viewButton(text = "Remove Activation Key");
		}

		task ("When I click at '- Remove Activation Key' button") {
			CustomerPortal.clickAtButton(text = "Remove Activation Key");
		}

		task ("Then the '- Remove Activation Key' button should not preset") {
			CustomerPortal.assertButtonNotPresent(text = "Remove Activation Key");
		}
	}

	@description = "Automation Ticket: LPS-157452 | Test Summary: Verify if the success message after the user generates a key"
	@ignore = "true"
	@priority = "4"
	test CanViewTheSuccessMessage {
		task ("Given I fulfill All fields for the product") {
			var numberOfActivationKeys = "3";

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Name",
				field = "Environment Name");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = "Environment Test Description",
				field = "Description");

			CP2ActivationKeys.fulfillActivationKey(numberOfActivationKeys = "${numberOfActivationKeys}");
		}

		task ("And click at Generate Keys button") {
			var generateButtom = "Generate ${numberOfActivationKeys} Keys";

			CustomerPortal.clickAtButton(text = "${generateButtom}");
		}

		task ("Then I should be able to view the success message with the text 'Activation Key was generated successfully'") {
			CustomerPortal.viewAlert(alertText = "Activation Key was generated successfully");
		}
	}

	@description = "Automation Ticket: LPS-157450 | Test Summary: Verify that when you click Previous you go back to the previous step with the same selections you entered"
	@ignore = "true"
	@priority = "4"
	test IfYouClickOnThePreviousButtonTheUserGoesBackToThePreviousStep {
		task ("Given I click at 'Provious' button") {
			CustomerPortal.clickAtButton(text = "Previous");
		}

		task ("Then I should be able to view the previous forms fields values") {
			CP2ActivationKeys.assertSelectedFieldText(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.assertSelectedFieldText(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.assertSelectedFieldText(
				field = "Key Type",
				option = "Production");
		}

		task ("When I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.0");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Non-Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("And I click at 'Provious' button") {
			CustomerPortal.clickAtButton(text = "Previous");
		}

		task ("Then I should be able to view the previous forms fields values") {
			CP2ActivationKeys.assertSelectedFieldText(
				field = "Product",
				option = "DXP");

			CP2ActivationKeys.assertSelectedFieldText(
				field = "Version",
				option = "7.0");

			CP2ActivationKeys.assertSelectedFieldText(
				field = "Key Type",
				option = "Non-Production");
		}
	}

}