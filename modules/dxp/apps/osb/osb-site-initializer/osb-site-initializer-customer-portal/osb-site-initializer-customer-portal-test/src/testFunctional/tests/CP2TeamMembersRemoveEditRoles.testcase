@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-150004 | Test Summary: Verify if the user clicks the Cancel button he stays on the Team Members page"
	@priority = "4"
	test AfterCancellingTheActionHeStaysOnTheSamePage {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and login to okta") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Open the action menu and click the Remove option") {
			CP2Utils.openActionMenu(
				menuItem = "Remove",
				openUser = "Test Test");

			Button.click(button = "Cancel");
		}

		task ("Assert that the user remained on the Team Members page") {
			CP2TeamMembers.viewTeamMembersPage();
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}
	}

	@description = "Automation ID: LPS-150013 | Test Summary: Verify that after the user clicks Edit a Cancel button is available"
	@priority = "5"
	test CanViewCancelButton {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Adding a user to the project") {
			JSONUser.addUser(
				userEmailAddress = "test.user@liferay.com",
				userFirstName = "Test",
				userLastName = "User",
				userScreenName = "Testing");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "test.user@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Accounts.assignUsers(
				accountName = "${testAccount}",
				assigneeName = "Test User");
		}

		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and login to okta") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Open the action menu and click the Edit option") {
			CP2Utils.openActionMenu(
				menuItem = "Edit",
				openUser = "Test User");
		}

		task ("Click the Cancel button and affirm that you have remained on the Team Members page") {
			CP2Utils.changeRole(role = "User");

			Button.click(button = "Cancel");

			CP2Utils.assertNotChangeRole(role = "Administrator");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}

		task ("Delete user created") {
			JSONUser.deleteUserByEmailAddress(userEmailAddress = "test.user@liferay.com");
		}
	}

	@description = "Automation ID: LPS-150005 | Test Summary: Verify that if the user clicks the Remove confirmation button the staff member is indeed removed"
	@priority = "5"
	test CanViewIfTheUserIsRemoved {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Adding a user to the project") {
			JSONUser.addUser(
				userEmailAddress = "test.user@liferay.com",
				userFirstName = "Test",
				userLastName = "User",
				userScreenName = "Testing");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "test.user@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Accounts.assignUsers(
				accountName = "${testAccount}",
				assigneeName = "Test User");
		}

		task ("Change the role of the current user in the project") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and login to okta") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Close the confirmation modal") {
			CP2Utils.openActionMenu(
				menuItem = "Remove",
				openUser = "Test User");

			AssertElementPresent(
				locator1 = "CP2Utils#MODAL",
				value = "Are you sure you want to remove this team member from the project?");

			Button.click(button = "Remove");
		}

		task ("Assert the success message when submitting the form") {
			Alert.viewSuccessMessage();
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}

		task ("Delete user created") {
			JSONUser.deleteUserByEmailAddress(userEmailAddress = "test.user@liferay.com");
		}
	}

	@description = "Automation ID: LPS-150012 | Test Summary: Verify that after the user clicks Edit a Save button is available"
	@priority
	test CanViewSaveButton {
		property portal.upstream = "quarantine";

		// "Reason: Not able to reproduce scenario without OKTA workaround."

		task ("Adding a user to the project") {
			JSONUser.addUser(
				userEmailAddress = "test.user@liferay.com",
				userFirstName = "Test",
				userLastName = "User",
				userScreenName = "Testing");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "test.user@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${testAccount}");

			Accounts.assignUsers(
				accountName = "${testAccount}",
				assigneeName = "Test User");
		}

		task ("Change the user role in the project") {
			Accounts.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = "${testAccount}");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and login to okta") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.loginOktaToUpdateCP();

			SelectWindow(locator1 = "title=Home - ${testSiteName} - Liferay DXP");

			Refresh();
		}

		task ("Get into the project and go to Team Members page") {
			CP2TeamMembers.teamMembersFlow();
		}

		task ("Open the action menu and click the Edit option") {
			CP2Utils.openActionMenu(
				menuItem = "Edit",
				openUser = "Test User");
		}

		task ("Change the guest user role and save") {
			CP2Utils.changeRole(role = "User");

			Button.click(button = "Save");
		}

		task ("Assert that the role really has changed") {
			CP2Utils.assertChangeRole(role = "User");
		}

		task ("Delete the entries and objects created") {
			CustomerPortal.deleteEntryAccountFlag(entry = "ERC-002");
		}

		task ("Delete user created") {
			JSONUser.deleteUserByEmailAddress(userEmailAddress = "test.user@liferay.com");
		}
	}

}