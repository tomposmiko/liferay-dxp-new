@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToAllAccounts();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "LPS-146217 - Verify if when Customer Portal is created, Accounts Users will be created for it as well"
	@priority = "4"
	test AccountUsersAreCreatedForCP20 {
		AccountUsers.openAccountUsersAdmin();

		AssertElementPresent(
			locator1 = "CustomerPortalSite#ACCOUNTS_TABLE",
			value = "Test Test");
	}

	@description = "LPS-148456 - Verify if its possible login in Okta, Configure SAML Admin and create CP2.0"
	@ignore = "true"
	@priority = "5"
	test CanConnectWithOkta {
		task ("Login in Okta") {

			//var userEmailAddress = PropsUtil.get("okta.cp.email");
			//var userPassword = PropsUtil.get("okta.cp.password");

			var userEmailAddress = "garrettz@mbopartners.com.broken";
			var userPassword = "q4F63ZEH3njnnA34S761";

			Navigator.openSpecificURL(url = "https://login-dev.liferay.com/");

			Type(
				locator1 = "CustomerPortalSite#OKTA_USERNAME",
				value1 = "${userEmailAddress}");

			Type(
				locator1 = "CustomerPortalSite#OKTA_PASSWORD",
				value1 = "${userPassword}");

			Click(locator1 = "CustomerPortalSite#OKTA_SUBMIT");
		}

		Navigator.openURL();

		task ("Configure SAML Admin general info") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "SAML Admin");

			SAMLRole.configure(
				samlEntityId = "customer2.liferay.com",
				samlRoleType = "Service Provider");

			if (IsElementPresent(locator1 = "CustomerPortalSite#CERTIFICATE", value = "SIGNING")) {
				CustomerPortal.replaceCertificateAndPrivateKey(
					certificateUsage = "SIGNING",
					samlKeyPassword = "QATEST");

				SAMLRole.configureCertificateAndPrivateKey(
					certificateUsage = "ENCRYPTION",
					samlKeyPassword = "QATEST");

				Click(locator1 = "CPSAMLAdmin#SAML_ENABLED_CHECKBOX");
			}
			else {
				SAMLRole.configureCertificateAndPrivateKey(
					certificateUsage = "SIGNING",
					samlKeyPassword = "QATEST");

				SAMLRole.configureCertificateAndPrivateKey(
					certificateUsage = "ENCRYPTION",
					samlKeyPassword = "QATEST");

				Click(locator1 = "CPSAMLAdmin#SAML_ENABLED_CHECKBOX");
			}
		}

		task ("Configure IdP Connections") {

			//var entityId = PropsUtil.get("okta.cp.entityId");
			//var metadataURL = PropsUtil.get("okta.cp.metadataURL");

			var entityId = "http://www.okta.com/exk158id544C4j3KK0h8";
			var metadataURL = "https://provisioning.liferay.com/documents/20124/139691/customer-2.0-local-metadata.xml/eeac6c00-20b9-dafd-3059-4151d02d487b";

			SAMLNavigation.gotoIdentityProviderConnections();

			CustomerPortal.addIdPCForCustomerPortal(
				idpAttributeMapping = "emailAddress,UUID,screenName,lastName,firstName",
				idpEntityId = "${entityId}",
				idpMetadataURL = "${metadataURL}",
				idpNameId = "CP2",
				nameIdentifierFormat = "Unspecified");

			PortletEntry.save();
		}

		task ("Create CP2.0 and verify that it has been created") {
			var testSiteName = "Customer Portal Name";
			var testSiteURL = "customer-portal-name";

			Site.openSitesAdmin();

			TeamExtranet.addSiteTemplateCP(
				siteName = "${testSiteName}",
				siteTemplateName = "Liferay OSB Site Initializer Customer Portal");

			ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

			AssertElementPresent(
				locator1 = "CP2LiferayContact#PROJECT_CARD",
				title = "Test Account 01");
		}

		task ("Teardown") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "SAML Admin");

			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.deleteSAMLConnection(samlEntityId = "${entityId}");

			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "SAML Admin");

			Click(locator1 = "CPSAMLAdmin#SAML_ENABLED_CHECKBOX");

			SAMLRole.deleteCertificate();

			CustomerPortal.customerPortalTearDown();
		}
	}

	@description = "Automation ID: LPS-146215 | Test Summary: Verify if Customer Portal can be created"
	@priority = "5"
	test CanCP20BeCreated {
		property portal.acceptance = "true";

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Assert the Customer Portal Page is present") {
			AssertElementPresent(
				key_title = "Welcome,",
				locator1 = "CustomerPortalSite#FRAGMENT_HEADING");
		}
	}

	@description = "Automation ID: LPS-146220 | Test Summary: Verify if when Customer Portal is created, Objects will be created for it as well"
	@priority = "4"
	test ObjectsAreCreatedForCP20 {
		task ("Go to the Objects admin and assert that the objects have been created") {
			ObjectAdmin.openObjectAdmin();

			AssertElementPresent(
				locator1 = "CustomerPortalSite#OBJECTS_TABLE",
				value = "Koroneiki Account");
		}
	}

	@description = "Automation ID: LPS-146219 | Test Summary: Verify if when Customer Portal is created, Remote Apps will be created for it as well"
	@priority = "4"
	test RemoteAppsAreCreatedForCP20 {
		task ("Assert that when the Customer Portal is created, remote applications are also created") {
			RemoteApps.goToRemoteAppsPortlet();

			AssertElementPresent(
				locator1 = "CustomerPortalSite#OBJECTS_TABLE",
				value = "Customer Portal");
		}
	}

	@description = "Automation ID: LPS-146216 | Test Summary: Verify if when Customer Portal is created, Tests Accounts will be created for it as well"
	@priority = "4"
	test TestsAccountsAreCreatedForCP20 {
		task ("Assert that after the Customer Portal was created, test accounts were also created") {
			Account.openAccountsAdmin();

			AssertElementPresent(
				locator1 = "CustomerPortalSite#ACCOUNTS_TABLE",
				value = "Test Account LXC - SM");
		}
	}

}