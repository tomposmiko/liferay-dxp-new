@component-name = "OSB Site Initializer Partner Portal"
definition {

	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	var siteName = "Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Partner Portal Site") {
			PRMUtils.addPRMSite();
		}

		task ("Go to Marketing page on Partner Portal") {
			PRMUtils.gotoPRM();

			PRMNavigator.goToNavItem(navItem = "Marketing");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${siteName}");
		}
	}

	@description = "This is a test for LPS-164164. Verify if a banner is displayed when user access Marketing page and will appear again after dismissed"
	@priority = "5"
	test BannerIsDisplayed {
		task ("Given that the welcome banner is displayed on marketing page") {
			AssertVisible(locator1 = "PRMPages#WELCOME_BANNER");
		}

		task ("When the user clicks on 'Dismiss' button") {
			PRMPages.dismissBanner();
		}

		task ("Then the banner should desappear") {
			AssertNotVisible(locator1 = "PRMPages#WELCOME_BANNER");
		}

		task ("And when the user goes to another pages and back to Marketing") {
			PRMNavigator.goToNavItem(navItem = "Home");

			PRMNavigator.goToNavItem(navItem = "Marketing");
		}

		task ("Then the banner should be displayed again") {
			AssertVisible(locator1 = "PRMPages#WELCOME_BANNER");
		}

		task ("And when the user clicks on 'Dismiss' button") {
			PRMPages.dismissBanner();
		}

		task ("Then the banner should desappear") {
			AssertNotVisible(locator1 = "PRMPages#WELCOME_BANNER");
		}

		task ("And when the user refreshes the page") {
			Refresh();
		}

		task ("Then the banner should be displayed again") {
			AssertVisible(locator1 = "PRMPages#WELCOME_BANNER");
		}
	}

	@description = "This is a test for LPS-164166. Verify if a 'Get Tour Partner Marketing Guide' button is displayed on banner and a file will be downloaded when click on this button"
	@priority = "4"
	test CanDownloadBannerGuide {
		var fileName = "partner-marketing-program-guide.pdf";

		task ("Given that the user clicks on 'Get Your Partner Marketing Guide' button on Welcome Banner") {
			PRMPages.clickBannerButton(buttonText = "Get Your Partner Marketing Guide");

			WaitForPageLoad();
		}

		task ("Then the guide will be downloaded") {
			PRMUtils.downloadFileViaCurl(fileName = "${fileName}");

			ImportExport.assertDownloadedFileName(downloadedFile = "${fileName}");
		}
	}

	@description = "This is a test for LPS-164165. Verify if a 'Watch a Video Tour' button is displayed on banner and a Video will be opened in a popup when click on this button"
	@priority = "4"
	test CanWatchBannerVideo {
		task ("Given that the user clicks on 'Watch a Video Tour' button on Welcome Banner") {
			PRMPages.clickBannerButton(buttonText = "Watch a Video Tour");
		}

		task ("Then a modal will be opened and the user can watch the video") {
			YoutubePortlet.playEmbeddedVideo(
				progressBarInitialization = "0 Minutes 0 Seconds of 0 Minutes 0 Seconds",
				videoDuration = "2 Minutes 44 Seconds",
				videoPlayNode = "0 Minutes 2 Seconds of 2 Minutes 44 Seconds");
		}
	}

}