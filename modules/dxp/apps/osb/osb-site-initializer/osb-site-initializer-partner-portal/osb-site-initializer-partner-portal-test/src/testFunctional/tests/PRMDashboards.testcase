@component-name = "OSB Site Initializer Partner Portal"
definition {

	property custom.properties = "feature.flag.LPS-135430=true";
	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Partner Portal Site and connect with Salesforce") {
			PRMUtils.addSite();

			PRMUtils.connectWithSalesforce();
		}

		task ("Add a partner user") {
			JSONUser.addUser(
				userEmailAddress = "partner@liferay.com",
				userFirstName = "partner",
				userLastName = "partner",
				userScreenName = "partner");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "partner@liferay.com");
		}

		task ("Add a manager user with a Manager role") {
			JSONUser.addUserWithRole(
				roleTitle = "Channel General Manager",
				userEmailAddress = "manager@liferay.com",
				userFirstName = "manager",
				userLastName = "manager",
				userScreenName = "manager");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "manager@liferay.com");
		}

		task ("Add a new account and assign the created user to the account") {
			JSONPRM.addAccount();

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "partner@liferay.com");
		}

		task ("Go to Partner Portal and login with the created user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "manager@liferay.com",
				userLoginFullName = "manager");

			PRMUtils.gotoPRM();
		}

		task ("Create a new MDF Request") {
			JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = "3000,2000",
				campaignName = "Campaign Name 1");
		}

		PRMNavigator.openSitePage(pageName = "Dashboard");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PRMUtils.tearDown();
		}
	}

	@description = "This is a test for LPS-179914. Verify that the value of Approved MDFs are displayed on MDF Dashboard"
	@priority = 4
	test MDFApprovedValueAppearInDashboard {
		property test.name.skip.portal.instance = "PRMDashboards#MDFApprovedValueAppearInDashboard";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		var budgetValue = 2000;

		task ("Given I get the current amount of Approved MDF Value") {
			var initialValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Approved");
		}

		task ("When I create a new MDF Request and approve it") {
			var requestId = JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = ${budgetValue},
				campaignName = "Campaign Name 1");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${requestId});
		}

		task ("And I go back to Dashboard page and get the new amount of Approved MDF Value") {
			PRMNavigator.openSitePage(pageName = "Dashboard");

			var newValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Approved");

			task ("Make a quotient of the Total Activity Cost by 50% (2), which will result in the approved value") {
				var requestedValue = ${budgetValue} / 2;
			}

			task ("Make the sum of the initial value + approved value, to obtain the new value that must be in the dashboard") {
				var expectedValue = ${initialValue} + ${requestedValue};
			}
		}

		task ("Then the actual amount of approved MDF value was increased") {
			TestUtils.assertEquals(
				actual = ${newValue},
				expected = ${expectedValue});
		}
	}

	@description = "This is a test for LPS-177308. Verify that the value of Requested MDFs are displayed on MDF Dashboard"
	@priority = 4
	test MDFRequestedValueAppearInDashboard {
		property test.name.skip.portal.instance = "PRMDashboards#MDFRequestedValueAppearInDashboard";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		var budgetValue = 2000;

		task ("Given I get the current amount of requested MDF Value") {
			var initialValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Requested");
		}

		task ("When I create a new MDF Request") {
			JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = ${budgetValue},
				campaignName = "Campaign Name 1");
		}

		task ("And I go back to Dashboard page and get the new amount of requested MDF Value") {
			PRMNavigator.openSitePage(pageName = "Dashboard");

			var newValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Requested");

			task ("Make a quotient of the Total Activity Cost by 50% (2), which will result in the requested value") {
				var requestedValue = ${budgetValue} / 2;
			}

			task ("Make the sum of the initial value + requested value, to obtain the new value that must be in the dashboard") {
				var expectedValue = ${initialValue} + ${requestedValue};
			}
		}

		task ("Then the actual amount of requested MDF value was increased") {
			TestUtils.assertEquals(
				actual = ${newValue},
				expected = ${expectedValue});
		}
	}

}