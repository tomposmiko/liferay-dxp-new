@component-name = "OSB Site Initializer Partner Portal"
definition {

	property custom.properties = "feature.flag.LPS-135430=true";
	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "partner@liferay.com",
				userFirstName = "partner",
				userLastName = "partner",
				userScreenName = "partner");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "partner@liferay.com");
		}

		task ("Add a new account and assign the created user to the account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Company Name 1",
				accountEntryType = "Business");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "partner@liferay.com");
		}

		task ("Create a new Partner Portal Site") {
			PRMUtils.addPRMSite();
		}

		task ("Go to Partner Portal and login with the created user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "partner@liferay.com",
				userLoginFullName = "partner");

			PRMUtils.gotoPRM();
		}

		task ("Go to 'Marketing' page") {
			PRMNavigator.goToNavItem(navItem = "Marketing");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Partner Portal");
		}
	}

	@description = "This is a test for LPS-172917. Verify that If there are multiple activities, the review page will display them as dropdown items that can be expandable"
	@priority = 5
	test CanExpandAndSeeMultipleActivities {
		task ("Given I go to add a MDF Request") {
			PRMMarketing.gotoAddNewMDF();
		}

		task ("And I fill all Goals form with my informations") {
			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignDescription = "Campaign Description",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");

			Button.click(button = "Continue");
		}

		task ("And I add two activities and fill it with my information") {
			PRMMDFRequest.newActivity(
				activityDescription = "Activity Description",
				activityName = "Activity Name 1",
				budgetList = "Sponsorship Fee-2000,Room Rental-3000",
				followUpStrategy = "test",
				leadFollowUpList = "Other",
				leadList = "No",
				tactic = "Other",
				targetOfLeads = "test",
				typeOfActivity = "Miscellaneous Marketing");

			Button.click(button = "Continue");

			PRMMDFRequest.newActivity(
				activityDescription = "Activity Description",
				activityIndex = 1,
				activityName = "Activity Name 2",
				budgetList = "Sponsorship Fee-2000,Room Rental-3000",
				followUpStrategy = "test",
				leadFollowUpList = "Other",
				leadList = "No",
				tactic = "Other",
				targetOfLeads = "test",
				typeOfActivity = "Miscellaneous Marketing");

			Button.click(button = "Continue");
		}

		task ("When I go to the MDF Review Page") {
			Button.click(button = "Continue");
		}

		task ("And when I click on the first acitivity") {
			PRMMDFRequest.activityCollapseButton(button = "Activity Name 1");
		}

		task ("Then I can see the information about the first activity") {
			AssertVisible(
				key_fieldName = "Activity name",
				key_fieldValue = "Activity Name 1",
				locator1 = "PRMMDFRequest#SUMMARY_FIELD");
		}

		task ("And when I click again on the first activity") {
			PRMMDFRequest.activityCollapseButton(button = "Activity Name 1");
		}

		task ("Then the information about the first activity will no longer be visible") {
			AssertNotVisible(
				key_fieldName = "Activity name",
				key_fieldValue = "Activity Name 1",
				locator1 = "PRMMDFRequest#SUMMARY_FIELD");
		}

		task ("And when I click on the second acitivity") {
			PRMMDFRequest.activityCollapseButton(button = "Activity Name 2");
		}

		task ("Then I can see the information about the second activity") {
			AssertVisible(
				key_fieldName = "Activity name",
				key_fieldValue = "Activity Name 2",
				locator1 = "PRMMDFRequest#SUMMARY_FIELD");
		}

		task ("And when I click again on the second activity") {
			PRMMDFRequest.activityCollapseButton(button = "Activity Name 2");
		}

		task ("Then the information about the second activity will no longer be visible") {
			AssertNotVisible(
				key_fieldName = "Activity name",
				key_fieldValue = "Activity Name 2",
				locator1 = "PRMMDFRequest#SUMMARY_FIELD");
		}
	}

	@description = "This is a test for LPS-173817. Verify that is possible to export all visible MDFs"
	@priority = 5
	test CanExportAllVisibleMDFs {
		task ("Given I go to add three new MDF Requests") {
			for (var n : list "1,2,3") {
				PRMNavigator.goToNavItem(navItem = "Marketing");

				PRMMarketing.gotoAddNewMDF();

				PRMMDFRequest.createNewRequest(
					accountName = "Company Name 1",
					activityDescription = "Activity Description",
					activityName = "Activity Name 1",
					additionalOptions = "6.x to DXP Migration",
					budgetList = "Sponsorship Fee-2000,Room Rental-3000",
					campaignDescription = "Campaign Description",
					campaignName = "Campaign Name ${n}",
					countryName = "Global",
					followUpStrategy = "test",
					goalsOptions = "Lead generation",
					leadFollowUpList = "Other",
					leadList = "No",
					tactic = "Other",
					targetMarketOptions = "Education,Energy",
					targetOfLeads = "test",
					targetRolesOptions = "Administrator",
					typeOfActivity = "Miscellaneous Marketing");
			}
		}

		task ("When I click on the 'Export MDF Report' button") {
			Button.click(button = "Export MDF Report");
		}

		task ("Then the information of the visible MDF's will be inside the exported file") {
			PRMMDFRequest.viewExportedMDF(campaignNameList = "Campaign Name 1,Campaign Name 2,Campaign Name 3");
		}
	}

	@description = "This is a test for LPS-171637. Verify that an alert will appear when user don't fill a mandatory* field and that “Continue” button only will be clickable after fill all mandatory fields"
	@priority = 5
	test CannotContinueWithoutFillRequiredField {
		task ("Given I go to add a new MDF Request") {
			PRMMarketing.gotoAddNewMDF();
		}

		task ("When I fill all mandatory fields on the MDF Request") {
			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignDescription = "Campaign Description",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");
		}

		task ("Then the Continue button will be clickable") {
			Button.click(button = "Continue");
		}

		task ("When I don't fill all mandatory fields on the MDF Request") {
			PRMNavigator.goToNavItem(navItem = "Marketing");

			PRMMarketing.gotoAddNewMDF();

			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");
		}

		task ("Then the Continue button will be disabled") {
			PRMMDFRequest.viewDisabledButton(buttonName = "Continue");
		}

		task ("When some mandatory field aren't fill") {
			PRMMDFRequest.fillGoalsPage(campaignDescription = "Campaign Description");

			PRMMDFRequest.fillGoalsPage(targetRolesOptions = "Administrator");
		}

		task ("Then an alert will appear") {
			FieldBase.assertRequiredFieldErrorPresent(fieldLabel = "Choose your target audience");
		}
	}

	@description = "This is a test for LPS-173507. Verify that the detail page displays all the information the partner entered on MDF Request Form"
	@priority = 5
	test DetailPageDisplaysAllMDFInformation {
		task ("Given I go to add a new MDF Request") {
			var accountName = "Company Name 1";
			var campaignName = "Campaign Name";
			var countryName = "Global";
			var goalsOptions = "Lead generation";
			var targetMarketOptions = "Education";
			var targetRolesOptions = "Administrator";
			var activityName = "Activity Name 1";
			var activityDescription = "Activity Description";
			var budgetList = "Sponsorship Fee-2000";
			var followUpStrategy = "test";
			var leadFollowUpList = "Other";
			var leadList = "No";
			var tactic = "Other";
			var targetOfLeads = "test";
			var typeOfActivity = "Miscellaneous Marketing";
			var startDate = DateUtil.getFormattedDate("+0", "M/d/yyyy");
			var endDate = DateUtil.getFormattedDate("+1", "M/d/yyyy");
			var expense = "Sponsorship Fee";
			var budget = "$2,000.00";

			PRMMarketing.gotoAddNewMDF();

			PRMMDFRequest.createNewRequest(
				accountName = ${accountName},
				activityDescription = ${activityDescription},
				activityName = ${activityName},
				budgetList = ${budgetList},
				campaignDescription = "Campaign Description",
				campaignName = ${campaignName},
				countryName = ${countryName},
				followUpStrategy = ${followUpStrategy},
				goalsOptions = ${goalsOptions},
				leadFollowUpList = ${leadFollowUpList},
				leadList = ${leadList},
				tactic = ${tactic},
				targetMarketOptions = ${targetMarketOptions},
				targetOfLeads = ${targetOfLeads},
				targetRolesOptions = ${targetRolesOptions},
				typeOfActivity = ${typeOfActivity});
		}

		task ("When I go to View MDF details page") {
			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}

		task ("Then verify that all the filled in fields are present") {
			PRMMDFRequest.viewMDFActivityDetails(
				activityDescription = ${activityDescription},
				activityName = ${activityName},
				budget = ${budget},
				endDate = ${endDate},
				expense = ${expense},
				leadList = ${leadList},
				startDate = ${startDate},
				tactic = ${tactic},
				typeOfActivity = ${typeOfActivity});

			PRMMDFRequest.viewMDFCompanyDetails(
				accountName = ${accountName},
				campaignName = ${campaignName},
				countryName = ${countryName},
				goalsOptions = ${goalsOptions},
				targetMarketOptions = ${targetMarketOptions},
				targetRolesOptions = ${targetRolesOptions});
		}
	}

	@description = "This is a test for LPS-172479. Verify that the difference between the start date and end date cannot be higher than six months."
	@priority = 5
	test DifferenceBetweenStartAndEndDateCannotExceedSixMonths {
		task ("Given I go to add a new MDF Request") {
			PRMMarketing.gotoAddNewMDF();
		}

		task ("And I fill all Goals form with my informations") {
			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignDescription = "Campaign Description",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");

			Button.click(button = "Continue");
		}

		task ("And I add a new activity") {
			PRMMDFRequest.newActivity(
				activityDescription = "Activity Description",
				activityName = "Activity Name 1",
				budgetList = "Sponsorship Fee-2000,Room Rental-3000",
				followUpStrategy = "test",
				leadFollowUpList = "Other",
				leadList = "No",
				tactic = "Other",
				targetOfLeads = "test",
				typeOfActivity = "Miscellaneous Marketing");
		}

		task ("When I put an end date that is higher than six months from the start date") {
			PRMMDFRequest.insertDate(
				dateFormat = "MMddYYYY",
				dateRange = "+185",
				fieldName = "endDate");
		}

		task ("Then a feedback message will appear") {
			PRMMDFRequest.viewErrorMessage(errorMessage = "End date must be less than six month after start date");
		}
	}

	@description = "This is a test for LPS-172957. Verify that the review page displays all the information the partner user entered to the activity"
	@priority = 5
	test ReviewPageDisplaysAllInputedInformation {
		var accountName = "Company Name 1";
		var campaignName = "Campaign Name";
		var countryName = "Global";
		var goalsOptions = "Lead generation";
		var targetMarketOptions = "Education";
		var targetRolesOptions = "Administrator";
		var activityDescription = "Activity Description";
		var activityName = "Activity Name 1";
		var budgetList = "Sponsorship Fee-2000";
		var expense = "Sponsorship Fee";
		var budget = "$2,000.00";
		var leadList = "No";
		var tactic = "Other";
		var typeOfActivity = "Miscellaneous Marketing";
		var startDate = DateUtil.getFormattedDate("+1", "M/d/yyyy");
		var endDate = DateUtil.getFormattedDate("+2", "M/d/yyyy");

		task ("Given I go to add a new MDF Request") {
			PRMMarketing.gotoAddNewMDF();
		}

		task ("When I fill all fields from MDF Request") {
			PRMMDFRequest.fillGoalsPage(
				accountName = ${accountName},
				additionalOptions = ${additionalOptions},
				campaignDescription = "Campaign Description",
				campaignName = ${campaignName},
				countryName = ${countryName},
				goalsOptions = ${goalsOptions},
				targetMarketOptions = ${targetMarketOptions},
				targetRolesOptions = ${targetRolesOptions});

			Button.click(button = "Continue");

			PRMMDFRequest.newActivity(
				activityDescription = ${activityDescription},
				activityName = ${activityName},
				budgetList = ${budgetList},
				followUpStrategy = ${followUpStrategy},
				leadFollowUpList = ${leadFollowUpList},
				leadList = ${leadList},
				tactic = ${tactic},
				targetOfLeads = ${targetOfLeads},
				typeOfActivity = ${typeOfActivity});

			Button.click(button = "Continue");

			Button.click(button = "Continue");
		}

		task ("Then all inputted information are displayed on Review Page") {
			PRMMarketing.viewMDFGoals(
				accountName = ${accountName},
				campaignDescription = "Campaign Description",
				campaignName = ${campaignName},
				countryName = ${countryName},
				goalsOptions = ${goalsOptions},
				targetMarketOptions = ${targetMarketOptions},
				targetRolesOptions = ${targetRolesOptions});

			PRMMarketing.viewMDFActivity(
				activityDescription = ${activityDescription},
				activityName = ${activityName},
				budget = ${budget},
				budgetList = ${budgetList},
				endDate = ${endDate},
				expense = ${expense},
				leadList = ${leadList},
				startDate = ${startDate},
				tactic = ${tactic},
				typeOfActivity = ${typeOfActivity});
		}
	}

	@description = "This is test is for LPS-173510. Verify that the start date cannot be before the current date"
	@priority = 5
	test StartDateCannotBeBeforeToCurrentDate {
		task ("Given I go to add a new MDF Request") {
			PRMMarketing.gotoAddNewMDF();
		}

		task ("And I fill all Goals form with my informations") {
			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignDescription = "Campaign Description",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");

			Button.click(button = "Continue");
		}

		task ("And when I got to activity page") {
			PRMMDFRequest.addNewActivity();
		}

		task ("And the current date is set on 'Start date' field") {
			PRMMDFRequest.insertDate(
				dateFormat = "MMddYYYY",
				dateRange = "-1",
				fieldName = "startDate");
		}

		task ("Then an error message will be displayed") {
			PRMMDFRequest.viewErrorMessage(errorMessage = "Start date need to be after today");
		}
	}

	@description = "This is a test for LPS-172891. Verify that the start date cannot be equals to the current date"
	@priority = 5
	test StartDateCannotBeEqualsToCurrentDate {
		task ("Given I go to add a new MDF Request and fill all Goals form with my information") {
			PRMMarketing.gotoAddNewMDF();

			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignDescription = "Campaign Description",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");

			Button.click(button = "Continue");
		}

		task ("When the user goes to add a new activity") {
			PRMMDFRequest.addNewActivity();
		}

		task ("And a date is set on 'Start Date' field") {
			PRMMDFRequest.insertDate(
				dateFormat = "MMddYYYY",
				dateRange = "-1",
				fieldName = "startDate");
		}

		task ("Then an error message will be displayed") {
			PRMMDFRequest.viewErrorMessage(errorMessage = "Start date need to be after today");
		}
	}

	@description = "This is a test for LPS-169960. Verify that a submited MDF will be displayed on the list"
	@priority = 5
	test SubmittedMDFAppearsOnListing {
		task ("Given I go to add a new MDF Request") {
			PRMMarketing.gotoAddNewMDF();
		}

		task ("And I fill all Goals form with my informations") {
			PRMMDFRequest.fillGoalsPage(
				accountName = "Company Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				campaignDescription = "Campaign Description",
				campaignName = "Campaign Name",
				countryName = "Global",
				goalsOptions = "Lead generation",
				targetMarketOptions = "Education,Energy",
				targetRolesOptions = "Administrator");

			Button.click(button = "Continue");
		}

		task ("And I add a new activity") {
			PRMMDFRequest.newActivity(
				activityDescription = "Activity Description",
				activityName = "Activity Name 1",
				budgetList = "Sponsorship Fee-2000,Room Rental-3000",
				followUpStrategy = "test",
				leadFollowUpList = "Other",
				leadList = "No",
				tactic = "Other",
				targetOfLeads = "test",
				typeOfActivity = "Miscellaneous Marketing");

			Button.click(button = "Continue");
		}

		task ("When I submit the MDF") {
			Button.click(button = "Continue");

			Button.click(button = "Submit");
		}

		task ("Then the MDF is submited and visible on listing page") {
			WaitForPageLoad();

			PRMMDFListing.viewOnList(campaignName = "Campaign Name");
		}
	}

	@description = "This is a test for LPS-173512. Verify that If no claim was made, the message ‘You can submit up to 2 claims’ appears"
	@priority = 5
	test VerifyMessageWhenNoClaimWasMade {
		task ("Given that a partner submit a new MDF Request") {
			var campaignName = "Campaign Name";

			PRMMarketing.gotoAddNewMDF();

			PRMMDFRequest.createNewRequest(
				accountName = "Company Name 1",
				activityDescription = "Activity Description",
				activityName = "Activity Name 1",
				additionalOptions = "6.x to DXP Migration/Upgrade,Migration from competitor platform",
				budgetList = "Sponsorship Fee-2000,Room Rental-3000",
				campaignDescription = "Campaign Description",
				campaignName = ${campaignName},
				countryName = "Global",
				followUpStrategy = "test",
				goalsOptions = "Lead generation",
				leadFollowUpList = "Other",
				leadList = "No",
				tactic = "Other",
				targetMarketOptions = "Education,Energy",
				targetOfLeads = "test",
				targetRolesOptions = "Administrator",
				typeOfActivity = "Miscellaneous Marketing");
		}

		task ("When a manager approves the submitted MDF") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "manager@liferay.com",
				userLoginFullName = "manager");

			PRMUtils.gotoPRM();

			PRMHomePage.gotoQuickLinksOption(
				buttonLink = "mdf-requests",
				buttonText = "MDF");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFRequest.changeMDFStatus(
				campaignName = "Campaign Name",
				key_statusButton = "Approve");
		}

		task ("Then I can see the message 'You can submit up to 2 claim(s)'") {
			PRMMDFRequest.assertClaimMessage(key_claimMessage = "You can submit up to 2 claim(s).");
		}
	}

}