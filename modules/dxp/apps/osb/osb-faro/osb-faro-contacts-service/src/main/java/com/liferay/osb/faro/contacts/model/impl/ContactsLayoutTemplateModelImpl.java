/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.osb.faro.contacts.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.osb.faro.contacts.model.ContactsLayoutTemplate;
import com.liferay.osb.faro.contacts.model.ContactsLayoutTemplateModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ContactsLayoutTemplate service. Represents a row in the &quot;OSBFaro_ContactsLayoutTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ContactsLayoutTemplateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactsLayoutTemplateImpl}.
 * </p>
 *
 * @author Shinn Lok
 * @see ContactsLayoutTemplateImpl
 * @generated
 */
public class ContactsLayoutTemplateModelImpl
	extends BaseModelImpl<ContactsLayoutTemplate>
	implements ContactsLayoutTemplateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contacts layout template model instance should use the <code>ContactsLayoutTemplate</code> interface instead.
	 */
	public static final String TABLE_NAME = "OSBFaro_ContactsLayoutTemplate";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT},
		{"contactsLayoutTemplateId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createTime", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"modifiedTime", Types.BIGINT},
		{"headerContactsCardTemplateIds", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"settings_", Types.VARCHAR},
		{"type_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contactsLayoutTemplateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("headerContactsCardTemplateIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("settings_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OSBFaro_ContactsLayoutTemplate (mvccVersion LONG default 0 not null,contactsLayoutTemplateId LONG not null primary key,groupId LONG,companyId LONG,createTime LONG,userId LONG,userName VARCHAR(75) null,modifiedTime LONG,headerContactsCardTemplateIds STRING null,name VARCHAR(75) null,settings_ STRING null,type_ INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table OSBFaro_ContactsLayoutTemplate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contactsLayoutTemplate.contactsLayoutTemplateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OSBFaro_ContactsLayoutTemplate.contactsLayoutTemplateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTACTSLAYOUTTEMPLATEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ContactsLayoutTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactsLayoutTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactsLayoutTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactsLayoutTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactsLayoutTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return ContactsLayoutTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ContactsLayoutTemplate, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ContactsLayoutTemplate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactsLayoutTemplate, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ContactsLayoutTemplate)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ContactsLayoutTemplate, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ContactsLayoutTemplate, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ContactsLayoutTemplate)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ContactsLayoutTemplate, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ContactsLayoutTemplate, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<ContactsLayoutTemplate, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<ContactsLayoutTemplate, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ContactsLayoutTemplate, Object>>();

			attributeGetterFunctions.put(
				"mvccVersion", ContactsLayoutTemplate::getMvccVersion);
			attributeGetterFunctions.put(
				"contactsLayoutTemplateId",
				ContactsLayoutTemplate::getContactsLayoutTemplateId);
			attributeGetterFunctions.put(
				"groupId", ContactsLayoutTemplate::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ContactsLayoutTemplate::getCompanyId);
			attributeGetterFunctions.put(
				"createTime", ContactsLayoutTemplate::getCreateTime);
			attributeGetterFunctions.put(
				"userId", ContactsLayoutTemplate::getUserId);
			attributeGetterFunctions.put(
				"userName", ContactsLayoutTemplate::getUserName);
			attributeGetterFunctions.put(
				"modifiedTime", ContactsLayoutTemplate::getModifiedTime);
			attributeGetterFunctions.put(
				"headerContactsCardTemplateIds",
				ContactsLayoutTemplate::getHeaderContactsCardTemplateIds);
			attributeGetterFunctions.put(
				"name", ContactsLayoutTemplate::getName);
			attributeGetterFunctions.put(
				"settings", ContactsLayoutTemplate::getSettings);
			attributeGetterFunctions.put(
				"type", ContactsLayoutTemplate::getType);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ContactsLayoutTemplate, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ContactsLayoutTemplate, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ContactsLayoutTemplate, ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setMvccVersion);
			attributeSetterBiConsumers.put(
				"contactsLayoutTemplateId",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setContactsLayoutTemplateId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setCompanyId);
			attributeSetterBiConsumers.put(
				"createTime",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setCreateTime);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ContactsLayoutTemplate, String>)
					ContactsLayoutTemplate::setUserName);
			attributeSetterBiConsumers.put(
				"modifiedTime",
				(BiConsumer<ContactsLayoutTemplate, Long>)
					ContactsLayoutTemplate::setModifiedTime);
			attributeSetterBiConsumers.put(
				"headerContactsCardTemplateIds",
				(BiConsumer<ContactsLayoutTemplate, String>)
					ContactsLayoutTemplate::setHeaderContactsCardTemplateIds);
			attributeSetterBiConsumers.put(
				"name",
				(BiConsumer<ContactsLayoutTemplate, String>)
					ContactsLayoutTemplate::setName);
			attributeSetterBiConsumers.put(
				"settings",
				(BiConsumer<ContactsLayoutTemplate, String>)
					ContactsLayoutTemplate::setSettings);
			attributeSetterBiConsumers.put(
				"type",
				(BiConsumer<ContactsLayoutTemplate, Integer>)
					ContactsLayoutTemplate::setType);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@Override
	public long getContactsLayoutTemplateId() {
		return _contactsLayoutTemplateId;
	}

	@Override
	public void setContactsLayoutTemplateId(long contactsLayoutTemplateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactsLayoutTemplateId = contactsLayoutTemplateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(long createTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createTime = createTime;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public long getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(long modifiedTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedTime = modifiedTime;
	}

	@Override
	public String getHeaderContactsCardTemplateIds() {
		if (_headerContactsCardTemplateIds == null) {
			return "";
		}
		else {
			return _headerContactsCardTemplateIds;
		}
	}

	@Override
	public void setHeaderContactsCardTemplateIds(
		String headerContactsCardTemplateIds) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_headerContactsCardTemplateIds = headerContactsCardTemplateIds;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getSettings() {
		if (_settings == null) {
			return "";
		}
		else {
			return _settings;
		}
	}

	@Override
	public void setSettings(String settings) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_settings = settings;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalType() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("type_"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ContactsLayoutTemplate.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactsLayoutTemplate toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ContactsLayoutTemplate>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactsLayoutTemplateImpl contactsLayoutTemplateImpl =
			new ContactsLayoutTemplateImpl();

		contactsLayoutTemplateImpl.setMvccVersion(getMvccVersion());
		contactsLayoutTemplateImpl.setContactsLayoutTemplateId(
			getContactsLayoutTemplateId());
		contactsLayoutTemplateImpl.setGroupId(getGroupId());
		contactsLayoutTemplateImpl.setCompanyId(getCompanyId());
		contactsLayoutTemplateImpl.setCreateTime(getCreateTime());
		contactsLayoutTemplateImpl.setUserId(getUserId());
		contactsLayoutTemplateImpl.setUserName(getUserName());
		contactsLayoutTemplateImpl.setModifiedTime(getModifiedTime());
		contactsLayoutTemplateImpl.setHeaderContactsCardTemplateIds(
			getHeaderContactsCardTemplateIds());
		contactsLayoutTemplateImpl.setName(getName());
		contactsLayoutTemplateImpl.setSettings(getSettings());
		contactsLayoutTemplateImpl.setType(getType());

		contactsLayoutTemplateImpl.resetOriginalValues();

		return contactsLayoutTemplateImpl;
	}

	@Override
	public ContactsLayoutTemplate cloneWithOriginalValues() {
		ContactsLayoutTemplateImpl contactsLayoutTemplateImpl =
			new ContactsLayoutTemplateImpl();

		contactsLayoutTemplateImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		contactsLayoutTemplateImpl.setContactsLayoutTemplateId(
			this.<Long>getColumnOriginalValue("contactsLayoutTemplateId"));
		contactsLayoutTemplateImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		contactsLayoutTemplateImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		contactsLayoutTemplateImpl.setCreateTime(
			this.<Long>getColumnOriginalValue("createTime"));
		contactsLayoutTemplateImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		contactsLayoutTemplateImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		contactsLayoutTemplateImpl.setModifiedTime(
			this.<Long>getColumnOriginalValue("modifiedTime"));
		contactsLayoutTemplateImpl.setHeaderContactsCardTemplateIds(
			this.<String>getColumnOriginalValue(
				"headerContactsCardTemplateIds"));
		contactsLayoutTemplateImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		contactsLayoutTemplateImpl.setSettings(
			this.<String>getColumnOriginalValue("settings_"));
		contactsLayoutTemplateImpl.setType(
			this.<Integer>getColumnOriginalValue("type_"));

		return contactsLayoutTemplateImpl;
	}

	@Override
	public int compareTo(ContactsLayoutTemplate contactsLayoutTemplate) {
		long primaryKey = contactsLayoutTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ContactsLayoutTemplate)) {
			return false;
		}

		ContactsLayoutTemplate contactsLayoutTemplate =
			(ContactsLayoutTemplate)object;

		long primaryKey = contactsLayoutTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactsLayoutTemplate> toCacheModel() {
		ContactsLayoutTemplateCacheModel contactsLayoutTemplateCacheModel =
			new ContactsLayoutTemplateCacheModel();

		contactsLayoutTemplateCacheModel.mvccVersion = getMvccVersion();

		contactsLayoutTemplateCacheModel.contactsLayoutTemplateId =
			getContactsLayoutTemplateId();

		contactsLayoutTemplateCacheModel.groupId = getGroupId();

		contactsLayoutTemplateCacheModel.companyId = getCompanyId();

		contactsLayoutTemplateCacheModel.createTime = getCreateTime();

		contactsLayoutTemplateCacheModel.userId = getUserId();

		contactsLayoutTemplateCacheModel.userName = getUserName();

		String userName = contactsLayoutTemplateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactsLayoutTemplateCacheModel.userName = null;
		}

		contactsLayoutTemplateCacheModel.modifiedTime = getModifiedTime();

		contactsLayoutTemplateCacheModel.headerContactsCardTemplateIds =
			getHeaderContactsCardTemplateIds();

		String headerContactsCardTemplateIds =
			contactsLayoutTemplateCacheModel.headerContactsCardTemplateIds;

		if ((headerContactsCardTemplateIds != null) &&
			(headerContactsCardTemplateIds.length() == 0)) {

			contactsLayoutTemplateCacheModel.headerContactsCardTemplateIds =
				null;
		}

		contactsLayoutTemplateCacheModel.name = getName();

		String name = contactsLayoutTemplateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			contactsLayoutTemplateCacheModel.name = null;
		}

		contactsLayoutTemplateCacheModel.settings = getSettings();

		String settings = contactsLayoutTemplateCacheModel.settings;

		if ((settings != null) && (settings.length() == 0)) {
			contactsLayoutTemplateCacheModel.settings = null;
		}

		contactsLayoutTemplateCacheModel.type = getType();

		return contactsLayoutTemplateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ContactsLayoutTemplate, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ContactsLayoutTemplate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactsLayoutTemplate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ContactsLayoutTemplate)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ContactsLayoutTemplate>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ContactsLayoutTemplate.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _contactsLayoutTemplateId;
	private long _groupId;
	private long _companyId;
	private long _createTime;
	private long _userId;
	private String _userName;
	private long _modifiedTime;
	private String _headerContactsCardTemplateIds;
	private String _name;
	private String _settings;
	private int _type;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ContactsLayoutTemplate, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ContactsLayoutTemplate)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put(
			"contactsLayoutTemplateId", _contactsLayoutTemplateId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createTime", _createTime);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("modifiedTime", _modifiedTime);
		_columnOriginalValues.put(
			"headerContactsCardTemplateIds", _headerContactsCardTemplateIds);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("settings_", _settings);
		_columnOriginalValues.put("type_", _type);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("settings_", "settings");
		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("contactsLayoutTemplateId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createTime", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("modifiedTime", 128L);

		columnBitmasks.put("headerContactsCardTemplateIds", 256L);

		columnBitmasks.put("name", 512L);

		columnBitmasks.put("settings_", 1024L);

		columnBitmasks.put("type_", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ContactsLayoutTemplate _escapedModel;

}