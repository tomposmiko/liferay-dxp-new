@component-name = "portal-batch-engine"
definition {

	property custom.properties = "feature.flag.COMMERCE-8087=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Batch Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given I go to Import/Export Center") {
			ImportExport.openImportExportAdmin();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test CanConfigImportWithAddOrUpdateImportStrategyAndTwoUpdateStrategies {
		task ("When I select OrderItem entity type to import") {
			ImportExport.gotoImport();

			ImportExport.selectEntity(entityType = "OrderItem (v1_0 - Liferay Headless Commerce Admin Order)");
		}

		task ("Then the available Import Strategy is Add or Update Records") {
			AssertTextEquals(
				locator1 = "ImportExport#IMPORT_STRATEGY",
				value1 = "Add or Update Records");
		}

		task ("And Then the available Update Strategy are Update Changed Record Fields/Overwrite Records") {
			AssertTextEquals(
				locator1 = "ImportExport#UPDATE_STRATEGY",
				value1 = "Update Changed Record Fields Overwrite Records");
		}
	}

	@priority = 3
	test CanConfigImportWithOnlyAddImportStrategyAndEmptyUpdateStrategy {
		task ("When I create an import task") {
			ImportExport.gotoImport();
		}

		task ("Then the available Import Strategy is Only Add New Records for BlogPostingImage,DispatchTrigger") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "BlogPostingImage (v1_0 - Liferay Headless Delivery),DispatchTrigger (v1_0 - Liferay Dispatch REST)",
				importStrategy = "Only Add New Records");
		}

		task ("And Then the available Update Strategy is empty for BlogPostingImage,DispatchTrigger") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "BlogPostingImage (v1_0 - Liferay Headless Delivery),DispatchTrigger (v1_0 - Liferay Dispatch REST)",
				updateStrategy = "");
		}
	}

	@priority = 3
	test CanConfigImportWithOnlyAddImportStrategyAndOverwrtieUpdateStrategy {
		task ("When I create an import task") {
			ImportExport.gotoImport();
		}

		task ("Then the available Import Strategy is Only Add New Records for Comment,keyword, WorkflowDefinition") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "Comment (v1_0 - Liferay Headless Delivery),Keyword (v1_0 - Liferay Headless Admin Taxonomy),WorkflowDefinition (v1_0 - Liferay Headless Admin Workflow)",
				importStrategy = "Only Add New Records");
		}

		task ("And Then the available Update Strategy is Overwrite Records for Comment,keyword, WorkflowDefinition") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "Comment (v1_0 - Liferay Headless Delivery),Keyword (v1_0 - Liferay Headless Admin Taxonomy),WorkflowDefinition (v1_0 - Liferay Headless Admin Workflow)",
				updateStrategy = "Overwrite Records");
		}
	}

	@priority = 3
	test CanConfigImportWithOnlyAddImportStrategyAndTwoUpdateStrategies {
		task ("When I create an import task") {
			ImportExport.gotoImport();
		}

		task ("Then the available Import Strategy is Only Add New Records for ObjectAction,DocumentFolder") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "ObjectAction (v1_0 - Liferay Object Admin REST),DocumentFolder (v1_0 - Liferay Headless Delivery)",
				importStrategy = "Only Add New Records");
		}

		task ("And Then the available Update Strategy are Update Changed Record Fields/Overwrite Records for ObjectAction,DocumentFolder") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "ObjectAction (v1_0 - Liferay Object Admin REST),DocumentFolder (v1_0 - Liferay Headless Delivery)",
				updateStrategy = "Update Changed Record Fields Overwrite Records");
		}
	}

	@priority = 3
	test CanConfigImportWithOnlyAddImportStrategyAndUpdateChangedRecordFieldsStrategy {
		task ("When I create an import task") {
			ImportExport.gotoImport();
		}

		task ("Then the available Import Strategy is Only Add New Records for CommerceAccount,Catalog") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "Account (v1_0 - Liferay Headless Commerce Admin Account),Catalog (v1_0 - Liferay Headless Commerce Admin Catalog)",
				importStrategy = "Only Add New Records");
		}

		task ("And Then the available Update Strategy is empty for CommerceAccount,Catalog") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "Account (v1_0 - Liferay Headless Commerce Admin Account),Catalog (v1_0 - Liferay Headless Commerce Admin Catalog)",
				updateStrategy = "Update Changed Record Fields");
		}
	}

	@priority = 4
	test CanConfigImportWithTwoImportStrategiesAndTwoUpdateStrategies {
		property portal.acceptance = "true";

		task ("Given a custom object Student is created and published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Student",
				en_US_plural_label = "Students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("When I create an import task") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();
		}

		task ("Then the available Import Strategy are Add or Update Records/Only Add New Records for Account,blogPosting,StructuredContent,ObjectDefinition,C_Student") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "Account (v1_0 - Liferay Headless Admin User), BlogPosting (v1_0 - Liferay Headless Delivery), StructuredContent (v1_0 - Liferay Headless Delivery),ObjectDefinition (v1_0 - Liferay Object Admin REST), C_Student (v1_0 - Liferay Object REST)",
				importStrategy = "Only Add New Records Add or Update Records");
		}

		task ("And Then the available Update Strategy are Update Changed Record Fields/Overwrite Records for Account,blogPosting,StructuredContent,ObjectDefinition,C_Student") {
			ImportExport.assertStrategiesForEntityTypes(
				entityTypes = "Account (v1_0 - Liferay Headless Admin User), BlogPosting (v1_0 - Liferay Headless Delivery), StructuredContent (v1_0 - Liferay Headless Delivery),ObjectDefinition (v1_0 - Liferay Object Admin REST), C_Student (v1_0 - Liferay Object REST)",
				updateStrategy = "Update Changed Record Fields Overwrite Records");
		}
	}

	@priority = 3
	test CanConfigImportWithTwoImportStrategiesAndUpdateChangedRecordFieldsStrategy {
		task ("When I select Shipment as the entity type to import") {
			ImportExport.gotoImport();

			ImportExport.selectEntity(entityType = "Shipment (v1_0 - Liferay Headless Commerce Admin Shipment)");
		}

		task ("Then the available Import Strategy are Add or Update Reconds/Only Add New Records") {
			AssertTextEquals(
				locator1 = "ImportExport#IMPORT_STRATEGY",
				value1 = "Only Add New Records Add or Update Records");
		}

		task ("And Then the available Update Strategy is Update Changed Record Fields") {
			AssertTextEquals(
				locator1 = "ImportExport#UPDATE_STRATEGY",
				value1 = "Update Changed Record Fields");
		}
	}

	@priority = 4
	test CanDisplayIncludeHeadersWithExportObjectDefinitionCSVFormat {
		property custom.properties = "feature.flag.LPS-173135=true";
		property portal.acceptance = "true";

		task ("When I select CSV format to export ObjectDefinition") {
			ImportExport.gotoExport();

			ImportExport.configureExport(
				entityType = "ObjectDefinition (v1_0 - Liferay Object Admin REST)",
				exportFileFormat = "CSV");
		}

		task ("Then the Include Headers is checked") {
			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Include Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@priority = 4
	test CannotDisplayIncludeHeaderWithExportBlogPostingJOSNLFormat {
		property portal.acceptance = "true";

		task ("When I select JSONL format to export BlogPosting") {
			ImportExport.gotoExport();

			ImportExport.configureExport(
				entityType = "BlogPosting (v1_0 - Liferay Headless Delivery)",
				exportFileFormat = "JSONL");
		}

		task ("Then the Include Headers checkbox is not present") {
			AssertElementNotPresent(
				checkboxName = "Include Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@priority = 4
	test CannotDisplayWithExportObjectDefinitionJOSNTFormat {
		property portal.acceptance = "true";

		task ("When I select JSONT format to export ObjectDefinition") {
			ImportExport.gotoExport();

			ImportExport.configureExport(
				entityType = "ObjectDefinition (v1_0 - Liferay Object Admin REST)",
				exportFileFormat = "JSONT");
		}

		task ("Then the Include Headers checkbox is not present") {
			AssertElementNotPresent(
				checkboxName = "Include Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@priority = 4
	test CannotDisplyIncludeHeadersWithExportAccountJOSNFormat {
		property portal.acceptance = "true";

		task ("When I select JSON format to export Account") {
			ImportExport.gotoExport();

			ImportExport.configureExport(
				entityType = "Account (v1_0 - Liferay Headless Admin User)",
				exportFileFormat = "JSONT");
		}

		task ("Then the Include Headers checkbox is not present") {
			AssertElementNotPresent(
				checkboxName = "Include Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

}