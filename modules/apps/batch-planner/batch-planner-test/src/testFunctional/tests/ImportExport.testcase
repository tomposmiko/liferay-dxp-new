@component-name = "portal-batch-engine"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Batch Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONAccountEntryAPI._deleteAllAccountEntries();

			BatchPlanner.batchPlannerTearDown();
		}
	}

	@description = "Verify users can exclude fields from being imported"
	@priority = "3"
	test CanExcludeFieldsFromImport {
		property portal.acceptance = "true";

		task ("Given the user is importing CSV file with account data") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import.csv");

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");
		}

		task ("When the user maps only specific fields and imports the file") {
			ImportExport.mapImport(fieldMappings = "name:Account Name,type:Account Type,externalReferenceCode:External Reference Code");

			Button.click(button = "Import");
		}

		task ("Then only those fields should be imported") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can export entity data via CSV files"
	@priority = "3"
	test CanExportCSVFiles {
		property portal.acceptance = "true";

		task ("Given several accounts") {
			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Business Account Description",
				accountEntryName = "Test Business Account",
				accountEntryType = "Business",
				externalReferenceCode = "101");

			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Guest Account Description",
				accountEntryName = "Test Guest Account",
				accountEntryType = "Guest",
				externalReferenceCode = "102");

			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Person Account Description",
				accountEntryName = "Test Person Account",
				accountEntryType = "Person",
				externalReferenceCode = "103");
		}

		task ("When the user selects CSV as Export File Format and exports the accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			Select(
				key_selectFieldLabel = "Export File Format",
				locator1 = "ImportExport#SELECT",
				value1 = "CSV");

			ImportExport.mapExport(exportFields = "name,type,description,externalReferenceCode");

			Button.click(button = "Export");
		}

		task ("Then a CSV file should be generated for download which contains account data") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.click(button = "Download");

			DownloadTempFile();

			DMDocument.assertFileNameFromTempFolder(fileName = "Export.zip");

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "unzip-temp-file -DfileName=Export.zip");

			var exportFileContent = TestCase.getTempFileContent(fileName = "export.csv");

			var expectedFileContent = TestCase.getFileContent(fileName = "csv_account_import_defaultHeaders.csv");

			if ("${exportFileContent}" != "${expectedFileContent}") {
				fail("The exported file content does not match the expected file content.");
			}
		}
	}

	@description = "Verify users can export entity data via JSON files"
	@priority = "3"
	test CanExportJSONFiles {
		property portal.acceptance = "true";

		task ("Given several accounts") {
			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Business Account Description",
				accountEntryName = "Test Business Account",
				accountEntryType = "Business",
				externalReferenceCode = "101");

			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Guest Account Description",
				accountEntryName = "Test Guest Account",
				accountEntryType = "Guest",
				externalReferenceCode = "102");

			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Person Account Description",
				accountEntryName = "Test Person Account",
				accountEntryType = "Person",
				externalReferenceCode = "103");
		}

		task ("When the user selects JSON as Export File Format and exports the accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			Select(
				key_selectFieldLabel = "Export File Format",
				locator1 = "ImportExport#SELECT",
				value1 = "JSON");

			ImportExport.mapExport(exportFields = "name,type,description,externalReferenceCode");

			Button.click(button = "Export");
		}

		task ("Then a JSON file should be generated for download which contains account data") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.click(button = "Download");

			DownloadTempFile();

			DMDocument.assertFileNameFromTempFolder(fileName = "Export.zip");

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "unzip-temp-file -DfileName=Export.zip");

			var exportFileContent = TestCase.getTempFileContent(fileName = "export.json");

			var expectedFileContent = TestCase.getFileContent(fileName = "json_account_export.txt");

			if ("${exportFileContent}" != "${expectedFileContent}") {
				fail("The exported file content does not match the expected file content.");
			}
		}
	}

	@description = "Verify users can export entity data via JSONL files"
	@priority = "3"
	test CanExportJSONLFiles {
		property portal.acceptance = "true";

		task ("Given several accounts") {
			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Business Account Description",
				accountEntryName = "Test Business Account",
				accountEntryType = "Business",
				externalReferenceCode = "101");

			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Guest Account Description",
				accountEntryName = "Test Guest Account",
				accountEntryType = "Guest",
				externalReferenceCode = "102");

			JSONAccountEntry.addAccountEntry(
				accountEntryDescription = "Test Person Account Description",
				accountEntryName = "Test Person Account",
				accountEntryType = "Person",
				externalReferenceCode = "103");
		}

		task ("When the user selects JSONL as Export File Format and exports the accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			Select(
				key_selectFieldLabel = "Export File Format",
				locator1 = "ImportExport#SELECT",
				value1 = "JSONL");

			ImportExport.mapExport(exportFields = "name,type,description,externalReferenceCode");

			Button.click(button = "Export");
		}

		task ("Then a JSONL file should be generated for download which contains account data") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.click(button = "Download");

			DownloadTempFile();

			DMDocument.assertFileNameFromTempFolder(fileName = "Export.zip");

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "unzip-temp-file -DfileName=Export.zip");

			var exportFileContent = TestCase.getTempFileContent(fileName = "export.jsonl");

			var expectedFileContent = TestCase.getFileContent(fileName = "jsonl_account_import.jsonl");

			if ("${exportFileContent}" != "${expectedFileContent}") {
				fail("The exported file content does not match the expected file content.");
			}
		}
	}

	@description = "Verify users can import entities via CSV files"
	@priority = "3"
	test CanImportCSVFiles {
		property portal.acceptance = "true";

		task ("Given a CSV file with data on multiple accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import.csv");
		}

		task ("When the user imports the file") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:Account Name,type:Account Type,description:Account Description,externalReferenceCode:External Reference Code");

			Button.click(button = "Import");
		}

		task ("Then the accounts should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via a CSV file without headers"
	@priority = "3"
	test CanImportCSVFileWithoutHeaders {
		property portal.acceptance = "true";

		task ("Given a CSV file without headers and account data") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import_noHeaders.csv");
		}

		task ("When the user unchecks "Contains Headers" and selects Account as Entity Type") {
			Click.clickAtNotVisible(
				checkboxName = "Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");
		}

		task ("Then the user should be able to map account fields to columns in the CSV file") {
			ImportExport.mapImport(fieldMappings = "name:Column 1,type:Column 2,description:Column 3,externalReferenceCode:Column 4");
		}

		task ("When the user imports the file") {
			Button.click(button = "Import");
		}

		task ("Then the accounts in the file should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via JSON files"
	@priority = "3"
	test CanImportJSONFiles {
		property portal.acceptance = "true";

		task ("Given a JSON file with data on multiple accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "json_account_import.json");
		}

		task ("When the user imports the file") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:name,type:type,description:description,externalReferenceCode:externalReferenceCode");

			Button.click(button = "Import");
		}

		task ("Then the accounts should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via JSONL files"
	@priority = "3"
	test CanImportJSONLFiles {
		property portal.acceptance = "true";

		task ("Given a JSONL file with data on multiple accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "jsonl_account_import.jsonl");
		}

		task ("When the user imports the file") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:name,type:type,description:description,externalReferenceCode:externalReferenceCode");

			Button.click(button = "Import");
		}

		task ("Then the accounts should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can save export configuration as a template during the export process"
	@priority = "3"
	test CanSaveTemplateDuringExport {
		property portal.acceptance = "true";

		task ("Given the user has configured an export") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			Select(
				key_selectFieldLabel = "Export File Format",
				locator1 = "ImportExport#SELECT",
				value1 = "JSON");

			ImportExport.mapExport(exportFields = "name,type,description,externalReferenceCode");
		}

		task ("When the user saves the configuration as a template") {
			ImportExport.saveAsTemplate(templateName = "Test Account Export Template");
		}

		task ("Then the export template should be created successfully") {
			Button.clickCancel();

			Navigator.gotoNavTab(navTab = "Templates");

			LexiconEntry.gotoEntry(rowEntry = "Test Account Export Template");

			ImportExport.assertExportTemplate(
				entityType = "Account",
				exportFields = "name,type,description,externalReferenceCode",
				exportFileFormat = "JSON",
				headlessEndpoint = "/headless-admin-user",
				templateName = "Test Account Export Template");
		}
	}

	@description = "Verify users can save import configuration as a template during the import process"
	@priority = "3"
	test CanSaveTemplateDuringImport {
		property portal.acceptance = "true";

		task ("Given the user has configured an import") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import.csv");

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:Account Name,type:Account Type,externalReferenceCode:External Reference Code");
		}

		task ("When the user saves the configuration as a template") {
			ImportExport.saveAsTemplate(templateName = "Test Account Import Template");
		}

		task ("Then the import template should be created successfully") {
			Button.clickCancel();

			Navigator.gotoNavTab(navTab = "Templates");

			LexiconEntry.gotoEntry(rowEntry = "Test Account Import Template");

			ImportExport.assertImportTemplate(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user",
				templateName = "Test Account Import Template");
		}
	}

	@description = "Verify CSV fields are automatically mapped to fields in Liferay when the names are the same"
	@priority = "3"
	test CSVFieldsAreAutoMapped {
		property portal.acceptance = "true";

		task ("Given a CSV file with field names that are the same as fields in Liferay is being imported") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import_defaultHeaders.csv");
		}

		task ("When I select the entity type") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");
		}

		task ("Then The fields are automatically mapped") {
			ImportExport.assertImportMappings(fieldMappings = "name:name,type:type,description:description");
		}
	}

}