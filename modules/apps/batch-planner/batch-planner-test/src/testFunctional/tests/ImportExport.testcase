@component-name = "portal-batch-engine"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Batch Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();

			BatchPlanner.batchPlannerTearDown();
		}
	}

	@description = "Verify users can exclude fields from being imported"
	@priority = "3"
	test CanExcludeFieldsFromImport {
		task ("Given the user is importing CSV file with account data") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import.csv");

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");
		}

		task ("When the user maps only specific fields and imports the file") {
			ImportExport.mapImport(fieldMappings = "name:Account Name,type:Account Type,externalReferenceCode:External Reference Code");

			Button.click(button = "Next");

			Button.click(button = "Start Import");
		}

		task ("Then only those fields should be imported") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via CSV files"
	@priority = "3"
	test CanImportCSVFiles {
		task ("Given a CSV file with data on multiple accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import.csv");
		}

		task ("When the user imports the file") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:Account Name,type:Account Type,description:Account Description,externalReferenceCode:External Reference Code");

			Button.click(button = "Next");

			Button.click(button = "Start Import");
		}

		task ("Then the accounts should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via a CSV file without headers"
	@priority = "3"
	test CanImportCSVFileWithoutHeaders {
		task ("Given a CSV file without headers and account data") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "csv_account_import_noHeaders.csv");
		}

		task ("When the user unchecks "Contains Headers" and selects Account as Entity Type") {
			Click.clickAtNotVisible(
				checkboxName = "Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");

			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");
		}

		task ("Then the user should be able to map account fields to columns in the CSV file") {
			ImportExport.mapImport(fieldMappings = "name:Column 1,type:Column 2,description:Column 3,externalReferenceCode:Column 4");
		}

		task ("When the user imports the file") {
			Button.click(button = "Next");

			Button.click(button = "Start Import");
		}

		task ("Then the accounts in the file should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via JSON files"
	@priority = "3"
	test CanImportJSONFiles {
		task ("Given a JSON file with data on multiple accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "json_account_import.json");
		}

		task ("When the user imports the file") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:name,type:type,description:description,externalReferenceCode:externalReferenceCode");

			Button.click(button = "Next");

			Button.click(button = "Start Import");
		}

		task ("Then the accounts should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

	@description = "Verify users can import entities via JSONL files"
	@priority = "3"
	test CanImportJSONLFiles {
		task ("Given a JSONL file with data on multiple accounts") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadDependencyFile.uploadFile(fileName = "jsonl_account_import.jsonl");
		}

		task ("When the user imports the file") {
			ImportExport.selectEntity(
				entityType = "Account",
				headlessEndpoint = "/headless-admin-user");

			ImportExport.mapImport(fieldMappings = "name:name,type:type,description:description,externalReferenceCode:externalReferenceCode");

			Button.click(button = "Next");

			Button.click(button = "Start Import");
		}

		task ("Then the accounts should be imported successfully") {
			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

			Button.clickDone();

			Button.clickCancel();

			ImportExport.assertExecutionEntry(
				entityType = "Account",
				executionAction = "Import",
				executionStatus = "Completed");

			Accounts.openAccountsAdmin();

			Accounts.viewAccountDetails(
				accountDescription = "Test Business Account Description",
				accountName = "Test Business Account",
				accountType = "Business",
				externalReferenceCode = "101");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Guest Account Description",
				accountName = "Test Guest Account",
				accountType = "Guest",
				externalReferenceCode = "102");

			Navigator.gotoBack();

			Accounts.viewAccountDetails(
				accountDescription = "Test Person Account Description",
				accountName = "Test Person Account",
				accountType = "Person",
				externalReferenceCode = "103");
		}
	}

}