@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();

			Depot.tearDownCP();

			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot can be accessed in the list view."
	@priority = "5"
	test AccessInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			listView = "true");

		DepotNavigator.gotoPortlet(portlet = "Web Content");
	}

	@description = "This ensures that a depot can be accessed in the table view."
	@priority = "5"
	test AccessInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			tableView = "true");

		DepotNavigator.gotoPortlet(portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be accessed when the Applications Menu is disabled at the system level."
	@priority = "5"
	test AccessWithDisabledAppsMenuAtSystemScope {
		property test.name.skip.portal.instance = "Depot#AccessWithDisabledAppsMenuAtSystemScope";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Navigation",
			configurationName = "Applications Menu",
			configurationScope = "Virtual Instance Scope");

		FormFields.disableCheckbox(fieldName = "Enable Applications Menu");

		SystemSettings.saveConfiguration();

		for (var application : list "Documents and Media,Web Content") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(depotName = "Test Depot Name");

			DepotNavigator.gotoPortlet(portlet = "${application}");
		}
	}

	@description = "This ensures that a user can not create a repository with the same escape characters name as another repository."
	@priority = "5"
	test AddDuplicateWithEscapeCharacters {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "&");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depot = "Duplicate",
			depotName = "&");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "&");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that users cannot create the same name as another site name."
	@priority = "5"
	test AddNameThatDuplicatesSite {
		JSONGroup.addGroup(groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depot = "Duplicate",
			depotName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewDefaultCP();
	}

	@description = "This ensures that users cannot create the same name as another translated repository name."
	@priority = "4"
	test AddNameThatDuplicatesTranslation {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDefineCustomLanguages(depotName = "Test Depot Name");

		Depot.viewLanguageItems(depotLanguage = "Spanish (Spain)");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDefineCustomLanguages(depotName = "Test Depot Name");

		Depot.moveLanguage(
			depotLanguage = "Spanish (Spain)",
			moveDown = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDefineCustomLanguages(depotName = "Test Depot Name");

		Depot.viewLanguageItems(
			depotLanguage = "Spanish (Spain)",
			lastLanguageItem = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDefineCustomLanguages(depotName = "Test Depot Name");

		Depot.configureDefaultLanguage(
			defaultDepotLanguage = "Spanish (Spain)",
			locale = "es_ES");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotName = "Test Depot Name",
			depotNameEdit = "título",
			language = "es-ES");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depot = "Duplicate",
			depotName = "título");
	}

	@description = "This ensures that users cannot create a site with the same name as an existing depot."
	@priority = "5"
	test AddSiteThatDuplicatesName {
		JSONDepot.addDepot(
			depotDescription = "This depot will duplicate a site name",
			depotName = "Site Name");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		LexiconEntry.gotoAdd();

		LexiconCard.clickCard(card = "Blank Site");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.inputName(name = "Site Name");

		Button.clickAdd();

		Alert.viewErrorMessage(errorMessage = "Please enter a unique name.");
	}

	@description = "This ensures that a depot can be deleted."
	@priority = "5"
	test DeleteDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with a folder can be deleted."
	@priority = "4"
	test DeleteDepotWithFolder {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMFolder.addCP(dmFolderName = "DM Folder Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with multiple files can be deleted."
	@priority = "4"
	test DeleteDepotWithMultipleFiles {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.xls");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the list view."
	@priority = "5"
	test DeleteInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the table view."
	@priority = "5"
	test DeleteInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted when the Applications Menu is disabled at the instance level."
	@priority = "5"
	test DeleteWithDisabledAppsMenuAtInstanceScope {
		PortalSettings.disableApplicationsMenu();

		ProductMenuHelper.openProductMenu();

		ProductMenu.gotoPortletWhenDisableApplicationsMenu(
			category = "Content",
			panel = "Applications Menu-Applications",
			portlet = "Asset Libraries");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		ProductMenu.gotoPortletWhenDisableApplicationsMenu(
			category = "Content",
			panel = "Applications Menu-Applications",
			portlet = "Asset Libraries");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a user can deselect depots and delete the reselected ones in cards view."
	@priority = "5"
	test DeselectAndDeleteInCardsView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Click.clickNoWaitForVisible(
			key_card = "Test Depot Name 1",
			locator1 = "Card#CARD_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 3 Selected");

		Depot.deleteCP(deletions = "true");

		LexiconCard.checkCardCheckbox(card = "Test Depot Name 1");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a user can deselect depots and delete the reselected ones in list view."
	@priority = "4"
	test DeselectAndDeleteInListView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Uncheck(
			key_listEntry = "Test Depot Name 1",
			locator1 = "LexiconList#LIST_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 3 Selected");

		Depot.deleteCP(deletions = "true");

		Check(
			key_listEntry = "Test Depot Name 1",
			locator1 = "LexiconList#LIST_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a user can deselect depots and delete the reselected ones in table view."
	@priority = "4"
	test DeselectAndDeleteInTableView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Uncheck(
			key_rowEntry = "Test Depot Name 1",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 3 Selected");

		Depot.deleteCP(deletions = "true");

		Check(
			key_rowEntry = "Test Depot Name 1",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be edited."
	@priority = "5"
	test EditDepot {
		property portal.acceptance = "true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Edited Test Depot Name");
	}

	@description = "This ensures that a depot can be edited in the list view."
	@priority = "5"
	test EditInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			listView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			listView = "true");
	}

	@description = "This ensures that a depot can be edited in the table view."
	@priority = "5"
	test EditInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			tableView = "true");
	}

	@description = "This ensures that users cannot edit repository name same as another repository name."
	@priority = "5"
	test RenameToDuplicate {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name 2");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depot = "Duplicate",
			depotName = "Test Depot Name 2",
			depotNameEdit = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name 2");
	}

	@description = "This ensures that a depot's description can be searched."
	@priority = "5"
	test SearchForDepotDescription {
		JSONDepot.addDepot(
			depotDescription = "Description 1",
			depotName = "Depot 1");

		JSONDepot.addDepot(
			depotDescription = "Description 2",
			depotName = "Depot 2");

		JSONDepot.addDepot(
			depotDescription = "Description 3",
			depotName = "Depot 3");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Should not be returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Description");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Description");

		DepotNavigator.gotoDepot(depotName = "Depot 1");
	}

	@description = "This ensures that a depot's title can be searched."
	@priority = "5"
	test SearchForDepotTitle {
		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Depot 1");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Depot 2");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Depot 3");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Should not be returned in search");

		DepotNavigator.openDepotAdmin();

		Pause(locator1 = "3000");

		Search.searchCP(searchTerm = "Depot");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Depot");

		DepotNavigator.gotoDepot(depotName = "Depot 1");
	}

	@description = "This ensures that all depots can be deleted when the user selects all."
	@priority = "4"
	test SelectAllAndDelete {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that all depots can be deleted in the list view when the user selects all."
	@priority = "4"
	test SelectAllAndDeleteInListView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that all depots can be deleted in the table view when the user selects all."
	@priority = "4"
	test SelectAllAndDeleteInTableView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be added."
	@priority = "5"
	test Smoke {
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Asset Libraries");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");
	}

	@description = "This ensures that the number of connected sites can be viewed in the card view."
	@priority = "5"
	test ViewConnectionsInCardView {
		for (var siteName : list "Site Name 1,Site Name 2,Site Name 3") {
			JSONGroup.addGroup(groupName = "${siteName}");
		}

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "0",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name 1,Site Name 2,Site Name 3");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "3",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.disconnectSite(siteList = "Site Name 2,Site Name 3");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "1",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.disconnectSite(siteList = "Site Name 1");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "0",
			depotName = "Test Depot Name");
	}

	@description = "This ensures that the number of connected sites can be viewed in the table view."
	@priority = "5"
	test ViewConnectionsInTableView {
		for (var siteName : list "Site Name 1,Site Name 2,Site Name 3") {
			JSONGroup.addGroup(groupName = "${siteName}");
		}

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "0",
			depotName = "Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name 1,Site Name 2,Site Name 3");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "3",
			depotName = "Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.disconnectSite(siteList = "Site Name 2,Site Name 3");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "1",
			depotName = "Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.disconnectSite(siteList = "Site Name 1");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "0",
			depotName = "Test Depot Name",
			tableView = "true");
	}

}