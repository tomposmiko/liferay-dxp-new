@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			BlogsEntry.tearDownCP();

			DMDocument.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot image can be used through Blogs on a connected site."
	@priority = "5"
	@refactordone
	test CanAddImageViaBlogs {
		DepotNavigator.openDepotAdmin();

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Blogs.addEntryWithCoverImageFromDepot(
			depotName = "Test Depot Name",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			imageFileName = "Document_2.jpg",
			siteURLKey = "site-name");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_2");
	}

	@description = "This ensures that a depot image can be used through page creation on a connected site."
	@priority = "5"
	@refactordone
	test CanAddImageViaContentPage {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpeg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpeg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Direct",
			depotName = "Test Depot Name",
			imageFileName = "Document_1.jpeg",
			paddingTop = "2",
			panel = "Styles");

		PageEditor.publish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-content-page-name");

		ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpeg");
	}

	@description = "This ensures that a depot image can be used through web content on a connected site."
	@priority = "5"
	@refactordone
	test CanAddImageViaWebContent {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpeg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpeg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "site-name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "site-name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Image",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			depotName = "Test Depot Name",
			navTab = "Documents and Media",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentImage = "Document_2.jpeg",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "Document_2.jpeg",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that a document using a type stored in AL can be removed on a connected site."
	@priority = "5"
	@refactordone
	test CanRemoveDMWithDocumentType {
		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Depot",
			textField = "DM Document Text");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewDocumentTypePG(textContent = "DM Document Text");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.delete(
			dmDocumentTypeName = "DM Document Type Depot",
			documentTypeHasReference = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_1.jpg");
	}

	@description = "This ensures that a document using a type stored in AL can be viewed on the connected site widgets."
	@priority = "4"
	@refactordone
	test CanViewDMwithDocumentTypeOnSiteWidgets {
		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Asset Publisher");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Documents and Media");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Depot",
			textField = "DM Document Text");

		Navigator.openSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document_1.jpg");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentType = "DM Document Type Depot");
	}

	@description = "This ensures that a document using a type stored in AL can be viewed in related assets on a connected site."
	@priority = "4"
	@refactordone
	test CanViewDocumentTypeInRelatedAssets {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Depot",
			textField = "DM Document Text");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "WC WebContent Title");

		RelatedAssets.selectAsset(
			assetTitle = "Document_1.jpg",
			assetType = "DM Document Type Depot");

		PortletEntry.publish();

		WebContentNavigator.openToEditWCInSite(
			groupName = "Site Name",
			siteURLKey = "site-name",
			webContentTitle = "WC WebContent Title");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "Document_1.jpg",
			locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TYPE",
			value1 = "DM Document Type Depot");
	}

	@description = "This ensures that a depot image in the KB content field can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewImageInKBAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Site Name",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		KBArticle.openToEditKBArticleInSite(
			groupName = "Site Name",
			kbArticleTitle = "Knowledge Base Article Title",
			siteURLKey = "site-name");

		KBArticle.editCP(
			depotName = "Test Depot Name",
			dmImage = "Document_1",
			kbArticleTitleEdit = "Knowledge Base Article Title Edit",
			navTab = "Documents and Media",
			skipNavigation = "true");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		KBArticle.openToKBArticleInSite(
			groupName = "Site Name",
			kbArticleTitle = "Knowledge Base Article Title Edit",
			siteURLKey = "site-name");

		KBArticle.viewImageViaContentCmd();
	}

	@description = "This ensures that a depot image in the MB content field can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewImageInMBAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONMBMessage.addMessage(
			groupName = "Site Name",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.openToEditThread(
			groupName = "Site Name",
			siteURLKey = "site-name",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.editCP(
			depotName = "Test Depot Name",
			skipNavigation = "true",
			threadBodyEdit = "MB Thread Message Body",
			threadBodyImageEdit = "DM Document Title");

		PortletEntry.publish();

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "site-name");

		MessageboardsThread.viewCP(
			replyCount = "0",
			threadBody = "MB Thread Message Body",
			threadBodyImage = "dm-document-title",
			threadSubject = "MB Thread Message Subject",
			userName = "Test Test");
	}

	@description = "This ensures that a depot image in the MB content field can be rendered correctly on a connected site when publication is enabled."
	@priority = "4"
	test CanViewImageInMBWithPublication {
		property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config:com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;:enabled=B&quot;true&quot;";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONMBMessage.addMessage(
			groupName = "Site Name",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.openToEditThread(
			groupName = "Site Name",
			siteURLKey = "site-name",
			threadSubject = "MB Thread Message Subject");

		MessageboardsThread.editCP(
			depotName = "Test Depot Name",
			skipNavigation = "true",
			threadBodyEdit = "MB Thread Message Body",
			threadBodyImageEdit = "DM Document Title");

		PortletEntry.publish();

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "site-name");

		MessageboardsThread.viewCP(
			replyCount = "0",
			threadBody = "MB Thread Message Body",
			threadBodyImage = "dm-document-title",
			threadSubject = "MB Thread Message Subject",
			userName = "Test Test");
	}

	@description = "This ensures that a depot image in the WC content field can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewImageInWCAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Site Name",
			title = "Web Content Title");

		WebContentNavigator.openToEditWCInSite(
			groupName = "Site Name",
			siteURLKey = "site-name",
			webContentTitle = "Web Content Title");

		WebContent.editCP(
			depotName = "Test Depot Name",
			navTab = "Documents and Media",
			selectViaCKEditor = "true",
			webContentImage = "DM Document Title",
			webContentTitle = "Web Content Title",
			webContentTitleEdit = "Web Content Title");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "dm-document-title",
			webContentTitle = "Web Content Title");
	}

	@description = "This ensures that a depot image in the WC content field can be rendered correctly on a connected site when publication is enabled."
	@priority = "4"
	test CanViewImageInWCWithPublication {
		property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config:com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;:enabled=B&quot;true&quot;";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			depotName = "Test Depot Name",
			embedImage = "true",
			imageFileName = "Document_1",
			webContentContent = "Web Content Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "document_1",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that a depot image in DM widget can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewImageViaDMWidgetAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(
			depotName = "Test Depot Name",
			selectRootFolder = "true");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(dmRootFolderName = "DM Folder Name");

		DMDocument.viewPG(dmDocumentTitle = "Document_1");
	}

	@description = "This ensures that a depot image in an image fragment can be rendered correctly on a connect site after moving it to a folder."
	@priority = "4"
	test CanViewImageViaImageFragmentAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Content Page Name",
			type = "content");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			depotName = "Test Depot Name",
			fragmentName = "Image",
			id = "image-square",
			imageFileName = "Document_1");

		PageEditor.publish();

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Site Name");

		ContentPages.viewFragmentImage(
			fragmentName = "image",
			id = "image-square",
			image = "document_1");
	}

	@description = "This ensures that a depot image in MG widget can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewImageViaMGAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Media Gallery Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Media Gallery Page",
			widgetName = "Media Gallery");

		Navigator.gotoSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.setRootFolder(
			depotName = "Test Depot Name",
			selectRootFolder = "true");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		Navigator.gotoSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.setRootFolder(dmRootFolderName = "DM Folder Name");

		Navigator.gotoSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		AssertVisible(
			key_mgImageName = "Document_1",
			locator1 = "MediaGallery#ENTRY_IMAGE_PREVIEW");
	}

	@description = "This ensures that a depot image in the Blogs content field can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewInlineImageAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		BlogsEntry.editContent(
			depotName = "Test Depot Name",
			dmImage = "DM Document Title",
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content",
			navTab = "Documents and Media");

		PortletEntry.publish();

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		BlogsEntry.viewInlineImage(uploadFileName = "dm-document-title");
	}

	@description = "This ensures that a depot image in the Blogs content field can be rendered correctly on a connected site when publication is enabled."
	@priority = "4"
	test CanViewInlineImageWithPublication {
		property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config:com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;:enabled=B&quot;true&quot;";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		BlogsEntry.editContent(
			depotName = "Test Depot Name",
			dmImage = "DM Document Title",
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content",
			navTab = "Documents and Media");

		PortletEntry.publish();

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		BlogsEntry.viewInlineImage(uploadFileName = "dm-document-title");
	}

	@description = "This ensures that the depot assets can be used through Related Assets on a connected site."
	@priority = "4"
	@refactordone
	test CanViewRelatedAssets {
		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Asset Publisher");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Depot 1",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addRelatedAsset(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content",
			depotName = "Test Depot Name");

		BlogsEntry.addRelatedAsset(
			assetTitle = "Document_1.doc",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		Button.clickPublish();

		Navigator.openSiteURL(siteName = "Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Related Assets");

		Navigator.openSiteURL(siteName = "Site Name");

		AssetPublisherPortlet.viewPG(
			assetContent = "Blogs Entry Content",
			assetTitle = "Blogs Entry Title",
			relatedAssetTitle = "WC WebContent Title,Document_1.doc");
	}

	@description = "This ensures that a depot image in the Blogs small image can be rendered correctly on a connected site after moving it to a folder."
	@priority = "4"
	test CanViewSmallImageAfterMovingToFolder {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry With Small Image",
			groupName = "Site Name");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry With Small Image",
			groupName = "Site Name",
			siteURLKey = "site-name");

		BlogsEntry.addSmallImage(
			depotName = "Test Depot Name",
			imageFileName = "DM Document Title",
			navTab = "Documents and Media");

		PortletEntry.publish();

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoSitePage(
			pageName = "Blogs Page",
			siteName = "Site Name");

		BlogsEntry.viewSmallImage(uploadFileName = "Document_1.jpg");
	}

}