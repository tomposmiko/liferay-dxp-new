@component-name = "portal-document-management"
@ignore = "true"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that a user can select depot web content from different repositories through WCD on a connected site."
	@priority = "4"
	test ChangeWCDSelection {
		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Web Content Display");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot 1",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name 2");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name 2",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot 2",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		for (var depotName : list "Test Depot Name,Test Depot Name 2") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoEdit(depotName = "${depotName}");

			DepotNavigator.gotoSites(depotName = "${depotName}");

			Depot.connectSite(siteList = "Site Name");
		}

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.changeWebContent(
			depotName = "Test Depot Name 2",
			webContentTitle = "WC WebContent Title 2");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot 2");
	}

	@description = "This test covers LPS-105119. It ensures that a web content in a depot can be selected through the field."
	@ignore = "true"
	@priority = "4"
	test SelectDepotContentViaWebContentField {
		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC Depot WebContent");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Web Content",
			fieldFieldLabel = "Web Content",
			fieldName = "WebContent");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Web Content",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			depotName = "Test Depot Name",
			fieldName = "WebContent",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentSelectWCFile = "WC Depot WebContent",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(
			webContentContent = "WC Depot WebContent",
			webContentTitle = "Web Content Title");
	}

	@description = "This ensures that a depot web content can be selected through the fragment in a content page on a connected site."
	@priority = "5"
	test SelectFromFragmentInContentPage {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			depotName = "Test Depot Name",
			webcontent = "true",
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-content-page-name");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT",
			value1 = "WC WebContent Depot");
	}

	@description = "This ensures that a depot web content can be selected through the fragment in a display page template on a connected site."
	@priority = "5"
	test SelectFromFragmentInDisplayPageTemplate {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			depotName = "Test Depot Name",
			webcontent = "true",
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PageEditor.clickPublish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title");

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Page Templates");

		PortletEntry.publish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/w/webcontent-title");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT",
			value1 = "WC WebContent Depot");
	}

	@description = "This ensures that a depot web content can be selected through WCD on a connected site."
	@priority = "5"
	test SelectFromWCD {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot");
	}

	@description = "This ensures that a depot web content can be selected through WCD in a content page on a connected site."
	@priority = "4"
	test SelectFromWidgetInContentPage {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		SitePages.openPagesAdmin(siteURLKey = "site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-content-page-name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot");
	}

	@description = "This ensures that a depot web content can be selected through WCD in a display page template on a connected site."
	@priority = "4"
	test SelectFromWidgetInDisplayPageTemplate {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(displayPageName = "Display Page Name");

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		Refresh();

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot");
	}

	@description = "This ensures that a depot web content can be selected on a connected staging site."
	@priority = "5"
	test SelectWCFromStagedSite {
		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Web Content Display");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Depot",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoStagedSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Depot");
	}

}