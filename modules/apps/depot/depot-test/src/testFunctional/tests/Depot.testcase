@component-name = "portal-document-management"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot can be accessed in the list view."
	@priority = "5"
	test AccessInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			listView = "true",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be accessed in the table view."
	@priority = "5"
	test AccessInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media",
			tableView = "true");
	}

	@description = "This ensures that a user can not create a repository with the same escape characters name as another repository."
	@priority = "5"
	test AddDuplicateWithEscapeCharacters {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "&amp;");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depot = "Duplicate",
			depotName = "&amp;");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "&amp;");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that users cannot create the same name as another site name."
	@priority = "5"
	test AddNameThatDuplicatesSite {
		JSONGroup.addGroup(groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depot = "Duplicate",
			depotName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewDefaultCP();
	}

	@description = "This ensures that users cannot create the same name as another translated repository name."
	@ignore = "true"
	@priority = "4"
	test AddNameThatDuplicatesTranslation {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoLanguages(depotName = "Test Depot Name");

		Click(
			key_languagesOption = "Define a custom default language and additional available languages for this repository.",
			locator1 = "Radio#DEPOT_LANGUAGES_OPTION");

		PortalSettings.configureCurrentLanguagesCP(
			currentPortalLanguages = "Spanish (Spain)",
			defaultPortalLanguage = "Spanish (Spain)");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotName = "Test Depot Name",
			depotNameEdit = "título");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depot = "Duplicate",
			depotName = "título");
	}

	@description = "This ensures that users cannot create a site with the same name as an existing depot."
	@priority = "5"
	test AddSiteThatDuplicatesName {
		JSONDepot.addDepot(
			depotDescription = "This depot will duplicate a site name",
			depotName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		LexiconEntry.gotoAdd();

		LexiconCard.clickCard(card = "Blank Site");

		PortletEntry.inputName(name = "Site Name");

		Button.clickSave();

		AssertTextEquals(
			locator1 = "Message#ERROR_FORM_FIELD_REQUIRED",
			value1 = "Please enter a unique name.");
	}

	@description = "This ensures that a depot can be deleted."
	@priority = "5"
	test DeleteDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with a folder can be deleted."
	@priority = "4"
	test DeleteDepotWithFolder {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMFolder.addCP(dmFolderName = "DM Folder Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with multiple files can be deleted."
	@priority = "4"
	test DeleteDepotWithMultipleFiles {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.xls");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the list view."
	@priority = "5"
	test DeleteInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the table view."
	@priority = "5"
	test DeleteInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be edited."
	@priority = "5"
	test EditDepot {
		property portal.acceptance = "true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be edited in the list view."
	@priority = "5"
	test EditInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			listView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			listView = "true",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be edited in the table view."
	@priority = "5"
	test EditInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			portlet = "Documents and Media",
			tableView = "true");
	}

	@description = "This ensures that users cannot edit repository name same as another repository name."
	@priority = "5"
	test RenameToDuplicate {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name 2");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depot = "Duplicate",
			depotName = "Test Depot Name 2",
			depotNameEdit = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name 2",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot's description can be searched."
	@priority = "5"
	test SearchForDepotDescription {
		JSONDepot.addDepot(
			depotDescription = "Description 1",
			depotName = "Depot 1");

		JSONDepot.addDepot(
			depotDescription = "Description 2",
			depotName = "Depot 2");

		JSONDepot.addDepot(
			depotDescription = "Description 3",
			depotName = "Depot 3");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Should not be returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Description");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Description");

		DepotNavigator.gotoDepot(
			depotName = "Depot 1",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot's title can be searched."
	@priority = "5"
	test SearchForDepotTitle {
		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Depot 1");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Depot 2");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Depot 3");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Should not be returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Depot");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Depot");

		DepotNavigator.gotoDepot(
			depotName = "Depot 1",
			portlet = "Documents and Media");
	}

	@description = "This ensures that all depots can be deleted when the user selects all."
	@priority = "4"
	test SelectAllAndDelete {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that all depots can be deleted in the list view when the user selects all."
	@priority = "4"
	test SelectAllAndDeleteInListView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that all depots can be deleted in the table view when the user selects all."
	@priority = "4"
	test SelectAllAndDeleteInTableView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be added."
	@priority = "5"
	test Smoke {
		property portal.acceptance = "true";

		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");
	}

}