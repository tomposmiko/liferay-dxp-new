@component-name = "portal-document-management"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This test asserts that an auto-tagged web content can be deleted in a depot when OpenNLP Auto-Tagging is enabled."
	@priority = "3"
	test DeleteAutotaggedWebContent {
		property test.name.skip.portal.instance = "DepotWC#DeleteAutotaggedWebContent";

		AutoTagging.enableOpenNLP(
			assetType = "Web Content Article",
			confidenceThreshold = "0.001");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Digital Transformation or Digital Experience? When selecting a DXP, companies should decide whether they are ready for deep transformation of their business operations, or are focused primarily on marketing and brand awareness, as these priorities tend to reflect the different strengths among the DXP vendors. Having an attractive website or mobile app is good, but more substantial gains in customer experience require processes to be re-optimized with the customer in mind. In a Forrester presentation, analyst Liz Herbert notes that real digital transformation spans both the experience layer and the operations core. Having an attractive website or mobile app is good, but more substantial gains in customer experience require processes to be re-optimized with the customer in mind. This responsiveness to customer needs can be achieved in a number of ways, from basic personalization of experience, to more advanced configurable workflows, to full modularization of business services that can be quickly re-assembled in new ways. However, not all companies are prepared for that level of change, and may in the meantime want to start segmenting audiences in order to target personalized offers. Some vendors, particularly those that have had content management systems, can do this well. Ideally, your platform will have both operational and marketing capabilities, so that even if you start with digital marketing, you won’t have to go through a second vendor selection process when you are ready for operational transformation. Also, there isn’t just one way to achieve these goals. Using any category heritage of DXP in combination with an overall architecture for integration and modular services can get you there.",
			webContentTitle = "Digital Transformation or Digital Experience?");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "Digital Transformation or Digital Experience?");

		Panel.expandPanel(panel = "Metadata");

		AssertTextEquals(
			key_tagName = "dxp",
			locator1 = "AssetCategorization#TAG",
			value1 = "dxp");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContent.deleteCP(
			siteURLKey = "test-depot-name",
			webContentTitle = "Digital Transformation or Digital Experience?");
	}

	@description = "This ensures that a web content folder can be deleted in a depot."
	@priority = "4"
	test DeleteFolder {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");
	}

	@description = "This test deletes multiple web content in a depot."
	@priority = "5"
	test DeleteMultipleWebContent {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		for (var i : list "1,2,3") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		for (var rowEntry : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			Check(
				key_rowEntry = "${rowEntry}",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");
		}

		ClickNoError(locator1 = "Icon#DELETE");

		AssertConfirm(value1 = "Are you sure you want to move the selected entries to the Recycle Bin?");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@description = "This test deletes template and structure in a depot."
	@priority = "5"
	test DeleteTemplateAndStructure {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.deleteCP(templateName = "WC Template Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no templates.");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.deleteCP(structureName = "WC Structure Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no structures.");
	}

	@description = "This ensures that a web content folder can be edited in a depot."
	@priority = "3"
	test EditFolder {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentNavigator.gotoEntryMenuItem(
			entry = "WC Folder Name",
			menuItem = "Edit");

		PortletEntry.inputName(name = "WC Folder Name Edit");

		PortletEntry.save();

		AssertTextEquals.assertPartialText(
			key_webContentTitle = "WC Folder Name Edit",
			locator1 = "WC#ENTRY_LIST_TITLE",
			value1 = "WC Folder Name Edit");
	}

	@description = "This test edits template and structure in a depot."
	@priority = "5"
	test EditTemplateAndStructure {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.modifyTemplate(
			templateDescription = "WC Template Description Edited",
			templateName = "WC Template Name Edited",
			templatePreviousName = "WC Template Name");

		NavItem.gotoStructures();

		WebContentStructures.editSubstructureDefaultValuesCP(
			editSubstructureFieldNames = "Text",
			substructureName = "WC Structure Name");
	}

	@description = "This ensures that a web content can be edited in a depot."
	@priority = "5"
	test EditWebContent {
		property portal.acceptance = "true";

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This ensures that a web content can be expired in a depot."
	@priority = "3"
	test ExpireWebContent {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.expireCP(webContentTitleList = "WC WebContent Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Expired",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that a LAR file consisting of web content can be imported in a depot."
	@priority = "4"
	test ImportWebContent {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Guest",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "ExportWebContent.lar");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		LAR.importPortlet(larFileName = "ExportWebContent.lar");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContent.viewTitle(webContentTitle = "Web Content Title");
	}

	@description = "This ensures that web content can be moved to a folder in a depot."
	@priority = "3"
	test MoveWebContentToFolder {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContent.moveToFolderCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC WebContent Title");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that web content with structure can be restored to a depot."
	@priority = "5"
	test RestoreWebContentWithStructure {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "test-depot-name");

		RecycleBin.viewCP(
			assetName = "WC WebContent Title",
			assetType = "Web Content Article",
			deleteUser = "Test Test");

		RecycleBin.restoreCP(
			assetName = "WC WebContent Title",
			assetRestoreLocation = "Home",
			assetType = "Web Content Article");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");
	}

}