@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();

			Depot.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that the expired entries can be removed automatically in the recycle bin."
	@priority = "5"
	test CheckExpiredEntries {
		property custom.properties = "trash.entry.check.interval=1${line.separator}trash.entries.max.age=1";

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		Check(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_LIST_CHECKBOX");

		Depot.deleteContentViaBulkEditing(webContent = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Recycle Bin");

		RecycleBin.viewCP(
			assetName = "DM Document Title",
			assetType = "Document",
			customMaxAge = "1 minute",
			deleteUser = "Test Test");

		RecycleBin.viewCP(
			assetName = "WC WebContent Title",
			assetType = "Web Content Article",
			customMaxAge = "1 minute",
			deleteUser = "Test Test");

		Pause(locator1 = "120000");

		Refresh();

		RecycleBin.viewDefaultCP();
	}

	@description = "This ensures that the document can be deleted after the recycle bin is disabled."
	@priority = "5"
	test DeleteDocumentAfterDisabling {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		Navigator.gotoNavTab(navTab = "General");

		Depot.configureRecycleBin(recycleBin = "Disabled");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		var key_dmDocumentTitle = "DM Document Title";

		Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");

		Depot.deleteContentViaBulkEditing(recycleBinDisabled = "true");
	}

	@description = "This ensures that the web content can be deleted after the recycle bin is disabled."
	@priority = "5"
	test DeleteWCAfterDisabling {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Settings");

		Navigator.gotoNavTab(navTab = "General");

		Depot.configureRecycleBin(recycleBin = "Disabled");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		AssertElementNotPresent(
			key_category = "Recycle Bin",
			locator1 = "ProductMenu#CATEGORY_COLLAPSED");

		WebContent.deleteWithDisabledRB(entryTitle = "WC WebContent Title");
	}

	@description = "This ensures that the documents can be restored from recycle bin."
	@priority = "5"
	test RestoreDocuments {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		for (var key_dmDocumentTitle : list "Document_1.doc,Document_2.jpg") {
			Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");
		}

		Depot.deleteContentViaBulkEditing();

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Recycle Bin");

		RecycleBin.restoreCP(
			assetName = "Document_1.doc",
			assetRestoreLocation = "Home",
			assetType = "Document",
			multipleAssets = "true");

		Refresh();

		RecycleBin.restoreCP(
			assetName = "Document_2.jpg",
			assetRestoreLocation = "Home",
			assetType = "Document");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		for (var dmDocumentTitle : list "Document_1.doc,Document_2.jpg") {
			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

			DMDocument.viewCP(dmDocumentTitle = "${dmDocumentTitle}");

			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
	}

	@description = "This ensures that the web content can be restored from recycle bin."
	@priority = "5"
	test RestoreWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Recycle Bin");

		RecycleBin.restoreCP(
			assetName = "WC WebContent Title",
			assetRestoreLocation = "Home",
			assetType = "Web Content Article");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

}