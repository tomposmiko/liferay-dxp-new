@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot can be connected to different types of sites."
	@e2e
	@priority = 5
	@refactordone
	test CanConnectMultipleSites {
		Site.openSitesAdmin();

		JSONGroup.addChildGroup(
			groupName = "Child Site Name",
			parentGroupName = "Site Name");

		JSONGroup.addGroup(
			groupName = "Private Site Name",
			membershipType = "Private");

		JSONGroup.addGroup(
			groupName = "Restricted Site Name",
			membershipType = "Restricted");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = 0,
			depotName = "Test Depot Name");

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name,Private Site Name,Restricted Site Name");

		Depot.connectSite(
			parentSiteName = "Site Name",
			siteList = "Child Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = 4,
			depotName = "Test Depot Name");

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.viewConnectedSite(
			depotName = "Test Depot Name",
			siteList = "Site Name,Private Site Name,Restricted Site Name,Child Site Name");
	}

	@description = "This ensures that a depot can be connected to the site."
	@e2e
	@priority = 5
	@refactordone
	test CanConnectSite {
		property portal.acceptance = "true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.viewConnectedSite(
			depotName = "Test Depot Name",
			siteList = "Site Name");
	}

	@description = "This ensures that the disconnected site can not access the the depot."
	@e2e
	@priority = 5
	@refactordone
	test CanDisconnectSite {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = 1,
			depotName = "Test Depot Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.disconnectSite(siteList = "Site Name");

		Depot.viewNoConnectedSiteCP();
	}

	@description = "This ensures that an asset library can not be connected to a staged site."
	@priority = 4
	@refactordone
	test CannotConnectStagedSite {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Button.clickAdd();

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#SELECT_SITES");

		Navigator.gotoNavItem(navItem = "All Sites");

		SiteSelector.selectSite(site = "Site Name");

		SelectFrame(value1 = "relative=top");

		Alert.viewErrorMessage(errorMessage = "An unstaged asset library cannot be connected to a staged site.");
	}

	@description = "This test covers LPS-104832. It ensures that the repositories can not connect to repositories."
	@priority = 5
	@refactordone
	test CanViewRestrictionWhenConnectingSites {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Button.clickAdd();

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#SELECT_SITES");

		AssertVisible(
			key_navItem = "Recent",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Recent");

		AssertVisible(
			key_navItem = "All Sites",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "My Sites");

		AssertElementNotPresent(
			key_navItem = "Asset Libraries",
			locator1 = "NavBar#NAV_ITEM_LINK");
	}

	@description = "This asserts that a deactivated site is still shown in connected sites."
	@priority = 4
	@refactordone
	test DeactivatedSiteWillRemainInConnectedSitesList {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.viewConnectedSite(
			depotName = "Test Depot Name",
			siteList = "Site Name");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.deactivateCP(
			siteName = "Site Name",
			successMessage = "true");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.viewConnectedSite(
			depotName = "Test Depot Name",
			siteList = "Site Name");
	}

	@description = "This asserts that a deleted site is removed from connected sites."
	@priority = 4
	@refactordone
	test DeletedSiteCannotBeDisplayedInConnectedSitesList {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.viewConnectedSite(
			depotName = "Test Depot Name",
			siteList = "Site Name");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.deleteCP(siteName = "Site Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.viewNoConnectedSiteCP();
	}

}