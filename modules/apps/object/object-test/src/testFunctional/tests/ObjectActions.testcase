@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-145665 - Verify that it's possible to activate and deactivate an Action"
	@priority = "5"
	test CanActivateOrDeactivateAction {
		property portal.acceptance = "true";

		task ("Add an object, field, action, and check if an action is active") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionName = "Custom Action",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.assertObjectActions(actionActive = "Yes");
		}

		task ("Add an Entry and check if the action is works") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}

		task ("Delete an entry, desactivate the action, and try to create a new entry") {
			ObjectAdmin.deleteObjectEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Action shot on add");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.activateOrDeactivateAction(
				active = "false",
				viewEntry = "Custom Action");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.assertEntryNotPresent(entry = "Action shot on add");
		}
	}

	@description = "LPS-139008 - Verify it is possible to cancel the creation of an Action"
	@priority = "4"
	test CanCancelAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 181",
			objectName = "CustomObject181",
			pluralLabelName = "Custom Objects 181");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 181");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		Button.clickCancel();

		Refresh();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-139008 - Verify it is possible to cancel the update of an Action"
	@priority = "4"
	test CanCancelActionUpdate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 182",
			objectName = "CustomObject182",
			pluralLabelName = "Custom Objects 182");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 182");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.goToActionDetails(viewEntry = "Action Name");

		ObjectAdmin.viewDetails();

		ObjectAdmin.fillObjectAction(
			actionName = "Update Action Name",
			click = "cancel");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name");
	}

	@description = "LPS-139008 - Verify it is possible to create an Action"
	@priority = "5"
	test CanCreateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 183",
			objectName = "CustomObject183",
			pluralLabelName = "Custom Objects 183");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 183");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name");
	}

	@description = "LPS-139008 - Verify it is possible to delete an Action"
	@priority = "5"
	test CanDeleteAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 184",
			objectName = "CustomObject184",
			pluralLabelName = "Custom Objects 184");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 184");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name");

		ObjectAdmin.deleteActionViaUI(actionName = "Action Name");

		ObjectAdmin.assertObjectActionsNotPresent(
			actionActive = "Yes",
			actionName = "Action Name");
	}

	@description = "LPS-145665 - Verify that you can edit the Action name"
	@priority = "4"
	test CanEditActionName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 145",
			objectName = "CustomObject145",
			pluralLabelName = "Custom Objects 145");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 145");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Custom Action",
			active = "true",
			thenAction = "Webhook",
			urlAction = "www.liferay.com",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(actionActive = "Custom Action");

		ObjectAdmin.assertObjectActions(actionActive = "Yes");

		ObjectAdmin.editObjectAction(
			actionName = "New Action Update",
			active = "false",
			viewEntry = "Custom Action");

		ObjectAdmin.assertObjectActions(actionActive = "No");

		ObjectAdmin.assertObjectActions(actionActive = "New Action Update");
	}

	@description = "LPS-145665 - Verify that the user can edit a previously saved expression"
	@priority = "5"
	test CanEditExpression {
		property portal.acceptance = "true";

		task ("Add an Object, Field and Action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionName = "Custom Action",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}

		task ("Edit the expression and Check if the user can edit a previously saved expression") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.editObjectAction(
				inputExpression = "customObjectField == 'Entry Test Updated'",
				viewEntry = "Custom Action");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test Updated");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test Updated");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}
	}

	@description = "LPS-145665 - Verify that the admin user is able to enable and disable Condition"
	@priority = "5"
	test CanEnableAndDisableCondition {
		property portal.acceptance = "true";

		task ("Add object, field, and publish then") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Add a Action and enable condition") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionName = "Custom Action",
				active = "true",
				inputExpression = "customObjectField == 'Entry with condition'",
				inputMethod = "true",
				inputValue = "Condition works",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.assertObjectActions(actionActive = "Custom Action");

			ObjectAdmin.assertObjectActions(actionActive = "Yes");
		}

		task ("Add entry and assert that condition it's works") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry with condition");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry with condition");

			ObjectPortlet.viewEntry(entry = "Condition works");
		}

		task ("Assert that condition is disabled") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.goToActionDetails(viewEntry = "Custom Action");

			ObjectAdmin.disableCondition();

			ObjectAdmin.assertObjectActions(actionActive = "Custom Action");

			ObjectAdmin.assertObjectActions(actionActive = "Yes");
		}
	}

	@description = "LPS-139008 - Verify that it is possible to inactivate an Action"
	@priority = "4"
	test CanInactivateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 185",
			objectName = "CustomObject185",
			pluralLabelName = "Custom Objects 185");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 185");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			active = "false",
			viewEntry = "Action Name");

		ObjectAdmin.assertObjectActions(
			actionActive = "No",
			actionName = "Action Name");
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action Name field blank"
	@priority = "3"
	test CannotLeaveActionNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 186",
			objectName = "CustomObject186",
			pluralLabelName = "Custom Objects 186");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 186");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		Click(
			key_tabName = "Basic Info",
			locator1 = "ObjectAction#TAB_GENERIC");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action Then field blank"
	@priority = "3"
	test CannotLeaveActionThenBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 187",
			objectName = "CustomObject187",
			pluralLabelName = "Custom Objects 187");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 187");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionName = "Action Name",
			whenAction = "On After Add");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action When field blank"
	@priority = "3"
	test CannotLeaveActionWhenBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 188",
			objectName = "CustomObject188",
			pluralLabelName = "Custom Objects 188");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 188");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify it is not possible to leave the URL field blank when Webhook is selected"
	@priority = "3"
	test CannotLeaveURLBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 189",
			objectName = "CustomObject189",
			pluralLabelName = "Custom Objects 189");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 189");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionName = "Action Name",
			thenAction = "Webhook",
			whenAction = "On After Add");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify that it is possible to reactivate an Action"
	@priority = "4"
	test CanReactivateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 190",
			objectName = "CustomObject190",
			pluralLabelName = "Custom Objects 190");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 190");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			active = "false",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			active = "true",
			viewEntry = "Action Name");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name");
	}

	@description = "LPS-139008 - Verify it is possible to search for an Action"
	@priority = "4"
	test CanSearchAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 191",
			objectName = "CustomObject191",
			pluralLabelName = "Custom Objects 191");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 191");

		ObjectAdmin.goToActionsTab();

		for (var actionsNames : list "1,2") {
			ObjectAdmin.addObjectActionViaUI(
				actionName = "Action Name ${actionsNames}",
				thenAction = "Webhook",
				urlAction = "http://localhost:8080",
				whenAction = "On After Add");
		}

		Search.searchCP(searchTerm = "1");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name 1");

		ObjectAdmin.assertObjectActionsNotPresent(
			actionActive = "Yes",
			actionName = "Action Name 2");
	}

	@description = "LPS-139008 - Verify it is possible to update an Action"
	@priority = "4"
	test CanUpdateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 192",
			objectName = "CustomObject192",
			pluralLabelName = "Custom Objects 192");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 192");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name");

		ObjectAdmin.editObjectAction(
			actionName = "Update Action Name",
			viewEntry = "Action Name");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Update Action Name");
	}

	@description = "LPS-146871 - Verify that the Action name is required"
	@priority = "4"
	test VerifyActionNameIsRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 156562",
			objectName = "CustomObject1",
			pluralLabelName = "Custom Objects 156562");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 156562");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

}