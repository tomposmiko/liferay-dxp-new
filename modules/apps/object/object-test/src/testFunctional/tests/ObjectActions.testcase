@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-145665 - Verify that it's possible to activate and deactivate an Action"
	@priority = "5"
	test CanActivateOrDeactivateAction {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectActions#CanActivateOrDeactivateAction";

		task ("Add an object, field, action, and check if an action is active") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "CustomAction");
		}

		task ("Add an Entry and check if the action is works") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}

		task ("Delete an entry, desactivate the action, and try to create a new entry") {
			ObjectAdmin.deleteObjectEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Action shot on add");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.activateOrDeactivateAction(
				active = "false",
				viewEntry = "CustomAction");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.assertEntryNotPresent(entry = "Action shot on add");
		}
	}

	@description = "LPS-139008 - Verify it is possible to cancel the creation of an Action"
	@priority = "4"
	test CanCancelAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 181",
			objectName = "CustomObject181",
			pluralLabelName = "Custom Objects 181");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 181");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		Button.clickCancel();

		Refresh();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-139008 - Verify it is possible to cancel the update of an Action"
	@priority = "4"
	test CanCancelActionUpdate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 182",
			objectName = "CustomObject182",
			pluralLabelName = "Custom Objects 182");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 182");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.goToActionDetails(viewEntry = "ActionName");

		ObjectAdmin.viewDetails();

		SelectFrame(locator1 = "IFrame#IFRAME");

		ObjectAdmin.fillObjectAction(
			actionLabel = "Update Action Label",
			actionName = "UpdateActionName",
			click = "cancel");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "ActionName");
	}

	@description = "LPS-139008 - Verify it is possible to create an Action"
	@priority = "5"
	test CanCreateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 183",
			objectName = "CustomObject183",
			pluralLabelName = "Custom Objects 183");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 183");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "ActionName");
	}

	@description = "LPS-145665 - Verify it's possible to add an object entry with the trigger On Order Status Update"
	@priority = "4"
	test CanCreateActionAddObjectEntryWithOnOrderStatusUpdate {
		task ("Given an action in the Commerce Order triggered with Custom Object.") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171861",
				objectName = "CustomObject171861",
				pluralLabelName = "Custom Objects 171861");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject171861");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171861");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Name",
				actionName = "ActionName",
				active = "true",
				inputMethod = "true",
				inputValue = "Value Test",
				objectLabel = "Custom Object 171861",
				thenAction = "Add an Object Entry",
				whenAction = "On Order Status Update");
		}

		task ("And given the user creates a request.") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name Test",
				accountEntryType = "Business");

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When The user changes the order status.") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Orders");

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");
		}

		task ("Then the action is triggered to add an object entry.") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject171861");

			ObjectPortlet.viewEntry(entry = "Value Test");
		}
	}

	@description = "LPS-171793 - Verify it's possible to create a notification action with the trigger On Order Status Update"
	@priority = "5"
	test CanCreateActionNotificationWithOnOrderStatusUpdate {
		property portal.acceptance = "true";

		task ("Given: A notification template is created") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("And given: A notification action with the trigger On Order Status Update is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when order status update",
				active = "true",
				inputExpression = "orderStatus == 0",
				notificationName = "Notification Template",
				thenAction = "Notification",
				whenAction = "On Order Status Update");
		}

		task ("And when: an account, minium site and an order is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			Refresh();

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("And when: The order status is updated") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Orders");

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			CommerceOrders.createShipment(
				complement = "Deliver",
				moveItemQuantitiesInShipment = "true",
				moveOrderItemsInShipment = "true",
				productSkuList = "MIN55861",
				warehouseName = "Italy");
		}

		task ("Then: The action is triggered and the notification is sent") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertElementPresent(
				key_objectName = "CommerceOrder",
				locator1 = "ObjectNotifications#OBJECT_QUEUE_NAME");
		}
	}

	@description = "LPS-171799 -  Verify it's possible to create a notification action with the trigger On Payment Status Update"
	@priority = "5"
	test CanCreateActionNotificationWithOnPaymentStatusUpdate {
		property portal.acceptance = "true";

		task ("Given a Notification Template is created") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email");

			PortletEntry.save();
		}

		task ("And given a notification action with the trigger On Order Status Update is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "orderStatus == 1",
				notificationName = "Notification Template",
				thenAction = "Notification",
				whenAction = "On Payment Status Update");
		}

		task ("And given an account, minium site and an order is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			Refresh();

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the payment status is updated") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Orders");

			WaitForElementPresent(
				key_orderStatus = "Pending",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			ClickNoError(
				key_orderStatus = "Pending",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			CommerceEntry.clickNoError(menuItem = "View");

			CommerceEntry.gotoMenuTab(menuTab = "Payments");

			Click(
				key_index = "Edit",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Select(
				key_fieldLabel = "Payment Status",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Canceled");

			Button.click(button = "Submit");
		}

		task ("Then assert the action run and the notification is in the queue") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "CustomAction",
				status = "Success");

			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertElementPresent(
				key_objectName = "CommerceOrder",
				locator1 = "ObjectNotifications#OBJECT_QUEUE_NAME");
		}
	}

	@description = "LPS-172234 - Verify it's possible to create a groovy script action with the trigger On Order Status Update"
	@priority = "3"
	test CanCreateActionUsingGroovyScripWithOnOrderStatusUpdate {
		task ("Given: An action in the Commerce Order object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();
		}

		task ("And: The user selects the trigger OnOrderStatusUpdate using the action Groovy Script") {
			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				scriptValidation = "println 'Success'",
				thenAction = "Groovy Script",
				whenAction = "On Order Status Update");
		}

		task ("And: given an account, minium site and an order is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When: The user changes the order status") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			CommerceOrders.openOrdersAdmin();

			AssertElementPresent(
				key_value = "Processing",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");
		}

		task ("Then: The action is triggered") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "ActionName",
				status = "Success");
		}
	}

	@description = "LPS-156312 - Assert an Action can be created with Expression Builder."
	@priority = "4"
	test CanCreateActionWithExpressionBuilder {
		property test.name.skip.portal.instance = "ObjectActions#CanCreateActionWithExpressionBuilder";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("When an action is created and given a condition using the Expression Builder") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "New Entry After Object Add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Then the action will resolve when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "New Entry After Object Add");
		}
	}

	@description = "LPS-156569 - Verify that it's possible to create an Action with Groovy Script"
	@priority = "5"
	test CanCreateActionWithGroovyScript {
		property test.name.skip.portal.instance = "ObjectActions#CanCreateActionWithGroovyScript";

		task ("Given a Groovy Script") {
			var groovyScript = '''
			import com.liferay.object.model.ObjectEntry;
			import com.liferay.object.service.ObjectEntryLocalServiceUtil;
			import com.liferay.portal.kernel.service.ServiceContext;

			import java.io.Serializable;

			import java.util.Map;

			ObjectEntry objectEntry = ObjectEntryLocalServiceUtil.getObjectEntry(id);

			Map<String, Serializable> values = objectEntry.getValues();

			values.put("customObjectFieldActionTest", "Action Test Works")

			System.out.println(objectEntry);

			ObjectEntryLocalServiceUtil.updateObjectEntry(objectEntry.getUserId(), id, values, new ServiceContext());
			''';
		}

		task ("And given an object with two fields is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field Action Test",
				fieldName = "customObjectFieldActionTest",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("When an action is created using Groovy Script") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				objectLabel = "Custom Object",
				scriptValidation = "${groovyScript}",
				thenAction = "Groovy Script",
				whenAction = "On After Add");
		}

		task ("Then the object entry is created when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action Test Works");
		}
	}

	@description = "LPS-161904 - Verify that it's possible to create an object entry using Actions"
	@priority = "4"
	test CanCreateEntryWithActions {
		property test.name.skip.portal.instance = "ObjectActions#CanCreateEntryWithActions";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("When the action is added") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Object entry using Action",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Then the object entry is created when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Object entry using Action");
		}
	}

	@description = "LPS-139008 - Verify it is possible to delete an Action"
	@priority = "5"
	test CanDeleteAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 184",
			objectName = "CustomObject184",
			pluralLabelName = "Custom Objects 184");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 184");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "ActionName");

		ObjectAdmin.deleteActionViaUI(actionName = "ActionName");

		ObjectAdmin.assertObjectActionsNotPresent(actionName = "ActionName");
	}

	@description = "LPS-145665 - Verify that you can edit the Action name"
	@priority = "4"
	test CanEditActionName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 145",
			objectName = "CustomObject145",
			pluralLabelName = "Custom Objects 145");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 145");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Custom Action",
			actionName = "CustomAction",
			active = "true",
			thenAction = "Webhook",
			urlAction = "www.liferay.com",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "CustomAction");

		ObjectAdmin.editObjectAction(
			actionName = "NewActionUpdate",
			active = "false",
			viewEntry = "CustomAction");

		ObjectAdmin.assertObjectActions(
			actionActive = "No",
			actionName = "NewActionUpdate");
	}

	@description = "LPS-156560 - Verify that it's possible to edit an Action with Groovy Script"
	@priority = "5"
	test CanEditActionWithGroovyScript {
		property test.name.skip.portal.instance = "ObjectActions#CanEditActionWithGroovyScript";

		task ("Given a Groovy Script") {
			var groovyScript = '''
			import com.liferay.object.model.ObjectEntry;
			import com.liferay.object.service.ObjectEntryLocalServiceUtil;
			import com.liferay.portal.kernel.service.ServiceContext;

			import java.io.Serializable;

			import java.util.Map;

			ObjectEntry objectEntry = ObjectEntryLocalServiceUtil.getObjectEntry(id);

			Map<String, Serializable> values = objectEntry.getValues();

			values.put("customObjectFieldActionTest", "Action Test Works")

			System.out.println(objectEntry);

			ObjectEntryLocalServiceUtil.updateObjectEntry(objectEntry.getUserId(), id, values, new ServiceContext());
			''';
		}

		task ("And given an object with two fields and an object entry are created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field Action Test",
				fieldName = "customObjectFieldActionTest",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");
		}

		task ("And given an action using a Groovy Script is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				objectLabel = "Custom Object",
				scriptValidation = "${groovyScript}",
				thenAction = "Groovy Script",
				whenAction = "On After Update");
		}

		task ("When the Action is edited") {
			ObjectAdmin.editObjectAction(
				click = "save",
				inputExpression = "customObjectField == 'Entry Update'",
				viewEntry = "CustomAction");
		}

		task ("Then the object entry name is updated when the condition is met") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Update");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Action Test Works");
		}
	}

	@description = "LPS-145665 - Verify that the user can edit a previously saved expression"
	@priority = "5"
	test CanEditExpression {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectActions#CanEditExpression";

		task ("Add an Object, Field and Action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}

		task ("Edit the expression and Check if the user can edit a previously saved expression") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.editObjectAction(
				inputExpression = "customObjectField == 'Entry Test Updated'",
				viewEntry = "CustomAction");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test Updated");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test Updated");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}
	}

	@description = "LPS-145665 - Verify that the admin user is able to enable and disable Condition"
	@priority = "5"
	test CanEnableAndDisableCondition {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectActions#CanEnableAndDisableCondition";

		task ("Add object, field, and publish then") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Add a Action and enable condition") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry with condition'",
				inputMethod = "true",
				inputValue = "Condition works",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "CustomAction");
		}

		task ("Add entry and assert that condition it's works") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry with condition");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry with condition");

			ObjectPortlet.viewEntry(entry = "Condition works");
		}

		task ("Assert that condition is disabled") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.goToActionDetails(viewEntry = "CustomAction");

			ObjectAdmin.disableCondition();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "CustomAction");
		}
	}

	@description = "LPS-139008 - Verify that it is possible to inactivate an Action"
	@priority = "4"
	test CanInactivateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 185",
			objectName = "CustomObject185",
			pluralLabelName = "Custom Objects 185");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 185");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			active = "false",
			viewEntry = "ActionName");

		ObjectAdmin.assertObjectActions(
			actionActive = "No",
			actionName = "ActionName");
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action Name field blank"
	@priority = "3"
	test CannotLeaveActionNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 186",
			objectName = "CustomObject186",
			pluralLabelName = "Custom Objects 186");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 186");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		Click(
			key_tabName = "Basic Info",
			locator1 = "ObjectAction#TAB_GENERIC");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action Then field blank"
	@priority = "3"
	test CannotLeaveActionThenBlank {
		property test.name.skip.portal.instance = "ObjectActions#CannotLeaveActionThenBlank";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 187",
			objectName = "CustomObject187",
			pluralLabelName = "Custom Objects 187");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 187");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "ActionName",
			whenAction = "On After Add");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action When field blank"
	@priority = "3"
	test CannotLeaveActionWhenBlank {
		property test.name.skip.portal.instance = "ObjectActions#CannotLeaveActionWhenBlank";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 188",
			objectName = "CustomObject188",
			pluralLabelName = "Custom Objects 188");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 188");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-139008 - Verify it is not possible to leave the URL field blank when Webhook is selected"
	@priority = "3"
	test CannotLeaveURLBlank {
		property test.name.skip.portal.instance = "ObjectActions#CannotLeaveURLBlank";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 189",
			objectName = "CustomObject189",
			pluralLabelName = "Custom Objects 189");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 189");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			whenAction = "On After Add");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-156319 - Verify that the Expression Builder field is required"
	@priority = "3"
	test CannotSaveWithoutExpressionBuilder {
		property test.name.skip.portal.instance = "ObjectActions#CannotSaveWithoutExpressionBuilder";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "true",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Custom Action",
			actionName = "CustomAction",
			active = "true",
			inputExpression = "",
			notRefreshAttribute = "true",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		AssertElementPresent(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "Required");

		Refresh();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-139008 - Verify that it is possible to reactivate an Action"
	@priority = "4"
	test CanReactivateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 190",
			objectName = "CustomObject190",
			pluralLabelName = "Custom Objects 190");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 190");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			active = "false",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			active = "true",
			viewEntry = "ActionName");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "ActionName");
	}

	@description = "LPS-139008 - Verify it is possible to search for an Action"
	@priority = "4"
	test CanSearchAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 191",
			objectName = "CustomObject191",
			pluralLabelName = "Custom Objects 191");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 191");

		ObjectAdmin.goToActionsTab();

		for (var actionsNames : list "1,2") {
			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label ${actionsNames}",
				actionName = "ActionName${actionsNames}",
				thenAction = "Webhook",
				urlAction = "http://localhost:8080",
				whenAction = "On After Add");
		}

		Search.searchCP(searchTerm = "ActionName1");

		ObjectAdmin.assertObjectActions(actionName = "ActionName1");

		ObjectAdmin.assertObjectActionsNotPresent(actionName = "ActionName2");
	}

	@description = "LPS-156343 - Verify that Action can be triggered after disabling the expression"
	@priority = "4"
	test CanTriggerActionAfterDisablingExpression {
		task ("Given an object with a field is created") {
			property test.name.skip.portal.instance = "ObjectActions#CanTriggerActionAfterDisablingExpression";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Given an Action with an expression is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionDescription = "Custom Description",
				actionLabel = "Custom Action Label",
				actionName = "CustomActionName",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "New object entry value",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Given an entry with enabled condition") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.deleteEntry(entry = "Entry Test");
		}

		task ("When the expression in the Action is disabled") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.goToActionDetails(viewEntry = "CustomActionName");

			ObjectAdmin.disableCondition();

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");
		}

		task ("hen the Action will resolve when the condition is met") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "New object entry value");
		}
	}

	@description = "LPS-146871 - Verify an Action with Groovy Script can be triggered after deleting an entry."
	@priority = "4"
	test CanTriggerActionDeleteWithGroovyScript {
		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156566",
				objectName = "CustomObject156566",
				pluralLabelName = "Custom Objects 156566");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject156566");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156566");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject156566",
				value = "Entry Test");
		}

		task ("When an action is created using Groovy Script and is triggered when an object entry is deleted") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156566");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				scriptValidation = "print('Hello world')",
				thenAction = "Groovy Script",
				whenAction = "On After Delete");
		}

		task ("Then deleting an object entry will trigger the action") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156566");

			ObjectPortlet.deleteEntry(entry = "Entry Test");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156566");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "ActionName",
				status = "Success");

			AssertConsoleTextPresent(value1 = "Hello world");
		}
	}

	@description = "LPS-139008 - Verify it is possible to update an Action"
	@priority = "4"
	test CanUpdateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 192",
			objectName = "CustomObject192",
			pluralLabelName = "Custom Objects 192");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 192");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "ActionName");

		ObjectAdmin.editObjectAction(
			actionName = "UpdateActionName",
			viewEntry = "ActionName");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "UpdateActionName");
	}

	@description = "LPS-156346 - Verify that the expression works with Groovy Script."
	@priority = "5"
	test CanUseExpressionWithGroovyScript {
		property portal.acceptance = "true";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 198",
				objectName = "CustomObject198",
				pluralLabelName = "Custom Objects 198");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject198");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject198");
		}

		task ("When an action is created with an Expression using Groovy Script") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 198");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				inputExpression = "customInteger == 5",
				scriptValidation = "println 'Success'",
				thenAction = "Groovy Script",
				whenAction = "On After Add");
		}

		task ("Then the action will resolve when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customInteger",
				objectName = "CustomObject198",
				value = "5");

			Refresh();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "ActionName",
				status = "Success");
		}
	}

	@description = "LPS-156347 - Verify that the expression works with Webhooks"
	@priority = "3"
	test CanUseExpressionWithWebhook {
		property test.name.skip.portal.instance = "ObjectActions#CanUseExpressionWithWebhook";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 185",
				objectName = "CustomObject185",
				pluralLabelName = "Custom Objects 185");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject185");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject185");
		}

		task ("When an action is created with an Expression using Webhooks") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 185");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				thenAction = "Webhook",
				urlAction = "http://localhost:8080",
				whenAction = "On After Add");
		}

		task ("Then the action will resolve when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject185",
				value = "Entry Test");

			Refresh();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionName = "ActionName",
				status = "Success");
		}
	}

	@description = "LPS-146871 - Verify that the Action name is required"
	@priority = "4"
	test VerifyActionNameIsRequired {
		property test.name.skip.portal.instance = "ObjectActions#VerifyActionNameIsRequired";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 156562",
			objectName = "CustomObject1",
			pluralLabelName = "Custom Objects 156562");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 156562");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-171802- Verify if the Condition card is hidden when using the trigger On Subscription Status Update"
	@priority = "5"
	test VerifyTheConditionCardAreHidden {
		property portal.acceptance = "true";

		task ("Given a object system") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Objects");

			ObjectPortlet.selectSystemObject(label = "Commerce Order");
		}

		task ("When an Action using the trigger On Subscription Status Update is created") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionLabel = "Action Label",
				actionName = "ActionName",
				whenAction = "On Subscription Status Update");
		}

		task ("Then the card titled Condition will not be present") {
			AssertElementNotPresent(
				key_title = "Condition",
				locator1 = "ObjectAction#SECTION_TITLE");
		}
	}

}