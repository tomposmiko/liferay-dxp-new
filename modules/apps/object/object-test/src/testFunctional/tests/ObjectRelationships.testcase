@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-145393 - Verify it is possible to relate 2 entries from a Custom Object entry with the same Native Object entry in a One-to-Many relation"
	@priority = "4"
	test CanAddMultipleOneToManyRelationsWithNativeObject {
		property test.name.skip.portal.instance = "ObjectRelationships#CanAddMultipleOneToManyRelationsWithNativeObject";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 288",
			objectName = "CustomObject288",
			pluralLabelName = "Custom Objects 288");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject288");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		CreateObject.selectTitleField(fieldLabel = "First Name");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject288",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject288");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject288",
				value = "Entry ${fieldEntry}");
		}

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject288");

			ObjectPortlet.viewEntryDetails(entry = "Entry ${fieldEntry}");

			ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "userfn");

			PortletEntry.save();

			CreateObject.assertEntrySelectedOnRelationshipField(entry = "userfn");
		}
	}

	@description = "LPS-145393 - Verify it is possible to add a One-to-Many relation from a Custom Object entry with a Native Object entry"
	@priority = "5"
	test CanAddOneToManyRelationWithNativeObject {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CanAddOneToManyRelationWithNativeObject";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 289",
			objectName = "CustomObject289",
			pluralLabelName = "Custom Objects 289");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject289");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		CreateObject.selectTitleField(fieldLabel = "First Name");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject289",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject289");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject289");

		LexiconEntry.gotoAdd();

		ObjectPortlet.searchEntryRelationshipField(entryValue = "userfn");

		PortletEntry.save();

		CreateObject.assertEntrySelectedOnRelationshipField(entry = "userfn");
	}

	@description = "LPS-163656 - Verify that it's possible to add two relationship tabs with the Many-to-Many self-relationship"
	@priority = "4"
	test CanAddTabsForSelfMMRelationship {
		task ("Given an object related to itself, in a Many-to-Many relationship") {
			property test.name.skip.portal.instance = "ObjectRelationships#CanAddTabsForSelfMMRelationship";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "User",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "User",
				relationshipLabel = "Relationship 2",
				relationshipName = "relationship2",
				relationshipType = "manyToMany");
		}

		task ("When the user creates a layout") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");
		}

		task ("And when creates two tabs, one for each relationship") {
			for (var fieldEntry : list "A,B") {
				ObjectAdmin.addTabRelationshipsOnLayout(
					relationshipsLabelName = "Relationship",
					tabName = "Relationship Tab ${fieldEntry}");

				PortletEntry.save();
			}
		}

		task ("Then two tabs can be created, one for each relationship") {
			AssertElementPresent(
				key_layout = "Relationship Tab A",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_LAYOUT_TAB");

			AssertElementPresent(
				key_layout = "Relationship Tab B",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_LAYOUT_TAB");
		}
	}

	@description = "LPS-146754 - Verify that it's possible to create a Many-to-Many relationship between a Custom Object and Native Object"
	@priority = "5"
	test CanCreateManyToManyRelationshipWithNativeObject {
		property test.name.skip.portal.instance = "ObjectRelationships#CanCreateManyToManyRelationshipWithNativeObject";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 290");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "User",
			type = "Many to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 290");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		PortletEntry.save();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject290");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Test Test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject290");

		ObjectPortlet.viewEntry(entry = "Entry A");
	}

	@description = "LPS-155537 - Verify that it's possible to create an object with a relationship that has a parameter"
	@priority = "5"
	test CanCreateObjectWithRelationshipParameter {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CanCreateObjectWithRelationshipParameter";

		task ("Create a custom object, and a self relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Self Relationship",
				relationshipName = "selfRelationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Create an relationship from Postal Address to custom object created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Postal Address");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship with Custom Object",
				object = "Custom Object",
				parameter = "Self Relationship",
				type = "One to Many");
		}

		task ("Assert there is a relationship created") {
			AssertElementPresent(
				key_label = "Relationship with Custom Object",
				locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
		}
	}

	@description = "LPS-145393 - Verify it is possible to create a Relationship One-to-Many from a Native Object to a Custom Object"
	@priority = "5"
	test CanCreateOneToManyForNativeObject {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CanCreateOneToManyForNativeObject";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "Custom Object 290",
			type = "One to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
	}

	@description = "LPS-151676 - Verify that it's possible to create a One-to-Many relationship between a Custom Object and Native Object"
	@priority = "5"
	test CanCreateOneToManyRelationshipWithNativeObject {
		property test.name.skip.portal.instance = "ObjectRelationships#CanCreateOneToManyRelationshipWithNativeObject";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "Custom Object 290",
			type = "One to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
	}

	@description = "LPS-146754 - Verify that it's possible to delete a relationship between a Custom Object entry and Native Object entry (Many-to-Many)"
	@priority = "4"
	test CanDeleteManyToManyRelationshipBetweenCustomObjectEntryAndNativeObjectEntry {
		property test.name.skip.portal.instance = "ObjectRelationships#CanDeleteManyToManyRelationshipBetweenCustomObjectEntryAndNativeObjectEntry";

		task ("Add two users to relate to Custom Object entries") {
			for (var userNum : list "1,2") {
				JSONUser.addUser(
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Add a custom object, a field, and create a many-to-many relationship with the User object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "User",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Add layout with relationship tab") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout",
				objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("Define First Name as a title field on the native object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			CreateObject.selectTitleField(fieldLabel = "First Name");

			CreateObject.saveObject();
		}

		task ("Add 2 entries by API to relate to user entries") {
			for (var entryName : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject",
					value = "Entry ${entryName}");
			}
		}

		task ("Relates custom object entries to user object entries") {
			Navigator.openURL();

			for (var entryName : list "A,B") {
				ObjectAdmin.goToCustomObject(objectName = "CustomObject");

				ObjectPortlet.viewEntryDetails(entry = "Entry ${entryName}");

				ObjectAdmin.gotoRelationshipsTab();

				CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn1");

				Refresh();

				CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn2");
			}
		}

		task ("Delete relationship between a custom object entry to native object entry") {
			for (var entryName : list "A,B") {
				ObjectAdmin.goToCustomObject(objectName = "CustomObject");

				ObjectPortlet.viewEntryDetails(entry = "Entry ${entryName}");

				CreateObject.deleteEntryInRelationshipTab(entryName = "userfn1");

				CreateObject.deleteEntryInRelationshipTab(entryName = "userfn2");
			}
		}

		task ("Assert that relationships has been deleted") {
			ObjectPortlet.assertEntryNotPresent(entry = "userfn1");

			ObjectPortlet.assertEntryNotPresent(entry = "userfn2");
		}
	}

	@description = "LPS-152508 - Verify that it's possible to delete a Many-to-Many relationship from the parent side"
	@priority = "5"
	test CanDeleteManyToManyRelationshipFromParentSide {
		property test.name.skip.portal.instance = "ObjectRelationships#CanDeleteManyToManyRelationshipFromParentSide";

		task ("Create Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 289",
				objectName = "CustomObject289",
				pluralLabelName = "Custom Objects 289");
		}

		task ("Add a relationship between a Custom Object and Native Object") {
			Navigator.openURL();

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "User",
				objectName_2 = "CustomObject289",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject289");
		}

		task ("Delete a Many-to-Many relationship from the parent side") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "Relationship",
				relationshipName = "relationship");

			ObjectAdmin.assertObjectRelationshipNotPresent(relationshipLabel = "Relationship");
		}
	}

	@description = "LPS-151676 - Verify that it's possible to delete a relationship between a Custom Object entry and Native Object entry (One-to-Many)"
	@priority = "4"
	test CanDeleteOneToManyRelationship {
		property test.name.skip.portal.instance = "ObjectRelationships#CanDeleteOneToManyRelationship";

		task ("Create Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 289",
				objectName = "CustomObject289",
				pluralLabelName = "Custom Objects 289");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject289");

			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			CreateObject.selectTitleField(fieldLabel = "First Name");

			CreateObject.saveObject();
		}

		task ("Add a relationship between a Custom Object and Native Object") {
			Navigator.openURL();

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "User",
				objectName_2 = "CustomObject289",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject289");
		}

		task ("Go to Custom Object and a relationship between a Custom Object entry and Native Object entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject289");

			LexiconEntry.gotoAdd();

			ObjectPortlet.selectRelationshipFieldEntry(
				entry = "",
				newEntry = "userfn");
		}

		task ("Delete a relationship between a Custom Object entry and Native Object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "Relationship",
				relationshipName = "relationship");

			ObjectAdmin.assertObjectRelationshipNotPresent(relationshipLabel = "Relationship");
		}
	}

	@description = "LPS-151676 - Verify that it's possible to delete a relationship between a Custom Object entry and Native Object entry (One-to-Many)"
	@ignore = "true"
	@priority = "4"
	test CanDeleteOneToManyRelationshipBetweenCustomObjectEntryAndNativeObjectEntry {
		property test.name.skip.portal.instance = "ObjectRelationships#CanDeleteOneToManyRelationshipBetweenCustomObjectEntryAndNativeObjectEntry";

		task ("Add 2 users entries to relate to custom object entries") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "userfn_1",
				userLastName = "userln_1",
				userScreenName = "usersn1");

			JSONUser.addUser(
				userEmailAddress = "user2@liferay.com",
				userFirstName = "userfn_2",
				userLastName = "userln_2",
				userScreenName = "usersn2");
		}

		task ("Add a custom object, a field, and create a one-to-many relationship with the User object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "User",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Add layout with relationship tab") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout",
				objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("Define First Name as a title field on the native object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			CreateObject.selectTitleField(fieldLabel = "First Name");

			CreateObject.saveObject();
		}

		task ("Add 2 entries by API to relate to user entries") {
			for (var entryName : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject",
					value = "Entry ${entryName}");
			}
		}

		task ("Relates one custom object entry to many native object entries") {
			Navigator.openURL();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			ObjectAdmin.gotoRelationshipsTab();

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn_1");

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn_2");

			Navigator.gotoBack();
		}

		task ("Delete relationship between a custom object entry to native object entry") {
			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			CreateObject.deleteEntryInRelationshipTab(entryName = "userfn_1");

			ObjectPortlet.assertEntryNotPresent(entry = "userfn_1");

			CreateObject.deleteEntryInRelationshipTab(entryName = "userfn_2");

			ObjectPortlet.assertEntryNotPresent(entry = "userfn_2");

			Navigator.gotoBack();
		}
	}

	@description = "LPS-147906 - Verify it is possible to do a nested relation in a One-to-Many relationship"
	@priority = "4"
	test CanDoNestedRelation {
		property test.name.skip.portal.instance = "ObjectRelationships#CanDoNestedRelation";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 149249",
			objectName = "CustomObject149249",
			pluralLabelName = "Custom Objects 149249");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject149249");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject149249",
			objectName_2 = "CustomObject149249",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject149249");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 149249");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Relationship",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		PortletEntry.save();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject149249");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject149249",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject149249");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject149249");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.gotoRelationshipTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject149249");

		ObjectPortlet.viewEntry(entry = "Entry A");

		ObjectPortlet.viewEntry(entry = "Entry B");
	}

	@description = "LPS-157229 - Verify that it's possible to edit the relationships of the Custom Object entry (Many-to-Many)"
	@priority = "4"
	test CanEditManyToManyRelationshipOfCustomObjectEntries {
		task ("Given: Two custom object is created with a many to many relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 1",
				objectName = "CustomObject1",
				pluralLabelName = "Custom Objects 1");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 2",
				objectName = "CustomObject2",
				pluralLabelName = "Custom Objects 2");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject1");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject2");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject1");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject2");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject1",
				objectName_2 = "CustomObject2",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");
		}

		task ("And Given: The custom object with a relationship with another custom object") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject1");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 1");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 1");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 2");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();
		}

		task ("When: An entry is edited for the custom object") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject1",
				value = "Entry A");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject2",
				value = "Entry B");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject1");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			ObjectAdmin.gotoRelationshipsTab();

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

			ObjectPortlet.viewEntry(entry = "Entry B");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject2");

			ObjectPortlet.viewEntryDetails(entry = "Entry B");

			ObjectAdmin.editEntryName(newEntryValue = "Entry C");
		}

		task ("Then the Custom Object entry is updated") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject1");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectPortlet.viewEntry(entry = "Entry C");
		}
	}

	@description = "LPS-155537 - Verify that it's possible to edit a relationship parameter"
	@priority = "4"
	test CanEditRelationshipParameter {
		property test.name.skip.portal.instance = "ObjectRelationships#CanEditRelationshipParameter";

		task ("Create a custom object, and a self relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Self Relationship",
				relationshipName = "selfRelationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Create an realtionship from Postal Address to custom object created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Postal Address");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship with Custom Object",
				object = "Custom Object",
				parameterOption = "Self Relationship",
				type = "One to Many");
		}

		task ("Verify it's possible to edit a relationship parameter") {
			ObjectAdmin.goToRelationshipsDetails(fieldName = "Relationship with Custom Object");

			ObjectRelationships.editRelationshipsParameter(parameterOption = "Relationship with Custom Object");

			PortletEntry.save();
		}
	}

	@description = "LPS-163654 - Verify that it's possible to identify the Parent and Child relationship through specific labels"
	@priority = "4"
	test CanIdentifyParentChildRelationship {
		property test.name.skip.portal.instance = "ObjectRelationships#CanIdentifyParentChildRelationship";

		task ("Given an object related to itself, in a Many-to-Many relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object LPS163654",
				objectName = "CustomObjectLPS163654",
				pluralLabelName = "Custom Objects LPS163654");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObjectLPS163654");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163654");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "Custom Object LPS163654",
				type = "Many to Many");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject163654");
		}

		task ("When the user views the relationships on the Relationship tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163654");

			ObjectAdmin.gotoRelationshipsTab();
		}

		task ("Then the relationship should have a label indicating whether it's the Parent or the Child") {
			AssertElementPresent(
				key_relationHierarchy = "Parent",
				key_relationType = "manyToMany",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_TYPE_AND_HIERARCHY");

			AssertElementPresent(
				key_relationHierarchy = "Child",
				key_relationType = "manyToMany",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_TYPE_AND_HIERARCHY");
		}
	}

	@description = "LPS-146754 - Verify that it's not possible for a Custom Object to create a Many-to-Many relationship with itself"
	@priority = "4"
	test CannotCreateManytoManyRelationshipWithItself {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotCreateManytoManyRelationshipWithItself";

		task ("Create Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 290",
				objectName = "CustomObject290",
				pluralLabelName = "Custom Objects 290");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 290");
		}

		task ("Go to Relationships tab and click to create a Many-to-Many relationship") {
			ObjectAdmin.gotoRelationshipsTab();

			LexiconEntry.gotoAdd();

			ObjectField.selectType(fieldType = "Many to Many");
		}

		task ("Assert that the Custom Object created is not present") {
			Click(locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE");

			AssertElementNotPresent(
				key_columnOption = "Custom Objects 290",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}
	}

	@description = "LPS-152508 - Verify that it's not possible to delete a Many-to-Many relationship from the child side"
	@priority = "4"
	test CannotDeleteManyToManyRelationshipFromChildSide {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotDeleteManyToManyRelationshipFromChildSide";

		task ("Create Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 289",
				objectName = "CustomObject289",
				pluralLabelName = "Custom Objects 289");
		}

		task ("Add a relationship between a Custom Object and Native Object") {
			Navigator.openURL();

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "User",
				objectName_2 = "CustomObject289",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject289");
		}

		task ("Delete a Many-to-Many relationship from the child side") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 289");

			ObjectAdmin.gotoRelationshipsTab();

			Click(
				key_objectLabel = "Relationship",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "Delete");

			ObjectAdmin.assertCannotDeleteRelationshipFromChildSideErrorMessage();
		}
	}

	@description = "LPS-152508 - Verify that it's not possible to delete a relationship with an incorrect input"
	@priority = "4"
	test CannotDeleteRelationshipWithIncorrectInput {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotDeleteRelationshipWithIncorrectInput";

		task ("Create a custom object and a relationship to itself") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Go to relationship tab and try to delete") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.gotoRelationshipsTab();

			Click(
				key_objectLabel = "Relationship",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "Delete");

			SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

			Type(
				locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_RELATIONSHIP",
				value1 = "IncorrectInput");

			Click(locator1 = "Form#SIDEBAR_DELETE_FIELD_MODAL_DELETE_BUTTON");

			AssertElementPresent(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Input and relationship name do not match.");
		}
	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Label blank"
	@priority = "4"
	test CannotLeaveRelationshipLabelBlank {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotLeaveRelationshipLabelBlank";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147736",
			objectName = "CustomObject147736",
			pluralLabelName = "Custom Objects 147736");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 147736");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "",
			name = "relationship",
			object = "Custom Object 147736",
			type = "One to Many");

		FieldBase.assertRequiredFieldErrorPresent(fieldLabel = "Label");
	}

	@description = "LPS-135397 - Verify that it is not possible to leave a layout with a Relationship tab on first place by removing the fields tab"
	@priority = "4"
	test CannotLeaveRelationshipTabOnFirstPlaceByRemovingFieldsTab {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotLeaveRelationshipTabOnFirstPlaceByRemovingFieldsTab";

		task ("Create a custom object and a relationship to itself") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");
		}

		task ("Go to layout tab, add a field tab and relationship tab") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");
		}

		task ("Remove the field tab, add field tab again and assert that error message") {
			Click(
				key_tabName = "Field Tab",
				locator1 = "ObjectAdmin#TAB_NAME_ON_LAYOUT");

			DropdownMenuItem.click(menuItem = "Delete");

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "2",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			Button.clickSave();

			SelectFrame(locator1 = "Message#ERROR");

			Alert.viewErrorMessage(errorMessage = "The layout's first tab must be a field tab.");
		}
	}

	@description = "LPS-163658 - Verify that it's not possible to relate an entry to itself"
	@priority = "5"
	test CannotRelateAnEntryWithItself {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CannotRelateAnEntryWithItself";

		task ("Given: An object related to itself, in a Many-to-Many relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object LPS163658",
				objectName = "CustomObjectLPS163658",
				pluralLabelName = "Custom Objects LPS163658");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObjectLPS163658");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163658");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "Custom Object LPS163658",
				type = "Many to Many");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObjectLPS163658");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163658");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectLPS163658");
		}

		task ("And: Add a custom entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObjectLPS163658",
				value = "Entry Test");
		}

		task ("When: The user relates the entry to another entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObjectLPS163658");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectPortlet.gotoRelationshipTab();
		}

		task ("Then: The entry cannot be related to itself") {
			CreateObject.assertRelationshipNotPresent();
		}
	}

	@description = "LPS-155537 - Verify that it's not possible to see the parameter when adding relationships that don't require it"
	@priority = "3"
	test CannotSeeParameterWhenNotRequiredByRelationship {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotSeeParameterWhenNotRequiredByRelationship";

		task ("Create a custom object, and a relationship non-require by API") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "AccountEntry",
				relationshipLabel = "Non-require relationship",
				relationshipName = "Non-requirerelationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Verify it's not possible to see the parameter when adding relationships that don't require it") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Postal Address");

			ObjectAdmin.gotoRelationshipsTab();

			LexiconEntry.gotoAdd();

			Click(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM");

			Click(
				key_type = "One to Many",
				locator1 = "ObjectAdmin#SELECT_RELATIONSHIPS_TYPE_OPTION");

			Click(locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE");

			Click(
				key_columnOption = "Custom Object",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			Click(locator1 = "ObjectRelationships#SELECT_PARAMETER_FORM");

			AssertElementNotPresent(
				key_parameterOption = "Non-require relationship",
				locator1 = "ObjectRelationships#SELECT_PARAMETER_OPTION");
		}
	}

	@description = "LPS-139803 - It is not possible to select a Relationship field for the Object Entry Title"
	@priority = "4"
	test CannotSelectRelationshipFieldForObjectEntryTitle {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotSelectRelationshipFieldForObjectEntryTitle";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147735",
			objectName = "CustomObject147735",
			pluralLabelName = "Custom Objects 147735");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject147735",
			objectName_2 = "CustomObject147735",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 147735");

		ObjectAdmin.viewOptionTitleField(optionNameNotPresent = "Relationship");
	}

	@description = "LPS-163655 - Verify that the user is not allowed to update the Name, Type or Object from the parent Relationship"
	@priority = "4"
	test CannotUpdateNameTypeObjectFromParentRelationship {
		property test.name.skip.portal.instance = "ObjectRelationships#CannotUpdateNameTypeObjectFromParentRelationship";

		task ("Given an object related to itself, in a Many-to-Many relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object LPS163655",
				objectName = "CustomObjectLPS163655",
				pluralLabelName = "Custom Objects LPS163655");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObjectLPS163655");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163655");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "Custom Object LPS163655",
				type = "Many to Many");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject163655");
		}

		task ("When the user edits the Parent relationships on the Relationship tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163655");

			ObjectAdmin.gotoRelationshipsTab();

			Click(
				key_index = "1",
				key_labelName = "Relationship",
				locator1 = "CreateObject#OBJECT_NAME_INDEX");

			SelectFrame(
				key_title = "",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("Then the fields Name, Type and Object can not be updated") {
			AssertElementPresent(
				key_relation = "relationship",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_DISABLED_NAME_OR_TYPE");

			AssertElementPresent(
				key_relation = "Many to Many",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_DISABLED_NAME_OR_TYPE");

			AssertElementPresent(
				key_relationObject = "CustomObjectLPS163655",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_DISABLED_OBJECT");
		}
	}

	@description = "LPS-146754 - Verify that it's possible to relate a Custom Object entry with many Native Object entries (Many-to-Many)"
	@priority = "5"
	test CanRelateManyToManyCustomObjectEntryWithNativeObjectEntries {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CanRelateManyToManyCustomObjectEntryWithNativeObjectEntries";

		task ("Add 2 users entries to relate to custom object entries") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "userfn_1",
				userLastName = "userln_1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "user2@liferay.com",
				userFirstName = "userfn_2",
				userLastName = "userln_2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user2@liferay.com");
		}

		task ("Add a custom object, a field, and create a many-to-many relationship with the User object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "User",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Add layout with relationship tab") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout",
				objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("Add 2 entries by API to relate to user entries") {
			WaitForPageLoad();

			for (var entryName : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject",
					value = "Entry ${entryName}");
			}
		}

		task ("Define First Name as a title field on the native object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			CreateObject.selectTitleField(fieldLabel = "First Name");

			CreateObject.saveObject();
		}

		task ("Relates custom object entries to user object entries") {
			Navigator.openURL();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			for (var entryName : list "A,B") {
				ObjectPortlet.viewEntryDetails(entry = "Entry ${entryName}");

				ObjectAdmin.gotoRelationshipsTab();

				CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn_1");

				ObjectPortlet.viewEntry(entry = "userfn_1");

				CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn_2");

				ObjectPortlet.viewEntry(entry = "userfn_2");

				Navigator.gotoBack();
			}
		}
	}

	@description = "LPS-151676 - Verify that it's possible to relate a Custom Object entry with many Native Object entries (One-to-Many)"
	@priority = "5"
	test CanRelateOneToManyCustomObjectEntryWithNativeObjectEntries {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CanRelateOneToManyCustomObjectEntryWithNativeObjectEntries";

		task ("Add 3 users entries to relate to custom object entries") {
			for (var userNum : list "1,2,3") {
				JSONUser.addUser(
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Add a Custom Object, a field, create a 1toM relationship with the User object, and add an entry (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156668",
				objectName = "CustomObject156668",
				pluralLabelName = "Custom Objects 156668");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156668");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject156668",
				objectName_2 = "User",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156668");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject156668",
				value = "Entry A");
		}

		task ("Define First Name as a title field on the native object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			CreateObject.selectTitleField(fieldLabel = "First Name");

			CreateObject.saveObject();
		}

		task ("Add layout with relationship tab") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout",
				objectName = "CustomObject156668");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156668");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("Go to Custom Object entries and relate the entries to the native object") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156668");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			ObjectAdmin.gotoRelationshipsTab();

			for (var userNum : list "1,2,3") {
				CreateObject.addRelationshipAndSelectEntry(titleFieldName = "userfn${userNum}");

				ObjectPortlet.viewEntry(entry = "userfn${userNum}");
			}
		}
	}

	@description = "LPS-145393 - Verify it is possible to add a One-to-Many relation from a Custom Object scoped by Site entry with a Native Object entry"
	@priority = "4"
	test CanRelateOneToManyNativeObjectWithCustomSiteScoped {
		property test.name.skip.portal.instance = "ObjectRelationships#CanRelateOneToManyNativeObjectWithCustomSiteScoped";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 291",
			objectName = "CustomObject291",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 291",
			scope = "site");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		CreateObject.selectTitleField(fieldLabel = "First Name");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject291",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject291");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject291");

		LexiconEntry.gotoAdd();

		ObjectPortlet.searchEntryRelationshipField(entryValue = "userfn");

		PortletEntry.save();

		CreateObject.assertEntrySelectedOnRelationshipField(entry = "userfn");
	}

	@description = "LPS-163660 - Verify that a label is displayed on the creation of a Relationship Tab, to differentiate parent (left side) information from child (right side) information"
	@priority = "4"
	test CanSeeLabelWhenCreatingRelationshipTab {
		property test.name.skip.portal.instance = "ObjectRelationships#CanSeeLabelWhenCreatingRelationshipTab";

		task ("Create an Object and add an attachment field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object LPS163660",
				objectName = "CustomObjectLPS163660",
				pluralLabelName = "Custom Objects LPS163660");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObjectLPS163660");
		}

		task ("Go to the Objects Admin page and select the created definition") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163660");
		}

		task ("Add a many to many relationship withself") {
			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "Custom Object LPS163660",
				type = "Many to Many");
		}

		task ("Add a layout and set it as Default") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObjectLPS163660");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object LPS163660");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();
		}

		task ("Create a tab field") {
			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldList = "Custom Field",
				tabName = "Field Tab");
		}

		task ("Create a relationship tab on Layout") {
			LexiconEntry.gotoAddNoSelectFrame();

			Click(
				key_type = "Relationships",
				locator1 = "ObjectAdmin#TAB_TYPE");

			Click(locator1 = "ObjectAdmin#LAYOUT_ENTRY_CHOOSE_OPTION");
		}

		task ("Assert that a label indicating the Parent and Child relationships are displayed") {
			AssertElementPresent(
				key_relationType = "Parent",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS");

			AssertElementPresent(
				key_relationType = "Child",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS");
		}
	}

	@description = "LPS-158478 - Verify that it's possible to see all related entries to the entry on the relationship tab"
	@priority = "5"
	test CanSeeRelatedEntriesOnTab {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectRelationships#CanSeeRelatedEntriesOnTab";

		task ("Given an object related to itself, in a Many-to-Many relationship and a custom entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 163657",
				objectName = "CustomObject163657",
				pluralLabelName = "Custom Objects 163657");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject163657");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject163657",
				objectName_2 = "CustomObject163657",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject163657");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 163657");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject163657");
		}

		task ("When the user relates the entry to another entry") {
			for (var fieldEntry : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject163657",
					value = "Entry ${fieldEntry}");
			}

			ObjectAdmin.goToCustomObject(objectName = "CustomObject163657");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			ObjectPortlet.gotoRelationshipTab();

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");
		}

		task ("Then all related entries to the entry must be displayed on the relationship tab") {
			CreateObject.assertRelatedObject(relatedObject = "Entry B");
		}
	}

	@description = "LPS-145393 - Verify it is possible to set a Title Field for a Native Object"
	@priority = "4"
	test CanSetTitleFieldForNativeObject {
		property test.name.skip.portal.instance = "ObjectRelationships#CanSetTitleFieldForNativeObject";

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		CreateObject.selectTitleField(fieldLabel = "First Name");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		CreateObject.assertTitleFieldIsSelected(fieldLabel = "First Name");
	}

	@description = "LPS-143021 - Verify it is possible to view and add entries on an Object after creating a Relationship One to Many for it"
	@priority = "4"
	test CanViewAndAddObjectEntriesAfterCreateRelationship {
		property test.name.skip.portal.instance = "ObjectRelationships#CanViewAndAddObjectEntriesAfterCreateRelationship";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 292",
			objectName = "CustomObject292",
			pluralLabelName = "Custom Objects 292");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject292");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject292");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject292",
			value = "Entry Test");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 292");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "Custom Object 292",
			type = "One to Many");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject292");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

}