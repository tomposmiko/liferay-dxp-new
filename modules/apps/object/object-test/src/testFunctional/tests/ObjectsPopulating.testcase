@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field and view its entries in a Field Group"
	@priority = "4"
	test CanMapAndViewEntriesForFieldGroup {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Integer",
			fieldName = "integer",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Numeric");

		Form.closeSidebar();

		Form.addFieldFromSidebarToFieldsGroup(
			key_fieldLabel = "Numeric",
			key_fieldName = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Text");

		Form.closeSidebar();

		PopulateObjectFormsConfiguration.gotoFormField(formFieldName = "Numeric");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Integer");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric",
			fieldValue = "1234567");

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "Test text");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "1234567");

		ObjectPortlet.viewEntry(entry = "Test text");
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of BigDecimal type and view its entries"
	@priority = "4"
	test CanMapBigDecimalTypeAndViewEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "bigDecimal",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Numeric");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Decimal");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric",
			fieldValue = "123.123456");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "123.123456");
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of Boolean type and view its entries"
	@priority = "4"
	test CanMapBooleanTypeAndViewEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Boolean");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		Check.checkToggleSwitch(
			checkboxName = "Boolean",
			locator1 = "Checkbox#ANY_CHECKBOX");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Yes");
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of Date type and view its entries"
	@priority = "4"
	test CanMapDateTypeAndViewEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "date",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Date");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editDate(
			fieldName = "Date",
			fieldValue = "01/01/2001");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Jan 1, 2001");
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of Double type and view its entries"
	@priority = "4"
	test CanMapDoubleTypeAndViewEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "double",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Numeric");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Decimal");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric",
			fieldValue = "1.54");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "1.54");
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of Integer type and view its entries"
	@priority = "4"
	test CanMapIntegerTypeAndViewEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "integer",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Numeric");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric",
			fieldValue = "123456789");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "123456789");
	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of Long type and view its entries"
	@priority = "4"
	test CanMapLongTypeAndViewEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "long",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Numeric");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric",
			fieldValue = "12345678912345678");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "12345678912345678");
	}

	@description = "LPS-138495 - Verify it is possible to map a Picklist for a Select From List field and view its entries"
	@ignore = "Test Stub"
	@priority = "4"
	test CanMapPicklistTypeAndViewEntries {

		// TODO LPS-141821 CanMapPicklistTypeAndViewEntries pending implementation

	}

	@description = "LPS-133365 - Verify if it's possible to map an Object field of String type and view its entries"
	@priority = "5"
	test CanMapStringTypeAndViewEntries {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "Test Text Test Text Test Text Test Text Test Text Test Text Test Text  Test");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Test Text Test Text Test Text Test Text Test Text Test Text Test Text  Test");
	}

	@description = "LPS-137865 - Verify that it is possible to submit an entry with a Double field blank that is not required"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSubmitEntryWithDoubleFieldBlank {

		// TODO LPS-141823 CanSubmitEntryWithDoubleFieldBlank pending implementation

	}

	@description = "LPS-139902 - Verify that entries Object entries added through forms are not deleted when form is deleted"
	@ignore = "Test Stub"
	@priority = "4"
	test EntriesAreNotDeletedWhenFormIsDeleted {

		// TODO LPS-141822 EntriesAreNotDeletedWhenFormIsDeleted pending implementation

	}

	@description = "LPS-136451 - Verify if it's possible to see the entries of a field with capitalized letters in the name"
	@priority = "4"
	test FieldWithCapitalizedLetters {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "dueDate",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Date");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Not Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editDate(
			fieldName = "Date",
			fieldValue = "01/01/2001");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Jan 1, 2001");
	}

}