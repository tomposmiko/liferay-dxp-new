@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-144474 - Verify that, when adding a new entry in the Object, the user only is able to submit the entry successfully if it passes for all validations from that Object"
	@priority = "4"
	test CanAddEntryWhenPassesForAllValidations {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanAddEntryWhenPassesForAllValidations";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153556",
			objectName = "CustomObject153556",
			pluralLabelName = "Custom Objects 153556");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153556");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153556");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153556");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField != 'Allowed Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153556");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Allowed Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153556");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");
	}

	@description = "LPS-144474 - Verify that, when updating an existing validation, this validation must only affect the entries added after the validation update"
	@priority = "4"
	test CanAffectOnlyEntriesAddedWhenUpdateValidationWithEntries {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanAffectOnlyEntriesAddedWhenUpdateValidationWithEntries";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153559",
			objectName = "CustomObject153559",
			pluralLabelName = "Custom Objects 153559");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153559");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153559");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153559");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField != 'Allowed Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153559",
			value = "Allowed Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153559");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153559");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Allowed Entry')");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153559");

		ObjectPortlet.addSingleFieldEntryViaUI(
			entry = "Allowed Entry",
			invalidEntry = "true");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "This entry is not possible.");
	}

	@description = "LPS-144474 - Verify that, when updating an existing validation, this validation must only affect the entries updated after the validation update"
	@priority = "4"
	test CanAffectOnlyEntriesUpdateWhenUpdateValidationWithEntries {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanAffectOnlyEntriesUpdateWhenUpdateValidationWithEntries";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153560",
			objectName = "CustomObject153560",
			pluralLabelName = "Custom Objects 153560");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153560");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153560");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153560");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField != 'Allowed Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153560",
			value = "Allowed Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153560");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153560");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Update Entry')");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153560");

		ObjectPortlet.viewEntryDetails(entry = "Allowed Entry");

		ObjectAdmin.editEntryName(
			invalidEntry = "true",
			newEntryValue = "Decline Update Entry");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "This entry is not possible.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153560");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Concat' to text fields"
	@priority = "4"
	test CanDefineExpressionConcat {
		task ("Create Custom Object and some Custom Fields") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionConcat";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156694",
				objectName = "CustomObject156694",
				pluralLabelName = "Custom Objects 156694");

			for (var letters : list "A,B,C,D") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Text ${letters}",
					fieldName = "customText${letters}",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject156694");
			}

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156694");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156694");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'concat'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customTextA == concat(customTextB, customTextC, customTextD)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'concat' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156694");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Text A",
				entry = "Liferay Experience Cloud");

			ObjectPortlet.typeCustomField(
				customField = "Custom Text B",
				entry = "Cloud");

			ObjectPortlet.typeCustomField(
				customField = "Custom Text C",
				entry = " Liferay");

			ObjectPortlet.typeCustomField(
				customField = "Custom Text D",
				entry = " Experience");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Text A",
				entry = "Liferay Digital Experience");

			ObjectPortlet.typeCustomField(
				customField = "Custom Text B",
				entry = "Liferay");

			ObjectPortlet.typeCustomField(
				customField = "Custom Text C",
				entry = " Digital");

			ObjectPortlet.typeCustomField(
				customField = "Custom Text D",
				entry = " Experience");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156694");

			ObjectPortlet.viewEntry(entry = "Liferay Digital Experience");

			ObjectPortlet.assertEntryNotPresent(entry = "Liferay Experience Cloud");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with condiotinal logic (equals) to integer, boolean, and text fields"
	@priority = "4"
	test CanDefineExpressionConditionalLogic {
		task ("Create Custom Object and Custom Fields Text") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionConditionalLogic";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156703A",
				objectName = "CustomObject156703A",
				pluralLabelName = "Custom Objects 156703A");

			for (var fieldsName : list "Food,Category") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "${fieldsName}",
					fieldName = "custom${fieldsName}",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject156703A");
			}

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156703A");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156703A");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'condition with custom text'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "equals(customFood, condition(customCategory == 'fruit', 'banana', 'other'))");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'condition with custom text' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703A");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Category",
				entry = "fruit");

			ObjectPortlet.typeCustomField(
				customField = "Food",
				entry = "apple");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Category",
				entry = "fruit");

			ObjectPortlet.typeCustomField(
				customField = "Food",
				entry = "banana");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703A");

			ObjectPortlet.viewEntry(entry = "banana");

			ObjectPortlet.assertEntryNotPresent(entry = "apple");
		}

		task ("Create Custom Object and Custom Fields Boolean") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156703B",
				objectName = "CustomObject156703B",
				pluralLabelName = "Custom Objects 156703B");

			for (var fieldsBoolean : list "Shoes,Mark") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Boolean",
					fieldLabelName = "${fieldsBoolean}",
					fieldName = "custom${fieldsBoolean}",
					fieldType = "Boolean",
					isRequired = "false",
					objectName = "CustomObject156703B");
			}

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156703B");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156703B");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'condition with custom boolean'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "equals(customShoes, condition(customMark == 'true', 'false', 'true'))");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'condition with custom boolean' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703B");

			LexiconEntry.gotoAdd();

			WaitForSPARefresh();

			Click.clickAtNotVisible(
				key_checkboxName = "customMark",
				locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX_BY_NAME");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703B");

			ObjectPortlet.assertEntryNotPresent(entry = "Yes");

			ObjectPortlet.assertEntryNotPresent(entry = "No");

			LexiconEntry.gotoAdd();

			WaitForSPARefresh();

			Click.clickAtNotVisible(
				key_checkboxName = "customShoes",
				locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX_BY_NAME");

			Click.clickAtNotVisible(
				key_checkboxName = "customMark",
				locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX_BY_NAME");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703B");

			ObjectPortlet.viewEntry(entry = "Yes");

			ObjectPortlet.assertEntryNotPresent(entry = "No");
		}

		task ("Create Custom Object and Custom Fields Integer") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156703C",
				objectName = "CustomObject156703C",
				pluralLabelName = "Custom Objects 156703C");

			for (var fieldsInteger : list "Validate,IsHundred") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Integer",
					fieldLabelName = "${fieldsInteger}",
					fieldName = "custom${fieldsInteger}",
					fieldType = "Integer",
					isRequired = "false",
					objectName = "CustomObject156703C");
			}

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156703C");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156703C");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'condition with custom integer' (1234 - yes) and (4321 - no)") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customIsHundred == condition(customValidate == 100, 1234, 4321)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'condition with custom boolean' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703C");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "IsHundred",
				entry = "4321");

			ObjectPortlet.typeCustomField(
				customField = "Validate",
				entry = "100");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703C");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "IsHundred",
				entry = "1234");

			ObjectPortlet.typeCustomField(
				customField = "Validate",
				entry = "100");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156703C");

			ObjectPortlet.viewEntry(entry = "1234");

			ObjectPortlet.assertEntryNotPresent(entry = "4321");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Contains' and 'Does Not Contains' to text fields and integer fields"
	@priority = "4"
	test CanDefineExpressionContainsAndDoesNotContain {
		task ("Create Custom Object and Custom Fields") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionContainsAndDoesNotContain";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156688",
				objectName = "CustomObject156688",
				pluralLabelName = "Custom Objects 156688");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156688");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156688");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156688");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156688");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'contains'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "contains(customText, 'Allowed Entry')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'contains' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "Decline Entry",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Allowed Entry");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectPortlet.viewEntry(entry = "Allowed Entry");

			ObjectPortlet.assertEntryNotPresent(entry = "Decline Entry");
		}

		task ("Edit a Custom Validation using an expression 'does not contains'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156688");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "NOT(contains(customInteger, '2004'))");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'does not contains' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "2004",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "2022");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectPortlet.viewEntry(entry = "2022");

			ObjectPortlet.assertEntryNotPresent(entry = "2004");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Future Dates' and 'Past Dates' to date fields"
	@priority = "4"
	test CanDefineExpressionFutureDatesAndPastDates {
		task ("Create Custom Object and Custom Field") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionFutureDatesAndPastDates";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156701",
				objectName = "CustomObject156701",
				pluralLabelName = "Custom Objects 156701");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Date",
				fieldLabelName = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date",
				isRequired = "false",
				objectName = "CustomObject156701");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156701");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156701");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'Past Dates'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "pastDates(customDate, '2022-06-01')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'Past Dates' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.addSingleFieldEntryViaUI(
				entry = "01/01/2023",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "01/01/2022");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.viewEntry(entry = "Jan 1, 2022");

			ObjectPortlet.assertEntryNotPresent(entry = "Jan 1, 2023");
		}

		task ("Edit a Custom Validation using an expression 'Future Dates'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156701");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "futureDates(customDate, '2022-06-01')");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'Future Dates' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.addSingleFieldEntryViaUI(
				entry = "02/02/2022",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "02/02/2023");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.viewEntry(entry = "Feb 2, 2023");

			ObjectPortlet.assertEntryNotPresent(entry = "Feb 2, 2022");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is an Email' to text fields"
	@priority = "4"
	test CanDefineExpressionIsAnEmail {
		task ("Create Custom Object and Custom Field") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsAnEmail";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156690",
				objectName = "CustomObject156690",
				pluralLabelName = "Custom Objects 156690");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156690");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156690");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156690");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is an Email'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isEmailAddress(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is an Email' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156690");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "It is not an email",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "test@liferay.com");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156690");

			ObjectPortlet.viewEntry(entry = "test@liferay.com");

			ObjectPortlet.assertEntryNotPresent(entry = "It is not an email");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Integer' to integer fields and 'Is Decimal' to decimal fields"
	@priority = "4"
	test CanDefineExpressionIsDecimalOrIsInteger {
		task ("Create Custom Object and Custom Field") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsDecimalOrIsInteger";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156698",
				objectName = "CustomObject156698",
				pluralLabelName = "Custom Objects 156698");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156698");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156698");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156698");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is integer'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isInteger(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is integer' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "1.23",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "123");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectPortlet.viewEntry(entry = "123");

			ObjectPortlet.assertEntryNotPresent(entry = "1.23");
		}

		task ("Edit a Custom Validation using an expression 'is decimal'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156698");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isDecimal(customText)");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'does not contains' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "9,87",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "9.87");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectPortlet.viewEntry(entry = "9.87");

			ObjectPortlet.assertEntryNotPresent(entry = "9,87");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Empty' to text fields"
	@priority = "4"
	test CanDefineExpressionIsEmpty {
		task ("Create Custom Object and Custom Field") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsEmpty";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156695",
				objectName = "CustomObject156695",
				pluralLabelName = "Custom Objects 156695");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156695");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156695");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156695");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is empty'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isEmpty(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is empty' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156695");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "Invalid entry",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "");

			Alert.viewSuccessMessageText(successMessage = "Your request completed successfully.");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156695");

			ObjectPortlet.viewEntry(entry = "");

			ObjectPortlet.assertEntryNotPresent(entry = "Invalid entry");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Equal To' and 'Is Not Equal To' text fields and integer fields"
	@priority = "4"
	test CanDefineExpressionIsEqualToAndIsNotEqualTo {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsEqualToAndIsNotEqualTo";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156693",
				objectName = "CustomObject156693",
				pluralLabelName = "Custom Objects 156693");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156693");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156693");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156693");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Equal To'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger == 12345");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "54321",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "12345");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.viewEntry(entry = "12345");

			ObjectPortlet.assertEntryNotPresent(entry = "54321");
		}

		task ("Edit a Custom Validation using an expression 'is Not Equal To'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156693");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger != 13579");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is Not Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "13579",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "24680");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.viewEntry(entry = "24680");

			ObjectPortlet.assertEntryNotPresent(entry = "13579");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Greater Than Or Equal To' to integer fields"
	@priority = "4"
	test CanDefineExpressionIsGreaterThanOrEqualTo {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsGreaterThanOrEqualTo";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156696",
				objectName = "CustomObject156696",
				pluralLabelName = "Custom Objects 156696");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156696");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156696");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156696");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Greater Than Or Equal To'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger >= 5000");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is Greater Than Or Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156696");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "4999",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5000");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5001");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156696");

			ObjectPortlet.viewEntry(entry = "5000");

			ObjectPortlet.viewEntry(entry = "5001");

			ObjectPortlet.assertEntryNotPresent(entry = "4999");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Less Than Or Equal To' to integer fields"
	@priority = "4"
	test CanDefineExpressionIsLessThanOrEqualTo {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsLessThanOrEqualTo";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156697",
				objectName = "CustomObject156697",
				pluralLabelName = "Custom Objects 156697");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156697");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156697");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156697");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Less Than Or Equal To'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger <= 5000");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is Less Than Or Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156697");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5001",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5000");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "4999");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156697");

			ObjectPortlet.viewEntry(entry = "5000");

			ObjectPortlet.viewEntry(entry = "4999");

			ObjectPortlet.assertEntryNotPresent(entry = "5001");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is a Url' to text fields"
	@priority = "4"
	test CanDefineExpressionIsUrl {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionIsUrl";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156689",
				objectName = "CustomObject156689",
				pluralLabelName = "Custom Objects 156689");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156689");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156689");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156689");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is a URL'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isURL(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'is a URL' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156689");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "It is not a URL",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "https://www.liferay.com/");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156689");

			ObjectPortlet.viewEntry(entry = "https://www.liferay.com/");

			ObjectPortlet.assertEntryNotPresent(entry = "It is not URL");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Match' (reGex expression) to text fields"
	@priority = "4"
	test CanDefineExpressionMatch {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionMatch";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156692",
				objectName = "CustomObject156692",
				pluralLabelName = "Custom Objects 156692");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156692");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156692");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156692");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'Match' - reGex expression contains all uppercase letters") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "match(customText, '[A-Z]')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'Match' is working only with UPPERCASE letters") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156692");

			ObjectAdmin.addObjectStringFieldEntryViaUI(
				entryValue = "z",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Z");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156692");

			ObjectPortlet.viewEntry(entry = "Z");

			ObjectPortlet.assertEntryNotPresent(entry = "z");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with math operators to integer fields"
	@priority = "4"
	test CanDefineExpressionOperators {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionOperators";

		task ("Create Custom Object and some Custom Fields") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156700",
				objectName = "CustomObject156700",
				pluralLabelName = "Custom Objects 156700");

			for (var letters : list "A,B,C") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Integer",
					fieldLabelName = "Custom Integer ${letters}",
					fieldName = "customInteger${letters}",
					fieldType = "Integer",
					isRequired = "false",
					objectName = "CustomObject156700");
			}

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156700");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156700");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression that contains operation 'plus'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customIntegerA == customIntegerB + customIntegerC");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'plus' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "1100");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "800");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "400");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "5500");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "2250");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "3250");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			ObjectPortlet.viewEntry(entry = "5500");

			ObjectPortlet.assertEntryNotPresent(entry = "1100");
		}

		task ("Edit a Custom Validation using an expression that contains operation 'minus'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156700");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customIntegerA == customIntegerB - customIntegerC");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'minus' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "2000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "2500");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "1000");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "6500");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "7250");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "750");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			ObjectPortlet.viewEntry(entry = "6500");

			ObjectPortlet.assertEntryNotPresent(entry = "2000");
		}

		task ("Edit a Custom Validation using an expression that contains operation 'time'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156700");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customIntegerA == customIntegerB * customIntegerC");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'time' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "3000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "2000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "2");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "7500");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "3750");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "2");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			ObjectPortlet.viewEntry(entry = "7500");

			ObjectPortlet.assertEntryNotPresent(entry = "3000");
		}

		task ("Edit a Custom Validation using an expression that contains operation 'divided by'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156700");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customIntegerA == customIntegerB / customIntegerC");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'divided by' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "4000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "5000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "2");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "8500");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "17000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "2");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156700");

			ObjectPortlet.viewEntry(entry = "8500");

			ObjectPortlet.assertEntryNotPresent(entry = "4000");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Range' (Future Dates and Past Dates) to date fields"
	@priority = "4"
	test CanDefineExpressionRange {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionRange";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156702",
				objectName = "CustomObject156702",
				pluralLabelName = "Custom Objects 156702");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Date",
				fieldLabelName = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date",
				isRequired = "false",
				objectName = "CustomObject156702");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156702");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156702");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'Range'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "futureDates(customDate, '2022-06-01') AND pastDates(customDate, '2022-06-30')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'Range' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156702");

			ObjectPortlet.addSingleFieldEntryViaUI(
				entry = "05/30/2022",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(
				entry = "01/07/2022",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "06/15/2022");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156702");

			ObjectPortlet.viewEntry(entry = "Jun 15, 2022");

			ObjectPortlet.assertEntryNotPresent(entry = "May 30, 2022");

			ObjectPortlet.assertEntryNotPresent(entry = "Jul 1, 2022");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Sum' to integer fields"
	@priority = "4"
	test CanDefineExpressionSum {
		task ("Create Custom Object and some Custom Fields") {
			property test.name.skip.portal.instance = "ObjectCustomValidation#CanDefineExpressionSum";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156699",
				objectName = "CustomObject156699",
				pluralLabelName = "Custom Objects 156699");

			for (var letters : list "A,B,C,D") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Integer",
					fieldLabelName = "Custom Integer ${letters}",
					fieldName = "customInteger${letters}",
					fieldType = "Integer",
					isRequired = "false",
					objectName = "CustomObject156699");
			}

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156699");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156699");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'sum'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customIntegerA >= sum(customIntegerB, customIntegerC, customIntegerD)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation with 'sum' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156699");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "10001");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "3001");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "4000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer D",
				entry = "5000");

			Button.clickSave();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer A",
				entry = "10002");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer B",
				entry = "2002");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer C",
				entry = "3000");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer D",
				entry = "4000");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156699");

			ObjectPortlet.viewEntry(entry = "10002");

			ObjectPortlet.assertEntryNotPresent(entry = "10001");
		}
	}

	@description = "LPS-144474 - Verify that, when adding validations using Groovy, the validation is not active by default"
	@priority = "4"
	test CannotActiveByDefaultWhenAddValidationsGroovy {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CannotActiveByDefaultWhenAddValidationsGroovy";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153551",
			objectName = "CustomObject153551",
			pluralLabelName = "Custom Objects 153551");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153551");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		Refresh();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "No",
			validationName = "Custom Validation",
			validationType = "Groovy");
	}

	@description = "LPS-144474 - Verify that, when editing an entry in an Object, the user only is able to update the entry successfully if it passes for all validations from that Object"
	@priority = "4"
	test CanUpdateWhenPassesForAllValidations {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanUpdateWhenPassesForAllValidations";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153558",
			objectName = "CustomObject153558",
			pluralLabelName = "Custom Objects 153558");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153558");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153558");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153558");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153558",
			value = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153558");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Decline Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153558");

		ObjectPortlet.assertEntryNotPresent(entry = "Decline Entry");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Update Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153558");

		ObjectPortlet.viewEntry(entry = "Update Entry");
	}

	@description = "LPS-144474 - Verify that the user, when modeling an Object, is able to add validations using Groovy"
	@priority = "4"
	test CanUserAddValidationsGroovy {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanUserAddValidationsGroovy";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153550",
			objectName = "CustomObject153550",
			pluralLabelName = "Custom Objects 153550");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153550");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153550");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153550");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		for (var entryTitle : list "Entry Test,Decline Entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject153550",
				value = "${entryTitle}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153550");

		ObjectPortlet.viewEntry(entry = "Entry Test");

		ObjectPortlet.assertEntryNotPresent(entry = "Decline Entry");
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the user is able to define if that validation is active or not"
	@priority = "4"
	test CanUserDefineValidationActiveOrInactive {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanUserDefineValidationActiveOrInactive";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153552",
			objectName = "CustomObject153552",
			pluralLabelName = "Custom Objects 153552");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject153552");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153552");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153552");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField < 18)");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		Refresh();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "Yes",
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153552",
			value = "10");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153552");

		ObjectPortlet.assertEntryNotPresent(entry = "10");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153552");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.desactiveValidation();

		PortletEntry.save();

		Refresh();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "No",
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153552",
			value = "10");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153552");

		ObjectPortlet.viewEntry(entry = "10");
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the user can see Basic Info tab"
	@priority = "4"
	test CanUserSeeBasicInfoTab {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanUserSeeBasicInfoTab";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153553",
			objectName = "CustomObject153553",
			pluralLabelName = "Custom Objects 153553");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153553");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.viewActiveTabOnCustomValidation(activeTab = "Basic Info");

		for (var cardsName : list "Basic Info,Trigger Event") {
			ObjectCustomValidation.viewCardsOnCustomValidation(cardName = "${cardsName}");
		}
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the user can see Conditions tab"
	@priority = "4"
	test CanUserSeeConditionsTab {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanUserSeeConditionsTab";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153554",
			objectName = "CustomObject153554",
			pluralLabelName = "Custom Objects 153554");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153554");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.viewActiveTabOnCustomValidation(activeTab = "Conditions");

		for (var cardsName : list "Groovy,Error Message") {
			ObjectCustomValidation.viewCardsOnCustomValidation(cardName = "${cardsName}");
		}
	}

	@description = "LPS-152735 - Verify that it's possible to validate Expression Builder syntax when creating Actions"
	@priority = "4"
	test CanValidateExpressionBuilderAction {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanValidateExpressionBuilderAction";

		task ("Create Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161913",
				objectName = "CustomObject161913",
				pluralLabelName = "Custom Objects 161913");
		}

		task ("Go to Objects, select Custom Object and click on actions tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161913");

			ObjectAdmin.goToActionsTab();
		}

		task ("Add a Custom Action and try to add incorrect syntax in Expression Builder") {
			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionDescription = "Custom Description",
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "#",
				inputMethod = "true",
				thenAction = "Webhook",
				urlAction = "www.liferay.com",
				whenAction = "On After Add");

			Button.clickSave();
		}

		task ("Assert that there is an error in syntax") {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Syntax Error");
		}
	}

	@description = "LPS-152735 - Verify that it's possible to validate Expression Builder syntax when creating a Scheduled Action"
	@priority = "4"
	test CanValidateExpressionBuilderScheduledAction {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanValidateExpressionBuilderScheduledAction";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161915",
				objectName = "CustomObject161915",
				pluralLabelName = "Custom Objects 161915");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject161915");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161915");
		}

		task ("Go to Objects, select Custom Object and click on actions tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161915");

			ObjectAdmin.goToActionsTab();
		}

		task ("Add a Custom Action and try to add incorrect syntax in Expression Builder") {
			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionDescription = "Custom Description",
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpressionValue = "#",
				inputMethod = "false",
				objectLabel = "Custom Object 161915",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			Button.clickSave();
		}

		task ("Assert that there is an error in syntax") {
			SelectFrame(locator1 = "Message#ERROR_DISMISSIBLE");

			AssertElementPresent(
				locator1 = "Message#ERROR_DISMISSIBLE",
				value1 = "Syntax Error");
		}
	}

	@description = "LPS-152735 - Verify that it's possible to validate Groovy syntax when creating Actions"
	@priority = "4"
	test CanValidateGroovyAction {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanValidateGroovyAction";

		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161912",
				objectName = "CustomObject161912",
				pluralLabelName = "Custom Objects 161912");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject161912");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161912");
		}

		task ("Go to Objects, select Custom Object and click on actions tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161912");

			ObjectAdmin.goToActionsTab();
		}

		task ("Add a Custom Action using Groovy Script") {
			ObjectAdmin.addObjectActionViaUI(
				actionDescription = "Custom Description",
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				scriptValidation = "invalidFields = (customInteger < 18)",
				thenAction = "Groovy Script",
				whenAction = "On After Add");
		}

		task ("Assert that there is Custom Action") {
			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionLabel = "Custom Action",
				status = "Never Ran");
		}

		task ("Go to Custom Object entries and add an entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161912");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer",
				entry = "123456789");

			PortletEntry.save();
		}

		task ("Assert that the status was updated") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161912");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionLabel = "Custom Action",
				status = "Success");
		}
	}

	@description = "LPS-152735 - Verify that it's possible to validate Groovy syntax when creating a Scheduled Action"
	@priority = "4"
	test CanValidateGroovyScheduledAction {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanValidateGroovyScheduledAction";

		task ("Create Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161914",
				objectName = "CustomObject161914",
				pluralLabelName = "Custom Objects 161914");
		}

		task ("Go to Objects, select Custom Object and click on actions tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161914");

			ObjectAdmin.goToActionsTab();
		}

		task ("Add a Custom Action and try to add incorrect syntax in Expression Builder") {
			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionDescription = "Custom Description",
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				scriptValidation = "if = (customField == 'Syntax is incorrect')",
				thenAction = "Groovy Script",
				whenAction = "On After Add");

			Button.clickSave();
		}

		task ("Assert that there is an error in syntax") {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Syntax Error");
		}
	}

	@description = "LPS-151671 - Verify that it's possible to use data validations with expression builder on System Objects"
	@priority = "5"
	test CanValidateSystemObjectWithExpressionBuilder {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanValidateSystemObjectWithExpressionBuilder";

		task ("Go to Objects, select System Object User and click on validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "User");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Equal To' with system fields") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "givenName == 'Userfn'");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Assert that Custom Validation has been added'") {
			Refresh();

			ObjectCustomValidation.assertValidationPresent(
				validationActive = "Yes",
				validationName = "Custom Validation",
				validationType = "Expression Builder");
		}

		task ("Assert that is not possible to add User with first name different of the Approved") {
			User.openUsersAdmin();

			LexiconEntry.gotoAdd();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
				value1 = "Usersn");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
				value1 = "userea@liferay.com");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "Userfn");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
				value1 = "Userln");

			PortletEntry.save();

			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			AssertElementPresent(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "Userfn");

			AssertElementPresent(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
				value1 = "Userln");
		}
	}

	@description = "LPS-144474 - Verify that, when there is no Validations added, the empty state view is displayed"
	@priority = "4"
	test CanViewDefaultViewWhenEmptyValidation {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanViewDefaultViewWhenEmptyValidation";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153547",
			objectName = "CustomObject153547",
			pluralLabelName = "Custom Objects 153547");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153547");

		ObjectAdmin.goToValidationsTab();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-144474 - Verify that the default placeholder from the LocalizedInput has been changed"
	@priority = "4"
	test CanViewLocalizedInputChanged {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanViewLocalizedInputChanged";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153549",
			objectName = "CustomObject153549",
			pluralLabelName = "Custom Objects 153549");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153549");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		ObjectCustomValidation.gotoTab(tabName = "Basic Info");

		ObjectAdmin.changeLabelLanguage(newLanguage = "pt_BR");

		ObjectCustomValidation.editLabelOnCustomValidation(editValidationName = "Validação customizada");

		PortletEntry.save();

		Navigator.openURL();

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153549");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "Não",
			validationName = "Validação customizada",
			validationType = "Groovy");
	}

	@description = "LPS-144474 - Verify that, when adding a new entry in the Object, if it do not passes all validations from that Object, an alert is displayed in the lower left corner of the screen"
	@priority = "4"
	test CanViewMessageErrorWhenDontPassesForAllValidations {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanViewMessageErrorWhenDontPassesForAllValidations";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153546",
			objectName = "CustomObject153546",
			pluralLabelName = "Custom Objects 153546");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153546");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153546");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153546");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == \"Invalid Entry\")");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153546");

		ObjectAdmin.addObjectStringFieldEntryViaUI(
			entryValue = "Invalid Entry",
			invalidEntry = "true");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "This entry is not possible.");
	}

	@description = "LPS-144474 - Verify that the message 'There was an unexpected error in fields validation. Please contact support' is displayed when the goovy sintax is incorrect"
	@priority = "4"
	test CanViewSpecificErrorWhenGroovySintaxIsIncorrect {
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanViewSpecificErrorWhenGroovySintaxIsIncorrect";

		task ("Create a Custom Object and a Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 153561",
				objectName = "CustomObject153561",
				pluralLabelName = "Custom Objects 153561");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject153561");
		}

		task ("Go to Custom Objects and Validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 153561");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation with Groovy Script") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Groovy");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");
		}

		task ("Write with syntax incorrect on the script") {
			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "if = (customField == 'Syntax is incorrect')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "Error: This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that there is an error in syntax") {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Syntax Error");
		}
	}

	@description = "LPS-144474 - Verify that the Validation tab is available"
	@priority = "5"
	test CanViewValidationTab {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectCustomValidation#CanViewValidationTab";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153546",
			objectName = "CustomObject153546",
			pluralLabelName = "Custom Objects 153546");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153546");

		ObjectAdmin.goToValidationsTab();

		ObjectAdmin.viewSelectedTabOnObject(selectedTab = "Validations");
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the Error Message field is required"
	@priority = "4"
	test ErrorMessageFieldIsRequired {
		property test.name.skip.portal.instance = "ObjectCustomValidation#ErrorMessageFieldIsRequired";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153555",
			objectName = "CustomObject153555",
			pluralLabelName = "Custom Objects 153555");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153555");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == \"Invalid Entry\")");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-144474 - Verify that, when adding a New Validation, the Label field is required"
	@priority = "4"
	test LabelFieldIsRequiredOnValidation {
		property test.name.skip.portal.instance = "ObjectCustomValidation#LabelFieldIsRequiredOnValidation";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153548",
			objectName = "CustomObject153548",
			pluralLabelName = "Custom Objects 153548");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153548");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "",
			validationType = "Groovy");

		ObjectAdmin.assertRequiredErrorPresent();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.editLabelOnCustomValidation(editValidationName = "");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

}