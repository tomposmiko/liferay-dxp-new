@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-144474 - Verify that, when adding a new entry in the Object, the user only is able to submit the entry successfully if it passes for all validations from that Object"
	@priority = "4"
	test CanAddEntryWhenPassesForAllValidations {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153556",
			objectName = "CustomObject153556",
			pluralLabelName = "Custom Objects 153556");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153556");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153556");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153556");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField != 'Allowed Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153556");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Allowed Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153556");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");
	}

	@description = "LPS-144474 - Verify that, when updating an existing validation, this validation must only affect the entries added after the validation update"
	@priority = "4"
	test CanAffectOnlyEntriesAddedWhenUpdateValidationWithEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153559",
			objectName = "CustomObject153559",
			pluralLabelName = "Custom Objects 153559");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153559");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153559");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153559");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField != 'Allowed Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153559",
			value = "Allowed Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153559");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153559");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Allowed Entry')");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153559");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Allowed Entry");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "This entry is not possible.");
	}

	@description = "LPS-144474 - Verify that, when updating an existing validation, this validation must only affect the entries updated after the validation update"
	@priority = "4"
	test CanAffectOnlyEntriesUpdateWhenUpdateValidationWithEntries {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153560",
			objectName = "CustomObject153560",
			pluralLabelName = "Custom Objects 153560");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153560");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153560");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153560");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField != 'Allowed Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153560",
			value = "Allowed Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153560");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153560");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Update Entry')");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153560");

		ObjectPortlet.viewEntryDetails(entry = "Allowed Entry");

		ObjectAdmin.editEntryName(newEntryValue = "Decline Update Entry");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "This entry is not possible.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153560");

		ObjectPortlet.viewEntry(entry = "Allowed Entry");
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Contains' and 'Does Not Contains' to text fields and integer fields"
	@priority = "4"
	test CanDefineExpressionContainsAndDoesNotContain {
		task ("Create Custom Object and Custom Fields") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156688",
				objectName = "CustomObject156688",
				pluralLabelName = "Custom Objects 156688");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156688");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156688");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156688");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156688");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'contains'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "contains(customText, 'Allowed Entry')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'contains' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Decline Entry");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Allowed Entry");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectPortlet.viewEntry(entry = "Allowed Entry");

			ObjectPortlet.assertEntryNotPresent(entry = "Decline Entry");
		}

		task ("Edit a Custom Validation using an expression 'does not contains'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156688");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "NOT(contains(customInteger, '2004'))");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'does not contains' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "2004");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "2022");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156688");

			ObjectPortlet.viewEntry(entry = "2022");

			ObjectPortlet.assertEntryNotPresent(entry = "2004");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Future Dates' and 'Past Dates' to date fields"
	@priority = "4"
	test CanDefineExpressionFutureDatesAndPastDates {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156701",
				objectName = "CustomObject156701",
				pluralLabelName = "Custom Objects 156701");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Date",
				fieldLabelName = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date",
				isRequired = "false",
				objectName = "CustomObject156701");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156701");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156701");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'Past Dates'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "pastDates(customDate, '2022-06-01')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'Past Dates' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "01/01/2023");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "01/01/2022");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.viewEntry(entry = "Jan 1, 2022");

			ObjectPortlet.assertEntryNotPresent(entry = "Jan 1, 2023");
		}

		task ("Edit a Custom Validation using an expression 'Future Dates'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156701");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "futureDates(customDate, '2022-06-01')");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'Future Dates' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "02/02/2022");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "02/02/2023");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156701");

			ObjectPortlet.viewEntry(entry = "Feb 2, 2023");

			ObjectPortlet.assertEntryNotPresent(entry = "Feb 2, 2022");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is an Email' to text fields"
	@priority = "4"
	test CanDefineExpressionIsAnEmail {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156690",
				objectName = "CustomObject156690",
				pluralLabelName = "Custom Objects 156690");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156690");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156690");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156690");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is an Email'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isEmailAddress(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is an Email' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156690");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "It is not an email");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "test@liferay.com");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156690");

			ObjectPortlet.viewEntry(entry = "test@liferay.com");

			ObjectPortlet.assertEntryNotPresent(entry = "It is not an email");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Integer' to integer fields and 'Is Decimal' to decimal fields"
	@priority = "4"
	test CanDefineExpressionIsDecimalOrIsInteger {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156698",
				objectName = "CustomObject156698",
				pluralLabelName = "Custom Objects 156698");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156698");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156698");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156698");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is integer'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isInteger(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is integer' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "1.23");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "123");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectPortlet.viewEntry(entry = "123");

			ObjectPortlet.assertEntryNotPresent(entry = "1.23");
		}

		task ("Edit a Custom Validation using an expression 'is decimal'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156698");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isDecimal(customText)");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'does not contains' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "9,87");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "9.87");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156698");

			ObjectPortlet.viewEntry(entry = "9.87");

			ObjectPortlet.assertEntryNotPresent(entry = "9,87");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Equal To' and 'Is Not Equal To' text fields and integer fields"
	@priority = "4"
	test CanDefineExpressionIsEqualToAndIsNotEqualTo {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156693",
				objectName = "CustomObject156693",
				pluralLabelName = "Custom Objects 156693");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156693");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156693");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156693");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Equal To'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger == 12345");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "54321");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "12345");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.viewEntry(entry = "12345");

			ObjectPortlet.assertEntryNotPresent(entry = "54321");
		}

		task ("Edit a Custom Validation using an expression 'is Not Equal To'") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156693");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger != 13579");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is Not Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "13579");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "24680");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156693");

			ObjectPortlet.viewEntry(entry = "24680");

			ObjectPortlet.assertEntryNotPresent(entry = "13579");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Greater Than Or Equal To' to integer fields"
	@priority = "4"
	test CanDefineExpressionIsGreaterThanOrEqualTo {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156696",
				objectName = "CustomObject156696",
				pluralLabelName = "Custom Objects 156696");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156696");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156696");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156696");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Greater Than Or Equal To'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger >= 5000");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is Greater Than Or Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156696");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "4999");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5000");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5001");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156696");

			ObjectPortlet.viewEntry(entry = "5000");

			ObjectPortlet.viewEntry(entry = "5001");

			ObjectPortlet.assertEntryNotPresent(entry = "4999");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is Less Than Or Equal To' to integer fields"
	@priority = "4"
	test CanDefineExpressionIsLessThanOrEqualTo {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156697",
				objectName = "CustomObject156697",
				pluralLabelName = "Custom Objects 156697");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject156697");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156697");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156697");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Less Than Or Equal To'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger <= 5000");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is Less Than Or Equal To' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156697");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5001");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "5000");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "4999");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156697");

			ObjectPortlet.viewEntry(entry = "5000");

			ObjectPortlet.viewEntry(entry = "4999");

			ObjectPortlet.assertEntryNotPresent(entry = "5001");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Is a Url' to text fields"
	@priority = "4"
	test CanDefineExpressionIsUrl {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156689",
				objectName = "CustomObject156689",
				pluralLabelName = "Custom Objects 156689");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156689");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156689");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156689");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is a URL'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "isURL(customText)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'is a URL' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156689");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "It is not a URL");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "https://www.liferay.com/");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156689");

			ObjectPortlet.viewEntry(entry = "https://www.liferay.com/");

			ObjectPortlet.assertEntryNotPresent(entry = "It is not URL");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Match' (reGex expression) to text fields"
	@priority = "4"
	test CanDefineExpressionMatch {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156692",
				objectName = "CustomObject156692",
				pluralLabelName = "Custom Objects 156692");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text",
				fieldName = "customText",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject156692");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156692");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156692");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'Match' - reGex expression contains all uppercase letters") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "match(customText, '[A-Z]')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'Match' is working only with UPPERCASE letters") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156692");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "z");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Z");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156692");

			ObjectPortlet.viewEntry(entry = "Z");

			ObjectPortlet.assertEntryNotPresent(entry = "z");
		}
	}

	@description = "LPS-147651 - Verify that the user can define and use a expression with 'Range' (Future Dates and Past Dates) to date fields"
	@priority = "4"
	test CanDefineExpressionRange {
		task ("Create Custom Object and Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 156702",
				objectName = "CustomObject156702",
				pluralLabelName = "Custom Objects 156702");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Date",
				fieldLabelName = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date",
				isRequired = "false",
				objectName = "CustomObject156702");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156702");
		}

		task ("On Custom Object, go to validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 156702");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'Range'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "futureDates(customDate, '2022-06-01') AND pastDates(customDate, '2022-06-30')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that Custom Validation with 'Range' is working") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject156702");

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "05/30/2022");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "01/07/2022");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "06/15/2022");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156702");

			ObjectPortlet.viewEntry(entry = "Jun 15, 2022");

			ObjectPortlet.assertEntryNotPresent(entry = "May 30, 2022");

			ObjectPortlet.assertEntryNotPresent(entry = "Jul 1, 2022");
		}
	}

	@description = "LPS-144474 - Verify that, when adding validations using Groovy, the validation is not active by default"
	@priority = "4"
	test CannotActiveByDefaultWhenAddValidationsGroovy {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153551",
			objectName = "CustomObject153551",
			pluralLabelName = "Custom Objects 153551");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153551");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		Refresh();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "No",
			validationName = "Custom Validation",
			validationType = "Groovy");
	}

	@description = "LPS-144474 - Verify that, when editing an entry in an Object, the user only is able to update the entry successfully if it passes for all validations from that Object"
	@priority = "4"
	test CanUpdateWhenPassesForAllValidations {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153558",
			objectName = "CustomObject153558",
			pluralLabelName = "Custom Objects 153558");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153558");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153558");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153558");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153558",
			value = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153558");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Decline Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153558");

		ObjectPortlet.assertEntryNotPresent(entry = "Decline Entry");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Update Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153558");

		ObjectPortlet.viewEntry(entry = "Update Entry");
	}

	@description = "LPS-144474 - Verify that the user, when modeling an Object, is able to add validations using Groovy"
	@priority = "4"
	test CanUserAddValidationsGroovy {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153550",
			objectName = "CustomObject153550",
			pluralLabelName = "Custom Objects 153550");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153550");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153550");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153550");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		for (var entryTitle : list "Entry Test,Decline Entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject153550",
				value = "${entryTitle}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153550");

		ObjectPortlet.viewEntry(entry = "Entry Test");

		ObjectPortlet.assertEntryNotPresent(entry = "Decline Entry");
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the user is able to define if that validation is active or not"
	@priority = "4"
	test CanUserDefineValidationActiveOrInactive {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153552",
			objectName = "CustomObject153552",
			pluralLabelName = "Custom Objects 153552");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject153552");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153552");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153552");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField < 18)");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		Refresh();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "Yes",
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153552",
			value = "10");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153552");

		ObjectPortlet.assertEntryNotPresent(entry = "10");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153552");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.desactiveValidation();

		Button.clickSave();

		Refresh();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "No",
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject153552",
			value = "10");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153552");

		ObjectPortlet.viewEntry(entry = "10");
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the user can see Basic Info tab"
	@priority = "4"
	test CanUserSeeBasicInfoTab {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153553",
			objectName = "CustomObject153553",
			pluralLabelName = "Custom Objects 153553");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153553");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.viewActiveTabOnCustomValidation(activeTab = "Basic Info");

		for (var cardsName : list "Basic Info,Trigger Event") {
			ObjectCustomValidation.viewCardsOnCustomValidation(cardName = "${cardsName}");
		}
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the user can see Conditions tab"
	@priority = "4"
	test CanUserSeeConditionsTab {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153554",
			objectName = "CustomObject153554",
			pluralLabelName = "Custom Objects 153554");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153554");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.viewActiveTabOnCustomValidation(activeTab = "Conditions");

		for (var cardsName : list "Groovy,Error Message") {
			ObjectCustomValidation.viewCardsOnCustomValidation(cardName = "${cardsName}");
		}
	}

	@description = "LPS-144474 - Verify that, when there is no Validations added, the empty state view is displayed"
	@priority = "4"
	test CanViewDefaultViewWhenEmptyValidation {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153547",
			objectName = "CustomObject153547",
			pluralLabelName = "Custom Objects 153547");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153547");

		ObjectAdmin.goToValidationsTab();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-144474 - Verify that the default placeholder from the LocalizedInput has been changed"
	@priority = "4"
	test CanViewLocalizedInputChanged {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153549",
			objectName = "CustomObject153549",
			pluralLabelName = "Custom Objects 153549");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153549");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == 'Decline Entry')");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		ObjectCustomValidation.gotoTab(tabName = "Basic Info");

		ObjectAdmin.changeLabelLanguage(newLanguage = "pt_BR");

		ObjectCustomValidation.editLabelOnCustomValidation(editValidationName = "Validação customizada");

		Button.clickSave();

		Navigator.openURL();

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153549");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.assertValidationPresent(
			validationActive = "Não",
			validationName = "Validação customizada",
			validationType = "Groovy");
	}

	@description = "LPS-144474 - Verify that, when adding a new entry in the Object, if it do not passes all validations from that Object, an alert is displayed in the lower left corner of the screen"
	@priority = "4"
	test CanViewMessageErrorWhenDontPassesForAllValidations {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153546",
			objectName = "CustomObject153546",
			pluralLabelName = "Custom Objects 153546");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153546");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153546");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153546");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.activeValidation();

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == &quot;Invalid Entry&quot;)");

		ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153546");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Invalid Entry");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "This entry is not possible.");
	}

	@description = "LPS-144474 - Verify that the message 'There was an unexpected error in fields validation. Please contact support' is displayed when the goovy sintax is incorrect"
	@priority = "4"
	test CanViewSpecificErrorWhenGroovySintaxIsIncorrect {
		task ("Create a Custom Object and a Custom Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 153561",
				objectName = "CustomObject153561",
				pluralLabelName = "Custom Objects 153561");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject153561");
		}

		task ("Go to Custom Objects and Validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 153561");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation with Groovy Script") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Groovy");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");
		}

		task ("Write with syntax incorrect on the script") {
			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "if = (customField == 'Syntax is incorrect')");

			ObjectCustomValidation.addErrorMessage(errorMessage = "Error: This entry is not possible.");

			Button.clickSave();
		}

		task ("Assert that there is an error in syntax") {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Syntax Error");
		}
	}

	@description = "LPS-144474 - Verify that the Validation tab is available"
	@priority = "5"
	test CanViewValidationTab {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153546",
			objectName = "CustomObject153546",
			pluralLabelName = "Custom Objects 153546");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153546");

		ObjectAdmin.goToValidationsTab();

		ObjectAdmin.viewSelectedTabOnObject(selectedTab = "Validations");
	}

	@description = "LPS-144474 - Verify that, when managing an Object validation, the Error Message field is required"
	@priority = "4"
	test ErrorMessageFieldIsRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153555",
			objectName = "CustomObject153555",
			pluralLabelName = "Custom Objects 153555");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153555");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.gotoTab(tabName = "Conditions");

		ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customField == &quot;Invalid Entry&quot;)");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

	@description = "LPS-144474 - Verify that, when adding a New Validation, the Label field is required"
	@priority = "4"
	test LabelFieldIsRequiredOnValidation {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153548",
			objectName = "CustomObject153548",
			pluralLabelName = "Custom Objects 153548");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153548");

		ObjectAdmin.goToValidationsTab();

		ObjectCustomValidation.addObjectValidation(
			validationName = "",
			validationType = "Groovy");

		ObjectAdmin.assertRequiredErrorPresent();

		ObjectCustomValidation.addObjectValidation(
			validationName = "Custom Validation",
			validationType = "Groovy");

		ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

		ObjectCustomValidation.editLabelOnCustomValidation(editValidationName = "");

		Button.clickSave();

		ObjectAdmin.assertRequiredErrorPresent();
	}

}