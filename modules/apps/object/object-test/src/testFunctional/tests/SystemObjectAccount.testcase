@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-151765 - Verify is possible to associate each types of Accounts with Custom Object (Bussiness, Guest and Person)"
	@ignore = "Test Stub"
	@priority = "5"
	test CanAssociateAnyTypeOfAccount {
		property portal.acceptance = "true";

		// TODO LPS-153535 CanAssociateAnyTypeOfAccount pending implementation

	}

	@description = "LPS-151765 - Verify if is possible to create Custom Action on System Object Account"
	@priority = "4"
	test CanCreateActionOnSystemAccount {
		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionName = "Action Name",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionName = "Action Name");
	}

	@description = "LPS-151765 - Verify if is possible to create Relationship one to many on System Object Account and to relate with the Custom Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanCreateRelationshipRelatedWithCustomObject {

		// TODO LPS-153518 CanCreateRelationshipRelatedWithCustomObject pending implementation

	}

	@description = "LPS-151765 - Verify if Cascade deletion type of Relationship One to Many can delete and you also will delete the child related entry (if you also have permissions for it)"
	@ignore = "Test Stub"
	@priority = "4"
	test CanDeleteRelationshipWhenDeletionTypeIsCascade {

		// TODO LPS-153534 CanDeleteRelationshipWhenDeletionTypeIsCascade pending implementation

	}

	@description = "LPS-151765 - Verify if is not possible to delete the fields on System Object Account"
	@priority = "5"
	test CannotDeleteDefaultFields {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.goToFieldsTab();

		for (var label : list "Name,Description,Type") {
			AssertElementNotPresent(
				key_value = "${label}",
				locator1 = "ObjectAdmin#BODY_VERTICAL_ELLIPSIS");

			AssertElementNotPresent(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}
	}

	@description = "LPS-151765 - Verify if Disassociate deletion type of Relationship One to Many can delete normally and nothing happens with the child"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotDeleteRelationshipWhenDeletionTypeIsDisassociate {

		// TODO LPS-153533 CannotDeleteRelationshipWhenDeletionTypeIsDisassociate pending implementation

	}

	@description = "LPS-151765 - Verify if Prevent deletion type of Relationship One to Many canâ€™t delete that is related to another one"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotDeleteRelationshipWhenDeletionTypeIsPrevent {

		// TODO LPS-153532 CannotDeleteRelationshipWhenDeletionTypeIsPrevent pending implementation

	}

	@description = "LPS-151765 - Verify if is not possible to edit default fields on System Object Account"
	@priority = "5"
	test CannotEditDefaultFields {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.goToFieldsTab();

		for (var label : list "Name,Description,Type") {
			ObjectAdmin.goToFieldsDetails(label = "${label}");

			ObjectField.assertTypeDisabled();

			ObjectField.assertNameDisabled();

			ObjectField.typeLabel(content = "Text Update");

			Button.clickSave();

			Click(locator1 = "Icon#TIMES");

			AssertElementNotPresent(
				key_tableEntry = "Text Update",
				locator1 = "LexiconTable#TABLE_ENTRY");

			Refresh();
		}
	}

	@description = "LPS-151765 - Verify if is possible a Custom User to view the System Object Account, if it to have permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanUserViewSystemAccountWhenAllowed {

		// TODO LPS-153529 CanUserViewSystemAccountWhenAllowed pending implementation

	}

	@description = "LPS-151765 - Verify if is possible to choose by Description Field on entries, when Title Field is Description"
	@priority = "4"
	test CanViewDescriptionOnFieldEntry {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153528",
			objectName = "CustomObject153528",
			pluralLabelName = "Custom Objects 153528");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject153528",
			type = "One to Many");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153528");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		CreateObject.selectTitleField(fieldLabel = "Description");

		CreateObject.saveObject();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153528");

		ObjectAdmin.addEntryOnRelationshipFieldViaUI(entryOption = "Accounts Name Description for Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153528");

		ObjectPortlet.viewEntry(entry = "Accounts Name Description for Test");
	}

	@description = "LPS-151765 - Verify if there are the fields Name, Description and Type as default on System Object Account"
	@priority = "5"
	test CanViewFieldsLabelByDefault {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.goToFieldsTab();

		for (var label : list "Name,Description,Type") {
			ObjectAdmin.assertObjectField(
				fieldLabel = "${label}",
				fieldType = "Text");
		}
	}

	@description = "LPS-151765 - Verify if the fields Name and Type are mandatory on System Object Account"
	@priority = "4"
	test CanViewNameAndTypeAsMandatoryFields {
		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.goToFieldsTab();

		for (var label : list "Name,Type") {
			ObjectAdmin.goToFieldsDetails(label = "${label}");

			ObjectField.assertType(fieldType = "Text");

			ObjectField.assertMandatory();

			Refresh();
		}
	}

	@description = "LPS-151765 - Verify if is possible to choose by Name Field on entries, when Title Field is Name"
	@priority = "4"
	test CanViewNameOnFieldEntry {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153527",
			objectName = "CustomObject153527",
			pluralLabelName = "Custom Objects 153527");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject153527",
			type = "One to Many");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153527");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		CreateObject.selectTitleField(fieldLabel = "Name");

		CreateObject.saveObject();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153527");

		ObjectAdmin.addEntryOnRelationshipFieldViaUI(entryOption = "Accounts Name for Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153527");

		ObjectPortlet.viewEntry(entry = "Accounts Name for Test");
	}

	@description = "LPS-151765 - Verify if is possible to view the Relationship by Account on Custom Object Entries"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewRelationshipOnCustomObjectEntries {

		// TODO LPS-153530 CanViewRelationshipOnCustomObjectEntries pending implementation

	}

	@description = "LPS-151765 - Verify if is possible to choose by Type Field on entries, when Title Field is Type"
	@priority = "4"
	test CanViewTypeOnFieldEntry {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153526",
			objectName = "CustomObject153526",
			pluralLabelName = "Custom Objects 153526");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject153526",
			type = "One to Many");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153526");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Account");

		CreateObject.selectTitleField(fieldLabel = "Type");

		CreateObject.saveObject();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153526");

		ObjectAdmin.addEntryOnRelationshipFieldViaUI(entryOption = "business");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153526");

		ObjectPortlet.viewEntry(entry = "business");
	}

	@description = "LPS-151765 - Verify if is possible to edit Title Field the System Object Account"
	@ignore = "Test Stub"
	@priority = "4"
	test EditTitleFieldOnSystemAccount {

		// TODO LPS-153519 EditTitleFieldOnSystemAccount pending implementation

	}

	@description = "LPS-151765 - Verify if the Widget option is disable on System Object Account"
	@ignore = "Test Stub"
	@priority = "4"
	test WidgetButtonDisabledByDefault {

		// TODO LPS-153531 WidgetButtonDisabledByDefault pending implementation

	}

}