@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-142175 - Verify it is possible to cancel importing an object"
	@ignore = "Test Stub"
	@priority = 4
	test CanCancelImport {
		ObjectAdmin.openObjectAdmin();

		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		MenuItem.click(menuItem = "Import");

		var filePath = TestCase.getDependenciesDirPath(fileName = "ImportedSimpleObject.json");

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});

		Button.clickCancel();

		AssertElementNotPresent(locator1 = "IFrame#MODAL_BODY");

		CreateObject.assertCustomObjectNotPresent(labelName = "Imported Simple Object");
	}

	@description = "LPS-142175 - Verify it is possible to clear the JSON file on the import dialog"
	@priority = 4
	test CanClearJsonFile {
		ObjectAdmin.openObjectAdmin();

		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		MenuItem.click(menuItem = "Import");

		var filePath = TestCase.getDependenciesDirPath(fileName = "ImportedSimpleObject.json");

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});

		Button.click(button = "Clear");

		AssertElementNotPresent(
			fieldName = "JSON File",
			locator1 = "ObjectAdmin#OBJECT_IMPORT_FIELDS",
			valueName = "ImportedSimpleObject.json");
	}

	@description = "LPS-142175 - Verify if it is possible to export the data structure from a custom objects"
	@priority = 5
	test CanExportDataStructure {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 146357",
			objectName = "CustomObject146357",
			pluralLabelName = "Custom Objects 146357");

		ObjectAdmin.openObjectAdmin();

		ObjectExportImport.exportObject(
			objectLabel = "Custom Object 146357",
			objectName = "CustomObject146357");
	}

	@description = "LPS-142175 - Verify it's possible to export an object with Actions"
	@priority = 4
	test CanExportObjectWithAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 184",
			objectName = "CustomObject184",
			pluralLabelName = "Custom Objects 184");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 184");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.openObjectAdmin();

		ObjectExportImport.exportObject(
			objectLabel = "Custom Object 184",
			objectName = "CustomObject184");
	}

	@description = "LPS-161893 - Verify that it's possible to export an object entry with aggregation field"
	@priority = 4
	test CanExportObjectWithAggregationField {
		task ("Given: A custom object with a self-relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161893",
				objectName = "CustomObject161893",
				pluralLabelName = "Custom Objects 161893");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161893",
				objectName_2 = "CustomObject161893",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161893");
		}

		task ("When: An Aggregation field is added to the custom object from the Fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161893");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "ID",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("Then: The custom object with a self-relationship and Aggregation field can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Custom Object 161893",
				objectName = "CustomObject161893");
		}
	}

	@description = "LPS-142175 - Verify it's possible to export imported object with custom views"
	@priority = 4
	test CanImportAndExportCustomViewsStructure {
		task ("When import object with custom views") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithCustomViews",
				objectName = "ImportedObjectWithCustomViews170541");

			CreateObject.assertCustomObject(labelName = "Imported Object With Custom Views");
		}

		task ("Then the imported object with custom views can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Imported Object With Custom Views",
				objectName = "ImportedObjectWithCustomViews");
		}
	}

	@description = "LPS-142175 - Verify it's possible to export imported object with state"
	@priority = 4
	test CanImportAndExportStateManagerStructure {
		task ("When import object with state") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithState",
				objectName = "ImportedObjectWithState170543");

			CreateObject.assertCustomObject(labelName = "Imported Object With State");
		}

		task ("Then the imported object with state can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Imported Object With State",
				objectName = "ImportedObjectWithState");
		}
	}

	@description = "LPS-142175 - Verify it's possible to export imported object with validation structure"
	@priority = 4
	test CanImportAndExportValidationStructure {
		task ("When import object with validation") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithValidation",
				objectName = "ImportedObjectWithValidation170542");

			CreateObject.assertCustomObject(labelName = "Imported Object With Validation");
		}

		task ("Then the imported object with validation can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Imported Object With Validation",
				objectName = "ImportedObjectWithValidation");
		}
	}

	@description = "LPS-142175 - Verify if it is possible to import the data structure to a custom objects"
	@priority = 5
	test CanImportDataStructure {
		property portal.acceptance = "true";

		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146358");

		CreateObject.assertCustomObject(labelName = "Imported Simple Object");
	}

	@description = "LPS-142175 - Verify it is possible to maintain Fields after importing an Object"
	@priority = 4
	test CanImportFields {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithField",
			objectName = "ImportedObjectWithField146361");

		CreateObject.assertCustomObject(labelName = "Imported Object With Field");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Field");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertObjectField(
			key_fieldLabel = "Custom Field",
			key_fieldType = "Text");
	}

	@description = "LPS-142175 - Verify it is possible to maintain Layouts after importing an Object"
	@priority = 4
	test CanImportLayouts {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithLayout",
			objectName = "ImportedObjectWithLayout146360");

		CreateObject.assertCustomObject(labelName = "Imported Object With Layout");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Layout");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.assertObjectLayout(layoutLabel = "Layout");
	}

	@description = "LPS-142175 - Verify it's possible to import object with Actions"
	@priority = 4
	test CanImportObjectWithAction {
		task ("When import object with action") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithAction",
				objectName = "ImportedObjectWithAction160652");
		}

		task ("Then assert the imported file is present") {
			CreateObject.assertCustomObject(labelName = "Imported Object With Action");
		}
	}

	@description = "LPS-142175 - Verify it is possible to import the same object more then one time"
	@priority = 4
	test CanImportSameObjectMoreThanOnce {
		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146367A");

		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146367B");

		CreateObject.assertCustomObjectWithIndex(
			index = 1,
			labelName = "Imported Simple Object");

		CreateObject.assertCustomObjectWithIndex(
			index = 2,
			labelName = "Imported Simple Object");
	}

	@description = "LPS-142175 - Verify it's possible to maintain Scope after importing an Object"
	@priority = 4
	test CanImportScope {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithScope",
			objectName = "ImportedObjectWithScope146370");

		CreateObject.assertCustomObject(labelName = "Imported Object With Scope");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Scope");

		AssertTextEquals(
			locator1 = "ObjectAdmin#SELECT_OBJECT_SCOPE",
			value1 = "Company");

		AssertTextEquals(
			locator1 = "CreateObject#PANEL_CATEGORY_KEY",
			value1 = "Control Panel > Object");
	}

	@description = "LPS-142175 - Verify it is not possible to maintain Relationships after importing an Object"
	@priority = 4
	test CannotImportRelationships {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithRelationship",
			objectName = "ImportedObjectWithRelationship146359");

		CreateObject.assertCustomObject(labelName = "Imported Object With Relationship");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Relationship");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-142175 - Verify it is possible to publish an imported custom object"
	@ignore = "Test Stub"
	@priority = 4
	test CanPublishImportedObject {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithField",
			objectName = "ImportedObjectWithField146365");

		CreateObject.assertCustomObject(labelName = "Imported Object With Field");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Field");

		PortletEntry.publish();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Imported Object With Field",
			status = "Approved");
	}

	@description = "LPS-142175 - Verify that an imported custom object is created with Draft Status"
	@priority = 4
	test ImportedObjectIsDraft {
		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146363");

		CreateObject.assertCustomObject(labelName = "Imported Simple Object");

		ObjectAdmin.assertObjectStatus(
			label = "Imported Simple Object",
			status = "Draft");
	}

}