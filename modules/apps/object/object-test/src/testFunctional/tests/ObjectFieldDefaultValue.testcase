@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-181207 - Verify it's not possible to apply the default value when updating an existing object entry"
	@priority = 3
	test CannotSetForExistingObjectEntry {
		property custom.properties = "feature.flag.LPS-163716=true";

		task ("Given a picklist with several items") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist 181207");

			for (var itemNumber : list "1,2,3,4,5") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${itemNumber},
					itemName = "Item Test ${itemNumber}",
					picklistName = "Custom Picklist 181207");
			}
		}

		task ("And given a custom object with a picklist field and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 181207",
				objectName = "CustomObject181207",
				pluralLabelName = "Custom Objects 181207");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Picklist Field",
				fieldName = "picklistField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181207",
				picklistName = "Custom Picklist 181207");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181207");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject181207");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject181207",
				value = "Entry Test");
		}

		task ("And given the default value is configured for the picklist field via Input as Value") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 181207");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Picklist Field");

			Click(locator1 = "ObjectAdmin#SIDEBAR_ADVANCED_TAB");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use Default Value",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Click(
				key_optionDefaulValue = "Input as Value",
				locator1 = "ObjectAdmin#PICKLIST_INPUT_AS_VALUE_OR_EXPRESSION");

			Click(locator1 = "ObjectAdmin#DROPDOWN_DEFAULT_VALUE");

			Click(
				key_dropdownItem = "Item Test 1",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			Button.clickSave();
		}

		task ("When the existing object entry is edited") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject181207");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectPortlet.typeCustomField(
				customField = "Custom Field",
				entry = "Edited Entry");

			Button.clickSave();
		}

		task ("Then the default value isn't applied") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject181207");

			AssertElementNotPresent(
				key_entry = "Item Test 1",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-181204 - Verify updating the default value configuration for the Picklist field only affects new object entries"
	@priority = 4
	test CanOnlyAffectNewEntriesByUpdatingConfiguration {
		property custom.properties = "feature.flag.LPS-163716=true";

		task ("Given a picklist with two items") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist 181204");

			for (var itemNumber : list "1,2") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${itemNumber},
					itemName = "Item Test ${itemNumber}",
					picklistName = "Custom Picklist 181204");
			}
		}

		task ("And given a Custom Object with a picklist field that has the default value with item 1") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 181204",
				objectName = "CustomObject181204",
				pluralLabelName = "Custom Objects 181204");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Picklist Field",
				fieldName = "picklistField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181204",
				picklistName = "Custom Picklist 181204");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181204");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject181204");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 181204");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Picklist Field");

			Click(locator1 = "ObjectAdmin#SIDEBAR_ADVANCED_TAB");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use Default Value",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Click(
				key_optionDefaulValue = "Input as Value",
				locator1 = "ObjectAdmin#PICKLIST_INPUT_AS_VALUE_OR_EXPRESSION");

			Click(locator1 = "ObjectAdmin#DROPDOWN_DEFAULT_VALUE");

			Click(
				key_dropdownItem = "Item Test 1",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			Button.clickSave();
		}

		task ("And given an object entry with a default value saved") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject181204",
				value = "Entry Test");
		}

		task ("When the default value configuration is updated to Input as Value with item 2") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 181204");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Picklist Field");

			Click(locator1 = "ObjectAdmin#SIDEBAR_ADVANCED_TAB");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use Default Value",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Click(
				key_optionDefaulValue = "Input as Value",
				locator1 = "ObjectAdmin#PICKLIST_INPUT_AS_VALUE_OR_EXPRESSION");

			Click(locator1 = "ObjectAdmin#DROPDOWN_DEFAULT_VALUE");

			Click(
				key_dropdownItem = "Item Test 2",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			Button.clickSave();
		}

		task ("Then the default value is only applied to new object entries") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject181204");

			ObjectPortlet.viewEntry(entry = "Item Test 1");

			AssertElementNotPresent(
				key_entry = "Item Test 2",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "New Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject181204");

			ObjectPortlet.viewEntry(entry = "Item Test 1");
		}
	}

	@description = "LPS-163716 - Verify it's possible to create an object entry with the Picklist default value set via Expression Builder"
	@priority = 5
	test CanSetPicklistViaExpressionBuilder {
		property custom.properties = "feature.flag.LPS-163716=true";
		property portal.acceptance = "true";

		task ("Given a picklist with several items") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			for (var itemNumber : list "1,2,3,4,5") {
				Picklist.addPicklistItemViaAPI(
					itemKey = "picklistItem${itemNumber}",
					itemName = "Picklist Item ${itemNumber}",
					picklistName = "Custom Picklist");
			}
		}

		task ("And given a custom object with a text field and a picklist field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 181203",
				objectName = "CustomObject181203",
				pluralLabelName = "Custom Objects 181203");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Field Picklist",
				fieldName = "fieldPicklist",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181203",
				picklistName = "Custom Picklist");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181203");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject181203");
		}

		task ("And given the default value is set via Expression Builder") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 181203");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Field Picklist");

			Click(locator1 = "ObjectAdmin#SIDEBAR_ADVANCED_TAB");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use Default Value",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Click(
				key_optionDefaulValue = "Expression Builder",
				locator1 = "ObjectAdmin#PICKLIST_INPUT_AS_VALUE_OR_EXPRESSION");

			Type(
				key_text = "Default Value",
				locator1 = "TextInput#ANY",
				value1 = "customField");

			CreateObject.saveObject();
		}

		task ("And given a layout that contains only the text field") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject181203");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			CreateObject.saveObject();
		}

		task ("When creating an object entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject181203",
				value = "picklistItem1");
		}

		task ("Then the default value is seen and the object entry is created with the default value") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject181203");

			ObjectPortlet.viewEntry(entry = "Picklist Item 1");
		}
	}

	@description = "LPS-163716 - Verify it's possible to create an object entry with the Picklist default value set via Input as Value"
	@priority = 5
	test CanSetPicklistViaInputAsValue {
		property custom.properties = "feature.flag.LPS-163716=true";
		property portal.acceptance = "true";

		task ("Given a picklist with several items") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			for (var itemNumber : list "1,2,3,4,5") {
				Picklist.addPicklistItemViaAPI(
					itemKey = "picklistItem${itemNumber}",
					itemName = "Picklist Item ${itemNumber}",
					picklistName = "Custom Picklist");
			}
		}

		task ("And given a custom object with a picklist field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 181202",
				objectName = "CustomObject181202",
				pluralLabelName = "Custom Objects 181202");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Field Picklist",
				fieldName = "fieldPicklist",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject181202",
				picklistName = "Custom Picklist");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject181202");
		}

		task ("And given the default value is set via Input As Value") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 181202");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Field Picklist");

			Click(locator1 = "ObjectAdmin#SIDEBAR_ADVANCED_TAB");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use Default Value",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Click(locator1 = "ObjectAdmin#DROPDOWN_DEFAULT_VALUE");

			Click(
				key_dropdownItem = "Picklist Item 1",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			PortletEntry.save();
		}

		task ("When creating an object entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject181202");

			LexiconEntry.gotoAdd();

			PortletEntry.save();
		}

		task ("Then the default value is seen and the object entry is created with the default value") {
			Navigator.gotoBack();

			ObjectPortlet.viewEntry(entry = "Picklist Item 1");
		}
	}

}