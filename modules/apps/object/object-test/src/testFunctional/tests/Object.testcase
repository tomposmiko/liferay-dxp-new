@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135406 - Verify it is the user is able to delete a relationship of object native"
	@priority = "4"
	test CanDeleteRelationshipFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151498",
			objectName = "CustomObject151498",
			pluralLabelName = "Custom Objects 151498");

		for (var systemObjects : list "Account,Commerce Product,Commerce Product Group,Commerce Order,User") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "${systemObjects}");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "CustomObject151498",
				type = "One to Many");

			Refresh();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "Relationship",
				relationshipName = "relationship");

			ObjectAdmin.assertObjectRelationshipNotPresent(relationshipLabel = "Relationship");
		}
	}

	@description = "LPS-135406 - Verify it is not possible to delete native fields of objects native"
	@priority = "4"
	test CannotDeleteFieldsFromNativeObjects {
		for (var systemObjects : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "${systemObjects}");

			ObjectAdmin.goToFieldsTab();

			AssertNotVisible(locator1 = "Icon#DELETE");
		}
	}

	@description = "LPS-135406 - Verify it is not possible to delete a relationship field of custom object from a native object"
	@priority = "4"
	test CannotDeleteReleationshipFieldFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151500",
			objectName = "CustomObject151500",
			pluralLabelName = "Custom Objects 151500");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151500",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151500");

		ObjectAdmin.goToFieldsTab();

		AssertNotVisible(locator1 = "Icon#DELETE");
	}

	@description = "LPS-135406 - Verify it is possible to update the label of relationship field of custom object from a native object"
	@priority = "4"
	test CanUpdateRelationshipFieldLabelFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151501",
			objectName = "CustomObject151501",
			pluralLabelName = "Custom Objects 151501");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151501",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151501");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Relationship");

		CreateObject.editLabel(labelName = "New Relationship");

		Button.clickSave();

		Refresh();

		AssertElementPresent(
			key_label = "New Relationship",
			locator1 = "ObjectAdmin#SELECT_OBJECT_FIELD");
	}

	@description = "LPS-135406 - Verify it is possible to update the label of relationship of native object"
	@priority = "4"
	test CanUpdateRelationshipLavelFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151499",
			objectName = "CustomObject151499",
			pluralLabelName = "Custom Objects 151499");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151499",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.goToRelationshipsDetails(fieldName = "Relationship");

		CreateObject.editLabel(labelName = "New Relationship");

		Button.clickSave();

		Refresh();

		AssertElementPresent(
			key_name = "New Relationship",
			locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");
	}

}