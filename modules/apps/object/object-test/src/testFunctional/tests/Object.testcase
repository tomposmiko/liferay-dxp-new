@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-150886 - Verify that it's possible to delete an object after deleting the relationship"
	@priority = "4"
	test CanDeleteCustomObjectAfterDeleteRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject290",
			objectName_2 = "User",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		Click(
			key_objectLabel = "Custom Object 290",
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		ObjectAdmin.assertCannotDeleteObjectWithRelationshipErrorMessage();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Custom Object 290");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.deleteRelationshipViaUI(
			relationshipLabel = "Relationship",
			relationshipName = "relationship");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.deleteCustomObjectViaUI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290");

		AssertElementNotPresent(
			locator1 = "ObjectAdmin#OBJECT_LABEL",
			value1 = "Custom Object 290");
	}

	@description = "LPS-150886 - Verify that it's possible to delete a published object"
	@priority = "5"
	test CanDeletePublishedCustomObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object 290",
			status = "Approved");

		ObjectAdmin.deleteObjectEntryViaUI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290");

		AssertElementNotPresent(
			locator1 = "ObjectAdmin#OBJECT_LABEL",
			value1 = "Custom Object 290");
	}

	@description = "LPS-135406 - Verify it is the user is able to delete a relationship of object native"
	@priority = "4"
	test CanDeleteRelationshipFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151498",
			objectName = "CustomObject151498",
			pluralLabelName = "Custom Objects 151498");

		for (var systemObjects : list "Account,Commerce Product,Commerce Product Group,Commerce Order,User") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "${systemObjects}");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "Custom Object 151498",
				type = "One to Many");

			Refresh();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "Relationship",
				relationshipName = "relationship");

			ObjectAdmin.assertObjectRelationshipNotPresent(relationshipLabel = "Relationship");
		}
	}

	@description = "LPS-150886 - Verify that it's not possible to delete an object that has a relationship"
	@priority = "5"
	test CannotDeleteCustomObjectWithRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject290",
			objectName_2 = "User",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		Click(
			key_objectLabel = "Custom Object 290",
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		ObjectAdmin.assertCannotDeleteObjectWithRelationshipErrorMessage();
	}

	@description = "LPS-135406 - Verify it is not possible to delete native fields of objects native"
	@priority = "4"
	test CannotDeleteFieldsFromNativeObjects {
		for (var systemObjects : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "${systemObjects}");

			ObjectAdmin.goToFieldsTab();

			AssertNotVisible(locator1 = "Icon#DELETE");
		}
	}

	@description = "LPS-135406 - Verify it is not possible to delete a relationship field of custom object from a native object"
	@priority = "4"
	test CannotDeleteReleationshipFieldFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151500",
			objectName = "CustomObject151500",
			pluralLabelName = "Custom Objects 151500");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151500",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151500");

		ObjectAdmin.goToFieldsTab();

		AssertNotVisible(locator1 = "Icon#DELETE");
	}

	@description = "LPS-150886 - Verify that the custom object label cannot be used to confirm the deletion"
	@priority = "5"
	test CannotUseObjectLabelAsConfirmation {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290 Test",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		Click(
			key_objectLabel = "Custom Object 290 Test",
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		Type(
			locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_OBJECT",
			value1 = "Custom Object 290 Test");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_MODAL_CONTENT",
			value1 = "Input does not match");
	}

	@description = "LPS-135406 - Verify it is possible to update the label of relationship field of custom object from a native object"
	@priority = "4"
	test CanUpdateRelationshipFieldLabelFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151501",
			objectName = "CustomObject151501",
			pluralLabelName = "Custom Objects 151501");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151501",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151501");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Relationship");

		CreateObject.editLabel(labelName = "New Relationship");

		Button.clickSave();

		Refresh();

		AssertElementPresent(
			key_label = "New Relationship",
			locator1 = "ObjectAdmin#SELECT_OBJECT_FIELD");
	}

	@description = "LPS-135406 - Verify it is possible to update the label of relationship of native object"
	@priority = "4"
	test CanUpdateRelationshipLavelFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151499",
			objectName = "CustomObject151499",
			pluralLabelName = "Custom Objects 151499");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151499",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.goToRelationshipsDetails(fieldName = "Relationship");

		CreateObject.editLabel(labelName = "New Relationship");

		Button.clickSave();

		Refresh();

		AssertElementPresent(
			key_name = "New Relationship",
			locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");
	}

	@description = "Verify that it's possible to view the custom object after restarting portal"
	@priority = "5"
	test CanViewObjectAfterRestart {
		property portal.acceptance = "true";

		task ("Create Custom Object, Custom Field and publish (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 163066",
				objectName = "CustomObject163066",
				pluralLabelName = "Custom Objects 163066");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject163066");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject163066");
		}

		task ("Go to Custom Object and change the panel category key") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 163066");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

			ObjectAdmin.saveCustomObject();
		}

		task ("Create an Entry (via API)") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject163066",
				value = "Entry Test");
		}

		task ("Restart portal") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Login portal") {
			User.firstLoginPG();
		}

		task ("Assert the Custom Object is present in Object Admin") {
			ObjectAdmin.openObjectAdmin();

			CreateObject.assertCustomObject(labelName = "Custom Object 163066");
		}

		task ("Assert the Custom Object is present on the application menu and go to it") {
			Navigator.openURL();

			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Control Panel");

			AssertElementPresent(
				key_category = "Users",
				key_portlet = "Custom Objects 163066",
				locator1 = "ApplicationsMenu#PORTLET");

			ApplicationsMenuHelper.gotoPortlet(
				category = "Users",
				portlet = "Custom Objects 163066");
		}

		task ("Assert that entry is present") {
			ObjectPortlet.viewEntry(entry = "Entry Test");
		}
	}

	@description = "LPS-150886 - Verify that the delete modal contains a warning message with the number of entries that will be deleted"
	@priority = "4"
	test CanViewWarningMessageDeleteModal {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject290",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.openObjectAdmin();

		Click(
			key_objectLabel = "Custom Object 290",
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Delete Object Definition");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "has 2 object entries.");
	}

}