@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-150886 - Verify that it's possible to delete an object after deleting the relationship"
	@priority = 4
	test CanDeleteCustomObjectAfterDeleteRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject290",
			objectName_2 = "User",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 290");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		ObjectAdmin.assertCannotDeleteObjectWithRelationshipErrorMessage();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectSystemObject(label = "Custom Object 290");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.deleteRelationshipViaUI(
			relationshipLabel = "Relationship",
			relationshipName = "relationship");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.deleteCustomObjectViaUI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290");

		AssertElementNotPresent(
			locator1 = "ObjectAdmin#OBJECT_LABEL",
			value1 = "Custom Object 290");
	}

	@description = "LPS-150886 - Verify that it's possible to delete a published object"
	@priority = 5
	test CanDeletePublishedCustomObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object 290",
			status = "Approved");

		ObjectAdmin.deleteObjectEntryViaUI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290");

		AssertElementNotPresent(
			locator1 = "ObjectAdmin#OBJECT_LABEL",
			value1 = "Custom Object 290");
	}

	@description = "LPS-135406 - Verify it is the user is able to delete a relationship of object native"
	@priority = 4
	test CanDeleteRelationshipFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151498",
			objectName = "CustomObject151498",
			pluralLabelName = "Custom Objects 151498");

		for (var systemObjects : list "Account,Commerce Product,Commerce Product Group,Commerce Order,User") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = ${systemObjects});

			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.addObjectRelationshipViaUI(
				label = "Relationship",
				object = "Custom Object 151498",
				type = "One to Many");

			Refresh();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "Relationship",
				relationshipName = "relationship");

			AssertElementNotPresent(
				key_label = "Relationship",
				locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
		}
	}

	@description = "LPS-158615 - Verify that it's possible to filter object entries by API"
	@priority = 4
	test CanFilterObjectEntriesViaAPI {
		task ("Given a custom object with a text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 158615",
				objectName = "CustomObject158615",
				pluralLabelName = "Custom Objects 158615");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Food",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject158615");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject158615");
		}

		task ("When entries are added to the object") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject158615",
				value = "Apple");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject158615",
				value = "Apple Sauce");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject158615",
				value = "Banana");
		}

		task ("Then the object's entries can be filtered") {
			ObjectAdmin.filterObjectEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject158615",
				value = "Apple");
		}
	}

	@description = "LPS-150886 - Verify that it's not possible to delete an object that has a relationship"
	@priority = 5
	test CannotDeleteCustomObjectWithRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject290",
			objectName_2 = "User",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 290");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		ObjectAdmin.assertCannotDeleteObjectWithRelationshipErrorMessage();
	}

	@description = "LPS-135406 - Verify it is not possible to delete native fields of objects native"
	@priority = 4
	test CannotDeleteFieldsFromNativeObjects {
		for (var systemObjects : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = ${systemObjects});

			ObjectAdmin.goToFieldsTab();

			AssertNotVisible(locator1 = "Icon#DELETE");
		}
	}

	@description = "LPS-135406 - Verify it is not possible to delete a relationship field of custom object from a native object"
	@priority = 4
	test CannotDeleteReleationshipFieldFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151500",
			objectName = "CustomObject151500",
			pluralLabelName = "Custom Objects 151500");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151500",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151500");

		ObjectAdmin.goToFieldsTab();

		AssertNotVisible(locator1 = "Icon#DELETE");
	}

	@description = "LPS-150886 - Verify that the custom object label cannot be used to confirm the deletion"
	@priority = 5
	test CannotUseObjectLabelAsConfirmation {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290 Test",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		ObjectAdmin.openObjectAdmin();

		CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 290 Test");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		Type(
			locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_OBJECT",
			value1 = "Custom Object 290 Test");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_MODAL_CONTENT",
			value1 = "Input does not match");
	}

	@description = "Verify it's possible to search object entries by API"
	@priority = 4
	test CanSearchObjectEntriesViaAPI {
		task ("Given: An custom object with a text field and three object entries") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 163069",
				objectName = "CustomObject163069",
				pluralLabelName = "Custom Objects 163069");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject163069");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject163069");

			var entryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject163069",
				value = "EntryA");

			for (var letter : list "B,C") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject163069",
					value = "Entry${letter}");
			}
		}

		task ("When: An object entry is searched for using the API") {
			var entrySearchId = JSONObject.getObjectSearchEntry(
				objectName = "CustomObject163069",
				searchString = "EntryA");
		}

		task ("Then: one object entry is returned based on the search parameter") {
			TestUtils.assertEquals(
				actual = ${entrySearchId},
				expected = ${entryId});
		}
	}

	@description = "Verify it's possible to sort object entries by API"
	@priority = 4
	test CanSortObjectEntriesViaAPI {
		task ("Given: An custom object with a text field and three object entries") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 158616",
				objectName = "CustomObject158616",
				pluralLabelName = "Custom Objects 158616");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject158616");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject158616");

			for (var letter : list "C,Z,A") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject158616",
					value = "Entry${letter}");
			}
		}

		task ("When: The object entries are sorted using the API") {
			var entrySortValue = ObjectAdmin.getObjectSortedEntry(
				objectName = "CustomObject158616",
				sortString = "customObjectField");
		}

		task ("Then: The object entries are returned in alphabetical order") {
			TestUtils.assertEquals(
				actual = ${entrySortValue},
				expected = "EntryA,EntryC,EntryZ");
		}
	}

	@description = "Verify it is possible to update Custom Object when changing the localization on Instance Settings"
	@priority = 4
	test CanUpdateCustomObjectWhenChangeLocalization {
		task ("Given: An object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 179102",
				objectName = "CustomObject179102",
				pluralLabelName = "Custom Objects 179102");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject179102");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject179102");
		}

		task ("And given: The default language in the virtual instance changed") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureCurrentLanguagesCP(defaultPortalLanguage = "Portuguese (Brazil)");
		}

		task ("When: The label on the custom object is edited") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 179102");

			CreateObject.editLabel(labelName = "Objeto Personalizado 179102");

			CreateObject.saveObject();
		}

		task ("Then: The label is updated successfully") {
			AssertTextEquals(
				locator1 = "CreateObject#OBJECT_LABEL",
				value1 = "Objeto Personalizado 179102");
		}
	}

	@description = "LPS-135406 - Verify it is possible to update the label of relationship field of custom object from a native object"
	@priority = 4
	test CanUpdateRelationshipFieldLabelFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151501",
			objectName = "CustomObject151501",
			pluralLabelName = "Custom Objects 151501");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151501",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151501");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Relationship");

		CreateObject.editLabel(labelName = "New Relationship");

		PortletEntry.save();

		Refresh();

		AssertElementPresent(
			key_label = "New Relationship",
			locator1 = "ObjectAdmin#SELECT_OBJECT_FIELD");
	}

	@description = "LPS-135406 - Verify it is possible to update the label of relationship of native object"
	@priority = 4
	test CanUpdateRelationshipLavelFromNativeObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151499",
			objectName = "CustomObject151499",
			pluralLabelName = "Custom Objects 151499");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "User",
			objectName_2 = "CustomObject151499",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.goToRelationshipsDetails(fieldName = "Relationship");

		CreateObject.editLabel(labelName = "New Relationship");

		PortletEntry.save();

		Refresh();

		AssertElementPresent(
			key_name = "New Relationship",
			locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");
	}

	@description = "LPS-162024 - Verify that an error message is shown when the user enters the wrong value in the confirmation field"
	@priority = 4
	test CanViewErrorMessageWithIncorrectValue {
		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162024",
				objectName = "CustomObject162024",
				pluralLabelName = "Custom Objects 162024");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162024");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162024");
		}

		task ("When the user enters an incorrect value in the confirmation field while deleting the object") {
			ObjectAdmin.openObjectAdmin();

			CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 162024");

			SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

			Type(
				locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_OBJECT",
				value1 = "anyone");
		}

		task ("Then an error message is shown") {
			AssertElementPresent(locator1 = "Message#WARNING_FEEDBACK");
		}
	}

	@description = "Verify that it's possible to view the custom object after restarting portal"
	@priority = 5
	test CanViewObjectAfterRestart {
		property portal.acceptance = "true";

		task ("Create Custom Object, Custom Field and publish (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 163066",
				objectName = "CustomObject163066",
				pluralLabelName = "Custom Objects 163066");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject163066");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject163066");
		}

		task ("Go to Custom Object and change the panel category key") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 163066");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

			Button.clickSave();
		}

		task ("Create an Entry (via API)") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject163066",
				value = "Entry Test");
		}

		task ("Restart portal") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Login portal") {
			User.firstLoginPG();
		}

		task ("Assert the Custom Object is present in Object Admin") {
			ObjectAdmin.openObjectAdmin();

			AssertElementPresent(
				key_labelName = "Custom Object 163066",
				locator1 = "CreateObject#OBJECT_NAME");
		}

		task ("Assert the Custom Object is present on the application menu and go to it") {
			Navigator.openURL();

			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Control Panel");

			AssertElementPresent(
				key_category = "Users",
				key_portlet = "Custom Objects 163066",
				locator1 = "ApplicationsMenu#PORTLET");

			ApplicationsMenuHelper.gotoPortlet(
				category = "Users",
				portlet = "Custom Objects 163066");
		}

		task ("Assert that entry is present") {
			ObjectPortlet.viewEntry(entry = "Entry Test");
		}
	}

	@description = "Verify it is possible to add an Object Entry Title Field when changing the localization on Instance Settings"
	@priority = 4
	test CanViewTitleFieldWhenChangeLocalization {
		task ("Given: An Account and a Custom Object with a Relationship 1toM of Account to Custom Object") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 178761",
				objectName = "CustomObject178761",
				pluralLabelName = "Custom Objects 178761");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "AccountEntry",
				objectName_2 = "CustomObject178761",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");
		}

		task ("And given: The default language in the virtual instance changed") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureCurrentLanguagesCP(defaultPortalLanguage = "Portuguese (Brazil)");
		}

		task ("And given: A title field in the System Object is changed and the Custom Object is published") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Account");

			CreateObject.selectTitleField(fieldLabel = "Type");

			CreateObject.saveObject();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178761");
		}

		task ("When: Create an entry using the title field selected") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178761");

			LexiconEntry.gotoAdd();

			ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "business");

			Button.clickSave();
		}

		task ("Then: The title field of System Object is present") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178761");

			WaitForElementPresent(
				key_entry = "business",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			ObjectPortlet.viewEntry(entry = "business");
		}
	}

	@description = "LPS-150886 - Verify that the delete modal contains a warning message with the number of entries that will be deleted"
	@priority = 4
	test CanViewWarningMessageDeleteModal {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 290",
			objectName = "CustomObject290",
			pluralLabelName = "Custom Objects 290");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject290");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject290");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject290",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.openObjectAdmin();

		CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 290");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Delete Object Definition");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "has 2 object entries.");
	}

}