@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-165850 - Verify it's possible to add a new entry in the related object without leaving the current context (OneToMany)"
	@priority = 5
	test CanAddEntryOnRelationshipTabFor1toM {
		property portal.acceptance = "true";

		task ("Given a related object with Custom Layout and Relationship tab (One to Many)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171590",
				objectName = "CustomObject171590",
				pluralLabelName = "Custom Objects 171590");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject171590");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject171590",
				objectName_2 = "CustomObject171590",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171590",
				objectName = "CustomObject171590");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171590");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 171590");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171590");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("When add the entry on Relationship tab") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject171590",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject171590");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectCustomLayouts.addEntryOnRelationshipTab(newEntry = "New entry related");
		}

		task ("Then the new entry shows on the screen and is saved on the Relationship Tab") {
			WaitForElementPresent(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "New entry related");

			Navigator.gotoBack();

			WaitForPageLoad();

			AssertElementPresent(
				key_fieldLabel = "New entry related",
				locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject171590");

			ObjectPortlet.viewEntry(entry = "New entry related");
		}
	}

	@description = "LPS-165850 - Verify it's possible to add a new entry in the related object without leaving the current context (ManyToMany)"
	@priority = 5
	test CanAddEntryOnRelationshipTabForMtoM {
		property portal.acceptance = "true";

		task ("Given a related object with Custom Layout and Relationship tab (Many to Many)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171597",
				objectName = "CustomObject171597",
				pluralLabelName = "Custom Objects 171597");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject171597");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject171597",
				objectName_2 = "CustomObject171597",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171597",
				objectName = "CustomObject171597");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171597");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 171597");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171597");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			for (var letter : list "Parent,Child") {
				ObjectAdmin.addTabRelationshipsOnLayout(
					relationshipsLabelName = "Relationship",
					tabName = "Relationship Tab ${letter}");
			}

			PortletEntry.save();
		}

		task ("When add the entry on Relationship tab") {
			for (var letter : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject171597",
					value = "Entry Test ${letter}");
			}

			ObjectAdmin.goToCustomObject(objectName = "CustomObject171597");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test A");

			Click(
				key_tabName = "Relationship Tab Parent",
				locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");

			ObjectCustomLayouts.addEntryOnRelationshipTab(selectEntry = "Entry Test B");
		}

		task ("Then the new entry is saved on the Relationship Tab Parent and the entry is present on Relationship Tab Child") {
			AssertElementPresent(
				key_fieldLabel = "Entry Test B",
				locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject171597");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test B");

			Click(
				key_tabName = "Relationship Tab Child",
				locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");

			AssertElementPresent(
				key_fieldLabel = "Entry Test A",
				locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");
		}
	}

	@description = "LPS-168228 - Verify it's possible to add many custom fields in the custom layout"
	@priority = 4
	test CanAddManyFieldsOnLayout {
		task ("Given an object with 20 fields is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 168228",
				objectName = "CustomObject168228",
				pluralLabelName = "Custom Objects 168228");

			for (var n : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Field${n}",
					fieldName = "customField${n}",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject168228");
			}
		}

		task ("And given a layout is created with all custom fields added") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject168228");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 168228");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field1,Custom Field2,Custom Field3,Custom Field4,Custom Field5,Custom Field6,Custom Field7,Custom Field8,Custom Field9,Custom Field10,Custom Field11,Custom Field12,Custom Field13,Custom Field14,Custom Field15,Custom Field16,Custom Field17,Custom Field18,Custom Field19,Custom Field20",
				tabName = "Field Tab");

			PortletEntry.save();
		}

		task ("When the Object is published and entries are added in all fields") {
			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject168228");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject168228");

			LexiconEntry.gotoAdd();

			for (var k : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20") {
				Type.type(
					key_customField = "Custom Field${k}",
					locator1 = "ObjectPortlet#ENTRY_FIELD_GENERIC",
					value1 = "Can Add Many Fields On Layout${k}");
			}

			PortletEntry.save();
		}

		task ("Then all the entries of the custom fields are added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject168228");

			for (var j : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20") {
				ObjectPortlet.viewEntry(entry = "Can Add Many Fields On Layout${j}");
			}
		}
	}

	@description = "LPS-165850 - Verify it's possible to cancel a new entry"
	@priority = 3
	test CanCancelNewEntryOnRelationshipTab {
		task ("Given a related object with Custom Layout and Relationship tab") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171629",
				objectName = "CustomObject171629",
				pluralLabelName = "Custom Objects 171629");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject171629");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject171629",
				objectName_2 = "CustomObject171629",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171629",
				objectName = "CustomObject171629");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171629");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 171629");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171629");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject171629",
				value = "Entry Test");
		}

		task ("When a user cancels a new entry on the Relationship Tab") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject171629");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.gotoRelationshipsTab();

			LexiconEntry.gotoAdd();

			Click(
				key_kebabOption = "Create New",
				locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");

			Type.type(
				locator1 = "ObjectPortlet#ADD_OBJECT_ENTRY",
				value1 = "Entry Test");

			Button.clickCancel();
		}

		task ("Then that entry is not present on the relationship tab") {
			AssertElementNotPresent(
				key_fieldLabel = "Entry Test",
				locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");

			ObjectAdmin.assertNoResultsWereFound();
		}
	}

	@description = "LPS-161884 - Verify that it's possible to create an object with a categorization section in the layout"
	@priority = 3
	test CanCreateObjectWithCategorizationSection {
		property test.name.skip.portal.instance = "ObjectCustomLayouts#CanCreateObjectWithCategorizationSection";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 200",
			objectName = "CustomObject200",
			pluralLabelName = "Custom Objects 200");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject200");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject200");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 200");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = 1,
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		ObjectAdmin.addCategorizationOnLayoutTab();

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject200");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject200");

		LexiconEntry.gotoAdd();

		ObjectAdmin.viewCategorizationInObjectEntry();
	}

	@description = "LPS-161886 - Verify that it's possible to delete a categorization section"
	@priority = 3
	test CanDeleteCategorizationSection {
		property test.name.skip.portal.instance = "ObjectCustomLayouts#CanDeleteCategorizationSection";

		task ("Given: An object with the layout categorization section") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 200",
				objectName = "CustomObject200",
				pluralLabelName = "Custom Objects 200");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject200");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject200");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 200");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addCategorizationOnLayoutTab();

			PortletEntry.save();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject200");
		}

		task ("When: Delete the categorization Section") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 200");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.deleteCategorizationViaUI();

			PortletEntry.save();
		}

		task ("Then: The object layout is updated successfully") {
			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.goToLayoutTabOnLayouts();

			AssertElementNotPresent(locator1 = "ObjectAdmin#CATEGORIZATION_DROPDOWN");
		}
	}

	@description = "LPS-165850 - Verify when a new entry is created, it is possible to delete this entry"
	@priority = 4
	test CanDeleteNewEntryAddedOnRelationshipTab {
		task ("Given a related object with Custom Layout and Relationship tab") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171632",
				objectName = "CustomObject171632",
				pluralLabelName = "Custom Objects 171632");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject171632");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject171632",
				objectName_2 = "CustomObject171632",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171632",
				objectName = "CustomObject171632");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171632");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 171632");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171632");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("And given an entry with a relationship in the Relationship Tab") {
			for (var letter : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject171632",
					value = "Entry Test ${letter}");
			}

			ObjectAdmin.goToCustomObject(objectName = "CustomObject171632");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test A");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectCustomLayouts.addEntryOnRelationshipTab(selectEntry = "Entry Test B");
		}

		task ("When delete the entry on Relationship Tab") {
			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "Delete",
				objectLabel = "Entry Test B");
		}

		task ("Then the entry is no longer present") {
			AssertElementNotPresent(
				key_fieldLabel = "Entry Test B",
				locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");
		}
	}

	@description = "LPS-161885 - Verify that it's possible to edit a categorization section"
	@priority = 3
	test CanEditCategorizationSection {
		property test.name.skip.portal.instance = "ObjectCustomLayouts#CanEditCategorizationSection";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 200",
			objectName = "CustomObject200",
			pluralLabelName = "Custom Objects 200");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject200");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject200");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 200");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = 1,
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		ObjectAdmin.addCategorizationOnLayoutTab();

		PortletEntry.save();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject200");

		Navigator.openURL();

		JSONCategory.addCategory(
			groupName = "Global",
			title = "Category 1",
			vocabularyName = "Topic");

		JSONCategory.addCategory(
			groupName = "Global",
			title = "Category 2",
			vocabularyName = "Stage");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject200");

		LexiconEntry.gotoAdd();

		ObjectAdmin.selectCategoryInObjectEntry(
			categoryNameList = "Category 1",
			vocabularyName = "Topic");

		ObjectAdmin.selectCategoryInObjectEntry(
			categoryNameList = "Category 2",
			vocabularyName = "Stage");

		PortletEntry.save();

		Refresh();

		AssetCategorization.removeCategories(categoryNameList = "Category 1,Category 2");
	}

	@description = "LPS-165850 - Verify the user can edit the entry when there is permission to edit"
	@priority = 5
	test CanEditEntryWhenAllowedToEdit {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectCustomLayouts#CanEditEntryWhenAllowedToEdit";

		task ("Given a related object with Custom Layout and Relationship tab") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171630",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171630");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("When add user with update/view permission") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.addRegularRole(roleTitle = "Regular Role");

			var objectId = JSONObject.getObjectId(objectName = "CustomObject");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet_${objectId}",
				roleTitle = "Regular Role",
				roleType = "regular");

			for (var resourceActionIndex : list "VIEW,UPDATE") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.object.model.ObjectDefinition#${objectId}",
					roleTitle = "Regular Role",
					roleType = "regular");
			}

			JSONRole.assignRoleToUser(
				roleTitle = "Regular Role",
				userEmailAddress = "userea@liferay.com");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectCustomLayouts.addEntryOnRelationshipTab(newEntry = "New entry related");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Then the user can edit an entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectPortlet.updateEntry(
				entry = "New entry related",
				updateEntry = "Entry Updated");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Updated");
		}
	}

	@description = "LPS-165850 - Verify user cannot edit an entry without permissions"
	@priority = 5
	test CannotEditEntryWhenNotAllowedToEdit {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectCustomLayouts#CannotEditEntryWhenNotAllowedToEdit";

		task ("Given a related object with Custom Layout and Relationship tab") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171631",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171631");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("When add user without update permission") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.addRegularRole(roleTitle = "Regular Role");

			var objectId = JSONObject.getObjectId(objectName = "CustomObject");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet_${objectId}",
				roleTitle = "Regular Role",
				roleType = "regular");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.object.model.ObjectDefinition#${objectId}",
				roleTitle = "Regular Role",
				roleType = "regular");

			JSONRole.assignRoleToUser(
				roleTitle = "Regular Role",
				userEmailAddress = "userea@liferay.com");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectCustomLayouts.addEntryOnRelationshipTab(newEntry = "New entry related");
		}

		task ("Then the user cannot edit an entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.viewFieldValueDisabled(fieldValue = "Entry Test");

			AssertElementNotPresent(locator1 = "Button#SAVE");

			ObjectAdmin.gotoRelationshipsTab();

			ObjectPortlet.viewEntryDetails(entry = "New entry related");

			ObjectAdmin.viewFieldValueDisabled(fieldValue = "New entry related");

			AssertElementNotPresent(locator1 = "Button#SAVE");
		}
	}

	@description = "LPS-135397 - Verify that it is not possible to save another Layout as default"
	@priority = 4
	test CannotSaveAnotherLayoutAsDefault {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 200",
			objectName = "CustomObject200",
			pluralLabelName = "Custom Objects 200");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject200");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout ${letter}",
				objectName = "CustomObject200");
		}

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 200");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectSpecificKebabMenuOption(
			kebabOption = "View",
			objectLabel = "Layout A");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = 1,
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		PortletEntry.save();

		Refresh();

		ObjectAdmin.selectSpecificKebabMenuOption(
			kebabOption = "View",
			objectLabel = "Layout B");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 2",
			columnsNumber = 1,
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "Button#SAVE");

		SelectFrame(locator1 = "Message#ERROR");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "There can only be one default object layout");
	}

	@description = "LPS-165850 - Verify if you can 'select existing one' and add existing entries"
	@priority = 5
	test CanSelectExistingEntriesOnRelationshipTab {
		property portal.acceptance = "true";

		task ("Given a related object with Custom Layout and Relationship tab") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171628",
				objectName = "CustomObject171628",
				pluralLabelName = "Custom Objects 171628");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject171628");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject171628",
				objectName_2 = "CustomObject171628",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Custom Layout 171628",
				objectName = "CustomObject171628");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171628");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 171628");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Custom Layout 171628");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();

			for (var letter : list "A,B,C,D,E") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject171628",
					value = "Entry Test ${letter}");
			}

			ObjectAdmin.goToCustomObject(objectName = "CustomObject171628");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test A");
		}

		task ("When selecting existing entries from the Relationship Tab") {
			ObjectAdmin.gotoRelationshipsTab();

			LexiconEntry.gotoAdd();

			Click(
				key_kebabOption = "Select Existing One",
				locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then all entries created show on Select Existing One and the entry selected is saved on the Relationship Tab") {
			for (var letter : list "B,C,D,E") {
				AssertElementPresent(
					key_titleFieldName = "Entry Test ${letter}",
					locator1 = "CreateObject#SELECT_ENTRY_IN_RELATIONSHIP_TAB");
			}

			ClickNoError(
				key_titleFieldName = "Entry Test C",
				locator1 = "CreateObject#SELECT_ENTRY_IN_RELATIONSHIP_TAB");

			AssertElementPresent(
				key_fieldLabel = "Entry Test C",
				locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");
		}
	}

	@description = "LPS-146808 - Verify it is possibel to view a Date entry and label"
	@priority = 4
	test CanViewDateEntry {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 200",
			objectName = "CustomObject200",
			pluralLabelName = "Custom Objects 200");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject200");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject200");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject200");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject200",
			value = "2022-01-01");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject200");

		ObjectPortlet.viewEntryDetails(entry = "Jan 1, 2022");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Custom Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "01/01/2022");
	}

}