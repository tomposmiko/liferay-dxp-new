@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-143065 - Verify that the user can delete the attachment by clicking on the clear button"
	@ignore = "true"
	@priority = 4
	test CanDeleteAttachment {
		property test.name.skip.portal.instance = "ObjectAutoGeneratedLayout#CanDeleteAttachment";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151577",
			objectName = "CustomObject151577",
			pluralLabelName = "Custom Objects 151577");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151577");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151577");

		ObjectAdmin.goToFieldsTab();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151577");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151577");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		PortletEntry.save();

		ObjectAutoGenerated.deleteFileOnAttachment();

		AssertElementNotPresent(
			key_fileName = "LiferayLogo",
			locator1 = "ObjectAutoGenerated#FILE_ON_ATTACHMENT");
	}

	@description = "LPS-147658 - Verify it is possible to submit an empty value for a Date field and it will be correctly displayed on the Layout"
	@priority = 5
	test CanDisplayEmptyDateValue {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147870",
			objectName = "CustomObject147870",
			pluralLabelName = "Custom Objects 147870");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject147870");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject147870");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147870");

		LexiconEntry.gotoAdd();

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147870");

		ObjectPortlet.viewEntryDetails(entry = "");

		AssertElementPresent(
			key_entryLabel = "Date",
			locator1 = "ObjectPortlet#VIEW_ENTRY_DETAILS_LABEL");

		ObjectPortlet.viewEmptyLabelInDateEntry();
	}

	@description = "LPS-143065 - Verify that the file can be downloaded (a download button appears on the side of the name on the mouse hover)"
	@priority = 4
	test CanDownloadFile {
		property test.name.skip.portal.instance = "ObjectAutoGeneratedLayout#CanDownloadFile";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151581",
			objectName = "CustomObject151581",
			pluralLabelName = "Custom Objects 151581");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151581");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151581");

		ObjectAdmin.goToFieldsTab();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151581");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151581");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		PortletEntry.save();

		ObjectAutoGenerated.downloadFileOnAttachment(fileOnAttachment = "LiferayLogo");
	}

	@description = "LPS-143064 - Verify that, when adding entry in an object, the user must be able to add text and format it"
	@priority = 4
	test CanFormatText {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151582",
			objectName = "CustomObject151582",
			pluralLabelName = "Custom Objects 151582");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "RichText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151582");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151582");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151582");

		for (var typeText : list "Strong,Italic,Underline,Numbered List,Bulleted List") {
			LexiconEntry.gotoAdd();

			ObjectAutoGenerated.typeAndEditRichText(
				richText = "Liferay DXP ${typeText}",
				typeEdit = ${typeText});

			SelectFrame(locator1 = "ObjectAdmin#VIEW_SHEET_ON_DEFINE_PERMISSIONS");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject151582");

			ObjectPortlet.viewEntry(entry = "Liferay DXP ${typeText}");
		}
	}

	@description = "LPS-146889 - Verify that it is not possible to add more characters than the limit set"
	@priority = 5
	test CannotAddMoreThanLimitOfCharacters {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 146889",
			objectName = "CustomObject146889",
			pluralLabelName = "Custom Objects 146889");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject146889");

		ObjectPortlet.selectCustomObject(label = "Custom Object 146889");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Text");

		ObjectAutoGenerated.defineMaximumNumberOfCharacters(maxCharacters = 10);

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject146889");

		for (var fieldEntry : list "Entry,Entry with more than 10 characters") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject146889");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = ${fieldEntry});
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject146889");

		ObjectPortlet.viewEntry(entry = "Entry");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry with more than 10 characters");
	}

	@description = "LPS-143065 - Verify that when the user uploads another item when there's already a attachment, the new file replaces the current one"
	@priority = 4
	test CanReplaceFile {
		property test.name.skip.portal.instance = "ObjectAutoGeneratedLayout#CanReplaceFile";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151578",
			objectName = "CustomObject151578",
			pluralLabelName = "Custom Objects 151578");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151578");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151578");

		ObjectAdmin.goToFieldsTab();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151578");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151578");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151578");

		ObjectAutoGenerated.updateAttachment(
			fileName = "LiferayLogo.png",
			newFileName = "Liferay Code of Business Conduct and Ethics.pdf");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151578");

		ObjectPortlet.viewEntry(entry = "Liferay Code of Business Conduct and Ethics.pdf");
	}

	@description = "LPS-143065 - Verify that the user can't upload a file with a invalid extension and the error message is displayed"
	@priority = 4
	test CantUploadInvalidExtensionFile {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151574",
			objectName = "CustomObject151574",
			pluralLabelName = "Custom Objects 151574");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151574");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151574");

		ObjectAdmin.goToFieldsTab();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151574");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151574");

		ObjectAutoGenerated.addAttachment(fileName = "ImportedSimpleObject.json");

		AssertTextEquals(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "Please enter a file with a valid extension (jpeg, jpg, pdf, png).");
	}

	@description = "LPS-143065 - Verify that the user can't upload a file with a invalid size and the error message is displayed"
	@priority = 4
	test CantUploadInvalidSizeFile {
		property test.name.skip.portal.instance = "ObjectAutoGeneratedLayout#CantUploadInvalidSizeFile";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151575",
			objectName = "CustomObject151575",
			pluralLabelName = "Custom Objects 151575");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151575");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151575");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		var size = 1;

		ObjectAutoGenerated.defineMaximumFileSize(maxFileSize = ${size});

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151575");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151575");

		ObjectAutoGenerated.addAttachment(fileName = "Liferay Code of Business Conduct and Ethics.pdf");

		AssertTextEquals(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "Please enter a file with a valid file size no larger than ${size} MB.");
	}

	@description = "LPS-142659 - Verify it is possible to view a Clob entry and label on layout"
	@priority = 4
	test CanViewClobEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 193",
			objectName = "CustomObject193",
			pluralLabelName = "Custom Objects 193");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject193");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject193");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject193",
			value = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject193");

		ObjectPortlet.viewClobEntryDetails(clobEntry = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");

		AssertElementPresent(
			key_clobType = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.",
			locator1 = "ObjectAdmin#VIEW_CLOB_TYPE_TEXT_ENTRY");
	}

	@description = "LPS-143065 - Verify that when the user click on the file name, the file can be viewed"
	@priority = 4
	test CanViewFile {
		property test.name.skip.portal.instance = "ObjectAutoGeneratedLayout#CanViewFile";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151576",
			objectName = "CustomObject151576",
			pluralLabelName = "Custom Objects 151576");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151576");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151576");

		ObjectAdmin.goToFieldsTab();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151576");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151576");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		ObjectAutoGenerated.ClickAtFileOnAttachment(fileOnAttachment = "LiferayLogo");

		SelectWindow(locator1 = "name=undefined");

		WaitForSPARefresh();

		AssertElementPresent(
			key_imageTitle = "LiferayLogo",
			locator1 = "ObjectAutoGenerated#VIEW_IMAGE");
	}

	@description = "LPS-143065 - Verify if the name and extension of the file are displayed when the user upload a image"
	@priority = 4
	test CanViewFileNameAndExtension {
		property test.name.skip.portal.instance = "ObjectAutoGeneratedLayout#CanViewFileNameAndExtension";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151576",
			objectName = "CustomObject151576",
			pluralLabelName = "Custom Objects 151576");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Attachment",
			fieldLabelName = "Custom Attachment",
			fieldName = "customObjectField",
			fieldType = "Long",
			fileSource = "userComputer",
			isRequired = "false",
			objectName = "CustomObject151576");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151576");

		ObjectAdmin.goToFieldsTab();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151576");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151576");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		ObjectAutoGenerated.viewFilePresentOnAttachment(fileOnAttachment = "LiferayLogo.png");
	}

	@description = "LPS-142659 - Verify if the Object Entry Title of a Clob type is displayed on the Relationship field when adding an entry"
	@priority = 4
	test CanViewObjectEntryTitleClobOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 194",
			objectName = "CustomObject194",
			pluralLabelName = "Custom Objects 194");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject194");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject194",
			objectName_2 = "CustomObject194",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject194");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 194");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject194",
			value = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject194");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "Entry A");
	}

	@description = "LPS-146889 - Verify that the character count is updated dynamically when the user is typing on the field"
	@priority = 4
	test CharacterCountIsDynamic {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151583",
			objectName = "CustomObject151583",
			pluralLabelName = "Custom Objects 151583");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject151583");

		ObjectPortlet.selectCustomObject(label = "Custom Object 151583");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Text");

		ObjectAutoGenerated.checkToggleLimitCharacters();

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151583");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151583");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		AssertElementPresent(
			key_characterCount = "10/280",
			locator1 = "ObjectAutoGenerated#VIEW_CHARACTER_COUNT");

		ObjectAdmin.editEntryName(newEntryValue = "Update Entry");

		AssertElementPresent(
			key_characterCount = "12/280",
			locator1 = "ObjectAutoGenerated#VIEW_CHARACTER_COUNT");
	}

}