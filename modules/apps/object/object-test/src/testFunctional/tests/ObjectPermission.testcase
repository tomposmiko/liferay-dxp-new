@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Picklist portlet with the Access in Control Panel permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanAccessPicklistWithAccessPermission {

		// TODO LPS-145753 CanAccessPicklistWithAccessPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is possible to add a Picklist with the Add permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanAddPicklistWithAddPermission {

		// TODO LPS-145755 CanAddPicklistWithAddPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is possible to delete a Picklist with the Delete permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanDeletePicklistWithDeletePermission {

		// TODO LPS-145757 CanDeletePicklistWithDeletePermission pending implementation

	}

	@description = "LPS-135390 - Verify it is possible to edit its own Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CanEditItsOwnEntryWithOnlyAddPermission {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Update Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Update Entry");
	}

	@description = "LPS-135390 - Verify it is not possible to add a Picklist without the Add permission"
	@priority = "5"
	test CannotAddPicklistWithoutAddPermission {
		property portal.acceptance = "true";

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	@description = "LPS-135390 - Verify it is not possible to delete a Picklist without the Delete permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotDeletePicklistWithoutDeletePermission {

		// TODO LPS-145756 CannotDeletePicklistWithoutDeletePermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to update a Picklist without the Update permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotUpdatePicklistWithoutUpdatePermission {

		// TODO LPS-145758 CannotUpdatePicklistWithoutUpdatePermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to view a Picklist without the View permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotViewPicklistWithoutViewPermission {

		// TODO LPS-145760 CannotViewPicklistWithoutViewPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is possible to update a Picklist with the Update permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanUpdatePicklistWithUpdatePermission {

		// TODO LPS-145759 CanUpdatePicklistWithUpdatePermission pending implementation

	}

	@description = "LPS-140342 - Verify it is possible view and edit its own Picklist with only the Add Picklist permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewAndEditPicklistWithAddPicklistPermission {

		// TODO LPS-145762 CanViewAndEditPicklistWithAddPicklistPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is possible to view its own Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CanViewItsOwnEntryWithOnlyAddPermission {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

	@description = "LPS-135390 - Verify it is possible to view a Picklist with the View permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewPicklistWithViewPermission {

		// TODO LPS-145761 CanViewPicklistWithViewPermission pending implementation

	}

}