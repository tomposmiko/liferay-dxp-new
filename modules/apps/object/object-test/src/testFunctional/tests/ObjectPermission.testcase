@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Picklist portlet with the Access in Control Panel permission"
	@priority = "4"
	test CanAccessPicklistWithAccessPermission {
		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		ObjectPortlet.assertHeader(objectLabel = "Picklists");

		ObjectAdmin.assertNoItemsWereFound();
	}

	@description = "LPS-135390 - Verify it is possible to add a Picklist with the Add permission"
	@priority = "4"
	test CanAddPicklistWithAddPermission {
		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Picklist.assertPicklist(picklistName = "Picklist Test");
	}

	@description = "LPS-135390 - Verify it is possible to delete a Picklist with the Delete permission"
	@priority = "4"
	test CanDeletePicklistWithDeletePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		for (var resourceAction : list "DELETE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.list.type.model.ListTypeDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "Delete");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-146757 - Verify it is possible to delete a single Object Entry with the Delete permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CanDeleteSingleObjectEntryWithDeletePermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";

		// TODO LPS-147740 CanDeleteSingleObjectEntryWithDeletePermission pending implementation

	}

	@description = "LPS-135390 - Verify it is possible to edit its own Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CanEditItsOwnEntryWithOnlyAddPermission {
		property portal.acceptance = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Update Entry");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Update Entry");
	}

	@description = "LPS-135390 - Verify it is not possible to add a Picklist without the Add permission"
	@priority = "5"
	test CannotAddPicklistWithoutAddPermission {
		property portal.acceptance = "true";

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	@description = "LPS-146757 - Verify it is not possible to delete a single Object Entry create by the user if the Delete Owner permission is removed"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotDeleteOwnSingleObjectEntryWithoutDeleteOwnerPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";

		// TODO LPS-147744 CannotDeleteOwnSingleObjectEntryWithoutDeleteOwnerPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to delete a Picklist without the Delete permission"
	@priority = "4"
	test CannotDeletePicklistWithoutDeletePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		MenuItem.viewNotPresent(menuItem = "Delete");
	}

	@description = "LPS-146757 - Verify it is not possible to update a single Object Entry permissions create by the user if the Permissions Owner permission is removed"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotUpdateOwnSingleObjectEntryWithoutPermissionsOwnerPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";

		// TODO LPS-147745 CannotUpdateOwnSingleObjectEntryWithoutPermissionsOwnerPermission pending implementation

	}

	@description = "LPS-146757 - Verify it is not possible to update a single Object Entry create by the user if the Update Owner permission is removed"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotUpdateOwnSingleObjectEntryWithoutUpdateOwnerPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";

		// TODO LPS-147746 CannotUpdateOwnSingleObjectEntryWithoutUpdateOwnerPermission pending implementation

	}

	@description = "LPS-135390 - Verify it is not possible to update a Picklist without the Update permission"
	@priority = "4"
	test CannotUpdatePicklistWithoutUpdatePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest",
			itemName = "Picklist Item",
			picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		CreateObject.viewObject(labelName = "Picklist Test");

		Picklist.assertDisabledPicklistName();

		Picklist.assertDisabledSaveButton();

		CreateObject.viewObject(labelName = "Picklist Item");

		Picklist.assertDisabledPicklistItem();

		Picklist.assertDisabledSaveButton();
	}

	@description = "LPS-135390 - Verify it is not possible to view a Picklist without the View permission"
	@priority = "4"
	test CannotViewPicklistWithoutViewPermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-135390 - Verify it is possible to update a Picklist with the Update permission"
	@priority = "4"
	test CanUpdatePicklistWithUpdatePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		for (var resourceAction : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.list.type.model.ListTypeDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		CreateObject.viewObject(labelName = "Picklist Test");

		Picklist.updatePicklistName(picklistName = "Update Picklist");

		Button.clickSave();

		Refresh();

		Picklist.assertPicklist(picklistName = "Update Picklist");
	}

	@description = "LPS-146757 - Verify it is possible to update a single Object Entry permissions with the Permissions permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CanUpdateSingleObjectEntryPermissionsPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";

		// TODO LPS-147741 CanUpdateSingleObjectEntryPermissionsPermission pending implementation

	}

	@description = "LPS-146757 - Verify it is possible to update a single Object Entry with the Update permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CanUpdateSingleObjectEntryWithUpdatePermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";

		// TODO LPS-147742 CanUpdateSingleObjectEntryWithUpdatePermission pending implementation

	}

	@description = "LPS-140342 - Verify it is possible view and edit its own Picklist with only the Add Picklist permission"
	@priority = "4"
	test CanViewAndEditPicklistWithAddPicklistPermission {
		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Picklist.assertPicklist(picklistName = "Picklist Test");

		CreateObject.viewObject(labelName = "Picklist Test");

		Picklist.updatePicklistName(picklistName = "Update Picklist");

		Button.clickSave();

		Refresh();

		Picklist.assertPicklist(picklistName = "Update Picklist");
	}

	@description = "LPS-135390 - Verify it is possible to view its own Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CanViewItsOwnEntryWithOnlyAddPermission {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

	@description = "LPS-135390 - Verify it is possible to view a Picklist with the View permission"
	@priority = "4"
	test CanViewPicklistWithViewPermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.assertPicklist(picklistName = "Picklist Test");
	}

	@description = "LPS-146757 - Verify it is possible to view a single Object Entry with the View permission"
	@ignore = "Test Stub"
	@priority = "5"
	test CanViewSingleObjectEntryWithViewPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";

		// TODO LPS-147743 CanViewSingleObjectEntryWithViewPermission pending implementation

	}

	@description = "LPS-146757 - Verify that single Entry permissions will be checked and greyed out if the permissions were already given to the user's role"
	@ignore = "Test Stub"
	@priority = "3"
	test RolePermissionsOverlapSingleObjectEntryPermissions {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";

		// TODO LPS-147747 RolePermissionsOverlapSingleObjectEntryPermissions pending implementation

	}

}