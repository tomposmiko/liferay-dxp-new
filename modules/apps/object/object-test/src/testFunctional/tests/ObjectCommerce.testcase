@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-151766 - Verify that it's possible to create an object entry related to Commerce Product Group"
	@priority = "4"
	test CanCreateEntryRelatedToCommerceProductGroup {
		task ("Create a Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 288",
				objectName = "CustomObject288",
				pluralLabelName = "Custom Objects 288");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CommercePricingClass",
				objectName_2 = "CustomObject288",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject288");
		}

		task ("Change the Commerce Product Group title field") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product Group");

			CreateObject.selectTitleField(fieldLabel = "Title");

			Button.clickSave();
		}

		task ("Create a Commerce Product Group") {
			Navigator.openURL();

			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Master",
				productName = "Simple T-Shirt",
				productType = "Simple");

			CommerceEntry.gotoMenuTab(menuTab = "Product Groups");

			Click(locator1 = "ContentDashboard#SEARCH_FIELD");

			Type(
				locator1 = "ContentDashboard#SEARCH_FIELD",
				value1 = "PG2");

			Click(
				key_text = "Create New",
				locator1 = "Button#ANY");

			Refresh();

			Button.clickPublish();
		}

		task ("Create an object entry related to Commerce Product Group") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject288");

			LexiconEntry.gotoAdd();

			ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "PG2");

			Button.clickSave();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject288");

			AssertElementPresent(
				key_entry = "PG2",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-152408 - Verify that it's possible to create an object entry related to Commerce Products"
	@priority = "4"
	test CanCreateEntryRelatedToCommerceProducts {
		task ("Create a Custom Object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 289",
				objectName = "CustomObject289",
				pluralLabelName = "Custom Objects 289");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CPDefinition",
				objectName_2 = "CustomObject289",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject289");
		}

		task ("Change the Commerce Product title field") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product");

			CreateObject.selectTitleField(fieldLabel = "Name");

			Button.clickSave();
		}

		task ("Create a Commerce Product") {
			Navigator.openURL();

			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Master",
				productName = "Simple T-Shirt",
				productType = "Simple");
		}

		task ("Create an object entry related to Commerce Product") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject289");

			LexiconEntry.gotoAdd();

			Click(locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY");

			ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Simple T-Shirt");

			Button.clickSave();

			Alert.viewSuccessMessage();

			CreateObject.assertEntrySelectedOnRelationshipField(entry = "Simple T-Shirt");
		}
	}

	@description = "LPS-136741 - Verify that Commerce notification works for creating an entry"
	@ignore = "Test Stub"
	@priority = "4"
	test CreateEntryNotification {

		// TODO LPS-145736 CreateEntryNotification pending implementation

	}

	@description = "LPS-136741 - Verify that Commerce notification works for deleting an entry"
	@ignore = "Test Stub"
	@priority = "4"
	test DeleteEntryNotification {

		// TODO LPS-145738 DeleteEntryNotification pending implementation

	}

	@description = "LPS-136741 - Verify that Object scoped by Company is not displayed on the Commerce notification type for Site type Channel"
	@priority = "4"
	test ObjectScopedCompanyNotDisplayedSiteChannel {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 145735",
			objectName = "CustomObject145735",
			pluralLabelName = "Custom Objects 145735");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject145735");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject145735");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site");

		Refresh();

		ObjectCommerce.channelsTab(navigatorChannels = "Notification Templates");

		LexiconEntry.gotoAdd();

		for (var optionTypeList : list "Create,Delete,Update") {
			ObjectCommerce.viewNotPresentOptionType(optionType = "${optionTypeList}");
		}
	}

	@description = "LPS-136741 - Verify that Commerce notification works for updating an entry"
	@ignore = "Test Stub"
	@priority = "4"
	test UpdateEntryNotification {

		// TODO LPS-145737 UpdateEntryNotification pending implementation

	}

}