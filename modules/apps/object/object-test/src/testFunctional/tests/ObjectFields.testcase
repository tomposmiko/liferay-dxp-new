@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-146889 - Verify that when turn on the 'Set the Maximum Number of Characters' on a Long Text the Maximum Number of Characters field has the 65,000 value as default"
	@priority = "4"
	test 65000IsDefaultMaximumCharacterLongText {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151572",
			objectName = "CustomObject151572",
			pluralLabelName = "Custom Objects 151572");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Long Text Field",
			fieldName = "customLongTextField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151572");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151572");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Long Text Field");

		ObjectField.checkLimitCharacters();

		ObjectField.assertValueOnLimitCharacters(maxValue = "65000");
	}

	@description = "LPS-146523 - Verify if the scope of the object is Virtual Instance (Company) I will be able to add from any folders I have access to"
	@priority = "4"
	test CanAddFromAnyFolderWhenScopedByCompany {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151564",
			objectName = "CustomObject151564",
			pluralLabelName = "Custom Objects 151564");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151564");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151564");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151564");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ObjectField.addAnyFolder(folderName = "Folder 151564");
	}

	@description = "LPS-146523 - Verify if the scope of the object is Site, I will be able to add from the site I'm in or Asset Libraries connected to that site I have access to"
	@priority = "4"
	test CanAddFromSiteAssetLibrariesWhenScopedBySite {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151566",
			objectName = "CustomObject151566",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 151566",
			scope = "site");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151566");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151566");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Custom Objects 151566");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ObjectField.addAnyFolder(folderName = "Folder 151566");
	}

	@description = "LPS-142659 - Verify it is possible to create a Clob field"
	@priority = "4"
	test CanCreateClobField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 206",
			objectName = "CustomObject206",
			pluralLabelName = "Custom Objects 206");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 206");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Long Text");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "LongText");
	}

	@description = "LPS-135404 - Verify that it's possible to create new custom fields in a System Object"
	@priority = "5"
	test CanCreateCustomFieldInSystemObject {
		property portal.acceptance = "true";

		task ("Go to Objects, select System Object Account and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Account");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Text",
				fieldName = "customText",
				fieldType = "Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Text",
				fieldType = "Text");
		}

		task ("Go to Objects, select System Object Commerce Product and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Integer",
				fieldType = "Integer");
		}

		task ("Go to Objects, select System Object Commerce Product Group and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product Group");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom long integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Integer",
				fieldName = "customLongInteger",
				fieldType = "Long Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Long Integer",
				fieldType = "LongInteger");
		}

		task ("Go to Objects, select System Object Commerce Order and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom date field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Date",
				fieldType = "Date");
		}

		task ("Go to Objects, select System Object Postal Address and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Postal Address");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Decimal",
				fieldName = "customDecimal",
				fieldType = "Decimal");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Decimal",
				fieldType = "Decimal");
		}

		task ("Go to Objects, select System Object User and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "User");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom boolean field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Boolean",
				fieldName = "customBoolean",
				fieldType = "Boolean");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Boolean",
				fieldType = "Boolean");
		}
	}

	@description = "LPS-149625 - Verify that it's possible to create an object entry with aggregation field"
	@ignore = "true"
	@priority = "5"
	test CanCreateEntryWithAggregationField {
		property portal.acceptance = "true";

		task ("Create Custom Object and Custom Relationship itself (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161890",
				objectName = "CustomObject161890",
				pluralLabelName = "Custom Objects 161890");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161890",
				objectName_2 = "CustomObject161890",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161890");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161890");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "ID",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("Assert that there is Custom Aggregation Field") {
			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation");
		}
	}

	@description = "LPS-135549 - Verify that it's possible to create an object entry with every field"
	@priority = "5"
	test CanCreateObjectEntryWithEveryField {
		property portal.acceptance = "true";

		task ("Go to Picklist and create new Picklist and item") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Picklists");

			Picklist.addPicklistViaUI(picklistName = "Picklist Test");

			for (var numbers : list "1,2") {
				Picklist.gotoPicklistView(picklistName = "Picklist Test");

				Picklist.addPicklistItemViaUI(picklistItemName = "Picklist Item Test ${numbers}");

				Picklist.clickSaveButton();

				Refresh();
			}

			Navigator.openURL();
		}

		task ("Go to Objects and create Custom Object") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Objects");

			ObjectAdmin.addNewObject(
				fieldLabelName = "Custom Object 162140",
				pluralLabelName = "Custom Objects 162140");

			ObjectAdmin.saveCustomObject();
		}

		task ("Go to Custom Object > Fields") {
			ObjectPortlet.selectCustomObject(label = "Custom Object 162140");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add long integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Integer",
				fieldName = "customLongInteger",
				fieldType = "Long Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Long Integer",
				fieldType = "LongInteger");
		}

		task ("Add attachment field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldAttachment = "Upload Directly from the User's Computer",
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");
		}

		task ("Add text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Simple Text",
				fieldName = "customSimpleText",
				fieldType = "Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Simple Text",
				fieldType = "Text");
		}

		task ("Add picklist field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Picklist",
				fieldPicklist = "Picklist Test",
				fieldType = "Picklist");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Picklist",
				fieldType = "Picklist");
		}

		task ("Add date field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Date",
				fieldType = "Date");
		}

		task ("Add integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Integer",
				fieldType = "Integer");
		}

		task ("Add precision decimal field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Precision Decimal",
				fieldName = "customPrecisionDecimal",
				fieldType = "Precision Decimal");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Precision Decimal",
				fieldType = "PrecisionDecimal");
		}

		task ("Add decimal field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Decimal",
				fieldName = "customDecimal",
				fieldType = "Decimal");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Decimal",
				fieldType = "Decimal");
		}

		task ("Add rich text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Rich Text",
				fieldName = "customRichText",
				fieldType = "Rich Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Rich Text",
				fieldType = "RichText");
		}

		task ("Add boolean field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Boolean",
				fieldName = "customBoolean",
				fieldType = "Boolean");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Boolean",
				fieldType = "Boolean");
		}

		task ("Add long text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Text",
				fieldName = "customLongText",
				fieldType = "Long Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Long Text",
				fieldType = "LongText");
		}

		task ("Publish Custom Object") {
			ObjectAdmin.goToDetailsTab();

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

			ObjectAdmin.publishObjectViaUI();
		}

		task ("Go to Custom Object entries and add an entry") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Custom Objects 162140");
		}

		task ("Create an entry (fill all fields)") {
			LexiconEntry.gotoAdd();

			WaitForPageLoad();

			Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

			ObjectPortlet.typeCustomField(
				customField = "Custom Decimal",
				entry = "12.34");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer",
				entry = "1234");

			ObjectPortlet.typeCustomField(
				customField = "Custom Long Integer",
				entry = "1122334455");

			ObjectPortlet.typeCustomField(
				customField = "Precision Decimal",
				entry = "1.5");

			FormViewBuilder.editClobText(fieldLong = "Text written on long text");

			ObjectPortlet.typeCustomField(
				customField = "Simple Text",
				entry = "Text written on simple text");

			ObjectAutoGenerated.typeAndSelectTextOnRichText(text = "Text written on rich text");

			Type(
				locator1 = "ObjectPortlet#VIEW_EMPTY_LABEL_IN_DATE_ENTRY",
				value1 = "01/01/2022");

			Click(locator1 = "ObjectAdmin#ENTRY_CHOOSE_OPTION");

			Click(
				key_picklistOption = "Picklist Item Test 1",
				locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");

			WaitForPageLoad();

			ObjectAutoGenerated.clickSelectFile();

			var filePath = TestCase.getDependenciesDirPath(fileName = "LiferayLogo.png");

			UploadFile(
				locator1 = "TextInput#FILE",
				value1 = "${filePath}");

			Button.clickSave();
		}

		task ("Assert entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162140");

			for (var asserts : list "Yes,12.34,1234,1122334455,1.5,Text written on long text,Text written on simple text,Text written on rich text,Picklist Item Test 1,LiferayLogo") {
				ObjectPortlet.viewEntry(entry = "${asserts}");
			}

			ObjectPortlet.viewEntry(entry = "Jan 1, 2022");
		}
	}

	@description = "LPS-148112 - Verify that File Size and Format defined by admin are working correctly when using the 'Show Files' option"
	@priority = "4"
	test CanDefineMaximumFileSizeOnShowFilesOption {
		property portal.upstream = "quarantine";

		task ("Add new Custom Object (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 153423",
				objectName = "CustomObject153423",
				pluralLabelName = "Custom Objects 153423");
		}

		task ("Go to Custom Object and add Custom Attachment Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 153423");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				enableShowFiles = "true",
				fieldAttachment = "Upload Directly from the User's Computer",
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");
		}

		task ("Go to Custom Attachment and define maximum file size") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

			Type(
				locator1 = "ObjectField#INPUT_MAXIMUM_FILE_SIZE",
				value1 = "1");

			Button.clickSave();
		}

		task ("Publish the Custom Object (via API)") {
			Navigator.openURL();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153423");
		}

		task ("Try adding an entry bigger than the value set before and assert error") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153423");

			ObjectAutoGenerated.addAttachment(fileName = "Liferay Code of Business Conduct and Ethics.pdf");

			AssertElementPresent(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a file with a valid file size no larger than 1 MB.");
		}

		task ("Add an entry smaller than the value set before") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153423");

			ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

			Button.clickSave();
		}

		task ("Assert that the entry smaller than the value set was added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153423");

			ObjectPortlet.viewEntry(entry = "LiferayLogo.png");
		}
	}

	@description = "LPS-149625 - Verify that it's possible to delete an aggregation field"
	@ignore = "true"
	@priority = "4"
	test CanDeleteAggregationField {
		task ("Create Custom Object and Custom Relationship itself (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161892",
				objectName = "CustomObject161892",
				pluralLabelName = "Custom Objects 161892");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161892",
				objectName_2 = "CustomObject161892",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161892");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161892");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Count",
				relationship = "Relationship");
		}

		task ("Assert that is possible to delete Custom Aggregation Field") {
			ObjectAdmin.deleteObjectField(fieldName = "Custom Aggregation");

			ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Aggregation");
		}
	}

	@description = "LPS-135404 - Verify that it's possible to delete created custom fields in a System Object"
	@priority = "4"
	test CanDeleteCustomFieldInSystemObject {
		task ("Create Custom Fields (via API)") {
			for (var systemNames : list "AccountEntry,CPDefinition,CommercePricingClass,CommerceOrder,Address,User") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Text",
					fieldName = "customText",
					fieldType = "String",
					isRequired = "false",
					objectName = "${systemNames}");
			}
		}

		task ("Go to System Objects and delete your custom fields") {
			for (var systemNames : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
				ObjectAdmin.openObjectAdmin();

				ObjectPortlet.selectSystemObject(label = "${systemNames}");

				ObjectAdmin.goToFieldsTab();

				ObjectAdmin.deleteObjectField(fieldName = "Custom Text");

				ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Text");
			}
		}
	}

	@description = "LPS-148112 - Verify if turn off the 'Show files' option on field settings"
	@priority = "4"
	test CanDisableShowFilesOptionOnFieldSettings {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		Uncheck.uncheckNotVisible(
			key_toggleSwitchLabel = "Show Files in Documents and Media",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		ObjectField.save();
	}

	@description = "LPS-149625 - Verify that it's possible to edit an aggregation field"
	@ignore = "true"
	@priority = "4"
	test CanEditAggregationField {
		task ("Create Custom Object and Custom Relationship itself (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161891",
				objectName = "CustomObject161891",
				pluralLabelName = "Custom Objects 161891");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161891",
				objectName_2 = "CustomObject161891",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161891",
				objectName_2 = "CommerceOrder",
				relationshipLabel = "RelationshipCommerce",
				relationshipName = "relationshipCommerce",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161891");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161891");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "Order Status",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "RelationshipCommerce");
		}

		task ("Edit Custom Aggregation Field") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Aggregation");

			ObjectField.typeLabel(content = "Custom Aggregation Update");

			ObjectField.assertNameDisabled();

			ObjectField.assertTypeDisabled();

			Click(locator1 = "ObjectField#LABEL_RELATIONSHIP");

			Click(
				key_dropdownItem = "RelationshipCommerce",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			Click(
				key_filterLabel = "Function",
				locator1 = "ObjectCustomViews#SELECT_FILTER_GENERIC");

			Click(
				key_fieldType = "Min",
				locator1 = "ObjectField#TYPE_OPTION");

			Click(locator1 = "ObjectField#LABEL_FIELD");

			Click(
				key_dropdownItem = "ID",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			ObjectField.save();
		}

		task ("Assert that Custom Aggregation Field is updated") {
			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Aggregation Update",
				fieldType = "Aggregation");
		}
	}

	@description = "LPS-148112 - Verify that admin can edit the Storage Folder path in Published objects"
	@priority = "4"
	test CanEditPublishedObjectStorageFolder {
		property portal.upstream = "quarantine";

		task ("Add new Custom Object scoped by site (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 153424",
				objectName = "CustomObject153424",
				panelCategoryKey = "site_administration.content",
				pluralLabelName = "Custom Objects 153424",
				scope = "site");
		}

		task ("Go to Custom Object and add Custom Attachment Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 153424");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				enableShowFiles = "true",
				fieldAttachment = "Upload Directly from the User's Computer",
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");
		}

		task ("Publish the Custom Object (via UI)") {
			ObjectAdmin.goToDetailsTab();

			ObjectAdmin.publishObjectViaUI();

			ObjectAdmin.goToFieldsTab();
		}

		task ("Go to Custom Attachment and change storage folder") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

			ObjectField.typeStorageFolder(content = "/folderDM");

			Button.clickSave();
		}

		task ("Add an entry on Custom Object") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153424");

			ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

			Button.clickSave();
		}

		task ("Go to Documents and Media") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Documents and Media");
		}

		task ("Assert that was added the new folder with file added") {
			DMNavigator.gotoFolder(dmFolderName = "folderDM");

			DMDocument.viewStatus(
				dmDocumentStatus = "Approved",
				dmDocumentTitle = "LiferayLogo");
		}
	}

	@description = "LPS-154872 - Verify that it's possible to filter and sort entries using metadata fields"
	@priority = "4"
	test CanFilterAndSortEntriesViaMetadataFields {
		property portal.upstream = "quarantine";

		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161889",
				objectName = "CustomObject161889",
				pluralLabelName = "Custom Objects 161889");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject161889");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161889");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161889");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		var listMetaData = "Author,Create Date,Custom Field,External Reference Code,ID,Modified Date,Status";

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "${listMetaData}");
		}

		task ("Set order to ERC on Default Sort") {
			ObjectCustomViews.goToDefaultSortTab();

			for (var columnName : list "${listMetaData}") {
				ObjectCustomViews.addDefaultSort(
					columnOption = "${columnName}",
					sortOption = "Ascending");
			}

			for (var columnName : list "${listMetaData}") {
				ObjectCustomViews.assertColumnPresentOnDefaultSort(
					columnName = "${columnName}",
					sortingLabel = "Ascending");
			}

			Button.clickSave();
		}

		task ("Create an entry via API") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject161889",
					value = "Entry ${letters}");
			}
		}

		task ("Go to the Custom Object entries and assert the columns are present") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161889");

			for (var columnName : list "${listMetaData}") {
				ObjectPortlet.assertEntryColumnPresent(column = "${columnName}");
			}
		}

		task ("Click on arrows and assert the entries change the position") {
			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry A",
				position = "1");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry B",
				position = "2");

			Click(
				key_orderColumn = "External Reference Code",
				locator1 = "ObjectPortlet#ARROW_ORDER_COLUMN");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry B",
				position = "1");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry A",
				position = "2");
		}
	}

	@description = "LPS-161887 - Verify that it's not possible to create an Object without adding a field."
	@priority = "5"
	test CannotCreateEmptyObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.publishObjectViaUI();

		AssertTextPresent(
			locator1 = "Message#ALERT_DISMISSIBLE",
			value1 = "At least one custom field must be added.");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object",
			status = "Draft");
	}

	@description = "LPS-146889 - Verify that when turn on the 'Set the Maximum Number of Characters' the user is not allowed to type any value outside the informed range on the help text"
	@priority = "4"
	test CannotTypeValueOutsideRange {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151573",
			objectName = "CustomObject151573",
			pluralLabelName = "Custom Objects 151573");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Text Field",
			fieldName = "customTextField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject151573");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151573");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Text Field");

		ObjectField.checkLimitCharacters();

		ObjectField.assertValueOnLimitCharacters(maxValue = "280");

		ObjectField.typeValueOnLimitCharacters(newValue = "281");

		ObjectField.assertValueOnLimitCharactersNotPresent(maxValue = "281");

		ObjectField.assertValueOnLimitCharacters(maxValue = "28");
	}

	@description = "LPS-148112 - Verify that attchment field is working fine to the selecting Request Files: Directly from User's Computer when 'Show files' option is off"
	@priority = "4"
	test CanSaveDirectlyFromUsersComputerOptionWithShowFilesDisable {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153414",
			objectName = "CustomObject153414",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 153414",
			scope = "site");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153414");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153414");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153414");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153414");

		ObjectPortlet.viewEntry(entry = "LiferayLogo.png");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		AssertElementNotPresent(
			key_dmFolderName = "CustomObject153414",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE");
	}

	@description = "LPS-162176 - Verify that the ERC is displayed on the object definition page"
	@priority = "5"
	test CanSeeERCFieldOnObjectPage {
		task ("Given an object is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162176",
				objectName = "CustomObject162176",
				pluralLabelName = "Custom Objects 162176");
		}

		task ("When the user navigates to the object definition") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162176");
		}

		task ("Then the ERC is present on the page") {
			AssertElementPresent(locator1 = "ObjectAdmin#EXTERNAL_REFERENCE_CODE");
		}
	}

	@description = "Verify that it's possible to see the custom field label and system field label"
	@priority = "5"
	test CanSeeFieldLabel {
		property custom.properties = "feature.flag.LPS-158456=true";
		property portal.acceptance = "true";

		task ("Add an object, go to the fields tab and state whether the system fields have the label System") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToFieldsTab();

			ObjectField.assertSource(
				fieldLabel = "Create Date",
				fieldSource = "System");
		}

		task ("Add a new field and state that custom fields have the label Custom") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Field",
				fieldType = "Text");

			ObjectField.assertSource(
				fieldLabel = "Custom Field",
				fieldSource = "Custom");
		}
	}

	@description = "LPS-158821 - Verify that the user is able to set the ERC field as a Title Field"
	@priority = "4"
	test CanSetERCFieldAsTitleField {
		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162184",
				objectName = "CustomObject162184",
				pluralLabelName = "Custom Objects 162184");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162184");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162184");
		}

		task ("Select title field and assert it") {
			CreateObject.selectTitleField(fieldLabel = "External Reference Code");

			CreateObject.saveObject();

			CreateObject.assertTitleFieldIsSelected(fieldLabel = "External Reference Code");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162184");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");

			Button.clickSave();
		}

		task ("Create an entry via API") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject162184",
				value = "Entry Test");
		}

		task ("Assert that it's possible to see entry with ERC") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162184");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			for (var columnName : list "Custom Field,External Reference Code") {
				ObjectPortlet.assertEntryColumnPresent(column = "${columnName}");
			}
		}
	}

	@description = "LPS-158821 - Verify that the user is able to use the ERC field in Sort, on the Custom Views tab"
	@priority = "4"
	test CanSortWithERCField {
		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162181",
				objectName = "CustomObject162181",
				pluralLabelName = "Custom Objects 162181");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162181");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162181");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162181");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");
		}

		task ("Set order to ERC on Default Sort") {
			ObjectCustomViews.goToDefaultSortTab();

			ObjectCustomViews.addDefaultSort(
				columnOption = "External Reference Code",
				sortOption = "Ascending");

			ObjectCustomViews.assertColumnPresentOnDefaultSort(
				columnName = "External Reference Code",
				sortingLabel = "Ascending");

			Button.clickSave();
		}

		task ("Create an entry via API") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject162181",
					value = "Entry ${letters}");
			}
		}

		task ("Go to Custom Object entries and assert that the column ERC is present") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162181");

			ObjectPortlet.assertEntryColumnPresent(column = "External Reference Code");
		}

		task ("Click on arrows and assert the entries change the position") {
			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry A",
				position = "1");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry B",
				position = "2");

			Click(
				key_orderColumn = "External Reference Code",
				locator1 = "ObjectPortlet#ARROW_ORDER_COLUMN");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry B",
				position = "1");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry A",
				position = "2");
		}
	}

	@description = "LPS-135404 - Verify that it's possible to update created custom fields in a System Object"
	@priority = "4"
	test CanUpdateCustomFieldInSystemObject {
		task ("Create Custom Fields (via API)") {
			for (var systemNames : list "AccountEntry,CPDefinition,CommercePricingClass,CommerceOrder,Address,User") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Text",
					fieldName = "customText",
					fieldType = "String",
					isRequired = "false",
					objectName = "${systemNames}");
			}
		}

		task ("Go to System Objects and edit your custom fields") {
			for (var systemNames : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
				ObjectAdmin.openObjectAdmin();

				ObjectPortlet.selectSystemObject(label = "${systemNames}");

				ObjectAdmin.goToFieldsTab();

				ObjectAdmin.goToFieldsDetails(label = "Custom Text");

				ObjectField.typeLabel(content = "Custom Field Update");

				ObjectField.assertNameDisabled();

				ObjectField.assertTypeDisabled();

				ObjectField.save();

				WaitForSPARefresh();

				ObjectAdmin.assertObjectField(
					fieldLabel = "Custom Field Update",
					fieldType = "Text");
			}
		}
	}

	@description = "LPS-148112 - Verify if on the side panel the 'Show files' path can be edited"
	@priority = "4"
	test CanUpdateShowFilesOptionBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153420",
			objectName = "CustomObject153420",
			pluralLabelName = "Custom Objects 153420");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153420");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.viewToogleOnSidePanelShowFilesInDM(isDisabled = "No");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153420");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153420");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.viewToogleOnSidePanelShowFilesInDM(isDisabled = "Yes");
	}

	@description = "LPS-158821 - Verify that the user is able to use the ERC field in View Builder, on the Custom Views tab"
	@priority = "5"
	test CanUseERCFieldWithCustomView {
		property portal.acceptance = "true";

		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162180",
				objectName = "CustomObject162180",
				pluralLabelName = "Custom Objects 162180");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162180");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162180");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162180");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");

			Button.clickSave();
		}

		task ("Create an entry via API") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject162180",
				value = "Entry Test");
		}

		task ("Assert the entry is visible with an ERC column") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162180");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.assertEntryColumnPresent(column = "External Reference Code");
		}
	}

	@description = "LPS-158821 - Verify that the user is able to use the ERC field in Expression Builder, on the Validations tab"
	@priority = "4"
	test CanUseERCFieldWithExpressionBuilder {
		property portal.upstream = "quarantine";

		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162179",
				objectName = "CustomObject162179",
				pluralLabelName = "Custom Objects 162179");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject162179");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162179");
		}

		task ("On Custom Object, go to Validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162179");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Greater Than'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customInteger > externalReferenceCode");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			Button.clickSave();
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Integer,External Reference Code");

			Button.clickSave();
		}

		task ("Assert the entry is created only when the ERC value is greater than the integer value") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162179");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "123");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");

			Navigator.gotoBack();

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Integer",
				entry = "2147483647");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject162179");

			ObjectPortlet.viewEntry(entry = "2147483647");
		}
	}

	@description = "LPS-148112 - Verify if on the side panel that only valid paths can be used on the 'Show files' settings"
	@priority = "4"
	test CanValidOnlyPathsDefinedOnShowFilesOption {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153421",
			objectName = "CustomObject153421",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 153421",
			scope = "site");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153421");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.typeStorageFolder(content = "/folderDM");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153421");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153421");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153421");

		ObjectPortlet.viewEntry(entry = "LiferayLogo.png");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		AssertElementNotPresent(
			key_dmFolderName = "CustomObject153421",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE");

		DMNavigator.gotoFolder(dmFolderName = "folderDM");

		DMDocument.viewStatus(
			dmDocumentStatus = "Approved",
			dmDocumentTitle = "LiferayLogo");
	}

	@description = "LPS-143065 - Verify if the 'Attachment' option is shown on the 'Type' dropdown"
	@priority = "5"
	test CanViewAttachmentOption {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151557",
			objectName = "CustomObject151557",
			pluralLabelName = "Custom Objects 151557");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151557");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.assertOptionAndDescription(
			description = "Upload files or select from Documents and Media.",
			option = "Attachment");
	}

	@description = "LPS-143065 - Verify if there is an option on Request Files: Directly from User's Computer"
	@priority = "4"
	test CanViewDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151559",
			objectName = "CustomObject151559",
			pluralLabelName = "Custom Objects 151559");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151559");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.assertOptionAndDescriptionOnRequestFiles(
			description = "Files can be stored in an object entry or in a specific folder in Documents and Media.",
			option = "Upload Directly from the User's Computer");
	}

	@description = "LPS-146523 - Verify if there's an option on Request Files: Upload and Select from Documents and Media Item Selector"
	@priority = "5"
	test CanViewDocumentsAndMediaOption {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151562",
			objectName = "CustomObject151562",
			pluralLabelName = "Custom Objects 151562");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151562");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.assertOptionAndDescriptionOnRequestFiles(
			description = "Users can upload or select existing files from Documents and Media.",
			option = "Upload or Select from Documents and Media Item Selector");
	}

	@description = "LPS-147944 - Verify it is possible to view more than 20 picklists for the picklist drop-down"
	@priority = "4"
	test CanViewMoreThan20Picklists {
		for (var numberPicklist : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist ${numberPicklist}");
		}

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 149248",
			objectName = "CustomObject149248",
			pluralLabelName = "Custom Objects 149248");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 149248");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectField#LABEL_INPUT",
			value1 = "Custom Picklist");

		ObjectField.selectType(fieldType = "Picklist");

		Click(locator1 = "ObjectAdmin#OBJECT_FIELDS_PICKLIST");

		for (var numberPicklist : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21") {
			ObjectAdmin.viewPicklistOptionsOnFields(optionName = "Custom Picklist ${numberPicklist}");
		}
	}

	@description = "LPS-148112 - Verify if when selecting the option on Request Files: Directly from User's Computer the toggle is OFF by default"
	@priority = "4"
	test CanViewOptionsDisableWhenSelectDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.selectOptionOnRequestFiles(option = "Upload Directly from the User's Computer");

		Uncheck.uncheckNotVisible(
			key_toggleSwitchLabel = "Show Files in Documents and Media",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
	}

	@description = "LPS-148112 - Verify if when selecting the option on Request Files: Directly from User's Computer there is a Toggle"
	@priority = "4"
	test CanViewOptionsWhenSelectDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_labelName = "Show Files in Documents and Media",
			locator1 = "ObjectField#DEFAULT_TOGGLE_SWITCH");

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.selectOptionOnRequestFiles(option = "Upload Directly from the User's Computer");

		AssertElementPresent(
			key_labelName = "Show Files in Documents and Media",
			locator1 = "ObjectField#DEFAULT_TOGGLE_SWITCH");
	}

	@description = "LPS-146889 - Verify that 'Set the Maximum Number of Characters' toggle is available for Text and Long Text fields"
	@priority = "5"
	test CanViewSetMaximumCharactersOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151569",
			objectName = "CustomObject151569",
			pluralLabelName = "Custom Objects 151569");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field Text",
			fieldName = "customObjectFieldText",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject151569");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field Long Text",
			fieldName = "customObjectFieldLongText",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151569");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151569");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151569");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field Text");

		ObjectField.checkLimitCharacters();

		ObjectField.assertHelpText(helpText = "Set the maximum number of characters accepted. This value cannot be less than 1 or greater than 280");

		ObjectField.assertValueOnLimitCharacters(maxValue = "280");

		ObjectField.save();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field Long Text");

		ObjectField.checkLimitCharacters();

		ObjectField.assertHelpText(helpText = "Set the maximum number of characters accepted. This value cannot be less than 1 or greater than 65,000");

		ObjectField.assertValueOnLimitCharacters(maxValue = "65000");

		ObjectField.save();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151569");

		LexiconEntry.gotoAdd();

		ObjectField.viewCountCharactersOnEntries(
			fieldName = "customObjectFieldText",
			viewCountCharacters = "0/280 Characters");

		ObjectField.viewCountCharactersOnEntries(
			fieldName = "customObjectFieldLongText",
			viewCountCharacters = "0/65000 Characters");
	}

	@description = "LPS-143065 - Verify if a side panel containing the Field name, Typem Request Files, Accepted File Extensions, and Maximum File Size fields"
	@priority = "4"
	test CanViewSidePanelOptions {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151560",
			objectName = "CustomObject151560",
			pluralLabelName = "Custom Objects 151560");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151560");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		AssertElementPresent(locator1 = "ObjectField#LABEL_ACCEPTED_FILE_EXTENSIONS");

		AssertElementPresent(locator1 = "ObjectField#LABEL_MAXIMUM_FILE_SIZE");
	}

	@description = "LPS-148112 - Verify if after create a attachment field with option Request Files: Directly from User's Computer selected and when the 'Show files' is enabled there is a new configuration field called Storage Folder"
	@priority = "4"
	test CanViewStorageFolderWhenShowFilesIsEnable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		AssertElementPresent(locator1 = "ObjectField#LABEL_STORAGE_FOLDER");
	}

	@description = "LPS-148112 - Verify if when selecting the option on Request Files: Directly from User's Computer there is a tooltip on the Toggle"
	@priority = "4"
	test CanViewTootipWhenSelectDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.selectOptionOnRequestFiles(option = "Upload Directly from the User's Computer");

		AssertElementPresent(
			key_text = "question-circle-full",
			locator1 = "Icon#ANY");
	}

	@description = "LPS-144902 - Verify there is a description of each Field Type"
	@priority = "4"
	test DescriptionForEachFieldType {
		property osgi.module.configuration.file.names = "com.liferay.object.web.internal.configuration.FFObjectFieldBusinessTypeConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147723",
			objectName = "CustomObject147723",
			pluralLabelName = "Custom Objects 147723");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 147723");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectField#TYPE_FIELD");

		ObjectAdmin.viewDescriptionForEachFieldType();
	}

	@description = "LPS-146523 - Verify if the default folder will be the Documents and Media Home Folder of that specific site"
	@priority = "4"
	test DocumentsAndMediaHomeFolderIsDefaultWhenScopedBySite {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151568",
			objectName = "CustomObject151568",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 151568",
			scope = "site");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151568");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151568");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151568");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ObjectField.assertDocumentsAndMediaHomeFolderBySite(
			imageName = "tree.png",
			viewHomeFolder = "${siteName}");
	}

	@description = "LPS-146523 - Verify if the default folder will be the Global Documents and Media Home Folder"
	@priority = "4"
	test GlobalDocumentsAndMediaHomeFolderIsDefaultWhenScopedByCompany {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151565",
			objectName = "CustomObject151565",
			pluralLabelName = "Custom Objects 151565");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151565");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151565");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151565");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ObjectField.assertDocumentsAndMediaHomeFolderByCompany(
			infoText = "Drag & Drop Your Files or Click Here to Upload",
			viewHomeFolder = "Global");
	}

	@description = "LPS-143065 - Change the Maximum File Size to 0 (zero) and verify if the Maximum File Size is now set by the System configurations"
	@priority = "4"
	test MaximumFileSizeIsSetBySystemConfigurationsWhenZero {
		property test.name.skip.portal.instance = "ObjectFields#MaximumFileSizeIsSetBySystemConfigurationsWhenZero";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151561",
			objectName = "CustomObject151561",
			pluralLabelName = "Custom Objects 151561");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151561");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		Type(
			locator1 = "ObjectField#INPUT_MAXIMUM_FILE_SIZE",
			value1 = "0");

		ObjectField.save();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151561");

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Upload Servlet Request",
			configurationScope = "System Scope");

		ServerAdministration.configureFileUploadOverallMaximumFileSize(maxFileSize = "102400");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151561");

		ObjectAutoGenerated.addAttachment(fileName = "Liferay Code of Business Conduct and Ethics.pdf");

		AssertElementPresent(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "An unexpected error occurred while uploading your file.");
	}

	@description = "LPS-143065 - Verify that the Request Files option is a required field"
	@priority = "4"
	test RequestFilesIsRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151558",
			objectName = "CustomObject151558",
			pluralLabelName = "Custom Objects 151558");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151558");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		Button.clickSave();

		FieldBase.assertRequiredFieldErrorPresent(fieldLabel = "Request Files");
	}

	@description = "LPS-148112 - Verify if field called Storage Folder have a default value"
	@priority = "4"
	test StorageFolderFieldHaveDefaultValue {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		AssertElementPresent(
			locator1 = "ObjectField#STORAGE_FOLDER_INPUT",
			value1 = "/CustomObject");
	}

	@description = "LPS-148112 - Verify if field called Storage Folder have help text"
	@priority = "4"
	test StorageFolderFieldHaveHelpText {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		var helpText = "Input the path of the chosen folder in Documents and Media. An example of a valid path is: \"/myDocumentsAndMediaFolder\".";

		AssertElementPresent(
			key_helpText = "${helpText}",
			locator1 = "ObjectField#HELP_TEXT",
			value1 = "${key_helpText}");
	}

	@description = "LPS-148112 - Verify if field called Storage Folder is required"
	@priority = "4"
	test StorageFolderFieldIsRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.typeStorageFolder(content = "");

		Button.clickSave();

		FieldBase.assertRequiredFieldErrorPresent(fieldLabel = "Storage Folder");
	}

}