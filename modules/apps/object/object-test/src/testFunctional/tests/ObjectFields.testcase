@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-146889 - Verify that when turn on the 'Set the Maximum Number of Characters' on a Long Text the Maximum Number of Characters field has the 65,000 value as default"
	@priority = 4
	test 65000IsDefaultMaximumCharacterLongText {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151572",
			objectName = "CustomObject151572",
			pluralLabelName = "Custom Objects 151572");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Long Text Field",
			fieldName = "customLongTextField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151572");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151572");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Long Text Field");

		ObjectField.checkLimitCharacters();

		ObjectField.assertValueOnLimitCharacters(maxValue = 65000);
	}

	@description = "Verify that all fields from the related object are displayed when adding filters for the long integer fields to select data from the object"
	@priority = 4
	test AllFieldsFromRelatedObjectAreDisplayedWhenFilteringLongIntegerFields {
		task ("Given: Two custom objects created with long integer fields and relationship with each other") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 1",
				objectName = "CustomObject1",
				pluralLabelName = "Custom Objects 1");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 2",
				objectName = "CustomObject2",
				pluralLabelName = "Custom Objects 2");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongInteger",
				fieldLabelName = "Custom Long Integer Field",
				fieldName = "customObjectField",
				fieldType = "Long",
				isRequired = "false",
				objectName = "CustomObject1");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongInteger",
				fieldLabelName = "Custom Long Integer Field",
				fieldName = "customObjectField",
				fieldType = "Long",
				isRequired = "false",
				objectName = "CustomObject2");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject1");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject2");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject1",
				objectName_2 = "CustomObject2",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");
		}

		task ("And Given: The custom object with a relationship has a layout created") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject1");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 1");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Custom Long Integer Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 1");

			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");

			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Long Integer Field");

			PortletEntry.save();

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");

			ObjectCustomViews.goToFiltersTab();

			ObjectCustomViews.addNewFilterViaUI(filterBy = "Create Date");

			PortletEntry.save();
		}

		task ("When: An entry is added and the filter is set in the view entry page") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject1",
				value = 123456789);

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject1",
				value = 987654321);

			ObjectAdmin.goToCustomObject(objectName = "CustomObject1");
		}

		task ("Then: The related filtered entry is shown") {
			ObjectCustomViews.clickOnFilterOnEntries();

			ObjectCustomViews.defineDateOnFilter(
				displayDateDay = DateUtil.getCurrentDate(),
				displayDateMonth = DateUtil.getCurrentMonth(),
				displayDateYear = DateUtil.getCurrentYear(),
				filterName = "Create Date");

			ObjectPortlet.viewEntry(entry = 123456789);
		}
	}

	@description = "LPS-146523 - Verify if the scope of the object is Virtual Instance (Company) I will be able to add from any folders I have access to"
	@priority = 4
	test CanAddFromAnyFolderWhenScopedByCompany {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151564",
			objectName = "CustomObject151564",
			pluralLabelName = "Custom Objects 151564");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151564");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151564");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151564");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ObjectField.addAnyFolder(folderName = "Folder 151564");
	}

	@description = "LPS-146523 - Verify if the scope of the object is Site, I will be able to add from the site I'm in or Asset Libraries connected to that site I have access to"
	@priority = 4
	test CanAddFromSiteAssetLibrariesWhenScopedBySite {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151566",
			objectName = "CustomObject151566",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 151566",
			scope = "site");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151566");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151566");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Custom Objects 151566");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ObjectField.addAnyFolder(folderName = "Folder 151566");
	}

	@description = "LPS-159151 - Verify that it's possible to create an Action with a custom field in a System Object"
	@priority = 4
	test CanCreateActionWithCustomFieldInSystemObjects {
		task ("Add a Custom Object and Custom Field (API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162194",
				objectName = "CustomObject162194",
				pluralLabelName = "Custom Objects 162194");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field A",
				fieldName = "customObjectFieldA",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject162194");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162194");
		}

		task ("Add a Custom Field and Action to the System Object Account") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field B",
				fieldName = "customObjectFieldB",
				fieldType = "String",
				isRequired = "true",
				objectName = "AccountEntry");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Account");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object 162194",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Add an entry and assert if the action was triggered") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject162194");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}
	}

	@description = "LPS-142659 - Verify it is possible to create a Clob field"
	@priority = 4
	test CanCreateClobField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 206",
			objectName = "CustomObject206",
			pluralLabelName = "Custom Objects 206");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 206");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Long Text");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "LongText");
	}

	@description = "LPS-135404 - Verify that it's possible to create new custom fields in a System Object"
	@priority = 5
	test CanCreateCustomFieldInSystemObject {
		property portal.acceptance = "true";

		task ("Go to Objects, select System Object Account and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Account");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Text",
				fieldName = "customText",
				fieldType = "Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Text",
				fieldType = "Text");
		}

		task ("Go to Objects, select System Object Commerce Product and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Integer",
				fieldType = "Integer");
		}

		task ("Go to Objects, select System Object Commerce Product Group and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product Group");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom long integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Integer",
				fieldName = "customLongInteger",
				fieldType = "Long Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Long Integer",
				fieldType = "LongInteger");
		}

		task ("Go to Objects, select System Object Commerce Order and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom date field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Date",
				fieldType = "Date");
		}

		task ("Go to Objects, select System Object Postal Address and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Postal Address");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Decimal",
				fieldName = "customDecimal",
				fieldType = "Decimal");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Decimal",
				fieldType = "Decimal");
		}

		task ("Go to Objects, select System Object User and click on fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "User");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add custom boolean field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Boolean",
				fieldName = "customBoolean",
				fieldType = "Boolean");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Boolean",
				fieldType = "Boolean");
		}
	}

	@description = "LPS-149625 - Verify that it's possible to create an object entry with aggregation field"
	@priority = 5
	test CanCreateEntryWithAggregationField {
		property portal.acceptance = "true";

		task ("Create Custom Object and Custom Relationship itself (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161890",
				objectName = "CustomObject161890",
				pluralLabelName = "Custom Objects 161890");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161890",
				objectName_2 = "CustomObject161890",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161890");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161890");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "ID",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("Assert that there is Custom Aggregation Field") {
			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation");
		}
	}

	@description = "LPS-164948 - Verify that the user is able to add formula fields when managing System Objects"
	@priority = 5
	test CanCreateFormulaFieldOnCustomObject {
		property custom.properties = "feature.flag.LPS-164948=true";
		property portal.acceptance = "true";

		task ("Given a Custom Object)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 176817",
				objectName = "CustomObject176817",
				pluralLabelName = "Custom Objects 176817");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");
		}

		task ("When managing Fields on Custom Object)") {
			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Formula Field",
				fieldType = "Formula",
				formulaFieldOption = "Decimal");
		}

		task ("Then add a Formula Field in the Custom Object)") {
			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Formula Field",
				fieldType = "Formula");
		}
	}

	@description = "LPS-164948 - Verify that the user is able to add formula fields when managing System Objects"
	@priority = 5
	test CanCreateFormulaFieldOnSystemObject {
		property portal.acceptance = "true";

		task ("Given: A System Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToFieldsTab();
		}

		task ("When: A formula field on system objects is created") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Formula Field",
				fieldType = "Formula",
				formulaFieldOption = "Decimal");
		}

		task ("Then: The formula field is present") {
			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Formula Field",
				fieldType = "Formula");
		}
	}

	@description = "LPS-135549 - Verify that it's possible to create an object entry with every field"
	@priority = 5
	test CanCreateObjectEntryWithEveryField {
		property portal.acceptance = "true";

		task ("Go to Picklist and create new Picklist and item") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Picklists");

			Picklist.addPicklistViaUI(picklistName = "Picklist Test");

			for (var numbers : list "1,2") {
				Picklist.gotoPicklistView(picklistName = "Picklist Test");

				Picklist.addPicklistItemViaUI(picklistItemName = "Picklist Item Test ${numbers}");

				Picklist.clickSaveButton();

				Refresh();
			}

			Navigator.openURL();
		}

		task ("Go to Objects and create Custom Object") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Objects");

			ObjectAdmin.addNewObject(
				fieldLabelName = "Custom Object 162140",
				pluralLabelName = "Custom Objects 162140");

			CreateObject.saveObject();
		}

		task ("Go to Custom Object > Fields") {
			ObjectPortlet.selectCustomObject(label = "Custom Object 162140");

			ObjectAdmin.goToFieldsTab();
		}

		task ("Add long integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Integer",
				fieldName = "customLongInteger",
				fieldType = "Long Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Long Integer",
				fieldType = "LongInteger");
		}

		task ("Add attachment field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldAttachment = "Upload Directly from the User's Computer",
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");
		}

		task ("Add text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Simple Text",
				fieldName = "customSimpleText",
				fieldType = "Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Simple Text",
				fieldType = "Text");
		}

		task ("Add picklist field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Picklist",
				fieldPicklist = "Picklist Test",
				fieldType = "Picklist");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Picklist",
				fieldType = "Picklist");
		}

		task ("Add date field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Date",
				fieldType = "Date");
		}

		task ("Add integer field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Integer",
				fieldType = "Integer");
		}

		task ("Add precision decimal field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Precision Decimal",
				fieldName = "customPrecisionDecimal",
				fieldType = "Precision Decimal");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Precision Decimal",
				fieldType = "PrecisionDecimal");
		}

		task ("Add decimal field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Decimal",
				fieldName = "customDecimal",
				fieldType = "Decimal");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Decimal",
				fieldType = "Decimal");
		}

		task ("Add rich text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Rich Text",
				fieldName = "customRichText",
				fieldType = "Rich Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Rich Text",
				fieldType = "RichText");
		}

		task ("Add boolean field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Boolean",
				fieldName = "customBoolean",
				fieldType = "Boolean");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Boolean",
				fieldType = "Boolean");
		}

		task ("Add long text field") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Text",
				fieldName = "customLongText",
				fieldType = "Long Text");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Long Text",
				fieldType = "LongText");
		}

		task ("Publish Custom Object") {
			ObjectAdmin.goToDetailsTab();

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

			ObjectAdmin.publishObjectViaUI();
		}

		task ("Go to Custom Object entries and add an entry") {
			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Custom Objects 162140");
		}

		task ("Create an entry (fill all fields)") {
			LexiconEntry.gotoAdd();

			WaitForPageLoad();

			Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

			ObjectPortlet.typeCustomField(
				customField = "Custom Decimal",
				entry = "12.34");

			ObjectPortlet.typeCustomField(
				customField = "Custom Integer",
				entry = 1234);

			ObjectPortlet.typeCustomField(
				customField = "Custom Long Integer",
				entry = 1122334455);

			ObjectPortlet.typeCustomField(
				customField = "Precision Decimal",
				entry = "1.5");

			FormViewBuilder.editClobText(fieldLong = "Text written on long text");

			ObjectPortlet.typeCustomField(
				customField = "Simple Text",
				entry = "Text written on simple text");

			ObjectAutoGenerated.typeAndSelectTextOnRichText(text = "Text written on rich text");

			Type(
				locator1 = "ObjectPortlet#VIEW_EMPTY_LABEL_IN_DATE_ENTRY",
				value1 = "01/01/2022");

			Click(locator1 = "ObjectAdmin#ENTRY_CHOOSE_OPTION");

			Click(
				key_picklistOption = "Picklist Item Test 1",
				locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");

			WaitForPageLoad();

			ObjectAutoGenerated.clickSelectFile();

			var filePath = TestCase.getDependenciesDirPath(fileName = "LiferayLogo.png");

			UploadFile(
				locator1 = "TextInput#FILE",
				value1 = ${filePath});

			PortletEntry.save();
		}

		task ("Assert entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162140");

			for (var asserts : list "Yes,12.34,1234,1122334455,1.5,Text written on long text,Text written on simple text,Text written on rich text,Picklist Item Test 1,LiferayLogo") {
				ObjectPortlet.viewEntry(entry = ${asserts});
			}

			ObjectPortlet.viewEntry(entry = "Jan 1, 2022");
		}
	}

	@description = "LPS-148112 - Verify that File Size and Format defined by admin are working correctly when using the 'Show Files' option"
	@priority = 4
	test CanDefineMaximumFileSizeOnShowFilesOption {
		task ("Add new Custom Object (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 153423",
				objectName = "CustomObject153423",
				pluralLabelName = "Custom Objects 153423");
		}

		task ("Go to Custom Object and add Custom Attachment Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 153423");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				enableShowFiles = "true",
				fieldAttachment = "Upload Directly from the User's Computer",
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");
		}

		task ("Go to Custom Attachment and define maximum file size") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

			Type(
				locator1 = "ObjectField#INPUT_MAXIMUM_FILE_SIZE",
				value1 = 1);

			PortletEntry.save();
		}

		task ("Publish the Custom Object (via API)") {
			Navigator.openURL();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153423");
		}

		task ("Try adding an entry bigger than the value set before and assert error") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153423");

			ObjectAutoGenerated.addAttachment(fileName = "Liferay Code of Business Conduct and Ethics.pdf");

			AssertElementPresent(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a file with a valid file size no larger than 1 MB.");
		}

		task ("Add an entry smaller than the value set before") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153423");

			ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

			PortletEntry.save();
		}

		task ("Assert that the entry smaller than the value set was added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153423");

			ObjectPortlet.viewEntry(entry = "LiferayLogo.png");
		}
	}

	@description = "LPS-149625 - Verify that it's possible to delete an aggregation field"
	@priority = 4
	test CanDeleteAggregationField {
		task ("Create Custom Object and Custom Relationship itself (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161892",
				objectName = "CustomObject161892",
				pluralLabelName = "Custom Objects 161892");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161892",
				objectName_2 = "CustomObject161892",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161892");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161892");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Count",
				relationship = "Relationship");
		}

		task ("Assert that is possible to delete Custom Aggregation Field") {
			ObjectAdmin.deleteObjectField(fieldName = "Custom Aggregation");

			ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Aggregation");
		}
	}

	@description = "LPS-135404 - Verify that it's possible to delete created custom fields in a System Object"
	@priority = 4
	test CanDeleteCustomFieldInSystemObject {
		task ("Create Custom Fields (via API)") {
			for (var systemNames : list "AccountEntry,CPDefinition,CommercePricingClass,CommerceOrder,Address,User") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Text",
					fieldName = "customText",
					fieldType = "String",
					isRequired = "false",
					objectName = ${systemNames});
			}
		}

		task ("Go to System Objects and delete your custom fields") {
			for (var systemNames : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
				ObjectAdmin.openObjectAdmin();

				ObjectPortlet.selectSystemObject(label = ${systemNames});

				ObjectAdmin.goToFieldsTab();

				ObjectAdmin.deleteObjectField(fieldName = "Custom Text");

				ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Text");
			}
		}
	}

	@description = "LPS-148112 - Verify if turn off the 'Show files' option on field settings"
	@priority = 4
	test CanDisableShowFilesOptionOnFieldSettings {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		Uncheck.uncheckNotVisible(
			key_toggleSwitchLabel = "Show Files in Documents and Media",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		ObjectField.save();
	}

	@description = "LPS-149625 - Verify that it's possible to edit an aggregation field"
	@priority = 4
	test CanEditAggregationField {
		task ("Create Custom Object and Custom Relationship itself (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161891",
				objectName = "CustomObject161891",
				pluralLabelName = "Custom Objects 161891");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161891",
				objectName_2 = "CustomObject161891",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161891",
				objectName_2 = "CommerceOrder",
				relationshipLabel = "RelationshipCommerce",
				relationshipName = "relationshipCommerce",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161891");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161891");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "Order Status",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "RelationshipCommerce");
		}

		task ("Edit Custom Aggregation Field") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Aggregation");

			ObjectField.typeLabel(content = "Custom Aggregation Update");

			AssertElementPresent(locator1 = "ObjectField#NAME_FIELD_DISABLED");

			AssertElementPresent(locator1 = "ObjectField#TYPE_FIELD_DISABLED");

			Click(locator1 = "ObjectField#LABEL_RELATIONSHIP");

			Click(
				key_dropdownItem = "RelationshipCommerce",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			Click(
				key_filterLabel = "Function",
				locator1 = "ObjectCustomViews#SELECT_FILTER_GENERIC");

			Click(
				key_fieldType = "Min",
				locator1 = "ObjectField#TYPE_OPTION");

			Click(locator1 = "ObjectField#LABEL_FIELD");

			Click(
				key_dropdownItem = "ID",
				locator1 = "ObjectAdmin#SELECT_DROPDOWN_ITEM_DEFAULT_VALUE");

			ObjectField.save();
		}

		task ("Assert that Custom Aggregation Field is updated") {
			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Aggregation Update",
				fieldType = "Aggregation");
		}
	}

	@description = "LPS-148112 - Verify that admin can edit the Storage Folder path in Published objects"
	@priority = 4
	test CanEditPublishedObjectStorageFolder {
		task ("Add new Custom Object scoped by site (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 153424",
				objectName = "CustomObject153424",
				panelCategoryKey = "site_administration.content",
				pluralLabelName = "Custom Objects 153424",
				scope = "site");
		}

		task ("Go to Custom Object and add Custom Attachment Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 153424");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				enableShowFiles = "true",
				fieldAttachment = "Upload Directly from the User's Computer",
				fieldLabel = "Custom Attachment",
				fieldType = "Attachment");
		}

		task ("Publish the Custom Object (via UI)") {
			ObjectAdmin.goToDetailsTab();

			ObjectAdmin.publishObjectViaUI();

			ObjectAdmin.goToFieldsTab();
		}

		task ("Go to Custom Attachment and change storage folder") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

			ObjectField.typeStorageFolder(content = "/folderDM");

			PortletEntry.save();
		}

		task ("Add an entry on Custom Object") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject153424");

			ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

			PortletEntry.save();
		}

		task ("Go to Documents and Media") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Documents and Media");
		}

		task ("Assert that was added the new folder with file added") {
			DMNavigator.gotoFolder(dmFolderName = "folderDM");

			DMDocument.viewStatus(
				dmDocumentStatus = "Approved",
				dmDocumentTitle = "LiferayLogo");
		}
	}

	@description = "LPS-154872 - Verify that it's possible to filter and sort entries using metadata fields"
	@priority = 4
	test CanFilterAndSortEntriesViaMetadataFields {
		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161889",
				objectName = "CustomObject161889",
				pluralLabelName = "Custom Objects 161889");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject161889");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161889");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161889");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		var listMetaData = "Author,Create Date,External Reference Code,ID,Modified Date";

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Author,Create Date,Custom Field,External Reference Code,ID,Modified Date");
		}

		task ("Set order to ERC on Default Sort") {
			ObjectCustomViews.goToDefaultSortTab();

			for (var columnName : list ${listMetaData}) {
				ObjectCustomViews.addDefaultSort(
					columnOption = ${columnName},
					sortOption = "Ascending");
			}

			for (var columnName : list ${listMetaData}) {
				ObjectCustomViews.assertColumnPresentOnDefaultSort(
					columnName = ${columnName},
					sortingLabel = "Ascending");
			}

			PortletEntry.save();
		}

		task ("Create an entry via API") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject161889",
					value = "Entry ${letters}");
			}
		}

		task ("Go to the Custom Object entries and assert the columns are present") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161889");

			for (var columnName : list ${listMetaData}) {
				ObjectPortlet.assertEntryColumnPresent(column = ${columnName});
			}
		}

		task ("Click on arrows and assert the entries change the position") {
			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry A",
				position = 1);

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry B",
				position = 2);

			Click(
				key_orderColumn = "Create Date",
				locator1 = "ObjectPortlet#ARROW_ORDER_COLUMN");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry B",
				position = 1);

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = "Entry A",
				position = 2);
		}
	}

	@description = "LPS-154872 - Verify that it's possible to import and export metadata fields"
	@priority = 4
	test CanImportAndExportMetadataFields {
		task ("Given a power user") {
			task ("Create Custom Object and Custom Field") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "Custom Object",
					objectName = "CustomObject",
					pluralLabelName = "Custom Objects");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Field",
					fieldName = "customField",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject");

				ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
			}
		}

		task ("When exporting or importing objects' structures") {
			task ("Export object structure") {
				ObjectAdmin.openObjectAdmin();

				ObjectExportImport.exportObject(
					objectLabel = "Custom Object",
					objectName = "CustomObject");
			}

			task ("Import object structure") {
				ObjectExportImport.importObject(
					objectFileName = "ImportedObjectWithField",
					objectName = "ImportedCustomObject");
			}
		}

		task ("Then I must be able to export or import metadata fields and information") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Imported Object With Field");

			ObjectAdmin.gotoTab(tabName = "Fields");

			var listMetaData = "Author,Create Date,Modified Date,Status,ID";

			for (var metadata : list ${listMetaData}) {
				AssertVisible(
					key_label = ${metadata},
					locator1 = "ObjectAdmin#SELECT_OBJECT_FIELD");
			}
		}
	}

	@description = "LPS-165995 - Verify that a message is displayed when the user tries to add more than 16 digits to a long integer field"
	@priority = 4
	test CanNotAddMoreThan16DigitsToLongIntField {
		task ("Given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 165995",
				objectName = "CustomObject165995",
				pluralLabelName = "Custom Objects 165995");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongInteger",
				fieldLabelName = "Custom Long Int Field",
				fieldName = "customLongIntField",
				fieldType = "Clob",
				isRequired = "false",
				objectName = "CustomObject165995");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject165995");
		}

		task ("When a entry more than 16 digits is added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject165995");

			ObjectPortlet.addSingleFieldEntryViaUI(
				entry = 11111111111111111,
				invalidEntry = "true");
		}

		task ("Then the error message is displayed on the page") {
			AssertElementPresent(
				locator1 = "Message#ERROR",
				value1 = "Object entry value exceeds long field allowed size");
		}
	}

	@description = "LPS-161887 - Verify that it's not possible to create an Object without adding a field."
	@priority = 5
	test CannotCreateEmptyObject {
		task ("Given: an object without an field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");
		}

		task ("When a empty is published") {
			Button.clickPublish();
		}

		task ("Then the error message is displayed on the page") {
			AssertTextPresent(
				locator1 = "Message#ALERT_DISMISSIBLE",
				value1 = "At least one custom field must be added.");
		}

		task ("And the Object that was created is show with Draft") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.assertObjectStatus(
				label = "Custom Object",
				status = "Draft");
		}
	}

	@description = "LPS-162174 - Verify that it is not possible to edit ERC fields in Objects management."
	@priority = 5
	test CannotEditERCField {
		property portal.acceptance = "true";

		task ("Given a custom object is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162174",
				objectName = "CustomObject162174",
				pluralLabelName = "Custom Objects 162174");
		}

		task ("When the user accesses the External Reference Code details on the new object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162174");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "External Reference Code");
		}

		task ("Then the Field Name and Type inputs are disabled and cannot be edited") {
			AssertElementPresent(locator1 = "ObjectField#NAME_FIELD_DISABLED");

			AssertElementPresent(locator1 = "ObjectField#TYPE_FIELD_DISABLED");
		}
	}

	@description = "LPS-162182 - Verify that it is not possible to edit ERC fields in Objects management."
	@priority = 4
	test CannotFilterWithERCField {
		task ("Given a custom object is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162182",
				objectName = "CustomObject162182",
				pluralLabelName = "Custom Objects 162182");
		}

		task ("When the user goes to Views Tab and Creates a new filter") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162182");

			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");

			ObjectCustomViews.goToFiltersTab();

			Click(locator1 = "ObjectCustomViews#ADD_BUTTON_FILTERS");

			Click(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");
		}

		task ("Then the user is unable to filter by ERC") {
			AssertElementNotPresent(
				key_picklistOption = "External Reference Code",
				locator1 = "Picklist#PICKLIST_KEBAB_MENU_OPTION");
		}
	}

	@description = "This is a use case for LPS-156704 - Verify that the user cannot insert an invalid date in an object field."
	@priority = 2
	test CannotInsertInvalidDate {
		task ("Given an object is created with a date field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 165994",
				objectName = "CustomObject165994",
				pluralLabelName = "Custom Objects 165994");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 165994");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Field",
				fieldType = "Date");

			ObjectAdmin.assertObjectField(
				fieldLabel = "Custom Field",
				fieldType = "Date");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject165994");
		}

		task ("When an entry is created and the date is invalid") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject165994");

			LexiconEntry.gotoAdd();

			WaitForPageLoad();

			Type(
				locator1 = "ObjectPortlet#VIEW_EMPTY_LABEL_IN_DATE_ENTRY",
				value1 = "23/01/2020");

			PortletEntry.save();
		}

		task ("Then the entry date should be show as blank") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject165994");

			ObjectPortlet.viewEntry(entry = "");
		}
	}

	@description = "LPS-156704 - Verify that the user is not able to order the object entry's table by the aggregation field column"
	@priority = 4
	test CanNotOrderByAggregationFieldColumn {
		task ("Create Custom Object and Custom Relationship with Account (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 165992",
				objectName = "CustomObject165992",
				pluralLabelName = "Custom Objects 165992");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject165992",
				objectName_2 = "AccountEntry",
				relationshipLabel = "RelationshipAccount",
				relationshipName = "relationshipAccount",
				relationshipType = "oneToMany");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text Field",
				fieldName = "customTextField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject165992");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject165992");
		}

		task ("Go to Custom Object > Fields tab and add Custom Aggregation Field (via UI)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 165992");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "ID",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "RelationshipAccount");
		}

		task ("Go to Custom Object > Add entry and Assert the sort button is not present") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customTextField",
				objectName = "CustomObject165992",
				value = "Test Entry");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject165992");

			AssertElementNotPresent(
				key_orderColumn = "Custom Aggregation",
				locator1 = "ObjectPortlet#ARROW_ORDER_COLUMN");
		}
	}

	@description = " LPS-162175 - Verify that the ERC field is not displayed on the Objects entry table"
	@priority = 4
	test CannotSeeERCFieldOnObjectEntryTable {
		property portal.acceptance = "true";

		task ("Given an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 158821",
				objectName = "CustomObject158821",
				pluralLabelName = "Custom Objects 158821");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject158821");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject158821");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject158821",
				value = "Entry Test");
		}

		task ("When the user views the object entry table") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 158821");

			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");

			ObjectCustomViews.goToViewsBuilderTab();
		}

		task ("Then the ERC field shouldn't be seen") {
			ObjectPortlet.assertEntryColumnNotPresent(column = "External Reference Code");

			ObjectPortlet.assertEntryColumnNotPresent(column = "ERC");
		}
	}

	@description = "LPS-146889 - Verify that when turn on the 'Set the Maximum Number of Characters' the user is not allowed to type any value outside the informed range on the help text"
	@priority = 4
	test CannotTypeValueOutsideRange {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151573",
			objectName = "CustomObject151573",
			pluralLabelName = "Custom Objects 151573");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Text Field",
			fieldName = "customTextField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject151573");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151573");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Text Field");

		ObjectField.checkLimitCharacters();

		ObjectField.assertValueOnLimitCharacters(maxValue = 280);

		ObjectField.typeValueOnLimitCharacters(newValue = 281);

		AssertElementNotPresent(
			key_maxValue = 281,
			locator1 = "ObjectField#MAXIMUM_NUMBER_CHARACTERS_OPTION");

		ObjectField.assertValueOnLimitCharacters(maxValue = 28);
	}

	@description = "LPS-148112 - Verify that attchment field is working fine to the selecting Request Files: Directly from User's Computer when 'Show files' option is off"
	@priority = 4
	test CanSaveDirectlyFromUsersComputerOptionWithShowFilesDisable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153414",
			objectName = "CustomObject153414",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 153414",
			scope = "site");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153414");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153414");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153414");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153414");

		ObjectPortlet.viewEntry(entry = "LiferayLogo.png");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		AssertElementNotPresent(
			key_dmFolderName = "CustomObject153414",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE");
	}

	@description = "LPS-162177 - Verify the ERC element is included in Actions - Expression Builder"
	@priority = 5
	test CanSeeERCFieldOnActionSidebar {
		property portal.acceptance = "true";

		task ("Given a custom object is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162177",
				objectName = "CustomObject162177",
				pluralLabelName = "Custom Objects 162177");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162177");
		}

		task ("When the user navigates to the Actions tab and opens the Expression Builder") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.gotoAddObjectAction();

			Click(
				key_tabName = "Action Builder",
				locator1 = "ObjectAction#TAB_GENERIC");

			ObjectAdmin.enableCondition();

			Click.javaScriptClick(
				key_title = "Expand input area.",
				locator1 = "Button#ANY_TITLE");
		}

		task ("Then External Reference Code is included in the list of elements") {
			SelectFrameTop();

			AssertElementPresent(
				key_element = "External Reference Code",
				locator1 = "ObjectAdmin#SIDEBAR_ELEMENT_BUTTON");
		}
	}

	@description = "LPS-162176 - Verify that the ERC is displayed on the object definition page"
	@priority = 5
	test CanSeeERCFieldOnObjectPage {
		task ("Given an object is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162176",
				objectName = "CustomObject162176",
				pluralLabelName = "Custom Objects 162176");
		}

		task ("When the user navigates to the object definition") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162176");
		}

		task ("Then the ERC is present on the page") {
			AssertElementPresent(locator1 = "ObjectAdmin#EXTERNAL_REFERENCE_CODE");
		}
	}

	@description = "Verify that it's possible to see the custom field label and system field label"
	@priority = 5
	test CanSeeFieldLabel {
		property custom.properties = "feature.flag.LPS-158456=true";
		property portal.acceptance = "true";

		task ("Add an object, go to the fields tab and state whether the system fields have the label System") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToFieldsTab();

			AssertElementPresent(
				key_label = "Create Date",
				key_source = "System",
				locator1 = "ObjectField#SOURCE_FIELD");
		}

		task ("Add a new field and state that custom fields have the label Custom") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Field",
				fieldType = "Text");

			AssertElementPresent(
				key_label = "Custom Field",
				key_source = "Custom",
				locator1 = "ObjectField#SOURCE_FIELD");
		}
	}

	@description = "LPS-164948 - Verify that there is help text on Formula Builder"
	@priority = 2
	test CanSeeHelpTextOnFormulaBuilder {
		property custom.properties = "feature.flag.LPS-164948=true";

		task ("Given: A System Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToFieldsTab();
		}

		task ("When: A formula field on system objects is created") {
			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Formula Field",
				fieldType = "Formula",
				formulaFieldOption = "Decimal");

			ObjectAdmin.goToFieldsDetails(label = "Custom Formula Field");
		}

		task ("Then: Formula Builder has a help text") {
			AssertElementPresent(
				key_helpText = "Use expressions to create a condition. Click on the button to expand the expression input area.",
				locator1 = "ObjectField#HELP_TEXT");
		}
	}

	@description = "LPS-158821 - Verify that the user is able to set the ERC field as a Title Field"
	@priority = 4
	test CanSetERCFieldAsTitleField {
		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162184",
				objectName = "CustomObject162184",
				pluralLabelName = "Custom Objects 162184");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162184");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162184");
		}

		task ("Select title field and assert it") {
			CreateObject.selectTitleField(fieldLabel = "External Reference Code");

			CreateObject.saveObject();

			CreateObject.assertTitleFieldIsSelected(fieldLabel = "External Reference Code");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162184");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");

			PortletEntry.save();
		}

		task ("Create an entry via API") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject162184",
				value = "Entry Test");
		}

		task ("Assert that it's possible to see entry with ERC") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162184");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			for (var columnName : list "Custom Field,External Reference Code") {
				ObjectPortlet.assertEntryColumnPresent(column = ${columnName});
			}
		}
	}

	@description = "LPS-158821 - Verify that the user is able to use the ERC field in Sort, on the Custom Views tab"
	@priority = 4
	test CanSortWithERCField {
		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162181",
				objectName = "CustomObject162181",
				pluralLabelName = "Custom Objects 162181");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162181");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162181");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162181");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");
		}

		task ("Set order to ERC on Default Sort") {
			ObjectCustomViews.goToDefaultSortTab();

			ObjectCustomViews.addDefaultSort(
				columnOption = "External Reference Code",
				sortOption = "Ascending");

			ObjectCustomViews.assertColumnPresentOnDefaultSort(
				columnName = "External Reference Code",
				sortingLabel = "Ascending");

			PortletEntry.save();
		}

		task ("Create an entry via API") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject162181",
					value = "Entry ${letters}");
			}
		}

		task ("Go to Custom Object entries and assert that the column ERC is present") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162181");

			ObjectPortlet.assertEntryColumnPresent(column = "External Reference Code");
		}

		var entryOne = selenium.getText("ObjectCustomViews#CUSTOM_FIELD_VALUE_ONE");
		var entryTwo = selenium.getText("ObjectCustomViews#CUSTOM_FIELD_VALUE_TWO");

		task ("Click on arrows and assert the entries change the position") {
			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = ${entryOne},
				position = 1);

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = ${entryTwo},
				position = 2);

			Click(
				key_orderColumn = "External Reference Code",
				locator1 = "ObjectPortlet#ARROW_ORDER_COLUMN");

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = ${entryTwo},
				position = 1);

			ObjectCustomViews.viewFieldsEntryByPosition(
				entryName = ${entryOne},
				position = 2);
		}
	}

	@description = "LPS-135404 - Verify that it's possible to update created custom fields in a System Object"
	@priority = 4
	test CanUpdateCustomFieldInSystemObject {
		task ("Create Custom Fields (via API)") {
			for (var systemNames : list "AccountEntry,CPDefinition,CommercePricingClass,CommerceOrder,Address,User") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Text",
					fieldName = "customText",
					fieldType = "String",
					isRequired = "false",
					objectName = ${systemNames});
			}
		}

		task ("Go to System Objects and edit your custom fields") {
			for (var systemNames : list "Account,Commerce Product,Commerce Product Group,Commerce Order,Postal Address,User") {
				ObjectAdmin.openObjectAdmin();

				ObjectPortlet.selectSystemObject(label = ${systemNames});

				ObjectAdmin.goToFieldsTab();

				ObjectAdmin.goToFieldsDetails(label = "Custom Text");

				ObjectField.typeLabel(content = "Custom Field Update");

				AssertElementPresent(locator1 = "ObjectField#NAME_FIELD_DISABLED");

				AssertElementPresent(locator1 = "ObjectField#TYPE_FIELD_DISABLED");

				ObjectField.save();

				WaitForSPARefresh();

				ObjectAdmin.assertObjectField(
					fieldLabel = "Custom Field Update",
					fieldType = "Text");
			}
		}
	}

	@description = "LPS-148112 - Verify if on the side panel the 'Show files' path can be edited"
	@priority = 4
	test CanUpdateShowFilesOptionBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153420",
			objectName = "CustomObject153420",
			pluralLabelName = "Custom Objects 153420");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153420");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.viewToogleOnSidePanelShowFilesInDM(isDisabled = "No");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153420");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153420");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.viewToogleOnSidePanelShowFilesInDM(isDisabled = "Yes");
	}

	@description = "LPS-158821 - Verify that the user is able to use the ERC field in View Builder, on the Custom Views tab"
	@priority = 5
	test CanUseERCFieldWithCustomView {
		property portal.acceptance = "true";

		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162180",
				objectName = "CustomObject162180",
				pluralLabelName = "Custom Objects 162180");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162180");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162180");
		}

		task ("Go to Custom Object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162180");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");

			PortletEntry.save();
		}

		task ("Create an entry via API") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject162180",
				value = "Entry Test");
		}

		task ("Assert the entry is visible with an ERC column") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162180");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.assertEntryColumnPresent(column = "External Reference Code");
		}
	}

	@description = "LPS-158821 - Verify that the user is able to use the ERC field in Expression Builder, on the Validations tab"
	@priority = 4
	test CanUseERCFieldWithExpressionBuilder {
		task ("Create Custom Object and Custom Field (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162179",
				objectName = "CustomObject162179",
				pluralLabelName = "Custom Objects 162179");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162179");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162179");
		}

		task ("On Custom Object, go to Validations tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162179");

			ObjectAdmin.goToValidationsTab();
		}

		task ("Add a Custom Validation using an expression 'is Greater Than'") {
			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "customObjectField == externalReferenceCode");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");

			PortletEntry.save();
		}

		task ("Assert the entry is created only when the ERC value is greater than the integer value") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject162179");

			ObjectPortlet.addCustomFieldEntryViaUI(
				customField = "Custom Field",
				entry = "Entry Test",
				invalidEntry = "true");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");
		}
	}

	@description = "LPS-162178 - Verify that the user is able to use the ERC field in Groovy Scripts, on the Validations tab"
	@priority = 5
	test CanUseERCFieldWithGroovyScript {
		property portal.acceptance = "true";

		task ("Given: An object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 162178",
				objectName = "CustomObject162178",
				pluralLabelName = "Custom Objects 162178");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject162178");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject162178");
		}

		task ("And: Add a Custom Validation using a Groovy Script") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 162178");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Groovy");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "invalidFields = (customObjectField == externalReferenceCode)");

			ObjectCustomValidation.addErrorMessage(errorMessage = "This entry is not possible.");

			PortletEntry.save();
		}

		task ("When: Create Custom View, mark Custom View as default, go to View Builder and add ERC") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");

			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Custom Field,External Reference Code");

			PortletEntry.save();
		}

		task ("Then: Assert the error message display") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject162178",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject162178");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.assertEntryColumnPresent(column = "External Reference Code");

			var externalReferenceCodeId = selenium.getText("//div[contains(@class,'dnd-tbody')]//*[contains(text(),'Entry Test')]/parent::div/following-sibling::div//a");

			ObjectPortlet.updateEntry(
				entry = "Entry Test",
				invalidEntry = "true",
				updateEntry = ${externalReferenceCodeId});

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "This entry is not possible.");
		}
	}

	@description = "LPS-148112 - Verify if on the side panel that only valid paths can be used on the 'Show files' settings"
	@priority = 4
	test CanValidOnlyPathsDefinedOnShowFilesOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153421",
			objectName = "CustomObject153421",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 153421",
			scope = "site");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153421");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.typeStorageFolder(content = "/folderDM");

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153421");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153421");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		PortletEntry.save();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject153421");

		ObjectPortlet.viewEntry(entry = "LiferayLogo.png");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		AssertElementNotPresent(
			key_dmFolderName = "CustomObject153421",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE");

		DMNavigator.gotoFolder(dmFolderName = "folderDM");

		DMDocument.viewStatus(
			dmDocumentStatus = "Approved",
			dmDocumentTitle = "LiferayLogo");
	}

	@description = "LPS-143065 - Verify if the 'Attachment' option is shown on the 'Type' dropdown"
	@priority = 5
	test CanViewAttachmentOption {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151557",
			objectName = "CustomObject151557",
			pluralLabelName = "Custom Objects 151557");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151557");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectField#TYPE_FIELD");

		AssertElementPresent(
			key_fieldType = "Attachment",
			locator1 = "ObjectField#TYPE_OPTION");

		AssertTextEquals(
			key_type = "Attachment",
			locator1 = "ObjectField#FIELD_TYPE_DESCRIPTION",
			value1 = "Upload files or select from Documents and Media.");
	}

	@description = "LPS-143065 - Verify if there is an option on Request Files: Directly from User's Computer"
	@priority = 4
	test CanViewDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151559",
			objectName = "CustomObject151559",
			pluralLabelName = "Custom Objects 151559");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151559");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.assertOptionAndDescriptionOnRequestFiles(
			description = "Files can be stored in an object entry or in a specific folder in Documents and Media.",
			option = "Upload Directly from the User's Computer");
	}

	@description = "LPS-146523 - Verify if there's an option on Request Files: Upload and Select from Documents and Media Item Selector"
	@priority = 5
	test CanViewDocumentsAndMediaOption {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151562",
			objectName = "CustomObject151562",
			pluralLabelName = "Custom Objects 151562");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151562");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.assertOptionAndDescriptionOnRequestFiles(
			description = "Users can upload or select existing files from Documents and Media.",
			option = "Upload or Select from Documents and Media Item Selector");
	}

	@description = "LPS-147944 - Verify it is possible to view more than 20 picklists for the picklist drop-down"
	@priority = 4
	test CanViewMoreThan20Picklists {
		for (var numberPicklist : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist ${numberPicklist}");
		}

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 149248",
			objectName = "CustomObject149248",
			pluralLabelName = "Custom Objects 149248");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 149248");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectField#LABEL_INPUT",
			value1 = "Custom Picklist");

		ObjectField.selectType(fieldType = "Picklist");

		Click(locator1 = "ObjectAdmin#OBJECT_FIELDS_PICKLIST");

		for (var numberPicklist : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21") {
			ObjectAdmin.viewPicklistOptionsOnFields(optionName = "Custom Picklist ${numberPicklist}");
		}
	}

	@description = "LPS-148112 - Verify if when selecting the option on Request Files: Directly from User's Computer the toggle is OFF by default"
	@priority = 4
	test CanViewOptionsDisableWhenSelectDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.selectOptionOnRequestFiles(option = "Upload Directly from the User's Computer");

		Uncheck.uncheckNotVisible(
			key_toggleSwitchLabel = "Show Files in Documents and Media",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
	}

	@description = "LPS-148112 - Verify if when selecting the option on Request Files: Directly from User's Computer there is a Toggle"
	@priority = 4
	test CanViewOptionsWhenSelectDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_labelName = "Show Files in Documents and Media",
			locator1 = "ObjectField#DEFAULT_TOGGLE_SWITCH");

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.selectOptionOnRequestFiles(option = "Upload Directly from the User's Computer");

		AssertElementPresent(
			key_labelName = "Show Files in Documents and Media",
			locator1 = "ObjectField#DEFAULT_TOGGLE_SWITCH");
	}

	@description = "LPS-146889 - Verify that 'Set the Maximum Number of Characters' toggle is available for Text and Long Text fields"
	@priority = 5
	test CanViewSetMaximumCharactersOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151569",
			objectName = "CustomObject151569",
			pluralLabelName = "Custom Objects 151569");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field Text",
			fieldName = "customObjectFieldText",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject151569");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field Long Text",
			fieldName = "customObjectFieldLongText",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151569");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151569");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151569");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field Text");

		ObjectField.checkLimitCharacters();

		ObjectField.assertHelpText(helpText = "Set the maximum number of characters accepted. This value cannot be less than 1 or greater than 280");

		ObjectField.assertValueOnLimitCharacters(maxValue = 280);

		ObjectField.save();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field Long Text");

		ObjectField.checkLimitCharacters();

		ObjectField.assertHelpText(helpText = "Set the maximum number of characters accepted. This value cannot be less than 1 or greater than 65,000");

		ObjectField.assertValueOnLimitCharacters(maxValue = 65000);

		ObjectField.save();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151569");

		LexiconEntry.gotoAdd();

		AssertElementPresent(
			key_fieldName = "customObjectFieldText",
			key_viewCountCharacters = "0/280 Characters",
			locator1 = "ObjectField#VIEW_COUNT_CHARACTERS_ON_ENTRIES");

		AssertElementPresent(
			key_fieldName = "customObjectFieldLongText",
			key_viewCountCharacters = "0/65000 Characters",
			locator1 = "ObjectField#VIEW_COUNT_CHARACTERS_ON_ENTRIES");
	}

	@description = "LPS-143065 - Verify if a side panel containing the Field name, Typem Request Files, Accepted File Extensions, and Maximum File Size fields"
	@priority = 4
	test CanViewSidePanelOptions {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151560",
			objectName = "CustomObject151560",
			pluralLabelName = "Custom Objects 151560");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151560");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		AssertElementPresent(locator1 = "ObjectField#LABEL_ACCEPTED_FILE_EXTENSIONS");

		AssertElementPresent(locator1 = "ObjectField#LABEL_MAXIMUM_FILE_SIZE");
	}

	@description = "LPS-148112 - Verify if after create a attachment field with option Request Files: Directly from User's Computer selected and when the 'Show files' is enabled there is a new configuration field called Storage Folder"
	@priority = 4
	test CanViewStorageFolderWhenShowFilesIsEnable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		AssertElementPresent(locator1 = "ObjectField#LABEL_STORAGE_FOLDER");
	}

	@description = "LPS-148112 - Verify if when selecting the option on Request Files: Directly from User's Computer there is a tooltip on the Toggle"
	@priority = 4
	test CanViewTootipWhenSelectDirectlyFromUsersComputerOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		ObjectField.selectOptionOnRequestFiles(option = "Upload Directly from the User's Computer");

		AssertElementPresent(
			key_text = "question-circle-full",
			locator1 = "Icon#ANY");
	}

	@description = "LPS-144902 - Verify there is a description of each Field Type"
	@priority = 4
	test DescriptionForEachFieldType {
		property osgi.module.configuration.file.names = "com.liferay.object.web.internal.configuration.FFObjectFieldBusinessTypeConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147723",
			objectName = "CustomObject147723",
			pluralLabelName = "Custom Objects 147723");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 147723");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectField#TYPE_FIELD");

		ObjectAdmin.viewDescriptionForEachFieldType();
	}

	@description = "LPS-145661 - Verify that the field type names are displayed on the Layout Builder when a field is added"
	@priority = 4
	test DisplayFieldTypesOnLayoutBuilder {
		task ("Given that an object and fields are created for that object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161905",
				objectName = "CustomObject161905",
				pluralLabelName = "Custom Objects 161905");

			for (var valueField : list "A,B") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Field ${valueField}",
					fieldName = "customObjectField${valueField}",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject161905");
			}
		}

		task ("When a Layout is added to the object") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Test",
				objectName = "CustomObject161905");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161905");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161905");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "View",
				objectLabel = "Layout Test");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			for (var valueField : list "A,B") {
				ObjectAdmin.addTabFieldsOnLayout(
					blockName = "Block Test",
					columnsNumber = 1,
					fieldList = "Custom Field ${valueField}",
					tabName = "Tab Test");
			}
		}

		task ("Then the field type names are displayed on the Layout Builder when a field is added") {
			for (var fieldLabelName : list "Custom Field A,Custom Field B") {
				AssertElementPresent(
					key_fieldLabelName = ${fieldLabelName},
					locator1 = "CreateObject#FIELD_ADDED_ON_BLOCK");
			}
		}
	}

	@description = "LPS-146523 - Verify if the default folder will be the Documents and Media Home Folder of that specific site"
	@priority = 4
	test DocumentsAndMediaHomeFolderIsDefaultWhenScopedBySite {
		var siteName = TestCase.getSiteName(siteName = ${siteName});

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151568",
			objectName = "CustomObject151568",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 151568",
			scope = "site");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151568");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151568");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151568");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			key_viewHomeFolder = ${siteName},
			locator1 = "ObjectField#VIEW_HOME_FOLDER");

		AssertElementPresent(
			key_card = "Provided by Liferay",
			locator1 = "Card#CARD");
	}

	@description = "LPS-156704 - Verify that the Excludes to operator is available when adding filters for the picklist fields to select data from the object"
	@priority = 4
	test ExcludesIsAvailableForPicklistFields {
		task ("Add a Custom Picklist and Item (via API)") {
			Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

			Picklist.addPicklistItemViaAPI(
				itemKey = "PicklistItemTest",
				itemName = "Picklist Item Test",
				picklistName = "Picklist Test");
		}

		task ("Add a Custom Object and Custom Picklist (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 165981",
				objectName = "CustomObject165981",
				pluralLabelName = "Custom Objects 165981");
		}

		task ("Go to Custom Object and create a Custom Picklist Field") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 165981");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Field Picklist",
				fieldPicklist = "Picklist Test",
				fieldType = "Picklist",
				itemName = "Picklist Item Test");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Field Picklist",
				fieldType = "Picklist");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark as default and add columns for Custom View") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Field Picklist");
		}

		task ("Go to Filters tab and add new Filter") {
			ObjectCustomViews.goToFiltersTab();

			ObjectCustomViews.addNewFilterViaUI(
				filterBy = "Field Picklist",
				filterType = "Excludes",
				filterValue = "Picklist Item Test");

			ObjectCustomViews.assertPresentEntriesOnFilters(
				filterBy = "Field Picklist",
				filterValue = "Picklist Item Test");

			PortletEntry.save();
		}

		task ("Assert that the filter option is on Custom Object") {
			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject165981");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject165981");

			AssertElementPresent(
				key_buttonName = "Filter",
				locator1 = "ObjectCustomViews#DROPDOWN_BUTTON_ON_OBJECT_VIEW");

			Click(
				key_filter = "Picklist Test",
				locator1 = "ObjectCustomViews#LABEL_SECTION_FILTER_ENTRY");

			AssertChecked.assertCheckedNotVisible(locator1 = "ObjectCustomViews#TOGGLE_SWITCH_EXCLUDE_STATUS");
		}
	}

	@description = "LPS-146523 - Verify if the default folder will be the Global Documents and Media Home Folder"
	@priority = 4
	test GlobalDocumentsAndMediaHomeFolderIsDefaultWhenScopedByCompany {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151565",
			objectName = "CustomObject151565",
			pluralLabelName = "Custom Objects 151565");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151565");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload or Select from Documents and Media Item Selector",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151565");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151565");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			key_viewHomeFolder = "Global",
			locator1 = "ObjectField#VIEW_HOME_FOLDER");

		AssertElementPresent(
			key_infoText = "Drag & Drop Your Files or Browse to Upload",
			locator1 = "ObjectPortlet#FILE_ENTRY_OBJECT");
	}

	@description = "LPS-156704 - Verify that the Includes operator is available when adding filters for the picklist fields to select data from the object"
	@priority = 4
	test IncludesIsAvailableForPicklistFields {
		task ("Add a Custom Picklist and Item (via API)") {
			Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

			Picklist.addPicklistItemViaAPI(
				itemKey = "PicklistItemTest",
				itemName = "Picklist Item Test",
				picklistName = "Picklist Test");
		}

		task ("Add a Custom Object and Custom Picklist (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 165980",
				objectName = "CustomObject165980",
				pluralLabelName = "Custom Objects 165980");
		}

		task ("Go to Custom Object and create a Custom Picklist Field") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 165980");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Field Picklist",
				fieldPicklist = "Picklist Test",
				fieldType = "Picklist",
				itemName = "Picklist Item Test");

			Refresh();

			ObjectAdmin.assertObjectField(
				fieldLabel = "Field Picklist",
				fieldType = "Picklist");
		}

		task ("Create Custom View and go to it") {
			ObjectCustomViews.goToViewsTab();

			ObjectCustomViews.addObjectViewViaUI(viewName = "Custom Views");

			ObjectCustomViews.goToViewsDetails(label = "Custom Views");
		}

		task ("Mark as default and add columns for Custom View") {
			ObjectCustomViews.markViewAsDefault();

			ObjectCustomViews.goToViewsBuilderTab();

			ObjectCustomViews.addColumnsViaUI(addColumns = "Field Picklist");
		}

		task ("Go to Filters tab and add new Filter") {
			ObjectCustomViews.goToFiltersTab();

			ObjectCustomViews.addNewFilterViaUI(
				filterBy = "Field Picklist",
				filterType = "Includes",
				filterValue = "Picklist Item Test");

			ObjectCustomViews.assertPresentEntriesOnFilters(
				filterBy = "Field Picklist",
				filterValue = "Picklist Item Test");

			PortletEntry.save();
		}

		task ("Assert that the filter option is on Custom Object") {
			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject165980");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject165980");

			AssertElementPresent(
				key_buttonName = "Filter",
				locator1 = "ObjectCustomViews#DROPDOWN_BUTTON_ON_OBJECT_VIEW");

			Click(
				key_filter = "Picklist Test",
				locator1 = "ObjectCustomViews#LABEL_SECTION_FILTER_ENTRY");

			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "ObjectCustomViews#TOGGLE_SWITCH_EXCLUDE_STATUS");
		}
	}

	@description = "Verify that the Is Not Equals to operator is available when adding filters for the integer fields to select data from the object"
	@priority = 4
	test IsEqualToIsAvailableForIntegerFields {
		task ("Given: A custom object with an integer field type") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer");

			ObjectAdmin.addObjectFieldViaUI(
				field = "Custom Integer",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("When: A new filter is created with the custom integer field with Is Equal To selected") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Aggregation");

			ObjectCustomViews.addNewAggregationFilterViaUI(
				filterBy = "Custom Integer",
				filterType = "Is Equal To",
				filterValue = 1);
		}

		task ("Then: The new filter is created") {
			ObjectCustomViews.assertPresentEntriesOnFilters(
				filterBy = "Custom Integer",
				filterValue = 1);
		}
	}

	@description = "Verify that the Is Equals to operator is available when adding filters for the long integer fields to select data from the object"
	@priority = 4
	test IsEqualToIsAvailableForLongIntegerFields {
		task ("Given: A custom object with a long integer field type") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Integer",
				fieldName = "customLongInteger",
				fieldType = "Long Integer");

			ObjectAdmin.addObjectFieldViaUI(
				field = "Custom Long Integer",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("When: A new filter is created with the custom long integer field with Is Equal To selected") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Aggregation");

			ObjectCustomViews.addNewAggregationFilterViaUI(
				filterBy = "Custom Long Integer",
				filterType = "Is Equal To",
				filterValue = 1);
		}

		task ("Then: The new filter is created") {
			ObjectCustomViews.assertPresentEntriesOnFilters(
				filterBy = "Custom Long Integer",
				filterValue = 1);
		}
	}

	@description = "Verify that the Is Not Equals to operator is available when adding filters for the long integer fields to select data from the object"
	@priority = 4
	test IsNotEqualToIsAvailableForLongIntegerFields {
		task ("Given: A custom object with a long integer field type") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Long Integer",
				fieldName = "customLongInteger",
				fieldType = "Long Integer");

			ObjectAdmin.addObjectFieldViaUI(
				field = "Custom Long Integer",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("When: A new filter is created with the custom long integer field with Is Not Equal To selected") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Aggregation");

			ObjectCustomViews.addNewAggregationFilterViaUI(
				filterBy = "Custom Long Integer",
				filterType = "Is Not Equal To",
				filterValue = 1);
		}

		task ("Then: The new filter is created") {
			ObjectCustomViews.assertPresentEntriesOnFilters(
				filterBy = "Custom Long Integer",
				filterValue = 1);
		}
	}

	@description = "LPS-143065 - Change the Maximum File Size to 0 (zero) and verify if the Maximum File Size is now set by the System configurations"
	@priority = 4
	test MaximumFileSizeIsSetBySystemConfigurationsWhenZero {
		property test.name.skip.portal.instance = "ObjectFields#MaximumFileSizeIsSetBySystemConfigurationsWhenZero";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151561",
			objectName = "CustomObject151561",
			pluralLabelName = "Custom Objects 151561");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151561");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		Type(
			locator1 = "ObjectField#INPUT_MAXIMUM_FILE_SIZE",
			value1 = 0);

		ObjectField.save();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151561");

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Upload Servlet Request",
			configurationScope = "System Scope");

		ServerAdministration.configureFileUploadOverallMaximumFileSize(maxFileSize = 102400);

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151561");

		ObjectAutoGenerated.addAttachment(fileName = "Liferay Code of Business Conduct and Ethics.pdf");

		AssertElementPresent(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "An unexpected error occurred while uploading your file.");
	}

	@description = "Verify that the Range - Start/End operator is available when adding filters for the date fields to select date from the object"
	@priority = 4
	test RangeIsAvailableForDateFields {
		task ("Given: A custom object with a date field type") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject",
				objectName_2 = "CustomObject",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Date",
				fieldName = "customDate",
				fieldType = "Date");

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Count",
				relationship = "Relationship");
		}

		task ("When: A new filter is created with the custom date field with range selected") {
			ObjectAdmin.goToFieldsDetails(label = "Custom Aggregation");

			ObjectCustomViews.addNewAggregationFilterViaUI(
				dateValueList = "2000-01-01, 2001-01-01",
				filterBy = "Custom Date",
				filterType = "Range");
		}

		task ("Then: The new filter is created") {
			ObjectCustomViews.assertPresentEntriesOnFilters(
				filterBy = "Custom Date",
				filterValue = "2000-01-01, 2001-01-01");
		}
	}

	@description = "LPS-143065 - Verify that the Request Files option is a required field"
	@priority = 4
	test RequestFilesIsRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151558",
			objectName = "CustomObject151558",
			pluralLabelName = "Custom Objects 151558");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151558");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		ObjectField.selectType(fieldType = "Attachment");

		Button.clickSave();

		FieldBase.assertRequiredFieldErrorPresent(fieldLabel = "Request Files");
	}

	@description = "LPS-148112 - Verify if field called Storage Folder have a default value"
	@priority = 4
	test StorageFolderFieldHaveDefaultValue {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		AssertElementPresent(
			locator1 = "ObjectField#STORAGE_FOLDER_INPUT",
			value1 = "/CustomObject");
	}

	@description = "LPS-148112 - Verify if field called Storage Folder have help text"
	@priority = 4
	test StorageFolderFieldHaveHelpText {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		var helpText = "Input the path of the chosen folder in Documents and Media. An example of a valid path is: \"/myDocumentsAndMediaFolder\".";

		AssertElementPresent(
			key_helpText = ${helpText},
			locator1 = "ObjectField#HELP_TEXT",
			value1 = ${key_helpText});
	}

	@description = "LPS-148112 - Verify if field called Storage Folder is required"
	@priority = 4
	test StorageFolderFieldIsRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			enableShowFiles = "true",
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		ObjectAdmin.goToFieldsDetails(label = "Custom Attachment");

		ObjectField.typeStorageFolder(content = "");

		Button.clickSave();

		FieldBase.assertRequiredFieldErrorPresent(fieldLabel = "Storage Folder");
	}

}