@component-name = "portal-upgrades"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Upgrades Object";

	setUp {
		SignIn.signIn();

		var portalURL = PropsUtil.get("portal.url");

		AssertLocation(value1 = "${portalURL}/web/guest?SM_USER=test@liferay.com");

		SearchAdministration.executeReindex();
	}

	@ignore = "Test Stub"
	@priority = 5
	test ViewActionWithNotificationAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		// TODO LPS-174664 ViewActionWithNotificationAfterUpgrade7413U33

	}

	@priority = 5
	test ViewObjectDefinitionDetailsAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View an Object Definition Details after Upgrade") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			CreateObject.assertObjectLabel(labelName = "Custom Object1");

			CreateObject.assertObjectPluralLabel(pluralLabelName = "Custom Objects1");

			CreateObject.assertTitleFieldIsSelected(fieldLabel = "Custom Field Text");

			AssertTextEquals(
				locator1 = "ObjectAdmin#SELECT_OBJECT_SCOPE",
				value1 = "Site");

			AssertTextEquals(
				locator1 = "CreateObject#PANEL_CATEGORY_KEY",
				value1 = "Site Administration > Content & Data");

			AssertChecked.assertCheckedNotVisible(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");
		}

		task ("Edit an Object Definition Details after Upgrade") {
			ObjectAdmin.goToDetailsTab();

			CreateObject.editLabel(labelName = "Custom Object1 Edit After Upgrade");

			CreateObject.editPluralLabel(pluralLabelName = "Custom Objects1 Edit After Upgrade");

			Uncheck.uncheckToggleSwitch(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");

			CreateObject.saveObject();
		}

		task ("Delete an Object Definition after Upgrade") {
			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "MTM - Custom Object",
				relationshipName = "mTMCustomObject");

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "OTM - System Object",
				relationshipName = "oTMSystemObject");

			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.deleteCustomObjectViaUI(
				labelName = "Custom Object1 Edit After Upgrade",
				objectName = "CustomObject1");

			AssertElementNotPresent(
				locator1 = "ObjectAdmin#OBJECT_LABEL",
				value1 = "Custom Object1 Edit After Upgrade");
		}
	}

	@ignore = "Test Stub"
	@priority = 5
	test ViewObjectEntryAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		// TODO LPS-174662 ViewObjectEntryAfterUpgrade7413U33

	}

	@priority = 5
	test ViewPicklistAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View a Picklist after Upgrade") {
			Picklist.gotoPicklists();

			Picklist.optionsPicklist(
				menuItem = "View",
				picklistName = "Custom Picklist");

			SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");

			for (var itemNumber : list "1,2,3") {
				Picklist.assertPicklistItem(
					picklistItemKey = "picklistItem${itemNumber}",
					picklistItemName = "Picklist Item ${itemNumber}");
			}
		}

		task ("Edit a Picklist and items") {
			SelectFrameTop();

			Picklist.updatePicklistName(picklistName = "Custom Picklist Edit After Upgrade");

			Type(
				key_text = "External Reference Code",
				locator1 = "TextInput#ANY",
				value1 = "ERC Edit After Upgrade");

			PortletEntry.save();

			Picklist.optionsPicklist(
				menuItem = "View",
				picklistName = "Custom Picklist Edit After Upgrade");

			for (var itemNumber : list "1,2,3") {
				Picklist.updatePicklistItemName(
					itemkey = "picklistItem${itemNumber}",
					newItemName = "Picklist Item ${itemNumber} Edit After Upgrade");

				PortletEntry.save();
			}
		}

		task ("Add a new item to the existing Picklist and create a brand new Picklist") {
			Picklist.addPicklistItemViaUI(picklistItemName = "New Picklist Item");

			PortletEntry.save();

			Picklist.gotoPicklists();

			Picklist.addPicklistViaUI(picklistName = "Custom Picklist Add After Upgrade");

			Picklist.gotoPicklistView(picklistName = "Custom Picklist Add After Upgrade");

			for (var itemNumber : list "1,2") {
				Picklist.addPicklistItemViaUI(picklistItemName = "Picklist After Upgrade Item ${itemNumber}");

				PortletEntry.save();
			}
		}

		task ("Delete items from both Picklists") {
			Picklist.optionsPicklistItem(
				itemKey = "picklistAfterUpgradeItem2",
				menuItem = "Delete");

			PortletEntry.save();

			SelectFrameTop();

			Picklist.gotoPicklistView(picklistName = "Custom Picklist Edit After Upgrade");

			Picklist.optionsPicklistItem(
				itemKey = "picklistItem2",
				menuItem = "Delete");

			PortletEntry.save();
		}

		task ("Delete any Custom Objects that use a picklist and then delete all picklists") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.deleteCustomObjectViaUI(
				labelName = "Custom Object3",
				objectName = "CustomObject3");

			Picklist.gotoPicklists();

			for (var picklistName : list "Custom Picklist Add After Upgrade,Custom Picklist Edit After Upgrade") {
				Picklist.optionsPicklist(
					menuItem = "Delete",
					picklistName = ${picklistName});

				AssertElementNotPresent(
					key_picklistName = ${picklistName},
					locator1 = "Picklist#VIEW_PICKLIST");
			}
		}
	}

}