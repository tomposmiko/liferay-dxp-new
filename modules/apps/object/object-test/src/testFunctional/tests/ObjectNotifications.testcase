@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-161924 - Verify that it's possible to add attachments to the notification template"
	@priority = 3
	test CanAddAttachment {
		task ("Given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161924",
				objectName = "CustomObject161924",
				pluralLabelName = "Custom Objects 161924");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "From Computer And Show Files In DM",
				fieldName = "fromComputerAndShowFilesInDM",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "CustomObject161924");
		}

		task ("And given a notification template is created") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				fromAddress = "test@liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email");
		}

		task ("When an attachment is added to the notification template") {
			ObjectNotifications.addNotificationTemplateAttachment(objectLabel = "Custom Object 161924");

			PortletEntry.save();
		}

		task ("Then the attachment should be present in the notification template") {
			Click(
				key_objectLabel = "Notification Template",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "View");

			AssertElementPresent(
				key_dataSource = "Custom Object 161924",
				locator1 = "ObjectNotifications#DATA_SOURCE_ATTACHMENTS");

			AssertElementPresent(locator1 = "ObjectNotifications#FIELD_ATTACHMENTS_OBJECT");
		}
	}

	@description = "LPS-161917 - Verify that it's possible to create an e-mail notification template"
	@priority = 5
	test CanCreateEmailTemplate {
		property portal.acceptance = "true";

		task ("Given the user navigates to Notifications - Templates in the Control Panel") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");
		}

		task ("When the user creates a new Notification Template") {
			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("Then the Notification Template is saved with the correct values") {
			AssertElementPresent(
				key_name = "Notification Template",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			ObjectNotifications.viewNotificationTemplateDetails(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				subject = "Subject");
		}
	}

	@description = "LPS-161928 - Verify that it's possible to delete attachments to the notification template"
	@priority = 3
	test CanDeleteAttachment {
		task ("Given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161928",
				objectName = "CustomObject161928",
				pluralLabelName = "Custom Objects 161928");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "From Computer And Show Files In DM",
				fieldName = "fromComputerAndShowFilesInDM",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "CustomObject161928");
		}

		task ("And given a notification template is created") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				fromAddress = "test@liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email");
		}

		task ("And given an attachment is added to the notification template") {
			ObjectNotifications.addNotificationTemplateAttachment(objectLabel = "Custom Object 161928");

			PortletEntry.save();
		}

		task ("When the attachment is deleted from the notification template") {
			Click(
				key_objectLabel = "Notification Template",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "View");

			Click(locator1 = "ObjectNotifications#DELETE_ATTACHMENT_BUTTON");
		}

		task ("Then the attachment shouldn't be present in the notification template") {
			AssertElementNotPresent(locator1 = "ObjectNotifications#FIELD_ATTACHMENTS_OBJECT");
		}
	}

	@description = "LPS-161919 - Verify that it's possible to delete an e-mail notification template"
	@priority = 3
	test CanDeleteEmailTemplate {
		task ("Go to Templates and add a new Notification Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("Delete the Notification Template") {
			ObjectNotifications.deleteNotificationTemplate(templateName = "Notification Template");
		}

		task ("Assert the Notification Template is not present") {
			Refresh();

			AssertElementNotPresent(
				key_name = "Notification Template",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@description = "LPS-161922 - Verify that it's possible to delete a notification"
	@priority = 4
	test CanDeleteNotification {
		task ("Given a notification template is created") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("And given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161922",
				objectName = "CustomObject161922",
				pluralLabelName = "Custom Objects 161922");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "CustomObject161922",
				showFilesInDocumentsAndMedia = "true");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161922");
		}

		task ("And given an Action is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161922");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 161922",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When an entry is created") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject161922",
				value = "Entry A");
		}

		task ("When the notification is generated and then deleted") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			ObjectNotifications.deleteQueue(
				status = "Unsent",
				triggerBy = "CustomObject161922");
		}

		task ("Then the notification is no longer present on the page") {
			AssertElementNotPresent(
				key_objectName = "CustomObject161922",
				locator1 = "ObjectNotifications#OBJECT_QUEUE_NAME");
		}
	}

	@description = "LPS-161918 - Verify that it's possible to edit an e-mail notification template"
	@priority = 3
	test CanEditEmailTemplate {
		task ("Given a user creates an email notification template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("When the user edits the template") {
			ObjectNotifications.editNotificationTemplate(
				emailBody = "Email Body Edit",
				entryTo = "test2@liferay.com",
				externalReferenceCode = "ERC Edit",
				fromAddress = "Liferay Edit",
				fromName = "Test Test Edit",
				name = "New Notification Edit",
				notificationTemplateName = "Notification Template",
				subject = "Subject Edit");

			PortletEntry.save();
		}

		task ("Then the notification template will have all edited values") {
			ObjectNotifications.viewNotificationTemplateDetails(
				emailBody = "Email Body Edit",
				entryTo = "test2@liferay.com",
				externalReferenceCode = "ERC Edit",
				fromAddress = "Liferay Edit",
				fromName = "Test Test Edit",
				name = "New Notification Edit",
				subject = "Subject Edit");
		}
	}

	@description = "LPS-161923 - Verify that it's possible to search for notifications"
	@priority = 3
	test CanSearchForNotifications {
		task ("Go to Templates and add Notification Templates") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			for (var templateName : list "Test,Liferay,Site") {
				ObjectNotifications.addNewNotificationTemplate(
					emailBody = "Email Body",
					entryTo = "test@liferay.com",
					fromAddress = "Liferay",
					fromName = "Test Test",
					name = "Notification ${templateName}",
					notificationType = "Email",
					subject = "Subject");

				PortletEntry.save();
			}
		}

		task ("Search for Liferay") {
			Refresh();

			Type(
				locator1 = "ObjectPortlet#SEARCH_FIELD",
				value1 = "Liferay");

			KeyPress(
				locator1 = "ObjectPortlet#SEARCH_FIELD",
				value1 = "\RETURN");
		}

		task ("Assert only Notification Liferay is present") {
			AssertElementPresent(
				key_name = "Notification Liferay",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			AssertElementNotPresent(
				key_name = "Notification Site",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			AssertElementNotPresent(
				key_name = "Notification Test",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@description = "LPS-161920 - Verify that it's possible to send an e-mail notification via an Action"
	@priority = 5
	test CanSendEmailViaActionAdd {
		property portal.acceptance = "true";

		task ("Go to Templates and add a new Notification Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("Create a Custom Object and add a field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161920",
				objectName = "CustomObject161920",
				pluralLabelName = "Custom Objects 161920");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject161920");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161920");
		}

		task ("Add a new action") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161920");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionLabel = "Action Label",
				actionName = "ActionName",
				notificationName = "Notification Template",
				thenAction = "Notification",
				whenAction = "On After Add");

			PortletEntry.save();
		}

		task ("Go to the created Object and add an Entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161920");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry");
		}

		task ("Go to the Notifications Queue and assert the notification is present") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertElementPresent(
				key_validationInfo = "Subject",
				locator1 = "ObjectCustomValidation#VIEW_INFO_VALIDATION");
		}
	}

	@description = "LPS-173894 - Verify that it's possible to send an e-mail notification via an Action (Delete)"
	@priority = 5
	test CanSendEmailViaActionDelete {
		property custom.properties = "feature.flag.LPS-173894=true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectNotifications#CanSendEmailViaActionDelete";

		task ("Given an Email Notification Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("And given a custom object with a text field and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 178781",
				objectName = "CustomObject178781",
				pluralLabelName = "Custom Objects 178781");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject178781");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178781");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject178781",
				value = "Entry Test");
		}

		task ("And given an Action to send an email notification after deleting an object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 178781");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 178781",
				thenAction = "Notification",
				whenAction = "On After Delete");
		}

		task ("And given the Notification Queue Entry Delete Interval is set to 1 in System Settings > Notifications > Notification Queue") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Notifications",
				configurationName = "Notification Queue",
				configurationScope = "System Scope");

			SystemSettings.editTextSetting(
				settingName = "Notification Queue Entry Delete Interval",
				settingValue = 1);

			SystemSettings.saveConfiguration();
		}

		task ("When the object entry is deleted") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178781");

			ObjectPortlet.deleteEntry(entry = "Entry Test");
		}

		task ("Then the Action is triggered and a sent email is seen in the Notification Queue") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertElementPresent(
				key_entryLabel = "CustomObject178781",
				key_entryStatus = "Sent",
				locator1 = "ObjectNotifications#VIEW_NOTIFICATION_ENTRIES");
		}
	}

	@description = "LPS-173894 -Verify that it's possible to send an e-mail notification with Action (Update)"
	@priority = 5
	test CanSendEmailViaActionUpdate {
		property custom.properties = "feature.flag.LPS-173894=true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectNotifications#CanSendEmailViaActionUpdate";

		task ("Given an Email Notification Template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("And given a custom object with a text field and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 178782",
				objectName = "CustomObject178782",
				pluralLabelName = "Custom Objects 178782");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject178782");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178782");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject178782",
				value = "Entry Test");
		}

		task ("And given an Action to send an email notification after updating an object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 178782");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 178782",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given the Notification Queue Entry Delete Interval is set to 1 in System Settings > Notifications > Notification Queue") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Notifications",
				configurationName = "Notification Queue",
				configurationScope = "System Scope");

			SystemSettings.editTextSetting(
				settingName = "Notification Queue Entry Delete Interval",
				settingValue = 1);

			SystemSettings.saveConfiguration();
		}

		task ("When the object entry is updated") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178782");

			ObjectPortlet.updateEntry(
				entry = "Entry Test",
				updateEntry = "Entry Test Updated");
		}

		task ("Then the Action is triggered and a sent email is seen in the Notification Queue") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertElementPresent(
				key_entryLabel = "CustomObject178782",
				key_entryStatus = "Sent",
				locator1 = "ObjectNotifications#VIEW_NOTIFICATION_ENTRIES");
		}
	}

	@description = "LPS-171625 - Verify that after updating a custom object entry, triggered email notifications using Object Author and Current User terms are filled correctly for the To, From Address and From Name and Subject fields"
	@priority = 5
	test CanUseObjectAuthorAndCurrentUserTermsInEmailNotificationOnCustomObject {
		property custom.properties = "feature.flag.LPS-171625=true";
		property portal.acceptance = "true";

		task ("Given a custom object a text field and an entry are created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180337",
				objectName = "CustomObject180337",
				pluralLabelName = "Custom Objects 180337");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject180337");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180337");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject180337",
				value = "Before");
		}

		task ("And given an email notification template with the applicable fields filled with the Author and Current User terms") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				fromAddress = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				fromName = "[%CURRENT_USER_FIRST_NAME%]",
				name = "Notification Template",
				notificationType = "Email",
				subject = "[%CUSTOMOBJECT180337_CUSTOMOBJECTFIELD%]");

			PortletEntry.save();
		}

		task ("And given an action to send an email notification after updating a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180337");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				notificationName = "Notification Template",
				objectLabel = "Custom Objects 180337",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given a second admin user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the second admin user updates the custom object entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject180337");

			ObjectPortlet.viewEntryDetails(entry = "Before");

			ObjectAdmin.editEntryName(newEntryValue = "After");
		}

		task ("Then the email is received with the terms replaced with the correct values") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertTextPresent(value1 = "userfn");

			AssertTextPresent(value1 = "userea@liferay.com");

			AssertTextPresent(value1 = "After");
		}
	}

	@description = "LPS-171625 - Verify that after updating a system object entry, triggered email notifications using Object Author and Current User terms are filled correctly for the To, From Address, From Name and Template Body fields"
	@priority = 5
	test CanUseObjectAuthorAndCurrentUserTermsInEmailNotificationOnSystemObject {
		property custom.properties = "feature.flag.LPS-171625=true";
		property portal.acceptance = "true";

		task ("Given an email notification template with the applicable fields filled with the Author and Current User terms") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				fromAddress = "[%USER_AUTHOR_FIRST_NAME%]",
				fromName = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				name = "Notification Template",
				notificationType = "Email",
				subject = "[%USER_AUTHOR_LAST_NAME%]");

			PortletEntry.save();
		}

		task ("And given an action to send an email notification after updating a system object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "User",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given a second admin user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the second admin user updates the System Object entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			User.editUserInformation(userLastNameEdit = "edituserln");
		}

		task ("Then the email is received with the terms replaced with the correct values") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertTextPresent(value1 = "edituserln");

			AssertTextPresent(value1 = "userea@liferay.com");
		}
	}

	@description = "LPS-171625 - Verify that after updating a custom object entry, triggered user notifications using Object Author and Current User terms are filled correctly for the To and Subject fields"
	@priority = 5
	test CanUseObjectAuthorAndCurrentUserTermsInUserNotificationOnCustomObject {
		property custom.properties = "feature.flag.LPS-171625=true";
		property portal.acceptance = "true";

		task ("Given a custom object and a entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180339",
				objectName = "CustomObject180339",
				pluralLabelName = "Custom Objects 180339");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject180339");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180339");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject180339",
				value = "Entry Test");
		}

		task ("And given a user notification template with the applicable fields filled with the Author and Current User terms") {
			UserNotificationAPI.postNotificationTemplate(
				en_US = "[%CURRENT_USER_EMAIL_ADDRESS%] [%CURRENT_USER_FIRST_NAME%] [%CUSTOMOBJECT180339_AUTHOR_LAST_NAME%] [%CUSTOMOBJECT180339_CUSTOMFIELD%]",
				externalReferenceCode = "test",
				name = "User Notification Template",
				recipientType = "user",
				type = "userNotification",
				userScreenName = "usersn");
		}

		task ("And given an action to send a user notification after updating a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180339");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action name",
				active = "true",
				notificationName = "User Notification Template",
				objectLabel = "Custom Object 180339",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given a second admin user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the second admin user updates the custom object entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject180339");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Test Edited");
		}

		task ("Then a user notification is sent with the terms replaced with the correct values") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Queue");

			AssertTextPresent(value1 = "userea@liferay.com userfn userln Entry Test Edited");
		}
	}

}