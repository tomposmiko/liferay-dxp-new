definition {

	macro addLanguageOnPicklist {
		SelectFrameTop();

		Picklist.assertPicklistDetails(title = "Basic Info");

		ObjectAdmin.changeLabelLanguage(newLanguage = ${newLanguage});

		Type(
			locator1 = "Picklist#UPDATE_PICKLIST_NAME",
			value1 = ${itemName});

		WaitForSPARefresh();
	}

	macro addLanguageOnPicklistItem {
		SelectFrameTop();

		if (IsElementPresent(locator1 = "IFrame#MODAL_IFRAME")) {
			IFrame.selectModalFrame();
		}

		ObjectAdmin.changeLabelLanguage(newLanguage = ${newLanguage});

		Type(
			locator1 = "Picklist#EDIT_ITEM_NAME",
			value1 = ${itemName});

		WaitForSPARefresh();
	}

	macro addPicklistItemViaAPI {
		JSONObject.addPicklistItem(
			itemKey = ${itemKey},
			itemName = ${itemName},
			picklistName = ${picklistName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro addPicklistItemViaUI {
		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");

		WaitForElementPresent(locator1 = "Picklist#ADD_ITEM_BUTTON");

		Click.javaScriptClick(locator1 = "Picklist#ADD_ITEM_BUTTON");

		SelectFrame(locator1 = "Picklist#DIV_PICKLIST_MODAL");

		if (isSet(picklistItemName)) {
			Type(
				key_selectField = "Name",
				locator1 = "Picklist#ADD_PICKLIST_ITEM_NAME_AND_KEY",
				value1 = ${picklistItemName});
		}

		if (isSet(picklistItemKey)) {
			Type(
				key_selectField = "Key",
				locator1 = "Picklist#ADD_PICKLIST_ITEM_NAME_AND_KEY",
				value1 = ${picklistItemKey});
		}
	}

	macro addPicklistItemWithTranslationViaUI {
		Picklist.addPicklistItemViaUI(picklistItemName = ${picklistItemName});

		ObjectAdmin.chooseAnyLanguage(
			newLanguage = ${newLanguage},
			symbolName = "");

		if (IsElementNotPresent(locator1 = "Picklist#VIEW_PICKLIST_ITEM_NAME")) {
			Click(
				key_symbolName = "",
				locator1 = "FormViewBuilder#BUTTON_LOCALIZATION");

			Click(locator1 = "Modal#BODY");
		}

		Type(
			key_selectField = "Name",
			locator1 = "Picklist#ADD_PICKLIST_ITEM_NAME_AND_KEY",
			value1 = ${newItemName});

		ObjectAdmin.chooseAnyLanguage(
			newLanguage = ${defaultLanguage},
			symbolName = "");

		WaitForSPARefresh();
	}

	macro addPicklistViaAPI {
		JSONObject.addPicklist(
			externalReferenceCode = ${externalReferenceCode},
			picklistName = ${picklistName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro addPicklistViaUI {
		WaitForElementPresent(locator1 = "Picklist#ADD_PICKLIST_BUTTON");

		Click.javaScriptClick(locator1 = "Picklist#ADD_PICKLIST_BUTTON");

		WaitForElementPresent(
			locator1 = "Picklist#ADD_PICKLIST_NAME",
			value1 = ${picklistName});

		Type(
			locator1 = "Picklist#ADD_PICKLIST_NAME",
			value1 = ${picklistName});

		PortletEntry.save();
	}

	macro assertDisabledPicklistItem {
		Picklist.assertDisableKey(keyName = ${keyName});

		AssertElementPresent(locator1 = "Picklist#DISABLED_PICKLIST_NAME");
	}

	macro assertDisabledPicklistName {
		AssertElementPresent(locator1 = "Picklist#DISABLED_PICKLIST_NAME");
	}

	macro assertDisabledSaveButton {
		AssertElementPresent(locator1 = "CreateObject#SAVE_BUTTON_DISABLED");
	}

	macro assertDisableKey {
		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_ITEM_MODAL");

		AssertElementPresent(
			key_keyName = ${keyName},
			locator1 = "Picklist#DISABLE_PICKLIST_KEY");
	}

	macro assertDownloadedPicklist {
		var downloadedFileName = TestCase.getDownloadedTempFileName(fileNamePattern = ${downloadedFile});

		echo("## downloadedFileName: ListType_*");

		if (contains("ListType_*", ${downloadedFile})) {
			echo("This is a correct file.");
		}
		else {
			fail("FAIL!");
		}
	}

	macro assertEntryRelationshipFieldPicklist {
		Click(
			key_selectField = ${selectField},
			locator1 = "Picklist#SELECT_FIELD_RELATIONSHIP_OBJECT");

		AssertElementPresent(
			key_entry = ${newEntry},
			locator1 = "CreateObject#ENTRY_RELATIONSHIP_FIELD_OPTION");
	}

	macro assertItemNameAndItemKeyOnModal {
		if (IsElementPresent(locator1 = "Picklist#VIEW_PICKLIST_ITEM_NAME")) {
			AssertElementPresent(
				key_itemName = ${itemName},
				locator1 = "Picklist#VIEW_PICKLIST_ITEM_NAME");

			AssertElementPresent(
				key_labelName = ${itemName},
				locator1 = "ObjectAdmin#VIEW_SIMPLE_TEXT_GENERIC");

			AssertElementPresent(
				key_itemKey = ${itemKey},
				locator1 = "Picklist#VIEW_PICKLIST_ITEM_KEY");
		}

		if (IsElementPresent(locator1 = "Picklist#VIEW_PICKLIST_EDIT_ITEM_NAME")) {
			AssertElementPresent(
				key_itemName = ${itemName},
				locator1 = "Picklist#VIEW_PICKLIST_EDIT_ITEM_NAME");

			AssertElementPresent(
				key_itemKey = ${itemKey},
				locator1 = "Picklist#VIEW_PICKLIST_EDIT_ITEM_KEY");
		}
	}

	macro assertPicklist {
		var key_picklistName = ${picklistName};

		AssertElementPresent(locator1 = "Picklist#VIEW_PICKLIST");
	}

	macro assertPicklistDetails {
		var key_title = ${title};

		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");

		AssertElementPresent(locator1 = "Picklist#PICKLIST_DETAILS");
	}

	macro assertPicklistItem {
		if (IsElementPresent(locator1 = "Picklist#IFRAME_PICKLIST_MODAL")) {
			SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");
		}

		var key_picklistItemName = ${picklistItemName};
		var key_picklistItemKey = ${picklistItemKey};

		WaitForPageLoad();

		AssertElementPresent(locator1 = "Picklist#VIEW_PICKLIST_ITEM");
	}

	macro assertPicklistItemByLanguage {
		SelectFrameTop();

		if (IsElementPresent(locator1 = "IFrame#MODAL_IFRAME")) {
			IFrame.selectModalFrame();
		}

		ObjectAdmin.changeLabelLanguage(newLanguage = ${newLanguage});

		AssertTextEquals(
			locator1 = "Picklist#EDIT_ITEM_NAME",
			value1 = ${nameItem});
	}

	macro assertPicklistItemInTable {
		Picklist.assertPicklistDetails(title = "Items");

		AssertElementPresent(
			key_picklistItemKey = ${picklistItemKey},
			key_picklistItemName = ${picklistItemName},
			locator1 = "Picklist#VIEW_PICKLIST_ITEM");
	}

	macro assertPicklistItemNotPresent {
		var key_picklistItemName = ${picklistItemName};
		var key_picklistItemKey = ${picklistItemKey};

		AssertElementNotPresent(locator1 = "Picklist#VIEW_PICKLIST_ITEM");
	}

	macro assertPicklistMessage {
		var key_picklistMessage = ${picklistMessage};

		AssertElementPresent(locator1 = "Picklist#PICKLIST_MESSAGE");
	}

	macro assertPicklistNameByLanguage {
		SelectFrameTop();

		Picklist.assertPicklistDetails(title = "Basic Info");

		ObjectAdmin.changeLabelLanguage(newLanguage = ${newLanguage});

		AssertTextEquals(
			locator1 = "Picklist#UPDATE_PICKLIST_NAME",
			value1 = ${nameItem});
	}

	macro assertPicklistNotPresent {
		var key_picklistName = ${picklistName};

		AssertElementNotPresent(locator1 = "Picklist#VIEW_PICKLIST");
	}

	macro cancelPicklist {
		Click.javaScriptClick(locator1 = "Picklist#ADD_PICKLIST_BUTTON");

		Type(
			locator1 = "Picklist#ADD_PICKLIST_NAME",
			value1 = ${picklistName});

		Picklist.cancelPicklistButton();
	}

	macro cancelPicklistButton {
		Click(locator1 = "Picklist#CANCEL_PICKLIST");
	}

	macro clickSaveButton {
		Click.javaScriptClick(locator1 = "Picklist#SAVE_BUTTON");
	}

	macro deleteAllPicklistsViaAPI {
		JSONObject.deleteAllPicklists(
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro deletePicklistViaAPI {
		JSONObject.deletePicklist(
			picklistName = ${picklistName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro gotoPicklists {
		Navigator.openSpecificURL(url = "/group/guest/~/control_panel/manage?p_p_id=com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet");
	}

	macro gotoPicklistView {
		WaitForPageLoad();

		Click.javaScriptClick(
			key_picklistName = ${picklistName},
			locator1 = "Picklist#SELECT_PICKLIST_VIEW");

		MenuItem.clickNoError(menuItem = "View");
	}

	macro importPicklist {
		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		Click(locator1 = "Picklist#IMPORT_PICKLIST");

		var filePath = TestCase.getDependenciesDirPath(fileName = "${picklistFileName}.json");

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${picklistName});

		Button.clickImport();
	}

	macro optionsPicklist {
		Click.javaScriptClick(
			key_picklistName = ${picklistName},
			locator1 = "Picklist#PICKLIST_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = ${menuItem});
	}

	macro optionsPicklistItem {
		var key_itemKey = ${itemKey};

		SelectFrameTop();

		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");

		Click.javaScriptClick(locator1 = "Picklist#PICKLIST_ITEM_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = ${menuItem});
	}

	macro searchPicklist {
		Type(
			locator1 = "TextInput#SEARCH",
			value1 = ${picklistName});

		KeyPress(
			locator1 = "TextInput#SEARCH",
			value1 = "\RETURN");
	}

	macro searchPicklistItem {
		Picklist.selectPickilistModalFrame();

		Type(
			locator1 = "TextInput#SEARCH",
			value1 = ${picklistItemName});

		KeyPress(
			locator1 = "TextInput#SEARCH",
			value1 = "\RETURN");
	}

	macro selectPickilistModalFrame {
		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");
	}

	macro selectPicklistImportFile {
		var filePath = TestCase.getDependenciesDirPath(fileName = "${picklistFileName}.json");

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${picklistName});

		Button.clickImport();
	}

	macro updatePicklistItemName {
		Picklist.optionsPicklistItem(
			itemKey = ${itemkey},
			menuItem = "View");

		SelectFrameTop();

		SelectFrame(locator1 = "Picklist#DIV_PICKLIST_MODAL");

		Type(
			locator1 = "Picklist#EDIT_ITEM_NAME",
			value1 = ${newItemName});

		WaitForSPARefresh();
	}

	macro updatePicklistName {
		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");

		Type(
			locator1 = "Picklist#UPDATE_PICKLIST_NAME",
			value1 = ${picklistName});

		WaitForSPARefresh();
	}

	macro viewPicklist {
		Click(
			key_picklistName = ${picklistName},
			locator1 = "Picklist#VIEW_PICKLIST");
	}

}