@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-154672=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Student object with name field created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given Subject object with name field created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");
		}

		task ("And Given a one-to-many mainSubject relationship created with Subject as parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "mainSubject",
				parentObjectName = "Subject",
				type = "oneToMany");
		}

		task ("And Given Student1, Student2, Student3 entries created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Student1");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Student2");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Student3");
		}

		task ("And Given Subject1, Subject2 entries created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject1");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject2");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject3");
		}

		task ("And Given Subject1 related to Student1") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student1",
				parent_plural_label = "subjects",
				parentEntryName = "Subject1",
				relationshipName = "mainSubject");
		}

		task ("And Given Subject2 related to Student2") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student2",
				parent_plural_label = "subjects",
				parentEntryName = "Subject2",
				relationshipName = "mainSubject");
		}

		task ("And Given Subject2 related to Student3") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student3",
				parent_plural_label = "subjects",
				parentEntryName = "Subject3",
				relationshipName = "mainSubject");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		Picklist.deletePicklistViaAPI(picklistName = "multipicklist");

		Picklist.deletePicklistViaAPI(picklistName = "picklist");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterChildObjectEntriesInOneToManyRelByParentObjectPicklist {
		task ("And Given a Picklist picklist with name1 and name2 created") {
			Picklist.addPicklistViaAPI(picklistName = "picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "name2",
				itemName = "name2",
				picklistName = "picklist");

			var picklistId = JSONObject.getPicklistId(picklistName = "picklist");
		}

		task ("And Given a picklist field created in Student object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "Picklist",
				dBType = "String",
				listTypeDefinitionId = ${picklistId},
				name = "picklist",
				objectDefinitionName = "Student");
		}

		task ("And Given Student1 updated with 'name1' picklist field value") {
			var studentId = CustomObjectAPI.getObjectEntryIdByName(
				en_US_plural_label = "students",
				name = "Student1");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "students",
				entryId = ${studentId},
				fieldLabel = "picklist",
				fieldValue = "name1",
				picklist = "true",
				requiredFieldLabel = "name",
				requiredFieldValue = "Student1");
		}

		task ("When requesting {portalURL}/o/c/subjects?filter=startswith(mainSubject/picklist , 'name')") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=startswith%28mainSubject%2Fpicklist%20%2C%20%27name%27%29");
		}

		task ("Then the data of Subject1 is returned correctly") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Subject1");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterObjectEntriesInManyToManyRelWithSelfByText {
		task ("And Given optionalSubjects many-to-many relationship created with Subject as parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "optionalSubjects",
				parentObjectName = "Subject",
				type = "manyToMany");
		}

		task ("And Given Economy_Intermediate, Economy_Advanced, Social_Economy, Market_Economy entries created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Economy_Intermediate");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Economy_Advanced");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Social_Economy");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Market_Economy");
		}

		task ("And Given Social_Economy related as optionalSubjects to Economy_Advanced") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Social_Economy",
				parent_plural_label = "subjects",
				parentEntryName = "Economy_Advanced",
				relationshipName = "optionalSubjects");
		}

		task ("And Given Market_Economy related as optionalSubjects to Economy_Intermediate") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Market_Economy",
				parent_plural_label = "subjects",
				parentEntryName = "Economy_Intermediate",
				relationshipName = "optionalSubjects");
		}

		task ("When requesting {portalURL}/o/c/subjects?filter=(optionalSubjects/name eq 'Market_Economy') or (optionalSubjects/name eq 'Social_Economy')") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=%28optionalSubjects%2Fname%20eq%20%27Market_Economy%27%29%20or%20%28optionalSubjects%2Fname%20eq%20%27Social_Economy%27%29");
		}

		task ("Then Economy_Intermediate, Economy_Advanced data is returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Economy_Intermediate,Economy_Advanced");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 2,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterObjectEntriesInOneToManyRelWithSelfByText {
		task ("And Given firstLevelSubject one-to-many relationship created with Subject as parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "firstLevelSubject",
				parentObjectName = "Subject",
				type = "oneToMany");
		}

		task ("And Given Economy_101, Economy_Intermediate, Economy_Advanced entries created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Economy_Intermediate");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Economy_Advanced");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Economy_101");
		}

		task ("And Given Economy_101 related as firstLevelSubject to Economy_Intermediate") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Economy_101",
				parent_plural_label = "subjects",
				parentEntryName = "Economy_Intermediate",
				relationshipName = "firstLevelSubject");
		}

		task ("And Given Economy_Intermediate related as firstLevelSubject to Economy_Advanced") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Economy_Intermediate",
				parent_plural_label = "subjects",
				parentEntryName = "Economy_Advanced",
				relationshipName = "firstLevelSubject");
		}

		task ("When requesting {portalURL}/o/c/subjects?filter=firstLevelSubject/name eq 'Economy_101'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=firstLevelSubject%2Fname%20eq%20%27Economy_101%27");
		}

		task ("Then Economy_Intermediate data is returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Economy_Intermediate");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterParentObjectEntriesInManyToManyRelByChildObjectLongTextAfterPublishingObject {
		task ("And Given a Multiselect Picklist multipicklist with name3 and name4 created") {
			Picklist.addPicklistViaAPI(picklistName = "multipicklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "name3",
				itemName = "name3",
				picklistName = "multipicklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "name4",
				itemName = "name4",
				picklistName = "multipicklist");

			var picklistId = JSONObject.getPicklistId(picklistName = "multipicklist");
		}

		task ("And Given a multiselect picklist 'multipicklist' field created in Student object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "MultiselectPicklist",
				dBType = "String",
				listTypeDefinitionId = ${picklistId},
				name = "multipicklist",
				objectDefinitionName = "Student");
		}

		task ("And Given Student1 updated with 'name3' and 'name4' picklist field values") {
			var studentId = CustomObjectAPI.getObjectEntryIdByName(
				en_US_plural_label = "students",
				name = "Student1");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "students",
				entryId = ${studentId},
				fieldLabel = "multipicklist",
				fieldValue = "name3",
				fieldValue2 = "name4",
				multiselectPicklist = "true",
				requiredFieldLabel = "name",
				requiredFieldValue = "Student1");
		}

		task ("When requesting {portalURL}/o/c/subjects?filter=(mainSubject/multipicklist/any(k:k eq 'name3')) and (mainSubject/multipicklist/any(k:k eq 'name4'))") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=%28mainSubject%2Fmultipicklist%2Fany%28k%3Ak%20eq%20%27name3%27%29%29%20and%20%28mainSubject%2Fmultipicklist%2Fany%28k%3Ak%20eq%20%27name4%27%29%29");
		}

		task ("Then the data of Subject1 is returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Subject1");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterParentObjectEntriesInOneToManyRelByChildObjectBooleanCreatedAfterPublishingObject {
		task ("And Given in Student object a boolean field 'active' created") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "Boolean",
				dBType = "Boolean",
				name = "active",
				objectDefinitionName = "Student");
		}

		task ("And Given Student2 entry is updated with active field 'true'") {
			var studentId = CustomObjectAPI.getObjectEntryIdByName(
				en_US_plural_label = "students",
				name = "Student2");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "students",
				entryId = ${studentId},
				fieldLabel = "active",
				fieldValue = "true",
				requiredFieldLabel = "name",
				requiredFieldValue = "Student2");
		}

		task ("When requesting {portalURL}/o/c/subjects?filter=mainSubject/active ne false") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=mainSubject%2Factive%20ne%20false");
		}

		task ("Then the data of Subject2 is returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Subject2");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

}