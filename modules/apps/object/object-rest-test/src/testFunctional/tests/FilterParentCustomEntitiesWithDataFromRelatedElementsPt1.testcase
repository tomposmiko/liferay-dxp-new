@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-154672=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Student object with name field created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given Subject object with name field created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");
		}

		task ("And Given a many-to-many subjectStudents relationship created with Subject as parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "subjectStudents",
				parentObjectName = "Subject",
				type = "manyToMany");
		}

		task ("And Given Student1 and Student2 entries created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Student1");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Student2");
		}

		task ("And Given Subject1, Subject2, Subject3, Subject4 entries created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject1");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject2");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject3");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Subject4");
		}

		task ("And Given Subject1, Subject2 related to Student1") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student1",
				parent_plural_label = "subjects",
				parentEntryName = "Subject1",
				relationshipName = "subjectStudents");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student1",
				parent_plural_label = "subjects",
				parentEntryName = "Subject2",
				relationshipName = "subjectStudents");
		}

		task ("And Given Subject2, Subject3, Subject4 related to Student2") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student2",
				parent_plural_label = "subjects",
				parentEntryName = "Subject2",
				relationshipName = "subjectStudents");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student2",
				parent_plural_label = "subjects",
				parentEntryName = "Subject3",
				relationshipName = "subjectStudents");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Student2",
				parent_plural_label = "subjects",
				parentEntryName = "Subject4",
				relationshipName = "subjectStudents");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterParentObjectEntriesInManyToManyRelByChildObjectLongTextAfterPublishingObject {
		task ("And Given adding to Student object a long text 'description' field") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "LongText",
				dBType = "Clob",
				name = "description",
				objectDefinitionName = "Student");
		}

		task ("And Given adding a description value to Student1 entry") {
			var studentId = CustomObjectAPI.getObjectEntryIdByName(
				en_US_plural_label = "students",
				name = "Student1");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "students",
				entryId = ${studentId},
				fieldLabel = "description",
				fieldValue = "8PLBPFx57V1IoHPEbWK4EpQPEwn3aAtW8mnvSuB6w2p4yiagg9cC8u5TJFh3b8q4k253zgK6y5DzP59xuHJlkg9nwFIsBEpAEiMdP84Hg8rZXnk7rthhwCJvq1wMhFDnAnPQw80rei7JK3nM8enCH0nj6GMLr8AvrjIrc5fb3tqn6M6YSE0IYR5HTU96G7Yfz9KligiuVdKk7TJVWdVIofY7DNrwnUuTtNRl4TP2emx051azT3Gz3T5k0vPOp3xr7LrlYcpu7oYlDG3nTAMQm6i6hMd30FMr4EvrA8YsN0F8jXzVXGG3Ro8ls910JEpY31TwlS76hlDQ9lmKD9Cei69WgfXx3MYlhRZ2B1bq5RnPtDbXw6hn7Tvjyo7LZ8L7x4xBrs6bke2Xi5V1sIvawCJsxKCK976aMe7vRZffDGFh59YXMXS4z6Fqp93C98jpqLlR9F6cU2k5G218rkikobMFBAUH7j",
				requiredFieldLabel = "name",
				requiredFieldValue = "Student1");
		}

		task ("When requesting '{portalURL}/o/c/subjects?filter=(contains(subjectStudents/description, '8PLBPFx57V1I')) or (contains(subjectStudents/description, 'bMFBAUH7j')") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=%28contains%28subjectStudents%2Fdescription%2C%20%278PLBPFx57V1I%27%29%29%20or%20%28contains%28subjectStudents%2Fdescription%2C%20%27bMFBAUH7j%27%29%29");
		}

		task ("Then the data of Subject1,Subject2 is returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Subject1,Subject2");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 2,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterParentObjectEntriesInManyToManyRelByChildObjectPrecisionDecimalCreatedAfterPublishingObject {
		task ("And Given adding to Student object a precision decimal 'tuition' field") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "PrecisionDecimal",
				dBType = "BigDecimal",
				name = "tuition",
				objectDefinitionName = "Student");
		}

		task ("And Given updating a tuition field with value 123.45 in Student2 entry") {
			var student2Id = CustomObjectAPI.getObjectEntryIdByName(
				en_US_plural_label = "students",
				name = "Student2");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "students",
				entryId = ${student2Id},
				fieldLabel = "tuition",
				fieldValue = "123.45",
				requiredFieldLabel = "name",
				requiredFieldValue = "Student2");
		}

		task ("When requesting '{portalURL}/o/c/subjects?filter=(not (subjectStudents/tuition ge 123.45)) or (subjectStudents/tuition lt 0)'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=%28not%20%28subjectStudents%2Ftuition%20ge%20123.45%29%29%20or%20%28subjectStudents%2Ftuition%20lt%200%29");
		}

		task ("Then the data of Subject2, Subject3, Subject4 is returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[*].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Subject1");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

}