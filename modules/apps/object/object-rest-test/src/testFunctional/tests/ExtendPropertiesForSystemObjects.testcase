@component-name = "portal-headless"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given system User object with a new field added through the objects framework") {
			var userObjectId = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = "User");

			ObjectFieldAPI.setUpGlobalObjectFieldId(
				dbType = "String",
				name = "passportNumber",
				objectDefinitionId = "${userObjectId}");
		}
	}

	tearDown {
		UserAccountAPI.deleteUserAccount();

		ObjectFieldAPI.deleteObjectField();
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanCreateUserAndSetValueOfPropertyAddedtoSystemObject {
		property portal.acceptance = "true";

		task ("When with post request postUserAccount to create a user with the new field") {
			var response = UserAccountAPI.setUpGlobalUserAccountId(
				alternateName = "userln",
				emailAddress = "userln@liferay.com",
				familyName = "userfn",
				fieldName = "passportNumber",
				fieldValue = "passportNum2022",
				givenName = "usergn");
		}

		task ("Then the value of the added field is set successfully in response") {
			var actualValueOfPassportNumber = JSONUtil.getWithJSONPath("${response}", "$.passportNumber");

			TestUtils.assertEquals(
				actual = "${actualValueOfPassportNumber}",
				expected = "passportNum2022");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanUpdateValueOfPropertyAddedToSystemObjectWithPatchRequest {
		property portal.acceptance = "true";

		task ("And Given with post request postUserAccount to create a user with the new field") {
			UserAccountAPI.setUpGlobalUserAccountId(
				alternateName = "userln",
				emailAddress = "userln@liferay.com",
				familyName = "userfn",
				fieldName = "passportNumber",
				fieldValue = "passportNum2022",
				givenName = "usergn");
		}

		task ("When with PATCH request and existingUserAccountId I update the value of the new field") {
			var actualValueOfPassportNumber = UserAccountAPI.getUpdatedFieldOfUserAccountWithPatchRequest(
				fieldName = "passportNumber",
				updatedFieldValue = "updateByPatch-passportNum2022");
		}

		task ("Then the value of the added filed is updated successfully") {
			TestUtils.assertEquals(
				actual = "${actualValueOfPassportNumber}",
				expected = "updateByPatch-passportNum2022");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanUpdateValueOfPropertyAddedToSystemObjectWithPutRequest {
		property portal.acceptance = "true";

		task ("And Given with post request postUserAccount to create a user with the new field") {
			UserAccountAPI.setUpGlobalUserAccountId(
				alternateName = "userln",
				emailAddress = "userln@liferay.com",
				familyName = "userfn",
				fieldName = "passportNumber",
				fieldValue = "passportNum2022",
				givenName = "usergn");
		}

		task ("When with PUT request and existingUserAccountId I update the value of the new field") {
			var actualValueOfPassportNumber = UserAccountAPI.getUpdatedFieldOfUserAccountWithPutRequest(
				alternateName = "userln",
				emailAddress = "userln@liferay.com",
				familyName = "userfn",
				fieldName = "passportNumber",
				givenName = "usergn",
				updatedFieldValue = "updateByPut-passportNum2022");
		}

		task ("Then the value of the added filed is replaced successfully in response") {
			TestUtils.assertEquals(
				actual = "${actualValueOfPassportNumber}",
				expected = "updateByPut-passportNum2022");
		}
	}

}