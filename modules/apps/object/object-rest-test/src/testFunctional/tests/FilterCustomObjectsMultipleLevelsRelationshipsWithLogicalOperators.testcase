@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-154672=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Student, Subject and University object definitions with field 'name' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsRelationshipsUsingLogicalOperators {
		task ("Given relationships: one-to-many studentSubjects, many-to-many subjectsUniversities") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentSubjects",
				parentObjectName = "Student",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				deletionType = "cascade",
				name = "subjectsUniversities",
				parentObjectName = "Subject",
				type = "manyToMany");
		}

		task ("And Given an Integer field 'position' created in Universities object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "Integer",
				dBType = "Integer",
				name = "position",
				objectDefinitionName = "University");
		}

		task ("And Given created student 'Niamh' related to created subject 'Economy' and value listed to 'true' with studentSubjects") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Niamh");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Economy");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Economy",
				parent_plural_label = "students",
				parentEntryName = "Niamh",
				relationshipName = "studentSubjects");
		}

		task ("And Given subject 'Economy' related to created university 'Harvard' with position value '40' with subjectsUniversities") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Harvard");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "universities",
				entryId = ${universityId},
				fieldLabel = "position",
				fieldValue = 40,
				requiredFieldLabel = "name",
				requiredFieldValue = "Harvard");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "universities",
				childEntryName = "Harvard",
				parent_plural_label = "subjects",
				parentEntryName = "Economy",
				relationshipName = "subjectsUniversities");
		}

		task ("When in GetStudentsPage filtering by 'studentSubjects/subjectsUniversities/name eq 'Harvard' and not (studentSubjects/subjectsUniversities/position gt 41)'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "filter=studentSubjects%2FsubjectsUniversities%2Fname%20eq%20%27Harvard%27%20and%20not%20%28studentSubjects%2FsubjectsUniversities%2Fposition%20gt%2041%29");
		}

		task ("Then 'Niamh' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Niamh");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

}