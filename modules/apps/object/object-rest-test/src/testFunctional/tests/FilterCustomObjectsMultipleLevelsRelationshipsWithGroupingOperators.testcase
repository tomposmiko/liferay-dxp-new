@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-154672=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given custom object Universitry, Student, Subject with name field are created and published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterWithGroupingOperatorThroughMultipleManyToManyFromChild {
		task ("And Given many-to-many studentsSubjects relationship created being Student the parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentsSubjects",
				parentObjectName = "Student",
				type = "manyToMany");
		}

		task ("And Given many-to-many universitiesStudents relationship created being University the parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "universitiesStudents",
				parentObjectName = "University",
				type = "manyToMany");
		}

		task ("And Given Integer field price added to University object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "Integer",
				dBType = "Integer",
				name = "price",
				objectDefinitionName = "University");
		}

		task ("And Given First University with price 1200, Student Bob and Subject English created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Bob");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "English");

			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "First");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "universities",
				entryId = ${universityId},
				fieldLabel = "price",
				fieldValue = 1200,
				requiredFieldLabel = "name",
				requiredFieldValue = "First");
		}

		task ("And Given with putUniversityUniversitiesStudentsStudent I relate Bob to First University") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Bob",
				parent_plural_label = "universities",
				parentEntryName = "First",
				relationshipName = "universitiesStudents");
		}

		task ("And Given with putStudentStudentsSubjectsSubject I relate Bob to English") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "English",
				parent_plural_label = "students",
				parentEntryName = "Bob",
				relationshipName = "studentsSubjects");
		}

		task ("When with get I request c/subjects?filter=(studentsSubjects/universitiesStudents/name eq 'First') and (studentsSubjects/universitiesStudents/price gt 1000)") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=%28studentsSubjects%2FuniversitiesStudents%2Fname%20eq%20%27First%27%29%20and%20%28studentsSubjects%2FuniversitiesStudents%2Fprice%20gt%201000%29");
		}

		task ("Then I can see data of subject English in response") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "English");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterWithGroupingOperatorThroughMultipleManyToManyFromParent {
		task ("And Given many-to-many studentsSubjects relationship created being Student the parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentsSubjects",
				parentObjectName = "Student",
				type = "manyToMany");
		}

		task ("And Given many-to-many universitiesSubjects relationship created being University the parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "universitiesSubjects",
				parentObjectName = "University",
				type = "manyToMany");
		}

		task ("And Given First University, Student Bob and Subject English created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Bob");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "English");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "First");
		}

		task ("And Given with putUniversityUniversitiesSubjectsSubject I relate English to First University") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "English",
				parent_plural_label = "universities",
				parentEntryName = "First",
				relationshipName = "universitiesSubjects");
		}

		task ("And Given with putStudentStudentsSubjectsSubject I relate Bob to English") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "English",
				parent_plural_label = "students",
				parentEntryName = "Bob",
				relationshipName = "studentsSubjects");
		}

		task ("When with get I request c/students?filter=(studentsSubjects/universitiesSubjects/name eq 'First')") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "filter=studentsSubjects%2FuniversitiesSubjects%2Fname%20eq%20%27First%27");
		}

		task ("Then I can see data of student Bob in response") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Bob");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterWithGroupingOperatorThroughMultipleOneToMany {
		task ("And Given one-to-many 'studentSubjects' relationship created being Student the parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentSubjects",
				parentObjectName = "Student",
				type = "oneToMany");
		}

		task ("And Given one-to-many universitySubjects relationship created being University the parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "universitySubjects",
				parentObjectName = "University",
				type = "oneToMany");
		}

		task ("And Given First University, Student Bob and Subject English created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Bob");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "English");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "First");
		}

		task ("And Given with universitySubjects I relate English to First University") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "English",
				parent_plural_label = "universities",
				parentEntryName = "First",
				relationshipName = "universitySubjects");
		}

		task ("And Given with studentSubjects I relate Bob to English") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "English",
				parent_plural_label = "students",
				parentEntryName = "Bob",
				relationshipName = "studentSubjects");
		}

		task ("When with get I request c/universities?filter=universitySubjects/studentSubjects/name eq 'Bob'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "universities",
				parameter = "filter=universitySubjects%2FstudentSubjects%2Fname%20eq%20%27Bob%27");
		}

		task ("Then I can see data of First University in response") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "First");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

}