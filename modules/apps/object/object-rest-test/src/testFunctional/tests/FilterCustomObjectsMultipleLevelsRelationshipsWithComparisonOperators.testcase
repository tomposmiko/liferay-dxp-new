@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-154672=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Student, Subject and University object definitions with field 'name' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonEqByCustomField {
		task ("Given one-to-many relationships: universityStudents, studentSubjects created") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "universityStudents",
				parentObjectName = "University",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentSubjects",
				parentObjectName = "Student",
				type = "oneToMany");
		}

		task ("And Given created university 'Oxford' related to created student 'Pearl' with universityStudents") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Oxford");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Pearl");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Pearl",
				parent_plural_label = "universities",
				parentEntryName = "Oxford",
				relationshipName = "universityStudents");
		}

		task ("And Given student 'Pearl' related to the created subject 'Calculus' with studentSubjects") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Calculus");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Calculus",
				parent_plural_label = "students",
				parentEntryName = "Pearl",
				relationshipName = "studentSubjects");
		}

		task ("When in GetUniversitiesPage filtering by 'universityStudents/studentSubjects/name eq 'Calculus'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "universities",
				parameter = "filter=universityStudents%2FstudentSubjects%2Fname%20eq%20%27Calculus%27");
		}

		task ("Then 'Oxford' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Oxford");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonEqBySystemField {
		task ("Given one-to-many relationships: subjectUniversities, studentSubjects created") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				deletionType = "cascade",
				name = "subjectUniversities",
				parentObjectName = "Subject",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentSubjects",
				parentObjectName = "Student",
				type = "oneToMany");
		}

		task ("And Given created subject 'Literature' related to created university 'Cambridge' with subjectUniversities") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Literature");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Cambridge");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "universities",
				childEntryName = "Cambridge",
				parent_plural_label = "subjects",
				parentEntryName = "Literature",
				relationshipName = "subjectUniversities");
		}

		task ("And Given created student 'Ann' related to the subject 'Literature' with studentSubjects") {
			var annId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Ann");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Literature",
				parent_plural_label = "students",
				parentEntryName = "Ann",
				relationshipName = "studentSubjects");
		}

		task ("When in GetUniversitiesPage filtering by 'subjectUniversities/studentSubjects/externalReferenceCode eq '{AnnErcValue}'") {
			var getAnnResponse = ObjectDefinitionAPI._getObjectEntryById(
				en_US_plural_label = "students",
				objectId = ${annId});

			var annErc = JSONPathUtil.getErcValue(response = ${getAnnResponse});

			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "universities",
				parameter = "filter=subjectUniversities%2FstudentSubjects%2FexternalReferenceCode%20eq%20%27${annErc}%27");
		}

		task ("Then 'Cambridge' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Cambridge");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonGe {
		task ("Given relationships: many-to-many studentsUniversities, one-to-many subjectUniversities") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				deletionType = "cascade",
				name = "studentsUniversities",
				parentObjectName = "Student",
				type = "manyToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				deletionType = "cascade",
				name = "subjectUniversities",
				parentObjectName = "Subject",
				type = "oneToMany");
		}

		task ("And Given a Precision Decimal field 'tuition' created in Subject object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "PrecisionDecimal",
				dBType = "BigDecimal",
				name = "tuition",
				objectDefinitionName = "Subject");
		}

		task ("And Given created student 'John' related to created university 'Liferay' with studentsUniversities") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "John");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "universities",
				childEntryName = "Liferay",
				parent_plural_label = "students",
				parentEntryName = "John",
				relationshipName = "studentsUniversities");
		}

		task ("And Given university 'Liferay' related to created subject 'Portlet' with tuition value '123.45'") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Portlet");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "subjects",
				entryId = ${subjectId},
				fieldLabel = "tuition",
				fieldValue = "123.45",
				requiredFieldLabel = "name",
				requiredFieldValue = "Portlet");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "universities",
				childEntryName = "Liferay",
				parent_plural_label = "subjects",
				parentEntryName = "Portlet",
				relationshipName = "subjectUniversities");
		}

		task ("When in GetStudentsPage filtering by 'studentsUniversities/subjectUniversities/tuition ge 123.45'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "filter=studentsUniversities%2FsubjectUniversities%2Ftuition%20ge%20123.45");
		}

		task ("Then 'John' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "John");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonGt {
		task ("Given one-to-many relationships: subjectUniversities,universityStudents") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				deletionType = "cascade",
				name = "subjectUniversities",
				parentObjectName = "Subject",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "universityStudents",
				parentObjectName = "University",
				type = "oneToMany");
		}

		task ("And Given an Integer field 'graduationYear' created in Student object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "Integer",
				dBType = "Integer",
				name = "graduationYear",
				objectDefinitionName = "Student");
		}

		task ("And Given created subject 'Literature' related to created university 'Cambridge' with subjectUniversities") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Literature");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Cambridge");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "universities",
				childEntryName = "Cambridge",
				parent_plural_label = "subjects",
				parentEntryName = "Literature",
				relationshipName = "subjectUniversities");
		}

		task ("And Given university 'Cambridge' related to created student 'Pearl' with graduationYear value '1990' with universityStudents") {
			var studentId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Pearl");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "students",
				entryId = ${studentId},
				fieldLabel = "graduationYear",
				fieldValue = 1990,
				requiredFieldLabel = "name",
				requiredFieldValue = "Pearl");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Pearl",
				parent_plural_label = "universities",
				parentEntryName = "Cambridge",
				relationshipName = "universityStudents");
		}

		task ("When in GetSubjectsPage filtering by 'subjectUniversities/universityStudents/graduationYear gt 1989'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=subjectUniversities%2FuniversityStudents%2FgraduationYear%20gt%201989");
		}

		task ("Then 'Literature' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Literature");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonLe {
		task ("Given many-to-many relationships: universitiesSubjects,studentsUniversities") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "universitiesSubjects",
				parentObjectName = "University",
				type = "manyToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "University",
				deletionType = "cascade",
				name = "studentsUniversities",
				parentObjectName = "Student",
				type = "manyToMany");
		}

		task ("And Given created university 'Berkeley' related to created subject 'Science' with universitiesSubjects") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Science");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Berkeley");

			var studentId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Clementine");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Science",
				parent_plural_label = "universities",
				parentEntryName = "Berkeley",
				relationshipName = "universitiesSubjects");
		}

		task ("And Given created university 'Berkeley' related to created subject 'Science' with universitiesSubjects") {
			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "universities",
				childEntryName = "Berkeley",
				parent_plural_label = "students",
				parentEntryName = "Clementine",
				relationshipName = "studentsUniversities");
		}

		task ("When in GetSubjectsPage filtering by 'universitiesSubjects/studentsUniversities/id le {ClementineIdValue}'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=universitiesSubjects%2FstudentsUniversities%2Fid%20le%20%27${studentId}%27");
		}

		task ("Then 'Science' entry details are returned") {
			var actualUniversityName = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actualUniversityName},
				expected = "Science");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonLt {
		task ("Given one-to-many relationships: universityStudents, studentSubjects created") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "universityStudents",
				parentObjectName = "University",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentSubjects",
				parentObjectName = "Student",
				type = "oneToMany");
		}

		task ("And Given created subject 'Calculus' related to created student 'Pearl' with studentSubjects") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Calculus");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Pearl");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Calculus",
				parent_plural_label = "students",
				parentEntryName = "Pearl",
				relationshipName = "studentSubjects");
		}

		task ("And Given student 'Pearl' related to the created university 'Oxford' with universityStudents") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Oxford");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Pearl",
				parent_plural_label = "universities",
				parentEntryName = "Oxford",
				relationshipName = "universityStudents");
		}

		task ("When in GetSubjectsPage filtering by 'universityStudents/studentSubjects/dateCreated lt 2030-04-10T15:04:51Z'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "subjects",
				parameter = "filter=studentSubjects%2FuniversityStudents%2FdateCreated%20lt%202030-04-10T15%3A04%3A51Z");
		}

		task ("Then 'Calculus' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Calculus");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsWithComparisonNeByBoolean {
		task ("Given relationships: one-to-many studentSubjects, many-to-many subjectsSubjects") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "studentSubjects",
				parentObjectName = "Student",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "subjectsSubjects",
				parentObjectName = "Subject",
				type = "manyToMany");
		}

		task ("And Given a Boolean field 'listed' created in Subject object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "Boolean",
				dBType = "Boolean",
				name = "listed",
				objectDefinitionName = "Subject");
		}

		task ("And Given created student 'Niamh' related to created subject 'Politics' with studentSubjects") {
			var scienceId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Politics");
			var studentId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Niamh");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Politics",
				parent_plural_label = "students",
				parentEntryName = "Niamh",
				relationshipName = "studentSubjects");
		}

		task ("And Given subject 'Political Science' related to created subject 'History' with listed value 'true' with subjectsSubjects") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "History");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "subjects",
				entryId = ${subjectId},
				fieldLabel = "listed",
				fieldValue = "true",
				requiredFieldLabel = "name",
				requiredFieldValue = "History");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "History",
				parent_plural_label = "subjects",
				parentEntryName = "Politics",
				relationshipName = "subjectsSubjects");
		}

		task ("When in GetStudentsPage filtering by 'studentSubjects/subjectsSubjects/listed ne false'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "filter=studentSubjects%2FsubjectsSubjects%2Flisted%20ne%20false");
		}

		task ("Then 'Niamh' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Niamh");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

}