@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-154672=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given Student, Subject and University object definitions with field 'name' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		Picklist.deletePicklistViaAPI(picklistName = "mode");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test CanFilterMultipleLevelsRelationshipsUsingLambdaOperator {
		task ("Given relationships: one-to-many universitySubjects, many-to-many subjectsStudents") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "universitySubjects",
				parentObjectName = "University",
				type = "oneToMany");

			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "subjectsStudents",
				parentObjectName = "Subject",
				type = "manyToMany");
		}

		task ("And Given a Picklist 'mode' with items 'distance' and 'presential' created") {
			Picklist.addPicklistViaAPI(picklistName = "mode");

			Picklist.addPicklistItemViaAPI(
				itemKey = "distance",
				itemName = "distance",
				picklistName = "mode");

			Picklist.addPicklistItemViaAPI(
				itemKey = "presential",
				itemName = "presential",
				picklistName = "mode");

			var picklistId = JSONObject.getPicklistId(picklistName = "mode");
		}

		task ("And Given Multiselect Picklist field 'mode' created in University object") {
			ObjectDefinitionAPI.postObjectDefinitionObjectField(
				businessType = "MultiselectPicklist",
				dBType = "String",
				listTypeDefinitionId = ${picklistId},
				name = "mode",
				objectDefinitionName = "University");
		}

		task ("And Given created student 'Dora' related to created subject 'Art' and value listed to 'true' with subjectsStudents") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Dora");

			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Art");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Dora",
				parent_plural_label = "subjects",
				parentEntryName = "Art",
				relationshipName = "subjectsStudents");
		}

		task ("And Given subject 'Art' related to created university 'Wisconsin' with 'mode' value 'distance' with universitySubjects") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Wisconsin");

			ObjectFieldAPI.updateFieldOfEntryById(
				en_US_plural_label = "universities",
				entryId = ${universityId},
				fieldLabel = "mode",
				fieldValue = "[\"distance\"]",
				requiredFieldLabel = "name",
				requiredFieldValue = "Wisconsin");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Art",
				parent_plural_label = "universities",
				parentEntryName = "Wisconsin",
				relationshipName = "universitySubjects");
		}

		task ("When in GetStudentsPage filtering by 'subjectsStudents/universitySubjects/mode/any(k:k eq 'distance')'") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				parameter = "filter=subjectsStudents%2FuniversitySubjects%2Fmode%2Fany%28k%3Ak%20eq%20%27distance%27%29");
		}

		task ("Then 'Dora' entry details are returned") {
			var actual = JSONPathUtil.getProperty(
				property = "$.items[0].name",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actual},
				expected = "Dora");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = 1,
				responseToParse = ${response});
		}
	}

}