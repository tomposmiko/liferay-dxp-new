definition {

	macro _assertEmployeeFirstnameCorrect {
		var actualEmployeeFirstname = JSONUtil.getWithJSONPath(${responseToParse}, "$.items[?(@.id==${entryId})].firstname");

		TestUtils.assertEquals(
			actual = ${actualEmployeeFirstname},
			expected = ${expectedEmployeeFirstname});
	}

	macro _assertManagerFirstnameCorrect {
		var actualManagerFirstname = JSONUtil.getWithJSONPath(${responseToParse}, "$.items[?(@.id==${entryId})].r_supervisor_c_manager.firstname");

		TestUtils.assertEquals(
			actual = ${actualManagerFirstname},
			expected = ${expectedManagerFirstname});
	}

	macro _assertManagerIdCorrect {
		var actualManagerId = JSONUtil.getWithJSONPath(${responseToParse}, "$.items[?(@.id==${entryId})].${nestedObjectParameterName}.id");

		TestUtils.assertEquals(
			actual = ${actualManagerId},
			expected = ${expectedManagerId});
	}

	macro _createEmployee {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/employees \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
				-d {
					"firstname": "${firstname}",
					"r_supervisor_c_managerId": "${managerId}"
				}
		''';

		var employeeId = JSONCurlUtil.post(${curl}, "$.id");

		return ${employeeId};
	}

	macro _createManager {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/managers \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
				-d {
					"firstname": "${firstname}"
				}
		''';

		var managerId = JSONCurlUtil.post(${curl}, "$.id");

		return ${managerId};
	}

	macro _createObjectDefinition {
		Variables.assertDefined(parameterList = "${en_US_label},${name},${requiredStringFieldName},${en_US_plural_label}");

		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		if (!(isSet(scope))) {
			var scope = "company";
		}

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
				-d {
					"active": true,
					"label": {
						"en_US": "${en_US_label}"
					},
					"name": "${name}",
					"objectFields": [{
						"DBType": "String",
						"businessType": "Text",
						"indexed": true,
						"indexedAsKeyword": true,
						"label": {
							"en_US": "${requiredStringFieldName}"
						},
						"name": "${requiredStringFieldName}",
						"required": true,
						"dbtype": "String"
					}],
					"pluralLabel": {
						"en_US": "${en_US_plural_label}"
					},
					"portlet": true,
					"scope": "${scope}"
				}
		''';

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var objectDefinitionId = JSONCurlUtil.post(${curl}, "$.id");

		return ${objectDefinitionId};
	}

	macro _createObjectEntryWithName {
		Variables.assertDefined(parameterList = ${name});

		var response = ObjectDefinitionAPI.createObjectEntryWithField(
			en_US_plural_label = ${en_US_plural_label},
			fieldName = "name",
			fieldValue = ${name},
			token = ${token},
			virtualHost = ${virtualHost});

		var objectId = JSONPathUtil.getIdValue(response = ${response});

		return ${objectId};
	}

	macro _createRelationship {
		Variables.assertDefined(parameterList = "${deletionType},${en_US_label},${name},${objectDefinitionId1},${objectDefinitionId2},${type}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId1}/object-relationships \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
				-d {
					"deletionType": "${deletionType}",
					"label": {
						"en_US": "${en_US_label}"
					},
					"name": "${name}",
					"objectDefinitionId2": "${objectDefinitionId2}",
					"type": "${type}"
				}
		''';

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var relationshipId = JSONCurlUtil.post(${curl}, "$.id");

		return ${relationshipId};
	}

	macro _curlObjectEntriesRelationship {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectEntry1},${objectEntry2},${relationshipName}");

		var portalURL = JSONCompany.getPortalURL();
		var en_US_plural_label_lowercase = StringUtil.lowerCase(${en_US_plural_label});

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectEntry1}/${relationshipName}/${objectEntry2} \
				-u test@liferay.com:test
		''';

		return ${curl};
	}

	macro _deleteObjectEntry {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectEntryId}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase(${en_US_plural_label});
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectEntryId} \
				-u test@liferay.com:test \
				-H accept: application/json
		''';

		var response = JSONCurlUtil.delete(${curl});

		return ${response};
	}

	macro _deleteRelationship {
		Variables.assertDefined(parameterList = ${relationshipId});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-relationships/${relationshipId} \
				-u test@liferay.com:test \
				-H accept: application/json
		''';

		var response = JSONCurlUtil.delete(${curl});

		return ${response};
	}

	macro _getEmployeeFirstnameById {
		Variables.assertDefined(parameterList = ${employeeId});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/employees/${employeeId} \
				-u test@liferay.com:test
		''';

		var employeeFirstname = JSONCurlUtil.get(${curl}, "$.firstname");

		return ${employeeFirstname};
	}

	macro _getManagerFirstnameById {
		Variables.assertDefined(parameterList = ${managerId});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/managers/${managerId} \
				-u test@liferay.com:test
		''';

		var managerFirstname = JSONCurlUtil.get(${curl}, "$.firstname");

		return ${managerFirstname};
	}

	macro _getObjectDefinitionStatusById {
		Variables.assertDefined(parameterList = ${objectDefinitionId});

		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId} \
				-u test@liferay.com:test
		''';

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var objectDefinitionStatus = JSONCurlUtil.get(${curl}, "$.active");

		return ${objectDefinitionStatus};
	}

	macro _getObjectEntryById {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectId}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase(${en_US_plural_label});

		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectId} \
				-u test@liferay.com:test
		''';

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var response = JSONCurlUtil.get(${curl});

		return ${response};
	}

	macro _getObjectsWithAggregationTerms {
		Variables.assertDefined(parameterList = ${aggregationTermsValue});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${objects}?aggregationTerms=${aggregationTermsValue} \
				-u test@liferay.com:test
		''';

		var json = JSONCurlUtil.get(${curl});

		return ${json};
	}

	macro _getObjectsWithNestedField {
		Variables.assertDefined(parameterList = "${nestedField}, ${objects}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${objects}?nestedFields=${nestedField} \
				-u test@liferay.com:test
		''';

		var json = JSONCurlUtil.get(${curl});

		return ${json};
	}

	macro _getRelationshipId {
		Variables.assertDefined(parameterList = ${objectDefinitionId});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId}/object-relationships \
				-u test@liferay.com:test
		''';

		if (isSet(relationshipName)) {
			var relationshipId = JSONCurlUtil.get(${curl});
		}
		else {
			var relationshipId = JSONCurlUtil.get(${curl}, "$..['id']");
		}

		return ${relationshipId};
	}

	macro _getRelationshipNameById {
		Variables.assertDefined(parameterList = ${relationshipId});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-relationships/${relationshipId} \
				-u test@liferay.com:test
		''';

		var relationshipName = JSONCurlUtil.get(${curl}, "$.name");

		return ${relationshipName};
	}

	macro _modifyRelationship {
		Variables.assertDefined(parameterList = "${deletionType},${relationshipId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-relationships/${relationshipId} \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
				-H accept: application/json \
				-d {
					"deletionType": "${deletionType}"
				}
		''';

		var relationshipDeletionType = JSONCurlUtil.put(${curl});

		return ${relationshipDeletionType};
	}

	macro _publishObjectDefinition {
		Variables.assertDefined(parameterList = ${objectDefinitionId});

		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId}/publish \
				-u test@liferay.com:test
		''';

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var json = JSONCurlUtil.post(${curl});

		return ${json};
	}

	macro _updateEmployee {
		Variables.assertDefined(parameterList = "${employeeId},${firstname},${managerId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/employees/${employeeId} \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
				-d {
					"firstname": "${firstname}",
					"r_supervisor_c_managerId": "${managerId}"
				}
		''';

		var response = JSONCurlUtil.put(${curl});

		return ${response};
	}

	macro assertBatchActionsInResponse {
		Variables.assertDefined(parameterList = "${responseToParse},${batchActions}");

		for (var batchAction : list ${batchActions}) {
			var portalURL = JSONCompany.getPortalURL();

			if (isSet(objectSchema)) {
				var expectedHref = "${portalURL}/o/object-admin/v1.0/${objectSchema}/batch";
			}
			else if (isSet(en_US_plural_label)) {
				var expectedHref = "${portalURL}/o/c/${en_US_plural_label}/batch";
			}
			else {
				var expectedHref = "${portalURL}/o/object-admin/v1.0/object-definitions/batch";
			}

			if (${batchAction} == "updateBatch") {
				var actualHref = JSONUtil.getWithJSONPath(${responseToParse}, "$.actions.updateBatch[?(@.method == 'PUT')].href");
			}
			else if (${batchAction} == "deleteBatch") {
				var actualHref = JSONUtil.getWithJSONPath(${responseToParse}, "$.actions.deleteBatch[?(@.method == 'DELETE')].href");
			}
			else {
				var actualHref = JSONUtil.getWithJSONPath(${responseToParse}, "$.actions.createBatch[?(@.method == 'POST')].href");

				if (isSet(objectDefinitionId)) {
					var expectedHref = "${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId}/${objectSchema}/batch";
				}
			}

			TestUtils.assertEquals(
				actual = ${actualHref},
				expected = ${expectedHref});
		}
	}

	macro assertBatchActionsWithGetObjectSchemas {
		Variables.assertDefined(parameterList = "${objectDefinitionId},${objectSchemas},${batchActions}");

		var portalURL = JSONCompany.getPortalURL();

		for (var objectSchema : list ${objectSchemas}) {
			var curl = '''
				${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId}/${objectSchema} \
					-H Content-Type: application/json \
					-u test@liferay.com:test
			''';

			var response = JSONCurlUtil.get(${curl});

			ObjectDefinitionAPI.assertBatchActionsInResponse(
				batchActions = ${batchActions},
				objectDefinitionId = ${objectDefinitionId},
				objectSchema = ${objectSchema},
				responseToParse = ${response});
		}
	}

	macro assertEmployeeHasNestedFieldManager {
		var nestedObjectParameterName = StringUtil.replace(${nestedField}, "Id", "");

		ObjectDefinitionAPI._assertEmployeeFirstnameCorrect(
			entryId = ${objectId},
			expectedEmployeeFirstname = ${expectedEmployeeFirstname},
			responseToParse = ${responseToParse});

		ObjectDefinitionAPI._assertManagerFirstnameCorrect(
			entryId = ${objectId},
			expectedManagerFirstname = ${expectedManagerFirstname},
			nestedField = ${nestedField},
			responseToParse = ${responseToParse});

		ObjectDefinitionAPI._assertManagerIdCorrect(
			entryId = ${objectId},
			expectedManagerFirstname = ${expectedManagerFirstname},
			expectedManagerId = ${expectedManagerId},
			nestedObjectParameterName = ${nestedObjectParameterName},
			responseToParse = ${responseToParse});
	}

	macro assertInFacetsWithCorrectValue {
		var actualValue = JSONUtil.getWithJSONPath(${responseToParse}, "$..facetValues[?(@.term=='${managerId}' && @.numberOfOccurrences==${expectedValue})].numberOfOccurrences");

		TestUtils.assertEquals(
			actual = ${actualValue},
			expected = ${expectedValue});
	}

	macro assertNestedFieldDetail {
		Variables.assertDefined(parameterList = "${getObjectsWithNestedFieldReponse},${nestedField},${objectField},${objectEntryId}, ${expectedValue}");

		var actualValue = JSONUtil.getWithJSONPath(${getObjectsWithNestedFieldReponse}, "$.items[?(@.id==${objectEntryId})].${nestedField}[*].${objectField}");

		TestUtils.assertEquals(
			actual = ${actualValue},
			expected = ${expectedValue});
	}

	macro assertNoItemsInResponse {
		Variables.assertDefined(parameterList = ${responseToParse});

		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$.items");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = "");
	}

	macro assertResponseHasCorrectObjectEntryName {
		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$.items[?(@.id==${objectEntryId})].name");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = ${expectedValue});
	}

	macro assertResponseIncludeCorrectDetailsOfNotDeletedObject {
		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$..universitiesSubjects[?(@.id==${objectEntryId})].name");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = ${expectedValue});
	}

	macro assertResponseIncludesDetailsOfNotDeletedEmployee {
		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$..items[?(@.id==${employeeId2})].r_supervisor_c_manager.id");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = ${managerId2});
	}

	macro assertResponseNotIncludeDetailsOfDeletedObject {
		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$..universitiesSubjects");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = ${expectedValue});
	}

	macro assertResponseNotIncludesDetailsOfDeletedEmployee {
		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$..items[?(@.id==${employeeId1})].r_supervisor_c_manager.id");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = "");
	}

	macro assertResponseOnlyIncludesDetailsOfNotDeletedEmployee {
		ObjectDefinitionAPI.assertResponseNotIncludesDetailsOfDeletedEmployee(
			employeeId1 = ${employeeId1},
			managerId1 = ${managerId1},
			responseToParse = ${responseToParse});

		ObjectDefinitionAPI.assertResponseIncludesDetailsOfNotDeletedEmployee(
			employeeId2 = ${employeeId2},
			managerId2 = ${managerId2},
			responseToParse = ${responseToParse});
	}

	macro assertStatusInResponse {
		var actual = JSONUtil.getWithJSONPath(${responseToParse}, "$.status");

		TestUtils.assertEquals(
			actual = ${actual},
			expected = ${expectedValue});
	}

	macro breakRelationshipBetweenEntries {
		var curl = ObjectDefinitionAPI._curlObjectEntriesRelationship(
			en_US_plural_label = ${en_US_plural_label},
			objectEntry1 = ${objectEntry1},
			objectEntry2 = ${objectEntry2},
			relationshipName = ${relationshipName});

		JSONCurlUtil.delete(${curl});
	}

	macro createAndPublishObjectDefinition {
		var objectDefinitionId = ObjectDefinitionAPI._createObjectDefinition(
			en_US_label = ${en_US_label},
			en_US_plural_label = ${en_US_plural_label},
			name = ${name},
			requiredStringFieldName = ${requiredStringFieldName},
			token = ${token},
			virtualHost = ${virtualHost});

		ObjectDefinitionAPI._publishObjectDefinition(
			objectDefinitionId = ${objectDefinitionId},
			token = ${token},
			virtualHost = ${virtualHost});

		var objectDefinitionStatus = ObjectDefinitionAPI._getObjectDefinitionStatusById(
			objectDefinitionId = ${objectDefinitionId},
			token = ${token},
			virtualHost = ${virtualHost});

		TestUtils.assertEquals(
			actual = ${objectDefinitionStatus},
			expected = "true");

		return ${objectDefinitionId};
	}

	macro createEmployee {
		var employeeId = ObjectDefinitionAPI._createEmployee(
			firstname = ${employeeFirstname},
			managerId = ${managerId});

		var firstname = ObjectDefinitionAPI._getEmployeeFirstnameById(employeeId = ${employeeId});

		TestUtils.assertEquals(
			actual = ${firstname},
			expected = ${employeeFirstname});

		return ${employeeId};
	}

	macro createManager {
		var managerId = ObjectDefinitionAPI._createManager(firstname = ${managerFirstname});

		var firstname = ObjectDefinitionAPI._getManagerFirstnameById(managerId = ${managerId});

		TestUtils.assertEquals(
			actual = ${firstname},
			expected = ${managerFirstname});

		return ${managerId};
	}

	macro createObjectEntryWithField {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${fieldName},${fieldValue}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase(${en_US_plural_label});

		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		var body = '''"${fieldName}": "${fieldValue}"''';

		if (isSet(secondField)) {
			var body = StringUtil.add("${body},", "\"secondField\":\"${secondFieldValue}\"", "");
		}

		var api = ${en_US_plural_label_lowercase};

		if (isSet(scopeKey)) {
			var scopeKey = JSONGroupAPI._getGroupIdByNameNoSelenium(
				groupName = "Guest",
				site = "true");

			var api = StringUtil.add(${api}, "/scopes/${scopeKey}", "");
		}

		var curlWithoutBody = '''
			${portalURL}/o/c/${api} \
				-u test@liferay.com:test \
				-H Content-Type: application/json \
		''';

		var curl = StringUtil.add(${curlWithoutBody}, "-d {${body}}", " ");

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var response = JSONCurlUtil.post(${curl});

		return ${response};
	}

	macro createObjectEntryWithName {
		var objectId = ObjectDefinitionAPI._createObjectEntryWithName(
			en_US_plural_label = ${en_US_plural_label},
			name = ${name},
			secondFieldValue = ${secondFieldValue},
			token = ${token},
			virtualHost = ${virtualHost});

		var response = ObjectDefinitionAPI._getObjectEntryById(
			en_US_plural_label = ${en_US_plural_label},
			objectId = ${objectId},
			token = ${token},
			virtualHost = ${virtualHost});

		var actualName = JSONUtil.getWithJSONPath(${response}, "$.name");

		TestUtils.assertEquals(
			actual = ${actualName},
			expected = ${name});

		return ${objectId};
	}

	macro createRelationship {
		var relationshipId = ObjectDefinitionAPI._createRelationship(
			deletionType = ${deletionType},
			en_US_label = ${en_US_label},
			name = ${name},
			objectDefinitionId1 = ${objectDefinitionId1},
			objectDefinitionId2 = ${objectDefinitionId2},
			type = ${type});

		var relationshipName = ObjectDefinitionAPI._getRelationshipNameById(relationshipId = ${relationshipId});

		TestUtils.assertEquals(
			actual = ${relationshipName},
			expected = ${name});

		return ${relationshipName};
	}

	macro deleteObjectEntry {
		ObjectDefinitionAPI._deleteObjectEntry(
			en_US_plural_label = ${en_US_plural_label},
			objectEntryId = ${objectEntryId});
	}

	macro deleteRelationship {
		if (isSet(relationshipName)) {
			var relationshipName = ${relationshipName};
			var objectDefinitionId = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = ${name});

			var response = ObjectDefinitionAPI._getRelationshipId(
				objectDefinitionId = ${objectDefinitionId},
				relationshipName = ${relationshipName});

			var relationshipId = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.name=='${relationshipName}')]..id");
		}
		else {
			var relationshipId = ObjectDefinitionAPI._getRelationshipId(objectDefinitionId = ${objectDefinitionId});
		}

		ObjectDefinitionAPI._deleteRelationship(relationshipId = ${relationshipId});
	}

	macro getObjectDefinitionIdByName {
		Variables.assertDefined(parameterList = ${name});

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions?filter=name%20eq%20%27${name}%27 \
				-H Content-Type: application/json \
				-u test@liferay.com:test
		''';

		var objectDefinitionId = JSONCurlUtil.get(${curl}, "$.items[?(@['name'] == '${name}')]['id']");

		return ${objectDefinitionId};
	}

	macro getObjectDefinitions {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions \
				-H Content-Type: application/json \
				-u test@liferay.com:test
		''';

		var response = JSONCurlUtil.get(${curl});

		return ${response};
	}

	macro getObjectDefinitionStatusByName {
		var objectDefinitionId = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = ${name});

		var objectDefinitionStatus = ObjectDefinitionAPI._getObjectDefinitionStatusById(objectDefinitionId = ${objectDefinitionId});

		return ${objectDefinitionStatus};
	}

	macro getObjectEntries {
		Variables.assertDefined(parameterList = ${en_US_plural_label});

		var en_US_plural_label_lowercase = StringUtil.lowerCase(${en_US_plural_label});

		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase}/ \
				-u test@liferay.com:test
		''';

		if (isSet(token)) {
			var curl = StringUtil.add(${curl}, " -H 'Authorization: Bearer ${token}'", "");
		}

		var response = JSONCurlUtil.get(${curl});

		return ${response};
	}

	macro getObjectEntryRelationship {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectId},${relationshipName}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase(${en_US_plural_label});
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectId}/${relationshipName} \
				-H accept: application/json \
				-u test@liferay.com:test
		''';

		var json = JSONCurlUtil.get(${curl});

		return ${json};
	}

	macro getObjectsWithAggregationTerms {
		var getObjectsWithAggregationTermsJSON = ObjectDefinitionAPI._getObjectsWithAggregationTerms(
			aggregationTermsValue = ${aggregationTermsValue},
			objects = ${objects});

		return ${getObjectsWithAggregationTermsJSON};
	}

	macro getObjectsWithNestedField {
		var getObjectsWithNestedFieldJSON = ObjectDefinitionAPI._getObjectsWithNestedField(
			nestedField = ${nestedField},
			objects = ${objects});

		return ${getObjectsWithNestedFieldJSON};
	}

	macro modifyRelationship {
		var objectDefinitionId = JSONObject.getObjectId(objectName = ${objectName});

		var relationshipId = ObjectDefinitionAPI._getRelationshipId(objectDefinitionId = ${objectDefinitionId});

		ObjectDefinitionAPI._modifyRelationship(
			deletionType = ${deletionType},
			relationshipId = ${relationshipId});
	}

	macro relateObjectEntries {
		var curl = ObjectDefinitionAPI._curlObjectEntriesRelationship(
			en_US_plural_label = ${en_US_plural_label},
			objectEntry1 = ${objectEntry1},
			objectEntry2 = ${objectEntry2},
			relationshipName = ${relationshipName});

		var response = JSONCurlUtil.put(${curl});

		return ${response};
	}

	macro setUpGlobalObjectDefinitionIdWithName {
		Variables.assertDefined(parameterList = ${objectName});

		var objectId = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = ${objectName});

		static var staticObjectId = ${objectId};

		return ${staticObjectId};
	}

	macro setUpGlobalObjectEntryId {
		var objectEntryId1 = ObjectDefinitionAPI.createObjectEntryWithName(
			en_US_plural_label = "foundations",
			name = "Foundation First");
		var objectEntryId2 = ObjectDefinitionAPI.createObjectEntryWithName(
			en_US_plural_label = "foundations",
			name = "Foundation Second");
		var objectEntryId3 = ObjectDefinitionAPI.createObjectEntryWithName(
			en_US_plural_label = "secondFoundations",
			name = "Foundation First-1");
		var objectEntryId4 = ObjectDefinitionAPI.createObjectEntryWithName(
			en_US_plural_label = "secondFoundations",
			name = "Foundation Second-1");
		static var staticObjectEntryId1 = ${objectEntryId1};
		static var staticObjectEntryId2 = ${objectEntryId2};
		static var staticObjectEntryId3 = ${objectEntryId3};
		static var staticObjectEntryId4 = ${objectEntryId4};

		return ${staticObjectEntryId1};

		return ${staticObjectEntryId2};

		return ${staticObjectEntryId3};

		return ${staticObjectEntryId4};
	}

	macro setUpGlobalUniversityId {
		var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
			en_US_plural_label = "universities",
			name = "University Name");

		static var staticUniversityId = ${universityId};

		return ${staticUniversityId};
	}

	macro staticStudentObjectId {
		var objectId = ObjectDefinitionAPI.createAndPublishObjectDefinition(
			en_US_label = "student",
			en_US_plural_label = "students",
			name = "Student",
			requiredStringFieldName = "name");

		static var staticStudentObjectId = ${objectId};

		return ${staticStudentObjectId};
	}

	macro staticSubjectObjectId {
		var objectId = ObjectDefinitionAPI.createAndPublishObjectDefinition(
			en_US_label = "subject",
			en_US_plural_label = "subjects",
			name = "Subject",
			requiredStringFieldName = "name");

		static var staticSubjectObjectId = ${objectId};

		return ${staticSubjectObjectId};
	}

	macro staticUniversityObjectId {
		var objectId = ObjectDefinitionAPI.createAndPublishObjectDefinition(
			en_US_label = "university",
			en_US_plural_label = "universities",
			name = "University",
			requiredStringFieldName = "name");

		static var staticUniversityObjectId = ${objectId};

		return ${staticUniversityObjectId};
	}

	macro updateEmployee {
		ObjectDefinitionAPI._updateEmployee(
			employeeId = ${employeeId},
			firstname = ${employeeFirstname},
			managerId = ${managerId});

		var firstname = ObjectDefinitionAPI._getEmployeeFirstnameById(employeeId = ${employeeId});

		TestUtils.assertEquals(
			actual = ${firstname},
			expected = ${employeeFirstname});

		return ${employeeId};
	}

}