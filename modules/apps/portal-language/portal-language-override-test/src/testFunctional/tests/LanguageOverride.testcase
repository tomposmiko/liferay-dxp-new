@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Language Override";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		LanguageOverride.openLanguageOverridePortlet();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This test adds a new language key via the Language Override portlet and asserts that a user can search and view it in the main view page."
	@priority = "5"
	test CanAddLanguageKey {
		property portal.acceptance = "true";

		task ("Given that a user is in the Language Override portlet") {
			ControlMenu.viewHeaderTitle(headerTitle = "Language Override");
		}

		task ("When a user clicks on the plus button, fills out the form, and saves it") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,fr-FR,pt-BR,es-ES",
				translationOverrideValueList = "Text contains error,Le texte contient une erreur,O texto contÃƒÂ©m erro,El texto contiene error");
		}

		task ("Then the language key is successfully saved and can be viewed in the View page") {
			Search.searchCP(searchTerm = "text-contains-error");

			AssertTextEquals(
				key_languageKey = "text-contains-error",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error");

			AssertTextEquals(
				key_translation = "Text contains error",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY_TRANSLATION",
				value1 = "Text contains error");
		}
	}

	@description = "This test changes the display style from list to table."
	@priority = "2"
	test CanChangeTheDisplayStyletoTableView {
		task ("Given the default display style is List") {
			LexiconEntry.viewActiveDisplayStyle(displayStyle = "list");

			LexiconList.viewAnyList(listEntry = "+-add-address-line");
		}

		task ("When change the display style to Table") {
			LexiconEntry.changeDisplayStyle(displayStyle = "table");
		}

		task ("Then the exist language keys diplay in Table style") {
			LexiconEntry.viewActiveDisplayStyle(displayStyle = "table");

			LexiconTable.viewTableEntryTitle(tableEntry = "+-add-address-line");

			AssertElementNotPresent(
				key_listEntry = "+-add-address-line",
				locator1 = "LexiconList#ANY_LIST");
		}
	}

	@description = "Filtering by 'Selected Language' and choosing a language will only show keys created with translations available in the selected language."
	@priority = "3"
	test CanFilterLanguageKeysByLocaleViaLanguageSelector {
		task ("Given two separate language keys are added") {
			LanguageOverride.addLanguageKey(
				languageKey = "BR-Key",
				translationOverrideList = "pt-BR",
				translationOverrideValueList = "BR Key");

			LanguageOverride.addLanguageKey(
				languageKey = "ES-Key",
				translationOverrideList = "ca-ES",
				translationOverrideValueList = "ES Key");
		}

		task ("When the filter is set to 'Selected Language' it will default to 'en-US' language which has no created keys") {
			ManagementBar.setFilterAndOrder(filterBy = "Selected Language");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No language entries were found.");
		}

		task ("Then switching to another language with created keys should only show keys that have translations in that language") {
			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "pt-BR");

			LexiconList.viewListEntryTitle(listEntry = "BR-Key");

			AssertElementNotPresent(
				key_listEntry = "ES-Key",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");

			PageEditor.changeLocale(
				currentLocale = "pt-BR",
				locale = "ca-ES");

			LexiconList.viewListEntryTitle(listEntry = "ES-Key");

			AssertElementNotPresent(
				key_listEntry = "BR-Key",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");
		}
	}

	@description = "This test filters to only see Overrides."
	@priority = "4"
	test CanFilterOverrides {
		task ("Given that assert no existing keys filter by Any Language") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "0 Results for");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No language entries were found.");

			Click(locator1 = "LanguageOverride#FILTER_BY_ANY_LANGUAGE_REMOVE_ANY_LANGUAGE_FILTER");

			AssertTextEquals(
				key_languageKey = "0-analytics-cloud-connection",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "0-analytics-cloud-connection");
		}

		task ("When add a language key and filters by Any Language") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US",
				translationOverrideValueList = "Text contains error");

			ManagementBar.setFilterAndOrder(filterBy = "Any Language");
		}

		task ("Then user can only view Overridden keys") {
			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result for");

			AssertElementPresent(locator1 = "LanguageOverride#FILTER_BY_ANY_LANGUAGE_FILTER_LABEL");

			AssertTextEquals(
				key_languageKey = "text-contains-error",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error");

			AssertTextEquals(
				locator1 = "LanguageOverride#LANGUAGE_KEY_OVERRIDDEN_LABEL",
				value1 = "Languages With Override: en_US");
		}
	}

	@description = "This test asserts that a user can remove all translation overrides on the main view page for language keys that are overridden and doing so will delete the language key"
	@priority = "5"
	test CanRemoveAllTranslationOverridesViaMenuItem {
		property portal.acceptance = "true";

		task ("Given that a user has created a new language key") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,fr-FR,pt-BR,es-ES",
				translationOverrideValueList = "Text contains error,Le texte contient une erreur,O texto contÃƒÂ©m erro,El texto contiene error");
		}

		task ("and the user sets the navigation filter to Any Language") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");
		}

		task ("When the user removes all translation overrides via the Menu Item option") {
			LanguageOverride.removeAllTranslationOverrides(languageKey = "text-contains-error");
		}

		task ("Then all the translations will be removed and thus deleting the Overridden key") {
			LanguageOverride.openLanguageOverridePortlet();

			Search.searchCP(searchTerm = "text-contains-error");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No language entries were found.");
		}
	}

	@description = "This test asserts that a user can remove translation override for a selected language for language keys that are overridden via the menu item"
	@priority = "3"
	test CanRemoveTranslationOverrideForSelectedLanguageViaMenuItem {
		task ("Given that a user has created a new language key") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,fr-FR,pt-BR,es-ES",
				translationOverrideValueList = "Text contains error,Le texte contient une erreur,O texto contÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â©m erro,El texto contiene error");
		}

		task ("and the user sets the navigation filter to Any Language") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");
		}

		task ("When the user selects a language and removes translation override for the selected language") {
			LanguageOverride.removeTranslationOverrideForSelectedLanguage(
				currentLanguage = "en-US",
				languageKey = "text-contains-error",
				newLanguage = "pt-BR");
		}

		task ("Then only the selected translation override will be removed") {
			LanguageOverride.openLanguageOverridePortlet();

			Search.searchCP(searchTerm = "text-contains-error");

			LanguageOverride.goToLanguageKey(languageKey = "text-contains-error");

			AssertTextEquals(
				key_fieldLabel = "pt-BR",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "");
		}
	}

	@description = "This test can search existing keys and view it in the main view page."
	@priority = "5"
	test CanSearchForExistingKeys {
		property portal.acceptance = "true";

		task ("When the language key is existed and search it in search bar") {
			Search.searchCP(searchTerm = "2-synced-contact-data");
		}

		task ("Then the language key can be viewed in the View page and there is results message") {
			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result for &quot;2-synced-contact-data&quot;");

			AssertTextEquals(
				key_languageKey = "2-synced-contact-data",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "2-synced-contact-data");

			AssertTextEquals(
				key_translation = "Synced Contact Data",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY_TRANSLATION",
				value1 = "Synced Contact Data");
		}
	}

	@description = "This is a use case for LPS-146565. It asserts the language key filtered by 'Any Language' can be searched."
	@priority = "3"
	test CanSearchForLanguageKeyFilterByAnyLanguage {
		task ("Given a new language key is created with three language override translations") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,fr-FR,es-ES",
				translationOverrideValueList = "Text contains error,Le texte contient une erreur,El texto contiene error");
		}

		task ("When the user filters by 'Any Language' and searches for the new key") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");

			Search.searchCP(searchTerm = "text-contains-error");
		}

		task ("Then the key should appear and list all three languages it has translations for") {
			AssertTextEquals(
				key_languageKey = "text-contains-error",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error");

			AssertTextEquals(
				locator1 = "LanguageOverride#LANGUAGE_KEY_OVERRIDDEN_LABEL",
				value1 = "Languages With Override: es_ES, fr_FR, en_US");
		}
	}

	@description = "This is a use case for LPS-146565. It asserts the translation filtered by 'Any Language' can be searched."
	@priority = "3"
	test CanSearchForTranslationFilterbyAnyLanguage {
		task ("Given two new language keys are created with three language override translations") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error1",
				translationOverrideList = "en-US,fr-FR,es-ES",
				translationOverrideValueList = "Text contains error1,Le texte contient une erreur1,El texto contiene error1");

			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error2",
				translationOverrideList = "en-US,fr-FR,es-ES",
				translationOverrideValueList = "Text contains error2,Le texte contient une erreur2,El texto contiene error2");
		}

		task ("When the user filters by 'Any Language' and searches for the fr-FR translation") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "fr-FR");

			Search.searchCP(searchTerm = "Le texte contient une erreur2");
		}

		task ("Then the key should appear and list all three languages it has translations for") {
			AssertTextEquals(
				key_languageKey = "text-contains-error2",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error2");

			AssertTextEquals(
				locator1 = "LanguageOverride#LANGUAGE_KEY_OVERRIDDEN_LABEL",
				value1 = "Languages With Override: es_ES, fr_FR, en_US");

			AssertTextNotPresent(
				key_languageKey = "text-contains-error1",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error1");
		}
	}

	@description = "This test asserts that searching for existing translations will yield accurate results."
	@priority = "5"
	test CanSearchForTranslations {
		property portal.acceptance = "true";

		task ("Given that add a language key") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,fr-FR,pt-BR,es-ES",
				translationOverrideValueList = "Text contains error,Le texte contient une erreur,O texto contÃƒÂ©m erro,El texto contiene error");
		}

		task ("When the language key is successfully saved change language to pt-BR and search translation in search bar") {
			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "pt-BR");

			Search.searchCP(searchTerm = "O texto contÃƒÂ©m erro");
		}

		task ("Then the language key can be viewed in the View page and there is results message and search for translations") {
			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result for &quot;O texto contÃƒÂ©m erro&quot;");

			AssertTextEquals(
				key_languageKey = "text-contains-error",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error");

			AssertTextEquals(
				key_translation = "O texto contÃƒÂ©m erro",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY_TRANSLATION",
				value1 = "O texto contÃƒÂ©m erro");

			PageEditor.changeLocale(
				currentLocale = "pt-BR",
				locale = "fr-FR");

			Search.searchCP(searchTerm = "Le texte contient une erreur");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result for &quot;Le texte contient une erreur&quot;");

			AssertTextEquals(
				key_languageKey = "text-contains-error",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "text-contains-error");

			AssertTextEquals(
				key_translation = "Le texte contient une erreur",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY_TRANSLATION",
				value1 = "Le texte contient une erreur");
		}
	}

	@description = "This test clears all overrides for an overridden language key via the Edit page. Doing so will delete the language key."
	@priority = "5"
	test ClearingAllOverridesInEditPageWillDeleteCreatedKey {
		property portal.acceptance = "true";

		task ("Given that a user has created a new language key") {
			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,es-ES",
				translationOverrideValueList = "Text contains error,El texto contiene error");
		}

		task ("and the user is in the Edit language key page") {
			Search.searchCP(searchTerm = "text-contains-error");

			LanguageOverride.goToLanguageKey(languageKey = "text-contains-error");
		}

		task ("When the user clicks on Clear All Overrides") {
			LanguageOverride.clearAllOverridesViaEditPage();
		}

		task ("Then all the overrides are cleared and the language key no longer exists") {
			LanguageOverride.openLanguageOverridePortlet();

			Search.searchCP(searchTerm = "text-contains-error");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No language entries were found.");
		}
	}

	@description = "This test updates an existing key's translation override values. It then clears all overrides for the existing language key via the Edit page. Doing so will reset all values. It will not delete the key."
	@priority = "5"
	test ClearingAllOverridesInEditPageWillResetValuesForExistingKeys {
		property portal.acceptance = "true";

		task ("Given that a user is in the edit page of a language key that is OOTB") {
			Search.searchCP(searchTerm = "a-configuration-with-this-name-already-exists");
		}

		task ("and the translation values are updated") {
			LanguageOverride.updateTranslationOverrideValues(
				languageKey = "a-configuration-with-this-name-already-exists",
				translationOverrideList = "nl-NL,de-DE,sv-SE",
				translationOverrideValueList = "edit1,edit2,edit3");

			ManagementBar.setFilterAndOrder(filterBy = "Any Language");

			LanguageOverride.goToLanguageKey(languageKey = "a-configuration-with-this-name-already-exists");

			AssertTextEquals(
				key_fieldLabel = "nl-NL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "edit1");

			AssertTextEquals(
				key_fieldLabel = "de-DE",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "edit2");

			AssertTextEquals(
				key_fieldLabel = "sv-SE",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "edit3");
		}

		task ("When the user clicks on Clear All Overrides") {
			LanguageOverride.clearAllOverridesViaEditPage();

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No language entries were found.");
		}

		task ("Then all the overrides are reset. The existing language key does not get deleted.") {
			LanguageOverride.openLanguageOverridePortlet();

			Search.searchCP(searchTerm = "a-configuration-with-this-name-already-exists");

			LanguageOverride.goToLanguageKey(languageKey = "a-configuration-with-this-name-already-exists");

			AssertTextEquals(
				key_fieldLabel = "nl-NL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "");

			AssertTextEquals(
				key_fieldLabel = "de-DE",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "");

			AssertTextEquals(
				key_fieldLabel = "sv-SE",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "");
		}
	}

	@description = "This is a use case for LPS-146568. It asserts the language overriden will be bolded when it matches the selected language."
	@priority = "3"
	test LanguageOverrideIsBoldedWhenMatchestheSelectedLanguage {
		task ("Given new languages key are added for en-US and nl-NL separately") {
			LanguageOverride.addLanguageKey(
				languageKey = "new-key",
				translationOverrideList = "nl-NL",
				translationOverrideValueList = "Nieuwe Sleutel");

			LanguageOverride.addLanguageKey(
				languageKey = "text-not-bold",
				translationOverrideList = "en-US",
				translationOverrideValueList = "Text not bold");
		}

		task ("When the filter is set to 'Any Language' and the locale is set to 'nl-NL'") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "nl-NL");
		}

		task ("Then both keys should be present, but only the selected language 'nl-NL' should be bold") {
			AssertElementPresent(
				key_languageKey = "text-not-bold",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY");

			AssertElementPresent(
				key_language = "nl_NL",
				key_languageKey = "new-key",
				locator1 = "LanguageOverride#BOLD_LANGUAGE_WITH_OVERRIDE");

			AssertElementNotPresent(
				key_language = "en-US",
				key_languageKey = "text-not-bold",
				locator1 = "LanguageOverride#BOLD_LANGUAGE_WITH_OVERRIDE");
		}
	}

	@description = "This test assert the OOTB Language Key added by default has no override related information."
	@priority = "3"
	test NoOverrideRelatedInfosDisplayForOOTBLanguageKey {
		task ("Given that assert no existing keys when filter by Any Language") {
			ManagementBar.setFilterAndOrder(filterBy = "Any Language");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No language entries were found.");
		}

		task ("When remove any language fiter") {
			Click(locator1 = "LanguageOverride#FILTER_BY_ANY_LANGUAGE_REMOVE_ANY_LANGUAGE_FILTER");
		}

		task ("Then the OOTB language keys display") {
			AssertTextEquals(
				key_languageKey = "0-analytics-cloud-connection",
				locator1 = "LanguageOverride#VIEW_PAGE_LANGUAGE_KEY",
				value1 = "0-analytics-cloud-connection");

			LexiconList.viewListEntrySubtitle(
				listEntry = "0-analytics-cloud-connection",
				listEntrySubtitle = "Analytics Cloud Connection");

			AssertElementNotPresent(locator1 = "LanguageOverride#LANGUAGE_KEY_OVERRIDDEN_LABEL");
		}
	}

}