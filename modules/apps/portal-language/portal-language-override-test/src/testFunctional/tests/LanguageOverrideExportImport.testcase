@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Language Override";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		LanguageOverride.openLanguageOverridePortlet();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This test asserts that Cancel button works as expected in Import Translations page."
	@priority = "5"
	test CanCancelImportTranslation {
		task ("Given assert the Import Translations page display") {
			Portlet.gotoPortletOptions(portletOption = "Import Translations");

			ControlMenu.viewHeaderTitleNotPresent(headerTitle = "Language Override");

			ControlMenu.viewHeaderTitle(headerTitle = "Import Translations");

			AssertElementPresent(
				key_title = "Import File",
				locator1 = "Header#H5_TITLE");

			AssertTextEquals(
				locator1 = "LanguageOverride#IMPORT_TRANSLATIONS_DESCRIPTION",
				value1 = "Support file format .properties.");

			PortalSettings.viewDefaultLanguageCP(defaultPortalLanguage = "en-US");

			InputField.viewText(
				fieldLabel = "File Upload",
				text = "");

			Button.viewPresent(button = "Save");
		}

		task ("When click Cancel button") {
			Button.clickCancel();
		}

		task ("Then user is redirected to language key page") {
			ControlMenu.viewHeaderTitleNotPresent(headerTitle = "Import Translations");

			ControlMenu.viewHeaderTitle(headerTitle = "Language Override");
		}
	}

	@description = "This test ensures that separate language keys with overridden translation of the same locale will export successfully"
	@priority = "4"
	test CanExportMultipleLanguageKeysWithOverride {
		task ("Given that there are two language keys with en-US override") {
			LanguageOverride.addLanguageKey(
				languageKey = "hello-world",
				translationOverrideList = "en-US",
				translationOverrideValueList = "Hello world");

			LanguageOverride.addLanguageKey(
				languageKey = "this-is-a-language-key",
				translationOverrideList = "en-US",
				translationOverrideValueList = "This is a language key");
		}

		task ("When a user exports overridden translations,") {
			LanguageOverride.exportOverriddenTranslations();

			var originalFileDownloadName = TestCase.getDownloadedTempFileName(fileNamePattern = "*.zip");

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "unzip-temp-file -DfileName=${originalFileDownloadName}");
		}

		task ("Then the language properties file for en-US displays all translations") {
			DMDocument.assertFileNameFromTempFolder(fileName = "Language_en_US.properties");

			DMDocument.assertDownloadedFileContent(
				downloadedContent = '''hello-world=Hello world
this-is-a-language-key=This is a language key''',
				fileName = "Language_en_US.properties");
		}
	}

	@description = "This test ensures that a user can export overridden translations for a single language key"
	@priority = "5"
	test CanExportOverriddenTranslations {
		task ("Given that by default, Export function does not display") {
			Portlet.viewPortletOptions(optionsName = "Import Translations");

			Portlet.viewNoPortletOptions(optionsName = "Export Overridden Translations");
		}

		task ("When a user adds a language key with translation override,") {
			LanguageOverride.addLanguageKey(
				languageKey = "hello-world",
				translationOverrideList = "en-US,fr-FR,pt-BR,es-ES",
				translationOverrideValueList = "Hello world,bonjour le monde,ola mundo,hola mundo");
		}

		task ("Then a user can successfully export these overridden translations as properties file") {
			LanguageOverride.exportOverriddenTranslations();

			var originalFileDownloadName = TestCase.getDownloadedTempFileName(fileNamePattern = "*.zip");

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "unzip-temp-file -DfileName=${originalFileDownloadName}");

			for (var fileName : list "Language_en_US.properties,Language_fr_FR.properties,Language_pt_BR.properties,Language_es_ES.properties") {
				DMDocument.assertFileNameFromTempFolder(fileName = "${fileName}");

				if ("${fileName}" == "Language_en_US.properties") {
					DMDocument.assertDownloadedFileContent(
						downloadedContent = "hello-world=Hello world",
						fileName = "Language_en_US.properties");
				}
				else if ("${fileName}" == "Language_fr_FR.properties") {
					DMDocument.assertDownloadedFileContent(
						downloadedContent = "hello-world=bonjour le monde",
						fileName = "Language_fr_FR.properties");
				}
				else if ("${fileName}" == "Language_pt_BR.properties") {
					DMDocument.assertDownloadedFileContent(
						downloadedContent = "hello-world=ola mundo",
						fileName = "Language_pt_BR.properties");
				}
				else {
					DMDocument.assertDownloadedFileContent(
						downloadedContent = "hello-world=hola mundo",
						fileName = "Language_es_ES.properties");
				}
			}
		}
	}

	@description = "This test asserts that a user cannot import translations that has more than 1000 characters"
	@priority = "3"
	test CannotImportTranslationsWithMoreThan1000Characters {
		task ("Given that a user can import translations") {
			Portlet.gotoPortletOptions(portletOption = "Import Translations");
		}

		task ("When a user uploads a language key with translation that has more than 1000 characters") {
			UploadDependencyFile.uploadFile(fileName = "language_key_with_more_than_1000_characters.properties");

			Button.clickSave();
		}

		task ("Then the file does not upload") {
			Alert.viewRequestFailedToComplete();

			Alert.viewErrorMessage(errorMessage = "Error: Keys longer than 1000 characters are not allowed.");

			AssertConsoleTextNotPresent(value1 = "Data truncation");
		}

		task ("and the translation was not imported") {
			LanguageOverride.openLanguageOverridePortlet();

			Search.searchCP(searchTerm = "newkey");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "0 Results for &quot;newkey&quot;");
		}
	}

	@description = "This test asserts that the File Upload field is required in Import Translations page."
	@priority = "4"
	test CanViewFileUploadFieldIsRequired {
		task ("Given go to the Import Translations page") {
			Portlet.gotoPortletOptions(portletOption = "Import Translations");
		}

		task ("When click Save button") {
			Button.clickSave();
		}

		task ("Then assert error message and File Upload field is required") {
			FormPortlet.viewValidationErrorMessage();

			FormFields.viewFieldRequired(fieldLabel = "File Upload");
		}
	}

}