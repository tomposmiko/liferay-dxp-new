definition {

	macro archiveAndDeleteOriginalFile {
		Variables.assertDefined(parameterList = "${sourceFilePath},${fileNameWithExtension}");

		if (!(isSet(destinationPath))) {
			var destinationPath = PropsUtil.get("liferay.home.dir.name");
		}

		var archivedFilePath = "${destinationPath}/${fileNameWithExtension}";

		ArchiveUtil.archive(${sourceFilePath}, ${archivedFilePath});

		FileUtil.delete(${sourceFilePath});

		return ${archivedFilePath};
	}

	macro copyDependenciesDirToFolder {
		Variables.assertDefined(parameterList = ${file});

		var filePath = TestCase.getDependenciesDirPath(fileName = ${file});

		if (!(isSet(destinationDir))) {
			var destinationDir = PropsUtil.get("liferay.home.dir.name");
		}

		var destinationFilePath = "${destinationDir}/${file}";

		FileUtil.copyDirectory(${filePath}, ${destinationFilePath});

		return ${destinationFilePath};
	}

	macro deleteFileInModulesFolder {
		Variables.assertDefined(parameterList = ${file});

		var homeDir = PropsUtil.get("liferay.home.dir.name");

		var fileExists = FileUtil.exists("${homeDir}/osgi/modules/${file}");

		if (${fileExists} == "true") {
			FileUtil.delete("${homeDir}/osgi/modules/${file}");
		}
		else {
			echo("The file ${file} doesn't exist in osgi modules folder.");
		}
	}

	macro moveFileToDeployFolder {
		Variables.assertDefined(parameterList = "${sourceFilePath},${fileName}");

		if (!(isSet(destinationPath))) {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var deployFolder = "${liferayHome}/deploy";
		}

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "move-file -Dfile=${sourceFilePath} -Dtofile=${deployFolder}/${fileName}");

		WaitForConsoleTextPresent(value1 = "Processing ${fileName}");
	}

	macro moveFileToOSGIModulesFolder {
		Variables.assertDefined(parameterList = "${sourceFilePath},${fileName},${appName}");

		if (!(isSet(destinationPath))) {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var deployFolder = "${liferayHome}/osgi/modules";
		}

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "move-file -Dfile=${sourceFilePath} -Dtofile=${deployFolder}/${fileName}");

		WaitForConsoleTextPresent(value1 = "STARTED ${appName}");
	}

	macro setUpGlobalIds {
		var companyId = JSONCompany.getCompanyIdNoSelenium(portalURL = ${portalURL});
		var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "Guest");
		var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = "test@liferay.com");
		static var staticCompanyId = ${companyId};
		static var staticSiteId = ${siteId};
		static var staticUserId = ${userId};

		return ${staticCompanyId};

		return ${staticSiteId};

		return ${staticUserId};
	}

	macro waitUntilBlogsVisibleInUI {
		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Blogs");

		while ((IsVisible(locator1 = "Message#EMPTY_INFO", value1 = "No entries were found.")) && (maxIterations = "5")) {
			Refresh();

			WaitForSPARefresh();
		}
	}

	macro waitUntilObjectPresentInUI {
		ObjectPortlet.assertIsDisplayedOnControlPanel(itemMenu = "Objects");

		ObjectAdmin.openObjectAdmin();

		while ((IsElementNotPresent(key_labelName = ${labelName}, locator1 = "CreateObject#OBJECT_NAME")) && (maxIterations = "5")) {
			Refresh();

			WaitForSPARefresh();
		}

		CreateObject.assertCustomObject(labelName = "User");
	}

	macro waitUntilWebContentPresentInUI {
		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		LexiconEntry.viewActiveDisplayStyle(displayStyle = "list");

		while ((IsElementNotPresent(locator1 = "WC#ENTRY_LIST_THUMBNAIL_GENERIC")) && (maxIterations = "5")) {
			Refresh();

			WaitForSPARefresh();
		}
	}

}