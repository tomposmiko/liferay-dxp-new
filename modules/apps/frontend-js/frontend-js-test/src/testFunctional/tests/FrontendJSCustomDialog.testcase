@component-name = "portal-frontend-infrastructure"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Custom Dialog";
	property testray.main.component.name = "Frontend JS API";

	setUp {
		TestCase.setUpPortalInstance();

		task ("Given Custom view enabled for a dataset display instance") {
			User.firstLoginPG();

			PortalSettings.openInstanceSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Custom Dialogs",
				configurationName = "Custom Dialogs",
				configurationScope = "Virtual Instance Scope");

			SystemSettings.configureSystemSetting(
				enableSetting = "true",
				settingFieldName = "Enabled");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();

			SystemSettings.configureSystemSetting(
				enableSetting = "false",
				settingFieldName = "Enabled");
		}
	}

	@description = "LPS-165263: This test validates that the liferay custom alert modal dialog can render."
	@priority = 3
	test CanRenderOpenAlertModal {
		task ("When: run JS code: Liferay.Util.openAlertModal({message: 'Test Alert Modal', onConfirm: ()=>{}})") {
			RunScript(locator1 = "Liferay.Util.openAlertModal({message: 'Test Alert Modal', onConfirm: ()=>{}})");
		}

		task ("Then: text 'Test Alert Modal' is present in the modal") {
			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Test Alert Modal");
		}
	}

	@description = "LPS-165262"
	@priority = 3
	test CanRenderOpenConfirmModal {
		RunScript(locator1 = "Liferay.Util.openConfirmModal({message: 'Test Confirm Modal', onConfirm: ()=>{}})");
	}

}