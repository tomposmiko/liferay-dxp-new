import com.liferay.gradle.util.copy.StripPathSegmentsAction

task buildClay(type: Copy)
task buildJQuery(type: Copy)
task buildJQueryPluginsForm
task buildLiferayAMDLoader(type: Copy)
task buildLodash(type: Copy)
task buildSvg4everybody(type: Copy)

File jsDestinationDir = file("tmp/META-INF/resources")

buildClay {
	File clayDestinationDir = new File(jsDestinationDir, "clay")

	dependsOn npmInstall

	doFirst {
		delete clayDestinationDir
	}

	eachFile new StripPathSegmentsAction(3)

	from npmInstall.nodeModulesDir
	include "clay/lib/js/"
	includeEmptyDirs = false
	into clayDestinationDir
}

buildJQuery {
	File jqueryDestinationDir = new File(jsDestinationDir, "jquery")

	dependsOn npmInstall

	doFirst {
		delete jqueryDestinationDir
	}

	eachFile new StripPathSegmentsAction(2)

	from npmInstall.nodeModulesDir
	include "jquery/dist/jquery.js"
	includeEmptyDirs = false
	into jqueryDestinationDir
}

buildJQueryPluginsForm {
	File jQueryPluginsFormJsFile = file("src/main/resources/META-INF/resources/jquery/form.js")

	dependsOn npmInstall

	doLast {
		String text = file(npmInstall.nodeModulesDir + "/jquery-form/jquery.form.js").text

		text = text.replace("typeof define === 'function'", "false && typeof define === 'function'")

		text = ";(function(jQuery){" + System.getProperty("line.separator") + text + '})(AUI.$);'

		jQueryPluginsFormJsFile.text = text
	}

	onlyIf {
		!jQueryPluginsFormJsFile.exists()
	}
}

buildLiferayAMDLoader {
	dependsOn npmInstall
	eachFile new StripPathSegmentsAction(3)
	from npmInstall.nodeModulesDir

	include "liferay-amd-loader/build/loader/loader.js.map"
	include "liferay-amd-loader/build/loader/loader.js"

	includeEmptyDirs = false
	into new File(jsDestinationDir, "loader")
}

buildLodash {
	File lodashDestinationDir = new File(jsDestinationDir, "lodash")

	dependsOn npmInstall

	doFirst {
		delete lodashDestinationDir
	}

	eachFile new StripPathSegmentsAction(1)

	filter {
		String line ->

		line.replace "typeof define == 'function'", "false && typeof define == 'function'"
	}

	from npmInstall.nodeModulesDir
	include "lodash/lodash.js"
	includeEmptyDirs = false
	into lodashDestinationDir
}

buildSvg4everybody {
	dependsOn npmInstall
	eachFile new StripPathSegmentsAction(2)

	filter {
		String line ->

		line.replace "\"function\" == typeof define", "false && \"function\" == typeof define"
	}

	from npmInstall.nodeModulesDir
	include "svg4everybody/dist/svg4everybody.js"
	includeEmptyDirs = false
	into new File(jsDestinationDir, "misc")
}

classes {
	dependsOn buildClay
	dependsOn buildJQuery
	dependsOn buildJQueryPluginsForm
	dependsOn buildLiferayAMDLoader
	dependsOn buildLodash
	dependsOn buildSvg4everybody
	dependsOn npmRunWebpack
}

clean {
	delete "tmp"
}

dependencies {
	compileOnly group: "com.liferay", name: "com.liferay.petra.lang", version: "2.0.0"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "3.0.0"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "3.0.0"
	compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "3.0.0"
	compileOnly group: "javax.portlet", name: "portlet-api", version: "3.0.0"
	compileOnly group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	compileOnly group: "javax.servlet.jsp", name: "javax.servlet.jsp-api", version: "2.3.1"
	compileOnly group: "org.osgi", name: "org.osgi.core", version: "5.0.0"
	compileOnly group: "org.osgi", name: "org.osgi.service.component.annotations", version: "1.3.0"
}

replaceSoyTranslation {
	dependsOn npmRunBuild
}