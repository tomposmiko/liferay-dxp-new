/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.account.model.impl;

import com.liferay.account.model.AccountRole;
import com.liferay.account.model.AccountRoleModel;
import com.liferay.account.model.AccountRoleSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccountRole service. Represents a row in the &quot;AccountRole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccountRoleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccountRoleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccountRoleImpl
 * @generated
 */
@JSON(strict = true)
public class AccountRoleModelImpl
	extends BaseModelImpl<AccountRole> implements AccountRoleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a account role model instance should use the <code>AccountRole</code> interface instead.
	 */
	public static final String TABLE_NAME = "AccountRole";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"accountRoleId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"accountEntryId", Types.BIGINT},
		{"roleId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountRoleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AccountRole (mvccVersion LONG default 0 not null,accountRoleId LONG not null primary key,companyId LONG,accountEntryId LONG,roleId LONG)";

	public static final String TABLE_SQL_DROP = "drop table AccountRole";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accountRole.accountRoleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AccountRole.accountRoleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACCOUNTENTRYID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long ROLEID_COLUMN_BITMASK = 4L;

	public static final long ACCOUNTROLEID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AccountRole toModel(AccountRoleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AccountRole model = new AccountRoleImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setAccountRoleId(soapModel.getAccountRoleId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setAccountEntryId(soapModel.getAccountEntryId());
		model.setRoleId(soapModel.getRoleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AccountRole> toModels(AccountRoleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AccountRole> models = new ArrayList<AccountRole>(
			soapModels.length);

		for (AccountRoleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AccountRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountRoleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountRoleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccountRole.class;
	}

	@Override
	public String getModelClassName() {
		return AccountRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccountRole, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccountRole, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccountRole, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccountRole)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccountRole, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccountRole, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccountRole)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccountRole, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccountRole, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AccountRole>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AccountRole.class.getClassLoader(), AccountRole.class,
			ModelWrapper.class);

		try {
			Constructor<AccountRole> constructor =
				(Constructor<AccountRole>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AccountRole, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AccountRole, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AccountRole, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AccountRole, Object>>();
		Map<String, BiConsumer<AccountRole, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AccountRole, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", AccountRole::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<AccountRole, Long>)AccountRole::setMvccVersion);
		attributeGetterFunctions.put(
			"accountRoleId", AccountRole::getAccountRoleId);
		attributeSetterBiConsumers.put(
			"accountRoleId",
			(BiConsumer<AccountRole, Long>)AccountRole::setAccountRoleId);
		attributeGetterFunctions.put("companyId", AccountRole::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AccountRole, Long>)AccountRole::setCompanyId);
		attributeGetterFunctions.put(
			"accountEntryId", AccountRole::getAccountEntryId);
		attributeSetterBiConsumers.put(
			"accountEntryId",
			(BiConsumer<AccountRole, Long>)AccountRole::setAccountEntryId);
		attributeGetterFunctions.put("roleId", AccountRole::getRoleId);
		attributeSetterBiConsumers.put(
			"roleId", (BiConsumer<AccountRole, Long>)AccountRole::setRoleId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getAccountRoleId() {
		return _accountRoleId;
	}

	@Override
	public void setAccountRoleId(long accountRoleId) {
		_accountRoleId = accountRoleId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getAccountEntryId() {
		return _accountEntryId;
	}

	@Override
	public void setAccountEntryId(long accountEntryId) {
		_columnBitmask |= ACCOUNTENTRYID_COLUMN_BITMASK;

		if (!_setOriginalAccountEntryId) {
			_setOriginalAccountEntryId = true;

			_originalAccountEntryId = _accountEntryId;
		}

		_accountEntryId = accountEntryId;
	}

	public long getOriginalAccountEntryId() {
		return _originalAccountEntryId;
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccountRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccountRole toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccountRole>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccountRoleImpl accountRoleImpl = new AccountRoleImpl();

		accountRoleImpl.setMvccVersion(getMvccVersion());
		accountRoleImpl.setAccountRoleId(getAccountRoleId());
		accountRoleImpl.setCompanyId(getCompanyId());
		accountRoleImpl.setAccountEntryId(getAccountEntryId());
		accountRoleImpl.setRoleId(getRoleId());

		accountRoleImpl.resetOriginalValues();

		return accountRoleImpl;
	}

	@Override
	public int compareTo(AccountRole accountRole) {
		long primaryKey = accountRole.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AccountRole)) {
			return false;
		}

		AccountRole accountRole = (AccountRole)obj;

		long primaryKey = accountRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AccountRoleModelImpl accountRoleModelImpl = this;

		accountRoleModelImpl._originalCompanyId =
			accountRoleModelImpl._companyId;

		accountRoleModelImpl._setOriginalCompanyId = false;

		accountRoleModelImpl._originalAccountEntryId =
			accountRoleModelImpl._accountEntryId;

		accountRoleModelImpl._setOriginalAccountEntryId = false;

		accountRoleModelImpl._originalRoleId = accountRoleModelImpl._roleId;

		accountRoleModelImpl._setOriginalRoleId = false;

		accountRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AccountRole> toCacheModel() {
		AccountRoleCacheModel accountRoleCacheModel =
			new AccountRoleCacheModel();

		accountRoleCacheModel.mvccVersion = getMvccVersion();

		accountRoleCacheModel.accountRoleId = getAccountRoleId();

		accountRoleCacheModel.companyId = getCompanyId();

		accountRoleCacheModel.accountEntryId = getAccountEntryId();

		accountRoleCacheModel.roleId = getRoleId();

		return accountRoleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccountRole, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccountRole, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccountRole, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AccountRole)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AccountRole, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AccountRole, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccountRole, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AccountRole)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccountRole>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private long _accountRoleId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _accountEntryId;
	private long _originalAccountEntryId;
	private boolean _setOriginalAccountEntryId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private long _columnBitmask;
	private AccountRole _escapedModel;

}