@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page",
			widgetName = "Account Management");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addNewUserToBusinessAccount(
			accountName = "Account Name",
			assigneeName = "userfn",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.addAssigneeToRoleViaRolesTab(
			accountRoleTitle = "Account Administrator",
			assigneeName = "userfn");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.setUserPassword(
			accountUser = "userfn",
			accountUserPassword = "pass");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test adds the Add Account Entry permission to Account Admin and assert user can add an account."
	@priority = "5"
	test AccountAdminCanAddAccount {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");
	}

	@description = "This test asserts that an Account Admin can add a billing address to an Account."
	@priority = "5"
	test AccountAdminCanAddBillingAddressToAccount {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Billing",
			phoneNumber = "+81 3-5456-5796");

		AssertElementPresent(
			key_tab = "Addresses",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Search.searchPG(
			portletName = "Account Name",
			searchTerm = "Liferay Japan K. K.");

		LexiconEntry.viewEntryContent(
			rowAny = "Billing",
			rowEntry = "Liferay Japan K. K.");
	}

	@description = "This test asserts that an Account Admin can add a new user to an account"
	@priority = "5"
	test AccountAdminCanAddNewUserToAccount {
		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addNewUserToBusinessAccount(
			accountName = "Account Name",
			assigneeName = "userfn1",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn1");
	}

	@description = "This test asserts that an Account Admin can add a shipping address to an Account."
	@priority = "5"
	test AccountAdminCanAddShippingAddressToAccount {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Shipping",
			phoneNumber = "+1-877-543-3729");

		AssertElementPresent(
			key_tab = "Addresses",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Search.searchPG(
			portletName = "Account Name",
			searchTerm = "Liferay, Inc.");

		LexiconEntry.viewEntryContent(
			rowAny = "Shipping",
			rowEntry = "Liferay, Inc.");
	}

	@description = "This test asserts that an Account can be deactivated and will show Active and Inactive filters."
	@priority = "4"
	test AccountAdminCanDeactivateAccount {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.deactivateAccount(accountName = "Account Name");

		Accounts.viewInactiveAccount(accountName = "Account Name");
	}

	@description = "This test asserts that an Account can be deleted."
	@priority = "4"
	test AccountAdminCanDeleteAccount {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.deleteAccount(accountName = "Account Name");
	}

	@description = "This test asserts that an Account Admin can edit an account he is assigned to."
	@priority = "4"
	test AccountAdminCanEditAccount {
		Accounts.editPG(
			accountName = "Account Name",
			accountNameEdit = "This is a new update");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "This is a new update");

		LexiconEntry.viewNoEntry(rowEntry = "Account Name");
	}

	@description = "This test asserts that an Account Admin can set a billing address to an Account."
	@priority = "5"
	test AccountAdminCanSetDefaultBillingAddress {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-543-3729");

		Accounts.gotoAssigneeTab(assigneeTab = "Details");

		Accounts.setDefaultBillingAddress(addressName = "Liferay, Inc.");

		AssertElementPresent(
			key_tab = "Details",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Accounts.viewDefaultBillingAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			phoneNumber = "+1-877-543-3729");
	}

	@description = "This test asserts that an Account Admin can set a shipping address to an Account."
	@priority = "5"
	test AccountAdminCanSetDefaultShippingAddress {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");

		Accounts.gotoAssigneeTab(assigneeTab = "Details");

		Accounts.setDefaultShippingAddress(addressName = "Liferay Japan K. K.");

		AssertElementPresent(
			key_tab = "Details",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Accounts.viewDefaultShippingAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			phoneNumber = "+81 3-5456-5796");
	}

	@description = "This test asserts that an Account Admin can add and unassign organization in bulk"
	@priority = "5"
	test AccountAdminCanUnassignOrganizationsInBulk {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		for (var organizationNumber : list "1,2,3,4") {
			JSONOrganization.addOrganization(
				organizationName = "Organization ${organizationNumber}",
				organizationSite = "true");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.assignMultipleOrganizations(
			accountName = "Account Name",
			organizationNumber = "1,3,4");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.unassignMultipleOrganizations(
			accountName = "Account Name",
			organizationNumber = "1,3,4");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.viewNoAssignee(
			accountName = "Account Name",
			assigneeType = "Organizations");
	}

	@description = "This test asserts that an Account Admin can add and unassign organization to an account"
	@priority = "5"
	test AccountAdminCanUnassignOrganizationToAccount {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.assignOrganizations(
			accountName = "Account Name",
			assigneeName = "Organization for Account");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.removeOrganizationAsAssignee(
			accountName = "Account Name",
			assigneeName = "Organization for Account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.viewNoAssignee(
			accountName = "Account Name",
			assigneeType = "Organizations");
	}

	@description = "This test asserts Account Administrators can view all account users"
	@priority = "5"
	test AdminCanViewAllAccountUsers {
		task ("Add several users to account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			for (var userNum : list "2,3,4") {
				Accounts.addNewUserToBusinessAccount(
					accountName = "Account Name",
					assigneeName = "userfn${userNum}",
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Assert all users can be viewed") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Manage Users",
				rowEntry = "Account Name");

			LexiconEntry.viewEntryName(rowEntry = "userfn userln");

			for (var userNum : list "2,3,4") {
				LexiconEntry.viewEntryName(rowEntry = "userfn${userNum} userln${userNum}");
			}
		}
	}

	@description = "This test checks that the size of the pagination list can be changed."
	@priority = "4"
	test CanChangePaginationInAccounts {
		AssertElementNotPresent(locator1 = "Pagination#PAGINATION_BAR");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		for (var accountNum : list "1,2,3,4,5") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name ${accountNum}",
				accountEntryType = "Business");
		}

		for (var accountNames : list "Account Name 1,Account Name 2,Account Name 3,Account Name 4,Account Name 5") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${accountNames}");

			Accounts.assignUsers(
				accountName = "${accountNames}",
				assigneeName = "userfn userln");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		AssertElementPresent(locator1 = "Pagination#PAGINATION_BAR");

		for (var listEntries : list "4,8,20,60") {
			Pagination.changePagination(itemsPerPage = "${listEntries}");

			if ("${listEntries}" == "4") {
				Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

				LexiconEntry.viewNoEntry(rowEntry = "Account Name 4");

				LexiconEntry.viewNoEntry(rowEntry = "Account Name 5");

				for (var accountEntries : list "Account Name,Account Name 1,Account Name 2,Account Name 3") {
					LexiconEntry.viewEntryName(rowEntry = "${accountEntries}");
				}

				Click(locator1 = "Pagination#NEXT_LINK");

				Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");

				LexiconEntry.viewEntryName(rowEntry = "Account Name 4");

				LexiconEntry.viewEntryName(rowEntry = "Account Name 5");

				for (var accountEntries : list "Account Name,Account Name 1,Account Name 2,Account Name 3") {
					LexiconEntry.viewNoEntry(rowEntry = "${accountEntries}");
				}
			}
			else {
				Pagination.viewResults(results = "Showing 1 to 6 of 6 entries.");

				for (var allAccounts : list "Account Name,Account Name 1,Account Name 2,Account Name 3,Account Name 4,Account Name 5") {
					LexiconEntry.viewEntryName(rowEntry = "${allAccounts}");
				}
			}
		}
	}

	@description = "This test asserts that an Account Admin cannot view accounts not assigned to him."
	@priority = "5"
	test CannotViewOtherAccounts {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name 2",
			accountEntryType = "Business");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		LexiconEntry.viewEntryName(rowEntry = "Account Name 2");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		LexiconEntry.viewNoEntry(rowEntry = "Account Name 2");
	}

	@description = "This test sets the Allowed Account Type to only Business and assert that only Business Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property test.name.skip.portal.instance = "2BAccount#CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness";

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		for (var accountNumber : list "1,2") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business ${accountNumber}",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business ${accountNumber}");

			Accounts.assignUsers(
				accountName = "Business ${accountNumber}",
				assigneeName = "userfn");
		}

		for (var accountNumber : list "3,4") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person ${accountNumber}",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person ${accountNumber}");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ApplicationsMenu.gotoSite(site = "${siteName}");

		Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		for (var accountNumber : list "1,2") {
			LexiconEntry.viewEntryName(rowEntry = "Business ${accountNumber}");
		}

		for (var accountNumber : list "3,4") {
			LexiconEntry.viewNoEntry(rowEntry = "Person ${accountNumber}");
		}
	}

	@description = "This test sets the Allowed Account Type to only Person and assert that only Person Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewPersonAccountsWhenAllowedAccountTypeIsPerson {
		property test.name.skip.portal.instance = "2BAccount#CanOnlyViewPersonAccountsWhenAllowedAccountTypeIsPerson";

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		for (var accountNumber : list "1,2") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business ${accountNumber}",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business ${accountNumber}");

			Accounts.assignUsers(
				accountName = "Business ${accountNumber}",
				assigneeName = "userfn");
		}

		for (var accountNumber : list "3,4") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person ${accountNumber}",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person ${accountNumber}");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ApplicationsMenu.gotoSite(site = "${siteName}");

		Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		for (var accountNumber : list "3,4") {
			LexiconEntry.viewEntryName(rowEntry = "Person ${accountNumber}");
		}

		for (var accountNumber : list "1,2") {
			LexiconEntry.viewNoEntry(rowEntry = "Business ${accountNumber}");
		}
	}

	@description = "This test asserts that an Account Admin can remove a user from an account."
	@priority = "5"
	test CanRemoveUserFromAccount {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Manage Users",
			rowEntry = "Account Name");

		Accounts.addNewUserToBusinessAccount(
			accountName = "Account Name",
			assigneeName = "user1",
			userEmailAddress = "user1@liferay.com",
			userFirstName = "user1",
			userLastName = "user1",
			userScreenName = "user1");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Manage Users",
			rowEntry = "Account Name");

		Accounts.addNewUserToBusinessAccount(
			accountName = "Account Name",
			assigneeName = "user2",
			userEmailAddress = "user2@liferay.com",
			userFirstName = "user2",
			userLastName = "user2",
			userScreenName = "user2");

		AssertElementPresent(
			key_tab = "Users",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		for (var users : list "user1 user1,user2 user2") {
			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Remove",
				rowEntry = "${users}");

			AssertConfirm(value1 = "Are you sure you want to remove this user?");
		}

		Navigator.gotoPage(pageName = "2B Account Page");

		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Manage Users");

		LexiconEntry.viewNoEntry(rowEntry = "user1");

		LexiconEntry.viewNoEntry(rowEntry = "user2");
	}

	@description = "This test asserts that a user can select an account from the list as the active account. Backend tests are covering functionality for account selection."
	@priority = "4"
	test CanSetActiveAccount {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addBusinessAccount(
			accountDescription = "New Active Account Selection",
			accountName = "New Selection for Test");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Select Account",
			rowEntry = "New Selection for Test");

		Accounts.viewSelectedAccount(
			previousAccount = "Account Name",
			previousAccountSearchTerm = "&quot;Account Name&quot;",
			selectedAccount = "New Selection for Test",
			selectedAccountSearchTerm = "&quot;New Selection for Test&quot;");
	}

	@description = "This test searches for an Account within the list by Account Name and Account ID."
	@priority = "5"
	test CanViewAccountsUserIsAMemberOf {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.searchAccountsViaId(accountName = "Account Name");
	}

	@description = "This test filters Accounts by status."
	@priority = "4"
	test FilterByStatus {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addBusinessAccount(accountName = "New Active Account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.deactivateAccount(accountName = "Account Name");

		Accounts.viewInactiveAccount(accountName = "Account Name");

		LexiconEntry.viewNoEntry(rowEntry = "New Active Account");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		LexiconEntry.viewNoEntry(rowEntry = "Account Name");

		LexiconEntry.viewEntryStatus(
			rowEntry = "New Active Account",
			rowStatus = "Active");
	}

	@description = "This test filters Accounts by Account Type."
	@priority = "3"
	test FilterByType {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addPersonAccount(accountName = "Person Account");

		Navigator.gotoPage(pageName = "2B Account Page");

		for (var allAccounts : list "Account Name,Person Account") {
			LexiconEntry.viewEntryName(rowEntry = "${allAccounts}");
		}

		for (var filter : list "Business,Person") {
			ManagementBar.setFilterAndOrder(filterBy = "${filter}");

			if ("${filter}" == "Business") {
				LexiconEntry.viewEntryName(rowEntry = "Account Name");

				LexiconEntry.viewNoEntry(rowEntry = "Person Account");
			}
			else if ("${filter}" == "Person") {
				LexiconEntry.viewEntryName(rowEntry = "Person Account");

				LexiconEntry.viewNoEntry(rowEntry = "Account Name");
			}
		}
	}

}