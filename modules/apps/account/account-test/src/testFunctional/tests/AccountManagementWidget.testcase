@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Account Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Account Page",
			widgetName = "Account Management");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test asserts that a newly created site will have default account type settings even after changing settings on original site."
	@priority = "5"
	test AllowedAccountTypeIsSiteWide {
		task ("Given that the allowed account type is set to Person") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("and a non admin user has permissions to add an account entry") {
			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("and there is a Business account and a Person account the non admin user is a member of") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Business Account",
				userEmailAddress = "userea@liferay.com");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person Account");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		task ("When a new site with an Account Management widget is created") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Another Account Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Another Account Page",
				widgetName = "Account Management");
		}

		task ("Then the non admin user can see both Business and Person account in the new site, but not in the old site") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "Account Page");

			LexiconEntry.viewNoEntry(rowEntry = "Business Account");

			LexiconEntry.viewEntryName(rowEntry = "Person Account");

			Navigator.gotoSitePage(
				pageName = "Another Account Page",
				siteName = "Site Name");

			LexiconEntry.viewEntryName(rowEntry = "Business Account");

			LexiconEntry.viewEntryName(rowEntry = "Person Account");
		}

		task ("and non admin user has the option to add both Business and Person account") {
			Accounts.addBusinessAccount(accountName = "Business Account 2");

			Navigator.gotoSitePage(
				pageName = "Another Account Page",
				siteName = "Site Name");

			Accounts.addPersonAccount(accountName = "Person Account 2");
		}
	}

	@description = "This test asserts that only business accounts can be added when the allowed account type is business"
	@priority = "5"
	test CanOnlyAddBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property portal.acceptance = "true";

		task ("Given a non admin user has permissions to add an account entry") {
			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When Allowed Account Type is set to Business") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");
		}

		task ("Then a non admin user can only add a Business account, not a Person account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "Account Page");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Business Account Only");

			AssertElementNotPresent(
				key_fieldLabel = "Type",
				key_value = "Person",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SelectField.select(
				selectFieldLabel = "Type",
				selectFieldValue = "Business");

			Button.clickSave();

			Navigator.gotoPage(pageName = "Account Page");

			LexiconEntry.viewEntryName(rowEntry = "Business Account Only");
		}
	}

	@description = "This test asserts that only person accounts can be added when the allowed account type is person"
	@priority = "5"
	test CanOnlyAddPersonAccountsWhenAllowedAccountTypeIsPerson {
		property portal.acceptance = "true";

		task ("Given a non admin user has permissions to add an account entry") {
			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When Allowed Account Type is set to Business") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Then a non admin user can only add a Business account, not a Person account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "Account Page");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Person Account Only");

			AssertElementNotPresent(
				key_fieldLabel = "Type",
				key_value = "Business",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SelectField.select(
				selectFieldLabel = "Type",
				selectFieldValue = "Person");

			Button.clickSave();

			Navigator.gotoPage(pageName = "Account Page");

			LexiconEntry.viewEntryName(rowEntry = "Person Account Only");
		}
	}

	@description = "This test sets the Allowed Account Type to only Business and assert that only Business Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property test.name.skip.portal.instance = "AccountManagementWidget#CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness";

		task ("Given there is a Business account and a Person account the non admin user is a member of") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Business Account",
				userEmailAddress = "userea@liferay.com");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person Account");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		task ("When the allowed account type is set to Business") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			ApplicationsMenu.gotoSite(site = "${siteName}");

			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");
		}

		task ("Then only the Business Account displays on the Account Management widget") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "Account Page");

			LexiconEntry.viewNoEntry(rowEntry = "Person Account");

			LexiconEntry.viewEntryName(rowEntry = "Business Account");
		}
	}

	@description = "This test asserts the correct search results when searching via Account Management widget"
	@priority = "4"
	test CanSearchForAccount {
		task ("Given business accounts exist") {
			for (var accountName : list "Acme Inc,Liferay,South Bay Auto Parts") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "${accountName}",
					accountEntryType = "Business");
			}
		}

		task ("When a user searches for an account via widget") {
			Navigator.gotoPage(pageName = "Account Page");

			Search.searchPG(
				portletName = "Account Management",
				searchTerm = "South Bay Auto Parts");
		}

		task ("Then accurate results display") {
			LexiconEntry.viewEntryName(rowEntry = "South Bay Auto Parts");

			for (var accountName : list "Acme Inc,Liferay") {
				LexiconEntry.viewNoEntry(rowEntry = "${accountName}");
			}
		}
	}

	@description = "This test asserts that a user can select an account from the list as the active account. Backend tests are covering functionality for account selection."
	@priority = "4"
	test CanSetActiveAccount {
		property portal.acceptance = "true";

		task ("Given a user who is a member of two Business Accounts") {
			for (var accountNum : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account Name ${accountNum}",
					accountEntryType = "Business");

				JSONAccountEntryUser.addExistUsertoAccount(
					accountEntryName = "Account Name ${accountNum}",
					userEmailAddress = "userea@liferay.com");
			}
		}

		task ("When a user views the Account Management widget") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "Account Page");
		}

		task ("Then a user can set an Active account") {
			Navigator.gotoPage(pageName = "Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Select Account",
				rowEntry = "Account Name 2");
		}

		task ("and user can distinguish which one is set to Active via Account Management widget") {
			Accounts.viewSelectedAccount(entryName = "Account Name 2");

			AssertElementNotPresent(
				key_entryName = "Account Name 1",
				locator1 = "Account#SELECT_ACCOUNT_ENTRY_CHECKMARK");
		}
	}

}