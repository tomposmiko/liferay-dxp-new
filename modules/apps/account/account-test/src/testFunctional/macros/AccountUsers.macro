definition {

	macro addUserInfos {
		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
			value1 = "${userScreenName}");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
			value1 = "${userEmailAddress}");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
			value1 = "${userFirstName}");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
			value1 = "${userLastName}");

		if (isSet(emailDomainName)) {
			AccountUsers.viewEmailDomainValidation(
				accountName = "${accountName}",
				domainValidation = "${domainValidation}",
				emailDomainName = "${emailDomainName}");
		}

		if (isSet(validDomainNames)) {
			AccountUsers.viewValidDomains(validDomainNames = "${validDomainNames}");
		}
	}

	macro addUsers {
		LexiconEntry.gotoAdd();

		Pause(locator1 = "3000");

		SelectFrame(locator1 = "IFrame#SELECT_ACCOUNT");

		AssertClick(
			key_accountName = "${accountName}",
			locator1 = "Account#CHOOSE_ACCOUNT",
			value1 = "Choose");

		SelectFrame(value1 = "relative=top");

		WaitForElementPresent(
			key_accountName = "${accountName}",
			locator1 = "Account#ADD_USER_HEADER");

		AccountUsers.addUserInfos(
			accountName = "${accountName}",
			domainValidation = "${domainValidation}",
			emailDomainName = "${emailDomainName}",
			userEmailAddress = "${userEmailAddress}",
			userFirstName = "${userFirstName}",
			userLastName = "${userLastName}",
			userScreenName = "${userScreenName}",
			validDomainNames = "${validDomainNames}");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		Alert.viewSuccessMessage();
	}

	macro deactivateUser {
		Search.searchCP(searchTerm = "${userFirstName}");

		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Deactivate",
			rowEntry = "${userFirstName}");

		AssertConfirm(value1 = "Are you sure you want to deactivate this user?");

		Alert.viewSuccessMessage();
	}

	macro editUser {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${accountUser}");

		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#HEADER",
			value1 = "Edit User");

		if (isSet(editScreenName)) {
			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
				value1 = "${editScreenName}");
		}

		if (isSet(editEmailAddress)) {
			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
				value1 = "${editEmailAddress}");
		}

		if (isSet(editFirstName)) {
			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "${editFirstName}");
		}

		Button.clickSave();

		if (IsElementPresent(locator1 = "IFrame#CONFIRM_PASSWORD")) {
			User.confirmPassword(password = "${password}");
		}

		Alert.viewSuccessMessage();
	}

	macro removeAccount {
		LexiconEntry.gotoEntry(rowEntry = "${accountUser}");

		Navigator.gotoNavUnderline(navUnderline = "General");

		Navigator.gotoNavNested(navNested = "Accounts");

		LexiconEntry.viewEntryName(rowEntry = "${accountName}");

		Click(
			key_entryName = "${accountName}",
			locator1 = "LexiconTable#TABLE_ENTRY_DELETE");

		PortletEntry.save();

		LexiconEntry.viewNoEntry(rowEntry = "${accountName}");
	}

	macro selectAccounts {
		SelectFrame(locator1 = "IFrame#SELECT_ACCOUNTS");

		Check(
			key_tableEntry = "${accountName}",
			locator1 = "LexiconTable#TABLE_ENTRY_CHECKBOX");

		SelectFrame(value1 = "relative=top");

		Button.clickSelect();

		AssertElementPresent(locator1 = "Search#SEARCH_INFO");
	}

	macro viewEmailDomainValidation {
		if ("${domainValidation}" == "Blocked") {
			AssertTextEquals(
				key_alertMessage = "${emailDomainName} is a blocked domain. Account administrators cannot add users with this domain to their accounts. You can still manually assign this email address to this user.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "${emailDomainName} is a blocked domain. Account administrators cannot add users with this domain to their accounts. You can still manually assign this email address to this user.");
		}
		else if ("${domainValidation}" == "Invalid") {
			AssertTextEquals(
				key_alertMessage = "${emailDomainName} is not a valid domain for the following accounts: ${accountName}. Account Administrators cannot add users with this domain to their accounts. You can still manually assign this email address to this user.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "${emailDomainName} is not a valid domain for the following accounts: ${accountName}. Account Administrators cannot add users with this domain to their accounts. You can still manually assign this email address to this user.");
		}
		else {
			AssertElementNotPresent(
				key_alertMessage = "${emailDomainName} is",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");
		}
	}

	macro viewEntryAccounts {
		AssertElementPresent(
			key_rowEntry = "${accountUserName}",
			key_rowEntryAccount = "${accountName}",
			locator1 = "Account#ENTRY_CONTENT_ENTRY_ACCOUNTS");
	}

	macro viewValidDomains {
		WaitForLiferayEvent.initializeLiferayEventLog();

		AssertClick(
			key_text = "View Valid Domains",
			locator1 = "Button#ANY",
			value1 = "View Valid Domains");

		Pause(locator1 = "3000");

		SelectFrame(locator1 = "IFrame#VALID_DOMAINS");

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:The following email domains are shared across all of this user's accounts.");

		for (var validDomainName : list "${validDomainNames}") {
			LexiconEntry.viewEntryName(rowEntry = "${validDomainName}");
		}

		SelectFrame.selectFrameTop();

		Click(locator1 = "Icon#CLOSE");

		SelectFrame.selectFrameTop();
	}

}