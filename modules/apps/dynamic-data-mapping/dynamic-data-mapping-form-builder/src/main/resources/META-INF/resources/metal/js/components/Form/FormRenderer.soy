{namespace FormRenderer}

{template .render}
	{@param spritemap: string}
	{@param? _handleChangePage: any}
	{@param? _handleDeleteButtonClicked: any}
	{@param? _handleDuplicateButtonClicked: any}
	{@param? _handleExpandedChanged: any}
	{@param? _handleFieldClicked: any}
	{@param? _handleFieldEdited: any}
	{@param? _handlePaginationLeftClicked: any}
	{@param? _handlePaginationRightClicked: any}
	{@param? _handlePageSettingsClicked: any}
	{@param? _handleSuccesPageChanged: any}
	{@param? _handleUpdatePage: any}
	{@param? activePage: number}
	{@param? defaultPageTitle: string}
	{@param? dropdownExpanded: bool}
	{@param? editable: bool}
	{@param? modeRenderer: string}
	{@param? pages: ?}
	{@param? pageSettingsItems: ?}
	{@param? paginationMode: string}
	{@param? successPageLabel: string}
	{@param? successPageSettings: ?}

	{let $contentRenderer: $modeRenderer ?: 'grid' /}
	{let $total: length($pages) /}

	{delcall FormRenderer.pages variant="$contentRenderer"}
		{param _handleChangePage: $_handleChangePage /}
		{param _handleDeleteButtonClicked: $_handleDeleteButtonClicked /}
		{param _handleDuplicateButtonClicked: $_handleDuplicateButtonClicked /}
		{param _handleExpandedChanged: $_handleExpandedChanged /}
		{param _handleFieldClicked: $_handleFieldClicked /}
		{param _handleFieldEdited: $_handleFieldEdited /}
		{param _handlePaginationLeftClicked: $_handlePaginationLeftClicked /}
		{param _handlePaginationRightClicked: $_handlePaginationRightClicked /}
		{param _handlePageSettingsClicked: $_handlePageSettingsClicked /}
		{param _handleSuccesPageChanged: $_handleSuccesPageChanged /}
		{param _handleUpdatePage: $_handleUpdatePage /}
		{param activePage: $activePage /}
		{param contentRenderer: $contentRenderer /}
		{param defaultPageTitle: $defaultPageTitle /}
		{param dropdownExpanded: $dropdownExpanded /}
		{param editable: $editable /}
		{param pages: $pages /}
		{param pageSettingsItems: $pageSettingsItems /}
		{param paginationMode: $paginationMode /}
		{param spritemap: $spritemap /}
		{param successPageLabel: $successPageLabel /}
		{param successPageSettings: $successPageSettings /}
		{param total: $total /}
	{/delcall}
{/template}

{deltemplate FormRenderer.pages variant="'grid'"}
	{@param spritemap: string}
	{@param? _handleChangePage: any}
	{@param? _handleDeleteButtonClicked: any}
	{@param? _handleDuplicateButtonClicked: any}
	{@param? _handleExpandedChanged: any}
	{@param? _handleFieldClicked: any}
	{@param? _handleFieldEdited: any}
	{@param? _handlePaginationLeftClicked: any}
	{@param? _handlePaginationRightClicked: any}
	{@param? _handlePageSettingsClicked: any}
	{@param? _handleSuccesPageChanged: any}
	{@param? _handleUpdatePage: any}
	{@param? activePage: number}
	{@param? contentRenderer: string}
	{@param? defaultPageTitle: string}
	{@param? dropdownExpanded: bool}
	{@param? editable: bool}
	{@param? pages: ?}
	{@param? pageSettingsItems: ?}
	{@param? paginationMode: string}
	{@param? successPageLabel: string}
	{@param? successPageSettings: ?}
	{@param? total: int}

	<div class="position-relative">
		{if ($paginationMode == 'wizard') or (length($pages) == 1 and not $successPageSettings.enabled)}
			{delcall FormRenderer.paginationContainer}
				{param _handleChangePage: $_handleChangePage /}
				{param _handleExpandedChanged: $_handleExpandedChanged /}
				{param _handlePaginationLeftClicked: $_handlePaginationLeftClicked /}
				{param _handlePaginationRightClicked: $_handlePaginationRightClicked /}
				{param _handlePageSettingsClicked: $_handlePageSettingsClicked /}
				{param activePage: $activePage /}
				{param defaultPageTitle: $defaultPageTitle /}
				{param dropdownExpanded: $dropdownExpanded /}
				{param pages: $pages /}
				{param pageSettingsItems: $pageSettingsItems /}
				{param paginationMode: $paginationMode /}
				{param spritemap: $spritemap /}
				{param successPageLabel: $successPageLabel /}
				{param successPageSettings: $successPageSettings /}
			{/delcall}
		{/if}

		{if $activePage == -1}
			{call SuccessPage.render}
				{param successPageSettings: $successPageSettings /}
				{param events: [
					'successPageChanged': $_handleSuccesPageChanged
				] /}
				{param ref: 'successPage' /}
			{/call}
		{else}
			{for $page in $pages}
				{call PageRenderer.render}
					{param activePage: $activePage /}
					{param contentRenderer: $contentRenderer /}
					{param editable: $editable /}
					{param events: [
						'deleteButtonClicked': $_handleDeleteButtonClicked,
						'duplicateButtonClicked': $_handleDuplicateButtonClicked,
						'fieldClicked': $_handleFieldClicked,
						'fieldEdited': $_handleFieldEdited,
						'updatePage': $_handleUpdatePage
					] /}
					{param page: $page /}
					{param pageIndex: index($page) /}
					{param ref: 'pageRenderer' /}
					{param spritemap: $spritemap /}
					{param total: $total /}
				{/call}
			{/for}
		{/if}

		{let $multiple: length($pages) > 1 /}

		{if ($multiple and ($paginationMode == 'pagination')) or (($paginationMode == 'pagination') and (length($pages) == 1) and $successPageSettings.enabled)}
			{delcall FormRenderer.paginationContainer}
				{param _handleChangePage: $_handleChangePage /}
				{param _handleExpandedChanged: $_handleExpandedChanged /}
				{param _handlePaginationLeftClicked: $_handlePaginationLeftClicked /}
				{param _handlePaginationRightClicked: $_handlePaginationRightClicked /}
				{param _handlePageSettingsClicked: $_handlePageSettingsClicked /}
				{param activePage: $activePage /}
				{param defaultPageTitle: $defaultPageTitle /}
				{param dropdownExpanded: $dropdownExpanded /}
				{param pages: $pages /}
				{param pageSettingsItems: $pageSettingsItems /}
				{param paginationMode: $paginationMode /}
				{param spritemap: $spritemap /}
				{param successPageLabel: $successPageLabel /}
				{param successPageSettings: $successPageSettings /}
			{/delcall}
		{/if}
	</div>
{/deltemplate}

{deltemplate FormRenderer.paginationContainer}
	{@param spritemap: string}
	{@param? _handleChangePage: any}
	{@param? _handleExpandedChanged: any}
	{@param? _handlePaginationLeftClicked: any}
	{@param? _handlePaginationRightClicked: any}
	{@param? _handlePageSettingsClicked: any}
	{@param? activePage: number}
	{@param? defaultPageTitle: string}
	{@param? dropdownExpanded: bool}
	{@param? pages: ?}
	{@param? pageSettingsItems: ?}
	{@param? paginationMode: string}
	{@param? successPageLabel: string}
	{@param? successPageSettings: ?}
	{@param? total: int}

	{let $multiple: length($pages) > 1 or $successPageSettings.enabled /}
	{let $classes kind="text"}
		ddm-form-pagination

		{if $multiple}
			{sp}position-relative
		{else}
			{sp}position-absolute
		{/if}

		{if $multiple and $paginationMode == 'wizard'}
			{sp}wizard-mode
		{elseif $multiple and $paginationMode == 'pagination'}
			{sp}pagination-mode
		{/if}
	{/let}

	<div class="{$classes}">
		{if $multiple and ($paginationMode == 'wizard')}
			{delcall FormRenderer.wizard}
				{param _handleChangePage: $_handleChangePage /}
				{param activePage: $activePage /}
				{param defaultPageTitle: $defaultPageTitle /}
				{param pages: $pages /}
				{param spritemap: $spritemap /}
				{param successPageLabel: $successPageLabel /}
				{param successPageSettings: $successPageSettings /}
			{/delcall}
		{elseif $multiple and ($paginationMode == 'pagination')}
			{delcall FormRenderer.pagination}
				{param _handleChangePage: $_handleChangePage /}
				{param _handlePaginationLeftClicked: $_handlePaginationLeftClicked /}
				{param _handlePaginationRightClicked: $_handlePaginationRightClicked /}
				{param activePage: $activePage /}
				{param pages: $pages /}
				{param successPageLabel: $successPageLabel /}
				{param successPageSettings: $successPageSettings /}
			{/delcall}
		{/if}

		<div class="ddm-page-settings" role="group">
			{call ClayActionsDropdown.render}
				{param items: $pageSettingsItems /}
				{param triggerClasses: 'component-action' /}
				{param events: [
					'itemClicked': $_handlePageSettingsClicked
				] /}
				{param spritemap: $spritemap /}
			{/call}
		</div>
	</div>
{/deltemplate}

{deltemplate FormRenderer.wizard}
	{@param? _handleChangePage: any}
	{@param? activePage: number}
	{@param? defaultPageTitle: string}
	{@param? pages: ?}
	{@param? successPageLabel: string}
	{@param? successPageSettings: ?}

	<ol class="dmm-wizard multi-step-indicator-label-top multi-step-nav multi-step-nav-collapse-sm">
		{for $page in $pages}
			{let $title: $page.title ? $page.title : $defaultPageTitle /}
			{let $pageIndex: index($page) /}
			{let $step: $pageIndex + 1 /}
			{let $classes kind="text"}
				multi-step-item
				{if $step != length($pages) or $successPageSettings.enabled}
					{sp}multi-step-item-expand
				{/if}

				{if $pageIndex == $activePage}
					{sp}active
				{/if}
			{/let}

			<li class="{$classes}" data-onclick="{$_handleChangePage}" data-page-index="{$pageIndex}">
				<div class="multi-step-divider"></div>
				<div class="multi-step-indicator">
					<div class="multi-step-indicator-label">{$title}</div>

					<a class="multi-step-icon" data-multi-step-icon="{$step}" href="javascript:;"></a>
				</div>
			</li>
		{/for}

		{if $successPageSettings.enabled}
			{let $classes kind="text"}
				multi-step-item complete

				{if $activePage == -1}
					{sp}active
				{/if}
			{/let}

			<li class="{$classes}" data-onclick="{$_handleChangePage}" data-page-index="-1">
				<div class="multi-step-divider"></div>
				<div class="multi-step-indicator">
					<div class="multi-step-indicator-label">{$successPageLabel}</div>

					<a class="multi-step-icon" href="javascript:;"></a>
				</div>
			</li>
		{/if}
	</ol>
{/deltemplate}

{deltemplate FormRenderer.pagination}
	{@param? _handleChangePage: any}
	{@param? _handlePaginationLeftClicked: any}
	{@param? _handlePaginationRightClicked: any}
	{@param? activePage: number}
	{@param? pages: ?}
	{@param? successPageLabel: string}
	{@param? successPageSettings: ?}

	<ul class="ddm-pagination justify-content-center pagination">
		{let $wizardClasses kind="text"}
			page-item

			{if $activePage == 0}
				{sp}visibility-hidden
			{/if}
		{/let}

		<li class="{$wizardClasses}" data-onclick="{$_handlePaginationLeftClicked}">
			<a class="page-link" href="javascript:;" role="button">
				«
				<span class="sr-only">Previous</span>
			</a>
		</li>

		{for $page in $pages}
			{let $pageIndex: index($page) /}
			{let $step: $pageIndex + 1 /}
			{let $classes kind="text"}
				page-item

				{if $pageIndex == $activePage}
					{sp}active
				{/if}
			{/let}

			<li class="{$classes}" data-onclick="{$_handleChangePage}" data-page-index="{$pageIndex}">
				<a class="page-link" href="javascript:;">{$step}</a>
			</li>
		{/for}

		{if $successPageSettings.enabled}
			{let $classes kind="text"}
				page-item

				{if $activePage == -1}
					{sp}active
				{/if}
			{/let}

			<li class="{$classes}" data-onclick="{$_handleChangePage}" data-page-index="-1">
				<a class="page-link" href="javascript:;">{$successPageLabel}</a>
			</li>
		{/if}

		{let $paginationClasses kind="text"}
			page-item

			{if ($activePage == (length($pages) - 1) and  not $successPageSettings.enabled) or ($successPageSettings.enabled and $activePage == -1)}
				{sp}visibility-hidden
			{/if}
		{/let}

		<li class="{$paginationClasses}" data-onclick="{$_handlePaginationRightClicked}">
			<a class="page-link" href="javascript:;" role="button">
				»
				<span class="sr-only">Next</span>
			</a>
		</li>
	</ul>
{/deltemplate}

{deltemplate FormRenderer.pages variant="'list'"}
	{@param spritemap: string}
	{@param? _handleDeleteButtonClicked: any}
	{@param? _handleDuplicateButtonClicked: any}
	{@param? _handleFieldEdited: any}
	{@param? _handleUpdatePage: any}
	{@param? activePage: number}
	{@param? contentRenderer: string}
	{@param? editable: bool}
	{@param? pages: ?}
	{@param? total: int}

	<div class="ddm-page-list-container">
		{for $page in $pages}
			{call PageRenderer.render}
				{param activePage: $activePage /}
				{param contentRenderer: $contentRenderer /}
				{param editable: $editable /}
				{param events: [
					'deleteButtonClicked': $_handleDeleteButtonClicked,
					'duplicateButtonClicked': $_handleDuplicateButtonClicked,
					'fieldEdited': $_handleFieldEdited,
					'updatePage': $_handleUpdatePage
				] /}
				{param page: $page /}
				{param pageIndex: index($page) /}
				{param spritemap: $spritemap /}
				{param total: $total /}
			{/call}
		{/for}
	</div>
{/deltemplate}