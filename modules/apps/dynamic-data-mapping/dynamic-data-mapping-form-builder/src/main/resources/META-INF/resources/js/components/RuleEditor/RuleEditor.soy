{namespace RuleEditor}

/**
 * Prints the DDM rule settings.
 */
{template .render}
	{@param actions: list<[
			action: string,
			calculatorFields: list<[
				label: string,
				name: string,
				options: list<[
					label: string,
					value: string
				]>,
				type: string,
				value: string
			]>,
			expression: string,
			hasRequiredInputs: bool,
			inputs: list<[
				label: string,
				name: string,
				required: bool,
				type: string,
				value: string,
				fieldOptions: list<[
					label: string,
					name: string,
					options: list<[
						label: string,
						value: string
					]>,
					type: string,
					value: string
				]>
			]>,
			label: string,
			outputs: list<[
				name: string,
				type: string,
				value: string,
				fieldOptions: list<[
					label: string,
					name: string,
					options: list<[
						label: string,
						value: string
					]>,
					type: string,
					value: string
				]>
			]>,
			target: string
		]>
	}
	{@param actionTypes: list<[
			label: string,
			value: string
		]>
	}
	{@param actionsFieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	}
	{@param calculatorFunctions: list<[
			label: string,
			tooltip: string,
			value: string
		]>
	}
	{@param calculatorResultOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	}
	{@param conditions: list<[
			binaryOperator: bool,
			firstOperandOptions: list<[
				label: string,
				value: string
			]>,
			operands: list<[
				dataType: string,
				type: string,
				label: string,
				value: string
			]>,
			operator: string,
			operators: ?
		]>
	}
	{@param conditionsFieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	}
	{@param? dataProvider: list<[
			id: string,
			name: string
		]>
	}
	{@param fixedOptions: list<[
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	}
	{@param invalidRule: bool}
	{@param logicalOperator: string}
	{@param pageOptions: list<[
			label: string,
			name: string,
			value: string
		]>
	}
	{@param readOnly: bool}
	{@param spritemap: string}
	{@param? _handleActionAdded: any}
	{@param? _handleActionSelection: any}
	{@param? _handleConditionAdded: any}
	{@param? _handleDataProviderInputEdited: any}
	{@param? _handleDataProviderOutputEdited: any}
	{@param? _handleDeleteAction: any}
	{@param? _handleDeleteCondition: any}
	{@param? _handleEditExpression: any}
	{@param? _handleFirstOperandFieldEdited: any}
	{@param? _handleLogicalOperationChange: any}
	{@param? _handleModalButtonClicked: any}
	{@param? _handleOperatorEdited: any}
	{@param? _handleRuleAdded: any}
	{@param? _handleRuleCancelled: any}
	{@param? _handleSecondOperandFieldEdited: any}
	{@param? _handleSecondOperandTypeEdited: any}
	{@param? _handleSecondOperandValueEdited: any}
	{@param? _handleTargetSelection: any}
	{@param? roles: list<[
		label: string,
		value: string
	]>}

	<div class="form-builder-rule-builder liferay-ddm-form-builder-rule-builder-content">
		<h2 class="form-builder-section-title text-default">
			{msg desc=""}rule{/msg}
		</h2>

		<h4 class="text-default">{msg desc=""}define-condition-and-action-to-change-fields-and-elements-on-the-form{/msg}</h4>

		<ul class="liferay-ddm-form-builder-rule-condition-list liferay-ddm-form-rule-builder-timeline timeline {length($conditions) > 1 ? 'can-remove-item' : ''}">
			{let $enableLogicalOperator: (length($conditions) > 1) ? true : false /}

			{call .renderHeader}
				{param extraContent kind="html"}
					{call .renderConditionLogicalOperatorDropdown}
						{param _handleLogicalOperationChange: $_handleLogicalOperationChange /}
						{param enableLogicalOperator: $enableLogicalOperator /}
						{param logicalOperator: $logicalOperator /}
					{/call}
				{/param}
				{param title kind="text"}
					{msg desc=""}condition{/msg}
				{/param}
			{/call}

			{foreach $condition in $conditions}
				{call .renderCondition}
					{param _handleDeleteCondition: $_handleDeleteCondition /}
					{param _handleFirstOperandFieldEdited: $_handleFirstOperandFieldEdited /}
					{param _handleOperatorEdited: $_handleOperatorEdited /}
					{param _handleSecondOperandFieldEdited: $_handleSecondOperandFieldEdited /}
					{param _handleSecondOperandTypeEdited: $_handleSecondOperandTypeEdited /}
					{param _handleSecondOperandValueEdited: $_handleSecondOperandValueEdited /}
					{param binaryOperator: $condition.binaryOperator /}
					{param fieldOptions: $conditionsFieldOptions /}
					{param firstOperandOptions: $condition.firstOperandOptions /}
					{param firstOperandType: $condition.operands[0].type /}
					{param firstOperandValueSelected: $condition.operands[0].value /}
					{param fixedOptions: $fixedOptions /}
					{param index: index($condition) /}
					{param logicalOperator: $logicalOperator /}
					{param operators: $condition.operators /}
					{param readOnly: $readOnly /}
					{param roles: $roles /}
					{param secondOperandDataType: isNonnull($condition.operands[1]) ? $condition.operands[1].dataType : '' /}
					{param secondOperandFieldName: '' /}
					{param secondOperandType: isNonnull($condition.operands[1]) ? $condition.operands[1].type : '' /}
					{param secondOperandValue: isNonnull($condition.operands[1]) ? $condition.operands[1].value : '' /}
					{param selectedOperator: $condition.operator /}
					{param spritemap: $spritemap /}
				{/call}
			{/foreach}
		</ul>

		{call .renderAddItemButton}
			{param _handleItemAdded: $_handleConditionAdded /}
			{param spritemap: $spritemap /}
			{param type: 'addConditionButton' /}
		{/call}

		<ul class="action-list liferay-ddm-form-builder-rule-action-list liferay-ddm-form-rule-builder-timeline timeline {length($actions) > 1 ? 'can-remove-item' : ''}">
			{call .renderHeader}
				{param title kind="text"}
					{msg desc=""}actions{/msg}
				{/param}
			{/call}

			{foreach $action in $actions}
				{call .renderAction}
					{param _handleActionSelection: $_handleActionSelection /}
					{param _handleDataProviderInputEdited: $_handleDataProviderInputEdited /}
					{param _handleDataProviderOutputEdited: $_handleDataProviderOutputEdited /}
					{param _handleDeleteAction: $_handleDeleteAction /}
					{param _handleEditExpression: $_handleEditExpression /}
					{param _handleTargetSelection: $_handleTargetSelection /}
					{param actionExpression: $action.expression /}
					{param actionInputs: $action.inputs /}
					{param actionOutputs: $action.outputs /}
					{param actionSelected: $action.action /}
					{param actionTypes: $actionTypes /}
					{param calculatorFields: $action.calculatorFields /}
					{param calculatorFunctions: $calculatorFunctions /}
					{param calculatorResultOptions: $calculatorResultOptions /}
					{param dataProvider: $dataProvider /}
					{param fieldOptions: $actionsFieldOptions /}
					{param hasRequiredInputs: $action.hasRequiredInputs /}
					{param index: index($action) /}
					{param pageOptions: $pageOptions /}
					{param spritemap: $spritemap /}
					{param targetSelected: $action.target /}
				{/call}
			{/foreach}
		</ul>

		{call .renderAddItemButton}
			{param _handleItemAdded: $_handleActionAdded /}
			{param spritemap: $spritemap /}
			{param type: 'addActionButton' /}
		{/call}

		{call .renderModal}
			{param _handleModalButtonClicked: $_handleModalButtonClicked /}
			{param question kind="text"}
				{msg desc=""}are-you-sure-you-want-to-delete-this-condition{/msg}
			{/param}
			{param spritemap: $spritemap /}
			{param title kind="text"}
				{msg desc=""}delete-condition{/msg}
			{/param}
			{param type: 'Condition' /}
		{/call}

		{call .renderModal}
			{param _handleModalButtonClicked: $_handleModalButtonClicked /}
			{param question kind="text"}
				{msg desc=""}are-you-sure-you-want-to-delete-this-action{/msg}
			{/param}
			{param spritemap: $spritemap /}
			{param title kind="text"}
				{msg desc=""}delete-action{/msg}
			{/param}
			{param type: 'Action' /}
		{/call}

		<div class="liferay-ddm-form-rule-builder-footer">
			{call ClayButton.render}
				{param events: [
					'click': $_handleRuleAdded
				] /}
				{param disabled: $invalidRule /}
				{param label kind="text"}
					{msg desc=""}save{/msg}
				{/param}
				{param ref: 'save' /}
				{param spritemap: $spritemap /}
				{param style: 'primary' /}
			{/call}

			{call ClayButton.render}
				{param events: [
					'click': $_handleRuleCancelled
				] /}
				{param label kind="text"}
					{msg desc=""}cancel{/msg}
				{/param}
				{param ref: 'cancel' /}
				{param spritemap: $spritemap /}
				{param style: 'secondary' /}
			{/call}
		</div>
	</div>
{/template}

{template .renderModal}
	{@param question: string}
	{@param spritemap: string}
	{@param title: string}
	{@param type: string}
	{@param? _handleModalButtonClicked: any}

	{let $deleteLabel kind="text"}
		{msg desc=""}delete{/msg}
	{/let}
	{let $dismissLabel kind="text"}
		{msg desc=""}dismiss{/msg}
	{/let}

	{call ClayModal.render}
		{param body kind="html"}
			<h4>{$question}</h4>
		{/param}
		{param events: [
			'clickButton': $_handleModalButtonClicked
		]/}

		{param footerButtons: [
			[
				'alignment': 'right',
				'label': $dismissLabel,
				'style': 'primary',
				'type': 'close'
			],
			[
				'alignment': 'right',
				'label': $deleteLabel,
				'style': 'primary',
				'type': 'button'
			]
		] /}
		{param ref: 'confirmationModal' + $type /}
		{param size: 'sm' /}
		{param spritemap: $spritemap /}
		{param title: $title /}
	{/call}
{/template}

{template .renderAction}
	{@param actionTypes: list<[
			label: string,
			value: string
		]>
	}
	{@param calculatorFields: list<[
		label: string,
		name: string,
		options: list<[
			label: string,
			value: string
		]>,
		type: string,
		value: string
	]>}
	{@param calculatorFunctions: list<[
			label: string,
			tooltip: string,
			value: string
		]>
	}
	{@param calculatorResultOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	}
	{@param fieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	}
	{@param index: int}
	{@param pageOptions: list<[
			label: string,
			name: string,
			value: string
		]>
	}
	{@param spritemap: string}
	{@param? _handleActionSelection: any}
	{@param? _handleEditExpression: any}
	{@param? _handleDataProviderInputEdited: any}
	{@param? _handleDataProviderOutputEdited: any}
	{@param? _handleDeleteAction: any}
	{@param? _handleTargetSelection: any}
	{@param? actionExpression: string}
	{@param? actionInputs: list<[
		label: string,
		name: string,
		required: bool,
		type: string,
		value: string,
		fieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	]>
	}
	{@param? actionOutputs: list<[
		name: string,
		type: string,
		value: string,
		fieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	]>
	}
	{@param? actionSelected: string}
	{@param? dataProvider: list<[
			id: string,
			name: string
		]>
	}
	{@param? hasRequiredInputs: bool}
	{@param? targetSelected: string}

	<li action-index="{$index}" class="action form-builder-rule-action-container-{$index} timeline-item">
		<div class="panel panel-default">
			<div class="panel-body">
				<div class="form-group-autofit">
					<div class="form-group-item form-group-item-label form-group-item-shrink">
						<h4>
							<span class="text-truncate-inline">
								<span class="text-truncate">{msg desc=""}do{/msg}</span>
							</span>
						</h4>
					</div>

					<div action-type-index="{$index}" class="action-type form-group-item">
						{delcall PageRenderer.RegisterFieldType variant="'select'"}
							{param events: [
								'fieldEdited': $_handleActionSelection
							] /}
							{param name: 'action' + $index /}
							{param options: $actionTypes /}
							{param placeholder kind="text"}
								{msg desc=""}choose-an-option{/msg}
							{/param}
							{param ref: 'action' + $index /}
							{param spritemap: $spritemap /}
							{param value: [$actionSelected] /}
						{/delcall}
					</div>

					{let $showTargetDefault: $actionSelected and (($actionSelected == 'show') or ($actionSelected == 'enable') or ($actionSelected == 'require')) /}
					{let $showTargetAutofill: $actionSelected and ($actionSelected == 'auto-fill') /}
					{let $showTargetCalculator: $actionSelected and ($actionSelected == 'calculate') /}
					{let $showTargetJumpToPage: $actionSelected and ($actionSelected == 'jump-to-page') /}
					{let $showLabel: $showTargetAutofill or $showTargetCalculator /}

					<div class="form-group-item form-group-item-label form-group-item-shrink {if not $showLabel}hide{/if} target-message-{$index}">
						<h4>
							<span class="text-truncate-inline">
								{if $showTargetAutofill}
									<span class="text-truncate">{msg desc=""}from-data-provider{/msg}</span>
								{elseif $showTargetCalculator}
									<span class="text-truncate">{msg desc=""}choose-a-field-to-show-the-result{/msg}</span>
								{/if}
							</span>
						</h4>
					</div>

					{if $showTargetDefault or $showTargetAutofill or $showTargetCalculator or $showTargetJumpToPage}
						{let $options: ($showTargetAutofill) ? $dataProvider : ($showTargetDefault ? $fieldOptions : ($showTargetJumpToPage ? $pageOptions : ($showTargetCalculator ? $calculatorResultOptions : []))) /}
						{let $ref: $showTargetCalculator ? 'calculatorResult' : 'actionTarget' /}

						{call .renderActionTarget}
							{param _handleTargetSelection: $_handleTargetSelection /}
							{param index: $index /}
							{param options: $options /}
							{param placeholder kind="text"}
								{msg desc=""}choose-an-option{/msg}
							{/param}
							{param ref: $ref + $index /}
							{param spritemap: $spritemap /}
							{param value: $targetSelected /}
						{/call}
					{/if}
				</div>

				{if $showTargetCalculator and $targetSelected}
					{call Calculator.render}
						{param events: [
							'editExpression': $_handleEditExpression
						]/}
						{param expression: $actionExpression /}
						{param fields: $calculatorFields /}
						{param functions: $calculatorFunctions /}
						{param index: $index /}
						{param resultSelected: $targetSelected /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}

				{if $showTargetAutofill and $targetSelected}
					<div class="action-rule-data-provider row">
						{call .renderAutofill}
							{param _handleDataProviderInputEdited: $_handleDataProviderInputEdited /}
							{param _handleDataProviderOutputEdited: $_handleDataProviderOutputEdited /}
							{param actionIndex: $index /}
							{param actionInputs: $actionInputs /}
							{param actionOutputs: $actionOutputs /}
							{param hasRequiredInputs: $hasRequiredInputs /}
							{param spritemap: $spritemap /}
						{/call}
					</div>
				{/if}

				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>

		<div class="container-trash">
			{call ClayButton.render}
				{param events: [
					'click': $_handleDeleteAction
				] /}
				{param data: ['index': $index] /}
				{param icon: 'trash' /}
				{param monospaced: true /}
				{param ref: 'trashButtonAction' + $index /}
				{param size: 'sm' /}
				{param spritemap: $spritemap /}
				{param style: 'secondary' /}
			{/call}
		</div>
	</li>
{/template}

{template .renderActionTarget}
	{@param index: int}
	{@param ref: string}
	{@param spritemap: string}
	{@param? _handleTargetSelection: any}
	{@param? options: list<?>}
	{@param? placeholder: string}
	{@param? value: string}

	<div class="form-group-item target-action" target-action-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleTargetSelection
			] /}
			{param name: $ref /}
			{param options: $options /}
			{param placeholder: $placeholder /}
			{param ref: $ref /}
			{param spritemap: $spritemap /}
			{param value: [$value] /}
		{/delcall}
	</div>
{/template}

{template .renderCondition}
	{@param binaryOperator: bool}
	{@param fieldOptions : list<[
		label: string,
		name: string,
		options: list<[
			label: string,
			value: string
		]>,
		type: string,
		value: string
	]>}
	{@param index: int}
	{@param readOnly: bool}
	{@param spritemap: string}
	{@param? _handleDeleteCondition: any}
	{@param? _handleFirstOperandFieldEdited: any}
	{@param? _handleOperatorEdited: any}
	{@param? _handleSecondOperandFieldEdited: any}
	{@param? _handleSecondOperandTypeEdited: any}
	{@param? _handleSecondOperandValueEdited: any}
	{@param? firstOperandType: string}
	{@param? firstOperandOptions: list<[
		label: string,
		value: string
	]>}
	{@param? firstOperandValueSelected: string}
	{@param? fixedOptions: any}
	{@param? logicalOperator: string}
	{@param? operators: ?}
	{@param? roles: list<[
		label: string,
		value: string
	]>}
	{@param? secondOperandDataType: string}
	{@param? secondOperandFieldName: string}
	{@param? secondOperandType: string}
	{@param? secondOperandValue: any}
	{@param? selectedOperator: string}

	<li class="form-builder-rule-condition-container timeline-item" condition-index="{$index}">
		<div class="panel panel-default">
			<div class="flex-container panel-body">
				<div class="form-group-autofit">
					<div class="form-group-item form-group-item-label form-group-item-shrink">
						<h4>
							<span class="text-truncate-inline">
								<span class="text-truncate">{msg desc=""}if{/msg}</span>
							</span>
						</h4>
					</div>

					<div class="condition-if form-group-item" condition-if-index="{$index}">
						{delcall PageRenderer.RegisterFieldType variant="'select'"}
							{param events: [
								'fieldEdited': $_handleFirstOperandFieldEdited
							] /}
							{param fixedOptions: $fixedOptions /}
							{param name: 'firstOperand' + $index /}
							{param options: $fieldOptions /}
							{param placeholder kind="text"}
								{msg desc=""}choose-an-option{/msg}
							{/param}
							{param ref: 'firstOperand' + $index /}
							{param spritemap: $spritemap /}
							{param value: [$firstOperandValueSelected]   /}
						{/delcall}
					</div>

					{call .renderConditionOperators}
						{param _handleOperatorEdited: $_handleOperatorEdited /}
						{param firstOperandType: $firstOperandType /}
						{param index: $index /}
						{param operators: $operators /}
						{param selectedOperator: $selectedOperator /}
						{param spritemap: $spritemap /}
					{/call}

					{if $firstOperandType and $selectedOperator}
						{if $firstOperandType != 'user'}
							{if $binaryOperator}
								{call .renderConditionSecondOperandTypeSelector}
									{param _handleSecondOperandTypeEdited: $_handleSecondOperandTypeEdited /}
									{param index: $index /}
									{param secondOperandType: $secondOperandType /}
									{param selectedOperator: $selectedOperator /}
									{param spritemap: $spritemap /}
								{/call}

								{let $fieldHasOptions:
									($secondOperandType == 'select' or
									$secondOperandType == 'checkbox_multiple' or
									$secondOperandType == 'radio')
								/}

								<div class="condition-type-value form-group-item" condition-type-value-index="{$index}">
									{if $fieldHasOptions}
										{delcall PageRenderer.RegisterFieldType variant="'select'"}
											{param events: [
												'fieldEdited': $_handleSecondOperandValueEdited
											] /}
											{param name: $secondOperandFieldName /}
											{param options: $firstOperandOptions /}
											{param placeholder kind="text"}
												{msg desc=""}choose-an-option{/msg}
											{/param}
											{param readOnly: $readOnly /}
											{param ref: 'secondOperand' + $index /}
											{param spritemap: $spritemap /}
											{param value: [$secondOperandValue] /}
										{/delcall}
									{elseif $secondOperandType == 'field'}
										{delcall PageRenderer.RegisterFieldType variant="'select'"}
											{param events: [
												'fieldEdited': $_handleSecondOperandValueEdited
											] /}
											{param name: 'secondOperand' + $index /}
											{param options: $fieldOptions /}
											{param placeholder kind="text"}
												{msg desc=""}choose-an-option{/msg}
											{/param}
											{param ref: 'secondOperand' + $index /}
											{param spritemap: $spritemap /}
											{param value: [$secondOperandValue] /}
										{/delcall}
									{else}
										{delcall PageRenderer.RegisterFieldType variant="$secondOperandType"}
											{param dataType: $secondOperandDataType /}
											{param events: [
												'fieldEdited': $_handleSecondOperandValueEdited
											] /}
											{param name: $secondOperandFieldName /}
											{param readOnly: $readOnly /}
											{param ref: 'secondOperand' + $index /}
											{param spritemap: $spritemap /}
											{param value: $secondOperandValue /}
										{/delcall}
									{/if}
								</div>
							{/if}
						{else}
							<div class="condition-type-value form-group-item" condition-type-value-index="{$index}">
								{call .renderConditionUserRolesSelector}
									{param _handleSecondOperandFieldEdited: $_handleSecondOperandFieldEdited /}
									{param index: $index /}
									{param selectedOperator: $selectedOperator /}
									{param roles: $roles  /}
									{param secondOperandValue: $secondOperandValue /}
									{param spritemap: $spritemap /}
								{/call}
							</div>
						{/if}
					{/if}
				</div>

				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>

		<div class="operator panel panel-default panel-inline">
			<div class="panel-body text-uppercase">
				{if $logicalOperator == 'and'}
					{msg desc=""}and{/msg}
				{else}
					{msg desc=""}or{/msg}
				{/if}
			</div>
		</div>

		<div class="container-trash">
			{call ClayButton.render}
				{param events: [
					'click': $_handleDeleteCondition
				] /}
				{param data: ['index': $index] /}
				{param icon: 'trash' /}
				{param monospaced: true /}
				{param ref: 'trashButton' + $index /}
				{param size: 'sm' /}
				{param spritemap: $spritemap /}
				{param style: 'secondary' /}
			{/call}
		</div>
	</li>
{/template}

{template .renderConditionOperators}
	{@param index: int}
	{@param spritemap: string}
	{@param? _handleOperatorEdited: any}
	{@param? firstOperandType: string}
	{@param? operators: ?}
	{@param? selectedOperator: string}

	{let $readOnly: $firstOperandType ? false : true /}

	<div class="condition-operator form-group-item" condition-operator-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleOperatorEdited
			] /}
			{param name: 'conditionOperator' + $index /}
			{param options: $operators /}
			{param placeholder kind="text"}
				{msg desc=""}choose-an-option{/msg}
			{/param}
			{param readOnly: $readOnly /}
			{param ref: 'conditionOperator' + $index /}
			{param spritemap: $spritemap /}
			{param value: [$selectedOperator] /}
		{/delcall}
	</div>
{/template}

{template .renderConditionSecondOperandTypeSelector}
	{@param index: int}
	{@param spritemap: string}
	{@param? _handleSecondOperandTypeEdited: any}
	{@param? secondOperandType: string}
	{@param? selectedOperator: any}

	{let $otherFieldLabel kind="text"}
		{msg desc=""}other-field{/msg}
	{/let}
	{let $valueLabel kind="text"}
		{msg desc=""}value{/msg}
	{/let}

	{let $options: [
		[
			'label': $valueLabel,
			'value': 'value'
		],
		[
			'label': $otherFieldLabel,
			'value': 'field'
		]
	] /}

	{let $value: $secondOperandType == 'field' ? 'field' : ($secondOperandType ? 'value' : '') /}

	{let $visible: $selectedOperator and $secondOperandType != 'none' ? true : false /}

	{if $visible}
		<div class="condition-type form-group-item" condition-type-index="{$index}">
			{delcall PageRenderer.RegisterFieldType variant="'select'"}
				{param events: [
					'fieldEdited': $_handleSecondOperandTypeEdited
				] /}
				{param name: 'secondOperandTypeSelector' + $index /}
				{param options: $options /}
				{param placeholder kind="text"}
					{msg desc=""}choose-an-option{/msg}
				{/param}
				{param ref: 'secondOperandTypeSelector' + $index /}
				{param spritemap: $spritemap /}
				{param value: [$value] /}
				{param visible: $visible /}
			{/delcall}
		</div>
	{/if}
{/template}

{template .renderConditionUserRolesSelector}
	{@param index: int}
	{@param spritemap: string}
	{@param? _handleSecondOperandFieldEdited: any}
	{@param? roles: list<[
			label: string,
			value: string
		]>
	}
	{@param? selectedOperator: any}
	{@param? secondOperandValue: any }

	{let $visible: $selectedOperator ? true : false /}

	<div class="condition-user-role form-group-item {if not $visible}hide{/if}" condition-user-role-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleSecondOperandFieldEdited
			] /}
			{param name: 'roleSelector' + $index /}
			{param options: $roles /}
			{param placeholder kind="text"}
				{msg desc=""}choose-an-option{/msg}
			{/param}
			{param spritemap: $spritemap /}
			{param value: [$secondOperandValue] /}
		{/delcall}
	</div>
{/template}

/**
 * Prints Logical Operator Dropdown
 */
{template .renderConditionLogicalOperatorDropdown}
	{@param _handleLogicalOperationChange: any}
	{@param? enableLogicalOperator: bool}
	{@param? logicalOperator: string}

	{let $attributes kind="attributes"}
		class="btn btn-default dropdown-toggle dropdown-toggle-operator text-uppercase"
		data-toggle="dropdown"
		ref="logicalOperatorDropDownButton"
		type="button"

		{if not $enableLogicalOperator}
			disabled
		{/if}
	{/let}

	<div class="btn-group dropdown" style="block">
		<button {$attributes}>
			<span class="dropdown-toggle-selected-value">
				{if $logicalOperator == 'and'}
					{msg desc=""}and{/msg}
				{else}
					{msg desc=""}or{/msg}
				{/if}
			</span>
			<span class="caret"></span>
		</button>

		<ul class="dropdown-menu" data-onclick="{$_handleLogicalOperationChange}">
			<li class="logic-operator text-uppercase" ref="globalOrOperator">
				<a data-value="or">{msg desc=""}or{/msg}</a>
			</li>
			<li class="divider"></li>
			<li class="logic-operator text-uppercase" ref="globalAndOperator">
				<a data-value="and">{msg desc=""}and{/msg}</a>
			</li>
		</ul>
	</div>
{/template}

/**
 * Prints header.
 */
{template .renderHeader}
	{@param title: string}
	{@param? extraContent: html}

	<li class="timeline-item">
		<div class="panel panel-default">
			<div class="flex-container panel-body">
				<div class="h4 panel-title">
					{$title}
				</div>
				{if $extraContent}
					{$extraContent}
				{/if}
				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>
	</li>
{/template}

/**
 * Prints the add condition button.
 */
{template .renderAddItemButton}
	{@param spritemap: string}
	{@param? _handleItemAdded: any}
	{@param? type: string}

	<div class="addbutton-timeline-item">
		<div class="add-item timeline-increment-icon">
			{call ClayButton.render}
				{param events: [
					'click': $_handleItemAdded
				] /}
				{param elementClasses: 'rounded-circle' /}
				{param icon: 'plus' /}
				{param monospaced: true /}
				{param ref: $type /}
				{param size: 'sm' /}
				{param spritemap: $spritemap /}
			{/call}
		</div>
	</div>
{/template}

{template .renderAutofill}
	{@param actionIndex: int}
	{@param spritemap: string}
	{@param? _handleDataProviderInputEdited: any}
	{@param? _handleDataProviderOutputEdited: any}
	{@param? actionInputs: list<[
		label: string,
		name: string,
		required: bool,
		type: string,
		value: string,
		fieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	]>}
	{@param? actionOutputs: list<[
		name: string,
		type: string,
		value: string,
		fieldOptions: list<[
			label: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>,
			type: string,
			value: string
		]>
	]>}
	{@param? hasRequiredInputs: bool}

	<div class="col-md-12 ddm-data-provider-container no-padding">
		{if not $actionOutputs or length($actionOutputs) == 0}
			{call ClayAlert.render}
				{param message kind="text"}
					{msg desc=""}data-provider-error{/msg}
				{/param}
				{param spritemap: $spritemap /}
				{param style: 'danger' /}
				{param title kind="text"}
					{msg desc=""}error{/msg}
				{/param}
			{/call}
		{/if}
		{if $actionInputs and length($actionInputs) > 0 and $actionOutputs and length($actionOutputs) > 0}
			<div class="data-provider-parameter-input-container">
				{if $hasRequiredInputs}
					<div class="data-provider-label-container">
						<label>
							<p class="data-provider-parameter-input-required-field">{msg desc=""}required-field{/msg}</p>
							{sp}
							<span class="reference-mark">
								{call ClayIcon.render}
									{param spritemap: $spritemap /}
									{param symbol: 'asterisk' /}
								{/call}
							</span>
						</label>
					</div>
				{/if}

				<div class="data-provider-label-container">
					<p class="data-provider-parameter-input"><b>{msg desc=""}data-provider-parameter-input{/msg}</b></p>
					<p class="data-provider-parameter-input-description">{msg desc=""}data-provider-parameter-input-description{/msg}</p>
				</div>

				<div class="data-provider-parameter-input-list row">
					{foreach $input in $actionInputs}
						<div class="col-md-3 container-input-label">
							{$input.label}
							<label>
								{if $input.required}
									<span class="input-required reference-mark">
										{call ClayIcon.render}
											{param spritemap: $spritemap /}
											{param symbol: 'asterisk' /}
										{/call}
									</span>
								{/if}
							</label>
						</div>
						{let $index: index($input) /}
						<div class="col-md-9 container-input-field container-input-field-{$index}" container-input-field-index="{$index}">
							{delcall PageRenderer.RegisterFieldType variant="'select'"}
								{param events: [
									'fieldEdited': $_handleDataProviderInputEdited
								] /}
								{param name: 'action' + $actionIndex + 'dataProviderInput' + $index /}
								{param options: $input.fieldOptions /}
								{param placeholder kind="text"}
									{msg desc=""}choose-an-option{/msg}
								{/param}
								{param ref: 'action' + $actionIndex + 'dataProviderInput' + $index /}
								{param spritemap: $spritemap /}
								{param value: [$input.value] /}
							{/delcall}
						</div>
					{/foreach}
				</div>
			</div>
		{/if}

		{if $actionOutputs and length($actionOutputs) > 0}
			<div class="data-provider-parameter-output-container">
				<div class="data-provider-label-container">
					<p class="data-provider-parameter-output"><b>{msg desc=""}data-provider-parameter-output{/msg}</b></p>
					<p class="data-provider-parameter-output-description">{msg desc=""}data-provider-parameter-output-description{/msg}</p>
				</div>

				<div class="data-provider-parameter-output-list row">
					{foreach $output in $actionOutputs}
						<div class="col-md-3 container-output-label">
							{$output.name}
						</div>
						{let $index: index($output) /}
						<div class="col-md-9 container-output-field container-output-field-{$index}" container-output-field-index="{$index}">
							{delcall PageRenderer.RegisterFieldType variant="'select'"}
								{param events: [
									'fieldEdited': $_handleDataProviderOutputEdited
								] /}
								{param name: 'action' + $actionIndex + 'dataProviderOutput' + $index /}
								{param options: $output.fieldOptions /}
								{param placeholder kind="text"}
									{msg desc=""}choose-an-option{/msg}
								{/param}
								{param ref: 'action' + $actionIndex + 'dataProviderOutput' + $index /}
								{param spritemap: $spritemap /}
								{param value: [$output.value] /}
							{/delcall}
						</div>
					{/foreach}
				</div>
			</div>
		{/if}
	</div>
{/template}