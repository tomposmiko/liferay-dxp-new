/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

import handleFieldAdded from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/fieldAddedHandler.es';
import handleFieldEdited from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/fieldEditedHandler.es';
import {generateFieldName} from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/fields.es';
import * as settingsContextUtil from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/settingsContext.es';
import {DEFAULT_FIELD_NAME_REGEX} from '../../../../../src/main/resources/META-INF/resources/js/util/regex.es';
import mockFieldTypes from '../../../__mock__/mockFieldTypes.es';
import mockPages from '../../../__mock__/mockPages.es';

const addField = (props, state) => {
	return handleFieldAdded(props, state, {
		data: {},
		fieldType: mockFieldTypes[0],
		indexes: {
			columnIndex: 0,
			pageIndex: 0,
			rowIndex: 0,
		},
	});
};

const editField = (props, state, value) => {
	return handleFieldEdited(props, state, {
		propertyName: 'fieldReference',
		propertyValue: value,
	});
};

const getFieldReferenceSettingsProperty = (propertyName, state) => {
	return settingsContextUtil.getSettingsContextProperty(
		state.focusedField.settingsContext,
		'fieldReference',
		propertyName
	);
};

const getInitialFormContext = () => {
	const state = {
		focusedField: {},
		pages: [{rows: [{columns: [{fields: []}]}]}],
		rules: [],
	};

	const props = {
		defaultLanguageId: 'en_US',
		editingLanguageId: 'en_US',
		fieldNameGenerator: (desiredName, currentName) => {
			const {pages} = state;

			return generateFieldName(pages, desiredName, currentName);
		},
	};

	return {
		props,
		state,
	};
};

describe('LayoutProvider/handlers/fieldEditedHandler', () => {
	describe('handleFieldEdited(props, state, event)', () => {
		it('updates the field label', () => {
			let state = {
				focusedField: {},
				pages: [{rows: [{columns: [{fields: []}]}]}],
				rules: [],
			};

			let props = {
				defaultLanguageId: 'en_US',
				editingLanguageId: 'en_US',
				generateFieldNameUsingFieldLabel: false,
			};

			props = {
				...props,
				fieldNameGenerator: (desiredName, currentName) => {
					const {pages} = state;
					const {generateFieldNameUsingFieldLabel} = props;

					return generateFieldName(
						pages,
						desiredName,
						currentName,
						[],
						generateFieldNameUsingFieldLabel
					);
				},
			};

			const liferayLanguageSpy = jest.spyOn(Liferay.Language, 'get');

			liferayLanguageSpy.mockImplementation((key) => {
				if (key === 'field') {
					return 'Field';
				}

				return key;
			});

			// Adds a field

			state = handleFieldAdded(props, state, {
				data: {},
				fieldType: mockFieldTypes[0],
				indexes: {
					columnIndex: 0,
					pageIndex: 0,
					rowIndex: 0,
				},
			});

			// Edits the field label

			state = handleFieldEdited(props, state, {
				propertyName: 'label',
				propertyValue: 'New Label',
			});

			// Asserts label was updated

			expect(state.focusedField.label).toEqual('New Label');
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'label'
				)
			).toEqual('New Label');

			// Asserts name was autogenerated

			expect(state.focusedField.fieldName).toEqual(
				expect.stringMatching(DEFAULT_FIELD_NAME_REGEX)
			);
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'name'
				)
			).toEqual(expect.stringMatching(DEFAULT_FIELD_NAME_REGEX));

			liferayLanguageSpy.mockRestore();
		});

		it('updates the field name', () => {
			let state = {
				focusedField: {},
				pages: [{rows: [{columns: [{fields: []}]}]}],
				rules: [],
			};

			const props = {
				defaultLanguageId: 'en_US',
				editingLanguageId: 'en_US',
				fieldNameGenerator: (desiredName, currentName) => {
					const {pages} = state;

					return generateFieldName(pages, desiredName, currentName);
				},
			};

			// Adds a field

			state = handleFieldAdded(props, state, {
				data: {},
				fieldType: mockFieldTypes[0],
				indexes: {
					columnIndex: 0,
					pageIndex: 0,
					rowIndex: 0,
				},
			});

			// Edits the field name

			state = handleFieldEdited(props, state, {
				propertyName: 'name',
				propertyValue: 'NewName',
			});

			// Asserts name was updated

			expect(state.focusedField.fieldName).toEqual('NewName');
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'name'
				)
			).toEqual('NewName');
		});

		it('does not call updateField() when changing name to an empty string', () => {
			const event = {
				propertyName: 'name',
				propertyValue: '',
			};
			const props = {
				editingLanguageId: 'en_US',
			};
			const state = {
				focusedField: {},
				pages: mockPages,
				rules: [],
			};

			const updateFieldSpy = jest.spyOn(
				settingsContextUtil,
				'updateField'
			);

			updateFieldSpy.mockImplementation(() => ({}));

			handleFieldEdited(props, state, event);

			expect(updateFieldSpy).not.toHaveBeenCalled();

			updateFieldSpy.mockRestore();
		});

		it('updates the field reference', () => {
			const formContext = getInitialFormContext();

			const {props} = formContext;

			let {state} = formContext;

			state = addField(props, state);

			state = editField(props, state, 'NewReference');

			expect(state.focusedField.fieldReference).toEqual('NewReference');

			expect(getFieldReferenceSettingsProperty('value', state)).toEqual(
				'NewReference'
			);
		});

		it('shows an error message if field reference already exists', () => {
			const formContext = getInitialFormContext();

			const {props} = formContext;

			let {state} = formContext;

			state = addField(props, state);

			state = editField(props, state, 'NewReference');

			let valid = getFieldReferenceSettingsProperty('valid', state);

			let displayErrors = getFieldReferenceSettingsProperty(
				'displayErrors',
				state
			);

			expect(valid).toEqual(true);

			expect(displayErrors).toEqual(false);

			state = addField(props, state);

			state = editField(props, state, 'NewReference');

			valid = getFieldReferenceSettingsProperty('valid', state);

			displayErrors = getFieldReferenceSettingsProperty(
				'displayErrors',
				state
			);

			expect(valid).toEqual(false);

			expect(displayErrors).toEqual(true);
		});
	});
});
