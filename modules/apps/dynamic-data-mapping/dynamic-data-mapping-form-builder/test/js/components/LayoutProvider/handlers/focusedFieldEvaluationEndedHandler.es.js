/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

import handleFieldAdded from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/fieldAddedHandler.es';
import handleFieldEdited from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/fieldEditedHandler.es';
import handleFocusedFieldEvaluationEnded from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/focusedFieldEvaluationEndedHandler.es';
import {generateFieldName} from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/fields.es';
import * as settingsContextUtil from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/settingsContext.es';
import mockFieldTypes from '../../../__mock__/mockFieldTypes.es';

describe('LayoutProvider/handlers/focusedFieldEvaluationEndedHandler', () => {
	describe('focusedFieldEvaluationEnded(props, state, event)', () => {
		it.skip('does not autogenerate field name', () => {
			let state = {
				focusedField: {},
				pages: [{rows: [{columns: [{fields: []}]}]}],
				rules: [],
			};

			let props = {
				defaultLanguageId: 'en_US',
				editingLanguageId: 'en_US',
				generateFieldNameUsingFieldLabel: false,
			};

			props = {
				...props,
				fieldNameGenerator: (desiredName, currentName) => {
					const {pages} = state;
					const {generateFieldNameUsingFieldLabel} = props;

					return generateFieldName(
						pages,
						desiredName,
						currentName,
						[],
						generateFieldNameUsingFieldLabel
					);
				},
			};

			// Adds a field

			state = handleFieldAdded(props, state, {
				data: {},
				fieldType: mockFieldTypes[0],
				indexes: {
					columnIndex: 0,
					pageIndex: 0,
					rowIndex: 0,
				},
			});

			// Edits the field name

			state = handleFieldEdited(props, state, {
				propertyName: 'name',
				propertyValue: 'foo2',
			});

			// Edits the field label (without allowing the name to be autogenerated)

			state = handleFieldEdited(props, state, {
				propertyName: 'label',
				propertyValue: 'foo',
			});

			// Simulates an evaluation result

			state = handleFocusedFieldEvaluationEnded(
				props,
				state,
				'instanceIdCurrentOrNew',
				state.focusedField.settingsContext
			);

			// Asserts name was not updated

			expect(state.focusedField.fieldName).toEqual('foo2');
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'name'
				)
			).toEqual('foo2');
		});
	});
});
