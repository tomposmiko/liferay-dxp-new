@component-name = "portal-lima"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Redirect";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site");

		JSONLayout.addPublicLayout(
			groupName = "Test Site",
			layoutName = "parent");

		JSONLayout.addPublicLayout(
			friendlyURL = "/parent/child1",
			groupName = "Test Site",
			layoutName = "child1",
			parentLayoutName = "parent");

		JSONLayout.addPublicLayout(
			friendlyURL = "/parent/child2",
			groupName = "Test Site",
			layoutName = "child2",
			parentLayoutName = "parent");

		JSONLayout.addPublicLayout(
			friendlyURL = "/parent/child3",
			groupName = "Test Site",
			layoutName = "child3",
			parentLayoutName = "parent");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site");

			User.logoutPG();
		}
	}

	@description = "This test checks that an Alias will override a Pattern."
	@priority = 5
	test AliasTakesPrecedenceOverPattern {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site/parent/child2",
			groupName = "Test Site",
			sourceURL = "parent/child1");

		Redirect.openToPatterns(siteURLKey = "test-site");

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/test-site/$1/child3",
			pattern = "(.*)/child1$",
			patternIndex = 0);

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child2");

		JSONRedirect.deleteEntry(
			destinationURL = "${portalURL}/web/test-site/parent/child2",
			groupName = "Test Site");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child3");
	}

	@description = "This test checks that the user can redirect to destination URL when the user agent configured as bot."
	@priority = 5
	test CanRedirectToDestinationURLWhenUserAgentConfiguredAsBot {
		property custom.properties = "feature.flag.LPS-175850=true";
		property test.name.skip.portal.instance = "RedirectPattern#CanRedirectToDestinationURLWhenUserAgentConfiguredAsBot";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToPatterns(siteURLKey = "test-site");

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/test-site/$1/child2",
			pattern = "(.*)/child1$",
			patternIndex = 0,
			userAgent = "Bot",
			userAgentIndex = 0);

		Redirect.addPattern(
			destinationIndex = 1,
			destinationURL = "/web/test-site/$1/child3",
			pattern = "(.*)/child1$",
			patternIndex = 1,
			userAgent = "Human",
			userAgentIndex = 1);

		Redirect.gotoConfigureCrawlerUserAgents(navigateFromJavaScriptSEODynamicRendering = "true");

		Redirect.configureCrawlerUserAgents(removeCrawlerUserAgent = "baiduspider");

		Redirect.configureCrawlerUserAgents(addCrawlerUserAgent = "AppleWebKit");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child2");
	}

	@description = "This test checks that the user can redirect to destination URL when the user agent configured as human."
	@priority = 5
	test CanRedirectToDestinationURLWhenUserAgentConfiguredAsHuman {
		property custom.properties = "feature.flag.LPS-175850=true";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToPatterns(siteURLKey = "test-site");

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/test-site/$1/child2",
			pattern = "(.*)/child1$",
			patternIndex = 0,
			userAgent = "Bot",
			userAgentIndex = 0);

		Redirect.addPattern(
			destinationIndex = 1,
			destinationURL = "/web/test-site/$1/child3",
			pattern = "(.*)/child1$",
			patternIndex = 1,
			userAgent = "Human",
			userAgentIndex = 1);

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child3");
	}

	@description = "This test checks that a Pattern can be updated."
	@priority = 5
	test CanUpdatePattern {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToPatterns(siteURLKey = "test-site");

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/test-site/$1/changethis",
			pattern = "(.*)/child1$",
			patternIndex = 0);

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/test-site/$1/child2",
			pattern = "(.*)/child1$",
			patternIndex = 0);

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child2");
	}

	@description = "This test checks that the long destination URL can be clipped."
	@priority = 5
	test CanViewClippedDestinationURL {
		property custom.properties = "feature.flag.LPS-175850=true";

		Redirect.openToPatterns(siteURLKey = "test-site");

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/test-site/$1/000000000000000000000000000000000",
			pattern = "(.*)/child1$",
			patternIndex = 0);

		Redirect.openToPatterns(siteURLKey = "test-site");

		AssertAttributeValue(
			attribute1 = "value",
			locator1 = "TextInput#REDIRECT_DESTINATION_URL",
			value1 = "/web/test-site/$1/000000000000000000000000000000000");

		AssertCssValue(
			locator1 = "TextInput#REDIRECT_DESTINATION_URL",
			locator2 = "text-overflow",
			value1 = "ellipsis");
	}

	@description = "This test checks that when there are multiple Patterns, the first one that matches the URL will be applied."
	@priority = 5
	test FirstMatchingPatternWillBeApplied {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToPatterns(siteURLKey = "test-site");

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "/web/void",
			pattern = "void",
			patternIndex = 0);

		Redirect.addPattern(
			destinationIndex = 1,
			destinationURL = "/web/test-site/$1/child2",
			pattern = "(.*)/child1$",
			patternIndex = 1);

		Redirect.addPattern(
			destinationIndex = 2,
			destinationURL = "https://www.liferay.com",
			pattern = "(.*)/child1$",
			patternIndex = 2);

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child2");

		Redirect.openToPatterns(siteURLKey = "test-site");

		WaitForPageLoad();

		Redirect.removePattern(index = 2);

		Button.clickSave();

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "www.liferay.com");
	}

	@description = "This test checks that an error appears when an invalid input is typed into the destination field."
	@priority = 5
	test WillGenerateErrorIfDestinationInputIsInvalid {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site");

		AssertElementPresent(
			key_tab = "Aliases",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Redirect.gotoPatternsTab();

		Redirect.addPattern(
			destinationFieldError = "true",
			destinationIndex = 0,
			destinationURL = "(",
			pattern = "(.*)/child1$",
			patternIndex = 0);
	}

	@description = "This test checks that an error appears after publishing if there is an invalid input in the pattern field."
	@priority = 5
	test WillGenerateErrorIfPatternInputIsInvalid {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site");

		AssertElementPresent(
			key_tab = "Aliases",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Redirect.gotoPatternsTab();

		Redirect.addPattern(
			destinationIndex = 0,
			destinationURL = "https://www.liferay.com",
			pattern = "(",
			patternFieldError = "true",
			patternIndex = 0);

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site/parent/child1");

		AssertLocation.assertPartialLocation(value1 = "/parent/child1");
	}

}