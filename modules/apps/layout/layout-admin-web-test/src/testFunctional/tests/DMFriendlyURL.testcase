@component-name = "portal-lima"
definition {

	property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Document Management";
	property testray.main.component.name = "Friendly URL Service";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that a user is redirected to the new friendly URL when he accesses a previous DM display page URL."
	@priority = "4"
	test CanAccessDisplayPageWithOldFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Site Name",
			subType = "Basic Document");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "site-name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "Document_1",
			groupName = "Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "site-name");

		for (var customURL : list "document_1_edit,document_1_edit_again") {
			DMNavigator.openToEditEntryInSite(
				dmDocumentTitle = "Document_1",
				groupName = "Site Name",
				siteURLKey = "site-name");

			DMDocument.editFriendlyURL(friendlyURLEdit = "${customURL}");
		}

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/d/document_1_edit");

		AssertLocation(value1 = "${portalURL}/web/site-name/d/document_1_edit_again");

		ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpg");
	}

	@description = "This ensures that a user is redirected to a restored friendly URL when he accesses a previous DM display page URL."
	@priority = "4"
	test CanAccessDisplayPageWithOldFriendlyURLAfterRestoring {
		var portalURL = PropsUtil.get("portal.url");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Site Name",
			subType = "Basic Document");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "site-name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "Document_1",
			groupName = "Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "site-name");

		for (var customURL : list "document_1_edit,document_1_edit_again") {
			DMNavigator.openToEditEntryInSite(
				dmDocumentTitle = "Document_1",
				groupName = "Site Name",
				siteURLKey = "site-name");

			DMDocument.editFriendlyURL(friendlyURLEdit = "${customURL}");
		}

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMNavigator.gotoFriendlyURLHistory();

		DMDocument.restoreOldFriendlyURL(
			activeURL = "document_1_edit_again",
			oldFriendlyURL = "document_1_edit",
			restoredURL = "document_1_edit");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/d/document_1_edit_again");

		AssertLocation(value1 = "${portalURL}/web/site-name/d/document_1_edit");

		ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpg");
	}

	@description = "This ensures that an image cannot be previewed when using a removed friendlyURL."
	@priority = "5"
	test CannotPreviewImageWithRemovedFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "document_1_edit");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMNavigator.gotoFriendlyURLHistory();

		DMDocument.removeOldFriendlyURL(oldFriendlyURL = "document_1");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found");

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1_edit");

		AssertVisible(
			key_imageSourceURL = "${portalURL}/documents/d/site-name/document_1_edit",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This ensures that an image can be previewed after restoring the friendlyURL."
	@priority = "5"
	test CanPreviewImageAfterRestoringFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "document_1_edit");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMNavigator.gotoFriendlyURLHistory();

		DMDocument.restoreOldFriendlyURL(
			activeURL = "document_1_edit",
			oldFriendlyURL = "document_1",
			restoredURL = "document_1");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1");

		AssertVisible(
			key_imageSourceURL = "${portalURL}/documents/d/site-name/document_1",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1_edit");

		AssertVisible(
			key_imageSourceURL = "${portalURL}/documents/d/site-name/document_1_edit",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This ensures that an image can be previewed after updating the friendlyURL."
	@priority = "5"
	test CanPreviewImageAfterUpdatingFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1");

		AssertVisible(
			key_imageSourceURL = "${portalURL}/documents/d/site-name/document_1",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "document_1_edit");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMNavigator.gotoFriendlyURLHistory();

		DMDocument.viewActiveURL(activeURL = "document_1_edit");

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1");

		AssertVisible(
			key_imageSourceURL = "${portalURL}/documents/d/site-name/document_1",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");

		Navigator.openSpecificURL(url = "${portalURL}/documents/d/site-name/document_1_edit");

		AssertVisible(
			key_imageSourceURL = "${portalURL}/documents/d/site-name/document_1_edit",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This ensures that an image in the WC content field can be rendered correctly after moving it to a folder."
	@priority = "4"
	test CanViewImageInWCAfterMovingToFolder {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedImage = "true",
			imageFileName = "Document_1",
			siteName = "Site Name",
			webContentContent = "Web Content Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Site Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoPreviewEntryCP(webContentTitle = "WC WebContent Title");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertVisible(
			key_imageTitle = "document_1",
			locator1 = "WCPreview#PREVIEW_IMAGE");
	}

	@description = "This ensures that an image in Asset Publisher can be rendered correctly after moving it to a folder."
	@priority = "4"
	test CanViewImageViaAPAfterMovingToFolder {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Site Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			title = "Manual Collection");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "site-name");

		AssetListsAdmin.selectAsset(
			assetListName = "Manual Collection",
			assetName = "Document_1",
			assetType = "Basic Document");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(assetListName = "Manual Collection");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document_1");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Site Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document_1");
	}

	@description = "This ensures that an image in DM widget can be rendered correctly after moving it to a folder."
	@priority = "4"
	test CanViewImageViaDMWidgetAfterMovingToFolder {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Site Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(dmRootFolderName = "DM Folder Name");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.viewPG(dmDocumentTitle = "Document_1");
	}

	@description = "This ensures that an image in an image fragment can be rendered correctly after moving it to a folder."
	@priority = "4"
	test CanViewImageViaImageFragmentAfterMovingToFolder {
		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Content Page Name",
			type = "content");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			fragmentName = "Image",
			id = "image-square",
			imageFileName = "Document_1");

		PageEditor.publish();

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Site Name");

		JSONDocument.moveFileEntryToFolder(
			dmDocumentTitle = "Document_1",
			folderName = "DM Folder Name",
			groupName = "Site Name");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Site Name");

		ContentPages.viewFragmentImage(
			fragmentName = "image",
			id = "image-square",
			image = "document_1");
	}

	@description = "This ensures that the friendlyURL can be used when a user accesses a document template."
	@priority = "4"
	test CanViewImageWithTemplate {
		var portalURL = PropsUtil.get("portal.url");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Site Name",
			subType = "Basic Document");

		DisplayPageTemplate.addFragment(
			collectionName = "Basic Components",
			displayPageName = "Display Page Template Name",
			fragmentName = "Image",
			siteURLKey = "site-name");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "document_1_edit");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Template Name",
			item = "Edit");

		PageEditor.editFragmentImage(
			fragmentName = "Image",
			id = "image-square",
			imageFileName = "DM Document Title");

		Button.clickPublish();

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "DM Document Title",
			groupName = "Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "site-name");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/d/document_1_edit");

		ContentPages.viewFragmentImage(
			fragmentName = "image",
			id = "image-square",
			image = "document_1_edit");
	}

}