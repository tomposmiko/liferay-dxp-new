@component-name = "portal-collaboration"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Friendly URL Service";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This test covers LPS-125475. The default page will be displayed when accessing a page through a language without a specific layout."
	@priority = "3"
	test AccessWithSpecificDisabledLanguage {
		property custom.properties = "locales.enabled=zh_CN,en_US,en_AU,fr_FR,de_DE,it_IT,ja_JP,pt_BR,es_ES${line.separator}locales=zh_CN,en_US,en_AU,fr_FR,de_DE,it_IT,ja_JP,pt_BR,es_ES,ru_RU,pl_PL,sv_SE,hu_HU,ar_SA,nb_NO,hr_HR,fi_FI,nl_NL,cs_CZ";

		var portalUrl = PropsUtil.get("portal.url");

		Site.openSiteSettingsAdmin(siteUrlKey = "test-site-name");

		Site.configureCurrentLanguagesCP(
			currentSiteLanguages = "English (United States),Japanese (Japan)",
			defaultSiteLanguage = "English (United States)");

		Navigator.openSpecificURL(url = "${portalUrl}/en_AU/web/test-site-name/test-source-page");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");
	}

	@description = "This ensures that a user can add friendlyURL with escape character in a web content."
	@priority = "3"
	test CanAddFriendlyURLWithEscapeCharacter {
		var portalUrl = PropsUtil.get("portal.url");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Test Source Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		WebContentNavigator.openWebContentAdmin(siteUrlKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithFriendlyURL(
			friendlyUrl = '''link&''',
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editDisplayPage(
			pageName = "Test Source Page",
			pageType = "Public Pages");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/-/link-");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "WC WebContent Title");
	}

	@description = "This ensures that the friendlyURL of web content can be reset to default."
	@priority = "4"
	test CanResetFriendlyURLToDefault {
		var portalUrl = PropsUtil.get("portal.url");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Test Source Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "Web Content Article");

		WebContentNavigator.openToEditWCInSite(
			groupName = "Test Site Name",
			siteUrlKey = "test-site-name",
			version = "1.1",
			webContentTitle = "Web Content Article");

		WebContent.editDisplayPage(
			pageName = "Test Source Page",
			pageType = "Public Pages");

		WebContent.editFriendlyURL(webContentFriendlyUrl = "friendlyUrl");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Article");

		WebContent.editFriendlyURL(webContentFriendlyUrl = "web-content-article");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/-/web-content-article");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Web Content Article");
	}

	@description = "This ensures that a previous friendlyURL of web content can be deleted when updating."
	@priority = "4"
	test CanViewWCWithLatestFriendlyURL {
		var portalUrl = PropsUtil.get("portal.url");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Test Source Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		WebContentNavigator.openWebContentAdmin(siteUrlKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithFriendlyURL(
			friendlyUrl = "friendlyUrl",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editFriendlyURL(webContentFriendlyUrl = "editedfriendlyUrl");

		WebContent.editDisplayPage(
			pageName = "Test Source Page",
			pageType = "Public Pages");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/-/friendlyUrl");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found");

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/-/editedfriendlyUrl");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "WC WebContent Title");
	}

	@description = "This ensures that a user is redirected to the updated friendlyURL when he accesses the former friendlyURL."
	@priority = "5"
	test RedirectToUpdatedFriendlyURL {
		var portalUrl = PropsUtil.get("portal.url");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalUrl}/en/web/test-site-name/new-test-page");

		AssertVisible(
			key_pageName = "Test Source Page",
			locator1 = "Home#PAGE_ACTIVE");
	}

	@description = "This ensures that a user is redirected to the updated localized friendlyURL when he accesses the former localized friendlyURL."
	@priority = "5"
	test RedirectToUpdatedLocalizedFriendlyURL {
		var portalUrl = PropsUtil.get("portal.url");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.addLocalizedFriendlyURL(
			friendlyUrlLocalizedList = "es-ES,es-ES",
			localizedFriendlyUrlList = "/pagina-de-prueba,/nueva-pagina-de-prueba",
			localizedNameList = "Pagina de prueba,-");

		Navigator.openSpecificURL(url = "${portalUrl}/es/web/test-site-name/pagina-de-prueba");

		AssertLocation(value1 = "${portalUrl}/es/web/test-site-name/nueva-pagina-de-prueba");

		AssertVisible(
			key_pageName = "Pagina de prueba",
			locator1 = "Home#PAGE_ACTIVE");
	}

	@description = "This ensures that the old friendlyURL can be removed from the history."
	@priority = "5"
	test RemoveOldFriendlyURL {
		var portalUrl = PropsUtil.get("portal.url");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		PagesAdmin.gotoFriendlyURLHistory();

		PagesAdmin.removeOldFriendlyURL(oldFriendlyUrl = "/test-page");

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/test-page");

		AssertTextPresent(value1 = "The requested resource could not be found.");
	}

	@description = "This ensures that the old friendlyURL can be restored from the history."
	@priority = "5"
	test RestoreOldFriendlyURL {
		var portalUrl = PropsUtil.get("portal.url");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		PagesAdmin.gotoFriendlyURLHistory();

		PagesAdmin.restoreOldFriendlyURL(
			activeUrl = "/new-test-page",
			friendlyUrlEdit = "/test-page",
			oldFriendlyUrl = "/test-page",
			restoredUrl = "/test-page");

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/test-page");

		AssertLocation(value1 = "${portalUrl}/web/test-site-name/test-page");
	}

	@description = "This ensures that accessing an old friendlyURL in the default language after publishing the new friendly URL will redirect the user to the new URL."
	@priority = "5"
	test StagingFriendlyURLRedirect {
		var portalUrl = PropsUtil.get("portal.url");

		Staging.openStagingAdmin(siteUrlKey = "test-site-name");

		Staging.activateStagingCP(siteName = "Test Site Name");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name-staging");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		Navigator.gotoStagedSitePage(
			pageName = "Test Source Page",
			siteName = "Test Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSpecificURL(url = "${portalUrl}/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalUrl}/en/web/test-site-name/new-test-page");

		AssertVisible(
			key_pageName = "Test Source Page",
			locator1 = "Home#PAGE_ACTIVE");
	}

	@description = "This ensures that accessing an old localized friendlyURL after publishing the new friendly URL will redirect the user to the new URL."
	@priority = "5"
	test StagingLocalizedFriendlyURLRedirect {
		var portalUrl = PropsUtil.get("portal.url");

		Staging.openStagingAdmin(siteUrlKey = "test-site-name");

		Staging.activateStagingCP(siteName = "Test Site Name");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name-staging");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.addLocalizedFriendlyURL(
			friendlyUrlLocalizedList = "es-ES",
			localizedFriendlyUrlList = "/pagina-de-prueba",
			localizedNameList = "Pagina de prueba");

		Navigator.gotoStagedSitePage(
			pageName = "Test Source Page",
			siteName = "Test Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name-staging");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.addLocalizedFriendlyURL(
			friendlyUrlLocalizedList = "es-ES",
			localizedFriendlyUrlList = "/nueva-pagina-de-prueba",
			localizedNameList = "-");

		Navigator.gotoStagedSitePage(
			pageName = "Test Source Page",
			siteName = "Test Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSpecificURL(url = "${portalUrl}/es/web/test-site-name/pagina-de-prueba");

		AssertLocation(value1 = "${portalUrl}/es/web/test-site-name/nueva-pagina-de-prueba");

		AssertVisible(
			key_pageName = "Pagina de prueba",
			locator1 = "Home#PAGE_ACTIVE");
	}

	@description = "This ensures that both the active URL and old friendlyURL can be viewed from the history."
	@priority = "5"
	test ViewFriendlyURLs {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		PagesAdmin.gotoFriendlyURLHistory();

		PagesAdmin.viewActiveURL(activeUrl = "/new-test-page");

		AssertElementNotPresent(
			key_activeUrl = "/test-page",
			locator1 = "PagesAdmin#FRIENDLY_URL_ACTIVE_URL");

		PagesAdmin.viewOldFriendlyURL(oldFriendlyUrl = "/test-page");

		AssertElementNotPresent(
			key_oldFriendlyUrl = "/new-test-page",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");
	}

	@description = "This test covers LPS-116068. It ensures that both the active URL and old friendlyURL can be viewed from the history of a default page."
	@priority = "5"
	test ViewFriendlyURLsViaDefaultPage {
		PagesAdmin.openPagesAdmin(siteUrlKey = "guest");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Search");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-search-page");

		PagesAdmin.gotoFriendlyURLHistory();

		PagesAdmin.viewActiveURL(activeUrl = "/new-search-page");

		AssertElementNotPresent(
			key_activeUrl = "/search",
			locator1 = "PagesAdmin#FRIENDLY_URL_ACTIVE_URL");

		PagesAdmin.viewOldFriendlyURL(oldFriendlyUrl = "/search");

		AssertElementNotPresent(
			key_oldFriendlyUrl = "/new-search-page",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");
	}

	@description = "This test covers LPS-119836. It ensures the localized URL with special characters can be escaped correctly and viewed in friendly URL history."
	@priority = "4"
	test ViewFriendlyURLWithSpecialCharacters {
		property portal.acceptance = "false";

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.addLocalizedFriendlyURL(
			friendlyUrlLocalizedList = "es-ES",
			localizedFriendlyUrlList = "/^_^",
			localizedNameList = "Pagina de prueba");

		var portalUrl = PropsUtil.get("portal.url");

		Navigator.openWithAppendToBaseURL(urlAppend = "es/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalUrl}/es/web/test-site-name/%5E_%5E");

		AssertTextNotPresent(value1 = "The requested resource could not be found");

		Navigator.openWithAppendToBaseURL(urlAppend = "en/web/test-site-name/test-source-page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Source Page");

		PagesAdmin.addLocalizedFriendlyURL(
			friendlyUrlLocalizedList = "es-ES",
			localizedFriendlyUrlList = "/página-de-prueba",
			localizedNameList = "-");

		PagesAdmin.gotoFriendlyURLHistory();

		PortletEntry.changeLocale(
			friendlyUrlHistory = "true",
			localizedFriendlyUrl = "es-ES");

		PagesAdmin.viewActiveURL(activeUrl = "/página-de-prueba");

		PagesAdmin.viewOldFriendlyURL(oldFriendlyUrl = "/^_^");

		Navigator.openWithAppendToBaseURL(urlAppend = "es/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalUrl}/es/web/test-site-name/p%C3%A1gina-de-prueba");

		AssertTextNotPresent(value1 = "The requested resource could not be found");
	}

	@description = "This ensures that both the localized active URL and old friendlyURL can be viewed from the history."
	@priority = "5"
	test ViewLocalizedFriendlyURLs {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		PagesAdmin.addLocalizedFriendlyURL(
			friendlyUrlLocalizedList = "es-ES,es-ES",
			localizedFriendlyUrlList = "/pagina-de-prueba,/nueva-pagina-de-prueba",
			localizedNameList = "Pagina de prueba,-");

		PagesAdmin.gotoFriendlyURLHistory();

		PortletEntry.changeLocale(
			friendlyUrlHistory = "true",
			localizedFriendlyUrl = "es-ES");

		PagesAdmin.viewActiveURL(activeUrl = "/nueva-pagina-de-prueba");

		AssertElementNotPresent(
			key_activeUrl = "/pagina-de-prueba",
			locator1 = "PagesAdmin#FRIENDLY_URL_ACTIVE_URL");

		PagesAdmin.viewOldFriendlyURL(oldFriendlyUrl = "/pagina-de-prueba");

		AssertElementNotPresent(
			key_oldFriendlyUrl = "/nueva-pagina-de-prueba",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");
	}

	@description = "This ensures that the multiple old friendlyURLs can be viewed from the history. This test also covers the first old friendlyURL is the last one."
	@priority = "5"
	test ViewMultipleOldFriendlyURLs {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page1");

		PagesAdmin.gotoFriendlyURLHistory();

		PagesAdmin.viewActiveURL(activeUrl = "/new-test-page1");

		PagesAdmin.viewOldFriendlyURL(
			lastOldFriendlyUrl = "/test-page",
			oldFriendlyUrl = "/new-test-page");
	}

	@description = "This ensures that only the active URL can be viewed by default language from the history after localization without friendlyURL."
	@priority = "5"
	test ViewURLsAfterLocalizationWithoutFriendlyURL {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		PagesAdmin.openPagesAdmin(siteUrlKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyUrlEdit = "/new-test-page");

		PortletEntry.changeLocale(
			fieldName = "Friendly URL",
			locale = "es-ES");

		PortletEntry.inputName(name = "Pagina de prueba");

		Button.clickSave();

		PortletEntry.changeLocale(
			fieldName = "Friendly URL",
			locale = "es-ES");

		PagesAdmin.gotoFriendlyURLHistory();

		PagesAdmin.viewActiveURL(activeUrl = "/new-test-page");

		PagesAdmin.viewOldFriendlyURLNotPresent(oldFriendlyUrlList = "/test-page");
	}

}