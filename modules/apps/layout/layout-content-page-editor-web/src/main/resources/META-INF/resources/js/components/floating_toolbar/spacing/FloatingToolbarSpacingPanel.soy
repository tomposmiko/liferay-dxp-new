{namespace com.liferay.layout.content.page.editor.web.FloatingToolbarSpacingPanel}

/**
 * FloatingToolbarSpacingPanel
 */
{template .render}
	{@param item: ?}
	{@param? _containerTypes: ?}
	{@param? _handleColumnSpacingOptionChange: any}
	{@param? _handleColumnSpacingOptionMousedown: any}
	{@param? _handleContainerPaddingOptionChange: any}
	{@param? _handleContainerTypeOptionChange: any}
	{@param? _paddingSizes: list<string>}
	{@param? _sectionColumnsCount: number}
	{@param? _selectedPaddingSizes: [
		horizontal: string,
		vertical: string
	]}

	<div class="floating-toolbar-spacing-panel">
		<div class="form-group">
			{call .containerTypeOptions}
				{param containerTypes: $_containerTypes /}
				{param handleContainerTypeOptionChange: $_handleContainerTypeOptionChange /}
				{param item: $item /}
			{/call}
		</div>

		{if $_paddingSizes and $_selectedPaddingSizes}
			<div class="form-group-autofit">
				{let $verticalContainerPaddingLabel kind="text"}
					{msg desc=""}padding-vertical{/msg}
				{/let}

				{call .containerPaddingOptions}
					{param label: $verticalContainerPaddingLabel /}
					{param paddingDirectionId: 'Vertical' /}
					{param handleContainerPaddingOptionChange: $_handleContainerPaddingOptionChange /}
					{param paddingSizes: $_paddingSizes /}
					{param selectedPaddingSize: $_selectedPaddingSizes.vertical ?: '1' /}
				{/call}

				{let $horizontalContainerPaddingLabel kind="text"}
					{msg desc=""}padding-horizontal{/msg}
				{/let}

				{call .containerPaddingOptions}
					{param label: $horizontalContainerPaddingLabel /}
					{param paddingDirectionId: 'Horizontal' /}
					{param handleContainerPaddingOptionChange: $_handleContainerPaddingOptionChange /}
					{param paddingSizes: $_paddingSizes /}
					{param selectedPaddingSize: $_selectedPaddingSizes.horizontal ?: '1' /}
				{/call}
			</div>
		{/if}

		{if $_sectionColumnsCount > 1}
			<div class="form-group">
				{call .columnSpacingOptions}
					{param handleColumnSpacingOptionChange: $_handleColumnSpacingOptionChange /}
					{param handleColumnSpacingOptionMousedown: $_handleColumnSpacingOptionMousedown /}
					{param item: $item /}
				{/call}
			</div>
		{/if}
	</div>
{/template}

/**
 * Container padding options
 */
{template .containerPaddingOptions}
	{@param label: string}
	{@param paddingDirectionId: string}
	{@param paddingSizes: list<string>}
	{@param selectedPaddingSize: string}
	{@param? handleContainerPaddingOptionChange: any}

	<div class="form-group-item">
		<label for="floatingToolbarSpacingPanelPadding{$paddingDirectionId}Option">
			{$label}
		</label>

		<select
			class="form-control form-control-sm"
			data-onchange="{$handleContainerPaddingOptionChange}"
			data-padding-direction-id="{$paddingDirectionId}"
			id="floatingToolbarSpacingPanelPadding{$paddingDirectionId}Option"
		>
			{foreach $paddingSize in $paddingSizes}
				{call .containerPaddingOption}
					{param key: $paddingSize /}
					{param paddingSize: $paddingSize /}
					{param selectedPaddingSize: $selectedPaddingSize /}
				{/call}
			{/foreach}
		</select>
	</div>
{/template}

/**
 * Container padding option
 */
{template .containerPaddingOption}
	{@param paddingSize: string}
	{@param selectedPaddingSize: string}

	{let $optionAttributes kind="attributes"}
		value="{$paddingSize}"

		{if $paddingSize == $selectedPaddingSize}
			selected
		{/if}
	{/let}

	<option {$optionAttributes}>
		x{$paddingSize}
	</option>
{/template}

/**
 * Column spacing options
 */
{template .columnSpacingOptions}
	{@param item: [
		config: [
			columnSpacing: bool
		]
	]}
	{@param? handleColumnSpacingOptionChange: any}
	{@param? handleColumnSpacingOptionMousedown: any}

	{let $spacingCheckboxLabel kind="text"}
		{msg desc=""}space-between-columns{/msg}
	{/let}

	{call ClayCheckbox.render}
		{param checked: ($item.config and $item.config.columnSpacing) ?: true /}
		{param events: [
			'change': $handleColumnSpacingOptionChange,
			'mousedown': $handleColumnSpacingOptionMousedown
		] /}
		{param label: $spacingCheckboxLabel /}
	{/call}
{/template}

/**
 * Container type options
 */
{template .containerTypeOptions}
	{@param item: [
		config: [
			containerType: string
		]
	]}
	{@param? containerTypes: list<[
		containerTypeId: string,
		label: string
	]>}
	{@param? handleContainerTypeOptionChange: any}

	{if $containerTypes}
		<label for="floatingToolbarSpacingPanelContainerTypeOption">
			{msg desc=""}container{/msg}
		</label>

		<select
			class="form-control form-control-sm"
			data-onchange="{$handleContainerTypeOptionChange}"
			id="floatingToolbarSpacingPanelContainerTypeOption"
		>
			{foreach $containerType in $containerTypes}
				{call .containerTypeOption}
					{param containerType: $containerType /}
					{param item: $item /}
					{param key: $containerType.containerTypeId /}
				{/call}
			{/foreach}
		</select>
	{/if}
{/template}

/**
 * Container type option
 */
{template .containerTypeOption}
	{@param containerType: [
		containerTypeId: string,
		label: string
	]}
	{@param item: [
		config: [
			containerType: string
		]
	]}

	{let $optionAttributes kind="attributes"}
		value="{$containerType.containerTypeId}"

		{if $item.config and $item.config.containerType == $containerType.containerTypeId}
			selected
		{/if}
	{/let}

	<option {$optionAttributes}>
		{$containerType.label}
	</option>
{/template}