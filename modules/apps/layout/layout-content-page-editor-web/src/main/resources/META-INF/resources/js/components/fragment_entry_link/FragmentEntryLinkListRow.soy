{namespace com.liferay.layout.content.page.editor.web.FragmentEntryLinkListRow}

/**
 * FragmentEntryLinkListRow
 */
{template .render}
	{@param columns: list<[
		columnId: string,
		fragmentEntryLinkIds: list<string>,
		size: string
	]>}
	{@param defaultEditorConfigurations: ?}
	{@param fragmentEntryLinks: ?}
	{@param key: string}
	{@param row: ?}
	{@param rowId: string}
	{@param? _backgroundImageValue: string}
	{@param? _columnResizerVisible: bool}
	{@param? _fragmentsEditorRowTypes: ?}
	{@param? _handleResizerMouseDown: any}
	{@param? _handleRowKeyUp: any}
	{@param? _handleRowRemoveButtonClick: any}
	{@param? _highlighted: bool}
	{@param? _resizeColumnIndex: number}
	{@param? _resizeHighlightedColumn: number}
	{@param? _resizing: bool}
	{@param? activeItemId: string}
	{@param? activeItemType: string}
	{@param? defaultSegmentsExperienceId: string}
	{@param? dropTargetItemTypes: ?}
	{@param? empty: bool}
	{@param? dropTargetBorder: string}
	{@param? dropTargetItemId: string}
	{@param? dropTargetItemType: string}
	{@param? hoveredItemId: string}
	{@param? hoveredItemType: string}
	{@param? mappingFieldsURL: string}
	{@param? selectedMappingTypes: [
		subtype: [
			id: string,
			label: string
		],
		type: [
			id: string,
			label: string
		]
	]}
	{@param? spritemap: string}
	{@param? store: ?}

	{let $rowClasses kind="text"}
		{sp}fragments-editor__drag-source
		{sp}fragments-editor__drag-source--layout
		{sp}fragments-editor__drop-target
		{sp}fragments-editor__drop-target--fragment
		{sp}fragments-editor__drop-target--layout
		{sp}fragments-editor__drop-target--sidebar-fragment
		{sp}fragments-editor__drop-target--sidebar-layout
		{sp}fragments-editor__drop-target--sidebar-section
		{sp}fragments-editor__drop-target--sidebar-widget
		{sp}fragments-editor__topper-wrapper
		{sp}fragment-entry-link-list__container

		{if $_resizing}
			{sp}fragment-entry-link-list__container--resizing
		{/if}

		{if $empty}
			{sp}fragment-entry-link-list__container--empty
		{/if}

		{if $dropTargetItemId == $rowId and $dropTargetItemType == $dropTargetItemTypes.row}
			{sp}{$dropTargetBorder}
		{/if}

		{if $_highlighted}
			{sp}fragments-editor__topper-wrapper--highlighted
		{/if}

		{if not $_resizing and $activeItemId == $rowId and $activeItemType == $dropTargetItemTypes.row}
			{sp}fragment-entry-link-list__row-section--active

			{if $row.type == $_fragmentsEditorRowTypes.componentRow}
				{sp}fragments-editor__topper-wrapper--active
			{/if}
		{/if}

		{if not $_resizing and $hoveredItemId == $rowId and $hoveredItemType == $dropTargetItemTypes.row}
			{sp}fragment-entry-link-list__container--hovered

			{if $row.type == $_fragmentsEditorRowTypes.componentRow}
				{sp}fragments-editor__topper-wrapper--hovered
			{/if}
		{/if}

		{if $row and $row.config and $row.config.backgroundColorCssClass}
			{sp}bg-{$row.config.backgroundColorCssClass}
		{/if}
	{/let}

	{let $rowStyle kind="text"}
		{if $_backgroundImageValue}
			background-image: url({$_backgroundImageValue});
			background-position: 50% 50%;
			background-repeat: no-repeat;
			background-size: cover;
		{/if}
	{/let}

	<section
		class="{$rowClasses}"
		data-drag-source-label="{msg desc=""}section{/msg}"
		data-fragments-editor-item-id="{$rowId}"
		data-fragments-editor-item-type="fragments-editor-row"
		data-layout-row-id="{$rowId}"
		data-onkeyup="{$_handleRowKeyUp}"
		key="{$key}"
		style="{$rowStyle}"
		tabindex="0"
	>
		<nav class="fragments-editor__topper tbar">
			<ul class="tbar-nav">
				<li class="fragments-editor__drag-handler fragments-editor__topper__item pr-0 tbar-item">
					<div>
						<svg class="fragments-editor__topper__drag-icon lexicon-icon">
							<use xlink:href="{$spritemap ?: ''}#drag"></use>
						</svg>
					</div>
				</li>
				<li class="fragments-editor__drag-handler fragments-editor__topper__item fragments-editor__topper__title tbar-item tbar-item-expand">
					{msg desc=""}section{/msg}
				</li>
				<li class="fragments-editor__topper__item tbar-item">
					<button
						class="btn btn-small btn-unstyled"
						data-onclick="{$_handleRowRemoveButtonClick}"
					>
						<svg class="fragments-editor__topper__icon lexicon-icon">
							<use xlink:href="{$spritemap ?: ''}#times-circle"></use>
						</svg>
					</button>
				</li>
			</ul>
		</nav>

		{let $wrapperClasses kind="text"}
			{if $row and $row.config and $row.config.containerType == 'fluid'}
				{sp}container-fluid
			{else}
				{sp}container
			{/if}
			{if $row and $row.config and $row.config.paddingHorizontal and $row.config.paddingHorizontal != '3'}
				{sp}px-{$row.config.paddingHorizontal}
			{/if}

			{if $row and $row.config}
				{sp}py-{$row.config.paddingVertical ?: '3'}
			{else}
				{sp}py-3
			{/if}
		{/let}

		{let $wrapperRowClasses kind="text"}
			fragment-entry-link-list__row
			{sp}row

			{if ($row.config and ($row.config.columnSpacing == false)) or ($row.type == $_fragmentsEditorRowTypes.sectionRow)}
				{sp}no-gutters
			{/if}
		{/let}

		{if $_resizing}
			{call com.liferay.layout.content.page.editor.web.ColumnOverlayGrid.render}
				{param columnSpacing: ($row and $row.config and $row.config.columnSpacing) ?: true /}
				{param containerType: ($row and $row.config and $row.config.containerType) ?: 'fixed' /}
				{param padding: ($row and $row.config and $row.config.paddingHorizontal) ?: '3' /}
				{param highlightedColumn: $_resizeHighlightedColumn /}
				{param ref: 'columnOverlayGrid' /}
			{/call}
		{/if}

		<div class="{$wrapperClasses}">
			<div class="{$wrapperRowClasses}">
				{foreach $column in $columns}
					{call .column}
						{param _columnResizerVisible: $_columnResizerVisible /}
						{param _handleResizerMouseDown: $_handleResizerMouseDown /}
						{param _resizeColumnIndex: $_resizeColumnIndex /}
						{param activeItemId: $activeItemId /}
						{param activeItemType: $activeItemType /}
						{param columnId: $column.columnId /}
						{param columnIndex: index($column) /}
						{param defaultEditorConfigurations: $defaultEditorConfigurations /}
						{param defaultSegmentsExperienceId: $defaultSegmentsExperienceId /}
						{param dropTargetItemTypes: $dropTargetItemTypes /}
						{param fragmentEntryLinkIds: $column.fragmentEntryLinkIds /}
						{param fragmentEntryLinks: $fragmentEntryLinks /}
						{param fragmentsEditorRowTypes: $_fragmentsEditorRowTypes /}
						{param dropTargetBorder: $dropTargetBorder /}
						{param dropTargetItemId: $dropTargetItemId /}
						{param dropTargetItemType: $dropTargetItemType /}
						{param hoveredItemId: $hoveredItemId /}
						{param hoveredItemType: $hoveredItemType /}
						{param key: $column.columnId /}
						{param lastColumn: isLast($column) /}
						{param mappingFieldsURL: $mappingFieldsURL /}
						{param rowType: $row.type /}
						{param selectedMappingTypes: $selectedMappingTypes /}
						{param size: $column.size /}
						{param store: $store /}
					{/call}
				{/foreach}
			</div>
		</div>
	</section>
{/template}

/**
 * Column
 */
{template .column}
	{@param columnId: string}
	{@param columnIndex: number}
	{@param defaultEditorConfigurations: ?}
	{@param fragmentEntryLinkIds: list<string>}
	{@param fragmentEntryLinks: ?}
	{@param fragmentsEditorRowTypes: ?}
	{@param key: string}
	{@param? _columnResizerVisible: bool}
	{@param? _handleResizerMouseDown: any}
	{@param? _resizeColumnIndex: number}
	{@param? defaultSegmentsExperienceId: string}
	{@param? dropTargetItemTypes: ?}
	{@param? dropTargetBorder: string}
	{@param? dropTargetItemId: string}
	{@param? dropTargetItemType: string}
	{@param? activeItemId: string}
	{@param? activeItemType: string}
	{@param? hoveredItemId: string}
	{@param? hoveredItemType: string}
	{@param? lastColumn: bool}
	{@param? mappingFieldsURL: string}
	{@param? rowType: string}
	{@param? selectedMappingTypes: [
		subtype: [
			id: string,
			label: string
		],
		type: [
			id: string,
			label: string
		]
	]}
	{@param? size: string}
	{@param? store: ?}

	{let $columnClasses kind="text"}
		{sp}fragments-editor__drop-target
		{sp}fragment-entry-link-list__col

		{if $rowType == $fragmentsEditorRowTypes.componentRow}
			{sp}fragments-editor__drop-target--fragment
			{sp}fragments-editor__drop-target--sidebar-fragment
			{sp}fragments-editor__drop-target--sidebar-widget
		{/if}

		{if $dropTargetItemId == $columnId and $dropTargetItemType == $dropTargetItemTypes.column}
			{sp}{$dropTargetBorder}
		{/if}

		{if $size}
			{sp}col-md-{$size}
		{/if}
	{/let}

	{let $columnAttributes kind="attributes"}
		class="{$columnClasses}"
		data-column-id="{$columnId}"
		key="{$key}"

		{if $columnIndex == $_resizeColumnIndex}
			ref="resizeColumn"
		{elseif $columnIndex == ($_resizeColumnIndex + 1)}
			ref="resizeNextColumn"
		{/if}
	{/let}

	<div {$columnAttributes}>
		{foreach $fragmentEntryLinkId in $fragmentEntryLinkIds}
			{let $fragmentEntryLink: $fragmentEntryLinks[$fragmentEntryLinkId] /}

			{if $fragmentEntryLink}
				{call .fragmentEntryLink}
					{param activeItemId: $activeItemId /}
					{param activeItemType: $activeItemType /}
					{param content: $fragmentEntryLink.content /}
					{param defaultEditorConfigurations: $defaultEditorConfigurations /}
					{param defaultSegmentsExperienceId: $defaultSegmentsExperienceId /}
					{param dropTargetItemTypes: $dropTargetItemTypes /}
					{param editableValues: $fragmentEntryLink.editableValues /}
					{param error: $fragmentEntryLink.error /}
					{param fragmentEntryLinkId: $fragmentEntryLink.fragmentEntryLinkId /}
					{param dropTargetBorder: $dropTargetBorder /}
					{param dropTargetItemId: $dropTargetItemId /}
					{param dropTargetItemType: $dropTargetItemType /}
					{param hoveredItemId: $hoveredItemId /}
					{param hoveredItemType: $hoveredItemType /}
					{param key: $fragmentEntryLink.fragmentEntryLinkId /}
					{param mappingFieldsURL: $mappingFieldsURL /}
					{param name: $fragmentEntryLink.name /}
					{param rowType: $rowType /}
					{param selectedMappingTypes: $selectedMappingTypes /}
					{param store: $store /}
				{/call}
			{/if}
		{/foreach}

		{if not $lastColumn}
			{call .resizer}
				{param columnId: $columnId /}
				{param _handleResizerMouseDown: $_handleResizerMouseDown /}
				{param visible: $_columnResizerVisible /}
			{/call}
		{/if}
	</div>
{/template}

/**
 * FragmentEntryLink
 */
{template .fragmentEntryLink}
	{@param defaultEditorConfigurations: ?}
	{@param? defaultSegmentsExperienceId: string}
	{@param editableValues: ?}
	{@param fragmentEntryLinkId: string}
	{@param key: string}
	{@param mappingFieldsURL: ?}
	{@param name: string}
	{@param selectedMappingTypes: ?}
	{@param store: ?}
	{@param? content: ?}
	{@param? error: bool}
	{@param? rowType: ?}

	{call com.liferay.layout.content.page.editor.web.FragmentEntryLink.render}
		{param content: $content /}
		{param defaultEditorConfigurations: $defaultEditorConfigurations /}
		{param defaultSegmentsExperienceId: $defaultSegmentsExperienceId /}
		{param editableValues: $editableValues /}
		{param error: $error /}
		{param fragmentEntryLinkId: $fragmentEntryLinkId /}
		{param key: $key /}
		{param name: $name /}
		{param ref: $key /}
		{param rowType: $rowType /}
		{param showMapping: $selectedMappingTypes and $mappingFieldsURL ? true : false /}
		{param store: $store /}
	{/call}
{/template}

/**
 * Resizer
 */
{template .resizer}
	{@param columnId: string}
	{@param? _handleResizerMouseDown: any}
	{@param? visible: bool}

	{let $resizerClasses kind="text"}
		btn
		{sp}btn-primary
		{sp}fragment-entry-link-list__col-resizer

		{if not $visible}
			{sp}hide
		{/if}
	{/let}

	<button
		class="{$resizerClasses}"
		data-column-id="{$columnId}"
		data-onmousedown="{$_handleResizerMouseDown}"
		type="button"
	></button>
{/template}