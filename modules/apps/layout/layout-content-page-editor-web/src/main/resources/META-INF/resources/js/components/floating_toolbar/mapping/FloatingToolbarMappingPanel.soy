{namespace com.liferay.layout.content.page.editor.web.FloatingToolbarMappingPanel}

/**
 * FloatingToolbarMappingPanel
 */
{template .render}
	{@param item: [
		editableValues: [
			encodedId: string,
			fieldId: string,
			mappedField: string,
			title: string
		]
	]}
	{@param? _fields: ?}
	{@param? _handleAssetBrowserLinkClick: any}
	{@param? _handleAssetEntryLinkClick: any}
	{@param? _handleCreateContentClick: any}
	{@param? _handleFieldOptionChange: any}
	{@param? _handleSourceTypeChange: any}
	{@param? _selectedAssetEntry: [
		title: string
	]}
	{@param? _selectedSourceTypeId: string}
	{@param? _sourceTypeIds: [
		content: string,
		structure: string
	]}
	{@param? _sourceTypes: list<[
		id: string,
		label: string
	]>}
	{@param? assetBrowserLinks: list<[
		href: string,
		typeName: string
	]>}
	{@param? contentCreationEnabled: bool}
	{@param? mappedAssetEntries: list<[
		encodedId: string,
		classNameId: string,
		classPK: string,
		title: string
	]>}
	{@param? mappingFieldsURL: string}
	{@param? selectedItems: list<[
		itemId: string,
		itemType: string
	]>}
	{@param? store: ?}

	<div class="popover p-3">
		<div
			class="floating-toolbar-mapping-panel"
			ref="panel"
			tabindex="-1"
		>
			{if $selectedItems and length($selectedItems) == 1}
				{if $mappingFieldsURL}
					<div class="form-group">
						{call .sourceTypeSelect}
							{param handleSourceTypeChange: $_handleSourceTypeChange /}
							{param sourceTypes: $_sourceTypes /}
							{param selectedSourceTypeId: $_selectedSourceTypeId /}
						{/call}
					</div>
				{/if}

				{if not $mappingFieldsURL or $_selectedSourceTypeId == $_sourceTypeIds.content}
					<div class="floating-toolbar-mapping-panel__asset-select form-group">
						{call com.liferay.layout.content.page.editor.web.AssetSelector.render}
							{param assetBrowserLinks: $assetBrowserLinks /}
							{param fieldId kind="text"}floatingToolbarMappingPanelAssetSelect{/param}
							{param fieldName kind="text"}{msg desc=""}content{/msg}{/param}
							{param handleAssetBrowserLinkClick: $_handleAssetBrowserLinkClick /}
							{param handleAssetEntryLinkClick: $_handleAssetEntryLinkClick /}
							{param recentlyUsedAssetEntries: $mappedAssetEntries /}
							{param selectedAssetEntryTitle: $item.editableValues.title ?: $_selectedAssetEntry.title /}
							{param store: $store /}
						{/call}
					</div>
				{/if}

				<div class="form-group">
					{call .fieldSelect}
						{param fields: $_fields /}
						{param handleFieldOptionChange: $_handleFieldOptionChange /}
						{param mappedFieldId: $item.editableValues.mappedField or $item.editableValues.fieldId /}
					{/call}
				</div>
			{/if}

			{if $contentCreationEnabled}
				<div class="form-group">
					<button
						class="btn btn-block btn-secondary btn-sm"
						data-onclick="{$_handleCreateContentClick}"

						{if $item.editableValues.mappedField or $item.editableValues.fieldId}
						disabled
						{/if}
					>
						{msg desc=""}create-new-content{/msg}

						{if $selectedItems}
							<span class="badge badge-primary ml-2">{length($selectedItems)}</span>
						{/if}
					</button>
				</div>
			{/if}
		</div>
	</div>
{/template}

/**
 * Field select
 */
{template .fieldSelect}
	{@param? fields: ?}
	{@param? handleFieldOptionChange: any}
	{@param? mappedFieldId: ?}

	{let $fieldsDisabled kind="attributes"}
		{if $fields.length < 1}
			disabled
		{/if}
	{/let}

	<label for="floatingToolbarMappingPanelFieldSelect">
		{msg desc=""}field{/msg}
	</label>

	<select
		class="form-control form-control-sm"
		data-onchange="{$handleFieldOptionChange}"
		id="floatingToolbarMappingPanelFieldSelect"
		{$fieldsDisabled}
	>
		{let $unmappedLabel kind="text"}
			-- {msg desc=""}unmapped{/msg} --
		{/let}

		{call .selectOption}
			{param optionId: '' /}
			{param optionLabel: $unmappedLabel /}
			{param selectedId: $mappedFieldId ?: '' /}
		{/call}

		{foreach $field in $fields}
			{call .selectOption}
				{param optionId: $field.key /}
				{param optionLabel: $field.label /}
				{param key: $field.key /}
				{param selectedId: $mappedFieldId /}
			{/call}
		{/foreach}
	</select>
{/template}

/**
 * Select option
 */
{template .selectOption}
	{@param optionId: string}
	{@param optionLabel: string}
	{@param? selectedId: string}

	{let $optionAttributes kind="attributes"}
		value="{$optionId}"

		{if $optionId == $selectedId}
			selected
		{/if}
	{/let}

	<option {$optionAttributes}>
		{$optionLabel}
	</option>
{/template}

/**
 * Source select
 */
{template .sourceTypeSelect}
	{@param? handleSourceTypeChange: any}
	{@param? sourceTypes: ?}
	{@param? selectedSourceTypeId: string}

	<label for="floatingToolbarMappingPanelSourceTypeSelect">
		{msg desc=""}source{/msg}
	</label>

	<select
		class="form-control form-control-sm"
		data-onchange="{$handleSourceTypeChange}"
		id="floatingToolbarMappingPanelSourceTypeSelect"
	>
		{foreach $sourceType in $sourceTypes}
			{call .selectOption}
				{param optionId: $sourceType.id /}
				{param optionLabel: $sourceType.label /}
				{param key: $sourceType.id /}
				{param selectedId: $selectedSourceTypeId /}
			{/call}
		{/foreach}
	</select>
{/template}