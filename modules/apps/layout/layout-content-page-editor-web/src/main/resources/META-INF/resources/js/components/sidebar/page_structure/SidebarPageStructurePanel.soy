{namespace com.liferay.layout.content.page.editor.web.SidebarPageStructurePanel}

/**
 * SidebarPageStructurePanel
 */
{template .render}
	{@param? _expandedNodes: ?}
	{@param? _handleElementRemoveButtonClick: any}
	{@param? _handleElementClick: any}
	{@param? activeItemId: string}
	{@param? hoveredItemId: string}
	{@param? layoutData: ?}
	{@param? structure: [
		active: bool,
		children: list<?>,
		elementId: string,
		elementType: string,
		expanded: bool,
		hovered: bool,
		key: string,
		label: string,
		parentId: string,
		removable: bool,
		selected: bool
	]}
	{@param? spritemap: string}

	<div
		class="fragments-editor-sidebar-section__structure-panel"
		data-active-item-id="{$activeItemId}"
		data-expanded-nodes="{$_expandedNodes}"
		data-hovered-item-id="{$hoveredItemId}"
		data-layout-data="{$layoutData}"
	>
		{call com.liferay.layout.content.page.editor.web.FragmentsEditorSidebarContent.sidebarHeader}
			{param content kind="html"}
				{msg desc=""}page-structure{/msg}
			{/param}
		{/call}

		<nav class="pb-3 pl-3 pr-3">
			<div class="collapse show">
				{if $spritemap and $structure}
					{call .treeNode}
						{param handleElementRemoveButtonClick: $_handleElementRemoveButtonClick /}
						{param handleElementClick: $_handleElementClick /}
						{param node: $structure /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}
			</div>
		</nav>
	</div>
{/template}

/**
 * Tree root
 */
{template .treeNode}
	{@param? handleElementClick: any}
	{@param? handleElementRemoveButtonClick: any}
	{@param node: [
		active: bool,
		children: list<?>,
		elementId: string,
		elementType: string,
		expanded: bool,
		hovered: bool,
		key: string,
		label: string,
		parentId: string,
		removable: bool,
		selected: bool
	]}
	{@param spritemap: string}

	<ul class="nav nav-stacked" key="{$node.key}">
		<li class="nav-item">
			{let $itemClasses kind="text"}
				d-flex
				{sp}fragments-editor-sidebar-section__structure-panel__item

				{if $node.active or $node.selected}
					{sp}active
				{/if}

				{if $node.hovered}
					{sp}hovered
				{/if}
			{/let}

			{let $itemAttributes kind="attributes"}
				class="{$itemClasses}"
				data-onclick="{$handleElementClick}"

				{if $node.elementId and $node.elementType}
					data-element-id="{$node.elementId}"
					data-element-type="{$node.elementType}"
					data-fragments-editor-item-id="{$node.elementId}"
					data-fragments-editor-item-type="{$node.elementType}"
				{/if}

				{if $node.parentId}
					data-fragment-entry-link-id="{$node.parentId}"
				{/if}

				{if $node.children and length($node.children) > 0}
					aria-controls="{$node.key}"
					data-node-key="{$node.key}"
				{/if}

				{if $node.expanded}
					aria-expanded="true"
				{else}
					aria-expanded="false"
				{/if}
			{/let}

			<div {$itemAttributes}>
				{if $node.children and length($node.children) > 0}
					{call .collapseButton}
						{param node: $node /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}

				{call .itemName}
					{param node: $node /}
				{/call}

				{if $node.removable}
					{call .removeButton}
						{param handleClick: $handleElementRemoveButtonClick /}
						{param node: $node /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}
			</div>

			{if $node.children and (length($node.children) > 0)}
				{let $childrenClasses kind="text"}
					collapse
					{sp}pl-3

					{if $node.expanded}
						{sp}show
					{/if}
				{/let}

				<div class="{$childrenClasses}">
					{foreach $nodeChild in $node.children}
						{call .treeNode}
							{param handleElementRemoveButtonClick: $handleElementRemoveButtonClick /}
							{param handleElementClick: $handleElementClick /}
							{param key: $nodeChild.key /}
							{param node: $nodeChild /}
							{param spritemap: $spritemap /}
						{/call}
					{/foreach}
				</div>
			{/if}
		</li>
	</ul>
{/template}

/**
 * Collapse Icon
 */
{template .collapseButton}
	{@param node: [
		expanded: bool
	]}
	{@param? spritemap: string}

	<button class="btn btn-monospaced btn-sm">
		{let $angleDirection kind="text"}
			{if $node.expanded}
				down
			{else}
				right
			{/if}
		{/let}

		<svg class="lexicon-icon lexicon-icon-angle-{$angleDirection}">
			<use xlink:href="{$spritemap ?: ''}#angle-{$angleDirection}"></use>
		</svg>
	</button>
{/template}

{template .itemName}
	{@param node: [
		children: list<?>,
		elementId: string,
		elementType: string,
		expanded: bool,
		key: string,
		label: string,
		parentId: string
	]}

	{let $itemNameClasses kind="text"}
		page-structure__title
		{sp}text-truncate

		{if not ($node.children and length($node.children) > 0)}
			{sp}page-structure__title--padded
		{/if}
	{/let}

	<div class="{$itemNameClasses}">
		{$node.label}
	</div>
{/template}

/**
 * Remove icon
 */
{template .removeButton}
	{@param handleClick: any}
	{@param node: [
		elementId: string,
		elementType: string,
		key: string
	]}
	{@param spritemap: string}

	{let $removeButtonClasses kind="text"}
		btn
		{sp}btn-monospaced
		{sp}btn-sm
		{sp}fragments-editor-sidebar-section__structure-panel__item-remove-btn
	{/let}

	<button
		class="{$removeButtonClasses}"
		data-onclick="{$handleClick}"
		data-element-id="{$node.elementId}"
		data-element-type="{$node.elementType}"
		data-node-key="{$node.key}"
		type="button"
	>
		<svg class="lexicon-icon lexicon-icon-times-circle">
			<use xlink:href="{$spritemap ?: ''}#times-circle"></use>
		</svg>
	</button>
{/template}