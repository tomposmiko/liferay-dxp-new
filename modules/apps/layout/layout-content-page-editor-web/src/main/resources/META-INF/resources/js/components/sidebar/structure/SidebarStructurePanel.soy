{namespace com.liferay.layout.content.page.editor.web.SidebarStructurePanel}

/**
 * SidebarStructurePanel
 */
{template .render}
	{@param? _handleElementClick: any}
	{@param? _handleElementRemoveButtonClick: any}
	{@param? activeItemId: ?}
	{@param? activeItemType: ?}
	{@param? fragmentEntryLinks: ?}
	{@param? itemTypes: ?}
	{@param? layoutData: ?}
	{@param? spritemap: string}

	<div class="fragments-editor-sidebar-section__structure-panel">
		{if $fragmentEntryLinks and $layoutData and $layoutData.structure}
			<nav class="menubar menubar-transparent menubar-vertical-expand-lg">
				<div class="collapse menubar-collapse">
					<ul class="nav nav-nested">
						<li class="nav-item">
							{call .treeRoot}
								{param activeItemId: $activeItemId /}
								{param activeItemType: $activeItemType /}
								{param clickHandler: $_handleElementClick /}
								{param fragmentEntryLinks: $fragmentEntryLinks /}
								{param itemTypes: $itemTypes /}
								{param layoutData: $layoutData /}
								{param removeButtonClickHandler: $_handleElementRemoveButtonClick /}
								{param spritemap: $spritemap /}
							{/call}
						</li>
					</ul>
				</div>
			</nav>
		{/if}
	</div>
{/template}

/**
 * Tree root
 */
{template .treeRoot}
	{@param? activeItemId: ?}
	{@param? activeItemType: ?}
	{@param? clickHandler: ?}
	{@param? fragmentEntryLinks: ?}
	{@param? itemTypes: ?}
	{@param? layoutData: ?}
	{@param? removeButtonClickHandler: ?}
	{@param? spritemap: string}

	{let $rootName kind="text"}
		{msg desc=""}page{/msg}
	{/let}

	{call .treeElementButton}
		{param activeItemId: $activeItemId /}
		{param activeItemType: $activeItemType /}
		{param elementName: $rootName /}
		{param expanded: true /}
		{param hasChildren: true /}
		{param itemTypes: $itemTypes /}
		{param removeButtonClickHandler: $removeButtonClickHandler /}
		{param spritemap: $spritemap /}
		{param treeLevelId: 'sidebar-tree-root' /}
	{/call}

	<div
		class="collapse show"
		id="sidebar-tree-root"
	>
		<ul class="nav nav-stacked">
			<li class="nav-item">
				{foreach $row in $layoutData.structure}
					{let $treeRowLevelId kind="text"}
						sidebar-tree-row-{index($row)}
					{/let}

					{call .treeRow}
						{param activeItemId: $activeItemId /}
						{param activeItemType: $activeItemType /}
						{param clickHandler: $clickHandler /}
						{param fragmentEntryLinks: $fragmentEntryLinks /}
						{param itemTypes: $itemTypes /}
						{param row: $row /}
						{param rowIndex: index($row) /}
						{param removeButtonClickHandler: $removeButtonClickHandler /}
						{param spritemap: $spritemap /}
						{param treeRowLevelId: $treeRowLevelId /}
					{/call}
				{/foreach}
			</li>
		</ul>
	</div>
{/template}

/**
 * Tree row
 */
{template .treeRow}
	{@param? activeItemId: ?}
	{@param? activeItemType: ?}
	{@param? clickHandler: ?}
	{@param? fragmentEntryLinks: ?}
	{@param? itemTypes: ?}
	{@param? row: ?}
	{@param? rowIndex: ?}
	{@param? removeButtonClickHandler: ?}
	{@param? spritemap: string}
	{@param? treeRowLevelId: ?}

	{let $rowName kind="text"}
		{msg desc=""}section{/msg}
	{/let}

	{call .treeElementButton}
		{param activeItemId: $activeItemId /}
		{param activeItemType: $activeItemType /}
		{param clickHandler: $clickHandler /}
		{param elementId: $row.rowId /}
		{param elementName: $rowName /}
		{param elementType: $itemTypes.section /}
		{param hasChildren: true /}
		{param itemTypes: $itemTypes /}
		{param removeButtonClickHandler: $removeButtonClickHandler /}
		{param spritemap: $spritemap /}
		{param treeLevelId: $treeRowLevelId /}
	{/call}

	<div
		class="collapse"
		id="{$treeRowLevelId}"
	>
		<ul class="nav nav-stacked">
			<li class="nav-item">
				{foreach $column in $row.columns}
					{let $treeColLevelId kind="text"}
						sidebar-tree-col-{$rowIndex}-{index($column)}
					{/let}

					{call .treeCol}
						{param activeItemId: $activeItemId /}
						{param activeItemType: $activeItemType /}
						{param clickHandler: $clickHandler /}
						{param column: $column /}
						{param fragmentEntryLinks: $fragmentEntryLinks /}
						{param itemTypes: $itemTypes /}
						{param removeButtonClickHandler: $removeButtonClickHandler /}
						{param spritemap: $spritemap /}
						{param treeColLevelId: $treeColLevelId /}
					{/call}
				{/foreach}
			</li>
		</ul>
	</div>
{/template}

/**
 * Tree column
 */
{template .treeCol}
	{@param? activeItemId: ?}
	{@param? activeItemType: ?}
	{@param? clickHandler: ?}
	{@param? column: ?}
	{@param? fragmentEntryLinks: ?}
	{@param? itemTypes: ?}
	{@param? removeButtonClickHandler: ?}
	{@param? spritemap: string}
	{@param? treeColLevelId: ?}

	{let $columnName kind="text"}
		{msg desc=""}column{/msg}
	{/let}

	{call .treeElementButton}
		{param activeItemId: $activeItemId /}
		{param activeItemType: $activeItemType /}
		{param elementName: $columnName /}
		{param hasChildren: true /}
		{param itemTypes: $itemTypes /}
		{param removeButtonClickHandler: $removeButtonClickHandler /}
		{param spritemap: $spritemap /}
		{param treeLevelId: $treeColLevelId /}
	{/call}

	<div
		class="collapse"
		id="{$treeColLevelId}"
	>
		<ul class="nav nav-stacked">
			<li class="nav-item">
				{foreach $fragmentEntryLinkId in $column.fragmentEntryLinkIds}
					{let $fragmentEntryLink: $fragmentEntryLinks[$fragmentEntryLinkId] /}

					{if $fragmentEntryLink}
						{call .treeElementButton}
							{param activeItemId: $activeItemId /}
							{param activeItemType: $activeItemType /}
							{param clickHandler: $clickHandler /}
							{param elementId: $fragmentEntryLink.fragmentEntryLinkId /}
							{param elementName: $fragmentEntryLink.name /}
							{param elementType: $itemTypes.fragment /}
							{param hasChildren: false /}
							{param itemTypes: $itemTypes /}
							{param removeButtonClickHandler: $removeButtonClickHandler /}
							{param spritemap: $spritemap /}
						{/call}
					{/if}
				{/foreach}
			</li>
		</ul>
	</div>
{/template}

/**
 * Tree element button
 */
{template .treeElementButton}
	{@param? activeItemId: string}
	{@param? activeItemType: ?}
	{@param? clickHandler: ?}
	{@param? elementId: ?}
	{@param? elementName: ?}
	{@param? elementType: ?}
	{@param? expanded: bool}
	{@param? hasChildren: ?}
	{@param? itemTypes: ?}
	{@param? removeButtonClickHandler: ?}
	{@param? spritemap: string}
	{@param? treeLevelId: ?}

	{let $elementClasses kind="text"}
		fragments-editor-sidebar-section__structure-panel__item

		{if $elementId and ($activeItemId == $elementId) and ($activeItemType == $elementType)}
			{sp}active
		{/if}
	{/let}

	<div class="{$elementClasses}">
		<div
			class="fragments-editor-sidebar-section__structure-panel__item-name text-truncate"
			data-onclick="{$clickHandler}"
			data-element-id="{$elementId}"
			data-element-type="{$elementType}"
		>
			{$elementName}
		</div>

		{if $hasChildren}
			{call .collapseIcon}
				{param expanded: $expanded /}
				{param icon: 'open' /}
				{param spritemap: $spritemap /}
				{param treeLevelId: $treeLevelId /}
			{/call}

			{call .collapseIcon}
				{param expanded: $expanded /}
				{param icon: 'closed' /}
				{param spritemap: $spritemap /}
				{param treeLevelId: $treeLevelId /}
			{/call}
		{/if}

		{let $removeButtonClasses kind="text"}
			btn
			{sp}btn-unstyled
			{sp}btn-monospaced
			{sp}btn-sm
			{sp}fragments-editor-sidebar-section__structure-panel__item-remove-btn
		{/let}

		{if ($elementType == $itemTypes.section) or ($elementType == $itemTypes.fragment)}
			<button
				class="{$removeButtonClasses}"
				data-onclick="{$removeButtonClickHandler}"
				data-element-id="{$elementId}"
				data-element-type="{$elementType}"
				type="button"
			>
				<svg class="lexicon-icon lexicon-icon-times-circle">
					<use xlink:href="{$spritemap}#times-circle"></use>
				</svg>
			</button>
		{/if}
	</div>
{/template}

/**
 * Collapse Icon
 */
{template .collapseIcon}
	{@param icon: string}
	{@param? expanded: bool}
	{@param? spritemap: string}
	{@param? treeLevelId: string}

	{let $collapseIconWrapperClasses kind="text"}
		collapse-icon
		{sp}fragments-editor-sidebar-section__structure-panel__item-icon

		{if not $expanded}
			{sp}collapsed
		{/if}
	{/let}

	{let $collapseIconAttributes kind="attributes"}
		aria-controls="{$treeLevelId}"
		class="collapse-icon-{$icon}"
		data-toggle="collapse"
		href="#{$treeLevelId}"
		role="button"

		{if $expanded}
			aria-expanded="true"
		{else}
			aria-expanded="false"
		{/if}
	{/let}

	<span class="{$collapseIconWrapperClasses}">
		<a {$collapseIconAttributes}>
			{let $angleDirection kind="text"}
				{if $icon == 'closed'}
					right
				{else}
					down
				{/if}
			{/let}

			<svg class="lexicon-icon lexicon-icon-angle-{$angleDirection}">
				<use xlink:href="{$spritemap}#angle-{$angleDirection}"></use>
			</svg>
		</a>
	</span>
{/template}