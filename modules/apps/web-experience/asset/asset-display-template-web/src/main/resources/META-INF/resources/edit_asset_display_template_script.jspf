<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
DDMDisplay ddmDisplay = assetDisplayTemplateDisplayContext.getDDMDisplay();

DDMTemplate ddmTemplate = assetDisplayTemplateDisplayContext.getDDMTemplate();

String language = BeanParamUtil.getString(ddmTemplate, request, "language", ddmDisplay.getDefaultTemplateLanguage());
String script = BeanParamUtil.getString(ddmTemplate, request, "script");

String scriptContent = ParamUtil.getString(request, "scriptContent");

if (Validator.isNotNull(scriptContent)) {
	script = scriptContent;
}
%>

<aui:input name="scriptContent" type="hidden" value="<%= script %>" />

<liferay-ui:panel-container extended="<%= true %>" id="templateScriptContainer" markupView="lexicon" persistState="<%= true %>">
	<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="templateScriptSectionPanel" markupView="lexicon" persistState="<%= true %>" title="script">
		<aui:select changesContext="<%= true %>" helpMessage='<%= (ddmTemplate == null) ? StringPool.BLANK : "changing-the-language-does-not-automatically-translate-the-existing-template-script" %>' label="language" name="language">

			<%
			for (String templateLanguageType : ddmDisplay.getTemplateLanguageTypes()) {
				StringBundler sb = new StringBundler(6);

				sb.append(LanguageUtil.get(request, templateLanguageType + "[stands-for]"));
				sb.append(StringPool.SPACE);
				sb.append(StringPool.OPEN_PARENTHESIS);
				sb.append(StringPool.PERIOD);
				sb.append(templateLanguageType);
				sb.append(StringPool.CLOSE_PARENTHESIS);
			%>

				<aui:option label="<%= sb.toString() %>" selected="<%= language.equals(templateLanguageType) %>" value="<%= templateLanguageType %>" />

			<%
			}
			%>

		</aui:select>

		<div class="form-group lfr-template-editor-container">
			<c:if test="<%= assetDisplayTemplateDisplayContext.isAutocompleteEnabled(language) %>">
				<div class="lfr-template-palette-container pull-left" id="<portlet:namespace />templatePaletteContainer">
					<div class="search" id="<portlet:namespace />paletteSearchContainer">
						<input class="col-md-12 field form-control search-query" id="<portlet:namespace />paletteSearch" placeholder="<liferay-ui:message key="search" />" type="text" />
					</div>

					<div class="lfr-template-palette" id="<portlet:namespace />paletteDataContainer">
						<div id="<portlet:namespace />paletteData">

							<%
							long templateHandlerClassNameId = ddmDisplay.getTemplateHandlerClassNameId(ddmTemplate, assetDisplayTemplateDisplayContext.getDefaultClassNameId());

							Map<String, TemplateVariableGroup> templateVariableGroups = TemplateContextHelper.getTemplateVariableGroups(templateHandlerClassNameId, assetDisplayTemplateDisplayContext.getAssetDisplayTemplateId(), language, locale);

							TemplateHandler templateHandler = TemplateHandlerRegistryUtil.getTemplateHandler(templateHandlerClassNameId);

							Class<?> clazz = ddmDisplay.getClass();

							if (templateHandler != null) {
								clazz = templateHandler.getClass();
							}

							Bundle bundle = FrameworkUtil.getBundle(clazz);

							ResourceBundleLoader resourceBundleLoader = ResourceBundleLoaderUtil.getResourceBundleLoaderByBundleSymbolicName(bundle.getSymbolicName());

							ResourceBundle templateHandlerResourceBundle = resourceBundleLoader.loadResourceBundle(locale);

							for (TemplateVariableGroup templateVariableGroup : templateVariableGroups.values()) {
								if (templateVariableGroup.isEmpty()) {
									continue;
								}
							%>

								<liferay-ui:panel collapsible="<%= true %>" cssClass="palette-section" extended="<%= false %>" id="<%= templateVariableGroup.getLabel() %>" title="<%= LanguageUtil.get(request, templateHandlerResourceBundle, templateVariableGroup.getLabel()) %>">
									<ul class="palette-item-content">

										<%
										for (TemplateVariableDefinition templateVariableDefinition : templateVariableGroup.getTemplateVariableDefinitions()) {
										%>

											<li class="palette-item-container">
												<span class="palette-item" data-content="<%= HtmlUtil.escapeAttribute(_getDataContent(templateVariableDefinition, language)) %>" data-title="<%= HtmlUtil.escapeAttribute(_getPaletteItemTitle(request, templateHandlerResourceBundle, templateVariableDefinition)) %>">
													<%= HtmlUtil.escape(LanguageUtil.get(request, templateHandlerResourceBundle, templateVariableDefinition.getLabel())) %>

													<c:if test="<%= templateVariableDefinition.isCollection() || templateVariableDefinition.isRepeatable() %>">*</c:if>
												</span>
											</li>

										<%
										}
										%>

									</ul>
								</liferay-ui:panel>

							<%
							}
							%>

						</div>
					</div>
				</div>
			</c:if>

			<%
			String editorContainerClass = "lfr-editor-container";

			if (!assetDisplayTemplateDisplayContext.isAutocompleteEnabled(language)) {
				editorContainerClass += " lfr-editor-container-full";
			}
			%>

			<div class="<%= editorContainerClass %>" id="<portlet:namespace />editorContainer">
				<div class="lfr-rich-editor" id="<portlet:namespace />richEditor"></div>
			</div>
		</div>

		<aui:input inlineLabel="left" label="script-file" name="script" type="file" />
	</liferay-ui:panel>
</liferay-ui:panel-container>

<aui:script use="aui-ace-autocomplete-freemarker,aui-ace-autocomplete-plugin,aui-ace-autocomplete-velocity,aui-toggler,aui-tooltip,autocomplete-base,autocomplete-filters,event-mouseenter,event-outside,liferay-util-window,resize,transition">
	var ACPlugin = A.Plugin.AceAutoComplete;
	var AObject = A.Object;
	var Util = Liferay.Util;

	var STR_EMPTY = '';

	var STR_HEIGHT = 'height';

	var selectLanguageNode = A.one('#<portlet:namespace />language');

	var panelScriptContainer = A.one('#templateScriptContainer');

	if (Util.getTop() !== A.config.win) {
		var dialog = Util.getWindow();

		if (dialog && A.Lang.isFunction(dialog._detachUIHandlesAutohide)) {
			dialog._detachUIHandlesAutohide();

			if (dialog.iframe) {
				dialog.iframe.set('closeOnEscape', false);
			}
		}
	}

	var prevEditorContent;
	var richEditor;

	<c:if test="<%= assetDisplayTemplateDisplayContext.isAutocompleteEnabled(language) %>">
		var paletteContainer = panelScriptContainer.one('#<portlet:namespace />templatePaletteContainer');
		var paletteDataContainer = panelScriptContainer.one('#<portlet:namespace />paletteDataContainer');

		function createLiveSearch() {
			var PaletteSearch = A.Component.create(
				{
					AUGMENTS: [A.AutoCompleteBase],

					EXTENDS: A.Base,

					NAME: 'searchpalette',

					prototype: {
						initializer: function() {
							var instance = this;

							instance._bindUIACBase();
							instance._syncUIACBase();
						}
					}
				}
			);

			var getItems = function() {
				var results = [];

				paletteItems.each(
					function(item, index) {
						results.push(
							{
								data: item.text().trim(),
								node: item.ancestor()
							}
						);
					}
				);

				return results;
			};

			var getNoResultsNode = function() {
				if (!noResultsNode) {
					noResultsNode = A.Node.create('<div class="alert"><%= UnicodeLanguageUtil.get(request, "there-are-no-results") %></div>');
				}

				return noResultsNode;
			};

			var paletteItems = paletteDataContainer.all('.palette-item');
			var paletteSectionsNode = paletteDataContainer.all('.palette-section');

			var noResultsNode;

			var paletteSearch = new PaletteSearch(
				{
					inputNode: '#<portlet:namespace />paletteSearch',
					minQueryLength: 0,
					nodes: '.palette-item-container',
					resultFilters: 'phraseMatch',
					resultTextLocator: 'data',
					source: getItems()
				}
			);

			paletteSearch.on(
				'results',
				function(event) {
					paletteItems.each(
						function(item, index) {
							item.ancestor().addClass('hide');
						}
					);

					event.results.forEach(
						function(item, index) {
							item.raw.node.removeClass('hide');
						}
					);

					var foundVisibleSection;

					paletteSectionsNode.each(
						function(item, index) {
							var visibleItem = item.one('.palette-item-container:not(.hide)');

							if (visibleItem) {
								foundVisibleSection = true;
							}

							item.toggleClass('hide', !visibleItem);
						}
					);

					var noResultsNode = getNoResultsNode();

					if (foundVisibleSection) {
						noResultsNode.remove();
					}
					else {
						paletteDataContainer.appendChild(noResultsNode);
					}
				}
			);
		}

		function onPaletteItemChosen(event) {
			var editor = richEditor.getEditor();

			var item = event.currentTarget;

			var aceAutocomplete = richEditor['ace-autocomplete-plugin'];

			aceAutocomplete._lockEditor = true;

			var content = item.attr('data-content');

			var fragments = content.split('[$CURSOR$]');

			var cursorPos;
			var processed;

			AObject.each(
				fragments,
				function(item, index) {
					if (processed) {
						cursorPos = editor.getCursorPosition();
					}

					processed = true;

					editor.insert(item);
				}
			);

			if (cursorPos) {
				editor.moveCursorToPosition(cursorPos);
			}

			editor.focus();

			aceAutocomplete._lockEditor = false;
		}
	</c:if>

	function getEditorContent() {
		var content = richEditor.getSession().getValue();

		return content;
	}

	var paletteSearchContainer = panelScriptContainer.one('#<portlet:namespace />paletteSearchContainer');

	function resizeEditor(event) {
		var info = event.info;

		richEditor.set(STR_HEIGHT, info.offsetHeight);
		richEditor.set('width', info.offsetWidth);

		if (!Util.isPhone()) {
			paletteDataContainer.setStyle(STR_HEIGHT, info.offsetHeight - paletteSearchContainer.height());
		}
	}

	function setEditorContent(content) {
		richEditor.getSession().setValue(content);

		prevEditorContent = content;
	}

	function setEditorPlugins(event) {
		var AutoComplete = A.AceEditor.AutoCompleteFreemarker;

		if (AutoComplete) {
			var processor = new AutoComplete(
				{
					variables: <%= assetDisplayTemplateDisplayContext.getAutocompleteJSON(request, language) %>
				}
			);

			if (processor) {
				richEditor.unplug(ACPlugin);

				richEditor.plug(
					ACPlugin,
					{
						processor: processor,
						render: true,
						visible: false,
						zIndex: 10000
					}
				);
			}
			else {
				richEditor.unplug(ACPlugin);
			}
		}
	}

	<%
	String langType = ParamUtil.getString(request, "langType");
	%>

	var editorContentElement = A.one('#<portlet:namespace />scriptContent');

	var editorNode = A.one('#<portlet:namespace />richEditor');

	A.on(
		'domready',
		function(event) {
			richEditor = new A.AceEditor(
				{
					boundingBox: editorNode,
					height: 400,
					mode: '<%= EditorModeUtil.getEditorMode(langType) %>',
					width: '100%'
				}
			).render();

			new A.Resize(
				{
					handles: ['br'],
					node: editorNode,
					on: {
						resize: resizeEditor
					}
				}
			);

			if (editorContentElement) {
				setEditorContent(editorContentElement.val());
			}

			Liferay.on(
				'<portlet:namespace />saveTemplate',
				function(event) {
					editorContentElement.val(getEditorContent());
				}
			);

			selectLanguageNode.on(
				'change',
				function(event) {
					Liferay.fire('<portlet:namespace />refreshEditor');
				}
			);

			setEditorPlugins();

			<c:if test="<%= assetDisplayTemplateDisplayContext.isAutocompleteEnabled(language) %>">
				paletteContainer.delegate('click', onPaletteItemChosen, '.palette-item');

				new A.TogglerDelegate(
					{
						animated: true,
						container: paletteDataContainer,
						content: '.palette-item-content',
						header: '.palette-item-header'
					}
				);

				new A.TooltipDelegate(
					{
						align: {
							points: [A.WidgetPositionAlign.LC, A.WidgetPositionAlign.RC]
						},
						duration: 0.5,
						html: true,
						position: 'right',
						trigger: '#<portlet:namespace />templatePaletteContainer .palette-item',
						visible: false,
						zIndex: 6
					}
				);

				createLiveSearch();
			</c:if>
		},
		'#<portlet:namespace />richEditor'
	);

	Liferay.on(
		'<portlet:namespace />refreshEditor',
		function(event) {
			var form = A.one('#<portlet:namespace />fm');

			<portlet:renderURL var="refreshTemplateURL">
				<portlet:param name="mvcPath" value="/edit_asset_display_template.jsp" />
			</portlet:renderURL>

			form.attr('action', '<%= refreshTemplateURL %>');

			if (richEditor.getEditor().getSession().getUndoManager().hasUndo()) {
				Liferay.fire('<portlet:namespace />saveTemplate');
			}
			<c:if test="<%= ddmTemplate == null %>">
				else {
					editorContentElement.val(STR_EMPTY);
				}
			</c:if>

			submitForm(form, null, null, false);
		}
	);
</aui:script>

<%!
private String _getDataContent(TemplateVariableDefinition templateVariableDefinition, String language) {
	String dataContent = StringPool.BLANK;

	String dataType = templateVariableDefinition.getDataType();

	if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		dataContent = _getListCode(templateVariableDefinition.getName(), itemTemplateVariableDefinition.getName(), itemTemplateVariableDefinition.getAccessor());
	}
	else if (Validator.isNull(dataType)) {
		dataContent = _getVariableReferenceCode(templateVariableDefinition.getName(), templateVariableDefinition.getAccessor());
	}
	else if (dataType.equals("service-locator")) {
		Class<?> templateVariableDefinitionClass = templateVariableDefinition.getClazz();

		String variableName = templateVariableDefinitionClass.getSimpleName();

		StringBundler sb = new StringBundler(3);

		sb.append(_getVariableAssignmentCode(variableName, "serviceLocator.findService(\"" + templateVariableDefinition.getName() + "\")"));
		sb.append("[$CURSOR$]");
		sb.append(_getVariableReferenceCode(variableName, null));

		dataContent = sb.toString();
	}
	else {
		try {
			String[] generateCode = templateVariableDefinition.generateCode(language);

			dataContent = generateCode[0];
		}
		catch (Exception e) {
			_log.error(e, e);
		}
	}

	return dataContent;
}

private String _getListCode(String variableName, String itemName, String accessor) {
	StringBundler sb = new StringBundler(10);

	sb.append("<#if ");
	sb.append(variableName);
	sb.append("?has_content>\n\t<#list ");
	sb.append(variableName);
	sb.append(" as ");
	sb.append(itemName);
	sb.append(">\n\t\t");
	sb.append(_getVariableReferenceCode(itemName, accessor));
	sb.append("[$CURSOR$]");
	sb.append("\n\t</#list>\n</#if>");

	return sb.toString();
}

private String _getPaletteItemTitle(HttpServletRequest request, String label, Class<?> clazz) {
	StringBundler sb = new StringBundler(10);

	if (clazz == null) {
		return StringPool.BLANK;
	}

	String className = clazz.getName();

	sb.append("<br />");
	sb.append(LanguageUtil.get(request, label));
	sb.append(StringPool.COLON);
	sb.append("&nbsp;");

	String javadocURL = null;

	if (className.startsWith("com.liferay.portal.kernel")) {
		javadocURL = "http://docs.liferay.com/portal/7.0/javadocs/portal-kernel/";
	}

	if (Validator.isNotNull(javadocURL)) {
		sb.append("<a href=\"");
		sb.append(javadocURL);
		sb.append(StringUtil.replace(className, CharPool.PERIOD, CharPool.SLASH));
		sb.append(".html\" target=\"_blank\">");
	}

	sb.append(clazz.getSimpleName());

	if (Validator.isNull(javadocURL)) {
		sb.append("</a>");
	}

	return sb.toString();
}

private String _getPaletteItemTitle(HttpServletRequest request, ResourceBundle resourceBundle, TemplateVariableDefinition templateVariableDefinition) {
	StringBundler sb = new StringBundler(12);

	String help = templateVariableDefinition.getHelp();

	if (Validator.isNotNull(help)) {
		sb.append("<p>");
		sb.append(LanguageUtil.get(request, resourceBundle, help));
		sb.append("</p>");
	}

	if (templateVariableDefinition.isCollection()) {
		sb.append("<p><i>*");
		sb.append(LanguageUtil.get(request, "this-is-a-collection-of-fields"));
		sb.append("</i></p>");
	}
	else if (templateVariableDefinition.isRepeatable()) {
		sb.append("<p><i>*");
		sb.append(LanguageUtil.get(request, "this-is-a-repeatable-field"));
		sb.append("</i></p>");
	}

	if (!Objects.equals(templateVariableDefinition.getDataType(), "service-locator")) {
		sb.append(LanguageUtil.get(request, "variable"));
		sb.append(StringPool.COLON);
		sb.append("&nbsp;");
		sb.append(templateVariableDefinition.getName());
	}

	sb.append(_getPaletteItemTitle(request, "class", templateVariableDefinition.getClazz()));

	if (templateVariableDefinition.isCollection()) {
		TemplateVariableDefinition itemTemplateVariableDefinition = templateVariableDefinition.getItemTemplateVariableDefinition();

		sb.append(_getPaletteItemTitle(request, "items-class", itemTemplateVariableDefinition.getClazz()));
	}

	return sb.toString();
}

private String _getVariableAssignmentCode(String variableName, String variableValue) {
	return "<#assign " + variableName + " = " + variableValue + ">";
}

private String _getVariableReferenceCode(String variableName, String accessor) {
	String methodInvocation = StringPool.BLANK;

	if (Validator.isNotNull(accessor)) {
		methodInvocation = StringPool.PERIOD + accessor;
	}

	return "${" + variableName + methodInvocation + "}";
}
%>

<%!
private static Log _log = LogFactoryUtil.getLog("com_liferay_asset_display_template_web.edit_asset_display_template_script_jspf");
%>