definition {

	macro addFieldByDoubleClick {
		var key_fieldLabel = ${fieldType};
		var iterator = 0;
		var maxRetryNumber = 3;

		while ((IsElementNotPresent(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB")) && (${iterator} != ${maxRetryNumber})) {
			DoubleClick(locator1 = "FormViewBuilder#SIDEBAR_FIELD_LABEL");

			Pause(locator1 = 1000);

			if (${iterator} == ${maxRetryNumber}) {
				echo("Couldn't add the field by double-click action, maximum retries number reached: ${iterator}");
			}

			var iterator = ${iterator} + 1;
		}

		AssertElementPresent(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB");
	}

	macro addFieldByDoubleClickFromObjectSidebar {
		var key_fieldLabel = ${fieldLabel};

		DoubleClick(locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL");

		FormViewBuilder.validateFieldLabel(fieldLabel = ${fieldLabel});
	}

	macro addFieldByDragAndDrop {
		Pause(locator1 = 10000);

		var key_fieldLabel = ${fieldType};

		DragAndDrop.javaScriptDragAndDropToObject(
			locator1 = "FormViewBuilder#SIDEBAR_FIELD_LABEL",
			locator2 = "Form#ADD_FIELD_POSITION",
			value1 = ${fieldType});

		AssertElementPresent(locator1 = "FormViewBuilder#SIDEBAR_BASIC_TAB");
	}

	macro addFieldToObject {
		Click(locator1 = "FormViewBuilder#OBJECT_FIELD_PLUS");

		DoubleClick(
			key_fieldName = ${fieldName},
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		FormViewBuilder.validateFieldInObject(fieldLabel = ${fieldName});
	}

	macro addFormView {
		while ((IsElementNotPresent(locator1 = "AppBuilder#NAVBAR")) || (IsElementNotPresent(locator1 = "FormViewBuilder#SIDEBAR_FIELDS_TAB"))) {
			Pause(locator1 = 1000);
		}

		if (IsElementPresent(locator1 = "AppBuilder#NAVBAR")) {
			FormViewBuilder.switchToFormViewTab();

			AppBuilderAdmin.add();
		}

		FormViewBuilder.addFieldByDoubleClick(fieldType = ${fieldType});

		FormViewBuilder.setName(formViewName = ${formViewName});

		FormViewBuilder.save();
	}

	macro addFormViewAndValidateFieldLabel {
		FormViewBuilder.addFormView(
			fieldType = ${fieldType},
			formViewName = ${formViewName});

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${formViewName});

		AppBuilderAdmin.openItem(itemName = ${formViewName});

		FormViewBuilder.validateFieldLabel(fieldLabel = ${fieldType});

		AppBuilderAdmin.gotoBack();
	}

	macro addRule {
		Click(locator1 = "FormViewBuilder#RULE_ADD_BUTTON");
	}

	macro cancelButtonInDeleteFromObject {
		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_CANCEL_BUTTON");
	}

	macro cancelRule {
		Click(locator1 = "FormViewBuilder#RULE_BUILDER_CANCEL_BUTTON");
	}

	macro checkSwitcher {
		Check.checkToggleSwitch(
			key_switcherOption = ${propertyName},
			locator1 = "FormViewBuilder#SWITCHER_OPTION");
	}

	macro clickFieldLabel {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${fieldLabel});
	}

	macro closeSidebar {
		Click(locator1 = "FormViewBuilder#CLOSE_SIDEBAR");
	}

	macro confirmDeleteFromObject {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${key_fieldLabel});

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");

		Click(
			key_selectAction = ${selectAction},
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
	}

	macro createFirstRule {
		Click(locator1 = "FormViewBuilder#CREATE_NEW_RULE_BUTTON");
	}

	macro deleteButtonInDeleteFromObject {
		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
	}

	macro deleteDisabledFieldSetEntry {
		var key_RowNumber = ${rowNumber};

		Click(locator1 = "FormViewBuilder#FIELD_SET_DISABLED_ELLIPSIS_ACTION");

		Click(
			key_selectAction = ${selectAction},
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");

		AssertElementNotPresent(locator1 = "FormViewBuilder#FIELD_SET_DISABLED_ELLIPSIS_ACTION");
	}

	macro deleteFieldSetEntry {
		var key_RowNumber = ${rowNumber};

		Click(locator1 = "FormViewBuilder#FIELD_SET_ELLIPSIS_ACTION");

		Click(
			key_selectAction = ${selectAction},
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");

		AssertElementNotPresent(locator1 = "FormViewBuilder#FIELD_SET_ELLIPSIS_ACTION");
	}

	macro deleteFromObjectViaX {
		MouseOver(
			key_fieldLabel = ${fieldName},
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL");

		Click(
			fieldName = ${fieldName},
			locator1 = "FormViewBuilder#DELETE_FROM_OBJECT_X_BUTTON");
	}

	macro deleteObjectSidebarField {
		FormViewBuilder.deleteFromObjectViaX(fieldName = ${fieldLabel});

		while (IsElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_OBJECT_MESSAGE")) {
			Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
		}

		while (IsElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_USED_OBJECT_MESSAGE")) {
			Click(locator1 = "FormViewBuilder#DELETE_OBJECT_LABEL_DELETE_BUTTON");
		}

		FormViewBuilder.validateNoFieldLabel();

		FormViewBuilder.validateNoObjectFieldName();
	}

	macro deselectSelectWithMultipleOptions {
		for (var selectOption : list ${selectOptionsList}) {
			FormViewBuilder.disableCheckbox(
				fieldName = ${fieldName},
				fieldValue = ${selectOption});
		}
	}

	macro disableCheckbox {
		var key_fieldName = ${fieldName};
		var key_fieldValue = ${fieldValue};

		if (IsChecked(locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY")) {
			Click(locator1 = "FormViewBuilder#CHECKBOX_LABEL");
		}

		FormViewBuilder.viewCheckboxNotChecked(
			fieldName = ${fieldName},
			fieldValue = ${fieldValue});
	}

	macro editDate {
		Type(
			key_fieldName = ${fieldName},
			locator1 = "FormViewBuilder#DATE_FIELD",
			value1 = ${fieldValue});
	}

	macro editFieldInObject {
		Click(
			key_fieldName = ${fieldName},
			locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_RESULT");

		FormViewBuilder.setFieldLabel(fieldLabel = ${fieldLabel});
	}

	macro editFieldLabel {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${fieldLabel});

		Type(
			locator1 = "FormViewBuilder#SIDEBAR_BASIC_LABEL",
			value1 = ${label});
	}

	macro editOptionsRow {
		var key_rowNumber = ${rowNumber};

		Type.typeNotVisibleNoMouseOver(
			locator1 = "FormViewBuilder#OPTIONS_OPTION_VALUE_FIELD",
			value1 = ${optionValue});

		AssertElementPresent(locator1 = "FormViewBuilder#OPTIONS_OPTION_NAME_FIELD");
	}

	macro editRuleName {
		Type(
			locator1 = "FormViewBuilder#RULE_BUILDER_NAME",
			value1 = ${ruleName});
	}

	macro editRules {
		Click(locator1 = "FormViewBuilder#EDIT_RULE_COLLAPSE");

		Click(locator1 = "FormViewBuilder#EDIT_RULE");
	}

	macro editRulesDefault {
		Click(locator1 = "FormViewBuilder#RULE_BUILDER_DEFAULT_EDIT");

		Click(locator1 = "FormViewBuilder#RULE_BUILDER_EDIT");
	}

	macro editText {
		Type(
			key_fieldName = ${fieldName},
			locator1 = "FormViewBuilder#TEXT_FIELD",
			value1 = ${fieldValue});
	}

	macro enableCheckbox {
		var key_fieldName = ${fieldName};
		var key_fieldValue = ${fieldValue};

		if (IsNotChecked.isNotCheckedNotVisible(locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY")) {
			Click(locator1 = "FormViewBuilder#CHECKBOX_LABEL");
		}

		FormViewBuilder.viewCheckboxChecked(
			fieldName = ${fieldName},
			fieldValue = ${fieldValue});
	}

	macro enableCheckboxPredefined {
		var key_fieldName = ${fieldName};

		if (IsNotChecked.isNotCheckedNotVisible(locator1 = "FormViewBuilder#CHECKBOX_PREDEFINED")) {
			Click(locator1 = "FormViewBuilder#CHECKBOX_PREDEFINED_LIST");
		}

		FormViewBuilder.viewCheckboxCheckedAtPredefinedValue(fieldName = ${fieldName});
	}

	macro fieldEllipsisAction {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${key_fieldLabel});

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");

		Click(
			key_selectAction = ${selectAction},
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

		AssertElementNotPresent(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${key_fieldLabel});
	}

	macro fieldEllipsisDelete {
		Click(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${key_fieldLabel});

		Click(locator1 = "FormViewBuilder#FIELD_ELLIPSIS");

		Click(
			key_selectAction = "Delete from Object",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
	}

	macro gotoFields {
		Click(locator1 = "FormViewBuilder#FIELDS_TAB");
	}

	macro goToFieldsetsTab {
		Click(locator1 = "FormViewBuilder#FIELD_SETS_TAB");
	}

	macro gotoRules {
		Click(locator1 = "FormViewBuilder#RULES_TAB");
	}

	macro openFormView {
		AppBuilderAdmin.openItem(itemName = ${formViewName});
	}

	macro openSidebar {
		Click(locator1 = "FormViewBuilder#OPEN_SIDEBAR");
	}

	macro ruleSave {
		Click(locator1 = "FormViewBuilder#RULE_BUILDER_SAVE_BUTTON");
	}

	macro save {
		AppBuilderAdmin.save();
	}

	macro searchObjectField {
		Click(locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_BUTTON");

		Type(
			locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_BOX",
			value1 = ${fieldValue});
	}

	macro selectRadioOption {
		Click.clickNoMouseOverNoWaitForVisible(
			key_fieldName = ${fieldName},
			key_radioOption = ${radioOption},
			locator1 = "FormViewBuilder#RADIO_OPTION_LABEL");
	}

	macro selectSelectOption {
		var key_fieldName = ${fieldName};
		var key_selectOption = ${selectOption};

		Click(
			locator1 = "FormViewBuilder#SELECT_FIELD",
			value1 = ${selectOption});

		Click(
			locator1 = "FormViewBuilder#SELECT_FIELD_OPTIONS_LIST",
			value1 = ${selectOption});
	}

	macro selectSelectOptionPredefined {
		var key_selectOption = ${selectOption};

		Click(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_SELECT_FROM_LIST",
			value1 = ${selectOption});

		Click(
			locator1 = "FormViewBuilder#SELECT_FIELD_OPTIONS_LIST",
			value1 = ${selectOption});
	}

	macro selectSelectWithMultipleOptions {
		for (var selectOption : list ${selectOptionsList}) {
			FormViewBuilder.enableCheckbox(
				fieldName = ${fieldName},
				fieldValue = ${selectOption});
		}
	}

	macro selectSelectWithMultipleOptionsPredefined {
		var key_fieldName = ${fieldName};

		Click(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_SELECT_FROM_LIST");

		for (var selectOption : list ${selectOptionsList}) {
			FormViewBuilder.enableCheckboxPredefined(fieldName = ${selectOption});

			Pause(locator1 = 500);
		}
	}

	macro setFieldHelpText {
		var key_fieldType = "tip";

		Type(
			locator1 = "FormViewBuilder#FIELD_LABEL_AT_SIDEBAR",
			value1 = ${fieldLabel});

		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_VALUE",
			value1 = ${fieldLabel});
	}

	macro setFieldLabel {
		var key_fieldType = "label";

		Type(
			locator1 = "FormViewBuilder#FIELD_LABEL_AT_SIDEBAR",
			value1 = ${fieldLabel});

		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_VALUE",
			value1 = ${fieldLabel});
	}

	macro setFieldPredefinedDate {
		Type(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_DATE",
			value1 = ${fieldValue});
	}

	macro setFieldPredefinedText {
		Type(
			locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_PREDEFINED_TEXT",
			value1 = ${fieldValue});
	}

	macro setFieldRequired {
		FormViewBuilder.checkSwitcher(propertyName = "required");
	}

	macro setName {
		AppBuilderAdmin.setName(title = ${formViewName});
	}

	macro setRuleName {
		Type(
			locator1 = "FormViewBuilder#RULE_NAME_TEXT_FIELD",
			value1 = ${ruleName});
	}

	macro setUpTwoFieldSets {
		var key_fieldSetName = ${fieldSetName};

		Click(locator1 = "FormViewBuilder#FIELD_SETS_TAB");

		Click(locator1 = "FormViewBuilder#CREATE_NEW_FIELD_SETS");

		FormViewBuilder.addFieldByDoubleClick(fieldType = ${fieldType1});

		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = ${fieldSetName});

		Click(locator1 = "FormViewBuilder#RULE_BUILDER_GO_BACK");

		FormViewBuilder.addFieldByDoubleClick(fieldType = ${fieldType2});

		Click(locator1 = "FormViewBuilder#FIELD_SET_SAVE_BUTTON");
	}

	macro switchLocalization {
		Click(
			key_symbolName = ${symbolName},
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION");

		Click(
			key_localizationList = ${localizationName},
			locator1 = "FormViewBuilder#LOCALIZATION_LIST");
	}

	macro switchToAdvancedTab {
		Click(locator1 = "FormViewBuilder#SIDEBAR_ADVANCED_TAB");
	}

	macro switchToFormViewTab {
		AppBuilderAdmin.switchTab(tabName = "Form Views");
	}

	macro switchToRulesTab {
		Click(locator1 = "FormViewBuilder#RULES_TAB");
	}

	macro validateDeleteObjectMessage {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_OBJECT_MESSAGE");
	}

	macro validateDeleteUsedObjectMessage {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_DELETE_USED_OBJECT_MESSAGE");
	}

	macro validateFieldInObject {
		var key_fieldLabel = ${fieldLabel};

		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			value1 = ${fieldLabel});
	}

	macro validateFieldLabel {
		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${fieldLabel});
	}

	macro validateFieldLabelRequired {
		AssertElementPresent(
			fieldLabel = ${fieldLabel},
			locator1 = "FormViewBuilder#FIELD_LABEL_REQUIRED");
	}

	macro validateFormMultipleSelectionField {
		var key_fieldType = ${fieldLabel};

		FormViewBuilder.validateFieldLabel(fieldLabel = ${fieldName});

		AssertTextEquals(
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION",
			value1 = ${fieldLabel});
	}

	macro validateLocalization {
		AssertElementPresent(
			key_symbolName = ${symbolName},
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION");
	}

	macro validateNoFieldLabel {
		AssertElementNotPresent(
			locator1 = "FormViewBuilder#FIELD_LABEL",
			value1 = ${fieldLabel});
	}

	macro validateNoObjectFieldName {
		AssertElementNotPresent(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			value1 = ${fieldName});
	}

	macro validateObjectFieldName {
		var key_fieldLabel = ${fieldName};

		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_LABEL",
			value1 = ${fieldName});
	}

	macro validatePredefinedDate {
		var key_fieldName = ${fieldName};
		var key_fieldValue = ${fieldValue};

		AssertTextEquals(
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_DATE_FIELD",
			value1 = ${fieldValue});
	}

	macro validatePredefinedMultipleSelection {
		for (var selectOption : list ${selectOptionsList}) {
			FormViewBuilder.viewCheckboxChecked(
				fieldName = ${fieldName},
				fieldValue = ${selectOption});
		}
	}

	macro validatePredefinedSelectList {
		var key_fieldName = ${fieldName};
		var key_fieldValue = ${fieldValue};

		AssertTextEquals(
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_SELECTLIST",
			value1 = ${fieldValue});
	}

	macro validatePredefinedSingleSelection {
		FormViewBuilder.viewSingleSelectionChecked(
			fieldName = ${fieldName},
			fieldValue = ${fieldValue});
	}

	macro validatePredefinedText {
		var key_fieldName = ${fieldName};
		var key_fieldValue = ${fieldValue};

		AssertTextEquals(
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM",
			value1 = ${fieldValue});
	}

	macro validateRuleName {
		AssertTextEquals(
			locator1 = "FormViewBuilder#RULE_LABEL",
			value1 = ${ruleLabel});
	}

	macro validateRuleSummary {
		var key_firstField = ${firstField};
		var key_secondField = ${secondField};
		var key_condition = ${condition};
		var key_action = ${action};

		AssertElementPresent(
			firstField = ${firstField},
			locator1 = "FormViewBuilder#RULE_BUILDER_FIRST_FIELD");

		AssertElementPresent(
			locator1 = "FormViewBuilder#RULE_BUILDER_SECOND_FIELD",
			secondField = ${secondField});

		AssertElementPresent(
			condition = ${condition},
			locator1 = "FormViewBuilder#RULE_BUILDER_CONDITION");

		AssertElementPresent(
			action = ${action},
			locator1 = "FormViewBuilder#RULE_BUILDER_ACTION");
	}

	macro validateSearchResult {
		var key_fieldName = ${fieldLabel};

		AssertTextEquals(
			locator1 = "FormViewBuilder#OBJECT_FIELD_SEARCH_RESULT",
			value1 = ${fieldLabel});
	}

	macro validateSelectFromListField {
		var key_rowNumber = ${rowNumber};

		AssertTextEquals(
			locator1 = "FormViewBuilder#OPTIONS_OPTION_VALUE_FIELD",
			value1 = ${optionValue});
	}

	macro validateUsedFormView {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_USED_FORM_VIEW");
	}

	macro validateUsedTableView {
		AssertElementPresent(locator1 = "FormViewBuilder#VALIDATE_USED_TABLE_VIEW");
	}

	macro viewCheckboxChecked {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = ${fieldName},
			key_fieldValue = ${fieldValue},
			locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY");
	}

	macro viewCheckboxCheckedAtPredefinedValue {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = ${fieldName},
			locator1 = "FormViewBuilder#CHECKBOX_PREDEFINED");
	}

	macro viewCheckboxNotChecked {
		AssertNotChecked.assertNotCheckedNotVisible(
			key_fieldName = ${fieldName},
			key_fieldValue = ${fieldValue},
			locator1 = "FormViewBuilder#CHECKBOX_AT_FORM_BODY");
	}

	macro viewSelectChecked {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = ${fieldName},
			key_fieldValue = ${fieldValue},
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM");
	}

	macro viewSingleSelectionChecked {
		AssertChecked.assertCheckedNotVisible(
			key_fieldName = ${fieldName},
			key_fieldValue = ${fieldValue},
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM_SINGLE_SELECTION");
	}

}