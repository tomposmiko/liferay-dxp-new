@component-name = "app-builder"
definition {

	property custom.properties = "default.layout.template.id=1_column";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shared App Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "App Builder Site Name");

		JSONGroup.addGroup(groupName = "App Builder Site 1");

		JSONGroup.addGroup(groupName = "App Builder Site 2");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "App Builder",
			panel = "Applications",
			portlet = "Objects");
	}

	tearDown {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		AppBuilderAdmin.teardownAppBuilder();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ((${testPortalInstance} == "true") && !(IsTestName(locator1 = "", value1 = ${testNameSkipPortalInstance}))) {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();

			JSONGroup.deleteGroupByName(groupName = "App Builder Site Name");

			JSONGroup.deleteGroupByName(groupName = "App Builder Site 1");

			JSONGroup.deleteGroupByName(groupName = "App Builder Site 2");

			JSONUser.tearDownNonAdminUsers();

			Permissions.removePermissionViaAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = 90,
				roleTitle = "User");

			for (var roleTitle : list "Portal Content Reviewer,User") {
				Permissions.removePermissionViaAPI(
					resourceAction = "ACCESS_IN_CONTROL_PANEL",
					resourceName = "com_liferay_app_builder_web_internal_portlet_ObjectsPortlet",
					roleTitle = ${roleTitle});

				Permissions.removePermissionViaAPI(
					resourceAction = "MANAGE",
					resourceName = "com.liferay.app.builder",
					roleTitle = ${roleTitle});
			}
		}
	}

	@description = "Create, Remove, Update and Delete entries of an application deployed as Product Menu"
	@priority = 5
	test CreateRemoveUpdateDeleteEntriesOfProductMenuApp {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "AppBuilder#CreateRemoveUpdateDeleteEntriesOfProductMenuApp";

		var myFormViewName = "My Registration form";
		var myTableViewName = "My display table";
		var myAppName = "My Registration app";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Full name");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Nickname");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Numeric");

		FormViewBuilder.setFieldLabel(fieldLabel = "Number of children");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Select from List");

		FormViewBuilder.setFieldLabel(fieldLabel = "Occupation");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Select${number}",
				optionValue = "Select ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Date");

		FormViewBuilder.setFieldLabel(fieldLabel = "Date of birth");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Multiple Selection");

		FormViewBuilder.setFieldLabel(fieldLabel = "Hobbies");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Multiple${number}",
				optionValue = "Multiple ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.setName(formViewName = ${myFormViewName});

		FormViewBuilder.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${myFormViewName});

		AppBuilderAdmin.switchTab(tabName = "Table Views");

		AppBuilderAdmin.add();

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Full name");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Nickname");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Number of children");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Occupation");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Date of birth");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Hobbies");

		TableViewBuilder.setName(tableViewName = ${myTableViewName});

		TableViewBuilder.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${myTableViewName});

		App.add(
			appTitle = ${myAppName},
			deployOption = "Product Menu",
			formViewName = ${myFormViewName},
			tableViewName = ${myTableViewName});

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = ${myAppName});

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Alex");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 4);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 2");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 1,Multiple 2");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05022016);

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Alex");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 4);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 2");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'2016-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/2016')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 1, Multiple 2");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Ferguson");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister Ferguson");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 7);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 3");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 3");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05022000);

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Ferguson");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister Ferguson");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 7);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 3");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'2000-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/2000')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 3");

		AppBuilderAdmin.viewItem(itemName = "Ferguson");

		DetailsView.validateEntry(entry = "Ferguson");

		DetailsView.validateEntry(entry = "Mister Ferguson");

		DetailsView.validateEntry(entry = 7);

		DetailsView.validateEntry(entry = "Select 3");

		AssertElementPresent(locator1 = "//div[@class='sheet']//*[contains(text(),'2000-05-02')] | //div[@class='sheet']//*[contains(text(),'05/02/2000')]");

		DetailsView.validateEntry(entry = "Multiple 3");

		DetailsView.previousEntry();

		DetailsView.validateEntry(entry = "Alex");

		DetailsView.validateEntry(entry = "Mister");

		DetailsView.validateEntry(entry = 4);

		DetailsView.validateEntry(entry = "Select 2");

		AssertElementPresent(locator1 = "//div[@class='sheet']//*[contains(text(),'2016-05-02')] | //div[@class='sheet']//*[contains(text(),'05/02/2016')]");

		DetailsView.validateEntry(entry = "Multiple 1");

		DetailsView.validateEntry(entry = "Multiple 2");

		DetailsView.deleteEntry(itemName = "Alex");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Pepe");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister Guardi");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 6);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 1");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 1");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05021999);

		AppBuilderAdmin.save();

		AppBuilderAdmin.viewItem(itemName = "Ferguson");

		DetailsView.nextEntry();

		DetailsView.editEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Klopp");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister Klopp");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 4);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 3");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 2");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05021989);

		AppBuilderAdmin.cancel();

		DetailsView.validateEntry(entry = "Pepe");

		DetailsView.validateEntry(entry = "Mister Guardi");

		DetailsView.validateEntry(entry = 6);

		DetailsView.validateEntry(entry = "Select 1");

		AssertElementPresent(locator1 = "//div[@class='sheet']//*[contains(text(),'1999-05-02')] | //div[@class='sheet']//*[contains(text(),'05/02/1999')]");

		DetailsView.validateEntry(entry = "Multiple 1");

		DetailsView.backButton();

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Pepe");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister Guardi");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 6);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 1");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'1999-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/1999')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 1");
	}

	@description = "Create, Remove, Update and Delete entries of an application deployed as a Standalone"
	@priority = 5
	test CreateRemoveUpdateDeleteEntriesOfStandaloneApp {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "AppBuilder#CreateRemoveUpdateDeleteEntriesOfStandaloneApp";

		var myFormViewName = "My Registration form";
		var myTableViewName = "My display table";
		var myAppName = "My Registration app";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Full name");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Nickname");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Numeric");

		FormViewBuilder.setFieldLabel(fieldLabel = "Number of children");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Select from List");

		FormViewBuilder.setFieldLabel(fieldLabel = "Occupation");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Select${number}",
				optionValue = "Select ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Date");

		FormViewBuilder.setFieldLabel(fieldLabel = "Date of birth");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Multiple Selection");

		FormViewBuilder.setFieldLabel(fieldLabel = "Hobbies");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Multiple${number}",
				optionValue = "Multiple ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.setName(formViewName = ${myFormViewName});

		FormViewBuilder.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${myFormViewName});

		AppBuilderAdmin.switchTab(tabName = "Table Views");

		AppBuilderAdmin.add();

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Full name");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Nickname");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Number of children");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Occupation");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Date of birth");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Hobbies");

		TableViewBuilder.setName(tableViewName = ${myTableViewName});

		TableViewBuilder.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${myTableViewName});

		App.add(
			appTitle = ${myAppName},
			deployOption = "Standalone",
			formViewName = ${myFormViewName},
			tableViewName = ${myTableViewName});

		AppBuilderAdmin.openStandAloneApp(itemName = "My Registration app");

		SelectWindow.selectPopUp(locator1 = "null");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Alex");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 4);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 2");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 1,Multiple 2");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05022016);

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Alex");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 4);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 2");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'2016-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/2016')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 1, Multiple 2");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Ferguson");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister Ferguson");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 7);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 3");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 3");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05022000);

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Ferguson");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister Ferguson");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 7);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 3");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'2000-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/2000')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 3");

		AppBuilderAdmin.viewItem(itemName = "Ferguson");

		DetailsView.validateEntry(entry = "Ferguson");

		DetailsView.validateEntry(entry = "Mister Ferguson");

		DetailsView.validateEntry(entry = 7);

		DetailsView.validateEntry(entry = "Select 3");

		AssertElementPresent(locator1 = "//div[@class='sheet']//*[contains(text(),'2000-05-02')] | //div[@class='sheet']//*[contains(text(),'05/02/2000')]");

		DetailsView.validateEntry(entry = "Multiple 3");

		DetailsView.previousEntry();

		DetailsView.validateEntry(entry = "Alex");

		DetailsView.validateEntry(entry = "Mister");

		DetailsView.validateEntry(entry = 4);

		DetailsView.validateEntry(entry = "Select 2");

		AssertElementPresent(locator1 = "//div[@class='sheet']//*[contains(text(),'2016-05-02')] | //div[@class='sheet']//*[contains(text(),'05/02/2016')]");

		DetailsView.validateEntry(entry = "Multiple 1");

		DetailsView.validateEntry(entry = "Multiple 2");

		DetailsView.deleteEntry(itemName = "Alex");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Pepe");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister Guardi");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 6);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 1");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 1");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05021999);

		AppBuilderAdmin.save();

		AppBuilderAdmin.viewItem(itemName = "Ferguson");

		DetailsView.nextEntry();

		DetailsView.editEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Klopp");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister Klopp");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 4);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 3");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 2");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05021989);

		AppBuilderAdmin.cancel();

		DetailsView.validateEntry(entry = "Pepe");

		DetailsView.validateEntry(entry = "Mister Guardi");

		DetailsView.validateEntry(entry = 6);

		DetailsView.validateEntry(entry = "Select 1");

		AssertElementPresent(locator1 = "//div[@class='sheet']//*[contains(text(),'1999-05-02')] | //div[@class='sheet']//*[contains(text(),'05/02/1999')]");

		DetailsView.validateEntry(entry = "Multiple 1");

		DetailsView.backToTableView();

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Pepe");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister Guardi");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 6);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 1");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'1999-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/1999')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 1");
	}

	@description = "Create, Remove, Update and Delete entries of an application deployed as a Widget"
	@priority = 5
	test CreateRemoveUpdateDeleteEntriesOfWidgetApp {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "AppBuilder#CreateRemoveUpdateDeleteEntriesOfWidgetApp";

		var myFormViewName = "My Registration form";
		var myTableViewName = "My display table";
		var myAppName = "My Registration app";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Full name");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Nickname");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Numeric");

		FormViewBuilder.setFieldLabel(fieldLabel = "Number of children");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Select from List");

		FormViewBuilder.setFieldLabel(fieldLabel = "Occupation");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Select${number}",
				optionValue = "Select ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Date");

		FormViewBuilder.setFieldLabel(fieldLabel = "Date of birth");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Multiple Selection");

		FormViewBuilder.setFieldLabel(fieldLabel = "Hobbies");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Multiple${number}",
				optionValue = "Multiple ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.setName(formViewName = ${myFormViewName});

		FormViewBuilder.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${myFormViewName});

		AppBuilderAdmin.switchTab(tabName = "Table Views");

		AppBuilderAdmin.add();

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Full name");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Nickname");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Number of children");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Occupation");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Date of birth");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Hobbies");

		TableViewBuilder.setName(tableViewName = ${myTableViewName});

		TableViewBuilder.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = ${myTableViewName});

		App.add(
			appTitle = ${myAppName},
			deployOption = "Widget",
			formViewName = ${myFormViewName},
			tableViewName = ${myTableViewName});

		JSONLayout.addPublicLayout(
			groupName = "App Builder Site Name",
			layoutName = "App Builder Test Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "App Builder Site Name",
			layoutName = "App Builder Test Page",
			layoutTemplate = "1 Column");

		Navigator.gotoSitePage(
			pageName = "App Builder Test Page",
			siteName = "App Builder Site Name");

		Portlet.addPG(
			pageName = "App Builder Test Page",
			portletName = "My Registration app");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Alex");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Mister");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 2);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 2");

		FormViewBuilder.selectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 1,Multiple 2,Multiple 3");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05022016);

		AppBuilderAdmin.save();

		Navigator.gotoSitePage(
			pageName = "App Builder Test Page",
			siteName = "App Builder Site Name");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Alex");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Mister");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 2);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 2");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'2016-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/2016')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 1, Multiple 2, Multiple 3");

		AppBuilderAdmin.editItem(itemName = "Alex");

		FormViewBuilder.editText(
			fieldName = "Full name",
			fieldValue = "Pepe");

		FormViewBuilder.editText(
			fieldName = "Nickname",
			fieldValue = "Guardi");

		FormViewBuilder.editText(
			fieldName = "Number of children",
			fieldValue = 1);

		FormViewBuilder.selectSelectOption(
			fieldName = "Occupation",
			selectOption = "Select 1");

		FormViewBuilder.deselectSelectWithMultipleOptions(
			fieldName = "Hobbies",
			selectOptionsList = "Multiple 2");

		FormViewBuilder.editDate(
			fieldName = "Date of birth",
			fieldValue = 05022014);

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = "Alex");

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = "Mister");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Pepe");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Guardi");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 1);

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Select 1");

		AssertElementPresent(locator1 = "//table[contains(@class,'table')]//*[contains(text(),'2014-05-02')] | //table[contains(@class,'table')]//*[contains(text(),'05/02/2014')]");

		AppBuilderAdmin.validateItemNameOnTable(itemName = "Multiple 1, Multiple 3");

		AppBuilderAdmin.deleteEntry(itemName = "Pepe");
	}

	@description = "Create table views with a fixed entries filter of list field types (select from list and single selection)"
	@priority = 5
	test CreateTableViewsWithFixedEntriesFilter {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "AppBuilder#CreateTableViewsWithFixedEntriesFilter";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Numeric");

		FormViewBuilder.setFieldLabel(fieldLabel = "ID");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Select from List");

		FormViewBuilder.setFieldLabel(fieldLabel = "Color");

		FormViewBuilder.editOptionsRow(
			optionName = "Red",
			optionValue = "Red",
			rowNumber = 1);

		FormViewBuilder.editOptionsRow(
			optionName = "Blue",
			optionValue = "Blue",
			rowNumber = 2);

		FormViewBuilder.editOptionsRow(
			optionName = "Green",
			optionValue = "Green",
			rowNumber = 3);

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Single Selection");

		FormViewBuilder.setFieldLabel(fieldLabel = "Animal");

		FormViewBuilder.editOptionsRow(
			optionName = "Dog",
			optionValue = "Dog",
			rowNumber = 1);

		FormViewBuilder.editOptionsRow(
			optionName = "Cat",
			optionValue = "Cat",
			rowNumber = 2);

		FormViewBuilder.editOptionsRow(
			optionName = "Fish",
			optionValue = "Fish",
			rowNumber = 3);

		FormViewBuilder.closeSidebar();

		FormViewBuilder.setName(formViewName = "My Form View");

		FormViewBuilder.save();

		AppBuilderAdmin.switchTab(tabName = "Table Views");

		AppBuilderAdmin.add();

		TableViewBuilder.addColumnByDoubleClick(fieldType = "ID");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Color");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Animal");

		TableViewBuilder.setName(tableViewName = "Table Full");

		TableViewBuilder.save();

		AppBuilderAdmin.add();

		TableViewBuilder.addColumnByDoubleClick(fieldType = "ID");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Color");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Animal");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.selectFilterDropdownItem(
			columnLabel = "Color",
			dropdownItemList = "Red");

		TableViewBuilder.selectFilterDropdownItem(
			columnLabel = "Animal",
			dropdownItemList = "Dog");

		TableViewBuilder.setName(tableViewName = "Table Filtered");

		TableViewBuilder.save();

		AppBuilderAdmin.openItem(itemName = "Table Filtered");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.validateFilterDropdownList(
			columnLabel = "Color",
			itemList = "Red");

		TableViewBuilder.validateFilterDropdownList(
			columnLabel = "Animal",
			itemList = "Dog");

		TableViewBuilder.save();

		AppBuilderAdmin.switchTab(tabName = "Apps");

		AppBuilderAdmin.add();

		AppBuilderAdmin.setName(title = "App Full");

		App.selectFormView(formViewName = "My Form View");

		App.selectTableView(tableViewName = "Table Full");

		App.toggleDeploy(deployOption = "Product Menu");

		App.clickDeploy();

		AppBuilderAdmin.add();

		AppBuilderAdmin.setName(title = "App Filtered");

		App.selectFormView(formViewName = "My Form View");

		App.selectTableView(tableViewName = "Table Filtered");

		App.toggleDeploy(deployOption = "Product Menu");

		App.clickDeploy();

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = "App Filtered");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "ID",
			fieldValue = 1);

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Red");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Dog");

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = 1);

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "ID",
			fieldValue = 2);

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Red");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Cat");

		AppBuilderAdmin.save();

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "ID",
			fieldValue = 3);

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Green");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Dog");

		AppBuilderAdmin.save();

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "ID",
			fieldValue = 4);

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Blue");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Fish");

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = 1);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 2);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 3);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 4);

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = "App Full");

		AppBuilderAdmin.viewItem(itemName = 1);

		DetailsView.editEntry();

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Blue");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Fish");

		AppBuilderAdmin.save();

		AppBuilderAdmin.gotoBack();

		AppBuilderAdmin.viewItem(itemName = 2);

		DetailsView.editEntry();

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Red");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Dog");

		AppBuilderAdmin.save();

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = "App Filtered");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 2);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 1);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 3);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 4);

		ApplicationsMenu.gotoPortlet(
			category = "App Builder",
			panel = "Applications",
			portlet = "Objects");

		LexiconEntry.gotoVerticalEllipsisMenuItemNoError(menuItem = "Table Views");

		AppBuilderAdmin.openItem(itemName = "Table Filtered");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.clickOnSelectAllFilters(columnLabel = "Color");

		TableViewBuilder.clickOnSelectAllFilters(columnLabel = "Animal");

		TableViewBuilder.save();

		AppBuilderAdmin.openItem(itemName = "Table Filtered");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.validateFilterDropdownList(
			columnLabel = "Color",
			itemList = "Red, Blue, Green");

		TableViewBuilder.validateFilterDropdownList(
			columnLabel = "Animal",
			itemList = "Dog, Cat, Fish");

		TableViewBuilder.save();

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = "App Filtered");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 1);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 2);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 3);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 4);

		ApplicationsMenu.gotoPortlet(
			category = "App Builder",
			panel = "Applications",
			portlet = "Objects");

		LexiconEntry.gotoVerticalEllipsisMenuItemNoError(menuItem = "Table Views");

		AppBuilderAdmin.openItem(itemName = "Table Filtered");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.clickOnClearFilters(columnLabel = "Color");

		TableViewBuilder.clickOnClearFilters(columnLabel = "Animal");

		TableViewBuilder.selectFilterDropdownItem(
			columnLabel = "Color",
			dropdownItemList = "Blue,Green");

		TableViewBuilder.selectFilterDropdownItem(
			columnLabel = "Animal",
			dropdownItemList = "Cat,Fish");

		TableViewBuilder.save();

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = "App Filtered");

		AppBuilderAdmin.addEntry();

		FormViewBuilder.editText(
			fieldName = "ID",
			fieldValue = 5);

		FormViewBuilder.selectSelectOption(
			fieldName = "Color",
			selectOption = "Green");

		FormViewBuilder.selectRadioOption(
			fieldName = "Animal",
			radioOption = "Cat");

		AppBuilderAdmin.save();

		AppBuilderAdmin.validateItemNameOnTable(itemName = 1);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 4);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 5);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 2);

		AppBuilderAdmin.validateItemNameOnTableNotPresent(itemName = 3);

		ApplicationsMenu.gotoPortlet(
			category = "App Builder",
			panel = "Applications",
			portlet = "Objects");

		LexiconEntry.gotoVerticalEllipsisMenuItemNoError(menuItem = "Table Views");

		AppBuilderAdmin.openItem(itemName = "Table Filtered");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.clickOnClearFilters(columnLabel = "Color");

		TableViewBuilder.clickOnClearFilters(columnLabel = "Animal");

		TableViewBuilder.save();

		AppBuilderAdmin.openItem(itemName = "Table Filtered");

		TableViewBuilder.selectTab(tabName = "Filters");

		TableViewBuilder.validateFilterDropdownList(
			columnLabel = "Color",
			itemList = "Choose Options");

		TableViewBuilder.validateFilterDropdownList(
			columnLabel = "Animal",
			itemList = "Choose Options");

		TableViewBuilder.save();

		AppBuilderAdmin.gotoCustomAppApplicationsMenuApplications(portlet = "App Filtered");

		AppBuilderAdmin.validateItemNameOnTable(itemName = 1);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 2);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 3);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 4);

		AppBuilderAdmin.validateItemNameOnTable(itemName = 5);
	}

	@description = "Delete fields from the Form View through the Delete options and assert its affect on other Form and Table views"
	@priority = 5
	test DeleteFormViewFieldFromObject {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "AppBuilder#DeleteFormViewFieldFromObject";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.setName(formViewName = "My Form View 1");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Select from List");

		FormViewBuilder.save();

		AppBuilderAdmin.switchTab(tabName = "Table Views");

		AppBuilderAdmin.add();

		TableViewBuilder.setName(tableViewName = "My Table View");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Text");

		TableViewBuilder.addColumnByDoubleClick(fieldType = "Select from List");

		TableViewBuilder.save();

		FormViewBuilder.switchToFormViewTab();

		AppBuilderAdmin.add();

		FormViewBuilder.setName(formViewName = "My Form View 2");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Date");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Text");

		FormViewBuilder.save();

		FormViewBuilder.switchToFormViewTab();

		AppBuilderAdmin.openItem(itemName = "My Form View 1");

		FormViewBuilder.fieldEllipsisDelete(fieldLabel = "Text");

		FormViewBuilder.validateDeleteUsedObjectMessage();

		FormViewBuilder.validateUsedFormView(formViewName = "My Form View 1");

		FormViewBuilder.validateUsedFormView(formViewName = "My Form View 2");

		FormViewBuilder.validateUsedTableView(tableViewName = "My Table View");

		FormViewBuilder.deleteButtonInDeleteFromObject();

		FormViewBuilder.validateNoFieldLabel(fieldLabel = "Text");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Text");

		FormViewBuilder.deleteFromObjectViaX(fieldName = "Select from List");

		FormViewBuilder.validateDeleteUsedObjectMessage();

		FormViewBuilder.validateUsedFormView(formViewName = "My Form View 1");

		FormViewBuilder.validateUsedTableView(tableViewName = "My Table View");

		FormViewBuilder.deleteButtonInDeleteFromObject();

		FormViewBuilder.validateNoFieldLabel(fieldLabel = "Select from List");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Select from List");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Numeric");

		FormViewBuilder.fieldEllipsisDelete(fieldLabel = "Numeric");

		FormViewBuilder.validateDeleteObjectMessage();

		FormViewBuilder.deleteButtonInDeleteFromObject();

		FormViewBuilder.validateNoFieldLabel(fieldLabel = "Numeric");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Numeric");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Multiple Selection");

		FormViewBuilder.deleteFromObjectViaX(fieldName = "Multiple Selection");

		FormViewBuilder.validateDeleteObjectMessage();

		FormViewBuilder.cancelButtonInDeleteFromObject();

		FormViewBuilder.validateFieldLabel(fieldLabel = "Multiple Selection");

		FormViewBuilder.validateObjectFieldName(fieldName = "Multiple Selection");

		FormViewBuilder.deleteFromObjectViaX(fieldName = "Multiple Selection");

		FormViewBuilder.validateDeleteObjectMessage();

		FormViewBuilder.deleteButtonInDeleteFromObject();

		FormViewBuilder.validateNoFieldLabel(fieldLabel = "Multiple Selection");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Multiple Selection");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Single Selection");

		FormViewBuilder.save();

		AppBuilderAdmin.openItem(itemName = "My Form View 2");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Text");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Select from List");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Numeric");

		FormViewBuilder.validateNoObjectFieldName(fieldName = "Multiple Selection");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Date");

		FormViewBuilder.save();

		AppBuilderAdmin.switchTab(tabName = "Table Views");

		AppBuilderAdmin.openItem(itemName = "My Table View");

		TableViewBuilder.validateNoColumnLabel(columnLabel = "Text");

		TableViewBuilder.validateNoColumnLabelAtSidebar(columnLabel = "Text");

		TableViewBuilder.validateNoColumnLabel(columnLabel = "Select from List");

		TableViewBuilder.validateNoColumnLabelAtSidebar(columnLabel = "Select from List");

		TableViewBuilder.validateColumnLabelAtSidebar(columnLabel = "Single Selection");
	}

	@description = "Remove fields from the Form View through the 'Remove' option"
	@priority = 5
	test RemoveFormViewFields {
		property portal.acceptance = "true";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.setName(formViewName = "Form View Title 1");

		for (var fieldType : list "Text,Select from List,Single Selection,Multiple Selection,Date,Numeric,Upload") {
			FormViewBuilder.addFieldByDoubleClick(fieldType = ${fieldType});

			FormViewBuilder.closeSidebar();
		}

		FormViewBuilder.save();

		FormViewBuilder.openFormView(formViewName = "Form View Title 1");

		for (var fieldLabel : list "Text,Select from List,Single Selection,Multiple Selection,Date,Numeric,Upload") {
			FormViewBuilder.fieldEllipsisAction(
				fieldLabel = ${fieldLabel},
				selectAction = "Remove");
		}

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.save();

		FormViewBuilder.openFormView(formViewName = "Form View Title 1");

		for (var fieldType : list "Select from List,Single Selection,Multiple Selection,Date,Numeric,Upload") {
			FormViewBuilder.validateNoFieldLabel(fieldLabel = ${fieldType});

			FormViewBuilder.validateObjectFieldName(fieldName = ${fieldType});
		}

		FormViewBuilder.validateFieldLabel(fieldLabel = "Text");
	}

	@description = "Reuse my object's existing fields when creating a new form view"
	@priority = 5
	test ReuseExistingFormViewFields {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "AppBuilder#ReuseExistingFormViewFields";

		AppBuilderAdmin.addCustomObject(
			customObjectName = "my custom object",
			isCreatingFormView = "true",
			isCreatingViaPlusIcon = "true");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Full name");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Full name");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

		FormViewBuilder.setFieldLabel(fieldLabel = "Nickname");

		FormViewBuilder.closeSidebar();

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Numeric");

		FormViewBuilder.setFieldLabel(fieldLabel = "Number of children");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Number of children");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Select from List");

		FormViewBuilder.setFieldLabel(fieldLabel = "Occupation");

		FormViewBuilder.setFieldRequired();

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Select ${number}",
				optionValue = "Occupation ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Occupation");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Single Selection");

		FormViewBuilder.setFieldLabel(fieldLabel = "Marital Status");

		FormViewBuilder.setFieldRequired();

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Option ${number}",
				optionValue = "Marital Status ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.closeSidebar();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Marital Status");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Date");

		FormViewBuilder.setFieldLabel(fieldLabel = "Date of birth");

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Date of birth");

		FormViewBuilder.addFieldByDoubleClick(fieldType = "Multiple Selection");

		FormViewBuilder.setFieldLabel(fieldLabel = "Hobbies");

		for (var number : list "1,2,3") {
			FormViewBuilder.editOptionsRow(
				optionName = "Multiple ${number}",
				optionValue = "Hobby ${number}",
				rowNumber = ${number});
		}

		FormViewBuilder.setFieldRequired();

		FormViewBuilder.closeSidebar();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Hobbies");

		FormViewBuilder.setName(formViewName = "Registration Form");

		FormViewBuilder.save();

		AppBuilderAdmin.add();

		FormViewBuilder.addFormView(
			fieldType = "Text",
			formViewName = "My Form View");

		AppBuilderAdmin.openItem(itemName = "My Form View");

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Hobbies");

		FormViewBuilder.setFieldLabel(fieldLabel = "Hobbies edited");

		FormViewBuilder.validateFormMultipleSelectionField(
			fieldLabel = "Hobby 2",
			fieldName = "Hobbies edited");

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Marital Status");

		FormViewBuilder.validateFormMultipleSelectionField(
			fieldLabel = "Marital Status 3",
			fieldName = "Marital Status");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Marital Status");

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Occupation");

		FormViewBuilder.validateSelectFromListField(
			optionValue = "Occupation 2",
			rowNumber = 2);

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Occupation");

		FormViewBuilder.editFieldInObject(
			fieldLabel = "Testing Changed Name",
			fieldName = "Nickname");

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Full name");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Full name");

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Number of children");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Number of children");

		FormViewBuilder.addFieldToObject(fieldName = "Text");

		FormViewBuilder.addFieldToObject(fieldName = "Select from List");

		FormViewBuilder.searchObjectField(fieldValue = "Date of birth");

		FormViewBuilder.validateSearchResult(fieldLabel = "Date of birth");

		FormViewBuilder.addFieldByDoubleClickFromObjectSidebar(fieldLabel = "Date of birth");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Date of birth");

		FormViewBuilder.save();

		AppBuilderAdmin.openItem(itemName = "My Form View");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Text");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Occupation");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Occupation");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Marital Status");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Marital Status");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Full name");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Full name");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Number of children");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Number of children");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Date of birth");

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Date of birth");
	}

}