configurations.all {
	resolutionStrategy {
		force 'xml-apis:xml-apis:1.4.01'
	}
}

allprojects {
	apply plugin: 'jacoco'

	clean {
		delete 'out'
	}

	formatSource {
		autoFix = true
		showDocumentation = true
		showStatusUpdates = false
	}

	check {
		dependsOn checkSourceFormatting
	}
}

configure(subprojects.findAll {!it.childProjects}) {
	buildCSS {
		enabled = false
	}

	configJSModules {
		enabled = false
	}

	copyLibs {
		enabled = false
	}

	replaceSoyTranslation {
		enabled = false
	}

	setUpTestableTomcat {
		enabled = false
	}

	startTestableTomcat {
		enabled = false
	}

	stopTestableTomcat {
		enabled = false
	}

	test {
		ignoreFailures = false
	}

	transpileJS {
		enabled = false
	}

	wrapSoyAlloyTemplate {
		enabled = false
	}
}

task codeCoverageIntegrationTestReport(type: JacocoReport)
task codeCoverageUnitTestReport(type: JacocoReport)

codeCoverageIntegrationTestReport {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/testIntegration.exec")

	subprojects.findAll { !it.childProjects }.each { sourceSets it.sourceSets.main }

	afterEvaluate {
		classDirectories = files(
			classDirectories.files.collect {
				fileTree(
					dir: it,
					exclude: [
						"**/com/liferay/apio/architect/internal/test/**"
					])
			})
	}

	reports {
		csv {
			enabled = false
		}

		html {
			enabled = false
		}

		xml {
			enabled = true
			destination file("${buildDir}/reports/jacoco/report.xml")
		}
	}
}

codeCoverageUnitTestReport {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/test.exec")

	subprojects.findAll { !it.childProjects }.each { sourceSets it.sourceSets.main }

	afterEvaluate {
		classDirectories = files(
			classDirectories.files.collect {
				fileTree(
					dir: it,
					exclude: [
						"**/com/liferay/apio/architect/internal/test/**"
					])
			})
	}

	reports {
		csv {
			enabled = false
		}

		html {
			enabled = false
		}

		xml {
			enabled = true
			destination file("${buildDir}/reports/jacoco/report.xml")
		}
	}
}