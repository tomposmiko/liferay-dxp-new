@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Echo Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a content structure created") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("Given I create four structuredContent draft with different priority field set") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse1 = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1.0",
				title = "Web Content 1");
			var responseToParse2 = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1.1",
				title = "Web Content 2");
			var responseToParse3 = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "2.99",
				title = "Web Content 3");
			var responseToParse4 = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "0.99",
				title = "Web Content 4");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			var response = HeadlessWebcontentAPI.returnAllstructuredContentId();

			HeadlessWebcontentAPI.deleteAllStructuredContent(structuredContentId = "${response}");

			WebContentStructures.tearDownCP();
		}
	}

	@priority = "4"
	test CanFilterEqualToPriorityValuesSortedByPriorityAscendingByDefault {
		property portal.acceptance = "true";

		task ("When web contents are filtered with greater than 1.0 priority and sorted with default priority") {
			var response = HeadlessWebcontentAPI.filterAndSortAdminStructuredContent(
				filtervalue = "priority%20gt%201.0",
				sortvalue = "priority");
		}

		task ("Then the response body only includes items with priority 1.0") {
			HeadlessWebcontentAPI.assertTitleFieldWithCorrectName(
				expectedTitleName = "Web Content 2,Web Content 3",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test CanFilterGreaterEqualPriorityValues {
		property portal.acceptance = "true";

		task ("When web contents are filtered with priority greater than to 0.99") {
			var response = HeadlessWebcontentAPI.filterAdminStructuredContent(filtervalue = "priority%20ge%200.99");
		}

		task ("Then the response body only includes items with priority greater than to 0.99") {
			HeadlessWebcontentAPI.assertTitleFieldWithCorrectName(
				expectedTitleName = "Web Content 1,Web Content 2,Web Content 3,Web Content 4",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test CanFilterGreaterThanPriorityValuesSortedDescending {
		property portal.acceptance = "true";

		task ("When web contents are filtered with greater than 0.99 priority and sorted with descending priority") {
			var response = HeadlessWebcontentAPI.filterAndSortAdminStructuredContent(
				filtervalue = "priority%20gt%200.99",
				sortvalue = "priority%3Adesc");
		}

		task ("Then the response body only includes items with priority greater than 0.99") {
			HeadlessWebcontentAPI.assertTitleFieldWithCorrectName(
				expectedTitleName = "Web Content 3,Web Content 2,Web Content 1",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test CanFilterNotEqualToPriorityValuesSortedAscending {
		property portal.acceptance = "true";

		task ("When web contents are filtered with not equal to 1.0 priority and sorted with ascending priority") {
			var response = HeadlessWebcontentAPI.filterAndSortAdminStructuredContent(
				filtervalue = "priority%20ne%201.0",
				sortvalue = "priority%3Aasc");
		}

		task ("Then the response body only includes items without priority 1.0") {
			HeadlessWebcontentAPI.assertTitleFieldWithCorrectName(
				expectedTitleName = "Web Content 4,Web Content 2,Web Content 3",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test CanInvokeAllStructuredContentCreated {
		property portal.acceptance = "true";

		task ("When invoking Web Content 3 by Headless Admin Content getStructuredContentByVersion") {
			var structuredContentId = HeadlessWebcontentAPI.getStructuredContentIdByTitle(title = "Web Content 3");

			var response = HeadlessWebcontentAPI.versionStructureContent(
				structuredContentId = "${structuredContentId}",
				versionvalue = "1.0");
		}

		task ("Then I should see in response Web Content 3 with a priority field set") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "2.99",
				responseToParse = "${response}");
		}
	}

}