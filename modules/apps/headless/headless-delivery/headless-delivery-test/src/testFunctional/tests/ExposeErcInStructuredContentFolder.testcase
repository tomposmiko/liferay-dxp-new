@component-name = "portal-wcm"
@disable-webdriver = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Echo Headless";

	setUp {
		TestCase.setUpPortalInstance();

		task ("Given a site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Structured Content Folder is created with custom ERC"
	@priority = 5
	test CanCreateStructuredContentFolderWithCustomErc {
		property portal.acceptance = "true";

		task ("When with postSiteStructuredContentFolder") {
			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("Then a new folder is created with the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "CustomeCode",
				responseToParse = ${response});
		}
	}

	@description = "Structured Content Folder is created with default ERC"
	@priority = 5
	test CanCreateStructuredContentFolderWithDefaultErc {
		property portal.acceptance = "true";

		task ("When with postSiteStructuredContentFolder") {
			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("Then a new folder is created with the erc value equals to the uuid in the body response") {
			var folderUuid = JSONWebcontent.getFolderUuidByFolderName(
				folderName = "Test Folder",
				groupName = "Site Name");

			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = ${folderUuid},
				responseToParse = ${response});
		}
	}

	@description = "Structured Content Folder Is Deleted With Custom ERC"
	@priority = 5
	test CanDeleteStructuredContentFolderByCustomErc {
		property portal.acceptance = "true";

		task ("Given a folder with custom ERC") {
			var responseFromCreate = HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("When I use deleteSiteStructuredContentFolderByExternalReferenceCode") {
			var structuredContentFolderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = ${responseFromCreate});
			var response = HeadlessWebcontentFolderAPI.deleteWebContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name");
		}

		task ("Then the folder is deleted successfully") {
			HeadlessWebcontentFolderAPI.assertStructuredContentFolderDeleted(
				expectedValue = "No JournalFolder exists with the primary key ${structuredContentFolderId}",
				structuredContentFolderId = ${structuredContentFolderId});
		}
	}

	@description = "Structured Content Folder Is Deleted With Default ERC"
	@priority = 5
	test CanDeleteStructuredContentFolderByErc {
		property portal.acceptance = "true";

		task ("Given a folder") {
			var responseFromCreate = HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("When I use deleteSiteStructuredContentFolderByExternalReferenceCode") {
			var structuredContentFolderErc = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.externalReferenceCode",
				responseToParse = ${responseFromCreate});
			var structuredContentFolderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = ${responseFromCreate});
			var response = HeadlessWebcontentFolderAPI.deleteWebContentFolder(
				externalReferenceCode = ${structuredContentFolderErc},
				groupName = "Site Name");
		}

		task ("Then the folder is deleted successfully") {
			HeadlessWebcontentFolderAPI.assertStructuredContentFolderDeleted(
				expectedValue = "No JournalFolder exists with the primary key ${structuredContentFolderId}",
				structuredContentFolderId = ${structuredContentFolderId});
		}
	}

	@description = "Can get correct details with custom erc from folders"
	@priority = 5
	test CanGetCorrectDetailsWithCustomErcFromFolders {
		property portal.acceptance = "true";

		task ("Given a folder with custom erc") {
			var responseFromCreate = HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("When I use getSiteStructuredContentFolderByExternalReferenceCode") {
			var responseFromGet = HeadlessWebcontentFolderAPI.getSiteStructuredContentFoldersByErc(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name");
		}

		task ("Then I can retrieve the correct information from the response") {
			HeadlessWebcontentFolderAPI.assertResponseHasCorrectDetails(
				expectedExternalReferenceCodeValue = "CustomeCode",
				responseFromCreate = ${responseFromCreate},
				responseFromGet = ${responseFromGet});
		}
	}

	@description = "Can get correct details with default erc from folders"
	@priority = 5
	test CanGetCorrectDetailsWithDefaultErcFromFolders {
		property portal.acceptance = "true";

		task ("Given a folder") {
			var responseFromCreate = HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("When I use getSiteStructuredContentFolderByExternalReferenceCode") {
			var structuredContentFolderErc = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.externalReferenceCode",
				responseToParse = ${responseFromCreate});

			var responseFromGet = HeadlessWebcontentFolderAPI.getSiteStructuredContentFoldersByErc(
				externalReferenceCode = ${structuredContentFolderErc},
				groupName = "Site Name");
		}

		task ("Then I can retrieve the correct information from the response") {
			HeadlessWebcontentFolderAPI.assertResponseHasCorrectDetails(
				expectedExternalReferenceCodeValue = ${structuredContentFolderErc},
				responseFromCreate = ${responseFromCreate},
				responseFromGet = ${responseFromGet});
		}
	}

	@description = "Existed Structured Content Folder will be updated with custom ERC"
	@priority = 5
	test CanUpdateStructuredContentFolderByErc {
		property portal.acceptance = "true";

		task ("Given a folder with custom ERC") {
			HeadlessWebcontentFolderAPI.createStructuredContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("When with putSiteStructuredContentFolderByExternalReferenceCode") {
			var response = HeadlessWebcontentFolderAPI.updateWebContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name",
				name = "Test Folder Updated");
		}

		task ("Then the same folder's name is updated in a response body of getStructureContentFolderById") {
			var structuredContentFolderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = ${response});

			HeadlessWebcontentFolderAPI.assertStructuredContentFolderUpdated(
				expectedValue = "Test Folder Updated",
				structuredContentFolderId = ${structuredContentFolderId});
		}
	}

	@description = "Not existed Structured Content Folder will be created with custom ERC"
	@priority = 5
	test NotExistedStructuredContentFolderWillBeCreatedWithCustomErc {
		property portal.acceptance = "true";

		task ("When with putSiteStructuredContentFolderByExternalReferenceCode") {
			var response = HeadlessWebcontentFolderAPI.updateWebContentFolder(
				externalReferenceCode = "CustomeCode",
				groupName = "Site Name",
				name = "Test Folder");
		}

		task ("Then a new folder is created with the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "CustomeCode",
				responseToParse = ${response});
		}
	}

}