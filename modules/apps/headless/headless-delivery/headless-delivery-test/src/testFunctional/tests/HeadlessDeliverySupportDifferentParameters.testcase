@component-name = "portal-headless"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Echo Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}

		JSONDepot.deleteDepot(depotName = "Test Depot Name");
	}

	@priority = 4
	test CanReceiveABodyWithAssetLibraryKeyOnlyInResponse {
		property portal.acceptance = "true";

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}

		task ("Given a content structure created in asset library") {
			WebContentNavigator.openWebContentStructuresAdmin(depotName = "Test Depot Name");

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("Given a structured content is created with a POST request in asset library") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				depotName = "Test Depot Name",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title");
		}

		task ("When with curl I request GET getAssetLibraryContentElementsPage with assetLibraryId and fields=content.assetLibraryKey") {
			var response = ContentElementAPI.getAssetLibraryContentElementsByDifferentParameters(
				depotName = "Test Depot Name",
				fieldValue = "content.assetLibraryKey",
				parameter = "fields");
		}

		task ("Then in a response I receive a body with assetLibraryKey only") {
			ContentElementAPI.assertResponseHasABodyWithAssetLibraryKeyOnly(
				expectedValue = "{content={assetLibraryKey=Test Depot Name}}",
				responseToParse = ${response});
		}
	}

	@priority = 4
	test CanReceiveCorrectValueWithProfileURLFieldInResponse {
		property portal.acceptance = "true";

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}

		task ("Given a Web Content Folder created") {
			HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				depotName = "Test Depot Name",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with curl I request GET getAssetLibraryStructuredContentFoldersPage with assetLibraryId and nestedFields = profileURL") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersWithDifferentParameters(
				depotName = "Test Depot Name",
				parameter = "nestedFields",
				parameterValue = "profileURL");
		}

		task ("Then in a response I receive a with profileURL field values in the creator field have appeared") {
			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..creator.profileURL");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "/web/test");
		}
	}

}