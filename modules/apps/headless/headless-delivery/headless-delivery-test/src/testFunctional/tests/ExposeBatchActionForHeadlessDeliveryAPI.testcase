@component-name = "portal-lima"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Lima Headless";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();
	}

	tearDown {
		JSONDepot.deleteDepot(
			depotName = "Test Depot Name",
			noSelenium = "true");
	}

	@disable-webdriver = "true"
	@priority = 4
	test IncludeBatchEndpointsInActionBlockForAssetLibraryDocumentFolder {
		property portal.acceptance = "true";

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}

		task ("When with get request and assetLibraryId to retrieve document folders") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(
				depotName = "Test Depot Name",
				noSelenium = "true");

			var response = DocumentFolderAPI.getDocumentFolders(assetLibraryId = ${assetLibraryId});
		}

		task ("Then I can see details of updateBatch, createBatch and deleteBatch inside of action block in response") {
			DocumentFolderAPI.assertProperBatchInActionBlock(
				assetLibraryId = ${assetLibraryId},
				batchActions = "createBatch,updateBatch,deleteBatch",
				responseToParse = ${response});
		}
	}

	@disable-webdriver = "true"
	@priority = 4
	test IncludeBatchEndpointsInActionBlockForSiteDocumentFolder {
		property portal.acceptance = "true";

		task ("When with get request and siteId to retrieve document folders") {
			var response = DocumentFolderAPI.getDocumentFolders(groupName = "Guest");
		}

		task ("Then I can see details of updateBatch, createBatch and deleteBatch inside of action block in response") {
			DocumentFolderAPI.assertProperBatchInActionBlock(
				batchActions = "createBatch,updateBatch,deleteBatch",
				groupName = "Guest",
				responseToParse = ${response});
		}
	}

}