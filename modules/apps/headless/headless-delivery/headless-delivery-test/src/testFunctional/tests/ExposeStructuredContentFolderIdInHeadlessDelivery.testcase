@component-name = "portal-wcm"
@disable-webdriver = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Echo Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a content structure is created in an asset library") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			WebContentNavigator.openWebContentStructuresAdmin(depotName = "Test Depot Name");

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("And Given a structured content folder is created with POST request in the asset library") {
			HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				depotName = "Test Depot Name",
				name = "Test Folder",
				setUpGlobalFolderId = "true");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@priority = 4
	test CanReturnAssetLibraryStructuredContentFolderIdWithGetStructuredContent {
		property portal.acceptance = "true";

		task ("And Given a structured content is created in the folder with POST request") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				structuredContentFolderId = ${staticStructuredContentFolderId},
				title = "WC WebContent Title");
		}

		task ("When I retrieve the structured content with GET request and structuredContentId") {
			var structuredContentId = JSONPathUtil.getIdValue(response = ${response});

			var response = HeadlessWebcontentAPI.getStructuredContentsWithDifferentParameters(
				headlessComponent = "headless-delivery",
				structuredContentId = ${structuredContentId});
		}

		task ("Then I can see structuredContentFolderId in the response equals to the id of the folder where the structured content is stored") {
			var actualStructuredContentFolderId = JSONUtil.getWithJSONPath(${response}, "$.structuredContentFolderId");

			TestUtils.assertEquals(
				actual = ${actualStructuredContentFolderId},
				expected = ${staticStructuredContentFolderId});
		}
	}

	@priority = 4
	test CanReturnAssetLibraryStructuredContentSubfolderIdWithGetStructuredContent {
		property portal.acceptance = "true";

		task ("And Given a subfolder is created with POST request and parentStructuredContentFolderId") {
			var response = HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				name = "Sub Folder",
				parentStructuredContentFolderId = ${staticStructuredContentFolderId});

			var subfolderId = JSONPathUtil.getIdValue(response = ${response});
		}

		task ("And Given a structured content is created in the subfolder with POST request") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				structuredContentFolderId = ${subfolderId},
				title = "Web Content Title");
		}

		task ("When I retrieve the structured content with GET request and structuredContentId") {
			var structuredContentId = JSONPathUtil.getIdValue(response = ${response});

			var response = HeadlessWebcontentAPI.getStructuredContentsWithDifferentParameters(
				headlessComponent = "headless-delivery",
				structuredContentId = ${structuredContentId});
		}

		task ("Then I can see structuredContentFolderId in the response equals to the id of the subfolder where the structured content is stored") {
			var actualStructuredContentFolderId = JSONUtil.getWithJSONPath(${response}, "$.structuredContentFolderId");

			TestUtils.assertEquals(
				actual = ${actualStructuredContentFolderId},
				expected = ${subfolderId});
		}
	}

	@priority = 4
	test CanReturnUpdatedAssetLibraryStructuredContentFolderIdWithGetStructuredContent {
		property portal.acceptance = "true";

		task ("And Given another structured content folder is created with POST request in the asset library") {
			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				depotName = "Test Depot Name",
				name = "Second Folder");

			var idOfSecondStructuredContentFolder = JSONPathUtil.getIdValue(response = ${response});
		}

		task ("And Given a structured content is created in a folder with POST request") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				structuredContentFolderId = ${staticStructuredContentFolderId},
				title = "Web Content Title");
		}

		task ("And Given the structured content is moved into another folder through UI") {
			WebContentNavigator.openFolderInWebContentAdmin(
				depotName = "Test Depot Name",
				folderId = ${staticStructuredContentFolderId});

			WebContent.moveToFolderCP(
				folderName = "Second Folder",
				webContentTitle = "Web Content Title");
		}

		task ("When I retrieve the structured content with GET request and structuredContentId") {
			var structuredContentId = JSONPathUtil.getIdValue(response = ${response});

			var response = HeadlessWebcontentAPI.getStructuredContentsWithDifferentParameters(
				headlessComponent = "headless-delivery",
				structuredContentId = ${structuredContentId});
		}

		task ("Then I can see structuredContentFolderId in the response equals to id of the second folder") {
			var actualStructuredContentFolderId = JSONUtil.getWithJSONPath(${response}, "$.structuredContentFolderId");

			TestUtils.assertEquals(
				actual = ${actualStructuredContentFolderId},
				expected = ${idOfSecondStructuredContentFolder});
		}
	}

}