@component-name = "portal-lima"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Lima Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@description = "Document is deleted in an asset library by custom erc"
	@priority = 4
	test CanDeleteDocumentInAssetLibraryByAssetLibraryIdAndCustomErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When I make a DELETE request by assetLibraryId and custom erc") {
			DocumentAPI.deleteDocumentInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc");
		}

		task ("Then the document is correctly deleted") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 0,
				filtervalue = "title%20eq%20%27Document_1.txt%27");
		}
	}

	@description = "Document is deleted in an asset library by default erc"
	@priority = 4
	test CanDeleteDocumentInAssetLibraryByAssetLibraryIdAndDefaultErc {
		property portal.acceptance = "true";

		task ("Given a document without custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var response = DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				filePath = ${filePath});
		}

		task ("When I make a DELETE request by assetLibraryId and UUID as the erc") {
			var documentUuid = DocumentAPI.getUuidOfCreatedDocument(responseToParse = ${response});

			DocumentAPI.deleteDocumentInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				responseToParse = ${response});
		}

		task ("Then the document is correctly deleted") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 0,
				filtervalue = "title%20eq%20%27Document_1.txt%27");
		}
	}

	@description = "Get document in asset library by existing custom erc"
	@priority = 5
	test CanGetDocumentInAssetLibraryByExistingCustomErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When I make a GET request by assetLibraryId and erc") {
			var response = DocumentAPI.getDocumentsByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc");
		}

		task ("Then I receive a correct body response") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "erc",
				responseToParse = ${response});
		}
	}

	@description = "Get document in asset library by existing uuid as erc"
	@priority = 5
	test CanGetDocumentInAssetLibraryByExistingUuidAsErc {
		property portal.acceptance = "true";

		task ("Given a document without a custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var response = DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				filePath = ${filePath});
		}

		task ("When I make a GET request by assetLibraryId and UUID as the erc") {
			var documentUuid = DocumentAPI.getUuidOfCreatedDocument(responseToParse = ${response});

			var response = DocumentAPI.getDocumentsByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = ${documentUuid});
		}

		task ("Then I receive a correct body response") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = ${documentUuid},
				responseToParse = ${response});
		}
	}

	@description = "Document is not able to create with an existing erc in asset library"
	@priority = 5
	test CannotCreateDocumentInAssetLibraryWithExistingErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When with POST I create another document with an existing erc") {
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_2.txt");

			var response = DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("Then I receive duplicate external reference code response") {
			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Duplicate file entry external reference code erc");
		}

		task ("And Then another document with same erc is not being created") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 0,
				filtervalue = "title%20eq%20%27Document_2.txt%27");
		}
	}

	@description = "Document erc is not able to update with put request in asset library"
	@priority = 5
	test CannotUpdateDocumentErcInAssetLibraryByErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created in asset library with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When I make a PUT request by assetLibraryId and erc with an erc modified in the body") {
			var response = DocumentAPI.updateDocumentByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				title = "title",
				updateExternalReferenceCode = "update-erc");
		}

		task ("Then the erc in the response body is not changed") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "erc",
				responseToParse = ${response});
		}

		task ("And Then another document with an erc being the modified value is not being created") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 1,
				filtervalue = "title%20eq%20%27title%27");
		}
	}

	@description = "Unable to get document by nonexistent assetLibraryId"
	@priority = 4
	test CanReturnErrorWithGetDocumentInAssetLibraryByNonexistentAssetLibraryId {
		property portal.acceptance = "true";

		task ("When I make a GET request by non-existent assetLibraryID and a erc") {
			var response = DocumentAPI.getDocumentsByErcInAssetLibrary(
				assetLibraryId = "nonexistentId",
				externalReferenceCode = "erc");
		}

		task ("Then I receive not found error response") {
			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "NOT_FOUND");
		}

		task ("And Then I receive error message in server console") {
			AssertConsoleTextPresent(value1 = "Unable to get a valid asset library with ID nonexistentId");
		}
	}

	@description = "Unable to get document by nonexistent erc"
	@priority = 4
	test CanReturnErrorWithGetDocumentInAssetLibraryByNonexistentErc {
		property portal.acceptance = "true";

		task ("When I make a GET request by assetLibraryID and non-existent erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = DocumentAPI.getDocumentsByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "nonexistent-erc");
		}

		task ("Then I receive error message in response") {
			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "No DLFileEntry exists with the key");
		}
	}

	@description = "Document is updated by asset library id and erc"
	@priority = 5
	test CanUpdateDocumentTitleInAssetLibraryByErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created in asset library with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When I make a PUT request by assetLibraryId and erc") {
			var response = DocumentAPI.updateDocumentByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				title = "updated title");
		}

		task ("Then I receive a correct body response with updated title") {
			var documentTitle = DocumentAPI.getTitleOfDocument(responseToParse = ${response});

			TestUtils.assertEquals(
				actual = ${documentTitle},
				expected = "updated title");
		}

		task ("And Then the document is correctly updated") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 1,
				filtervalue = "title%20eq%20%27updated%20title%27");
		}
	}

	@description = "Document is not able to delete in an asset library by nonexistent erc"
	@priority = 3
	test DocumentDeletionImpossibleByAssetLibraryIdAndNonexistentErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var documentId = DocumentAPI.getIdOfCreatedDocument(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When I make a DELETE request by assetLibraryId and use internal ID as erc") {
			DocumentAPI.deleteDocumentInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = ${documentId});
		}

		task ("Then the document with a custom erc created earlier still exists") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 1,
				filtervalue = "title%20eq%20%27Document_1.txt%27");
		}
	}

	@description = "Document is created by nonexistent erc in asset with put request"
	@priority = 5
	test DocumentIsCreatedInAssetLibraryByPutNonexistentErc {
		property portal.acceptance = "true";

		task ("When I make a PUT request by assetLibraryId and a non-existent erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var response = DocumentAPI.updateDocumentByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "nonexistent-erc",
				filePath = ${filePath});
		}

		task ("Then its erc matches the inserted one") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "nonexistent-erc",
				responseToParse = ${response});
		}

		task ("And Then a document is being created") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 1,
				filtervalue = "title%20eq%20%27Document_1.txt%27");
		}
	}

	@description = "Document is created by nonexistent erc with existing erc in body by put request"
	@priority = 5
	test DocumentIsCreatedInAssetLibraryByPutNonexistentErcWithErcInBody {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created in asset library with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When I make a PUT request by assetLibraryId and a non-existent erc with exsiting erc in the body") {
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_2.txt");

			var response = DocumentAPI.updateDocumentByErcInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "nonexistent-erc",
				filePath = ${filePath},
				title = "Document_2.txt",
				updateExternalReferenceCode = "erc");
		}

		task ("Then its erc matches the inserted one") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "nonexistent-erc",
				responseToParse = ${response});
		}

		task ("And Then a document is being created") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 1,
				filtervalue = "title%20eq%20%27Document_2.txt%27");
		}
	}

	@description = "Document is created in an asset library with custom erc"
	@priority = 5
	test DocumentIsCreatedInAssetLibraryWithCustomErc {
		property portal.acceptance = "true";

		task ("When with POST request I create a new document with a custom erc in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var response = DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("Then the document is being created with custom erc in the body response") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "erc",
				responseToParse = ${response});
		}
	}

	@description = "Document is created in an asset library with previous document id as erc"
	@priority = 5
	test DocumentIsCreatedInAssetLibraryWithDocumentIdAsErc {
		property portal.acceptance = "true";

		task ("Given a document with a custom erc is created with a POST request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var documentId = DocumentAPI.getIdOfCreatedDocument(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				filePath = ${filePath});
		}

		task ("When with POST request I create a document with a custom erc equals to the internal id of the previously created document") {
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_2.txt");

			var response = DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = ${documentId},
				filePath = ${filePath});
		}

		task ("Then I can see erc equals to the id in the body response") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = ${documentId},
				responseToParse = ${response});
		}

		task ("And Then the document is created properly") {
			DocumentAPI.assertProperDocumentTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedDocumentTotalCount = 1,
				filtervalue = "title%20eq%20%27Document_2.txt%27");
		}
	}

	@description = "Document is created in an asset library with erc by default"
	@priority = 5
	test DocumentIsCreatedInAssetLibraryWithErcByDefault {
		property portal.acceptance = "true";

		task ("When with POST request I create a new document without a custom erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var response = DocumentAPI.addDocumentInAssetLibraryByUploadFile(
				assetLibraryId = ${assetLibraryId},
				filePath = ${filePath});
		}

		task ("Then the document is being created with erc value equals to uuid in the body response") {
			DocumentAPI.assertExternalReferenceCodeWithCorrectValue(responseToParse = ${response});
		}
	}

}