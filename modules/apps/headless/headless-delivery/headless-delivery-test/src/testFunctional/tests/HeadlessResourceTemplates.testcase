@component-name = "portal-headless"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogPostingAPI.deleteAllBlogPostings();

			PagesAdmin.tearDownCP();

			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "guest");

			while (IsElementNotPresent(locator1 = "Message#EMPTY_INFO", value1 = "There are no templates.")) {
				ApplicationDisplayTemplates.deleteCP(widgetTemplateName = "Blogs Test ADT");
			}

			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "guest");

			while (IsElementNotPresent(locator1 = "Message#EMPTY_INFO", value1 = "There are no templates.")) {
				InformationTemplates.deleteCP(informationTemplateName = "University");
			}

			Navigator.gotoPage(pageName = "Home");

			while (IsElementPresent(locator1 = "Navigation#ANY_SITE_NAV_BUT_HOME")) {
				var layoutName = selenium.getText("Navigation#ANY_SITE_NAV_BUT_HOME");

				JSONLayout.deletePublicLayout(
					groupName = "Guest",
					layoutName = "${layoutName}");

				Navigator.gotoPage(pageName = "Home");

				PortalInstances.tearDownCP();
			}

			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@priority = "4"
	test CanUseObjectsInsideTemplates {
		property portal.acceptance = "true";

		task ("Given a University object is created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "University",
				en_US_plural_label = "Universities",
				name = "University",
				requiredStringFieldName = "name");
		}

		task ("And Given University entry created") {
			var objectDefinitionEntryId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("And Given an information template with getObjectEntriesPage created") {
			InformationTemplates.openInformationTemplatesAdmin(siteURLKey = "guest");

			InformationTemplates.addCP(
				informationTemplateName = "University",
				itemType = "University");

			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			var filePath = TestCase.getDependenciesDirPath(fileName = "adt_objects.ftl");

			UploadFile(
				inputFieldId = "importScript",
				locator1 = "TextInput#INPUT_ID",
				value1 = "${filePath}");

			PortletEntry.save();
		}

		task ("When mapping the item of a fragment with the template") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Blank Display Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Blank Display Page",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "University ${objectDefinitionEntryId}",
				navItem = "Universities",
				rowItem = "//*[contains(@data-qa-id,'rowItemContent')]//*[contains(.,'${objectDefinitionEntryId}')]");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "University");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("Then getObjectEntriesPage displayed correctly on the Page with the fragment") {
			Navigator.gotoSitePage(
				pageName = "Blank Display Page",
				siteName = "Guest");

			AssertTextEquals.assertPartialText(
				fragmentName = "component-paragraph",
				locator1 = "Fragment#FRAGMENT_ANY_TEXT",
				value1 = "Liferay University");
		}
	}

	@priority = "4"
	test CanUseServicesInsideTemplates {
		property portal.acceptance = "true";

		task ("Given three blog postings created") {
			BlogPostingAPI.getIdOfCreateNBlogPostingBatchEngineImportTask(
				createStrategy = "UPSERT",
				numberOfBlogPostings = "3");
		}

		task ("And Given a template that will print the blog postings headlines sorted desc and filtered by creator name") {
			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "guest");

			ApplicationDisplayTemplates.addCP(
				adtFile = "adt_blogs_sort.ftl",
				adtType = "Blogs");
		}

		task ("When adding a template to a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Blogs Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Blogs Page",
				widgetName = "Blogs");

			Navigator.gotoPage(pageName = "Blogs Page");

			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Blogs",
				templateName = "Blogs Test ADT");
		}

		task ("Then blog posting headlines are visible and in the correct order") {
			AssertTextEquals(
				key_portletName = "Blogs",
				locator1 = "Portlet#BODY",
				value1 = "headline2 headline1 headline0");
		}
	}

}