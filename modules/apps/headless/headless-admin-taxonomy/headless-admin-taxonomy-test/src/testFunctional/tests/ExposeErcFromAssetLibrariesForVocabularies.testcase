@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Echo Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@priority = 5
	test CanCreateVocabularyWithCustomErc {
		property portal.acceptance = "true";

		task ("When user makes a PUT request to create a vocabulary with assetLibraryId and a custom ERC") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = TaxonomyVocabularyAPI.updateTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				externalReferenceCodeInBody = "erc-in-body",
				name = "Vocabulary Name");
		}

		task ("Then a vocabulary is created with the custom ERC in response body") {
			var actualExternalReferenceCode = JSONPathUtil.getErcValue(response = ${response});

			TestUtils.assertEquals(
				actual = ${actualExternalReferenceCode},
				expected = "erc");
		}
	}

	@priority = 5
	test CanCreateVocabularyWithNonExistentErc {
		property portal.acceptance = "true";

		task ("When user makes a PUT request to create a vocabulary with assetLibraryId and no ERC specified in the body") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = TaxonomyVocabularyAPI.updateTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "nonexistent-erc",
				name = "Vocabulary Name");
		}

		task ("Then a vocabulary is created with a generated ERC in response body") {
			var actualExternalReferenceCode = JSONPathUtil.getErcValue(response = ${response});

			TestUtils.assertEquals(
				actual = ${actualExternalReferenceCode},
				expected = "nonexistent-erc");
		}
	}

	@priority = 5
	test CanDeleteVocabularyByErc {
		property portal.acceptance = "true";

		task ("Given an existing vocabulary with ERC") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			TaxonomyVocabularyAPI.createTaxonomyVocabulary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				name = "Vocabulary Name");
		}

		task ("When user makes a DELETE request to delete the vocabulary with ERC") {
			TaxonomyVocabularyAPI.deleteTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc");
		}

		task ("Then the vocabulary is deleted") {
			TaxonomyVocabularyAPI.assertProperVocabularyTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedTotalCount = 0,
				filterValue = "name%20eq%20%27Vocabulary%20Name%27");
		}
	}

	@priority = 5
	test CanGetVocabularyByErc {
		property portal.acceptance = "true";

		task ("Given an existing vocabulary with ERC") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			TaxonomyVocabularyAPI.createTaxonomyVocabulary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				name = "Vocabulary Name");
		}

		task ("When user makes a GET request to retrieve the vocabulary with assetLibraryId and ERC") {
			var response = TaxonomyVocabularyAPI.getTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc");
		}

		task ("Then a vocabulary is retrieved with the ERC in response body") {
			var actualExternalReferenceCodeValue = TaxonomyVocabularyAPI.getElementOfCreatedVocabulary(
				element = "$..externalReferenceCode",
				responseToParse = ${response});

			TestUtils.assertEquals(
				actual = ${actualExternalReferenceCodeValue},
				expected = "erc");
		}
	}

	@priority = 3
	test CannotDeleteVocabularyWithNonExistentErc {
		property portal.acceptance = "true";

		task ("Given an existing vocabulary with ERC") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			TaxonomyVocabularyAPI.createTaxonomyVocabulary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				name = "Vocabulary Name");
		}

		task ("When user makes a DELETE request to delete the vocabulary with a nonexisting ERC") {
			TaxonomyVocabularyAPI.deleteTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "nonexistent-erc");
		}

		task ("Then existing vocabularies are still present") {
			TaxonomyVocabularyAPI.assertProperVocabularyTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedTotalCount = 1,
				filterValue = "name%20eq%20%27Vocabulary%20Name%27");
		}
	}

	@priority = 3
	test CanReturnErrorWithGetVocabularyWithNonExistingErc {
		property portal.acceptance = "true";

		task ("When user makes a GET request to retrieve the vocabulary with assetLibraryId and a nonexisting ERC") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = TaxonomyVocabularyAPI.getTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "nonexistent-erc");
		}

		task ("Then response body is No AssetVocabulary exists with the key {groupId=${GROUPID}, externalReferenceCode=${ERC}}") {
			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "No AssetVocabulary exists with the key");
		}
	}

	@priority = 5
	test CanUpdateVocabularyByErc {
		property portal.acceptance = "true";

		task ("Given an existing vocabulary") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			TaxonomyVocabularyAPI.createTaxonomyVocabulary(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				name = "Vocabulary Name");
		}

		task ("When user makes a PUT request to update the vocabulary name with assetLibraryId and ERC") {
			var response = TaxonomyVocabularyAPI.updateTaxonomyVocabularyByErc(
				assetLibraryId = ${assetLibraryId},
				externalReferenceCode = "erc",
				name = "Update Vocabulary Name");
		}

		task ("Then the vocabulary name is updated with the ERC in response body") {
			var actualName = TaxonomyVocabularyAPI.getElementOfCreatedVocabulary(
				element = "$.name",
				responseToParse = ${response});

			TestUtils.assertEquals(
				actual = ${actualName},
				expected = "Update Vocabulary Name");
		}

		task ("And Then the previous vocabulary name is not present") {
			TaxonomyVocabularyAPI.assertProperVocabularyTotalCount(
				assetLibraryId = ${assetLibraryId},
				expectedTotalCount = 0,
				filterValue = "name%20eq%20%27Vocabulary%20Name%27");
		}
	}

}