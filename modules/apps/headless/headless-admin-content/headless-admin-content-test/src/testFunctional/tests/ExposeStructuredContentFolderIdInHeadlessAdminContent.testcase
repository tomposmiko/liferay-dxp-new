@component-name = "portal-wcm"
@disable-webdriver = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Echo Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a content structure is created in an asset library") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			WebContentNavigator.openWebContentStructuresAdminInAssetLibrary(depotId = ${assetLibraryId});

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("And Given a structured content folder is created with POST request in the asset library") {
			HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				name = "Test Folder",
				setUpGlobalFolderId = "true");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@priority = 4
	test CanReturnAssetLibraryStructuredContentFolderIdWithGetStructuredContentByVersion {
		property portal.acceptance = "true";

		task ("And Given a structured content is created in the folder with POST request") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				structuredContentFolderId = ${staticStructuredContentFolderId},
				title = "Web Content Title");
		}

		task ("When I retrieve the structured content by version with GET request and structuredContentId") {
			var structuredContentId = JSONUtil.getWithJSONPath(${response}, "$.id");

			var response = HeadlessWebcontentAPI.versionStructureContent(
				structuredContentId = ${structuredContentId},
				versionvalue = "1.0");
		}

		task ("Then I can see structuredContentFolderId in the response equals to the id of the folder where the structured content is stored") {
			var actualStructuredContentFolderId = JSONUtil.getWithJSONPath(${response}, "$.structuredContentFolderId");

			TestUtils.assertEquals(
				actual = ${actualStructuredContentFolderId},
				expected = ${staticStructuredContentFolderId});
		}
	}

	@priority = 4
	test CanReturnAssetLibraryStructuredContentFolderIdWithGetStructuredContentVersion {
		property portal.acceptance = "true";

		task ("And Given a structured content is created in the folder with POST request") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				structuredContentFolderId = ${staticStructuredContentFolderId},
				title = "Web Content Title");
		}

		task ("When I retrieve the structured content version with GET request and structuredContentId") {
			var structuredContentId = JSONUtil.getWithJSONPath(${response}, "$.id");

			var response = HeadlessWebcontentAPI.versionStructureContent(structuredContentId = ${structuredContentId});
		}

		task ("Then I can see structuredContentFolderId in the response equals to the id of the folder where the structured content is stored") {
			var actualStructuredContentFolderId = JSONUtil.getWithJSONPath(${response}, "$.items..structuredContentFolderId");

			TestUtils.assertEquals(
				actual = ${actualStructuredContentFolderId},
				expected = ${staticStructuredContentFolderId});
		}
	}

	@priority = 4
	test CanReturnUpdatedAssetLibraryStructuredContentFolderIdWithGetStructuredContentVersion {
		property portal.acceptance = "true";

		task ("And Given another structured content folder is created with POST request in the asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = ${assetLibraryId},
				name = "Second Folder");

			var idOfSecondStructuredContentFolder = JSONUtil.getWithJSONPath(${response}, "$.id");
		}

		task ("And Given a structured content is created in a folder with POST request") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = ${ddmStructureId},
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				structuredContentFolderId = ${staticStructuredContentFolderId},
				title = "Web Content Title");
		}

		task ("And Given the structured content is moved into another folder through UI") {
			Navigator.openWithAppendToBaseURL(
				baseURL = ${baseURL},
				urlAppend = "group/asset-library-${assetLibraryId}/~/control_panel/manage?p_p_id=com_liferay_journal_web_portlet_JournalPortlet&_com_liferay_journal_web_portlet_JournalPortlet_folderId=${staticStructuredContentFolderId}");

			WebContent.moveToFolderCP(
				folderName = "Second Folder",
				webContentTitle = "Web Content Title");
		}

		task ("When I retrieve the structured content version with GET request and structuredContentId") {
			var structuredContentId = JSONUtil.getWithJSONPath(${response}, "$.id");

			var response = HeadlessWebcontentAPI.versionStructureContent(structuredContentId = ${structuredContentId});
		}

		task ("Then I can see structuredContentFolderId in the response equals to the id of the folder where the structured content is stored") {
			var actualStructuredContentFolderId = JSONUtil.getWithJSONPath(${response}, "$.items..structuredContentFolderId");

			TestUtils.assertEquals(
				actual = ${actualStructuredContentFolderId},
				expected = ${idOfSecondStructuredContentFolder});
		}
	}

}