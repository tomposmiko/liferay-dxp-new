/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.calendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.calendar.model.CalendarBooking;
import com.liferay.calendar.model.CalendarBookingModel;
import com.liferay.calendar.model.CalendarBookingSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CalendarBooking service. Represents a row in the &quot;CalendarBooking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CalendarBookingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CalendarBookingImpl}.
 * </p>
 *
 * @author Eduardo Lundgren
 * @see CalendarBookingImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CalendarBookingModelImpl
	extends BaseModelImpl<CalendarBooking> implements CalendarBookingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a calendar booking model instance should use the <code>CalendarBooking</code> interface instead.
	 */
	public static final String TABLE_NAME = "CalendarBooking";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"calendarBookingId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"calendarId", Types.BIGINT}, {"calendarResourceId", Types.BIGINT},
		{"parentCalendarBookingId", Types.BIGINT},
		{"recurringCalendarBookingId", Types.BIGINT},
		{"vEventUid", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"description", Types.CLOB}, {"location", Types.VARCHAR},
		{"startTime", Types.BIGINT}, {"endTime", Types.BIGINT},
		{"allDay", Types.BOOLEAN}, {"recurrence", Types.VARCHAR},
		{"firstReminder", Types.BIGINT}, {"firstReminderType", Types.VARCHAR},
		{"secondReminder", Types.BIGINT}, {"secondReminderType", Types.VARCHAR},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("calendarBookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("calendarId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("calendarResourceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentCalendarBookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("recurringCalendarBookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vEventUid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("endTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("allDay", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("recurrence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstReminder", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstReminderType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondReminder", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("secondReminderType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CalendarBooking (uuid_ VARCHAR(75) null,calendarBookingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,calendarId LONG,calendarResourceId LONG,parentCalendarBookingId LONG,recurringCalendarBookingId LONG,vEventUid VARCHAR(255) null,title STRING null,description TEXT null,location STRING null,startTime LONG,endTime LONG,allDay BOOLEAN,recurrence STRING null,firstReminder LONG,firstReminderType VARCHAR(75) null,secondReminder LONG,secondReminderType VARCHAR(75) null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table CalendarBooking";

	public static final String ORDER_BY_JPQL =
		" ORDER BY calendarBooking.startTime ASC, calendarBooking.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CalendarBooking.startTime ASC, CalendarBooking.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CALENDARID_COLUMN_BITMASK = 1L;

	public static final long CALENDARRESOURCEID_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long PARENTCALENDARBOOKINGID_COLUMN_BITMASK = 16L;

	public static final long RECURRINGCALENDARBOOKINGID_COLUMN_BITMASK = 32L;

	public static final long STATUS_COLUMN_BITMASK = 64L;

	public static final long UUID_COLUMN_BITMASK = 128L;

	public static final long VEVENTUID_COLUMN_BITMASK = 256L;

	public static final long STARTTIME_COLUMN_BITMASK = 512L;

	public static final long TITLE_COLUMN_BITMASK = 1024L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CalendarBooking toModel(CalendarBookingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CalendarBooking model = new CalendarBookingImpl();

		model.setUuid(soapModel.getUuid());
		model.setCalendarBookingId(soapModel.getCalendarBookingId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCalendarId(soapModel.getCalendarId());
		model.setCalendarResourceId(soapModel.getCalendarResourceId());
		model.setParentCalendarBookingId(
			soapModel.getParentCalendarBookingId());
		model.setRecurringCalendarBookingId(
			soapModel.getRecurringCalendarBookingId());
		model.setVEventUid(soapModel.getVEventUid());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setLocation(soapModel.getLocation());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setAllDay(soapModel.isAllDay());
		model.setRecurrence(soapModel.getRecurrence());
		model.setFirstReminder(soapModel.getFirstReminder());
		model.setFirstReminderType(soapModel.getFirstReminderType());
		model.setSecondReminder(soapModel.getSecondReminder());
		model.setSecondReminderType(soapModel.getSecondReminderType());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CalendarBooking> toModels(
		CalendarBookingSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CalendarBooking> models = new ArrayList<CalendarBooking>(
			soapModels.length);

		for (CalendarBookingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CalendarBookingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _calendarBookingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCalendarBookingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _calendarBookingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CalendarBooking.class;
	}

	@Override
	public String getModelClassName() {
		return CalendarBooking.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CalendarBooking, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CalendarBooking, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CalendarBooking, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CalendarBooking)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CalendarBooking, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CalendarBooking, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CalendarBooking)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CalendarBooking, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CalendarBooking, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CalendarBooking, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CalendarBooking, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CalendarBooking, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<CalendarBooking, Object>>();
		Map<String, BiConsumer<CalendarBooking, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CalendarBooking, ?>>();

		attributeGetterFunctions.put("uuid", CalendarBooking::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CalendarBooking, String>)CalendarBooking::setUuid);
		attributeGetterFunctions.put(
			"calendarBookingId", CalendarBooking::getCalendarBookingId);
		attributeSetterBiConsumers.put(
			"calendarBookingId",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setCalendarBookingId);
		attributeGetterFunctions.put("groupId", CalendarBooking::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CalendarBooking, Long>)CalendarBooking::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CalendarBooking::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CalendarBooking, Long>)CalendarBooking::setCompanyId);
		attributeGetterFunctions.put("userId", CalendarBooking::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CalendarBooking, Long>)CalendarBooking::setUserId);
		attributeGetterFunctions.put("userName", CalendarBooking::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CalendarBooking, String>)CalendarBooking::setUserName);
		attributeGetterFunctions.put(
			"createDate", CalendarBooking::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CalendarBooking, Date>)CalendarBooking::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CalendarBooking::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CalendarBooking, Date>)
				CalendarBooking::setModifiedDate);
		attributeGetterFunctions.put(
			"calendarId", CalendarBooking::getCalendarId);
		attributeSetterBiConsumers.put(
			"calendarId",
			(BiConsumer<CalendarBooking, Long>)CalendarBooking::setCalendarId);
		attributeGetterFunctions.put(
			"calendarResourceId", CalendarBooking::getCalendarResourceId);
		attributeSetterBiConsumers.put(
			"calendarResourceId",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setCalendarResourceId);
		attributeGetterFunctions.put(
			"parentCalendarBookingId",
			CalendarBooking::getParentCalendarBookingId);
		attributeSetterBiConsumers.put(
			"parentCalendarBookingId",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setParentCalendarBookingId);
		attributeGetterFunctions.put(
			"recurringCalendarBookingId",
			CalendarBooking::getRecurringCalendarBookingId);
		attributeSetterBiConsumers.put(
			"recurringCalendarBookingId",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setRecurringCalendarBookingId);
		attributeGetterFunctions.put(
			"vEventUid", CalendarBooking::getVEventUid);
		attributeSetterBiConsumers.put(
			"vEventUid",
			(BiConsumer<CalendarBooking, String>)CalendarBooking::setVEventUid);
		attributeGetterFunctions.put("title", CalendarBooking::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<CalendarBooking, String>)CalendarBooking::setTitle);
		attributeGetterFunctions.put(
			"description", CalendarBooking::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<CalendarBooking, String>)
				CalendarBooking::setDescription);
		attributeGetterFunctions.put("location", CalendarBooking::getLocation);
		attributeSetterBiConsumers.put(
			"location",
			(BiConsumer<CalendarBooking, String>)CalendarBooking::setLocation);
		attributeGetterFunctions.put(
			"startTime", CalendarBooking::getStartTime);
		attributeSetterBiConsumers.put(
			"startTime",
			(BiConsumer<CalendarBooking, Long>)CalendarBooking::setStartTime);
		attributeGetterFunctions.put("endTime", CalendarBooking::getEndTime);
		attributeSetterBiConsumers.put(
			"endTime",
			(BiConsumer<CalendarBooking, Long>)CalendarBooking::setEndTime);
		attributeGetterFunctions.put("allDay", CalendarBooking::getAllDay);
		attributeSetterBiConsumers.put(
			"allDay",
			(BiConsumer<CalendarBooking, Boolean>)CalendarBooking::setAllDay);
		attributeGetterFunctions.put(
			"recurrence", CalendarBooking::getRecurrence);
		attributeSetterBiConsumers.put(
			"recurrence",
			(BiConsumer<CalendarBooking, String>)
				CalendarBooking::setRecurrence);
		attributeGetterFunctions.put(
			"firstReminder", CalendarBooking::getFirstReminder);
		attributeSetterBiConsumers.put(
			"firstReminder",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setFirstReminder);
		attributeGetterFunctions.put(
			"firstReminderType", CalendarBooking::getFirstReminderType);
		attributeSetterBiConsumers.put(
			"firstReminderType",
			(BiConsumer<CalendarBooking, String>)
				CalendarBooking::setFirstReminderType);
		attributeGetterFunctions.put(
			"secondReminder", CalendarBooking::getSecondReminder);
		attributeSetterBiConsumers.put(
			"secondReminder",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setSecondReminder);
		attributeGetterFunctions.put(
			"secondReminderType", CalendarBooking::getSecondReminderType);
		attributeSetterBiConsumers.put(
			"secondReminderType",
			(BiConsumer<CalendarBooking, String>)
				CalendarBooking::setSecondReminderType);
		attributeGetterFunctions.put(
			"lastPublishDate", CalendarBooking::getLastPublishDate);
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			(BiConsumer<CalendarBooking, Date>)
				CalendarBooking::setLastPublishDate);
		attributeGetterFunctions.put("status", CalendarBooking::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<CalendarBooking, Integer>)CalendarBooking::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", CalendarBooking::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<CalendarBooking, Long>)
				CalendarBooking::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", CalendarBooking::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<CalendarBooking, String>)
				CalendarBooking::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", CalendarBooking::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<CalendarBooking, Date>)CalendarBooking::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCalendarBookingId() {
		return _calendarBookingId;
	}

	@Override
	public void setCalendarBookingId(long calendarBookingId) {
		_calendarBookingId = calendarBookingId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCalendarId() {
		return _calendarId;
	}

	@Override
	public void setCalendarId(long calendarId) {
		_columnBitmask |= CALENDARID_COLUMN_BITMASK;

		if (!_setOriginalCalendarId) {
			_setOriginalCalendarId = true;

			_originalCalendarId = _calendarId;
		}

		_calendarId = calendarId;
	}

	public long getOriginalCalendarId() {
		return _originalCalendarId;
	}

	@JSON
	@Override
	public long getCalendarResourceId() {
		return _calendarResourceId;
	}

	@Override
	public void setCalendarResourceId(long calendarResourceId) {
		_columnBitmask |= CALENDARRESOURCEID_COLUMN_BITMASK;

		if (!_setOriginalCalendarResourceId) {
			_setOriginalCalendarResourceId = true;

			_originalCalendarResourceId = _calendarResourceId;
		}

		_calendarResourceId = calendarResourceId;
	}

	public long getOriginalCalendarResourceId() {
		return _originalCalendarResourceId;
	}

	@JSON
	@Override
	public long getParentCalendarBookingId() {
		return _parentCalendarBookingId;
	}

	@Override
	public void setParentCalendarBookingId(long parentCalendarBookingId) {
		_columnBitmask |= PARENTCALENDARBOOKINGID_COLUMN_BITMASK;

		if (!_setOriginalParentCalendarBookingId) {
			_setOriginalParentCalendarBookingId = true;

			_originalParentCalendarBookingId = _parentCalendarBookingId;
		}

		_parentCalendarBookingId = parentCalendarBookingId;
	}

	public long getOriginalParentCalendarBookingId() {
		return _originalParentCalendarBookingId;
	}

	@JSON
	@Override
	public long getRecurringCalendarBookingId() {
		return _recurringCalendarBookingId;
	}

	@Override
	public void setRecurringCalendarBookingId(long recurringCalendarBookingId) {
		_columnBitmask |= RECURRINGCALENDARBOOKINGID_COLUMN_BITMASK;

		if (!_setOriginalRecurringCalendarBookingId) {
			_setOriginalRecurringCalendarBookingId = true;

			_originalRecurringCalendarBookingId = _recurringCalendarBookingId;
		}

		_recurringCalendarBookingId = recurringCalendarBookingId;
	}

	public long getOriginalRecurringCalendarBookingId() {
		return _originalRecurringCalendarBookingId;
	}

	@JSON
	@Override
	public String getVEventUid() {
		if (_vEventUid == null) {
			return "";
		}
		else {
			return _vEventUid;
		}
	}

	@Override
	public void setVEventUid(String vEventUid) {
		_columnBitmask |= VEVENTUID_COLUMN_BITMASK;

		if (_originalVEventUid == null) {
			_originalVEventUid = _vEventUid;
		}

		_vEventUid = vEventUid;
	}

	public String getOriginalVEventUid() {
		return GetterUtil.getString(_originalVEventUid);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public long getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(long startTime) {
		_columnBitmask = -1L;

		_startTime = startTime;
	}

	@JSON
	@Override
	public long getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(long endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public boolean getAllDay() {
		return _allDay;
	}

	@JSON
	@Override
	public boolean isAllDay() {
		return _allDay;
	}

	@Override
	public void setAllDay(boolean allDay) {
		_allDay = allDay;
	}

	@JSON
	@Override
	public String getRecurrence() {
		if (_recurrence == null) {
			return "";
		}
		else {
			return _recurrence;
		}
	}

	@Override
	public void setRecurrence(String recurrence) {
		_recurrence = recurrence;
	}

	@JSON
	@Override
	public long getFirstReminder() {
		return _firstReminder;
	}

	@Override
	public void setFirstReminder(long firstReminder) {
		_firstReminder = firstReminder;
	}

	@JSON
	@Override
	public String getFirstReminderType() {
		if (_firstReminderType == null) {
			return "";
		}
		else {
			return _firstReminderType;
		}
	}

	@Override
	public void setFirstReminderType(String firstReminderType) {
		_firstReminderType = firstReminderType;
	}

	@JSON
	@Override
	public long getSecondReminder() {
		return _secondReminder;
	}

	@Override
	public void setSecondReminder(long secondReminder) {
		_secondReminder = secondReminder;
	}

	@JSON
	@Override
	public String getSecondReminderType() {
		if (_secondReminderType == null) {
			return "";
		}
		else {
			return _secondReminderType;
		}
	}

	@Override
	public void setSecondReminderType(String secondReminderType) {
		_secondReminderType = secondReminderType;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CalendarBooking.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CalendarBooking.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CalendarBooking.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CalendarBooking toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CalendarBooking)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CalendarBookingImpl calendarBookingImpl = new CalendarBookingImpl();

		calendarBookingImpl.setUuid(getUuid());
		calendarBookingImpl.setCalendarBookingId(getCalendarBookingId());
		calendarBookingImpl.setGroupId(getGroupId());
		calendarBookingImpl.setCompanyId(getCompanyId());
		calendarBookingImpl.setUserId(getUserId());
		calendarBookingImpl.setUserName(getUserName());
		calendarBookingImpl.setCreateDate(getCreateDate());
		calendarBookingImpl.setModifiedDate(getModifiedDate());
		calendarBookingImpl.setCalendarId(getCalendarId());
		calendarBookingImpl.setCalendarResourceId(getCalendarResourceId());
		calendarBookingImpl.setParentCalendarBookingId(
			getParentCalendarBookingId());
		calendarBookingImpl.setRecurringCalendarBookingId(
			getRecurringCalendarBookingId());
		calendarBookingImpl.setVEventUid(getVEventUid());
		calendarBookingImpl.setTitle(getTitle());
		calendarBookingImpl.setDescription(getDescription());
		calendarBookingImpl.setLocation(getLocation());
		calendarBookingImpl.setStartTime(getStartTime());
		calendarBookingImpl.setEndTime(getEndTime());
		calendarBookingImpl.setAllDay(isAllDay());
		calendarBookingImpl.setRecurrence(getRecurrence());
		calendarBookingImpl.setFirstReminder(getFirstReminder());
		calendarBookingImpl.setFirstReminderType(getFirstReminderType());
		calendarBookingImpl.setSecondReminder(getSecondReminder());
		calendarBookingImpl.setSecondReminderType(getSecondReminderType());
		calendarBookingImpl.setLastPublishDate(getLastPublishDate());
		calendarBookingImpl.setStatus(getStatus());
		calendarBookingImpl.setStatusByUserId(getStatusByUserId());
		calendarBookingImpl.setStatusByUserName(getStatusByUserName());
		calendarBookingImpl.setStatusDate(getStatusDate());

		calendarBookingImpl.resetOriginalValues();

		return calendarBookingImpl;
	}

	@Override
	public int compareTo(CalendarBooking calendarBooking) {
		int value = 0;

		if (getStartTime() < calendarBooking.getStartTime()) {
			value = -1;
		}
		else if (getStartTime() > calendarBooking.getStartTime()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getTitle().compareToIgnoreCase(calendarBooking.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CalendarBooking)) {
			return false;
		}

		CalendarBooking calendarBooking = (CalendarBooking)obj;

		long primaryKey = calendarBooking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CalendarBookingModelImpl calendarBookingModelImpl = this;

		calendarBookingModelImpl._originalUuid = calendarBookingModelImpl._uuid;

		calendarBookingModelImpl._originalGroupId =
			calendarBookingModelImpl._groupId;

		calendarBookingModelImpl._setOriginalGroupId = false;

		calendarBookingModelImpl._originalCompanyId =
			calendarBookingModelImpl._companyId;

		calendarBookingModelImpl._setOriginalCompanyId = false;

		calendarBookingModelImpl._setModifiedDate = false;

		calendarBookingModelImpl._originalCalendarId =
			calendarBookingModelImpl._calendarId;

		calendarBookingModelImpl._setOriginalCalendarId = false;

		calendarBookingModelImpl._originalCalendarResourceId =
			calendarBookingModelImpl._calendarResourceId;

		calendarBookingModelImpl._setOriginalCalendarResourceId = false;

		calendarBookingModelImpl._originalParentCalendarBookingId =
			calendarBookingModelImpl._parentCalendarBookingId;

		calendarBookingModelImpl._setOriginalParentCalendarBookingId = false;

		calendarBookingModelImpl._originalRecurringCalendarBookingId =
			calendarBookingModelImpl._recurringCalendarBookingId;

		calendarBookingModelImpl._setOriginalRecurringCalendarBookingId = false;

		calendarBookingModelImpl._originalVEventUid =
			calendarBookingModelImpl._vEventUid;

		calendarBookingModelImpl._originalStatus =
			calendarBookingModelImpl._status;

		calendarBookingModelImpl._setOriginalStatus = false;

		calendarBookingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CalendarBooking> toCacheModel() {
		CalendarBookingCacheModel calendarBookingCacheModel =
			new CalendarBookingCacheModel();

		calendarBookingCacheModel.uuid = getUuid();

		String uuid = calendarBookingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			calendarBookingCacheModel.uuid = null;
		}

		calendarBookingCacheModel.calendarBookingId = getCalendarBookingId();

		calendarBookingCacheModel.groupId = getGroupId();

		calendarBookingCacheModel.companyId = getCompanyId();

		calendarBookingCacheModel.userId = getUserId();

		calendarBookingCacheModel.userName = getUserName();

		String userName = calendarBookingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			calendarBookingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			calendarBookingCacheModel.createDate = createDate.getTime();
		}
		else {
			calendarBookingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			calendarBookingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			calendarBookingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		calendarBookingCacheModel.calendarId = getCalendarId();

		calendarBookingCacheModel.calendarResourceId = getCalendarResourceId();

		calendarBookingCacheModel.parentCalendarBookingId =
			getParentCalendarBookingId();

		calendarBookingCacheModel.recurringCalendarBookingId =
			getRecurringCalendarBookingId();

		calendarBookingCacheModel.vEventUid = getVEventUid();

		String vEventUid = calendarBookingCacheModel.vEventUid;

		if ((vEventUid != null) && (vEventUid.length() == 0)) {
			calendarBookingCacheModel.vEventUid = null;
		}

		calendarBookingCacheModel.title = getTitle();

		String title = calendarBookingCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			calendarBookingCacheModel.title = null;
		}

		calendarBookingCacheModel.description = getDescription();

		String description = calendarBookingCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			calendarBookingCacheModel.description = null;
		}

		calendarBookingCacheModel.location = getLocation();

		String location = calendarBookingCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			calendarBookingCacheModel.location = null;
		}

		calendarBookingCacheModel.startTime = getStartTime();

		calendarBookingCacheModel.endTime = getEndTime();

		calendarBookingCacheModel.allDay = isAllDay();

		calendarBookingCacheModel.recurrence = getRecurrence();

		String recurrence = calendarBookingCacheModel.recurrence;

		if ((recurrence != null) && (recurrence.length() == 0)) {
			calendarBookingCacheModel.recurrence = null;
		}

		calendarBookingCacheModel.firstReminder = getFirstReminder();

		calendarBookingCacheModel.firstReminderType = getFirstReminderType();

		String firstReminderType = calendarBookingCacheModel.firstReminderType;

		if ((firstReminderType != null) && (firstReminderType.length() == 0)) {
			calendarBookingCacheModel.firstReminderType = null;
		}

		calendarBookingCacheModel.secondReminder = getSecondReminder();

		calendarBookingCacheModel.secondReminderType = getSecondReminderType();

		String secondReminderType =
			calendarBookingCacheModel.secondReminderType;

		if ((secondReminderType != null) &&
			(secondReminderType.length() == 0)) {

			calendarBookingCacheModel.secondReminderType = null;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			calendarBookingCacheModel.lastPublishDate =
				lastPublishDate.getTime();
		}
		else {
			calendarBookingCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		calendarBookingCacheModel.status = getStatus();

		calendarBookingCacheModel.statusByUserId = getStatusByUserId();

		calendarBookingCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = calendarBookingCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			calendarBookingCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			calendarBookingCacheModel.statusDate = statusDate.getTime();
		}
		else {
			calendarBookingCacheModel.statusDate = Long.MIN_VALUE;
		}

		return calendarBookingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CalendarBooking, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CalendarBooking, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CalendarBooking, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CalendarBooking)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CalendarBooking, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CalendarBooking, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CalendarBooking, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CalendarBooking)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		CalendarBooking.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		CalendarBooking.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _calendarBookingId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _calendarId;
	private long _originalCalendarId;
	private boolean _setOriginalCalendarId;
	private long _calendarResourceId;
	private long _originalCalendarResourceId;
	private boolean _setOriginalCalendarResourceId;
	private long _parentCalendarBookingId;
	private long _originalParentCalendarBookingId;
	private boolean _setOriginalParentCalendarBookingId;
	private long _recurringCalendarBookingId;
	private long _originalRecurringCalendarBookingId;
	private boolean _setOriginalRecurringCalendarBookingId;
	private String _vEventUid;
	private String _originalVEventUid;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _location;
	private long _startTime;
	private long _endTime;
	private boolean _allDay;
	private String _recurrence;
	private long _firstReminder;
	private String _firstReminderType;
	private long _secondReminder;
	private String _secondReminderType;
	private Date _lastPublishDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private CalendarBooking _escapedModel;

}