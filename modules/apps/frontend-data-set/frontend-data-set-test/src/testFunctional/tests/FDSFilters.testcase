@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.modules.includes = "frontend-data-set-sample-web";
	property portal.acceptance = "false";
	property portal.release = "false";
	property portal.upstream = "quarantine";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Frontend Dataset";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given Frontend Dataset sample portlet") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page",
				widgetName = "Frontend Data Set Sample");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page",
				layoutTemplate = "1 Column");

			Navigator.gotoPage(pageName = "Frontend Data Set Test Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page");
		}
	}

	@description = "LPS-155309. Assert all filters can be removed."
	@priority = "4"
	test AllFiltersCanBeRemoved {
		task ("When there is a filter already established") {
			AssertElementPresent(
				key_filter = "Status: Approved, Draft",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}

		task ("Then all of them can be removed at once") {
			ClickNoError(locator1 = "FrontendDataSet#RESET_FILTERS");
		}

		task ("Then the results will be displayed updated accordingly to it") {
			AssertTextEquals(
				locator1 = "FrontendDataSet#PAGINATION_RESULTS",
				value1 = "Showing 1 to 10 of 100");
		}

		task ("And the Filters Summary boxes will be updated accordingly to it") {
			AssertElementNotPresent(
				key_filter = "Status: Approved, Draft",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}
	}

	@description = "LPS-155305. Assert results can be correctly filtered when selecting available filters."
	@priority = "5"
	test AvailableFiltersCanBeApplied {
		task ("When click on the filter button") {
			FDSFilters.openFilters();
		}

		task ("And selecting one of the available filters") {
			FDSFilters.disableStatusFilters(key_status = "Approved,Draft");

			FDSFilters.enableStatusFilters(key_status = "Pending");

			Click(locator1 = "FrontendDataSet#EDIT_FILTER_BUTTON");
		}

		task ("Then the results will be displayed accordingly to the filter selected") {
			AssertElementPresent(locator1 = "FrontendDataSet#EMPTY_FDS_TABLE_MESSAGE");
		}

		task ("And the Filters Summary boxes will be updated accordingly to it") {
			AssertElementPresent(
				key_filter = "Status: Pending",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}
	}

	@description = "LPS-155313. Assert results can be correctly filtered when exclude is enabled."
	@priority = "5"
	test ExcludeCanBeEnabled {
		task ("When click on the filter button") {
			FDSFilters.openFilters();
		}

		task ("And When adding an option from the status list filter") {
			FDSFilters.enableStatusFilters(key_status = "Approved,Draft");
		}

		task ("And When the exclude option is active") {
			Check.checkToggleSwitch(locator1 = "FrontendDataSet#EXCLUDE_TOGGLE");

			Click(locator1 = "FrontendDataSet#EDIT_FILTER_BUTTON");
		}

		task ("Then the filter will be added to the Filters Summary") {
			AssertElementPresent(
				key_filter = "Status: (Exclude) Approved, Draft",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}

		task ("And Then the results will be displayed according to the filter") {
			AssertElementPresent(locator1 = "FrontendDataSet#EMPTY_FDS_TABLE_MESSAGE");
		}
	}

	@description = "LPS-155306. Assert results can be correctly filtered by editing the filter summary boxes."
	@priority = "5"
	test FilterCanBeEdited {
		task ("When there is a filter already established") {
			AssertElementPresent(
				key_filter = "Status: Approved, Draft",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}

		task ("And clicking on the Filters Summary") {
			ClickNoError(
				key_filter = "Status: Approved, Draft",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}

		task ("And the filter is edited") {
			FDSFilters.disableStatusFilters(key_status = "Approved,Draft");

			FDSFilters.enableStatusFilters(key_status = "Pending");

			Click(locator1 = "FrontendDataSet#EDIT_FILTER_BUTTON");
		}

		task ("Then the results will be displayed updated accordingly to it") {
			AssertElementPresent(locator1 = "FrontendDataSet#EMPTY_FDS_TABLE_MESSAGE");
		}

		task ("And the Filters Summary boxes will be updated accordingly to it") {
			AssertElementPresent(
				key_filter = "Status: Pending",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}
	}

	@description = "LPS-155311. Assert the filter cannot be filtered by searching."
	@priority = "3"
	test FilterNotFound {
		task ("When clicking on the filter button") {
			FDSFilters.openFilters();
		}

		task ("And typing a key word in the category search box") {
			FDSFilters.searchFilter(searchTerm = "Pending");
		}

		task ("And there is no matching filter") {
			AssertElementNotPresent(
				key_filter = "Pending",
				locator1 = "FrontendDataSet#FILTER_OPTION");
		}

		task ("Then the user will be warned about it") {
			AssertElementPresent(locator1 = "FrontendDataSet#FILTER_WARN_MESSAGE");
		}
	}

	@description = "LPS-155303. Assert management bar will render."
	@priority = "3"
	test ManagementBarWillRender {
		task ("Then the Management Bar will be displayed correctly") {
			AssertElementPresent(locator1 = "FrontendDataSet#MANAGEMENT_BAR");

			takeScreenshot();
		}
	}

	@description = "LPS-155312. Assert results can be correctly filtered when using the status filter."
	@priority = "5"
	test StatusFilterCanBeAdded {
		task ("When click on the filter button") {
			FDSFilters.openFilters();
		}

		task ("And When adding an option from the status list filter") {
			FDSFilters.enableStatusFilters(key_status = "Pending");

			FDSFilters.disableStatusFilters(key_status = "Approved");

			Click(locator1 = "FrontendDataSet#EDIT_FILTER_BUTTON");
		}

		task ("Then the filter will be added to the Filters Summary") {
			AssertElementPresent(
				key_filter = "Status: Draft, Pending",
				locator1 = "FrontendDataSet#FILTER_SUMMARY_LABEL");
		}

		task ("And Then the results will be displayed according to the filter") {
			AssertElementPresent(locator1 = "FrontendDataSet#EMPTY_FDS_TABLE_MESSAGE");
		}
	}

}