@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-8569. Verify multiple Price Entries can be set in the same Promotion for the same SKU"
	@priority = 5
	test AllowMultiplePriceEntriesInTheSamePromotion {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property osgi.module.configuration.file.names = "com.liferay.commerce.price.list.configuration.CommercePriceEntryConfiguration.config";
		property osgi.module.configurations = "checkInterval=\"1\"";
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		// TODO COMMERCE-9089 Find alternative to having a pause to wait for a timed expiration and publication

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a new Test Promotion") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And given a Test Promotion entry for U-Joint that is set to expire in 2 minutes") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 20,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.setExpirationTime(minutesToExpire = 2);

			Button.clickSave();
		}

		task ("And given a Test Promotion entry for U-Joint that is set to publish in 3 minutes") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");

			Refresh();

			Click(
				key_rowNumber = 2,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.setPublishTime(minutesToPublish = 3);

			Button.clickSave();
		}

		task ("When the buyer navigates to the Minium Catalog") {
			Refresh();

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the U-Joint price is the first promo entry price (20.00)") {
			FrontStore.assertPromoPrice(
				basePrice = "24.00",
				productName = "U-Joint",
				promoPrice = "20.00");
		}

		task ("When the first price entry expires and the buyer views the U-Joint product") {
			while ((IsElementPresent(key_productName = "U-Joint", locator1 = "CommerceFrontStore#FS_PRODUCT_VALUE_INACTIVE_PRICE")) && (maxIterations = "40")) {

				// We need this pause for waiting for the first Promo Price to expire

				Pause(locator1 = 5000);

				Refresh();
			}
		}

		task ("Then the U-Joint price is the base price (24.00)") {
			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "24.00");
		}

		task ("When the second promo entry is published and the buyer views the U-Joint product") {
			while ((IsElementPresent(key_productName = "U-Joint", locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE")) && (maxIterations = "40")) {

				// We need this pause for waiting for the Promo Price to expire

				Pause(locator1 = 5000);

				Refresh();
			}
		}

		task ("Then the U-Joint price is the second promo entry price (10.00)") {
			FrontStore.assertPromoPrice(
				basePrice = "24.00",
				productName = "U-Joint",
				promoPrice = "10.00");
		}
	}

	@description = "This is a test for COMMERCE-10053. An error message shows up when the eligibility element is already linked"
	@priority = 3
	test CannotSelectPromotionEligibilitiesTwice {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a business account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("And an order type is created") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeName = "Order Type Test");
		}

		task ("And a promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("When the admin navigates to the promotion's entry") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion");
		}

		task ("And sets the eligibilities for the promotion") {
			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(
				accountsEligibility = "Commerce Account",
				channelsEligibility = "Minium Portal",
				orderTypesEligibility = "Order Type Test");
		}

		task ("And sets again the same eligibility for channel") {
			CommerceEntry.setEntryEligibility(
				channelsEligibility = "Minium Portal",
				unpublish = "true");
		}

		task ("Then an error message shows up") {
			Alert.viewErrorMessage(errorMessage = "The channel relation already exists.");
		}

		task ("When the admin sets again the same eligibility for account") {
			CommerceEntry.setEntryEligibility(
				accountsEligibility = "Commerce Account",
				unpublish = "true");
		}

		task ("Then an error message shows up") {
			Alert.viewErrorMessage(errorMessage = "The account relation already exists.");
		}

		task ("When the admin sets again the same eligibility for order type") {
			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type Test",
				unpublish = "true");
		}

		task ("Then an error message shows up") {
			Alert.viewErrorMessage(errorMessage = "The order type relation already exists.");
		}
	}

}