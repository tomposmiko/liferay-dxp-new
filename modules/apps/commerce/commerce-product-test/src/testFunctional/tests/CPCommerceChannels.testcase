@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6118. ActiveAllTaxCalculations"
	@priority = "3"
	test ActiveAllTaxCalculations {
		property portal.acceptance = "false";
		property portal.release = "false";

		// TODO Review
		// TODO Fix Commerce tests that are skipping portal instances - COMMERCE-6586; COMMERCE-6588

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Avalara",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		Click(
			key_entryName = "By Address",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		Click(
			key_entryName = "Remote",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		Click(
			key_entryName = "Fixed Tax Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		AssertElementPresent(
			key_entryName = "Avalara",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_ACTIVE_STATUS");

		AssertElementPresent(
			key_entryName = "By Address",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_ACTIVE_STATUS");

		AssertElementPresent(
			key_entryName = "Remote",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_ACTIVE_STATUS");

		AssertElementPresent(
			key_entryName = "Fixed Tax Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_ACTIVE_STATUS");
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AddANewDefaultPaymentMethod {
		property portal.acceptance = "false";

		// TODO COMMERCE-8534 AddANewDefaultPaymentMethod pending implementation

	}

	@description = "This is a test for COMMERCE-6116. AddShippingOptionFedEx"
	@priority = "3"
	test AddShippingOptionFedEx {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "FedEx",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			locator1 = "CommerceEntry#PAYMENT_METHODS_SIDE_PANEL_NAV_ITEMS",
			navItem = "Configuration");

		for (var labels : list "URL,Key,Password,Account Number,Meter Number") {
			Type(
				key_fieldLabel = "${labels}",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Test");
		}

		for (var key_value : list "FedEx Europe First International Priority,FedEx 1Day Freight,FedEx 2Day,FedEx 2Day AM,FedEx 2Day Freight,FedEx 3Day Freight,FedEx Distance Deferred,FedEx Express Saver,FedEx First Freight,FedEx Freight Economy,FedEx Freight Priority,FedEx Ground,FedEx Next Day Afternoon,FedEx Next Day Early Morning,FedEx Next Day End of Day,FedEx Next Day Freight,FedEx Next Day Mid-Morning,FedEx First Overnight,FedEx Ground Home Delivery,FedEx International Economy,FedEx International Economy Freight,FedEx International First,FedEx International Priority,FedEx International Priority Express,FedEx International Priority Freight,FedEx Priority Overnight,FedEx Same Day,FedEx Same Day City,FedEx Smart Post,FedEx Standard Overnight") {
			Check.checkToggleSwitch(
				checkboxName = "${key_value}",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Button.clickSave();

		Alert.viewSuccessMessage();

		Refresh();

		Click(
			key_entryName = "FedEx",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			locator1 = "CommerceEntry#PAYMENT_METHODS_SIDE_PANEL_NAV_ITEMS",
			navItem = "Configuration");

		AssertTextEquals(
			key_fieldLabel = "URL",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");
	}

	@description = "This is a test for COMMERCE-6111. AddShippingOptionFlatRate"
	@priority = "3"
	test AddShippingOptionFlatRate {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Flat Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard");

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard Description");

		Type(
			key_fieldLabel = "Amount",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1");

		Type(
			key_fieldLabel = "Priority",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6113. AddShippingOptionSettingVariableRate"
	@priority = "3"
	test AddShippingOptionSettingVariableRate {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Variable Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		CommerceEntry.AddShippingOptionVariableRate(
			key_description = "Standard Description",
			key_name = "Standard",
			key_priority = "");

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Option Settings");

		CommerceEntry.AddShippingOptionSettingsVariableRate(
			key_country = "Italy",
			key_fixedPrice = "1",
			key_priceUnitWeight = "1",
			key_region = "Roma",
			key_shippingOption = "Standard",
			key_subtotal = "1",
			key_warehouse = "Italy",
			key_weightFrom = "1",
			key_weightTo = "1",
			key_zip = "0100");

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6110. AddShippingOptionVariableRate"
	@priority = "3"
	test AddShippingOptionVariableRate {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Variable Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard");

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard Description");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6120. AddTaxRateSettingsByAddressTaxCalculation"
	@priority = "3"
	test AddTaxRateSettingsByAddressTaxCalculation {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		ScrollWebElementIntoView(
			key_nameTableChannels = "Tax Calculations",
			locator1 = "CommerceEntry#SEARCH_TABLES_CHANNELS");

		Click(
			key_entryName = "By Address",
			key_table = "Tax Calculations",
			locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Tax Rate Settings");

		WaitForElementPresent(locator1 = "Button#PLUS");

		Click(locator1 = "Button#PLUS");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		Select(
			key_fieldLabel = "Tax Category",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Normal Product");

		Type(
			key_fieldLabel = "Amount",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "20");

		Select(
			key_fieldLabel = "Country",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Italy");

		Select(
			key_fieldLabel = "Region",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Roma");

		Type(
			key_fieldLabel = "Zip",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "0100");

		Button.click(button = "Submit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6123. AddTaxRateSettingsFixedTaxRateTaxCalculation"
	@priority = "3"
	test AddTaxRateSettingsFixedTaxRateTaxCalculation {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Fixed Tax Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Tax Rates");

		Click(locator1 = "Button#PLUS");

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Select(
			key_fieldLabel = "Tax Category",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Normal Product");

		Type(
			key_fieldLabel = "Amount",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1");

		Button.clickSubmitButton();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		AssertElementPresent(
			key_entryName = "Normal Product",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");
	}

	@description = "Verify users without edit permission cannot change the currency of a channel."
	@priority = "3"
	test CanNotEditChannelCurrencyAsUserWithoutEditPermission {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Commerce account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given the buyer has permission to view a channel's configuration") {
			CommercePermissions.defineChannelPermissionsViaJSONAPI(
				roleTitle = "User",
				update = "true",
				view = "true");
		}

		task ("When the buyer logs in and goes to the Minium channel") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");
		}

		task ("Then the buyer is unable to change the channel currency code") {
			AssertElementNotPresent(
				key_title = "Currency",
				locator1 = "CommerceEntry#CATALOGS_FORM");
		}
	}

	@description = "Verify users can set and edit delivery term eligibility for shipping options."
	@priority = "3"
	test CanSetAndEditDeliveryTermsEligibility {
		task ("Given an active delivery term") {
			CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
				termsCount = "2",
				termsType = "Delivery");
		}

		task ("When the user sets a shipping option's eligibility to a specific delivery term") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.setEntryEligibility(
				deliveryTermsEligibility = "Delivery Term 1",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("Then the delivery term should be shown under Delivery Terms in the eligibility tab") {
			CommerceNavigator.gotoEntry(entryName = "Standard Delivery");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(
				key_panel = "Details",
				locator1 = "Panel#PANEL_COLLAPSED");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			AssertElementPresent(
				key_entryName = "delivery-term-1",
				key_table = "Delivery Terms",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ENTRY");
		}

		task ("When the user changes the delivery method's eligibility to No Delivery Terms") {
			Refresh();

			CommerceEntry.setEntryEligibility(
				deliveryTermsEligibility = "No Delivery Terms",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("Then no delivery terms should be shown in the eligibility tab") {
			CommerceNavigator.gotoEntry(entryName = "Standard Delivery");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(
				key_panel = "Details",
				locator1 = "Panel#PANEL_COLLAPSED");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			AssertElementNotPresent(
				key_entryName = "",
				key_table = "Delivery Terms",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ENTRY");
		}
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsDisabledIntoChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-8539 CompleteCheckoutWhereDefaultPaymentMethodIsDisabledIntoChannel pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsNotPresentIntoOrderType {
		property portal.acceptance = "false";

		// TODO COMMERCE-8536 CompleteCheckoutWhereDefaultPaymentMethodIsNotPresentIntoOrderType pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderType {
		property portal.acceptance = "false";

		// TODO COMMERCE-8537 CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderType pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderTypeButDisabledIntoChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-8538 CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderTypeButDisabledIntoChannel pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWithDefaultPaymentMethod {
		property portal.acceptance = "false";

		// TODO COMMERCE-8535 CompleteCheckoutWithDefaultPaymentMethod pending implementation

	}

	@description = "This is a test for COMMERCE-6195. CreateCategoryDisplayPage"
	@ignore = "true"
	@priority = "3"
	test CreateCategoryDisplayPage {
		property portal.acceptance = "false";

		// TODO COMMERCE-6195 CreateCategoryDisplayPage

	}

	test CreateNewChannel {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site",
			siteName = "Guest");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Refresh();

		CommerceNavigator.gotoEntry(entryName = "Test Channel");

		CommerceEntry.viewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site");
	}

	@description = "This is a test for COMMERCE-6102. CreateNewChannelCompileAll"
	@priority = "3"
	test CreateNewChannelCompileAll {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Minium Portal 2");

		Select(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Euro");

		Select(
			key_title = "Commerce Site Type",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "B2X");

		Select(
			key_title = "Buyer Order Approval Workflow",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Single Approver (Version 1)");

		Select(
			key_title = "Seller Order Acceptance Workflow",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Single Approver (Version 1)");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchase Order Number",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			locator1 = "TextInput#NUMBER",
			value1 = "1");

		Type(
			locator1 = "CommerceEntry#CHANGE_TAX_CATEGORY",
			value1 = "Normal Product");

		Select(
			key_title = "Price Type",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Gross Price");

		Select(
			key_title = "Discounts Target Price Type",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Gross Price");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertElementPresent(
			key_title = "Name",
			locator1 = "TextInput#NAME",
			value1 = "Minium Portal 2");

		AssertElementPresent(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Euro");

		AssertElementPresent(
			key_title = "Commerce Site Type",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "B2X");

		AssertElementPresent(
			key_title = "Buyer Order Approval Workflow",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Single Approver (Version 1)");

		AssertElementPresent(
			key_title = "Seller Order Acceptance Workflow",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Single Approver (Version 1)");

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Purchase Order Number",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_title = "Maximum Number of Open Orders per Account",
			locator1 = "TextInput#NUMBER",
			value = "1");

		AssertElementPresent(
			key_title = "Shipping Tax Category",
			locator1 = "CommerceEntry#CHANGE_TAX_CATEGORY",
			value = "Normal Product");

		AssertElementPresent(
			key_title = "Price Type",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Gross Price");

		AssertElementPresent(
			key_title = "Discounts Target Price Type",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Gross Price");
	}

	test CreateNewNotificationTemplate {
		property portal.acceptance = "quarantine";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site",
			siteName = "Guest");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Templates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewNotificationTemplate(
			entryName = "New Notification Template",
			fromAddress = "test@liferay.com",
			fromName = "Test Test",
			notificationType = "Order Placed");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6197. CreateProductDisplayPage"
	@priority = "3"
	test CreateProductDisplayPage {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.click(button = "Select Product");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "Button#CHOOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(locator1 = "Button#CHOOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "Treeview#NODE_COLLAPSED");

		Click(
			key_nodeName = "Login",
			locator1 = "Treeview#NODE_ITEM");

		SelectFrameTop();

		Click(locator1 = "Button#DONE");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrameTop();

		AssertElementPresent(
			key_entryName = "ABS Sensor",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test DeactivatePaymentMethodLinkedToAnAccount {
		property portal.acceptance = "false";

		// TODO COMMERCE-8545 DeactivatePaymentMethodLinkedToAnAccount pending implementation

	}

	@description = "This is a test for COMMERCE-6109. EditAuthorizePaymentMethod"
	@priority = "3"
	test EditAuthorizePaymentMethod {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.clickTableEntryEditButton(
			entryName = "Authorize.Net",
			table = "Payment Methods");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Authorize.Net");

		Type(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Test");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			locator1 = "CommerceEntry#PAYMENT_METHODS_SIDE_PANEL_NAV_ITEMS",
			navItem = "Configuration");

		Select(
			key_fieldLabel = "Environment",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Sandbox");

		for (var key_value : list "Show Bank Account,Show Credit Card,Show Store Name,Require CAPTCHA,Require Card Code Verification") {
			Check.checkToggleSwitch(
				checkboxName = "${key_value}",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6119. EditAvalaraTaxCalculation"
	@priority = "3"
	test EditAvalaraTaxCalculation {
		property portal.acceptance = "false";
		property portal.release = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Avalara",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Settings");

		Type(
			key_fieldLabel = "Account Number",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		Type(
			key_fieldLabel = "License Key",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		Type(
			key_fieldLabel = "Service URL",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		Type(
			key_fieldLabel = "Company Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		Button.clickSave();

		Refresh();

		Click(
			key_entryName = "Avalara",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		CommerceEntry.gotoMenuTab(menuTab = "Settings");

		AssertTextEquals(
			key_fieldLabel = "Account Number",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		AssertTextEquals(
			key_fieldLabel = "License Key",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		AssertTextEquals(
			key_fieldLabel = "Service URL",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");

		AssertTextEquals(
			key_fieldLabel = "Company Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Test");
	}

	@description = "This is a test for COMMERCE-6275. EditCategoryDisplayPage"
	@priority = "3"
	test EditCategoryDisplayPage {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Category Display Pages");

		CommerceChannels.createCategoryDisplayPage(
			page = "Login",
			vocabulary = "Brake System");

		Alert.viewSuccessMessage();

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		AssertElementPresent(
			key_entryName = "Brake System",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		CommerceChannels.editCategoryDisplayPage(
			key_card = "Catalog",
			name = "Brake System",
			tabName = "Private+Pages");

		Alert.viewSuccessMessage();

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		AssertElementPresent(
			key_productName = "Brake System",
			key_value = "Catalog",
			locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
	}

	@description = "This is a test for COMMERCE-6122. EditConfigurationRemoteTaxCalculation"
	@priority = "3"
	test EditConfigurationRemoteTaxCalculation {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		ScrollWebElementIntoView(
			key_nameTableChannels = "Tax Calculations",
			locator1 = "CommerceEntry#SEARCH_TABLES_CHANNELS");

		Click(
			key_entryName = "Remote",
			key_table = "Tax Calculations",
			locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldName = "Tax Value Endpoint URL",
			key_fieldValue = "",
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM",
			value1 = "http://localhost:8080/web/test");

		Type(
			key_fieldName = "Tax Value Endpoint Authorization Token",
			key_fieldValue = "",
			locator1 = "FormViewBuilder#PREDEFINED_VALUE_AT_FORM",
			value1 = "Test");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6107. EditMercanetPaymentMethod"
	@priority = "3"
	test EditMercanetPaymentMethod {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.clickTableEntryEditButton(
			entryName = "Mercanet",
			table = "Payment Methods");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Mercanet");

		Type(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Test");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		CommerceChannels.assertMercanetConfigurationEnvironment(
			key_value = "Test",
			paymentMethod = "Mercanet");

		Refresh();

		CommerceChannels.assertMercanetConfigurationEnvironment(
			key_value = "Production",
			paymentMethod = "Mercanet");
	}

	@description = "This is a test for COMMERCE-6105. EditMoneyOrderPaymentMethod"
	@priority = "3"
	test EditMoneyOrderPaymentMethod {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.clickTableEntryEditButton(
			entryName = "Money Order",
			table = "Payment Methods");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Money Order");

		Type(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Test");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6276. EditNotificationTemplate"
	@priority = "3"
	test EditNotificationTemplate {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Templates");

		Click(locator1 = "Button#PLUS");

		SelectFrameTop();

		CommerceEntry.addNewNotificationTemplate(
			entryName = "Test Notification Template",
			fromAddress = "test@liferay.com",
			fromName = "Test",
			notificationType = "Order Placed");

		Type(
			key_fieldLabel = "To",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "[%ACCOUNT_ROLE_ADMINISTRATOR%]");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		AssertVisible(
			key_entryName = "Test Notification Template",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		Click(
			key_text = "Test Notification Template",
			locator1 = "Icon#ANY_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Edit");

		SelectFrameTop();

		CommerceEntry.addNewNotificationTemplate(
			entryName = "Notification Template",
			fromAddress = "test@liferay.com",
			fromName = "Test",
			notificationType = "Order Completed");

		Type(
			key_fieldLabel = "To",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "[%ACCOUNT_ROLE_ORDER_MANAGER%]");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		AssertVisible(
			key_entryName = "Notification Template",
			locator1 = "CommerceNavigation#ENTRY_NAME");
	}

	@description = "This is a test for COMMERCE-6106. EditPaypalPaymentMethod"
	@priority = "3"
	test EditPaypalPaymentMethod {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.clickTableEntryEditButton(
			entryName = "PayPal",
			table = "Payment Methods");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Test");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			locator1 = "CommerceEntry#PAYMENT_METHODS_SIDE_PANEL_NAV_ITEMS",
			navItem = "Configuration");

		Select(
			key_fieldLabel = "Mode",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Sandbox");

		Type(
			key_text = "Payment Attempts Max Count",
			locator1 = "TextInput#ANY",
			value1 = "1");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6274. EditProductDisplayPage"
	@priority = "3"
	test EditProductDisplayPage {
		property portal.acceptance = "Intern Test";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.click(button = "Select Product");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(
			key_siteName = "ABS Sensor",
			locator1 = "CommerceNavigation#CHOOSE_SITE_BUTTON");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(locator1 = "Button#CHOOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "Treeview#NODE_COLLAPSED");

		Click(
			key_nodeName = "Login",
			locator1 = "Treeview#NODE_ITEM");

		SelectFrameTop();

		Click(locator1 = "Button#DONE");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrameTop();

		AssertElementPresent(
			key_entryName = "ABS Sensor",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		ClickNoError(
			key_value = "ABS Sensor",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.click(button = "Select Product");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(
			key_siteName = "Ball Joints",
			locator1 = "CommerceNavigation#CHOOSE_SITE_BUTTON");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(locator1 = "Button#CHOOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "Treeview#NODE_COLLAPSED");

		Click(
			key_nodeName = "Login",
			locator1 = "Treeview#NODE_ITEM");

		SelectFrameTop();

		Click(locator1 = "Button#DONE");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrameTop();

		AssertElementPresent(
			key_entryName = "Ball Joints",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		AssertElementNotPresent(
			key_entryName = "ABS Sensor",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "Verify users can configure payment method eligibility to specific payment terms."
	@priority = "3"
	test PaymentMethodEligibleForSpecificPaymentTerms {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given an active payment term") {
			CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(termsType = "Payment");
		}

		task ("And given multiple active payment methods") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Mercanet");
		}

		task ("And given one of the payment method's eligibility is set specifically to Payment Term 1") {
			CommerceEntry.setEntryEligibility(
				paymentMethod = "PayPal",
				paymentTermsEligibility = "Payment Term 1");
		}

		task ("When the buyer checks out an order using the edited payment method") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then the payment term should be applied to the order") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "PayPal",
				paymentTerm = "Payment Term 1",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the buyer checks out an order using the non-edited payment method") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("The the payment term should not be applied to the order") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Mercanet",
				paymentTerm = "",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-6198. RemoveCategoryDisplayPage"
	@priority = "3"
	test RemoveCategoryDisplayPage {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Category Display Pages");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(locator1 = "Button#SELECT");

		AssetCategorization.selectCategory(categoryName = "Brake System");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			key_text = "Done",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		Click(locator1 = "Button#CHOOSE");

		SelectFrame.selectFrameNoLoading(
			key_title = "Select Category Display Page",
			locator1 = "IFrame#MODAL_ANY");

		Click(locator1 = "Treeview#NODE_COLLAPSED");

		Click(
			key_nodeName = "Login",
			locator1 = "Treeview#NODE_ITEM");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Refresh();

		Click(
			locator1 = "Icon#SVG_ELLIPSIS",
			value1 = "Brake System");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6270. RemoveNotificationQueue"
	@priority = "3"
	test RemoveNotificationQueue {
		property portal.acceptance = "true";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "new Account");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		Click(locator1 = "Button#PLUS");

		Type(
			key_fieldLabel = "",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "User Account Group");

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = "User Account Group");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		Click(
			key_userName = "Test Test",
			locator1 = "Account#USER_TABLE_NAME");

		SelectFrameTop();

		Click(
			key_name = "Add",
			locator1 = "Button#GENERAL_BUTTON_MODAL_FOOTER");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Templates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewNotificationTemplate(
			entryName = "Test Notification Template",
			entryTo = "[%USER_GROUP_User Account Group%]",
			fromAddress = "test@liferay.com",
			fromName = "Test",
			notificationType = "Order Placed");

		Button.clickSave();

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceCheckout.gotoCheckout();

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Queue");

		Click(
			key_value = "Test",
			locator1 = "CommerceEntry#DROPDOWN");

		MenuItem.click(menuItem = "Delete");
	}

	@description = "This is a test for COMMERCE-6271. RemoveNotificationTemplate"
	@priority = "3"
	test RemoveNotificationTemplate {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Templates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewNotificationTemplate(
			entryName = "Test Notification Template",
			entryTo = "[%ACCOUNT_ROLE_ADMINISTRATOR%]",
			fromAddress = "test@liferay.com",
			fromName = "Test",
			notificationType = "Order Placed");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click.clickNoWaitForVisible(locator1 = "Icon#CLOSE");

		Refresh();

		Click(locator1 = "Icon#SVG_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_value = "Test Notification Template",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "This is a test for COMMERCE-6196. RemoveProductDisplayPage"
	@priority = "3"
	test RemoveProductDisplayPage {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.click(button = "Select Product");

		SelectFrame.selectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Button.click(button = "Choose");

		SelectFrame.selectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.click(button = "Choose");

		SelectFrame.selectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "Treeview#NODE_COLLAPSED");

		Click(
			key_nodeName = "Login",
			locator1 = "Treeview#NODE_ITEM");

		SelectFrame.selectFrameTop();

		Button.clickDone();

		SelectFrame.selectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		ClickNoError(
			key_value = "ABS Sensor",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		ClickNoError(
			filterOption = "Delete",
			locator1 = "ContentDashboard#FILTER_BY_OPTION");
	}

	@description = "This is a test for COMMERCE-6114. RemoveShippingOptionFlatRate"
	@priority = "3"
	test RemoveShippingOptionFlatRate {
		property portal.acceptance = "false";

		// TODO Review
		// TODO Fix Commerce tests that are skipping portal instances - COMMERCE-6586

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Flat Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard");

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard Description");

		Type(
			key_fieldLabel = "Amount",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Pause(locator1 = "3000");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		ClickNoError(
			key_entryName = "Standard",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		AssertElementNotPresent(
			key_entryName = "Standard",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");
	}

	@description = "This is a test for COMMERCE-6112. RemoveShippingOptionVariableRate"
	@priority = "3"
	test RemoveShippingOptionVariableRate {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Variable Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard");

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Standard Description");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		ClickNoError(
			key_entryName = "Standard",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		Refresh();

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6115. RemoveShippingSettingOptionVariableRate"
	@priority = "3"
	test RemoveShippingSettingOptionVariableRate {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "Variable Rate",
			locator1 = "CommerceEntry#CHANNELS_GENERAL_TAB_EDITS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");

		CommerceEntry.AddShippingOptionVariableRate(
			key_description = "Standard Description",
			key_name = "Standard",
			key_priority = "");

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		CommerceEntry.gotoMenuTab(menuTab = "Shipping Option Settings");

		CommerceEntry.AddShippingOptionSettingsVariableRate(
			key_country = "Italy",
			key_fixedPrice = "1",
			key_priceUnitWeight = "1",
			key_region = "Roma",
			key_shippingOption = "Standard",
			key_subtotal = "1",
			key_warehouse = "Italy",
			key_weightFrom = "1",
			key_weightTo = "1",
			key_zip = "0100");

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			key_text = "Standard",
			locator1 = "Icon#ANY_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6121. RemoveTaxRateSettingsByAddressTaxCalculation"
	@priority = "3"
	test RemoveTaxRateSettingsByAddressTaxCalculation {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Click(
			key_entryName = "By Address",
			key_table = "Tax Calculations",
			locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Tax Rate Settings");

		WaitForElementPresent(locator1 = "Button#PLUS");

		Click(locator1 = "Button#PLUS");

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		for (var current : list "Tax Category-Normal Product,Amount-20,Country-Italy,Region-Roma,Zip-0100") {
			var fieldLabel = StringUtil.extractFirst("${current}", "-");
			var value = StringUtil.extractLast("${current}", "-");

			if (("${fieldLabel}" == "Tax Category") || ("${fieldLabel}" == "Country") || ("${fieldLabel}" == "Region")) {
				Select(
					key_fieldLabel = "${fieldLabel}",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "${value}");
			}
			else {
				Type(
					key_fieldLabel = "${fieldLabel}",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = "${value}");
			}
		}

		Button.click(button = "Submit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_value = "Normal Product",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6124. RemoveTaxRateSettingsFixedTaxRateTaxCalculation"
	@priority = "3"
	test RemoveTaxRateSettingsFixedTaxRateTaxCalculation {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		ScrollWebElementIntoView(
			key_nameTableChannels = "Tax Calculations",
			locator1 = "CommerceEntry#SEARCH_TABLES_CHANNELS");

		Click(
			key_entryName = "Fixed Tax Rate",
			key_table = "Tax Calculations",
			locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Tax Rates");

		WaitForElementPresent(locator1 = "Button#PLUS");

		Click(locator1 = "Button#PLUS");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		Select(
			key_fieldLabel = "Tax Category",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Normal Product");

		Type(
			key_fieldLabel = "Amount",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1");

		Button.click(button = "Submit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			key_value = "Normal Product",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-8386. SearchProductDisplayPage"
	@priority = "3"
	test SearchProductDisplayPage {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "Turbocharger");

		CommerceNavigator.gotoEntry(entryName = "Turbocharger");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		for (var number : list "106,107,108") {
			CommerceEntry.checkImageName(uploadFileName = "Minium_ProductImage_${number}.png");
		}

		CommerceEntry.gotoMenuTab(menuTab = "Visibility");

		for (var nameList : list "Channels,Account Groups") {
			CommerceEntry.assertCheckedSpecificToggle(name = "${nameList}");
		}

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.click(button = "Select Product");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		AppBuilderAdmin.searchByItem(itemName = "Turbocharger");

		AssertElementPresent(
			key_entry = "Turbocharger",
			locator1 = "CommerceNavigation#TD_ANY_ENTRY_NAME");

		CommerceNavigator.clearSearchBar();

		AssertElementNotPresent(
			key_entry = "Turbocharger",
			locator1 = "CommerceNavigation#TD_ANY_ENTRY_NAME");

		Click(
			key_pageNumber = "3",
			locator1 = "CommerceNavigation#PAGINATION_ANY_PAGE");

		AssertElementPresent(
			key_entry = "Turbocharger",
			locator1 = "CommerceNavigation#TD_ANY_ENTRY_NAME");
	}

	@description = "Verify users can set and edit payment term eligibility for payment methods."
	@priority = "3"
	test SetAndEditPaymentMethodTermElgibility {
		property portal.acceptance = "false";

		task ("Given an active payment term") {
			CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(termsType = "Payment");
		}

		task ("And given an active payment method") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");
		}

		task ("When the user sets the payment method's eligibility to a specific payment term") {
			CommerceEntry.setEntryEligibility(
				paymentMethod = "PayPal",
				paymentTermsEligibility = "Payment Term 1");
		}

		task ("Then the payment term should be shown under Payment Terms in the eligibility tab") {
			AssertElementPresent(
				key_entryName = "payment-term-1",
				key_table = "Payment Terms",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ENTRY");
		}

		task ("When the user changes the payment method's eligibility to No Payment Terms") {
			Refresh();

			CommerceEntry.setEntryEligibility(
				paymentMethod = "PayPal",
				paymentTermsEligibility = "No Payment Terms");
		}

		task ("Then no payment terms should be shown in the eligibility tab") {
			AssertElementNotPresent(
				key_entryName = "",
				key_table = "Payment Terms",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ENTRY");
		}
	}

	@description = "Verify all shipping options are available when orders are made using different order types given shipping option eligibility is set to All Order Types."
	@priority = "3"
	test ShippingOptionEligibleForAnyOrderType {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given two active order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 1",
				orderTypeName = "Test Order Type 1");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("And given the buyer creates an order for each order type") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Test Order Type 1");

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			var order1Id = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Test Order Type 2");

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			var order2Id = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");
		}

		task ("When the user goes to checkout for the Test Order Type 2 order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceOrders.selectOrderFromAccountSelector(orderId = "${order2Id}");

			Button.click(button = "Checkout");
		}

		task ("Then at the shipping method step, all active Shipping options should be available") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			AssertElementPresent(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_radioOption = "Expedited",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("When the user goes to checkout for the Test Order Type 1 order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceOrders.selectOrderFromAccountSelector(orderId = "${order1Id}");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceOrders.selectOrderFromAccountSelector(orderId = "${order1Id}");

			Button.click(button = "Checkout");
		}

		task ("Then at the shipping method step, all active Shipping options should be available") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			AssertElementPresent(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_radioOption = "Expedited",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}
	}

	@description = "Verify users can configure shipping option eligibility to specific delivery terms."
	@priority = "3"
	test ShippingOptionEligibleForSpecificDeliveryTerms {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given an active delivery term") {
			CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
				termsCount = "1",
				termsType = "Delivery");
		}

		task ("And given one of the shipping option's eligibility is set specifically to Delivery Term 1") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.setEntryEligibility(
				deliveryTermsEligibility = "Delivery Term 1",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("When the buyer checks out an order using the edited shipping option") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckout();
		}

		task ("Then the delivery term should be applied to the order") {
			CommerceCheckout.initializersCheckout(
				deliveryTerm = "Delivery Term 1",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the buyer checks out an order using the non-edited shipping option") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckout();
		}

		task ("The the delivery term should not be applied to the order") {
			CommerceCheckout.initializersCheckout(
				deliveryTerm = "",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Expedited");
		}
	}

	@description = "Verify users can configure shipping option eligibility to specific order types."
	@priority = "3"
	test ShippingOptionEligibleForSpecificOrderType {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given two active order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 1",
				orderTypeName = "Test Order Type 1");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("And given an active shipping option's eligibility is set specifically to Test Order Type 1") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Test Order Type 1",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("And given the buyer creates an order for each order type") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Test Order Type 1");

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			var order1Id = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Test Order Type 2");

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			var order2Id = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");
		}

		task ("When the user goes to checkout for the Test Order Type 2 order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceOrders.selectOrderFromAccountSelector(orderId = "${order2Id}");

			Button.click(button = "Checkout");
		}

		task ("Then at the shipping method step, the edited shipping option should not be available") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			AssertElementNotPresent(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_radioOption = "Expedited",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("When the user goes to checkout for the Test Order Type 1 order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceOrders.selectOrderFromAccountSelector(orderId = "${order1Id}");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceOrders.selectOrderFromAccountSelector(orderId = "${order1Id}");

			Button.click(button = "Checkout");
		}

		task ("Then at the shipping method step, the edited shipping option should be available") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			AssertElementPresent(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_radioOption = "Expedited",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}
	}

	@description = "This is a test for COMMERCE-6267. UsePunchOut"
	@ignore = "true"
	@priority = "3"
	test UsePunchOut {
		property portal.acceptance = "false";

		// TODO COMMERCE-6267 UsePunchOut

	}

	@description = "This is a test for COMMERCE-6101. UseSearchBar"
	@priority = "3"
	test UseSearchBar {
		property portal.acceptance = "false";

		CommerceJSONChannelsAPI._addChannel(
			channelName = "Test Channel",
			channelType = "Site",
			currencyCode = "USD");

		CommerceJSONChannelsAPI._addChannel(
			channelName = "Minium",
			channelType = "Site",
			currencyCode = "USD");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.searchEntry(entryName = "Minium");

		AssertElementPresent(
			key_entryName = "Minium",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		AssertElementNotPresent(
			key_entryName = "Test Channel",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		CommerceNavigator.searchEntry(entryName = "1111");

		AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");
	}

	@description = "This is a test for COMMERCE-6266. VerifyNotificationQueue"
	@priority = "3"
	test VerifyNotificationQueue {
		property portal.acceptance = "Intern Test";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "new Account");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		Click(locator1 = "Button#PLUS");

		Type(
			key_fieldLabel = "",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "User Account Group");

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = "User Account Group");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		Click(
			key_userName = "Test Test",
			locator1 = "Account#USER_TABLE_NAME");

		SelectFrameTop();

		Click(
			key_name = "Add",
			locator1 = "Button#GENERAL_BUTTON_MODAL_FOOTER");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Templates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewNotificationTemplate(
			entryName = "Test Notification Template",
			entryTo = "[%USER_GROUP_User Account Group%]",
			fromAddress = "test@liferay.com",
			fromName = "Test",
			notificationType = "Order Placed");

		Button.clickSave();

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceCheckout.gotoCheckout();

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.gotoMenuTab(menuTab = "Notification Queue");

		AssertElementPresent(
			key_name = "Test",
			key_order = "1",
			locator1 = "CommerceEntry#ASSERT_NOTIFICATION_QUEUE");
	}

	@description = "Verify users can view the priority of shipping options"
	@priority = "3"
	test VerifyPriorityColumnForShippingOption {
		property portal.acceptance = "false";

		task ("When the Sales Manager goes into the Minium channel and opens the Flat Rate shipping method's options tab") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.clickTableEntryEditButton(
				entryName = "Flat Rate",
				table = "Shipping Methods");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Shipping Options");
		}

		task ("And the Sales Manager edits the priority for Standard Delivery to 1 and Expedited Delivery to 2") {
			CommerceChannels.editShippingOption(
				priority = "1",
				shippingOption = "Standard Delivery");

			CommerceChannels.editShippingOption(
				priority = "2",
				shippingOption = "Expedited Delivery");
		}

		task ("Then the priority values will be shown in the priority column") {
			AssertElementPresent(
				key_text = "Priority",
				locator1 = "Button#ANY");

			AssertTextEquals(
				key_columnNumber = "3",
				key_entryName = "Standard Delivery",
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER",
				value1 = "1");

			AssertTextEquals(
				key_columnNumber = "3",
				key_entryName = "Expedited Delivery",
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER",
				value1 = "2");
		}

		task ("And the shipping options will be re-ordered based on the priority") {
			AssertTextEquals(
				key_rowNumber = "1",
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_NUMBER",
				value1 = "Standard Delivery");

			AssertTextEquals(
				key_rowNumber = "2",
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_NUMBER",
				value1 = "Expedited Delivery");
		}
	}

}