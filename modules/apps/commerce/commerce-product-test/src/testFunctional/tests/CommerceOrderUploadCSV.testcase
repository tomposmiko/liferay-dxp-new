@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommerceOrderImporterTypeConfiguration.config";
	property osgi.module.configurations = "enabled=&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-7697 Verify user can download CSV template"
	@priority = "3"
	test CanDownloadCSVTemplate {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the user is creating a new order") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("When the user go to start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user downloads the CSV template file") {
			Button.click(button = "Download Template");
		}

		task ("Then the template is downloaded as .csv file and populated") {
			ImportExport.assertDownloadedFileName(downloadedFile = "csv_template.csv");
		}
	}

	@description = "COMMERCE-7706 Verify user can not upload a CSV with invalid quantity"
	@priority = "3"
	test CannotUploadInvalidCSVOrderFile {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the user is creating a new order") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("When the user start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a CSV file with missing field") {
			UploadDependencyFile.uploadFile(fileName = "commerce_missing_field.csv");

			Button.clickImport();
		}

		task ("Then an error message is displayed because the file is not a valid CSV file") {
			Alert.viewErrorMessage(errorMessage = "The CSV could not be imported.");

			IFrame.closeFrame();
		}

		task ("When the user start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a CSV file with invalid fields") {
			UploadDependencyFile.uploadFile(fileName = "commerce_invalid_fields.csv");

			Button.clickImport();
		}

		task ("Then an error message is displayed because the file is not a valid CSV file") {
			Alert.viewErrorMessage(errorMessage = "The CSV could not be imported.");

			IFrame.closeFrame();
		}
	}

	@description = "COMMERCE-7705 Verify user can not upload a CSV with invalid quantity"
	@priority = "3"
	test CannotUploadInvalidQuantityCSVOrderFile {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the user is creating a new order") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("When the user go to start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a file with invalid quantity") {
			UploadDependencyFile.uploadFile(fileName = "commerce_invalid_quantity.csv");

			Button.clickImport();
		}

		task ("Then an error message is displayed because the quantity is invalid") {
			Button.clickImport();

			SelectFrameTop();

			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}
	}

	@description = "COMMERCE-7702 Verify user can not upload a CSV with invalid SkuID"
	@priority = "3"
	test CannotUploadInvalidSkuIDCSVOrderFile {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the user is creating a new order") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("When the user go to start a new order by Import 1st file from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a file with invalid SkuID") {
			UploadDependencyFile.uploadFile(fileName = "commerce_invalid_skuID.csv");

			Button.clickImport();
		}

		task ("Then assert the product status display 'The product is no longer available'") {
			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "The product is no longer available",
				productName = "123.36");

			IFrame.closeFrame();
		}

		task ("When the user go to start a new order by Import 2nd file from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a file with invalid string SkuID") {
			UploadDependencyFile.uploadFile(fileName = "commerce_invalid_stringSkuID.csv");

			Button.clickImport();
		}

		task ("Then assert the product status display 'The product is no longer available'") {
			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "The product is no longer available",
				productName = "1,2345");

			IFrame.closeFrame();
		}
	}

	@description = "COMMERCE-7707 Verify user can not upload non CSV files"
	@priority = "3"
	test CannotUploadNonCSVOrderFile {
		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given the user is creating a new order") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("When the user start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a pdf file") {
			UploadDependencyFile.uploadFile(fileName = "commerce.pdf");

			Button.clickImport();
		}

		task ("Then an error message is displayed because the file is not a CSV file") {
			Alert.viewErrorMessage(errorMessage = "The CSV could not be imported.");

			IFrame.closeFrame();
		}

		task ("When the user start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a text file") {
			UploadDependencyFile.uploadFile(fileName = "commerce.txt");

			Button.clickImport();
		}

		task ("Then an error message is displayed because the file is not a CSV file") {
			Alert.viewErrorMessage(errorMessage = "The CSV could not be imported.");

			IFrame.closeFrame();
		}

		task ("When the user start a new order by Import from CSV") {
			CommerceOrders.importOrderFromType(orderType = "CSV");
		}

		task ("And when the user try to import a image file") {
			UploadDependencyFile.uploadFile(fileName = "commerce.jpeg");

			Button.clickImport();
		}

		task ("Then an error message is displayed because the file is not a CSV file") {
			Alert.viewErrorMessage(errorMessage = "The CSV could not be imported.");

			IFrame.closeFrame();
		}
	}

	@description = "COMMERCE-7699 Verify user can upload a valid CSV Order File"
	@priority = "3"
	test CanUploadValidCSVOrderFile {
		task ("Given the warehouse quantity for ABS Sensor is set to 0") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = "0",
				northeastQuantity = "0",
				productName = "ABS Sensor",
				productSku = "MIN93015",
				southwestQuantity = "0");
		}

		task ("When the buyer is importing the CSV order files") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

			CommerceOrders.importOrderFromType(orderType = "CSV");

			UploadDependencyFile.uploadFile(fileName = "commerce_csv_order.csv");

			Button.clickImport();
		}

		task ("Then can see data set is filled with the following data in the preview modal") {
			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "OK",
				productName = "U-Joint",
				productQuantity = "1",
				productSku = "MIN55861",
				totalPrice = "24.00",
				unitPrice = "24.00");

			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "OK",
				productName = "ABS Sensor",
				productQuantity = "2",
				productSku = "MIN93015",
				totalPrice = "100.00",
				unitPrice = "50.00");

			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "OK",
				productName = "Mount",
				productQuantity = "1",
				productSku = "MIN55857",
				totalPrice = "3.00",
				unitPrice = "3.00");

			IFrame.closeFrame();
		}
	}

}