@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		task ("Given a Minium site") {
			CommerceConfiguration.commerceSetUp(minium = "true");
		}

		task ("And an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a new Display Page Template for Commerce Product is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Product DPT",
				groupName = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11199. Can add to cart using Product Card fragment"
	@priority = 4
	test CanAddToCartFromProductCardFragment {
		property portal.acceptance = "false";

		task ("Given a Product Card fragment is deployed on the DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Product Card",
				index = 1);
		}

		task ("And the template is published and Marked as Default") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("And Product Order Quantity Configurations are set(ABS Sensor -> Minimum, Brake Pads -> Multiple, Torque Converters -> Allowed)") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = 3,
				productName = "ABS Sensor");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = 4,
				productName = "Mount");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowedOrderQuantities = "1,3,5",
				productName = "Torque Converters");
		}

		task ("When the buyer navigates to Minium -> U-Joint") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then the buyer can add to cart the product") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("When the buyer navigates to Minium -> ABS Sensor") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then the buyer can add to cart the product") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 2);

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "true",
				quantity = 3,
				quantityConfiguration = "min");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 4);
		}

		task ("When the buyer navigates to Minium -> Mount") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/mount");
		}

		task ("Then the buyer can add to cart the product") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 3);

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "true",
				quantity = 4,
				quantityConfiguration = "multiple");

			FrontStore.addInitializerProductToCart(
				productName = "Mount",
				productQuantity = 8);
		}

		task ("When the buyer navigates to Minium -> Torque Converters") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/torque-converters");
		}

		task ("Then the buyer can add to cart the product") {
			AssertElementNotPresent(
				key_optionValue = 4,
				key_productName = "Torque Converters",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD_OPTION_VALUE");

			FrontStore.addInitializerProductToCart(
				allowedQuantities = 5,
				productName = "Torque Converters");
		}

		task ("And the buyer can see all added items in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemNames = "U-Joint,ABS Sensor,Mount,Torque Converters",
				cartItemPriceValues = "24,50,3,34",
				cartItemQuantities = "1,4,8,5",
				cartItemSkUs = "MIN55861,MIN93015,MIN55857,MIN55860",
				cartSummaryQuantity = 18,
				cartSummarySubtotal = 418,
				cartSummaryTotal = ${cartSummarySubtotal});
		}

		task ("And the buyer can checkout the order") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}
	}

	@description = "COMMERCE-11198. Can configure Product Card fragment to show only a defined set of elements"
	@priority = 4
	test CanConfigureProductCardFragment {
		property portal.acceptance = "false";

		task ("Given a Product Card fragment is deployed on the DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Product Card",
				index = 1);
		}

		task ("And the fragment is configured to show Add to Cart Button,Add to Wish List Button,Compare Checkbox,Name,Price,SKU") {
			CommerceDisplayPageTemplates.configureProductCardFragment(
				checkList = "Add to Cart Button,Add to Wish List Button,Compare Checkbox,Name,Price,SKU",
				fragmentName = "Product Card",
				index = 1,
				uncheckList = "Availability Label,Image");
		}

		task ("And the template is published and Marked as Default") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer navigates to Minium -> U-Joint") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then checked fields are shown on the Product Card fragment") {
			FrontStore.viewProductCard(
				addToCart = "true",
				compare = "true",
				listPrice = "24.00",
				productName = "U-Joint",
				sku = "MIN55861",
				wishlist = "true");
		}

		task ("And unchecked fields are not shown on the Product Card fragment") {
			FrontStore.viewProductCard(
				assertion = "negative",
				assertName = "false",
				availability = "Available",
				image = "true",
				productName = "U-Joint");
		}

		task ("When the admin changes the fragment configuration to show only Availability Label and Image") {
			User.logoutAndLoginPG();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			CommerceDisplayPageTemplates.configureProductCardFragment(
				checkList = "Availability Label,Image",
				fragmentName = "Product Card",
				index = 1,
				uncheckList = "Add to Cart Button,Add to Wish List Button,Compare Checkbox,Name,Price,SKU");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("Then checked fields are shown on the Product Card fragment") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			FrontStore.viewProductCard(
				assertName = "false",
				availability = "Available",
				image = "true",
				productName = "U-Joint");
		}

		task ("And unchecked fields are not shown on the Product Card fragment") {
			FrontStore.viewProductCard(
				addToCart = "true",
				assertion = "negative",
				compare = "true",
				listPrice = "24.00",
				productName = "U-Joint",
				sku = "MIN55861",
				wishlist = "true");
		}
	}

	@description = "COMMERCE-11197. Can deploy Product Card fragment on a DPT and verify that product card is successfully shown"
	@priority = 5
	test CanUseProductCardFragment {
		property portal.acceptance = "true";

		task ("Given Product Card fragment is deployed on the DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Product Card",
				index = 1);
		}

		task ("And Product Comparison Bar widget is deployed on the DPT") {
			PageEditor.addWidget(
				portletName = "Product Comparison Bar",
				targetFragmentName = "Product Card");
		}

		task ("And the template is published and Marked as Default") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("And a discount for ABS Sensor is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 20,
				productNames = "ABS Sensor",
				target = "products",
				title = "Test Discount",
				usePercentage = "true");
		}

		task ("When the buyer navigates to Minium -> U-Joint") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then all fields on the Product Card fragment are shown") {
			FrontStore.viewProductCard(
				addToCart = "true",
				availability = "Available",
				compare = "true",
				image = "true",
				listPrice = "24.00",
				productName = "U-Joint",
				sku = "MIN55861",
				wishlist = "true");
		}

		task ("When the buyer navigates to Brake Pads page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-pads");
		}

		task ("Then promo price is shown on the Product Card fragment") {
			FrontStore.viewProductCard(
				listPriceInactive = "21.00",
				productName = "Brake Pads",
				salePrice = "18.90");
		}

		task ("When the buyer navigates to ABS Sensor page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then discounted price is shown on the Product Card fragment") {
			FrontStore.viewProductCard(
				listPriceInactive = "50.00",
				netPrice = "40.00",
				productName = "ABS Sensor");
		}

		task ("When the buyer clicks on the Product Card fragment's compare checkbox") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			Check.checkToggleSwitch(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");
		}

		task ("Then the product is successfully added to the comparison bar") {
			FrontStore.assertMiniCompareItems(products = "U-Joint");
		}

		task ("When the buyer clicks on the Product Card fragment's add to wish list button") {
			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_ADD_TO_WISH_LIST_BUTTON");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_ASSERT_WISH_LIST_HEART_FULL");
		}

		task ("Then the product is successfully added to the wish list") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/lists");

			CommerceWishList.assertWishListProduct(
				productName = "U-Joint",
				wishListName = "Default");
		}
	}

}