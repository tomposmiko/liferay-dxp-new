@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Given a buyer user connected to the Commerce Account") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-9729. As a sales manager, I want to set default account delivery terms per channel"
	@priority = "3"
	test CanHaveAllChannelsLinkedToADeliveryTerm {
		task ("Given the admin creates two delivery terms entries with different priorities") {
			CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
				termsCount = "2",
				termsType = "Delivery");
		}

		task ("When the admin goes into the "Order Defaults" for the account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");
		}

		task ("And goes into the section "Delivery Terms And Conditions"") {
			Click(
				key_termType = "Delivery",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
		}

		task ("Then the admin will see only the option "All Channels" and channel "Minium Portal"") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var channelEntries : list "All Channels,Minium Portal") {
				AssertTextPresent(
					key_fieldLabel = "Channel",
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
					row = "1",
					value1 = "${channelEntries}");
			}

			AssertTextNotEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Other Channels");
		}

		task ("When the admin links the channel "Minium Portal" to a delivery") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.setDefaultCommerceTermsEntry(
				channelEntry = "Minium Portal",
				termEntry = "Delivery Term 1",
				termType = "Delivery");
		}

		task ("Then the option "All Channels" will become "All Other Channels"") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Click(
				key_termType = "Delivery",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Other Channels");

			AssertTextNotEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Channels");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.removeDefaultCommerceTerms(
				entryDetails = "Delivery Term 1",
				termType = "Delivery");
		}

		task ("When the admin links "All Channels" to a delivery") {
			Accounts.setDefaultCommerceTermsEntry(
				termEntry = "Delivery Term 1",
				termType = "Delivery");
		}

		task ("And the entries table contains "All Channels" linked to the delivery") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,Delivery Term 1,Yes,No",
				termType = "Delivery");
		}

		task ("And admin links the channel "Minium Portal" to a delivery") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.setDefaultCommerceTermsEntry(
				channelEntry = "Minium Portal",
				termEntry = "Delivery Term 2",
				termType = "Delivery");
		}

		task ("Then entries tables should show "All Other Channels" instead of "All Channels" ") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Other Channels,Delivery Term 1,Yes,No",
				termType = "Delivery");
		}
	}

	@description = "COMMERCE-9730. As a sales manager, I want to set default account payment terms per channel"
	@priority = "3"
	test CanHaveAllChannelsLinkedToAPaymentTerm {
		task ("Given the admin creates two payment terms entries with different priorities") {
			CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
				termsCount = "2",
				termsType = "Payment");
		}

		task ("When the admin goes into the "Order Defaults" for the account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");
		}

		task ("And goes into the section "Payment Terms And Conditions"") {
			Click(
				key_termType = "Payment",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
		}

		task ("Then the admin will see only the option "All Channels" and channel "Minium Portal"") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var channelEntries : list "All Channels,Minium Portal") {
				AssertTextPresent(
					key_fieldLabel = "Channel",
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
					row = "1",
					value1 = "${channelEntries}");
			}

			AssertTextNotEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Other Channels");
		}

		task ("And when the admin links the channel "Minium Portal" to a payment") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.setDefaultCommerceTermsEntry(
				channelEntry = "Minium Portal",
				termEntry = "Payment Term 1",
				termType = "Payment");
		}

		task ("Then the option "All Channels" will become "All Other Channels"") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Click(
				key_termType = "Payment",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Other Channels");

			AssertTextNotEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Channels");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.removeDefaultCommerceTerms(
				entryDetails = "Payment Term 1",
				termType = "Payment");
		}

		task ("And when the admin links "All Channels" to a payment") {
			Accounts.setDefaultCommerceTermsEntry(
				termEntry = "Payment Term 1",
				termType = "Payment");
		}

		task ("And the entries table contains "All Channels" linked to the payment") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,Payment Term 1,Yes,No",
				termType = "Payment");
		}

		task ("And admin links the channel "Minium Portal" to a payment") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.setDefaultCommerceTermsEntry(
				channelEntry = "Minium Portal",
				termEntry = "Payment Term 2",
				termType = "Payment");
		}

		task ("Then entries tables should show "All Other Channels" instead of "All Channels" ") {
			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Other Channels,Payment Term 1,Yes,No",
				termType = "Payment");
		}
	}

	@description = "COMMERCE-9734. As admin, I want to set a default billing and default shipping address for one account and channel, then buyer cannot use the default addresses in a different channel to make an order"
	@priority = "3"
	test CanNotUseDefaultAddressesInADifferentChannel {
		task ("Given 2 minium sites, 2 accounts and 2 buyer users are created and associated with the respected accounts and sites") {
			for (var num : list "1,2") {
				CommerceAccelerators.initializeNewSiteViaAccelerator(
					siteName = "Minium ${num}",
					siteTemplateName = "Minium");

				CommerceEntry.addAccountEntryUser(
					accountName = "Test Account ${num}",
					accountType = "Business",
					agreeToTermsAndAnswerReminderQuery = "true",
					createNewAccount = "true",
					requireReset = "false",
					userEmailAddress = "buyer${num}@liferay.com",
					userFirstName = "Buyer${num}",
					userLastName = "User${num}",
					userRole = "Buyer",
					userScreenName = "buyeruser${num}",
					userSiteMembership = "Minium ${num}");

				Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

				task ("And each account having 3 addresses: one billing, one shipping and one shipping and billing for the account") {
					for (var typeList : list "Billing,Shipping,Billing and Shipping") {
						Accounts.addAddressViaSetDefaultAddress(
							addressCity = "Diamond Bar",
							addressCountry = "United States",
							addressName = "${typeList} Address Entry 1",
							addressPostalCode = "91765",
							addressRegion = "California",
							addressStreet1 = "1400 Montefino Ave",
							addressType = "${typeList}",
							phoneNumber = "+1-877-543-3729");
					}
				}
			}
		}

		task ("And a default billing and default shipping address is selected for Minium 1 Portal Channel for Test Account 1") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 1");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			for (var typeList : list "Billing,Shipping") {
				Accounts.addDefaultCommerceAddressEntry(
					addressEntry = "${typeList} Address Entry 1",
					addressType = "${typeList}",
					channelEntry = "Minium 1 Portal");
			}
		}

		task ("And buyer user 2 from Test Account 2 and Minium 2 Portal Channel adds an order and starts the checkout process") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium-3",
				userEmailAddress = "buyer2@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckout();
		}

		task ("When the buyer views the shipping and billing address sections, there should be no default address pre-selected") {
			AssertElementPresent(
				key_selectFieldLabel = "Choose Shipping Address",
				locator1 = "Select#ANY",
				value1 = "Add New Address");

			for (var fieldNames : list "Name,Address,Zip,City") {
				AssertElementNotPresent(
					key_fieldName = "${fieldNames}",
					locator1 = "CommerceAccelerators#CHECKOUT_GENERIC_TEXT_INPUT_DISABLED");
			}
		}

		task ("Then after completing the checkout by giving new addresses, the shipping and the billing address given by buyer 2 are visible in the Order Summary") {
			CommerceCheckout.initializersCheckout(
				billingAddressAddress = "United States",
				billingAddressCity = "Test Billing City",
				billingAddressCountry = "United States",
				billingAddressName = "New Billing Address Name",
				billingAddressZipCode = "Test Zip Code",
				newAddressAddress = "Test Shipping Address",
				newAddressCity = "Test Shipping City",
				newAddressCountry = "United States",
				newAddressName = "New Shipping Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard",
				viewBillingAddressPermission = "true");
		}
	}

	@description = "COMMERCE-9876. As a Sales Manager, I want to remove default billing and shipping addresses from the account"
	@priority = "3"
	test CanRemoveDefaultAddresses {
		task ("Given 3 addresses: one billing, one shipping and one shipping and billing for the account") {
			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping,Billing and Shipping") {
				Accounts.addAddressViaSetDefaultAddress(
					addressCity = "Diamond Bar",
					addressCountry = "United States",
					addressName = "${typeList} Address Entry 1",
					addressPostalCode = "91765",
					addressRegion = "California",
					addressStreet1 = "1400 Montefino Ave",
					addressType = "${typeList}",
					phoneNumber = "+1-877-543-3729");
			}
		}

		task ("And two more channels("Test Channel 1" and "Test Channel 2")") {
			for (var channelNames : list "Test Channel 1,Test Channel 2") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "${channelNames}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("Given there is a default billing and a default shipping address set for the Account and Channel") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			Accounts.addDefaultCommerceAddressEntry(
				addressEntry = "Billing Address Entry 1",
				addressType = "Billing",
				channelEntry = "Test Channel 1");

			Accounts.addDefaultCommerceAddressEntry(
				addressEntry = "Shipping Address Entry 1",
				addressType = "Shipping",
				channelEntry = "Test Channel 2");
		}

		task ("When admin removes both default addresses from the account") {
			for (var typeList : list "Billing,Shipping") {
				Accounts.removeDefaultCommerceTerms(
					entryDetails = "${typeList} Address Entry 1",
					termType = "${typeList}");
			}
		}

		task ("And user makes an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");
		}

		task ("Then during the checkout there is no default address pre-selected") {
			CommerceCheckout.gotoCheckout();

			AssertElementPresent(
				key_selectFieldLabel = "Choose Shipping Address",
				locator1 = "Select#ANY",
				value1 = "Add New Address");

			for (var fieldNames : list "Name,Address,Zip,City") {
				AssertElementNotPresent(
					key_fieldName = "${fieldNames}",
					locator1 = "CommerceAccelerators#CHECKOUT_GENERIC_TEXT_INPUT_DISABLED");
			}
		}

		task ("And user enters new addresses that will be visible in Order Summary") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "New Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "COMMERCE-9829. As a sales manager, I want to check channel options after setting a default account billing address for each channel"
	@priority = "3"
	test CanSelectOnlyAllOtherChannelsForDefaultBillingAddress {
		task ("Given 3 addresses: one billing, one shipping and one shipping and billing for the account") {
			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping,Billing and Shipping") {
				Accounts.addAddressViaSetDefaultAddress(
					addressCity = "Diamond Bar",
					addressCountry = "United States",
					addressName = "${typeList} Address Entry 1",
					addressPostalCode = "91765",
					addressRegion = "California",
					addressStreet1 = "1400 Montefino Ave",
					addressType = "${typeList}",
					phoneNumber = "+1-877-543-3729");
			}
		}

		task ("And two more channels("Test Channel 1" and "Test Channel 2")") {
			for (var channelNames : list "Test Channel 1,Test Channel 2") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "${channelNames}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("Given a default billing address is selected for each Channel (Minium Portal, Test Channel 1 and Test Channel 2)") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			for (var channelEntries : list "Minium Portal,Test Channel 1,Test Channel 2") {
				Accounts.addDefaultCommerceAddressEntry(
					addressEntry = "Billing Address Entry 1",
					addressType = "Billing",
					channelEntry = "${channelEntries}");
			}
		}

		task ("When admin clicks to the plus button to add another default address") {
			Click(
				key_termType = "Billing",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
		}

		task ("Then only All Other Channels option is listed in the Channel dropdown") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var channelEntries : list "All Channels,Minium Portal,Test Channel 1,Test Channel 2") {
				AssertTextNotEquals(
					key_fieldLabel = "Channel",
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
					row = "1",
					value1 = "${channelEntries}");
			}

			AssertTextEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Other Channels");
		}
	}

	@description = "COMMERCE-9829. As a sales manager, I want to check channel options after setting a default account shipping address for each channel"
	@priority = "3"
	test CanSelectOnlyAllOtherChannelsForDefaultShippingAddress {
		task ("Given 3 addresses: one billing, one shipping and one shipping and billing for the account") {
			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping,Billing and Shipping") {
				Accounts.addAddressViaSetDefaultAddress(
					addressCity = "Diamond Bar",
					addressCountry = "United States",
					addressName = "${typeList} Address Entry 1",
					addressPostalCode = "91765",
					addressRegion = "California",
					addressStreet1 = "1400 Montefino Ave",
					addressType = "${typeList}",
					phoneNumber = "+1-877-543-3729");
			}
		}

		task ("And two more channels("Test Channel 1" and "Test Channel 2")") {
			for (var channelNames : list "Test Channel 1,Test Channel 2") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "${channelNames}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("Given a default shipping address is selected for each Channel (Minium Portal, Test Channel 1 and Test Channel 2)") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Order Defaults");

			for (var channelEntries : list "Minium Portal,Test Channel 1,Test Channel 2") {
				Accounts.addDefaultCommerceAddressEntry(
					addressEntry = "Shipping Address Entry 1",
					addressType = "Shipping",
					channelEntry = "${channelEntries}");
			}
		}

		task ("When admin clicks to the plus button to add another default address") {
			Click(
				key_termType = "Shipping",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
		}

		task ("Then only All Other Channels option is listed in the Channel dropdown") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var channelEntries : list "All Channels,Minium Portal,Test Channel 1,Test Channel 2") {
				AssertTextNotEquals(
					key_fieldLabel = "Channel",
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
					row = "1",
					value1 = "${channelEntries}");
			}

			AssertTextEquals(
				key_fieldLabel = "Channel",
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_POSITION",
				row = "1",
				value1 = "All Other Channels");
		}
	}

}