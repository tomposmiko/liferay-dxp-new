@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a new Commerce Product type Display Page Template is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product DPT",
				groupName = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-9382. As a user, I can add a product into the cart parting from the min order quantity using AddToCart fragment."
	@priority = 4
	test CanAddProductWithMinQuantityUsingAddToCartFragment {
		property portal.acceptance = "false";

		task ("And the AddToCart fragment is deployed on the page, published and marked as default") {
			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product DPT",
				fragmentName = "Add to Cart",
				publish = "true",
				siteURLKey = "minium");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("And minimum quantity is changed to 5 for a product (e.g. MIN55860)") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = 5,
				productName = "Transmission Cooler Line Assembly");
		}

		task ("When buyer user logs in and goes to the Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And navigates to a product") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then AddToCart fragment and quantity selector are shown correctly with the preselected quantity as '1'") {
			AssertElementPresent(
				key_optionValue = 1,
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_OPTION_VALUE");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("When the buyer clicks another product that has min quantity set (MIN55861) to '5'") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/transmission-cooler-line-assembly");
		}

		task ("Then AddToCart fragment and quantity selector are shown correctly with the preselected quantity as '5'") {
			AssertElementPresent(
				key_optionValue = 5,
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_OPTION_VALUE");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("When the quantity is edited to '3'") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 3);
		}

		task ("Then the quantity selector becomes red and a popover shows up") {
			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "true",
				quantity = 5,
				quantityConfiguration = "min");
		}

		task ("When the quantity is edited to '6'") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 6);
		}

		task ("Then the quantity is recognized as acceptable") {
			AssertElementNotPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "false",
				quantity = 5,
				quantityConfiguration = "min");
		}
	}

	@description = "COMMERCE-9382. As a user, I can checkout using AddToCart fragment."
	@priority = 5
	test CanCheckoutUsingAddToCartFragment {
		property portal.acceptance = "true";

		task ("And the AddToCart fragment is deployed on the page, published and marked as default") {
			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product DPT",
				fragmentName = "Add to Cart",
				publish = "true",
				siteURLKey = "minium");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("When buyer user logs in and goes to the Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And navigates to the product") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then AddToCart fragment and quantity selector are shown correctly") {
			AssertElementPresent(
				key_optionValue = 1,
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_OPTION_VALUE");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And buyer clicks on the product") {
			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("Then completes the checkout successfully") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "COMMERCE-9382. Verify that the AddToCart fragment can be deployed and the buyer can view the button on the storefront"
	@priority = 5
	test CanUseAddToCartFragment {
		property portal.acceptance = "true";

		task ("Given the AddToCart fragment is deployed on the page") {
			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product DPT",
				fragmentName = "Add to Cart",
				publish = "false",
				siteURLKey = "minium");
		}

		task ("And the fragment contains 'The add to cart component will be shown here.'") {
			PageEditor.viewFragmentMessageInfo(
				fragmentName = "Add to Cart",
				messageInfo = "The add to cart component will be shown here.");
		}

		task ("And the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And the DPT is set as default for a product") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.addOverrideDefaultProductDisplayPageTemplate(
				displayPageTemplateName = "Test Commerce Product DPT",
				product = "ABS Sensor");
		}

		task ("When buyer user logs in and goes to the Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And clicks on the product") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then AddToCart fragment and quantity selector are shown correctly") {
			AssertElementPresent(
				key_optionValue = 1,
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_OPTION_VALUE");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And the product details page is shown for another product") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");
		}
	}

	@description = "COMMERCE-9382. As a user, I can view AddToCart fragment as disabled when the account is deactivated."
	@priority = 4
	test CanViewAddToCartFragmentDisabled {
		property portal.acceptance = "false";

		task ("And the AddToCart fragment is deployed on the page, published and marked as default") {
			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product DPT",
				fragmentName = "Add to Cart",
				publish = "true",
				siteURLKey = "minium");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("And AddToCart fragment and quantity selector are shown correctly as enabled") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("When the account is deactivated") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.deactivateCommerceAccountViaFront(accountName = "Commerce Account");
		}

		task ("When buyer user logs in and goes to the Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then AddToCart fragment is shown as disabled") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}
	}

}