@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-10279. Users can verify that the list price is shown on the checkout summary rather than the promotion price that is higher than the list price."
	@priority = 5
	test CanAssertListPriceRatherThanHigherPromotionPriceAtCheckout {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a promotion price entry for U-Joint is set higher than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 40,
				productSKU = "MIN55861",
				promotionName = "Minium Base Promotion");
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the U-Joint price is the base price (24.00)") {
			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "24.00");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 3,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			AssertElementNotPresent(
				key_productPrice = "40.00",
				locator1 = "CommerceAccelerators#CHECKOUT_SUMMARY_PRODUCT_TABLE_PRICE");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10178. Select a product with no promotion, no discount, no tier pricing, no bulk pricing link and do a checkout"
	@priority = 3
	test CanCheckoutAMiniumProduct {
		property portal.acceptance = "false";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "Mount",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "Mount",
				productQuantity = 5,
				productUnitPrice = 3,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10258. Create a new product with no promotion, no discount, no tier pricing, no bulk pricing link and do a checkout"
	@priority = 3
	test CanCheckoutNewProduct {
		property portal.acceptance = "false";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And new product created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				neverExpire = "false",
				price = 50,
				productDescription = "Full Description",
				productName = "Soft Tyre",
				productType = "Simple",
				shortDescription = "Short Description",
				sku = "SKU1007");
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "Soft Tyre",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "Soft Tyre",
				productQuantity = 5,
				productUnitPrice = 50,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10245. Select a product with bulk price, no promotion ,no discount, link and do a checkout"
	@priority = 5
	test CanCheckoutProductWithBulkPrice {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the tier list are changed") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 7,
				key_value = 50);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 7);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 7,
				productUnitPrice = 50,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10280. Set a promotion price lower then the price list and do the checkout"
	@priority = 5
	test CanCheckoutProductWithPromotionPriceLowerThenPricelist {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a promotion price entry for U-Joint is set higher than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 14,
				productSKU = "MIN55861",
				promotionName = "Minium Base Promotion");
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 2);

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemNames = "U-Joint,",
				cartItemPriceValues = "14,");
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 2,
				productUnitPrice = 14,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

}