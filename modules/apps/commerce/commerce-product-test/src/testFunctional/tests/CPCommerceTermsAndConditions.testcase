@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-8332. Assert default delivery term can be added"
	@priority = 5
	test AddADefaultDeliveryTerm {
		property portal.acceptance = "true";

		task ("Given I create two accounts") {
			for (var entryNumber : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Test Account ${entryNumber}",
					accountEntryType = "Business");
			}
		}

		task ("Given that I created two Delivery terms entries with different priorities into Terms and Conditions") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "AA Terms and Condition Entry",
				termsAndConditionsType = "Delivery Terms",
				valuePosition = 1);

			Click(locator1 = "Icon#BACK");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "ZZ Terms and Condition Entry",
				termsAndConditionsType = "Delivery Terms",
				valuePosition = 2);
		}

		task ("When I go into the "Channel Defaults" tab inside the Account and click on the Set Default Delivery Commerce Term Entry") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 1");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Click(
				key_termType = "Delivery",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
		}

		task ("Then a dropdown appears with all the delivery term entries we created before, and the entries are sorted by priority") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Account.viewDefaultCommerceTermsListByPriority(rowList = "ZZ Terms and Condition Entry:1,AA Terms and Condition Entry:2");
		}

		task ("When I go into the "Channel Defaults" tab inside the Account and click on the Set Default Delivery Commerce Term Entry") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 1");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then I can select one single entry") {
			Account.setDefaultCommerceTermsEntry(
				termEntry = "AA Terms and Condition Entry",
				termType = "Delivery");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,AA Terms and Condition Entry,Yes,No",
				termType = "Delivery");
		}

		task ("When I go into the "Channel Defaults" tab inside the Account") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 2");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the default entry that is already selected is Use Priority Settings") {
			Account.viewDefaultDeliveryCommerceTermsEntry(termType = "Delivery");
		}

		task ("And when I select one entry") {
			Account.setDefaultCommerceTermsEntry(
				termEntry = "AA Terms and Condition Entry",
				termType = "Delivery");
		}

		task ("And Remove the default delivery terms, "Use Priority Settings" is displayed instead of the T&C entry") {
			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.removeDefaultCommerceTerms(
				entryDetails = "AA Terms and Condition Entry",
				termType = "Delivery");
		}
	}

	@description = "This is a test for COMMERCE-8319. Assert default payment term can be added"
	@priority = 5
	test CanAddADefaultPaymentTerm {
		property portal.acceptance = "true";

		task ("Given I create two accounts") {
			for (var entryNumber : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Test Account ${entryNumber}",
					accountEntryType = "Business");
			}
		}

		task ("Given that I created two Payment terms entries with different priorities into Terms and Conditions") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "BB Terms and Condition Entry",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 1);

			Click(locator1 = "Icon#BACK");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "AA Terms and Condition Entry",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 2);
		}

		task ("When I go into the "Channel Defaults" tab inside the Account and click on the Set Default Payment Commerce Term Entry") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 1");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Click(
				key_termType = "Payment",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
		}

		task ("Then a dropdown appears with all the payment term entries we created before, and the entries are sorted by priority") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Account.viewDefaultCommerceTermsListByPriority(rowList = "AA Terms and Condition Entry:1,BB Terms and Condition Entry:2");
		}

		task ("When I go into the "Channel Defaults" tab inside the Account and click on the Set Default Payment Commerce Term Entry") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 1");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then I can select one single entry") {
			Account.setDefaultCommerceTermsEntry(
				termEntry = "BB Terms and Condition Entry",
				termType = "Payment");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,BB Terms and Condition Entry,Yes,No",
				termType = "Payment");
		}

		task ("When I go into the "Channel Defaults" tab inside the Account") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Test Account 2");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the default entry that is already selected is Use Priority Settings") {
			Account.viewDefaultDeliveryCommerceTermsEntry(termType = "Payment");
		}

		task ("And when I select one entry") {
			Account.setDefaultCommerceTermsEntry(
				termEntry = "AA Terms and Condition Entry",
				termType = "Payment");
		}

		task ("And Remove the default payment terms, "Use Priority Settings" is displayed instead of the T&C entry") {
			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.removeDefaultCommerceTerms(
				entryDetails = "AA Terms and Condition Entry",
				termType = "Payment");
		}
	}

	@description = "This is a test for the bug COMMERCE-9088, with the ticket COMMERCE-10006 | When the user select a shipping/payment option which eligible term description contains bold, italic, etc... text the checkout portlet breaks"
	@priority = 5
	test CanCompleteCheckoutWithRichTextTermDescription {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer users") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given one Payment Term description containing 'Bulleted List', 'Bold', 'Italic', 'Underline' text into the description") {
			CommercePaymentTerms.openTermsAndConditionsAdmin();

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Payment Term",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 1);

			CommerceEntry.addFullDescriptionViaCKEditor(entryFullDescription = "<ul><li><u><em><strong>Payment Term Description</strong></em></u></li></ul>");

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			ObjectAutoGenerated.assertFormatTypeOnRichText(
				richText = "Payment Term Description",
				specificType = "ul/li",
				type = "u/em/strong");

			takeScreenshot();

			SelectFrameTop();

			Button.clickPublish();
		}

		task ("Given one Delivery Term description containing 'Numbered List' text and an 'Image' into the description") {
			Click(locator1 = "Icon#BACK");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Delivery Term",
				termsAndConditionsType = "Delivery Terms",
				valuePosition = 1);

			FormFields.toggleCKEditorContentStyle(optionTool = "Image");

			CommerceItemSelector.uploadSingleFile(uploadFileName = "Commerce_Black.jpg");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			AssertElementPresent(
				key_imageTitle = "commerce_black",
				locator1 = "ObjectAutoGenerated#VIEW_IMAGE");

			takeScreenshot();

			SelectFrameTop();

			Button.clickPublish();
		}

		task ("And the admin links the delivery term to a shipping option") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoTableListEntry(entryName = "Minium Portal");

			CommerceEntry.setEntryEligibility(
				deliveryTermsEligibility = "Delivery Term",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And link the payment term to a payment method") {
			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			CommerceEntry.setEntryEligibility(
				paymentMethod = "Money Order",
				paymentTermsEligibility = "Payment Term");
		}

		task ("When the buyer login and add something to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 2);

			CommerceNavigator.gotoMiniCart();
		}

		task ("Then the checkout will be completed without errors") {
			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.initializersCheckout(
				deliveryTerm = "Delivery Term",
				managePaymentTerms = "false",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentTerm = "Payment Term",
				productName = "ABS Sensor",
				productQuantity = 2,
				productUnitPrice = 50,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10053. An error message shows up when the eligibility element is already linked"
	@priority = 3
	test CannotSelectTermEligibilityTwice {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an order type is created") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeName = "Order Type Test");
		}

		task ("And a term is created") {
			CommercePaymentTerms.openTermsAndConditionsAdmin();

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Payment Term",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 1);
		}

		task ("When the admin sets the order type eligibility for the term") {
			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(orderTypesEligibility = "Order Type Test");
		}

		task ("And selects the same order type eligibility once again") {
			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type Test",
				unpublish = "true");
		}

		task ("Then an error message is shown") {
			Alert.viewErrorMessage(errorMessage = "The qualifier is already linked.");
		}
	}

	@description = "This is a test for COMMERCE-8333. Deleting an account default delivery term will revert to Use Priority Settings"
	@priority = 4
	test RemoveADeliveryTermLinkedToAnAccountAsDefaultOne {
		property portal.acceptance = "false";

		task ("Given two Delivery Terms and Condition entries with different priorities.") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Terms and Condition Entry 1",
				termsAndConditionsType = "Delivery Terms",
				valuePosition = 1);

			Click(locator1 = "Icon#BACK");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Terms and Condition Entry 2",
				termsAndConditionsType = "Delivery Terms",
				valuePosition = 2);
		}

		task ("And given I create an account with a specific default delivery term already selected.") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.setDefaultCommerceTermsEntry(
				termEntry = "Terms and Condition Entry 1",
				termType = "Delivery");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,Terms and Condition Entry 1,Yes,No",
				termType = "Delivery");
		}

		task ("When I delete the default delivery term that was linked to an account") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.gotoEntryMenuItem(
				menuItem = "Delete",
				termsAndConditionsName = "Terms and Condition Entry 1");

			CommercePaymentTerms.viewDeleteTermsAndConditionsEntry(termsAndConditionsName = "Terms and Condition Entry 1");
		}

		task ("And I edit the account") {
			Account.openAccountsAdmin();

			Account.goToEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the default delivery is not present anymore.") {
			Account.viewDefaultDeliveryCommerceTermsEntry(termType = "Delivery");

			AssertElementPresent(
				key_termType = "Delivery",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_EMPTY_SEARCH_CONTAINER");
		}
	}

	@description = "This is a test for COMMERCE-8320. Delete an account default payment term will revert to "Use Priority Settings"."
	@priority = 4
	test RemoveAPaymentTermLinkedToAnAccountAsDefaultOne {
		property portal.acceptance = "false";

		task ("Given that I create two Terms and Conditions Payment Terms entries with different priorities.") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Terms and Condition Entry 1",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 1);

			Click(locator1 = "Icon#BACK");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Terms and Condition Entry 2",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 2);
		}

		task ("And given I create an account with a specific default payment term already selected.") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.setDefaultCommerceTermsEntry(
				termEntry = "Terms and Condition Entry 1",
				termType = "Payment");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,Terms and Condition Entry 1,Yes,No",
				termType = "Payment");
		}

		task ("When I delete the default payment term that was linked to an account") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.gotoEntryMenuItem(
				menuItem = "Delete",
				termsAndConditionsName = "Terms and Condition Entry 1");

			CommercePaymentTerms.viewDeleteTermsAndConditionsEntry(termsAndConditionsName = "Terms and Condition Entry 1");
		}

		task ("And when I edit the account") {
			Account.openAccountsAdmin();

			Account.goToEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the default payment is not present anymore.") {
			Account.viewDefaultDeliveryCommerceTermsEntry(termType = "Payment");

			AssertElementPresent(
				key_termType = "Payment",
				locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_EMPTY_SEARCH_CONTAINER");
		}
	}

	@description = "This is a test for COMMERCE-8334. If the delivery term set for the account is changed to inactive, the default term remains shown but inactive"
	@priority = 5
	test SetAnInactiveDeliveryTermLinkedToAnAccountAsDefaultOne {
		property portal.acceptance = "true";

		task ("Given a new "Terms and Conditions" entry with the status to "Active".") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Terms and Condition Entry 1",
				termsAndConditionsType = "Delivery Terms",
				valuePosition = 1);

			Click(locator1 = "Button#BACK");
		}

		task ("And given an account with a specific default delivery term already selected.") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.setDefaultCommerceTermsEntry(
				termEntry = "Terms and Condition Entry 1",
				termType = "Delivery");
		}

		task ("When I set the delivery term that was linked to an account as "inactive".") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.gotoEntryMenuItem(
				menuItem = "Edit",
				termsAndConditionsName = "Terms and Condition Entry 1");

			ClickNoError(locator1 = "ToggleSwitch#ACTIVE");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And go into the account edit order page") {
			Account.openAccountsAdmin();

			Account.goToEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the Delivery Term is inactive") {
			Account.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,Terms and Condition Entry 1,No,No",
				termType = "Delivery");
		}
	}

	@description = "This is a test for COMMERCE-8328. If the payment term set for the account is changed to inactive, the default term remains shown but inactive"
	@priority = 5
	test SetAnInactivePaymentTermLinkedToAnAccountAsDefaultOne {
		property portal.acceptance = "true";

		task ("Given a new "Terms and Conditions" entry with status to "Active".") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.addTermsAndConditions(
				active = "true",
				termsAndConditionsName = "Terms and Condition Entry 1",
				termsAndConditionsType = "Payment Terms",
				valuePosition = 1);

			Click(locator1 = "Button#BACK");
		}

		task ("And given an account with a specific default payment term already selected.") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			Account.setDefaultCommerceTermsEntry(
				termEntry = "Terms and Condition Entry 1",
				termType = "Payment");
		}

		task ("When I set the payment term that was linked to an account as "inactive".") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommercePaymentTerms.gotoEntryMenuItem(
				menuItem = "Edit",
				termsAndConditionsName = "Terms and Condition Entry 1");

			ClickNoError(locator1 = "ToggleSwitch#ACTIVE");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And I go into the account edit order page") {
			Account.openAccountsAdmin();

			Account.goToEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the Payment Term is inactive") {
			Account.viewDefaultDeliveryCommerceTermsEntry(
				termEntry = "All Channels,Terms and Condition Entry 1,No,No",
				termType = "Payment");
		}
	}

}