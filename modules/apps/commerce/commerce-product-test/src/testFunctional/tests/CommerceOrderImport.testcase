@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommerceOrderImporterTypeConfiguration.config";
	property osgi.module.configurations = "enabled=&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AbortImport {
		property portal.acceptance = "false";

		// TODO COMMERCE-7684 AbortImport pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AbortImportFromPreview {
		property portal.acceptance = "false";

		// TODO COMMERCE-7700 AbortImportFromPreview pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test DeleteAnEntryIntoAnOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-7689 DeleteAnEntryIntoAnOrder pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test EditOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-7688 EditOrder pending implementation

	}

	@description = "Verify users can import an existing order into a new order"
	@priority = "4"
	test ImportFromOrder {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given a completed order") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			var activeOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");
		}

		task ("When the buyer is creating a new order") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then they should be able to import the existing order") {
			CommerceOrders.importFromOrder(orderId = "${activeOrderId}");

			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");

			CommerceOrders.viewOrdersDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = "1",
				productSku = "MIN55861",
				productTotalPrice = "24.00");
		}
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test ImportFromOrderUseSearchBar {
		property portal.acceptance = "false";

		// TODO COMMERCE-7686 ImportFromOrderUseSearchBar pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test TryImportWithoutOrders {
		property portal.acceptance = "false";

		// TODO COMMERCE-7856 TryImportWithoutOrders pending implementation

	}

	@description = "Verify existing orders are shown when importing an order."
	@priority = "4"
	test VerifyIfAllOrdersArePresent {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given 3 completed orders") {
			for (var product : list "U-Joint:24,Mount:3,Torque Converters:34") {
				var productName = StringUtil.extractFirst("${product}", ":");
				var productUnitPrice = StringUtil.extractLast("${product}", ":");

				FrontStore.addInitializerProductToCart(
					productName = "${productName}",
					productQuantity = "1");

				CommerceNavigator.gotoMiniCart();

				Button.click(button = "View Details");

				Button.click(button = "Checkout");

				CommerceCheckout.initializersCheckout(
					newAddressAddress = "Test Address",
					newAddressCity = "Test City",
					newAddressCountry = "United States",
					newAddressName = "Address Name",
					newAddressZipCode = "Test Zip Code",
					productName = "${productName}",
					productQuantity = "1",
					productUnitPrice = "${productUnitPrice}",
					shippingMethod = "Standard");

				CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");
			}
		}

		task ("When the buyer tries to import an order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			var currentOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			Click(locator1 = "CommerceEntry#DROPDOWN");

			MenuItem.click(menuItem = "Import from Orders");
		}

		task ("Then all 3 created orders should be available for import") {
			IFrame.selectModalFrame();

			var orderIds = CommerceJSONOrdersAPI._getCommerceOrderIds(orderCount = "3");

			for (var orderId : list "${orderIds}") {
				AssertElementPresent(
					key_entryName = "${orderId}",
					locator1 = "CommerceEntry#TABLE_LIST_TITLE");
			}

			AssertElementNotPresent(
				key_entryName = "${currentOrderId}",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");
		}
	}

	@description = "Verify the order import preview after a product in the order becomes unavailable"
	@priority = "4"
	test VerifyPreviewModal {
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given a completed order with multiple products") {
			for (var productName : list "U-Joint,Transmission Cooler Line Assembly,Torque Converters") {
				FrontStore.addInitializerProductToCart(
					productName = "${productName}",
					productQuantity = "1");
			}

			WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And given the warehouse quanitity for one of the ordered products is set to 0") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = "0",
				northeastQuantity = "0",
				productName = "U-Joint",
				productSku = "MIN55861",
				southwestQuantity = "0");
		}

		task ("When the buyer is importing the order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

			Click(locator1 = "CommerceEntry#DROPDOWN");

			MenuItem.click(menuItem = "Import from Orders");

			IFrame.selectModalFrame();

			Button.click(button = "Select");
		}

		task ("Then the import preview shows that the product will not be imported") {
			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "The specified quantity is unavailable.",
				productName = "U-Joint",
				productQuantity = "1",
				productSku = "MIN55861",
				totalPrice = "",
				unitPrice = "");

			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "OK",
				productName = "Transmission Cooler Line Assembly",
				productQuantity = "1",
				productSku = "MIN55860",
				totalPrice = "15.00",
				unitPrice = "15.00");

			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "OK",
				productName = "Torque Converters",
				productQuantity = "1",
				productSku = "MIN55859",
				totalPrice = "34.00",
				unitPrice = "34.00");
		}

		task ("When the user imports the order") {
			Button.click(button = "Import");

			IFrame.selectTopFrame();
		}

		task ("Then only the other two products will be imported from the order") {
			Alert.viewSuccessMessageText(successMessage = "2 rows were imported successfully.");

			Refresh();

			CommerceOrders.viewOrdersDetails(
				productListPrice = "15.00",
				productName = "Transmission Cooler Line Assembly",
				productQuantity = "1",
				productSku = "MIN55860",
				productTotalPrice = "15.00");

			CommerceOrders.viewOrdersDetails(
				productListPrice = "34.00",
				productName = "Torque Converters",
				productQuantity = "1",
				productSku = "MIN55859",
				productTotalPrice = "34.00");

			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");
		}
	}

}