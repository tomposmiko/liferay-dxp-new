@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-11393. Can update currency format for Indian Rupee"
	@priority = 3
	test CanUpdateCurrencyFormatForINR {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("When the format pattern for Indian Rupee currency is updated to '₹ ##,##,##0.00'") {
			CommerceNavigator.goToCurrenciesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Indian Rupee");

			Type(
				key_fieldLabel = "Format Pattern",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "₹ ##,##,##0.00");

			Button.clickSave();
		}

		task ("And a simple product with base price '1000000' is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				price = 1000000,
				productName = "Simple Product",
				productType = "Simple");
		}

		task ("And Minium Portal channel currency is updated to 'Indian Rupee'") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Select(
				key_fieldLabel = "Currency",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Indian Rupee");

			Button.clickSave();
		}

		task ("And the buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the Simple Product's price is changed to '₹ ##,##,##0.00' applied to the currency format in product card") {
			var productPrice = selenium.getText("//p[@title='Simple Product']/..//span[@class='price-value']");

			var match = StringUtil.matches(${productPrice}, "₹\s\d{1,2},\d\d,\d\d,\d\d0.00");

			if (${match} == "true") {
				echo("The product price ${productPrice} is applied to '₹ ##,##,##0.00' format");
			}
			else {
				fail("The product price ${productPrice} is not applied to '₹ ##,##,##0.00' format");
			}
		}

		task ("And the Simple Product's price is changed to '₹ ##,##,##0.00' applied to the currency format in product details") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/simple-product");

			var productPrice = selenium.getText("CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE");

			var match = StringUtil.matches(${productPrice}, "₹\s\d{1,2},\d\d,\d\d,\d\d0.00");

			if (${match} == "true") {
				echo("The product price ${productPrice} is applied to '₹ ##,##,##0.00' format");
			}
			else {
				fail("The product price ${productPrice} is not applied to '₹ ##,##,##0.00' format");
			}
		}

		task ("And the Simple Product's price is changed to '₹ ##,##,##0.00' applied to the currency format in mini-cart") {
			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");

			CommerceNavigator.gotoMiniCart();

			var productPrice = selenium.getText("//p[@class='item-sku' and contains(.,'Simple Product')]/../../../..//span[@class='price-value']");

			var match = StringUtil.matches(${productPrice}, "₹\s\d{1,2},\d\d,\d\d,\d\d0.00");

			if (${match} == "true") {
				echo("The product price ${productPrice} is applied to '₹ ##,##,##0.00' format");
			}
			else {
				fail("The product price ${productPrice} is not applied to '₹ ##,##,##0.00' format");
			}
		}

		task ("And the Simple Product's price is changed to '₹ ##,##,##0.00' applied to the currency format in order pages") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.setAddress(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");

			Click(locator1 = "Button#CONTINUE");

			CommerceCheckout.setStandardShippingOption();

			var productPrice = selenium.getText("//td[contains(@class,'lfr-price-column')]");

			var match = StringUtil.matches(${productPrice}, "₹\s\d{1,2},\d\d,\d\d,\d\d0.00");

			if (${match} == "true") {
				echo("The product price ${productPrice} is applied to '₹ ##,##,##0.00' format");
			}
			else {
				fail("The product price ${productPrice} is not applied to '₹ ##,##,##0.00' format");
			}
		}
	}

	@description = "This is a test for COMMERCE-5839. As a system admin i want to be able to create / update and delete a new currency"
	@priority = 5
	test CreateAndUpdateNewCurrency {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCurrenciesEntry(
			code = "TCY",
			entryName = "Test Currency",
			exchangeRate = "1.5",
			formatPattern = "$ ###,##0.00",
			isPrimary = "false",
			symbol = "&");

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = "Test Currency");

		for (var current : list "Name/Test Currency Edited,Code/TCYE,Exchange Rate with US Dollar/1") {
			var fieldLabel = StringUtil.extractFirst(${current}, "/");
			var value = StringUtil.extractLast(${current}, "/");

			Type(
				key_fieldLabel = ${fieldLabel},
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${value});
		}

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			key_columnClassName = "exchange-rate",
			key_entryName = "Test Currency Edited",
			locator1 = "CommerceEntry#CURRENCY_COLUMN_VALUE",
			value1 = 1);

		Click(
			key_itemName = "Test Currency Edited",
			locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");
	}

	@description = "This is a test for COMMERCE-5843. As a system administrator I want disabled currencies not to be available in Price Lists, Catalogs and Channels"
	@ignore = "true"
	@priority = 3
	test DeactivateCurrency {

		// TODO COMMERCE-5843 DeactivateCurrency Pending Implementation

	}

	@description = "This is a test for COMMERCE-5842. As a system administrator I want currencies to be sorted by priority"
	@priority = 3
	test SortCurrenciesByPriority {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		AssertTextEquals(
			key_entryName = "US Dollar",
			key_rowNumber = 1,
			locator1 = "CommerceEntry#ANY_CURRENCY_PRIORITY_ELEMENT",
			value1 = "1.0");

		ClickNoError(
			key_entryName = "Euro",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		Type(
			locator1 = "CommerceEntry#PRIORITY_FIELD",
			value1 = "0.9");

		Button.clickSave();

		CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

		AssertTextEquals(
			key_entryName = "Euro",
			key_rowNumber = 1,
			locator1 = "CommerceEntry#ANY_CURRENCY_PRIORITY_ELEMENT",
			value1 = "0.9");

		AssertTextEquals(
			key_entryName = "US Dollar",
			key_rowNumber = 2,
			locator1 = "CommerceEntry#ANY_CURRENCY_PRIORITY_ELEMENT",
			value1 = "1.0");

		AssertTextEquals(
			key_entryName = "Canadian Dollar",
			key_rowNumber = 5,
			locator1 = "CommerceEntry#ANY_CURRENCY_PRIORITY_ELEMENT",
			value1 = "4.0");

		ClickNoError(
			key_entryName = "US Dollar",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		Type(
			locator1 = "CommerceEntry#PRIORITY_FIELD",
			value1 = 12);

		Button.click(button = "Save");

		CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

		AssertElementPresent(
			key_menuTab = "Currencies",
			locator1 = "CommerceEntry#MENU_TAB");

		AssertTextEquals(
			key_entryName = "US Dollar",
			locator1 = "CommerceEntry#LAST_CURRENCY_PRIORITY_ELEMENT",
			value1 = "12.0");
	}

	test ViewInstanceCurrenciesAvailable {
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,rockylinux,solaris,suse,ubuntu,windows";
		property portal.acceptance = "false";
		property portal.upstream = "true";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		CommerceEntry.viewCurrenciesEntry(currenciesList = "US Dollar,Australian Dollar,British Pound,Canadian Dollar,Chinese Yuan Renminbi,Euro,Hong Kong Dollar,Japanese Yen,Indian Rupee,Brazilian Real");
	}

}