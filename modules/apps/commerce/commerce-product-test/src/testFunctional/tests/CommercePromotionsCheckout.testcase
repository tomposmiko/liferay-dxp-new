@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-10290. Checkout an order of a product with bulk pricing on the price list and tiered price on promotions"
	@priority = 5
	test CanCheckoutProductWithBulkPriceAndPromotionTierPrice {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the tier list are changed") {
			CommercePriceLists.openPriceListsAdmin();

			MouseOver(locator1 = "Icon#PLUS");

			VerifyElementPresent(
				key_text = "Create New Price List",
				locator1 = "CP2ActivationKeys#TOOLTIPS_TEXT");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 1,
				key_value = 40);
		}

		task ("And given a promotion price entry for U-Joint is set lower than price list") {
			CommercePromotions.openPromotionsAdmin();

			MouseOver(locator1 = "Icon#PLUS");

			VerifyElementPresent(
				key_text = "Create New Promotion",
				locator1 = "CP2ActivationKeys#TOOLTIPS_TEXT");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 4,
				key_value = 10);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the U-Joint price is the new price list(40.00)") {
			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "40.00");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 10,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10282. Can checkout an order of a product with bulk pricing only on the promotions"
	@priority = 3
	test CanCheckoutProductWithBulkPriceOnlyInPromotions {
		property portal.acceptance = "false";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a promotion price entry for U-Joint is set lower than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 5,
				key_value = 15);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 5,
				productUnitPrice = 15,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10307. Can checkout an order of a product with price list with bulk and promotion with bulk"
	@priority = 5
	test CanCheckoutProductWithBulkPriceOnPromotionAndPriceList {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the tier list are changed") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 1,
				key_value = 50);
		}

		task ("And given a promotion price entry for U-Joint is set lower than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 5,
				key_value = 30);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the U-Joint price is the new price list(50.00)") {
			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "50.00");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 5,
				productUnitPrice = 30,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10306. Can checkout an order of a product with price list with tier and promotion with bulk"
	@priority = 5
	test CanCheckoutProductWithBulkPriceOnPromotionAndTierPriceOnPriceList {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the tier list are changed") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Tiered Pricing",
				key_quantity = 1,
				key_value = 50);
		}

		task ("And given a promotion price entry for U-Joint is set lower than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 5,
				key_value = 30);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the U-Joint price is the new price list(50.00)") {
			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "50.00");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 5,
				productUnitPrice = 30,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10289. Can checkout an order of a product with tier price list and promotion tier"
	@priority = 5
	test CanCheckoutProductWithTierPriceAndPromotionTierPrice {
		property portal.acceptance = "true";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the tier list are changed") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Tiered Pricing",
				key_quantity = 1,
				key_value = 50);
		}

		task ("And given a promotion price entry for U-Joint is set lower than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Tiered Pricing",
				key_quantity = 5,
				key_value = 50);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the U-Joint price is the new price list(50.00)") {
			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "50.00");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 5,
				productUnitPrice = 10,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-10281. Can checkout an order of a product with tier pricing only on the promotions"
	@priority = 3
	test CanCheckoutProductWithTierPriceOnlyInPromotion {
		property portal.acceptance = "false";

		task ("Given a Commerce Account and Buyer User are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a promotion price entry for U-Joint is set lower than price list") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Tiered Pricing",
				key_quantity = 5,
				key_value = 10);
		}

		task ("And Buyer User logged in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user add a product to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 5);
		}

		task ("Then by clicking Submit button from minicart, the checkout process is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 5,
				productUnitPrice = 2,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

}