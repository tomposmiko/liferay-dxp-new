@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6219. MoneyOrder Payment Method lifecycle"
	@priority = 5
	test CancelPayment {
		property portal.acceptance = "true";

		// TODO Review

		task ("Given a minium site with a buyer user ") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test Account");

			CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
				accountName = "Test Account",
				emailAddress = "buyer@liferay.com",
				role = "Buyer",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			Click(locator1 = "Dropdown#FILTER_AND_ORDER");

			MenuItem.click(menuItem = "Account Users");

			CommerceLogin.editPasswordCP(
				newPassword = "ttest",
				requirePasswordReset = "true",
				userScreenName = "buyeruser");

			User.logoutPG();
		}

		task ("and the buyer places an order ") {
			CommerceLogin.miniumLogin(
				newPassword = "test",
				password = "ttest",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			Refresh();

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			User.logoutPG();
		}

		task ("When the order status is changed from Pending to Cancelled") {
			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "test@liferay.com");

			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Orders");

			WaitForElementPresent(
				key_orderStatus = "Pending",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			ClickNoError(
				key_orderStatus = "Pending",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			CommerceEntry.clickNoError(menuItem = "View");

			CommerceEntry.gotoMenuTab(menuTab = "Payments");

			CommercePaymentStatus.editPaymentStatus(statusValue = "Canceled");
		}

		task ("Then the payment should be cancelled") {
			Refresh();

			CommercePaymentStatus.assertPaymentStatus(statusValue = "Canceled");
		}
	}

	@description = "This is a test for COMMERCE-6218. MoneyOrder Payment Method lifecycle"
	@priority = 5
	test MoneyOrderCheckout {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommercePayments#MoneyOrderCheckout";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "Italy",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");
	}

}