@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommerceOrderImporterTypeConfiguration.config";
	property osgi.module.configurations = "enabled=\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(
			minium = "true",
			moneyOrder = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-10075 | Can import existing orders based on the product's Maximum and Multiple Order Quantity set(maximum > multiple)"
	@priority = 5
	test CanAssertInvalidQuantityNotImportedWhenMaximumIsHigherThanMultiple {
		property portal.acceptance = "true";

		var maxOrderQuantity = 10;
		var multipleOrderQuantity = 4;
		var orderIds = ListUtil.newList();

		task ("Given 3 placed orders are created") {
			for (var quantity : list "12,5,8") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Maximum Order Quantity is set to '10' and Multiple Order Quantity is set to 4") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = ${maxOrderQuantity},
				multipleOrderQuantity = ${multipleOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(12)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The maximum quantity is x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The maximum quantity is ${maxOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 12,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("And the buyer imports the order with an invalid quantity(5)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'The specified quantity is not a multiple of x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The specified quantity is not a multiple of ${multipleOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 5,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(8)") {
			var orderId = ListUtil.get(${orderIds}, 2);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 8,
					productSkus = "MIN55861",
					productTotalPrices = "192.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

	@description = "COMMERCE-10240 | Can import existing orders based on the product's Maximum and Multiple Order Quantity set(maximum < multiple)"
	@priority = 5
	test CanAssertInvalidQuantityNotImportedWhenMaximumIsLowerThanMultiple {
		property portal.acceptance = "true";

		var maxOrderQuantity = 4;
		var multipleOrderQuantity = 5;
		var orderIds = ListUtil.newList();

		task ("Given 2 placed orders are created") {
			for (var quantity : list "10,3") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Maximum Order Quantity is set to '4' and Multiple Order Quantity is set to 5") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = ${maxOrderQuantity},
				multipleOrderQuantity = ${multipleOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(10)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The maximum quantity is x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The maximum quantity is ${maxOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 10,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("And the buyer imports the order with an invalid quantity(3)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'The specified quantity is not a multiple of x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The specified quantity is not a multiple of ${multipleOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 3,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}
	}

	@description = "COMMERCE-10073 | Can import existing orders based on the product's Minimum and Multiple Order Quantity set(minimum > multiple)"
	@priority = 5
	test CanAssertInvalidQuantityNotImportedWhenMinimumIsHigherThanMultiple {
		property portal.acceptance = "true";

		var minOrderQuantity = 5;
		var multipleOrderQuantity = 2;
		var orderIds = ListUtil.newList();

		task ("Given 3 placed orders are created") {
			for (var quantity : list "4,7,6") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Minimum Order Quantity is set to '5' and Multiple Order Quantity is set to 2") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = ${minOrderQuantity},
				multipleOrderQuantity = ${multipleOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(4)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The minimum quantity is x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The minimum quantity is ${minOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 4,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("And the buyer imports the order with an invalid quantity(7)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'The specified quantity is not a multiple of x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The specified quantity is not a multiple of ${multipleOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 7,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(6)") {
			var orderId = ListUtil.get(${orderIds}, 2);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 6,
					productSkus = "MIN55861",
					productTotalPrices = "144.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

	@description = "COMMERCE-10074 | Can import existing orders based on the product's Minimum and Multiple Order Quantity set(minimum < multiple)"
	@priority = 5
	test CanAssertInvalidQuantityNotImportedWhenMinimumIsLowerThanMultiple {
		property portal.acceptance = "true";

		var minOrderQuantity = 3;
		var multipleOrderQuantity = 4;
		var orderIds = ListUtil.newList();

		task ("Given 3 placed orders are created") {
			for (var quantity : list "2,6,8") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Minimum Order Quantity is set to '3' and Multiple Order Quantity is set to 4") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = ${minOrderQuantity},
				multipleOrderQuantity = ${multipleOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(2)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The minimum quantity is x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The minimum quantity is ${minOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 2,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("And the buyer imports the order with an invalid quantity(6)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'The specified quantity is not a multiple of x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The specified quantity is not a multiple of ${multipleOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 6,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(8)") {
			var orderId = ListUtil.get(${orderIds}, 2);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 8,
					productSkus = "MIN55861",
					productTotalPrices = "192.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

	@description = "COMMERCE-10072 | Can import existing orders based on the product's Allowed Order Quantity set"
	@priority = 4
	test CanImportValidAllowedQuantity {
		property portal.acceptance = "false";

		var allowedOrderQuantities = "1,3,6";
		var orderIds = ListUtil.newList();

		task ("Given 2 placed orders are created") {
			for (var quantity : list "4,6") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Minimum Order Quantity is set to '1,3,6'") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowedOrderQuantities = ${allowedOrderQuantities},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(4)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The specified quantity is not allowed.'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The specified quantity is not allowed.",
					productNames = "U-Joint",
					productQuantities = 4,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(6)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 6,
					productSkus = "MIN55861",
					productTotalPrices = "144.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

	@description = "COMMERCE-10070 | Can import existing orders based on the product's Maximum Order Quantity set"
	@priority = 4
	test CanImportValidMaximumQuantity {
		property portal.acceptance = "false";

		var maxOrderQuantity = 5;
		var orderIds = ListUtil.newList();

		task ("Given 2 placed orders are created") {
			for (var quantity : list "6,4") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Maximum Order Quantity is set to 5") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = ${maxOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(6)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The maximum quantity is x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The maximum quantity is ${maxOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 6,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(4)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 4,
					productSkus = "MIN55861",
					productTotalPrices = "96.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

	@description = "COMMERCE-10069 | Can import existing orders based on the product's Minimum Order Quantity set"
	@priority = 4
	test CanImportValidMinimumQuantity {
		property portal.acceptance = "false";

		var minOrderQuantity = 5;
		var orderIds = ListUtil.newList();

		task ("Given 2 placed orders are created") {
			for (var quantity : list "4,6") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Minimum Order Quantity is set to 5") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = ${minOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(4)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The minimum quantity is x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The minimum quantity is ${minOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 4,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(6)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 6,
					productSkus = "MIN55861",
					productTotalPrices = "144.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

	@description = "COMMERCE-10071 | Can import existing orders based on the product's Multiple Order Quantity set"
	@priority = 4
	test CanImportValidMultipleQuantity {
		property portal.acceptance = "false";

		var multipleOrderQuantity = 3;
		var orderIds = ListUtil.newList();

		task ("Given 2 placed orders are created") {
			for (var quantity : list "4,6") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account",
					orderItems = "MIN55861:${quantity}",
					orderStatus = 1,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${orderIds}, ${orderId});
			}
		}

		task ("And U-Joint Multiple Order Quantity is set to 5") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = ${multipleOrderQuantity},
				productName = "U-Joint");
		}

		task ("When the buyer creates a new order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer imports the order with an invalid quantity(4)") {
			var orderId = ListUtil.get(${orderIds}, 0);

			task ("And the order item status in the preview will be 'The specified quantity is not a multiple of x'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "The specified quantity is not a multiple of ${multipleOrderQuantity}",
					productNames = "U-Joint",
					productQuantities = 4,
					productSkus = "MIN55861");
			}
		}

		task ("Then the order item will not be imported") {
			Alert.viewErrorMessage(errorMessage = "1 row was not imported.");
		}

		task ("When the buyer imports the order with a valid quantity(6)") {
			var orderId = ListUtil.get(${orderIds}, 1);

			task ("And the order item status in the preview will be 'OK'") {
				CommerceOrders.importFromOrder(
					orderId = ${orderId},
					productImportStatuses = "OK",
					productNames = "U-Joint",
					productQuantities = 6,
					productSkus = "MIN55861",
					productTotalPrices = "144.00",
					productUnitPrices = "24.00");
			}
		}

		task ("Then the order item will be successfully imported") {
			Alert.viewSuccessMessageText(successMessage = "1 row was imported successfully.");
		}
	}

}