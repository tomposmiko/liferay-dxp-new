@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-5898=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify a product's availability can be viewed via an availability fragment deployed on a default Commerce Product Display Page Template."
	@priority = "3"
	test CanAssertProductAvailabilityUsingAvailabilityFragment {
		task ("Given a new default Commerce Product type display page template") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And given an availability fragment is deployed on the page") {
			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Availability",
				publish = "false",
				siteURLKey = "minium");
		}

		task ("And given the fragment contains 'The availability component will be shown here.'") {
			PageEditor.viewFragmentMessageInfo(
				fragmentName = "Availability",
				messageInfo = "The availability component will be shown here.");
		}

		task ("And given the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And given the page is marked as Default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer logs in and clicks on the U-Joint product") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Availability fragment is present with the Available tag") {
			AssertElementPresent(
				key_availability = "Available",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}

		task ("When the buyer clicks on the Power Steering Pump product") {
			GoBack();

			CommerceNavigator.searchEntry(entryName = "Power Steering Pump");

			Click(
				key_productName = "power-steering-pump",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Availability fragment is present with the Unavailable tag") {
			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}
	}

	@description = "Verify an Override Default Product Display Page overrides a Commerce Product Display Page Template marked as default."
	@priority = "4"
	test CanDefaultCommerceProductDPTBeOverriddenByOverrideDefaultProductDisplayPageSet {
		task ("Given a new Commerce Product type display page template marked as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Basic Components",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Heading",
				publish = "false",
				siteURLKey = "minium");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Commerce Product Display Page Template");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("And given an Override Default Product Display Page is set for U-Joint") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page",
				widgetName = "Product Details");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public",
				product = "U-Joint");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "U-Joint",
				layout = "Test Public Widget Page");
		}

		task ("When the buyer logs in and clicks on the U-Joint product") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Override Product Display Page is shown") {
			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");
		}

		task ("And not the Commerce Product Display Page Template") {
			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@description = "Verify a Commerce Product Display Page Template marked as default overrides the Default Product Display Page."
	@priority = "4"
	test CanDefaultCommerceProductDPTOverrideDefaultProductDisplayPageSet {
		task ("Given a new Commerce Product type display page template marked as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Basic Components",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Heading",
				publish = "false",
				siteURLKey = "minium");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Commerce Product Display Page Template");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("And given a Default Product Display Page is set") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page",
				widgetName = "Product Details");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public");
		}

		task ("When the buyer logs in and clicks on a product") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Commerce Product Display Page Template is shown") {
			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Commerce Product Display Page Template");
		}

		task ("And not the Default Product Display Page") {
			AssertElementNotPresent(
				locator1 = "CommerceFrontStore#FS_PRODUCT_NAME",
				value1 = "${productName}");
		}
	}

	@description = "Verify users can mark and unmark a commerce product display page template as the Default page so that the template can become the default page for the Product Details page."
	@priority = "4"
	test CanMarkAndUnmarkCommerceProductDPTAsDefault {
		task ("Given a new Commerce Product type display page template is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And given a heading fragment is deployed on the page") {
			DisplayPageTemplate.addFragment(
				collectionName = "Basic Components",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Heading",
				publish = "false",
				siteURLKey = "minium");
		}

		task ("And given the Heading text is set as Commerce Product Display Page Template") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Commerce Product Display Page Template");
		}

		task ("And given the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And given the page is marked as Default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer logs in and clicks on a product") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Commerce Product Display Page Template set is shown with the heading fragment") {
			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Commerce Product Display Page Template");
		}

		task ("Given the template page is unmarked as Default") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "Minium");

			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Unmark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			AssertConfirm(value1 = "Some assets might be set to use the default display page. Are you sure you want to unmark this?");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer logs in and clicks on a product") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Minium product detail page is shown") {
			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");
		}
	}

	@description = "Verify a product's images can be viewed via an Image Gallery fragment deployed on a default Commerce Product Display Page Template."
	@priority = "3"
	test CanViewProductImagesUsingImageGalleryFragment {
		task ("Given a new default Commerce Product type display page template") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And given an Image Gallery fragment is deployed on the page") {
			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Image Gallery",
				publish = "false",
				siteURLKey = "minium");
		}

		task ("And given the fragment contains 'The gallery component will be shown here.'") {
			PageEditor.viewFragmentMessageInfo(
				fragmentName = "Image Gallery",
				messageInfo = "The gallery component will be shown here.");
		}

		task ("And given the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And given the page is marked as Default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("And given a new image is added for the U-Joint product") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceProductImages.addProductImages(imageTitles = "Black");
		}

		task ("And given the new image has the highest priority") {
			CommerceNavigator.gotoEntry(entryName = "Minium_ProductImage_64.png");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Type(
				locator1 = "CommerceEntry#PRIORITY_FIELD",
				value1 = "1");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			IFrame.selectTopFrame();

			Button.clickPublish();
		}

		task ("When the buyer logs in and clicks on the U-Joint product") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then the Image Gallery fragment is present") {
			WaitForElementPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");
		}

		task ("And it is possible to use its functionalities(previous arrow, next arrow, select from the list of images, image overlay)") {
			Click(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");

			AssertElementPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_OVERLAY");

			Click(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_OVERLAY");

			AssertElementPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");

			Click(locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_ARROW_NEXT");

			AssertElementPresent(
				key_fsProductImage = "Minium_ProductImage",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");

			Click(locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_ARROW_PREV");

			AssertElementPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");

			Click(
				key_fsProductImage = "Minium_ProductImage",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_THUMBNAIL");

			AssertElementPresent(
				key_fsProductImage = "Minium_ProductImage",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");

			Click(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_THUMBNAIL");

			AssertElementPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_IMAGE_GALLERY_MAIN_IMAGE");
		}
	}

}