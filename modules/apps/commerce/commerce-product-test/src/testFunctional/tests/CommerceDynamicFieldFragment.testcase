@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		task ("Given a Minium site") {
			CommerceConfiguration.commerceSetUp(minium = "true");
		}

		task ("And an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a new Display Page Template for Commerce Product is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Product DPT",
				groupName = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11074. Using Dynamic Field fragment, I want to be able to map product fields that will be automatically updated if the selected option is changed."
	@priority = 5
	test CanDynamicFieldFragmentMapProductFields {
		property portal.acceptance = "true";

		task ("Given GTIN and MPN fields are added to some skus") {
			var index = 1;

			for (var sku : list "MIN55861,MIN93022A,MIN93022C") {
				CommerceJSONProductsAPI._patchCommerceSku(
					discontinued = "false",
					gtin = "GTIN000${index}",
					manufacturerPartNumber = "MPN000${index}",
					productSku = ${sku});

				var index = ${index} + 1;
			}
		}

		task ("And a Dynamic Field fragment is deployed for each field(Inventory, Sku, GTIN, MPN)") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			var index = 1;

			for (var field : list "Inventory,SKU,GTIN,Manufacturer Part Number") {
				CommerceDisplayPageTemplates.addFragment(
					collectionName = "Product",
					fragmentName = "Dynamic Field",
					index = ${index});

				task ("And a label is added for each field") {
					CommerceDisplayPageTemplates.editDynamicField(
						field = ${field},
						fragmentName = "Dynamic Field",
						index = ${index},
						label = ${field});
				}

				var index = ${index} + 1;
			}
		}

		task ("And an Option Selector fragment is deployed") {
			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = ${index},
				targetFragmentName = "Dynamic Field");
		}

		task ("And the template is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer navigates to U-Joint page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then all values are shown for the product") {
			CommerceDisplayPageTemplates.viewDynamicFields(valuesList = "Inventory:120,SKU:MIN55861,GTIN:GTIN0001,Manufacturer Part Number:MPN0001");
		}

		task ("When the buyer navigates to Hoses page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then all values are shown for the product based on the default option selected") {
			CommerceDisplayPageTemplates.viewDynamicFields(valuesList = "Inventory:120,SKU:MIN93022A,GTIN:GTIN0002,Manufacturer Part Number:MPN0002");
		}

		task ("When the buyer changes the selected option") {
			FrontStore.selectAssociatedFSOptionsValue(
				fsOptionName = "Package Quantity",
				fsOptionValue = 48);
		}

		task ("Then the Dynamic Field fragments update and values are shown based on the selected option") {
			CommerceDisplayPageTemplates.viewDynamicFields(valuesList = "Inventory:240,SKU:MIN93022C,GTIN:GTIN0003,Manufacturer Part Number:MPN0003");
		}
	}

	@description = "COMMERCE-11075. Using Dynamic Field fragment, I want to be able to change the HTML element where the label and the value are shown."
	@priority = 4
	test CanSetDynamicFieldFragmentElementTypes {
		property portal.acceptance = "false";

		var elementsList = "div:H1,H2:H3,H4:H5,H6:p";

		task ("Given GTIN and MPN fields are added to a sku") {
			CommerceJSONProductsAPI._patchCommerceSku(
				discontinued = "false",
				gtin = "GTIN0001",
				manufacturerPartNumber = "MPN0001",
				productSku = "MIN55861");
		}

		task ("And 4 Dynamic Field fragments are deployed with different Label Element Types and Value Element Types for each fragment") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			var count = 0;
			var elementsList = ListUtil.newListFromString(${elementsList});
			var index = 1;

			for (var field : list "Inventory,SKU,GTIN,Manufacturer Part Number") {
				var elements = ListUtil.get(${elementsList}, ${count});

				var labelElementType = StringUtil.extractFirst(${elements}, ":");
				var valueElementType = StringUtil.extractLast(${elements}, ":");

				CommerceDisplayPageTemplates.addFragment(
					collectionName = "Product",
					fragmentName = "Dynamic Field",
					index = ${index});

				task ("And a label, a label element type and a value element type are added for each field") {
					CommerceDisplayPageTemplates.editDynamicField(
						field = ${field},
						fragmentName = "Dynamic Field",
						index = ${index},
						label = ${field},
						labelElementType = ${labelElementType},
						valueElementType = ${valueElementType});
				}

				var index = ${index} + 1;
				var count = ${count} + 1;

				var count = StringUtil.valueOf(${count});
			}

			var elementsList = ListUtil.toString(${elementsList});
		}

		task ("And the template is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer navigates to U-Joint page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then the HTML element set for labels and values is shown in the Dynamic Fields fragment") {
			CommerceDisplayPageTemplates.viewDynamicFields(
				elementsList = ${elementsList},
				valuesList = "Inventory:120,SKU:MIN55861,GTIN:GTIN0001,Manufacturer Part Number:MPN0001");
		}
	}

}