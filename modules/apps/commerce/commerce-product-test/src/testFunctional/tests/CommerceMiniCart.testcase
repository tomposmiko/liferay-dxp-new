@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-6343. As a buyer, I want to be able to select only the allowed quantities of a cart item, if set"
	@priority = 5
	test AssertOnlyAllowedQuantitiesAreSelectableInMiniCartItem {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.searchProduct(search = "U-Joint");

		CommerceNavigator.gotoEntry(entryName = "U-Joint");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldLabel = "Allowed Order Quantities",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1 4 5 7 11");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Select(
			key_productName = "U-Joint",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD",
			value1 = 1);

		Click(
			key_productName = "U-Joint",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

		CommerceNavigator.gotoMiniCart();

		AssertElementPresent(
			key_dropdownOption = 1,
			locator1 = "AppBuilder#PRODUCT_MENU_PLACE_IT_DROPDOWN_OPTION");

		AssertElementPresent(
			key_dropdownOption = 4,
			locator1 = "AppBuilder#PRODUCT_MENU_PLACE_IT_DROPDOWN_OPTION");

		AssertElementPresent(
			key_dropdownOption = 5,
			locator1 = "AppBuilder#PRODUCT_MENU_PLACE_IT_DROPDOWN_OPTION");

		AssertElementPresent(
			key_dropdownOption = 7,
			locator1 = "AppBuilder#PRODUCT_MENU_PLACE_IT_DROPDOWN_OPTION");

		AssertElementPresent(
			key_dropdownOption = 11,
			locator1 = "AppBuilder#PRODUCT_MENU_PLACE_IT_DROPDOWN_OPTION");
	}

	@description = "COMMERCE-6346. As a buyer, I want to be able to select the quantity of a cart item by multiple value, if set"
	@priority = 5
	test AssertOnlyMultipleValuesAreSelectableQuantitiesInMiniCartItem {
		property portal.acceptance = "true";

		// TODO Review

		var multipleQuantity = 3;
		var product = "U-Joint";
		var productSku = "MIN55861";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = ${product});

		CommerceNavigator.gotoEntry(entryName = ${product});

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_text = "Multiple Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = ${multipleQuantity});

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addToCartProductWithInvalidQuantityValue(
			productName = ${product},
			productQuantity = 1);

		FrontStore.addInitializerProductToCart(
			productName = ${product},
			productQuantity = ${multipleQuantity});

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_cartItemSku = ${productSku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
			value1 = ${multipleQuantity});

		for (var quantity : list "1,3,4,6,300") {
			Type(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			AssertTextEquals(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			if ((${quantity} == 1) || (${quantity} == 4)) {
				var conditionNotSatisfied = "true";

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");
			}
			else {
				var conditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = ${conditionNotSatisfied},
				quantity = ${multipleQuantity},
				quantityConfiguration = "multiple");
		}
	}

	@description = "This is a test for COMMERCE-10680. Only one minicart item should be created after adding a SKU using both quick add-to-cart and the normal add-to-cart"
	@priority = 3
	test AssertQuantityInMiniCartItemCanBeOverlappedUsingNormalAndQuickAdd {
		property portal.acceptance = "false";

		task ("Given a Minium site with an account") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");
		}

		task ("When adding the SKU 'MIN93016A' from the 'Brake Fluid' product details to the cart with quantity 1") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			Click(
				key_productName = "Brake Fluid",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_VIEW_ALL_VARIANTS");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Package Quantity:12",
				productName = "Brake Fluid",
				productSku = "MIN93016A");

			CommerceNavigator.gotoMiniCart();

			AssertTextEquals(
				key_cartItemSku = "MIN93016A",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = 1);
		}

		task ("And adding the same SKU from the quick add-to-cart search bar with quantity 1") {
			FrontStore.quickAddToCartSearchAndSelectItem(orderItemSku = "MIN93016A");

			AssertElementPresent(
				locator1 = "CommerceWidget#TAG_FACET_LABEL_LAYOUT",
				tagName = "MIN93016A");

			Click(locator1 = "CommerceAccelerators#QUICK_ADD_TO_CART_BUTTON");
		}

		task ("Then the SKU in the cart is updated to quantity 2") {
			AssertTextEquals(
				key_cartItemSku = "MIN93016A",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = 2);
		}
	}

	@description = "COMMERCE-6345. As a buyer, I want to be able to select the quantity of a cart item up to a maximum quantity, if set"
	@priority = 5
	test AssertQuantityInMiniCartItemCanBeSelectedUpToAMaximumQuantitySet {
		property portal.acceptance = "true";

		// TODO Review

		var maximumQuantity = 4;
		var product = "U-Joint";
		var productSku = "MIN55861";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.searchProduct(search = ${product});

		CommerceNavigator.gotoEntry(entryName = ${product});

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldLabel = "Maximum Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${maximumQuantity});

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addToCartProductWithInvalidQuantityValue(
			productName = ${product},
			productQuantity = 10);

		FrontStore.addInitializerProductToCart(
			productName = ${product},
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_cartItemSku = ${productSku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
			value1 = 1);

		for (var quantity : list "4,5,10") {
			Type(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			AssertTextEquals(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			if ((${quantity} == 5) || (${quantity} == 10)) {
				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");

				FrontStore.viewQuantitySelectorPopoverListItem(
					conditionNotSatisfied = "true",
					quantity = ${maximumQuantity},
					quantityConfiguration = "max");
			}
			else {
				AssertElementNotPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");
			}
		}
	}

	@description = "COMMERCE-6344. As a buyer, I want to be able to select the quantity of a cart item starting from a minimum quantity, if set"
	@priority = 5
	test AssertSelectableQuantitiesInMiniCartItemStartFromMinimumQuantitySet {
		property portal.acceptance = "true";

		// TODO Review

		var minimumQuantity = 3;
		var product = "U-Joint";
		var productSku = "MIN55861";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.searchProduct(search = ${product});

		CommerceNavigator.gotoEntry(entryName = ${product});

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldLabel = "Minimum Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${minimumQuantity});

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addToCartProductWithInvalidQuantityValue(
			productName = ${product},
			productQuantity = 1);

		FrontStore.addInitializerProductToCart(
			productName = ${product},
			productQuantity = ${minimumQuantity});

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_cartItemSku = ${productSku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
			value1 = ${minimumQuantity});

		for (var quantity : list "1,2,3") {
			Type(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			AssertTextEquals(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			if ((${quantity} == 1) || (${quantity} == 2)) {
				var conditionNotSatisfied = "true";

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");
			}
			else {
				var conditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = ${conditionNotSatisfied},
				quantity = ${minimumQuantity},
				quantityConfiguration = "min");
		}
	}

	@description = "Verify products with long names are truncated in the mini-cart."
	@priority = 3
	test CanSeeProductNameTruncated {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a product with a very long name") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "This Is a Product With a Very Long Name That Will Be Truncated",
				productType = "Simple");
		}

		task ("When the buyer adds the product to the cart and opens the mini-cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "This Is a Product With a Very Long Name That Will Be Truncated",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();
		}

		task ("Then the product name is shown truncated") {
			TestUtils.assertTruncatedText(element = "//div[contains(@class,'mini-cart-item-info')]//h5[contains(text(),'This Is a Product With a Very Long Name That Will Be Truncated')]");
		}
	}

	@description = "This is a test for COMMERCE-7870. CanUpdateSubscriptionProductQuantity"
	@priority = 4
	test CanUpdateSubscriptionProductQuantity {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium site with an account and buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a product with subscription") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceProducts.searchProduct(search = "ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Subscription");

			Click(locator1 = "CommerceEntry#DELIVERY_SUBSCRIPTION_TOGGLE");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("When the product with subscription is added to the cart by buyer") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 1);
		}

		task ("And the product quantity is increased") {
			CommerceNavigator.gotoMiniCart();

			Type(
				key_cartItemSku = "MIN93015",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = 5);
		}

		task ("Then the mini cart summary is updated according to the product quantity") {
			AssertTextEquals(
				key_summaryTableItem = "Quantity",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = 5);

			AssertTextEquals(
				key_summaryTableItem = "Subtotal",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = "$ 250.00");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
				value1 = "$ 250.00");

			AssertElementNotPresent(
				key_cartItemSku = "MIN93015",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");
		}

		task ("And when the product quantity is decreased") {
			Type(
				key_cartItemSku = "MIN93015",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = 2);
		}

		task ("Then the mini cart summary is again updated according to the product quantity") {
			AssertTextEquals(
				key_summaryTableItem = "Quantity",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = 2);

			AssertTextEquals(
				key_summaryTableItem = "Subtotal",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = "$ 100.00");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
				value1 = "$ 100.00");

			AssertElementNotPresent(
				key_cartItemSku = "MIN93015",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");
		}
	}

	@description = "COMMERCE-10247 Verify that the buyer can complete the checkout using the mini cart widget"
	@priority = 4
	test CanUseMiniCartWidgetToCheckout {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given a buyer user associated with the Commerce Account") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the admin add the mini cart widget") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.addPortlet(portletName = "Mini Cart");
		}

		task ("When the buyer logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And add something to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then the buyer can start and complete the checkout using the mini cart widget ") {
			Click(
				key_text = "Checkout",
				locator1 = "Button#ANY");

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}
	}

	@description = "COMMERCE-10247 Verify that the admin can complete the checkout using the mini cart widget with the Buyer Order Approval Workflow"
	@priority = 5
	test CanUseMiniCartWidgetToCheckoutWithBuyerOrderApprovalWorkflow {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CommerceMiniCart#CanUseMiniCartWidgetToCheckoutWithBuyerOrderApprovalWorkflow";

		var approvedCount = 0;

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given the admin enabled the 'Buyer Order Approval Workflow' for Minium Portal") {
			CommerceNavigator.gotoPortlet(
				category = "Store Management",
				portlet = "Channels");

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Select(
				key_title = "Buyer Order Approval Workflow",
				locator1 = "CommerceEntry#CATALOGS_FORM",
				value1 = "Single Approver (Version 1)");

			Button.clickSave();
		}

		task ("And the admin add the mini cart widget") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			CommerceAcceleratorsInitializer.addPortlet(portletName = "Mini Cart");
		}

		task ("And a business account is created") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(
				accountName = "Commerce Account",
				adminEmailAddress = "test@liferay.com");
		}

		task ("And add something to the cart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then the admin can approve and start the checkout of the order directly using the mini cart") {
			for (var value : list "Submit,Approve,Reject,Approve") {
				Click(
					key_text = ${value},
					locator1 = "Button#ANY");

				if (${value} == "Approve") {
					if (${approvedCount} == 1) {
						Button.clickDone();

						Click(
							key_text = "Checkout",
							locator1 = "Button#ANY");
					}
					else {
						Button.clickCancel();
					}

					var approvedCount = ${approvedCount} + 1;
				}

				if (${value} == "Reject") {
					Button.clickDone();

					Click(
						key_text = "Resubmit",
						locator1 = "Button#ANY");

					Button.clickDone();
				}
			}
		}

		task ("And the admin can complete the checkout") {
			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}
	}

	@description = "COMMERCE-7695. As a buyer, I want to verify if I will be redirected to the product details when I click on the item in the minicart"
	@priority = 5
	test ClickOnCartItemRedirectToProductDetails {
		property portal.acceptance = "true";

		task ("Given a Commerce Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");
		}

		task ("And Given a product in the cart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceNavigator.searchCatalog(productName = "U-Joint");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "U-Joint",
				cartItemQuantity = 3,
				cartItemSku = "MIN55861");
		}

		task ("When the item in the minicart is selected") {
			CommerceNavigator.gotoMiniCartEntry(
				cartItemSku = "MIN55861",
				entryName = "U-Joint");
		}

		task ("Then the user is navigated to the product detail page") {
			FrontStore.viewProductDetail(fsProductName = "U-Joint");
		}

		task ("And When the product in the minicart has the number in the quantity box changed") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "U-Joint",
				cartItemQuantity = 3,
				cartItemSku = "MIN55861");

			CommerceNavigator.editMiniCartItemQuantity(
				cartItemSku = "MIN55861",
				productQuantity = 5);
		}

		task ("Then the item quantity will be changed to the new number") {
			CommerceNavigator.validateMiniCartItemQuantity(
				cartItemSku = "MIN55861",
				productQuantity = 5);
		}
	}

	@description = "COMMERCE-7751 As a buyer, I want to add a cart widget to the pending orders page and I want to view the product details and edit the quantity of an item in the cart widget"
	@priority = 3
	test ClickOnCartItemWidgetRedirectToProductDetails {
		property portal.acceptance = "false";

		task ("Given a Commerce Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");
		}

		task ("And Given a product in the cart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceNavigator.searchCatalog(productName = "U-Joint");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);
		}

		task ("When a cart widget is added to pending orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Portlet.addPGCmd(portletName = "Cart");
		}

		task ("Then clicking on product in cart widget navigates to product detail page") {
			CommerceNavigator.viewCartPortletEntry(productName = "U-Joint");

			FrontStore.viewProductDetail(fsProductName = "U-Joint");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			CommerceOrders.editCartPortletOrderQuantity(orderQuantity = 2);
		}
	}

	@description = "COMMERCE-6335. As a buyer, I want to edit the quantity of an bundled product in the mini-cart using it's quantity selector and I want to view the changes applied to the mini-cart summary and the bundled items to change their quantity"
	@priority = 5
	test EditBundledProductQuantityFromMiniCart {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		task ("Given a Commerce Account with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("and a new option is created with Faceted Navigation, Required, and SKU Contributor enabled with an option value") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Options");

			CPCommerceCatalog.newOptionsEntry(
				facetable = "true",
				optionDescription = "Option Description",
				optionFieldType = "Select from List",
				optionName = "Color",
				required = "true",
				skuContributor = "true");

			Button.clickSave();

			CommerceOptions.addNewOptionValue(
				valueName = "Black",
				valuePosition = "");

			SelectFrameTop();

			Button.clickSave();
		}

		task ("When creating a simple product with a set option value") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceOptions.addColorOption();

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "Color");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceOptions.setPriceType(priceType = "Static");

			Button.clickSave();

			Alert.viewSuccessMessage();

			CommerceOptions.setDeltaPrice(
				deltaPrice = "60.00",
				key_index = "Black",
				productSKU = "MIN55861");

			Button.clickSave();

			Alert.viewSuccessMessage();

			Refresh();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.addSKU(optionValuesList = "Black:10.0");

			Refresh();
		}

		task ("and adding the product to the bundled product to the cart") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAccelerators.viewAllVariants(productName = "Bundled Product");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Black",
				productName = "Bundled Product",
				productSku = "BLACKSKU");
		}

		task ("Then as an admin and a buyer, the user is able to edit and view the bundled product details in the mini cart.") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "Bundled Product",
				cartItemOption = "black",
				cartItemPriceValue = "70.00",
				cartItemQuantity = 1,
				cartItemSku = "BLACKSKU");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_BUNDLED_ITEMS",
				value1 = "1 × U-Joint");

			AssertElementPresent(
				key_cartItemSku = "BLACKSKU",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_DEFAULT_THUMBNAIL");

			CommerceNavigator.editMiniCartItemQuantity(
				cartItemSku = "BLACKSKU",
				productQuantity = 2);

			AssertTextEquals(
				key_summaryTableItem = "Quantity",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = 2);

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "Bundled Product",
				cartItemOption = "black",
				cartItemPriceValue = "70.00",
				cartItemQuantity = 2,
				cartItemSku = "BLACKSKU");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_BUNDLED_ITEMS",
				value1 = "2 × U-Joint");

			AssertElementPresent(
				key_cartItemSku = "BLACKSKU",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_DEFAULT_THUMBNAIL");

			CommerceNavigator.editMiniCartItemQuantity(
				cartItemSku = "BLACKSKU",
				productQuantity = 3);

			AssertTextEquals(
				key_summaryTableItem = "Quantity",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = 3);
		}
	}

	@description = "COMMERCE-6333. As a buyer, I want to edit the quantity of an item in the mini-cart using the quantity selector and I want to view the changes applied to the mini-cart summary"
	@priority = 5
	test EditCartItemQuantityFromMiniCart {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		task ("Given a Commerce account with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("When a product is added to the cart") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then as an admin and a buyer, the user is able to edit the quantity of the item in the mini cart") {
			CommerceNavigator.gotoMiniCart();

			CommerceNavigator.editMiniCartItemQuantity(
				cartItemSku = "MIN55861",
				productQuantity = 3);

			AssertTextEquals(
				key_summaryTableItem = "Quantity",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = 3);

			AssertTextEquals(
				key_summaryTableItem = "Subtotal",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = "$ 72.00");

			AssertTextEquals(
				key_summaryTableItem = "Order Discount",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = "$ 0.00");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
				value1 = "$ 72.00");

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniCart();

			CommerceNavigator.editMiniCartItemQuantity(
				cartItemSku = "MIN55861",
				productQuantity = 2);

			AssertTextEquals(
				key_summaryTableItem = "Quantity",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = 2);

			AssertTextEquals(
				key_summaryTableItem = "Subtotal",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = "$ 48.00");

			AssertTextEquals(
				key_summaryTableItem = "Order Discount",
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
				value1 = "$ 0.00");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
				value1 = "$ 48.00");
		}
	}

	@description = "COMMERCE-6330. As a buyer, I want to be able to empty my open cart after clicking on 'Remove All Items'(Yes/No)"
	@priority = 3
	test RemoveAllItemsFromMiniCart {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium site with a Commerce Account with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("When products are added to the cart") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			FrontStore.addInitializerProductToCart(
				productName = "Torque Converters",
				productQuantity = 1);
		}

		task ("Then as an admin, the user is able to empty the cart by using the Remove All Items button in the mini cart") {
			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Remove All Items");

			Button.click(button = "No");

			AssertElementPresent(
				key_cartItemSku = "MIN55861",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "U-Joint");

			AssertElementPresent(
				key_cartItemSku = "MIN55859",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "Torque Converters");

			Button.click(button = "Remove All Items");

			Button.click(button = "Yes");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55861",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "U-Joint");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55859",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "Torque Converters");
		}

		task ("and as a buyer, the user is able to empty the cart using the Remove all Items button in the mini cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			FrontStore.addInitializerProductToCart(
				productName = "Torque Converters",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Remove All Items");

			Button.click(button = "No");

			AssertElementPresent(
				key_cartItemSku = "MIN55861",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "U-Joint");

			AssertElementPresent(
				key_cartItemSku = "MIN55859",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "Torque Converters");

			Button.click(button = "Remove All Items");

			Button.click(button = "Yes");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55861",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "U-Joint");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55859",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "Torque Converters");
		}
	}

	@description = "COMMERCE-6331. As a buyer, I want to be able to remove an item from cart by clicking on the delete button('x')"
	@priority = 3
	test RemoveSingleCartItemFromMiniCart {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium site with a Commerce Account with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("When products are added to the cart") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			FrontStore.addInitializerProductToCart(
				productName = "Torque Converters",
				productQuantity = 1);
		}

		task ("Then as an admin, the user is able to remove an item from the cart by clicking on the delete button") {
			CommerceNavigator.gotoMiniCart();

			CommerceAccelerators.removeSingleItemViaMiniCart(key_cartItemSku = "MIN55859");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55859",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "Torque Converters");
		}

		task ("and as a buyer, the user is able to remove an item from the cart by clicking on the delete button") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "Torque Converters",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			CommerceAccelerators.removeSingleItemViaMiniCart(key_cartItemSku = "MIN55859");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55859",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "Torque Converters");
		}
	}

	@description = "COMMERCE-7736, As a buyer, I want to be able to view product details for more than one item in the cart"
	@priority = 3
	test VerifyTheProductDetailPageRedirectWithTwoProducts {
		property portal.acceptance = "false";

		task ("Given a Commerce Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");
		}

		task ("And Given 2 products in the cart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceNavigator.searchCatalog(productName = "U-Joint");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceNavigator.searchCatalog(productName = "ABS Sensor");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 1);
		}

		task ("When the product in the minicart is clicked") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "U-Joint",
				cartItemQuantity = 3,
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemQuantity = 1,
				cartItemSku = "MIN93015");

			CommerceNavigator.gotoMiniCartEntry(
				cartItemSku = "MIN55861",
				entryName = "U-Joint");
		}

		task ("Then the user will be navigated to the product detail page") {
			FrontStore.viewProductDetail(fsProductName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			CommerceNavigator.gotoMiniCartEntry(
				cartItemSku = "MIN93015",
				entryName = "ABS Sensor");

			FrontStore.viewProductDetail(fsProductName = "ABS Sensor");
		}
	}

	@description = "COMMERCE-6348. As a buyer, I want the first selectable quantity of a cart item to be the minimum multiple quantity if Minimum Order Quantity is higher than Multiple Order Quantity"
	@priority = 5
	test ViewFirstSelectableQuantityInMiniCartItemWhenMinimumOrderQuantityIsHigherThanMultipleOrderQuantity {
		property portal.acceptance = "true";

		// TODO Review

		var minimumQuantity = 6;
		var multipleQuantity = 5;
		var product = "U-Joint";
		var productSku = "MIN55861";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = ${product});

		CommerceNavigator.gotoEntry(entryName = ${product});

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_text = "Minimum Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = ${minimumQuantity});

		Type(
			key_text = "Multiple Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = ${multipleQuantity});

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addToCartProductWithInvalidQuantityValue(
			productName = ${product},
			productQuantity = 1);

		FrontStore.addInitializerProductToCart(
			productName = ${product},
			productQuantity = 10);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_cartItemSku = ${productSku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
			value1 = 10);

		for (var quantity : list "5,20") {
			Type(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			AssertTextEquals(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			if (${quantity} == 5) {
				var minimumConditionNotSatisfied = "true";

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");
			}
			else {
				var minimumConditionNotSatisfied = "false";
				var multipleConditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = ${minimumConditionNotSatisfied},
				quantity = ${minimumQuantity},
				quantityConfiguration = "min");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = ${multipleConditionNotSatisfied},
				quantity = ${multipleQuantity},
				quantityConfiguration = "multiple");
		}
	}

	@description = "COMMERCE-6349. As a buyer, I want the first selectable quantity of a cart item to be the minimum multiple quantity if Minimum Order Quantity is lower than Multiple Order Quantity"
	@priority = 5
	test ViewFirstSelectableQuantityInMiniCartItemWhenMinimumOrderQuantityIsLowerThanMultipleOrderQuantity {
		property portal.acceptance = "true";

		// TODO Review

		var minimumQuantity = 4;
		var multipleQuantity = 5;
		var product = "U-Joint";
		var productSku = "MIN55861";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = ${product});

		CommerceNavigator.gotoEntry(entryName = ${product});

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_text = "Minimum Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = ${minimumQuantity});

		Type(
			key_text = "Multiple Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = ${multipleQuantity});

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addToCartProductWithInvalidQuantityValue(
			productName = ${product},
			productQuantity = 1);

		FrontStore.addInitializerProductToCart(
			productName = ${product},
			productQuantity = ${multipleQuantity});

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_cartItemSku = ${productSku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
			value1 = ${multipleQuantity});

		for (var quantity : list "1,4,5,20") {
			Type(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			AssertTextEquals(
				key_cartItemSku = ${productSku},
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
				value1 = ${quantity});

			if ((${quantity} == 1) || (${quantity} == 4)) {
				var multipleConditionNotSatisfied = "true";

				if (${quantity} == 1) {
					var minimumConditionNotSatisfied = "true";
				}
				else {
					var minimumConditionNotSatisfied = "false";
				}

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");

				AssertElementPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_ERROR_THE_PRODUCT_QUANTITY_IS_NOT_VALID");
			}
			else {
				var minimumConditionNotSatisfied = "false";
				var multipleConditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_cartItemSku = ${productSku},
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = ${minimumConditionNotSatisfied},
				quantity = ${minimumQuantity},
				quantityConfiguration = "min");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = ${multipleConditionNotSatisfied},
				quantity = ${multipleQuantity},
				quantityConfiguration = "multiple");
		}
	}

	@description = "COMMERCE-6334. The user is able to view a bundled product details in the mini cart(Name, SKU, Bundled Items, Quantity, List Price, Image)"
	@priority = 3
	test ViewMiniCartBundledProductDetails {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium site with a Commerce Account with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("and a new option is created with Faceted Navigation, Required, and SKU Contributor enabled with an option value") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Options");

			CPCommerceCatalog.newOptionsEntry(
				facetable = "true",
				optionDescription = "Option Description",
				optionFieldType = "Select from List",
				optionName = "Color",
				required = "true",
				skuContributor = "true");

			Button.clickSave();

			CommerceOptions.addNewOptionValue(
				valueName = "Black",
				valuePosition = "");

			SelectFrameTop();

			Button.clickSave();
		}

		task ("When creating a simple product with a set option value") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceOptions.addColorOption();

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "Color");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceOptions.setPriceType(priceType = "Static");

			Button.clickSave();

			Alert.viewSuccessMessage();

			CommerceOptions.setDeltaPrice(
				deltaPrice = "60.00",
				key_index = "Black",
				productSKU = "MIN55861");

			Button.clickSave();

			Alert.viewSuccessMessage();

			Refresh();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.addSKU(optionValuesList = "Black:10.0");

			Refresh();
		}

		task ("and adding the product to the bundled product to the cart") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAccelerators.viewAllVariants(productName = "Bundled Product");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Black",
				productName = "Bundled Product",
				productSku = "BLACKSKU");
		}

		task ("Then as an admin and a buyer, the user is able to view the bundled product details in the mini cart.") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "Bundled Product",
				cartItemOption = "black",
				cartItemPriceValue = "70.00",
				cartItemQuantity = 1,
				cartItemSku = "BLACKSKU");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_BUNDLED_ITEMS",
				value1 = "1 × U-Joint");

			AssertElementPresent(
				key_cartItemSku = "BLACKSKU",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_DEFAULT_THUMBNAIL");

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "Bundled Product",
				cartItemOption = "black",
				cartItemPriceValue = "70.00",
				cartItemQuantity = 1,
				cartItemSku = "BLACKSKU");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_BUNDLED_ITEMS",
				value1 = "1 × U-Joint");

			AssertElementPresent(
				key_cartItemSku = "BLACKSKU",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_DEFAULT_THUMBNAIL");
		}
	}

	@description = "COMMERCE-6332. As a buyer, I want to view cart item details in the mini-cart(Name, SKU, Quantity, Options(if present), List Price, Image) and I want to be able to view the number of different products I have in my cart"
	@priority = 5
	test ViewMiniCartItemDetails {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		task ("Given a Minium site with a Commerce Account with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");
		}

		task ("When adding a product to the cart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			CommerceNavigator.searchEntry(entryName = "Hoses");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Hoses");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Package Quantity:24",
				productName = "Hoses",
				productSku = "MIN93022B");
		}

		task ("Then as an admin, the user is able to view the item details in the mini cart") {
			Notifications.viewBadgeCount(notificationCount = 2);

			CommerceNavigator.gotoMiniCart();

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_RESUME",
				value1 = "2 Products");

			FrontStore.viewMiniCart(
				cartItemNames = "Hoses",
				cartItemOption = 24,
				cartItemPriceValues = 120,
				cartItemQuantities = 1,
				cartItemSkUs = "MIN93022B");

			FrontStore.viewMiniCart(
				cartItemNames = "U-Joint",
				cartItemPriceValues = 24,
				cartItemQuantities = 3,
				cartItemSkUs = "MIN55861");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Remove All Items");

			Button.click(button = "Yes");
		}

		task ("Then as a buyer, the user is able to view the item details in the mini cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 3);

			CommerceNavigator.searchEntry(entryName = "Hoses");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Hoses");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Package Quantity:24",
				productName = "Hoses",
				productSku = "MIN93022B");

			Notifications.viewBadgeCount(notificationCount = 2);

			CommerceNavigator.gotoMiniCart();

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_RESUME",
				value1 = "2 Products");

			FrontStore.viewMiniCart(
				cartItemNames = "Hoses",
				cartItemOption = 24,
				cartItemPriceValues = 120,
				cartItemQuantities = 1,
				cartItemSkUs = "MIN93022B");

			FrontStore.viewMiniCart(
				cartItemNames = "U-Joint",
				cartItemPriceValues = 24,
				cartItemQuantities = 3,
				cartItemSkUs = "MIN55861");
		}
	}

	@description = "COMMERCE-6653. As a buyer, I want to see the list price updating on the mini-cart item when changing product quantity, if bulk price is set"
	@priority = 3
	test ViewMiniCartItemWithBulkPrice {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Price Lists");

		CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

		CommerceEntry.gotoMenuTab(menuTab = "Entries");

		CommerceNavigator.searchEntry(entryName = "ABS Sensor");

		CommerceNavigator.gotoEntry(entryName = "MIN93015");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			key_radioOption = "Bulk Pricing",
			locator1 = "CommerceEntry#RADIO_BUTTON");

		Button.clickSave();

		Click(locator1 = "Button#PLUS");

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Type(
			key_text = "Quantity",
			locator1 = "TextInput#ANY",
			value1 = 2);

		Type(
			key_text = "Tier Price",
			locator1 = "TextInput#ANY",
			value1 = "45.00");

		Click(locator1 = "Button#SUBMIT");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_summaryTableItem = "Subtotal",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 50.00");

		Click(locator1 = "Icon#CLOSE");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_summaryTableItem = "Quantity",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = 2);

		AssertTextEquals(
			key_summaryTableItem = "Subtotal",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 90.00");

		AssertTextEquals(
			key_summaryTableItem = "Order Discount",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 0.00");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
			value1 = "$ 90.00");
	}

	@description = "COMMERCE-6338. As a buyer, I want to see the barred list price, the discount percentage and the discounted price of an item in the mini-cart, if a discount is set"
	@priority = 5
	test ViewMiniCartItemWithDiscount {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Discounts");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDiscountsEntry(
			channelsEligibility = "Minium Portal",
			discountAmount = 20,
			discountName = "Test Discount",
			discountTarget = "Products",
			discountType = "Percentage");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "ABS Sensor",
			title = "Add Products");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE");

		AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_DISCOUNT");

		AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE");
	}

	@description = "COMMERCE-6339. As a buyer, I want to see the barred list price, the discount levels and the discounted price of an item in the mini-cart, if discount levels are set and visible"
	@priority = 5
	test ViewMiniCartItemWithDiscountLevels {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CommerceMiniCart#ViewMiniCartItemWithDiscountLevels";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		Click(
			key_text = "Pricing",
			locator1 = "Link#ANY");

		Check.checkToggleSwitch(
			checkboxName = "Display Discount Levels",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Button.clickSave();

		CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Price Lists");

		CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

		CommerceEntry.gotoMenuTab(menuTab = "Entries");

		CommerceNavigator.searchEntry(entryName = "ABS Sensor");

		CommerceNavigator.gotoEntry(entryName = "MIN93015");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Override Discount",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		for (var current : list "L1-10,L2-20,L3-0,L4-0") {
			var key_text = StringUtil.extractFirst(${current}, "-");
			var currentValue = StringUtil.extractLast(${current}, "-");

			Type(
				locator1 = "TextInput#ANY",
				value1 = ${currentValue});
		}

		Button.clickSave();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals.assertPartialText(
			locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
			value1 = "50.00");

		var i = 1;

		for (var discount : list "10,20,0,0") {
			AssertTextEquals.assertPartialText(
				key_index = ${i},
				locator1 = "CommerceAccelerators#MINI_CART_DISCOUNT_LEVELS",
				value1 = ${discount});

			var i = ${i} + 1;
		}

		AssertTextEquals.assertPartialText(
			locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
			value1 = "$ 36.00");
	}

	@description = "COMMERCE-6340. As a buyer, I want to be able to view subtotal and it's total price changed in the mini-cart summary when a discount with target 'Subtotal' is set"
	@priority = 5
	test ViewMiniCartItemWithDiscountToSubtotal {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Discounts");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDiscountsEntry(
			channelsEligibility = "Minium Portal",
			discountAmount = 20,
			discountName = "Test Discount",
			discountTarget = "Subtotal",
			discountType = "Percentage");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_summaryTableItem = "Quantity",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = 1);

		AssertTextEquals(
			key_summaryTableItem = "Subtotal",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 50.00");

		AssertTextEquals(
			key_summaryTableItem = "Subtotal Discount",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 10.00");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
			value1 = "$ 40.00");
	}

	@description = "COMMERCE-6341. As a buyer, I want to be able to view order discount and it's total price changed in the mini-cart summary when a discount with target 'Total' is set"
	@priority = 5
	test ViewMiniCartItemWithDiscountToTotal {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Discounts");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDiscountsEntry(
			channelsEligibility = "Minium Portal",
			discountAmount = 20,
			discountName = "Test Discount",
			discountTarget = "Total",
			discountType = "Percentage");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_summaryTableItem = "Quantity",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = 1);

		AssertTextEquals(
			key_summaryTableItem = "Subtotal",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 50.00");

		AssertTextEquals(
			key_summaryTableItem = "Order Discount",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 10.00");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
			value1 = "$ 40.00");
	}

	@description = "COMMERCE-6336. As a buyer, I want to see the barred list price and a promo price of an item in the mini-cart, if a promotion is set"
	@priority = 5
	test ViewMiniCartItemWithPromotion {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Descending");

		FrontStore.addInitializerProductToCart(
			productName = "Premium Brake Fluid",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals.assertPartialText(
			locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
			value1 = "100.00");

		AssertTextEquals.assertPartialText(
			locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
			value1 = "90.00");
	}

	@description = "COMMERCE-6342. As a buyer, I want to see the barred list price and the promo price on the mini-cart item and I want to be able to see tier price in the mini-cart summary"
	@priority = 5
	test ViewMiniCartItemWithTierPrice {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Price Lists");

		CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

		CommerceEntry.gotoMenuTab(menuTab = "Entries");

		Type(
			key_title = "Entries",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "ABS Sensor");

		Button.clickSubmitButton();

		var sku = "MIN93015";

		CommerceNavigator.gotoEntry(entryName = ${sku});

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			locator1 = "Radio#ANY",
			radioLabel = "Tiered Pricing");

		Button.clickSave();

		Refresh();

		Type(
			key_title = "Entries",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "ABS Sensor");

		Button.clickSubmitButton();

		CommerceNavigator.gotoEntry(entryName = ${sku});

		CommercePriceLists.createPriceListPriceTiers(
			key_pricingType = "Tiered Pricing",
			key_quantity = 2,
			key_value = 45);

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		AssertTextEquals(
			key_cartItemSku = ${sku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_PRICE_VALUE",
			value1 = "$ 50.00");

		Type(
			key_cartItemSku = ${sku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY",
			value1 = 2);

		AssertTextEquals(
			key_cartItemSku = ${sku},
			locator1 = "CommerceAccelerators#MINI_CART_ITEM_PRICE_VALUE",
			value1 = "$ 47.50");

		AssertTextEquals(
			key_summaryTableItem = "Quantity",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = 2);

		AssertTextEquals(
			key_summaryTableItem = "Subtotal",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 95.00");

		AssertTextEquals(
			key_summaryTableItem = "Order Discount",
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_ITEM",
			value1 = "$ 0.00");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
			value1 = "$ 95.00");
	}

}