@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(
			minium = "true",
			storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities can be added to the cart when order quantity is higher than the stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartAllowedQuantitiesWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 1") {
			var warehouseList = "1:Italy,0:United States - Southwest,0:United States - Northeast";

			for (var warehouse : list "${warehouseList}") {
				var warehouseName = StringUtil.extractLast("${warehouse}", ":");
				var warehouseQuantity = StringUtil.extractFirst("${warehouse}", ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "${warehouseQuantity}",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And Allowed Quantities field is set to 2,3,6 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				allowedOrderQuantities = "2,3,6",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds allowed quantities to the cart") {
			FrontStore.addInitializerProductToCart(
				allowedQuantities = "2",
				productName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			FrontStore.assertMiniCartItemAllowedQuantities(
				allowedQuantities = "2,3,6",
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = "2",
				cartSummarySubtotal = "48.00",
				cartSummaryTotal = "48.00");

			for (var quantity : list "3,6") {
				Select(
					key_cartItemSku = "MIN55861",
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_SELECT_FIELD",
					value1 = "${quantity}");

				var subtotal = 24 * ${quantity};

				FrontStore.viewMiniCart(
					cartSummaryQuantity = "${quantity}",
					cartSummarySubtotal = "${subtotal}.00",
					cartSummaryTotal = "${subtotal}.00");
			}

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "6",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities can be added to the cart when order quantity is lower than the stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartAllowedQuantitiesWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 7") {
			var warehouseList = "1:Italy,3:United States - Southwest,3:United States - Northeast";

			for (var warehouse : list "${warehouseList}") {
				var warehouseName = StringUtil.extractLast("${warehouse}", ":");
				var warehouseQuantity = StringUtil.extractFirst("${warehouse}", ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "${warehouseQuantity}",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And Allowed Quantities field is set to 2,3,6 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				allowedOrderQuantities = "2,3,6",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds allowed quantities to the cart") {
			FrontStore.addInitializerProductToCart(
				allowedQuantities = "3",
				productName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			FrontStore.assertMiniCartItemAllowedQuantities(
				allowedQuantities = "2,3,6",
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = "3",
				cartSummarySubtotal = "72.00",
				cartSummaryTotal = "72.00");

			for (var quantity : list "6,2") {
				Select(
					key_cartItemSku = "MIN55861",
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_SELECT_FIELD",
					value1 = "${quantity}");

				var subtotal = 24 * ${quantity};

				FrontStore.viewMiniCart(
					cartSummaryQuantity = "${quantity}",
					cartSummarySubtotal = "${subtotal}.00",
					cartSummaryTotal = "${subtotal}.00");
			}

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "2",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				allowedQuantities = "6",
				productName = "U-Joint");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "6",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity can be added to the cart when order quantity is higher than the stock quantity and when back order is enabled"
	@priority = "3"
	test CanAddToCartMaximumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And maximum quantity is set to 8 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = "8",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds maximum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "8");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "8",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity can be added to the cart when order quantity is lower than stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartMaximumProductQuantityWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And maximum quantity is set to 4 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = "4",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds maximum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity can be added to the cart when order quantity is higher then the stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartMinimumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And minimum quantity is set to 8 and Allow Back Order is enabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "true",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = "8",
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds minimum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "8");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher then the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "8",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity can be added to the cart when order quantity is lower than the stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartMinimumProductQuantityWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And minimum quantity is set to 4 and Allow Back Order is enabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "true",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = "4",
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds minimum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user does the checkout with the quantity higher then the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities can be added to the cart when order quantity is higher than the stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartMultipleProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And multiple quantity is set to 8 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "8",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds multiple quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "8");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "8",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities can be added to the cart when order quantity is lower than the stock quantity and back order is enabled"
	@priority = "3"
	test CanAddToCartMultipleProductQuantityWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And multiple quantity is set to 4 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "4",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds multiple quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities cannot be added to the cart when order quantity is higher than the stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartAllowedQuantitiesWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 5") {
			var warehouseList = "1:Italy,2:United States - Southwest,2:United States - Northeast";

			for (var warehouse : list "${warehouseList}") {
				var warehouseName = StringUtil.extractLast("${warehouse}", ":");
				var warehouseQuantity = StringUtil.extractFirst("${warehouse}", ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "${warehouseQuantity}",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And Allowed Quantities field is set to 6,8,10 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				allowedOrderQuantities = "6,8,10",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Select(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD",
				value1 = "8");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities can be added to the cart until there's stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartAllowedQuantitiesWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 7") {
			var warehouseList = "1:Italy,3:United States - Southwest,3:United States - Northeast";

			for (var warehouse : list "${warehouseList}") {
				var warehouseName = StringUtil.extractLast("${warehouse}", ":");
				var warehouseQuantity = StringUtil.extractFirst("${warehouse}", ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "${warehouseQuantity}",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And Allowed Quantities field is set to 2,3,6 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				allowedOrderQuantities = "2,3,6",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds allowed quantities to the cart") {
			FrontStore.addInitializerProductToCart(
				allowedQuantities = "2",
				productName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			FrontStore.assertMiniCartItemAllowedQuantities(
				allowedQuantities = "2,3,6",
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = "2",
				cartSummarySubtotal = "48.00",
				cartSummaryTotal = "48.00");

			for (var quantity : list "3,6") {
				Select(
					key_cartItemSku = "MIN55861",
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_SELECT_FIELD",
					value1 = "${quantity}");

				var subtotal = 24 * ${quantity};

				FrontStore.viewMiniCart(
					cartSummaryQuantity = "${quantity}",
					cartSummarySubtotal = "${subtotal}.00",
					cartSummaryTotal = "${subtotal}.00");
			}

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "6",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When user tries to add a new order in the MiniCart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			Select(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD",
				value1 = "2");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity cannot be added to the cart when order quantity is higher than the stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartMaximumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And maximum quantity is set to 8 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = "8",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "8");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity can be added to the cart until there's stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartMaximumProductQuantityWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And maximum quantity is set to 4 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = "4",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user adds maximum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When user tries to add a new order in the MiniCart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "4");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity cannot be added to the cart when order quantity is higher then the stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartMinimumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And minimum quantity is set to 8 and Allow Back Order is disabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "false",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = "8",
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity can be added to the cart until there's stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartMinimumProductQuantityWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And minimum quantity is set to 4 and Allow Back Order is disabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "false",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = "4",
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user can do the checkout with a quantity that is less than the stock quantity one") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When user tries to add a new order in the MiniCart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities cannot be added to the cart when order quantity is higher than the stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartMultipleQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And multiple quantity is set to 8 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "8",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "8");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities can be added to the cart until there's stock quantity and back order is disabled"
	@priority = "3"
	test CannotAddToCartMultipleQuantityWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = "2",
					warehouseName = "${warehouseName}");
			}
		}

		task ("And multiple quantity is set to 4 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "4",
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user adds multiple quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When user tries to add a new order in the MiniCart") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "4");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10491. The product can be added to the cart until there's stock quantity and back order is disabled"
	@priority = "3"
	test CanOnlyPlaceOrderWhenStockIsAvailable {
		property portal.acceptance = "false";

		task ("Given a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given the warehouse quantity for the product is set to 4") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = "1",
				northeastQuantity = "1",
				productName = "U-Joint",
				productSku = "MIN55861",
				southwestQuantity = "2");
		}

		task ("And product's Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given a placed order") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "4");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "4",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When user tries to add a second order") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Availability fragment is present with the Unavailable tag") {
			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}
	}

	@description = "This is a test for COMMERCE-10491.  The user can see product is unavailable when stock quantity is zero"
	@priority = "3"
	test CanSeeProductUnavailableWhenStockIsZero {
		property portal.acceptance = "false";

		task ("Given a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given the warehouse quantity for the product is set to 0") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = "0",
				northeastQuantity = "0",
				productName = "U-Joint",
				productSku = "MIN55861",
				southwestQuantity = "0");
		}

		task ("And product's Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("When buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the Availability fragment is present with the Unavailable tag") {
			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");

			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}
	}

	@description = "This is a test for COMMERCE-6094. UseConfiguration"
	@priority = "3"
	test UseConfiguration {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Select(
			key_title = "Tax Category",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Normal Product");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Tax Exempt",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Select(
			key_title = "Availability Estimate",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "3-5 days");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Display Availability",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Display Stock Quantity",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_labelName = "Minimum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Minimum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "2");

		AssertElementPresent(
			key_labelName = "Allowed Order Quantities",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Allowed Order Quantities",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		Select(
			key_title = "Low Stock Action",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Set as Unpublished");

		AssertElementPresent(
			key_labelName = "Low Stock Threshold",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Low Stock Threshold",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Allow Back Order",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_labelName = "Maximum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Maximum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "20000");

		AssertElementPresent(
			key_labelName = "Multiple Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Multiple Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "2");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Free Shipping",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Ship Separately",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_labelName = "Shipping Extra Price",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Shipping Extra Price",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		AssertElementPresent(
			key_labelName = "Width",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Width",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		AssertElementPresent(
			key_labelName = "Height",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Height",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		AssertElementPresent(
			key_labelName = "Depth",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Depth",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		AssertElementPresent(
			key_labelName = "Weight",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Weight",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = "1");

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Shippable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickPublish();

		AssertNotChecked.assertNotCheckedNotVisible(
			key_toggleSwitchLabel = "Shippable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

}