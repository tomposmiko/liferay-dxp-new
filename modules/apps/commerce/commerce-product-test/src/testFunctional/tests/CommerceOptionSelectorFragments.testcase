@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-9383. Verify mapped option selector fragment and delta prices of option values"
	@priority = 4
	test CanMapOptionSelectorFragmentAndSeeDeltaPricesOfOptionValues {
		property portal.acceptance = "false";

		var multipleValuesLeft = "true";
		var count = 0;
		var list = "MIN93017:10.00,MIN93018:20.00,MIN93019:30.00";

		var list1 = ListUtil.newListFromString(${list});

		var size = ListUtil.size(${list1});

		task ("Given the admin creates a new product") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				neverExpire = "false",
				price = 50,
				productDescription = "Full Description",
				productName = "Simple Jeans",
				productType = "Simple",
				shortDescription = "Short Description",
				sku = "SKU1001");
		}

		task ("And creates a SKU Contributor option with type Select from List and 3 values for the option") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Simple Jeans");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.createProductOption(key_optionName = "Option Select from List");

			Refresh();

			CommerceProductOptions.editProductOption(
				key_fieldType = "Select from List",
				key_option = "Option Select from List",
				key_priceType = "Static",
				productOptionFieldType = "true",
				productOptionPriceType = "true",
				productOptionSkuContributor = "true");

			for (var sku : list "MIN93017,MIN93018,MIN93019") {
				CommerceProductOptions.createProductOptionValue(key_name = "Value ${sku}");

				SelectFrame.selectFrameTop();

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
			}

			for (var skuAndDeltaPrice : list ${list}) {
				var count = ${count} + 1;
				var sku = StringUtil.extractFirst(${skuAndDeltaPrice}, ":");
				var deltaPriceValue = StringUtil.extractLast(${skuAndDeltaPrice}, ":");

				if (${count} == ${size}) {
					var multipleValuesLeft = "false";
				}

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPriceValue},
					key_index = "Value ${sku}",
					key_optionIndex = "Option Select from List",
					multipleValuesLeft = ${multipleValuesLeft},
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And generates all SKUs combinations from the 'SKUs' tab") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(locator1 = "Button#PLUS");

			Click(
				key_fieldName = "Generate All SKU Combinations",
				locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");
		}

		task ("And creates a new DPT with 'Commerce Product' as content type") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And deploys 'option selector' in the DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Product Display Page Template");

			PageEditor.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And marks the DPT as default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And navigates into the product details from Minium") {
			CommerceNavigator.gotoProductDetails(productName = "Simple Jeans");
		}

		task ("And opens the dropdown option values selector") {
			Click(
				key_optionName = "Option Select from List",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTIONS_SELECT");
		}

		task ("Then the values are shown with the respective delta price") {
			AssertElementPresent(
				key_optionValue = "Value MIN93017",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

			AssertElementPresent(
				key_optionValue = "Value MIN93018 + $ 10.00",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

			AssertElementPresent(
				key_optionValue = "Value MIN93019 + $ 20.00",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");
		}
	}

	@description = "This is a test for COMMERCE-9383. Verify mapped option selector fragment and the change of dependencies"
	@priority = 4
	test CanMapOptionSelectorFragmentAndSeeDependenciesChange {
		property portal.acceptance = "false";

		task ("Given the admin creates a new product") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				neverExpire = "false",
				price = 50,
				productDescription = "Full Description",
				productName = "Simple Jeans",
				productType = "Simple",
				shortDescription = "Short Description",
				sku = "SKU1001");
		}

		task ("And creates 2 SKU Contributor options with respective type Select from List and Single Selection and 2 values for each option") {
			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				optionValues = "value1:value1:1,value2:value2:2",
				skuContributor = "true");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "radio",
				optionKey = "option-single-selection",
				optionName = "Option Single Selection",
				optionValues = "value1:value1:1,value2:value2:2",
				skuContributor = "true");
		}

		task ("And links the options to Simple Jeans product") {
			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				productName = "Simple Jeans");

			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "radio",
				optionKey = "option-single-selection",
				optionName = "Option Single Selection",
				productName = "Simple Jeans");
		}

		task ("And generates all SKUs combinations from the 'SKUs' tab") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Simple Jeans");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(locator1 = "Button#PLUS");

			Click(
				key_fieldName = "Generate All SKU Combinations",
				locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");
		}

		task ("And adds 100 quantities on the SKU combination formed by the first value of each option on a warehouse inventory (e.g. Italy)") {
			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "VALUE1VALUE1",
				warehouseName = "Italy");
		}

		task ("And enables 'Display Availability' toggle from the Configuration tab") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				displayAvailability = "true",
				productName = "Simple Jeans");
		}

		task ("And creates a new DPT with 'Commerce Product' as content type") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And deploys 'option selector' and 'availability' fragments inside the DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Product Display Page Template");

			PageEditor.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector");

			PageEditor.addFragment(
				collectionName = "Product",
				fragmentName = "Availability",
				targetFragmentName = "Option Selector");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And marks the DPT as default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And navigates into the product details from Minium") {
			CommerceNavigator.gotoProductDetails(productName = "Simple Jeans");
		}

		task ("And the buyer selects the second values of each option") {
			FrontStore.selectAssociatedFSOptionsValue(
				fsOptionName = "Option Select from List",
				fsOptionValue = "value2");

			Check.checkNotVisible(
				key_radioOption = "value2",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("Then the Availability fragment is present with the Unavailable tag") {
			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}

		task ("When the buyer selects the first value of each option") {
			FrontStore.selectAssociatedFSOptionsValue(
				fsOptionName = "Option Select from List",
				fsOptionValue = "value1");

			Check.checkNotVisible(
				key_radioOption = "value1",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("Then the Availability fragment is present with the Available tag") {
			AssertElementPresent(
				key_availability = "Available",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}
	}

}