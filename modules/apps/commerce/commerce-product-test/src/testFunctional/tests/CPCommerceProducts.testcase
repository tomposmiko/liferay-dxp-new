@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6269. AddAnOptionAndVerifyIfIsPresent"
	@priority = 3
	test AddAnOptionAndVerifyIfIsPresent {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Create New");

		AssertElementPresent(
			key_entryName = "Color",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		AssertElementPresent(
			key_entryName = "Color",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "This is a test for COMMERCE-6021. AddASKU"
	@ignore = "true"
	@priority = 3
	test AddASKU {

		// TODO COMMERCE-6021 AddASKU

	}

	@description = "This is a test for COMMERCE-6287. AddASpecificationAndVerifyIfIsPresent"
	@priority = 3
	test AddASpecificationAndVerifyIfIsPresent {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Click(locator1 = "AppBuilder#SEARCH_BAR_INPUT");

		Type(
			key_text = "Find or create a specification",
			locator1 = "TextInput#CUSTOM_CANONICAL_URL_ENABLED",
			value1 = "Quantity");

		Click(
			key_text = "Select",
			locator1 = "Button#ANY_LAST");

		Alert.viewSuccessMessage();

		AssertElementPresent(
			key_entryName = "Quantity",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Click(locator1 = "AppBuilder#SEARCH_BAR_INPUT");

		Type(
			key_text = "Find or create a specification",
			locator1 = "TextInput#CUSTOM_CANONICAL_URL_ENABLED",
			value1 = "Test Specification");

		Click(
			key_text = "Create New",
			locator1 = "Button#ANY");

		Alert.viewSuccessMessage();

		AssertElementPresent(
			key_entryName = "Test Specification",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		AssertElementPresent(
			key_entryName = "Test Specification",
			locator1 = "CommerceEntry#ENTRY_CONTENT_ROW_BY_NAME");
	}

	@description = "This is a test for COMMERCE-6302. AddGroupedProduct"
	@priority = 5
	test AddGroupedProduct {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Grouped T-Shirt",
			productType = "Grouped");

		Click(locator1 = "Icon#BACK");

		AssertElementPresent(
			key_entryName = "Grouped T-Shirt",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		AssertElementPresent(
			key_tableEntryURL = "Grouped",
			locator1 = "ClientExtension#TABLE_ENTRY_URL_REMOTE_TABLE");
	}

	@description = "This is a test for COMMERCE-6020. AssertProductBundleCanBeCreatedWithPriceTypeStaticAndDynamic"
	@priority = 5
	test AssertProductBundleCanBeCreatedWithPriceTypeStaticAndDynamic {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			facetable = "true",
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color",
			required = "true",
			skuContributor = "true");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.addOptionValue(
			valueName = "Black",
			valuePosition = "");

		Button.click(button = "Submit");

		SelectFrameTop();

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "SHOESSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "50.0");

		Button.clickPublish();

		Refresh();

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Select");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		Click(
			key_fieldName = "Add SKU",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "BLACKSKU");

		Click(locator1 = "Dropdown#TRIGGER");

		Click(
			key_fieldName = "Black",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10.0");

		Button.click(button = "Publish");

		Refresh();

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Click(
			key_index = "Color",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_value = "Black",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Dynamic");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6912. Bulk delete Products"
	@priority = 5
	test BulkDeleteProducts {
		property portal.acceptance = "true";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin goes into the Product and verifies if the Trash icon is not present in the header") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			AssertElementNotPresent(locator1 = "Button#TRASH_ENABLED");
		}

		task ("When the admin selects one product using the checkbox and verifies if the Trash icon is now present in the header") {
			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			Click.clickNoMouseOverNoWaitForVisible(
				key_productName = "ABS Sensor",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_CHECKBOX");

			AssertElementPresent(locator1 = "Button#TRASH_ENABLED");
		}

		task ("Then the admin can remove the product by clicking on the Trash icon") {
			ClickNoError(locator1 = "Button#TRASH_ENABLED");

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			AssertElementNotPresent(
				key_entryName = "ABS Sensor",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And the admin can delete all the products with one click by using the select all checkbox") {
			CommerceNavigator.searchEntry(entryName = "");

			Pagination.changePagination(itemsPerPage = "60 items");

			while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
				CommerceProducts.deleteEntries();
			}

			AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");
		}
	}

	@description = "This is a test for COMMERCE-6301. AddVirtualProduct"
	@priority = 3
	test CanAddVirtualProductAndCheckNoShippingOverride {
		property portal.acceptance = "false";

		// TODO Review

		task ("Given a new virtual product is added") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Master",
				productName = "Virtual Book",
				productType = "Virtual");

			Alert.viewSuccessMessage();
		}

		task ("And the new product is successful created") {
			Click(locator1 = "Icon#BACK");

			AssertElementPresent(
				key_productName = "Virtual Book",
				locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

			AssertElementPresent(
				key_productName = "Virtual Book",
				key_value = "Virtual",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_CONTENT");
		}

		task ("When the details page is open") {
			CommerceNavigator.gotoEntry(entryName = "Virtual Book");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_entryName = "default",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");
		}

		task ("Then the Shipping Override is not shown") {
			AssertElementNotPresent(
				key_cardName = "Shipping Override",
				locator1 = "CommerceEntry#PRODUCT_DETAIL_CARD_HEADER");
		}
	}

	@description = "This is a test for COMMERCE-9251. CanCheckAnyProductStatusWorkflow"
	@priority = 3
	test CanCheckAnyProductWorkflowStatus {
		property portal.acceptance = "false";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 9,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Any Product",
			productCatalog = "Master",
			productName = "Any Product",
			status = "Any");
	}

	@description = "This is a test for COMMERCE-9189. CanCheckApprovedProductDuplication"
	@priority = 5
	test CanCheckApprovedProductDuplication {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceProducts.duplicateProduct(
			checkProductFields = "true",
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			publishProduct = "false");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");
	}

	@description = "This is a test for COMMERCE-9183. CanCheckApprovedProductSaveAsDraft"
	@priority = 3
	test CanCheckApprovedProductSaveAsDraft {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		AssertElementNotPresent(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");

		Click(
			key_itemName = "",
			locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

		ClickNoError(
			key_optionValue = "Convert to Draft",
			locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

		AssertConfirm(value1 = "Converting the product status to draft will remove the product from the product catalog. Do you wish to proceed?");

		AssertElementPresent(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckApprovedProductStatusWorkflow"
	@priority = 5
	test CanCheckApprovedProductWorkflowStatus {
		property portal.acceptance = "true";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 0,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Approved Product",
			productCatalog = "Master",
			productName = "Approved Product",
			status = "Approved");
	}

	@description = "This is a test for COMMERCE-9253. CanCheckTheApprovedStatusForSingleApproverWorkflow"
	@priority = 5
	test CanCheckApprovedProductWorkflowStatusWithSingleApproverWorkflow {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "categorymanager@liferay.com",
			userFirstName = "Category",
			userLastName = "Manager",
			userScreenName = "categorymanager",
			userSiteMembership = "Minium");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Category Manager",
			userScreenName = "categorymanager");

		CommerceProducts.enableProductSingleApproverWorkflow();

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "categorymanager@liferay.com");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Button.click(button = "Submit for Publication");

		AssertElementPresent(
			key_status = "Pending (Created)",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		User.logoutPG();

		User.firstLoginPG();

		CommerceProducts.approvePendingProduct(
			approveRequest = "true",
			userFirstName = "Category",
			userLastName = "Manager");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "categorymanager@liferay.com");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		AssertElementPresent(
			key_status = "Approved",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		Click(locator1 = "Icon#BACK");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Simple T-Shirt",
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			status = "Approved");

		User.logoutPG();

		User.firstLoginPG();

		CommerceProducts.disableProductSingleApproverWorkflow();
	}

	@description = "This is a test for COMMERCE-9251. CanCheckDeniedProductStatusWorkflow"
	@priority = 5
	test CanCheckDeniedProductWorkflowStatus {
		property portal.acceptance = "true";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 4,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Denied Product",
			productCatalog = "Master",
			productName = "Denied Product",
			status = "Denied");
	}

	@description = "This is a test for COMMERCE-9190. CanCheckDraftProductDuplication"
	@priority = 3
	test CanCheckDraftProductDuplication {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		CommerceProducts.duplicateProduct(
			checkProductFields = "true",
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			publishProduct = "false");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");
	}

	@description = "This is a test for COMMERCE-9181. CanCheckDraftProductSaveAsDraft"
	@priority = 3
	test CanCheckDraftProductSaveAsDraft {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");

		Click(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");
	}

	@description = "This is a test for COMMERCE-9179. CanCheckDraftProductStatus"
	@priority = 5
	test CanCheckDraftProductStatus {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		AssertElementPresent(
			key_text = "Publish",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");
	}

	@description = "This is a test for COMMERCE-9191. CanCheckDraftProductStatusWithWorkflow"
	@priority = 3
	test CanCheckDraftProductStatusWithWorkflow {
		property portal.acceptance = "false";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Commerce Product");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		task ("Disable Single Approver for avoid issue on CI") {
			ApplicationsMenu.gotoPortlet(
				category = "Workflow",
				panel = "Applications",
				portlet = "Process Builder");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			Workflow.configureWorkflow(
				workflowDefinition = "No Workflow",
				workflowResourceValue = "Commerce Product");
		}
	}

	@description = "This is a test for COMMERCE-9182. VerifyDraftProductNotAppearOnMiniumCatalogPage"
	@priority = 5
	test CanCheckDraftProductVisibilityOnMiniumCatalogPage {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userRole = "Buyer",
			userScreenName = "buyeruser",
			userSiteMembership = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Click(locator1 = "Icon#BACK");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		Type(
			locator1 = "Search#EMBEDDED_SEARCH_BAR",
			value1 = "Simple T-Shirt");

		Button.clickSubmitButton();

		AssertElementNotPresent(
			key_productName = "Simple T-Shirt",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");

		User.logoutPG();

		User.firstLoginPG();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceEntry.publishEntry(status = "Approved");

		Click(locator1 = "Icon#BACK");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		AssertElementPresent(
			key_status = "Approved",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		Type(
			locator1 = "Search#EMBEDDED_SEARCH_BAR",
			value1 = "Simple T-Shirt");

		Button.clickSubmitButton();

		AssertElementPresent(
			key_productName = "Simple T-Shirt",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckDraftProductStatusWorkflow"
	@priority = 3
	test CanCheckDraftProductWorkflowStatus {
		property portal.acceptance = "false";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 2,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Draft Product",
			productCatalog = "Master",
			productName = "Draft Product",
			status = "Draft");
	}

	@description = "This is a test for COMMERCE-9290. CanCheckTheDraftStatusForSingleApproverWorkflow"
	@priority = 5
	test CanCheckDraftProductWorkflowStatusWithSingleApproverWorkflow {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "categorymanager@liferay.com",
			userFirstName = "Category",
			userLastName = "Manager",
			userScreenName = "categorymanager",
			userSiteMembership = "Minium");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Category Manager",
			userScreenName = "categorymanager");

		CommerceProducts.enableProductSingleApproverWorkflow();

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "categorymanager@liferay.com");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Click(locator1 = "Icon#BACK");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Simple T-Shirt",
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			status = "Draft");

		User.logoutPG();

		User.firstLoginPG();

		CommerceProducts.disableProductSingleApproverWorkflow();
	}

	@description = "This is a test for COMMERCE-9251. CanCheckExpiredProductStatusWorkflow"
	@priority = 5
	test CanCheckExpiredProductWorkflowStatus {
		property portal.acceptance = "true";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 3,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Expired Product",
			productCatalog = "Master",
			productName = "Expired Product",
			status = "Expired");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckInactiveProductStatusWorkflow"
	@priority = 5
	test CanCheckInactiveProductWorkflowStatus {
		property portal.acceptance = "true";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 5,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Inactive Product",
			productCatalog = "Master",
			productName = "Inactive Product",
			status = "Inactive");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckIncompleteProductStatusWorkflow"
	@priority = 5
	test CanCheckIncompleteProductWorkflowStatus {
		property portal.acceptance = "true";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 6,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Incomplete Product",
			productCatalog = "Master",
			productName = "Incomplete Product",
			status = "Incomplete");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckInRecycleBinProductStatusWorkflow"
	@priority = 3
	test CanCheckInRecycleBinProductWorkflowStatus {
		property portal.acceptance = "false";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 8,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "In Recycle Bin Product",
			productCatalog = "Master",
			productName = "In Recycle Bin Product",
			status = "In Recycle Bin");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckPendingProductStatusWorkflow"
	@priority = 3
	test CanCheckPendingProductWorkflowStatus {
		property portal.acceptance = "false";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 1,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Pending Product",
			productCatalog = "Master",
			productName = "Pending Product",
			status = "Pending");
	}

	@description = "This is a test for COMMERCE-9292. CanCheckThePendingReviewStatusForSingleApproverWorkflow"
	@priority = 5
	test CanCheckPendingProductWorkflowStatusWithSingleApproverWorkflow {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "categorymanager@liferay.com",
			userFirstName = "Category",
			userLastName = "Manager",
			userScreenName = "categorymanager",
			userSiteMembership = "Minium");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Category Manager",
			userScreenName = "categorymanager");

		CommerceProducts.enableProductSingleApproverWorkflow();

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "categorymanager@liferay.com");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Button.click(button = "Submit for Publication");

		AssertElementPresent(
			key_status = "Pending (Created)",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		User.logoutPG();

		User.firstLoginPG();

		CommerceProducts.approvePendingProduct(
			userFirstName = "Category",
			userLastName = "Manager");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "categorymanager@liferay.com");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		AssertElementPresent(
			key_status = "Pending (Review)",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		AssertElementPresent(
			key_text = "Test Test",
			locator1 = "Button#ANY");

		Click(locator1 = "Icon#BACK");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Simple T-Shirt",
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			status = "Pending (Review)");

		User.logoutPG();

		User.firstLoginPG();

		CommerceProducts.disableProductSingleApproverWorkflow();
	}

	@description = "This is a test for COMMERCE-9180. CanCheckProductPublication"
	@priority = 3
	test CanCheckProductPublication {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");
	}

	@description = "This is a test for COMMERCE-9251. CanCheckScheduledProductStatusWorkflow"
	@priority = 3
	test CanCheckScheduledProductWorkflowStatus {
		property portal.acceptance = "false";

		CommerceProducts.addProductWithStatusViaAPI(
			catalogName = "Master",
			productStatusCode = 7,
			productType = "simple");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.checkProductStatusAfterDuplicationAndConvertionToDraft(
			checkProductFields = "true",
			compileDescription = "false",
			entryName = "Scheduled Product",
			productCatalog = "Master",
			productName = "Scheduled Product",
			status = "Scheduled");
	}

	@description = "This is a test for the COMMERCE-10763, to verify that a buyer user can download the virtual product by the URL retrieved using API"
	@priority = 4
	test CanDownloadConfiguredVirtualProduct {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		var baseURL = PropsUtil.get("portal.url");

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given a buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a virtual product with Activation Status and Max Download is created") {
			CommerceProducts.openProductsAdmin();

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Virtual T-Shirt",
				productType = "Virtual");

			CommerceEntry.gotoMenuTab(menuTab = "Virtual");

			CommerceProducts.configureVirtualProduct(
				activationStatus = "Pending",
				assertUploaded = "true",
				attachment = "Commerce_Black.jpg",
				maxDownloads = 3);
		}

		task ("When the buyer log in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And add something to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "Virtual T-Shirt",
				productQuantity = 1);

			var orderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");
		}

		task ("Then the GET order API is called") {
			var virtualItemURLs = CommerceJSONOrdersAPI.getOrderField(
				email = "buyer@liferay.com",
				jsonPath = "$..virtualItemURLs[:1]",
				orderId = ${orderId},
				parameter = "nestedFields",
				parameterValue = "orderItems",
				password = "test");
		}

		task ("And the virtualItemURLs field is empty") {
			if (${virtualItemURLs} != "") {
				fail("The Order Activation Status is not respected");
			}
		}

		task ("When the checkout is completed") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "Virtual T-Shirt",
				productQuantity = 1);
		}

		task ("And the GET order API is called") {
			var virtualItemURLs = CommerceJSONOrdersAPI.getOrderField(
				email = "buyer@liferay.com",
				jsonPath = "$..virtualItemURLs[:1]",
				orderId = ${orderId},
				parameter = "nestedFields",
				parameterValue = "orderItems",
				password = "test");
		}

		task ("And the GET order item API is called") {
			var tempVirtualItemURLs = CommerceJSONOrdersAPI.getOrderItemField(
				email = "buyer@liferay.com",
				jsonPath = "$..virtualItemURLs[:1]",
				orderId = ${orderId},
				password = "test");
		}

		task ("Then the URL into the response is the same for both the API calls") {
			if (${virtualItemURLs} == "") {
				fail("The URL is not present");
			}

			if (${tempVirtualItemURLs} == ${virtualItemURLs}) {
				echo("The URL is the same");
			}
			else {
				fail("The URL is not the same");
			}
		}

		task ("When the Max Number of Downloads is reached") {
			var destinationPath = PropsUtil.get("output.dir.name");

			for (var list : list "1,2,3") {
				Navigator.openSpecificURL(url = "${baseURL}${virtualItemURLs}");

				ImportExport.assertDownloadedFileName(downloadedFile = "Commerce_Black.jpg");

				FileUtil.delete(${destinationPath});
			}
		}

		task ("Then is not possible to download the file anymore") {
			Navigator.openSpecificURL(url = "${baseURL}${virtualItemURLs}");

			AssertElementPresent(
				key_parameterValue = "You do not have permission to access the requested resource",
				locator1 = "JSFShowcase#PARAMETER_VALUE");

			var file = CommerceUtilities.assertDownloadedFile(downloadedFileName = "Commerce_Black.jpg");

			if (${file} == "true") {
				fail("Exceeded the Max Number of Downloads set");
			}
		}
	}

	@description = "This is a test for the COMMERCE-10763, to verify that a buyer user can not download the virtual product by the URL retrieved using API without permissions"
	@priority = 4
	test CanDownloadConfiguredVirtualProductWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		var baseURL = PropsUtil.get("portal.url");

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given two accounts are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account 2",
				accountEntryType = "Business");
		}

		task ("And a virtual product is created") {
			CommerceProducts.openProductsAdmin();

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Virtual T-Shirt",
				productType = "Virtual");

			CommerceEntry.gotoMenuTab(menuTab = "Virtual");

			CommerceProducts.configureVirtualProduct(
				activationStatus = "Pending",
				assertUploaded = "true",
				attachment = "Commerce_Black.jpg");
		}

		task ("When the admin changes the active account on Minium") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Commerce Account 2");
		}

		task ("And add something to the cart and complete the checkout") {
			FrontStore.addInitializerProductToCart(
				productName = "Virtual T-Shirt",
				productQuantity = 1);

			var orderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "Virtual T-Shirt",
				productQuantity = 1);
		}

		task ("When the buyer call the Order API to retrieve the URL") {
			var virtualItemURLs = CommerceJSONOrdersAPI.getOrderField(
				email = "buyer@liferay.com",
				jsonPath = "$..virtualItemURLs[:1]",
				orderId = ${orderId},
				parameter = "nestedFields",
				parameterValue = "orderItems",
				password = "test");
		}

		task ("Then the buyer can't receive the URL") {
			if (${virtualItemURLs} != "") {
				fail("The buyer even without permissions can still receive the URL");
			}
		}

		task ("When the buyer tries to use the URL directly") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			var virtualItemURLs = CommerceJSONOrdersAPI.getOrderField(
				email = "test@liferay.com",
				jsonPath = "$..virtualItemURLs[:1]",
				orderId = ${orderId},
				parameter = "nestedFields",
				parameterValue = "orderItems",
				password = "test");
		}

		task ("Then the buyer will not be able to download the resource") {
			Navigator.openSpecificURL(url = "${baseURL}${virtualItemURLs}");

			AssertElementPresent(
				key_parameterValue = "You do not have permission to access the requested resource",
				locator1 = "JSFShowcase#PARAMETER_VALUE");

			var file = CommerceUtilities.assertDownloadedFile(downloadedFileName = "Commerce_Black.jpg");

			if (${file} == "true") {
				fail("The buyer can still download the file even without permissions");
			}
		}
	}

	@description = "This is a test for bug COMMERCE-9546. Verify a product image converted in base64 can be uploaded via headless API with the extension setted"
	@priority = 4
	test CanUploadProductBase64ImageViaAPI {
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When a PATCH call is made for the product ABS Sensor") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductImageUsingERC(
				attachment = ${attachment},
				contentType = "image/png",
				imageTitle = "Black T-Shirt",
				productERC = "MIN93015minium-initializer");
		}

		task ("Then into the product ABS Sensor Media tab a new entry is present with the png extension") {
			CommerceProducts.openProductsAdmin();

			AppBuilderAdmin.searchByItem(itemName = "ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			takeScreenshot();

			AssertElementPresent(
				key_entryName = "Black T-Shirt",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");

			AssertElementPresent(
				key_columnNumber = 1,
				key_productName = "Black T-Shirt",
				key_value = "png",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}

		task ("But if the contentType is empty the extension will be automatically selected") {
			Click(
				key_value = "Black T-Shirt",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			CommerceEntry.clickNoError(menuItem = "Delete");

			AssertElementNotPresent(
				key_entryName = "Black T-Shirt",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");

			CommerceJSONProductsAPI._patchCommerceProductImageUsingERC(
				attachment = ${attachment},
				imageTitle = "Black T-Shirt.test",
				productERC = "MIN93015minium-initializer");

			Refresh();

			takeScreenshot();

			AssertElementPresent(
				key_entryName = "Black T-Shirt.test",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");

			AssertElementPresent(
				key_columnNumber = 1,
				key_productName = "Black T-Shirt",
				key_value = "jpg",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}
	}

	@description = "This is a test for bug COMMERCE-10711. Verify a product image linked to an option value can be uploaded via headless API."
	@priority = 3
	test CanUploadProductImageLinkedToAnOptionValueViaAPI {
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When an image linked to an option value for the product Brake Fluid is uploaded via API") {
			var responseBody = CommerceJSONProductsAPI._addCommerceProductImageLinkedToOptionValue(
				optionName = "package-quantity",
				optionValue = 112,
				productERC = "MIN93016minium-initializer");

			var status = JSONUtil.getWithJSONPath(${responseBody}, "$..['status']");

			if (${status} != "") {
				fail("Something went wrong with the API call");
			}
		}

		task ("Then the image is uploaded successfully") {
			CommerceProducts.openProductsAdmin();

			AppBuilderAdmin.searchByItem(itemName = "Brake Fluid");

			CommerceNavigator.gotoEntry(entryName = "Brake Fluid");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_entryName = "Simple Image Title API",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");
		}

		task ("And the option value is linked to the image") {
			Click(
				key_entryName = "Simple Image Title API",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "Dropdown#SELECTED_VALUE",
				value1 = 112);
		}
	}

	@description = "This is a test for bug COMMERCE-9448. Verify a product image can be uploaded via headless API."
	@priority = 3
	test CanUploadProductImageViaAPI {
		property portal.acceptance = "false";

		task ("When a product is created with an image using JSON") {
			var baseURL = PropsUtil.get("portal.url");
			var catalogId = CommerceJSONCatalogsAPI._getCommerceCatalogIdByName(catalogName = "Master");

			var curl = '''
				${baseURL}/o/headless-commerce-admin-catalog/v1.0/products \
					-u test@liferay.com:test \
					-H 'accept: application/json' \
					-H 'Content-Type: application/json' \
					-d '{
						"name": {
							"en_US": "Simple Product"
						},
						"catalogId": ${catalogId},
						"active": true,
						"productType": "simple",
						"images": [
							{
								"src": "${baseURL}/documents/d/guest/tree-png",
								"title": {
									"en_US": "icon"
								}
							}
						]
					}'
			''';

			var responseBody = JSONCurlUtil.post(${curl});

			var productName = JSONUtil.getWithJSONPath(${responseBody}, "$..['name'].['en_US']");

			if (${productName} != "Simple Product") {
				fail("Something went wrong with the API call");
			}
		}

		task ("And the product is created successfully with the uploaded image") {
			CommerceProducts.openProductsAdmin();

			AssertElementPresent(
				key_src = "account",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_IMAGE");

			CommerceNavigator.gotoEntry(entryName = "Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_src = "account",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_IMAGE");

			AssertElementPresent(
				key_entryName = "icon",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");
		}
	}

	@description = "This is a test for bug COMMERCE-9999. Verify a product image can be uploaded via headless API with CDN."
	@priority = 3
	test CanUploadProductImageViaAPIUsingCDN {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given a buyer user associated with the Commerce Account") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("When for the product ABS Sensor is uploaded an image using the CDN with API") {
			var responseBody = CommerceJSONProductsAPI._patchCommerceProductImageUsingERC(
				cdnEnabled = "true",
				cdnURL = "http://mirrors.lax.liferay.com/github.com/liferay/liferay-portal/portal-web/test/functional/com/liferay/portalweb/dependencies/Commerce_Black.jpg",
				imageTitle = "title2",
				productERC = "MIN93015minium-initializer");

			var status = JSONUtil.getWithJSONPath(${responseBody}, "$..['status']");

			if (${status} != "") {
				fail("Something went wrong with the API call");
			}
		}

		task ("And the image is uploaded successfully") {
			CommerceProducts.openProductsAdmin();

			AppBuilderAdmin.searchByItem(itemName = "ABS Sensor");

			takeScreenshot();

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			takeScreenshot();

			AssertElementPresent(
				key_entryName = "title2",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");

			AssertElementPresent(
				key_src = "Commerce_Black.jpg",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_IMAGE");

			var adminImage = CommerceProductImages.getProductMediaSrc(imagePath = "//img[(@class='sticker-img') and contains(@alt,'title2')]");
		}

		task ("And when the buyer login on Minium") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then i can see the product image on Catalog, Product Details, Minicart") {
			WaitForElementPresent(
				key_productName = "abs-sensor",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_CATALOG_IMAGE");

			var miniumImage = CommerceProductImages.getProductMediaSrc(imagePath = "//a[contains(@href,'abs-sensor')]//img[contains(@class,'card-picture')]");

			TestUtils.assertEquals(
				actual = ${adminImage},
				expected = ${miniumImage});

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 1);

			Click(
				key_productName = "abs-sensor",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");

			FrontStore.assertProductDetails(productImage = "Commerce_Black.jpg");

			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_image = "Commerce_Black.jpg",
				key_productName = "abs-sensor",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE_SPECIFIC");
		}
	}

	@description = "This is a test for bug COMMERCE-9503. Verify a product image can be uploaded via headless API with default workflow enabled"
	@priority = 3
	test CanUploadProductImageViaAPIWithWorkflowEnabled {
		property portal.acceptance = "false";

		task ("When the default workflow is enabled for Commerce Product") {
			CommerceProducts.enableProductSingleApproverWorkflow();
		}

		task ("And a new product is created with an image using the API") {
			CommerceJSONProductsAPI._addCommerceProductImage(
				catalogName = "Master",
				imageTitle = "Image Title",
				productStatus = 2,
				productTitle = "Simple Product",
				productType = "simple");
		}

		task ("Then the new product is created with an image") {
			CommerceProducts.openProductsAdmin();

			AssertElementPresent(
				key_src = "account",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_IMAGE");

			CommerceNavigator.gotoEntry(entryName = "Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_src = "account",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_IMAGE");

			AssertElementPresent(
				key_entryName = "Image Title",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");

			AssertElementPresent(
				key_status = "Approved",
				locator1 = "Questions#WORKFLOW_STATUS");
		}

		CommerceProducts.disableProductSingleApproverWorkflow();
	}

	@description = "This is a test for COMMERCE-8850. Verify that the list of filters is reduced to only show matching results"
	@priority = 5
	test CanVerifyFiltersListShowsOnlyMatchingResults {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin navigates to Commerce -> Product Management -> Products") {
			CommerceProducts.openProductsAdmin();
		}

		task ("When the filter dropdown list is opened") {
			Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");
		}

		task ("Then all filters are shown in the dropdown list") {
			for (var filterItemName : list "Category,Catalog,Channel,Product Type") {
				AssertElementPresent(
					key_filter = ${filterItemName},
					locator1 = "FrontendDataSet#FILTER_OPTION");
			}
		}

		task ("When the admin searches for specific filters") {
			FDSFilters.searchFilter(searchTerm = "Type");
		}

		task ("Then only the matching results are shown in the list") {
			AssertElementPresent(
				key_filter = "Product Type",
				locator1 = "FrontendDataSet#FILTER_OPTION");

			for (var filterItemName : list "Category,Catalog,Channel") {
				AssertElementNotPresent(
					key_filter = ${filterItemName},
					locator1 = "FrontendDataSet#FILTER_OPTION");
			}
		}
	}

	@description = "This is a test for COMMERCE-6747. ConfigureGroupedProduct"
	@ignore = "true"
	@priority = 3
	test ConfigureGroupedProduct {

		// TODO COMMERCE-6747 ConfigureGroupedProduct

	}

	@description = "This is a test for COMMERCE-6751. ConfigureVirtualProduct"
	@priority = 5
	test ConfigureVirtualProduct {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Virtual T-Shirt",
			productType = "Virtual");

		CommerceEntry.gotoMenuTab(menuTab = "Virtual");

		Click(locator1 = "FormFields#SELECT_UPLOAD_FIELD");

		SelectFrameTop();

		SelectFrame(
			key_frameTitle = "Select File",
			locator1 = "CommerceEntry#ANY_IFRAME");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Commerce_Black.jpg");

		Click(
			key_filterOption = "Add",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		SelectFrameTop();

		WaitForElementNotPresent(locator1 = "CommerceEntry#ANY_IFRAME");

		if (IsElementPresent(key_contentType = "Base Information", locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
			Click(
				key_contentType = "Base Information",
				locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
		}

		Type(
			key_fieldLabel = "Max Number of Downloads",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = 10);

		if (IsElementPresent(key_contentType = "Sample", locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
			Click(
				key_contentType = "Sample",
				locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
		}

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Enable Sample",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_panel = "Sample",
			locator1 = "CommerceEntry#VIRTUAL_SELECT_BY_PANEL");

		SelectFrame.selectFrameNoLoading(
			key_frameTitle = "Select File",
			locator1 = "CommerceEntry#ANY_IFRAME");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Commerce_Black.jpg");

		Click(
			key_filterOption = "Add",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		SelectFrameTop();

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		Refresh();

		AssertElementPresent(
			key_index = "Commerce_Black.jpg",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		AssertElementPresent(
			key_index = "Commerce_Black (1).jpg",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		AssertTextEquals(
			key_fieldLabel = "Max Number of Downloads",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = 10);
	}

	@priority = 5
	test CreateProductBundleWithPriceTypeDynamic {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color",
			skuContributor = "true");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceEntry.viewOptionsEntry(
			optionDescription = "Option Description",
			optionName = "Color");

		CPCommerceCatalog.addOptionValues(
			optionEntryName = "Color",
			optionValuesList = "Black:1");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "Shoes:50.0");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Color",
			title = "Add Option");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(optionValuesList = "Black:10.0");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceNavigator.gotoEntry(entryName = "Color");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Dynamic");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceNavigator.gotoEntry(entryName = "Black");

		CommerceEntry.selectAutoCompleteField(
			entryName = "SHOESSKU",
			label = "SKU");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6018. CreateProductBundleWithPriceTypeStatic"
	@priority = 5
	test CreateProductBundleWithPriceTypeStatic {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			facetable = "true",
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color",
			required = "true",
			skuContributor = "true");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.addOptionValue(
			valueName = "Black",
			valuePosition = "");

		Button.click(button = "Submit");

		SelectFrameTop();

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "SHOESSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "50.0");

		Button.clickPublish();

		Refresh();

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Select");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		Click(
			key_fieldName = "Add SKU",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "BLACKSKU");

		Click(locator1 = "Dropdown#TRIGGER");

		Click(
			key_fieldName = "Black",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10.0");

		Button.click(button = "Publish");

		Refresh();

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Click(
			key_index = "Color",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_index = "Black",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		Type(
			key_fieldLabel = "Delta Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "60.0");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "SHOESSKU");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-8425. DuplicateAProductAndVerifyIfSkuPriceIsUnique"
	@priority = 5
	test DuplicateAProductAndVerifyIfSkuPriceIsUnique {
		property portal.acceptance = "true";

		task ("Given a minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When I duplicate ABS Sensor") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceProducts.duplicateProduct(
				checkProductFields = "true",
				compileDescription = "false",
				productCatalog = "Minium",
				productName = "ABS Sensor",
				publishProduct = "true");
		}

		task ("And if I change the SKU price of the original product") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.addPriceToSKU(price = "60.00");

			Button.clickPublish();

			Refresh();
		}

		task ("Then if I go back to the duplicate product the price hasn't changed") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.searchEntry(entryName = "Copy of ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "Copy of ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#PRICE_FIELD",
				value1 = "50.00");

			echo("The price hasn't changed");
		}
	}

	@description = "This is a test for COMMERCE-5808. EditAProduct"
	@priority = 5
	test EditAProduct {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "ABS");

		Button.clickPublish();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "ABS");
	}

	@description = "This is a test for COMMERCE-6022. EditASKU"
	@ignore = "true"
	@priority = 3
	test EditASKU {

		// TODO COMMERCE-6022 EditASKU

	}

	@description = "This is a test for COMMERCE-5807. EditSkuAndDelete"
	@priority = 5
	test EditSkuAndDelete {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceNavigator.searchEntry(entryName = "MIN93017");

		CommerceNavigator.gotoEntry(entryName = "MIN93017");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "MIN930178");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		CommerceNavigator.searchEntry(entryName = "MIN930178");

		if (IsElementPresent(locator1 = "CommerceNavigation#ANY_ENTRY_NAME")) {
			CommerceEntry.deleteCommerceEntry();

			AssertVisible(locator1 = "Message#SUCCESS");
		}
	}

	test ProductPublishing {
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,rockylinux,solaris,suse,ubuntu,windows";
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Package Quantity",
			title = "Add Option");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(optionValuesList = "6:10.0,12:20.0,24:30.0,48:40.0,112:50.0");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black,Black:1,Blue,Blue:1,White",
			optionValues = "6,12,24,48,112",
			validationImage = "true");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

		CommerceEntry.createNewSpecificationGroups(
			specificationDescription = "SpecificationGroups",
			specificationTitle = "SpecificationGroups");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceEntry.createNewSpecificationLabels(
			specificationDescription = "SpecificationLabel",
			specificationGroupTitle = "SpecificationGroups",
			specificationTitle = "SpecificationLabel");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		WaitForElementPresent(locator1 = "CommerceNavigation#SEARCH_FIELD");

		CommerceNavigator.searchEntry(entryName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "SpecificationLabel",
			title = "Specifications");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceEntry.viewProductOptions(
			optionList = "6,12,24,48,112",
			optionName = "Package Quantity");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceEntry.viewProductSkus(skusList = "6:10.00,12:20.00,24:30.00,48:40.00,112:50.00");
	}

	test TranslateProductName {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "Shock Absorber");

		CommerceNavigator.gotoEntry(entryName = "Shock Absorber");

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");

		Button.clickPublish();

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");
	}

	@description = "COMMERCE-5802. Use a filter always check that the results are correct"
	@priority = 5
	test UseFilters {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = "Category",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
			checkboxName = "Brake System",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementNotPresent(
			key_entryName = "Timing Chain",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Catalog",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Click(
			key_fieldType = "Master",
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementNotPresent(
			key_entryName = "Hoses",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Channel",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
			checkboxName = "Test Channel",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Product Type",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Click(
			key_fieldType = "Virtual",
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");
	}

	@description = "This is a test for COMMERCE-6304. UseFriendlyURL"
	@priority = 5
	test UseFriendlyURL {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Test Channel");

		for (var fixIssueButtonName : list "Product Detail") {
			if (IsElementPresent(key_fixIssueButtonName = ${fixIssueButtonName}, locator1 = "CommerceEntry#FIX_ISSUE_BUTTON")) {
				Click(
					key_fixIssueButtonName = ${fixIssueButtonName},
					locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

				Alert.viewSuccessMessage();
			}
		}

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Orange",
			productType = "Simple");

		var baseURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${baseURL}/web/guest/p/orange");

		AssertTextEquals(
			locator1 = "CommerceFrontStore#FS_PRODUCT_NAME",
			value1 = "Orange");
	}

	@description = "This is a test for COMMERCE-6303. UseSchedule"
	@priority = 5
	test UseSchedule {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = '''"Brake Fluid"''');

		Click(
			key_entryName = "Brake Fluid",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Never Expire",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(locator1 = "CommerceEntry#EXPIRATION_DATE_FIELD");

		var displayDateDay = DateUtil.getCurrentDate();
		var displayDateMonth = DateUtil.getCurrentMonth();
		var displayDateYear = DateUtil.getCurrentYear();

		var futureYear = ${displayDateYear} + 1;

		var displayDate = "${displayDateMonth}/${displayDateDay}/${futureYear}";

		Type(
			locator1 = "CommerceEntry#EXPIRATION_DATE_FIELD",
			value1 = ${displayDate});

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-5805. UseSearchBarAndPagination"
	@priority = 3
	test UseSearchBarAndPagination {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Click(locator1 = "ACUtils#NEXT_PAGES");

		AssertTextEquals(
			locator1 = "Pagination#PAGINATION_ITEMS_PER_PAGE",
			value1 = "10 items");

		Pagination.viewResults(results = "Showing 11 to 20 of 50");

		CommerceProducts.searchProduct(search = "U-Joint");

		AssertElementPresent(locator1 = "//a[contains(text(),'Ball Joints')]");

		AssertElementPresent(locator1 = "//a[contains(text(),'U-Joint')]");

		Pagination.viewResults(results = "Showing 1 to 2 of 2");
	}

	@description = "This is a test for COMMERCE-5801. UseSkuSearchBarAndPagination"
	@priority = 3
	test UseSkuSearchBarAndPagination {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "ACUtils#NEXT_PAGES");

		CommerceEntry.viewPaginationResults(results = "Showing 11 to 20 of 54");

		CommerceProducts.searchProduct(search = "MIN55861");

		AssertElementPresent(
			key_entryName = "MIN55861",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "This is a test for COMMERCE-5803. UseSortingByNameAndDate"
	@priority = 3
	test UseSortingByNameAndDate {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.sortField(sortFieldName = "Name");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "ABS Sensor,Ball Joints,Bearings");

		CommerceNavigator.sortField(sortFieldName = "Name");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "Wheel Seal - Front,Wheel Bearing Grease,Wear Sensors");

		CommerceNavigator.sortField(sortFieldName = "Modified Date");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "ABS Sensor,Brake Fluid,Premium Brake Fluid");

		CommerceNavigator.sortField(sortFieldName = "Modified Date");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "U-Joint,Transmission Cooler Line Assembly,Torque Converters");
	}

	@description = "[Please Update]"
	@ignore = "true"
	@priority = 4
	test VerifyIfCategorizationIsWorking {

		// TODO COMMERCE-7075 VerifyIfCategorizationIsWorking

	}

}