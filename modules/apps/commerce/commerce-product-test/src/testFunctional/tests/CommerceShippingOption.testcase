@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify a default shipping option can be set, edited, and removed for an account."
	@priority = "3"
	test AddEditAndRemoveNewDefaultShippingOption {
		property portal.acceptance = "false";

		task ("Given the Sales Manager is on the Order Defaults tab in the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("When the Sales Manager clicks on the Edit button for the Minium channel entry") {
			Click(
				key_entryName = "Minium Portal",
				key_table = "Default Account Commerce Channels Shipping Options",
				locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then the Sales Manager can choose between all eligible shipping options and save") {
			AssertElementPresent(
				key_radioOption = "Use Priority Settings",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_radioOption = "Flat Rate / Standard Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click.clickAtNotVisible(
				key_radioOption = "Flat Rate / Expedited Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Button.clickSave();

			IFrame.selectTopFrame();

			CommerceChannels.assertDefaultAccountShippingOption(
				active = "Yes",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Expedited Delivery");
		}

		task ("When the Sales Manager clicks on the Edit button for the Minium channel entry and selects a different shipping option") {
			Click(
				key_entryName = "Minium Portal",
				key_table = "Default Account Commerce Channels Shipping Options",
				locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Click.clickAtNotVisible(
				key_radioOption = "Flat Rate / Standard Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Button.clickSave();

			IFrame.selectTopFrame();
		}

		task ("Then the default account shipping option is updated") {
			CommerceChannels.assertDefaultAccountShippingOption(
				active = "Yes",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("When the Sales Manager clicks on the Edit button for the Minium channel entry and selects Use Priority Settings") {
			Click(
				key_entryName = "Minium Portal",
				key_table = "Default Account Commerce Channels Shipping Options",
				locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Click.clickAtNotVisible(
				key_radioOption = "Use Priority Settings",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Button.clickSave();

			IFrame.selectTopFrame();
		}

		task ("Then the default account shipping option is updated to Use Priority Settings") {
			CommerceChannels.assertDefaultAccountShippingOption(
				channelName = "Minium Portal",
				shippingMethod = "Use Priority Settings",
				shippingOption = "Use Priority Settings");
		}

		task ("And the Active column becomes empty") {
			AssertTextEquals(
				key_columnNumber = "3",
				key_productName = "Minium Portal",
				key_value = "",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT",
				value1 = "");
		}
	}

	@description = "Verify only one default account shipping option can be set."
	@priority = "3"
	test DefaultShippingOptionsAreSingleSelectable {
		property portal.acceptance = "false";

		task ("Given the Sales Manager is on the Order Defaults tab in the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("When the Sales Manager clicks on the Edit button for the Minium channel entry") {
			Click(
				key_entryName = "Minium Portal",
				key_table = "Default Account Commerce Channels Shipping Options",
				locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("And clicks on Flat Rate/Standard Delivery") {
			Click.clickAtNotVisible(
				key_radioOption = "Flat Rate / Standard Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And clicks on Flat Rate/Expedited Delivery") {
			Click.clickAtNotVisible(
				key_radioOption = "Flat Rate / Expedited Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("Then the first selected shipping option is unselected because only one default shipping option can be set") {
			AssertNotChecked.assertNotCheckedNotVisible(
				key_radioOption = "Flat Rate / Standard Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And the second shipping option remains selected") {
			AssertChecked.assertCheckedNotVisible(
				key_radioOption = "Flat Rate / Expedited Delivery",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}
	}

	@description = "Verify the Active column for the default account shipping option displays 'Yes' if the default shipping option is active and 'No' if it is innactive."
	@priority = "3"
	test MakeADefaultShippingOptionActiveAndInactive {
		property portal.acceptance = "false";

		task ("Given Flat Rate / Expedited Delivery is set as the default shipping option for the Commerce Account") {
			CommerceJSONShippingMethods._setDefaultAccountShippingOption(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Expedited Delivery");
		}

		task ("When the Sales Manager goes into the Minium Portal channel and disables the Flat Rate Shipping Method") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.editShippingMethod(
				active = "false",
				shippingMethod = "Flat Rate");
		}

		task ("And the Sales Manager goes back into the Order Defaults tab inside the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("Then the the status of the Active column for Minium Portal is No") {
			AssertElementPresent(
				key_columnNumber = "1",
				key_productName = "Minium Portal",
				key_value = "Flat Rate",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");

			AssertElementPresent(
				key_columnNumber = "2",
				key_productName = "Minium Portal",
				key_value = "Expedited Delivery",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");

			AssertElementPresent(
				key_columnNumber = "3",
				key_productName = "Minium Portal",
				key_value = "No",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}

		task ("When the Sales Manager goes into the Minium Portal channel and enables the Flat Rate Shipping Method") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.editShippingMethod(
				active = "true",
				shippingMethod = "Flat Rate");
		}

		task ("And the Sales Manager goes back into the Order Defaults tab inside the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("Then the the status of the Active column for Minium Portal is Yes") {
			CommerceChannels.assertDefaultAccountShippingOption(
				active = "Yes",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Expedited Delivery");
		}
	}

	@description = "Verify the default account shipping option reverts to Use Priority Settings if the current default account shipping option is deleted."
	@priority = "3"
	test RemoveAShippingOptionThatIsLinkedAsDefault {
		property portal.acceptance = "false";

		task ("Given a new Flat Rate shipping option (Test Shipping Option)") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.gotoShippingMethodShippingOptions(shippingMethod = "Flat Rate");

			CommerceChannels.addShippingOption(
				key = "test-shipping-option",
				name = "Test Shipping Option");
		}

		task ("And given Flat Rate / Test Shipping Option is set as the default shipping option for the Commerce Account") {
			CommerceJSONShippingMethods._setDefaultAccountShippingOption(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Test Shipping Option");
		}

		task ("When the Sales Manager goes into the Minium Portal channel and deletes Test Shipping Option inside Flat Rate") {
			Click(
				key_value = "Test Shipping Option",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Delete");

			Alert.viewSuccessMessage();
		}

		task ("And the Sales Manager goes back into the Order Defaults tab inside the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("Then the Default shipping option for that account reverts to Use Priority Settings") {
			CommerceChannels.assertDefaultAccountShippingOption(
				active = "",
				channelName = "Minium Portal",
				shippingMethod = "Use Priority Settings",
				shippingOption = "Use Priority Settings");
		}
	}

	@description = "Verify the eligible shipping option with the highest priority is used at checkout if the default shipping option is not linked to the order type of the order."
	@priority = "3"
	test UseANotEligibleDefaultShippingOptionIntoTheCheckoutWithOrderType {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a buyer user associated with the Commerce Account") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "false",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given 2 active order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Order Type 1 Description",
				orderTypeName = "Order Type 1");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Order Type 2 Description",
				orderTypeName = "Order Type 2");
		}

		task ("And given a new Flat Rate shipping option (Test Shipping Option) with priority 3") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.gotoShippingMethodShippingOptions(shippingMethod = "Flat Rate");

			CommerceChannels.addShippingOption(
				key = "test-shipping-option",
				name = "Test Shipping Option",
				priority = "3");
		}

		task ("And given the Sales Manager edits the priority for Standard Delivery to 1 and Expedited Delivery to 2") {
			CommerceChannels.editShippingOption(
				priority = "1",
				shippingOption = "Standard Delivery");

			CommerceChannels.editShippingOption(
				priority = "2",
				shippingOption = "Expedited Delivery");
		}

		task ("And given Order Type 1 is linked to Standard Delivery and Test Shipping Option while Expedited Delivery is linked to Order Type 2") {
			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				shippingOption = "Test Shipping Option");

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 2",
				shippingOption = "Expedited Delivery");
		}

		task ("And given Flat Rate / Expedited Delivery is set as the default shipping option for the Commerce Account") {
			CommerceJSONShippingMethods._setDefaultAccountShippingOption(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Expedited Delivery");
		}

		task ("When the buyer creates an order with Order Type 1 and starts the checkout") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Order Type 1");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then the shipping option used at checkout is Test Shipping Option based on priority and not Expedited Delivery because it is not present in Order Type 1") {
			CommerceCheckout.initializersCheckout(
				defaultShippingMethod = "Test Shipping Option",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				notEligibleShippingMethods = "Expedited Delivery",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Test Shipping Option");
		}
	}

	@description = "Verify the default account shipping option is pre-selected at checkout."
	@priority = "3"
	test UseDefaultShippingOptionIntoTheCheckout {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property portal.acceptance = "false";

		task ("Given a buyer user associated with the Commerce Account") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "false",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given the Sales Manager edits the priority for Standard Delivery to 1 and Expedited Delivery to 2") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.gotoShippingMethodShippingOptions(shippingMethod = "Flat Rate");

			CommerceChannels.editShippingOption(
				priority = "1",
				shippingOption = "Standard Delivery");

			CommerceChannels.editShippingOption(
				priority = "2",
				shippingOption = "Expedited Delivery");
		}

		task ("And given Flat Rate / Standard Delivery is set as the default shipping option for the Commerce Account") {
			CommerceJSONShippingMethods._setDefaultAccountShippingOption(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("When the buyer start a checkout") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then the default shipping option used at checkout is Standard Delivery") {
			CommerceCheckout.initializersCheckout(
				defaultShippingMethod = "Standard",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "Verify the list of selectable default shipping options is sorted alphanumerically by name and that Use Priority Settings is an option."
	@priority = "3"
	test VerifyIfDefaultShippingOptionsAreSortedAndIfUsePrioritySettingArePresentIntoTheList {
		property portal.acceptance = "false";

		task ("Given the Sales Manager is on the Order Defaults tab in the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("And given Use Priority Settings is pre-selected for Default Account Commerce Channels Shipping Options") {
			CommerceChannels.assertDefaultAccountShippingOption(
				active = "",
				channelName = "Minium Portal",
				shippingMethod = "Use Priority Settings",
				shippingOption = "Use Priority Settings");
		}

		task ("When the Sales Manager clicks on the Edit button for the Minium Channel entry") {
			Click(
				key_entryName = "Minium Portal",
				key_table = "Default Account Commerce Channels Shipping Options",
				locator1 = "CommerceEntry#TABLE_ENTRY_EDIT_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then an alphanumerically sorted list with all eligible shipping options linked to the Minium channel appears") {
			AssertElementPresent(
				key_radioOption = "Use Priority Settings",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertTextEquals(
				key_rowNumber = "2",
				locator1 = "Radio#LABEL_NUMBER",
				value1 = "Flat Rate / Expedited Delivery");

			AssertElementPresent(
				key_rowNumber = "3",
				locator1 = "Radio#LABEL_NUMBER",
				value1 = "Flat Rate / Standard Delivery");
		}
	}

}