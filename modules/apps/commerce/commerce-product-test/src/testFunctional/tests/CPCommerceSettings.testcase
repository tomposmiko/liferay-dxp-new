@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6912. Bulk delete countries"
	@priority = "3"
	test BulkDeleteCountries {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceSettings#BulkDeleteCountries";

		task ("Given a Admin goes to Countries") {
			CommerceNavigator.gotoPortlet(
				category = "Settings",
				portlet = "Countries");
		}

		task ("And verifies if the Trash icon is not present in the header") {
			AssertElementNotPresent(locator1 = "Button#TRASH_ENABLED");
		}

		task ("And the admin selects one country using the checkbox and verifies if the Trash icon is now present in the header") {
			CommerceNavigator.searchEntry(entryName = "Qatar");

			Click.clickNoMouseOverNoWaitForVisible(
				key_productName = "Qatar",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_CHECKBOX");

			AssertElementPresent(locator1 = "Button#TRASH_ENABLED");
		}

		task ("Then the admin can remove the country by clicking on the Trash icon") {
			ClickNoError(locator1 = "Button#TRASH_ENABLED");

			AssertConfirm(value1 = "Are you sure you want to delete the selected countries?");
		}

		task ("And the admin select the delete country to check if it was deleted") {
			CommerceNavigator.searchEntry(entryName = "Qatar");

			AssertElementNotPresent(
				key_entryName = "Qatar",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And the admin can delete all the countries with one click by using the select all checkbox") {
			CommerceNavigator.searchEntry(entryName = "");

			while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
				CommerceProducts.deleteEntries(deleteMessage = "Are you sure you want to delete the selected countries?");
			}
		}
	}

	test CreateNewAvailabilityEstimate {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Availability Estimates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewAvailabilityEstimatesEntry(entryName = "New Availability Estimate");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test CreateNewCountry {
		property portal.acceptance = "false";
		property portal.upstream = "false";

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Countries");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCountriesEntry(
			entryIsoNumber = "020",
			entryIsoThreeLetters = "TCO",
			entryIsoTwoLetters = "54",
			entryName = "Test Country");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceEntry.gotoMenuTab(menuTab = "Regions");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewRegionsEntry(
			code = "TRE",
			entryName = "Test Region");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertElementPresent(
			key_entry = "Test Region",
			locator1 = "CommerceNavigation#ANY_ENTRY_NAME");
	}

	test CreateNewMeasurementUnits {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Measurement Units");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDimensionUnit(entryName = "New Dimension Unit");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Weight");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewWeightUnit(entryName = "New Weight Unit");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	test ViewInstanceCurrenciesAvailable {
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		CommerceEntry.viewCurrenciesEntry(currenciesList = "US Dollar,Australian Dollar,British Pound,Canadian Dollar,Chinese Yuan Renminbi,Euro,Hong Kong Dollar,Japanese Yen,Indian Rupee,Brazilian Real");
	}

}