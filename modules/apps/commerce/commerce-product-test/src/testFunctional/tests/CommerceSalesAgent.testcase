@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(
			minium = "true",
			moneyOrder = "true");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_COMMERCE_ORDERS",
			resourceName = "com.liferay.commerce.order",
			roleTitle = "Sales Agent");

		task ("Given an organization is created") {
			JSONOrganization.addOrganization(organizationName = "Test Organization");
		}

		task ("And a user with the Sales Agent role, Minium site membership and linked to the organization is created") {
			JSONUser.addUserWithRole(
				roleTitle = "Sales Agent",
				userEmailAddress = "sales.agent@liferay.com",
				userFirstName = "Sales",
				userLastName = "Agent",
				userScreenName = "salesagent");

			JSONUser.addUserToSite(
				groupName = "Minium",
				userEmailAddress = "sales.agent@liferay.com");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Test Organization",
				userEmailAddress = "sales.agent@liferay.com");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = " COMMERCE-9883 | As a Sales Agent, if he has the permission, I want to be able to see all the accounts and the orders that are present in th organization to which the same Sales Agent belongs"
	@priority = "4"
	test CanAddNewUserToAccountAsSalesAgent {
		task ("And the admin creates an account called Commerce Account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("And that Commerce Account is linked to the Test Organization") {
			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Commerce Account",
				organizationName = "Test Organization");
		}

		task ("When the Sales Agent goes into the Users tab of the Commerce Account") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "sales.agent@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Users");
		}

		task ("And create a new user by clicking on the + button") {
			CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
				accountName = "Commerce Account",
				emailAddress = "buyer@liferay.com",
				role = "Buyer",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");
		}

		task ("Then when the admin login again, he will see the new User inside Commerce Account A that the Sales Agent created previously") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "test@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Users");

			Account.viewAssignee(assigneeName = "Buyer User");
		}
	}

	@description = "COMMERCE-9880 | As a Sales Agent, I want to be able to checkout orders"
	@priority = "4"
	test CanCheckoutOrdersAsSalesAgent {
		property portal.acceptance = "true";

		task ("Given 2 accounts are created") {
			for (var account : list "A,B") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account ${account}",
					accountEntryType = "Business");
			}
		}

		task ("And 2 accounts are linked to the organization") {
			for (var account : list "A,B") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = "Account ${account}",
					organizationName = "Test Organization");
			}
		}

		task ("And VIEW_BILLING_ADDRESS permission is given to Sales Agent") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_BILLING_ADDRESS",
				resourceName = "com.liferay.commerce.order",
				roleTitle = "Sales Agent");
		}

		task ("And Account A has a Billing & Shipping address") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account A");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			Account.addAddress(
				addressCity = "Test City",
				addressCountry = "United States",
				addressName = "Test Name",
				addressPostalCode = "Test Zip Code",
				addressRegion = "California",
				addressStreet1 = "Test Street");
		}

		task ("And the account A has a pending order") {
			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Account A",
				orderItems = "MIN55861:1",
				orderStatus = "2",
				paymentMethod = "money-order",
				paymentStatus = "2");
		}

		task ("When the Sales Agent logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "sales.agent@liferay.com");
		}

		task ("And Account A is set as active account") {
			CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Account A");
		}

		task ("Then the Sales Agent can checkout Account A's order") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				accountName = "Account A",
				manageShippingOptionsPermission = "false",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				selectedShippingAddressName = "Test Name",
				shippingMethod = "Standard");
		}

		task ("When the Sales Agent select Account B as the active account") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Account B");
		}

		task ("Then the Sales Agent can create and checkout an order") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				accountName = "Account B",
				manageShippingOptionsPermission = "false",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "COMMERCE-9882 | As a Sales Agent, if he has the permission, I want to be able to see all the accounts and the orders that are present in the organization to which the same Sales Agent belongs"
	@priority = "4"
	test CanEditAccountDetailsAsSalesAgent {
		property portal.acceptance = "true";

		task ("And the admin creates an account called Commerce Account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("And that Commerce Account is linked to the Test Organization") {
			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Commerce Account",
				organizationName = "Test Organization");
		}

		task ("Given that the Sales Agent goes into Account Management of Commerce Account and creates a new Shipping and Billing Address (Type: Billing and Shipping)") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "sales.agent@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			Account.addAddressViaSetDefaultAddress(
				addressCity = "Test Address",
				addressCountry = "United States",
				addressName = "Test Name",
				addressPostalCode = "Test Zip Code",
				addressRegion = "California",
				addressStreet1 = "Test Street");
		}

		task ("When the Sales Agent goes into the Details tab of the Commerce Account") {
			Account.gotoAssigneeTab(assigneeTab = "Details");
		}

		task ("And edit the fields: ACCOUNT NAME, TAX ID, DESCRIPTION, SET A DEFAULT SHIPPING AND BILLING ADDRESS And clicks on the Save button") {
			PortletEntry.inputName(name = "Commerce Account Edit");

			PortletEntry.inputDescription(description = "Commerce Account Edit Description");

			PortletEntry.inputText(
				fieldLabel = "Tax ID",
				text = "123456");

			Button.clickSave();

			for (var addressType : list "Billing,Shipping") {
				var addressTypeUppercase = StringUtil.upperCase("${addressType}");

				AssertClick(
					locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_${addressTypeUppercase}",
					value1 = "Set Default Address");

				SelectFrame(
					key_title = "Set Default ${addressType} Address",
					locator1 = "IFrame#MODAL_ANY");

				Click(
					key_addressName = "Test Name",
					locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SELECT_ADDRESS_RADIO");

				SelectFrameTop();

				AssertClick(
					locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SAVE_BUTTON",
					value1 = "Save");

				Alert.viewSuccessMessage();
			}
		}

		task ("Then when the admin login again, he will see all the changes that the Sales Agent marked previously") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "test@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			Account.viewAccountDetails(
				accountDescription = "Commerce Account Edit Description",
				accountName = "Commerce Account Edit",
				accountTaxId = "123456");

			Account.viewDefaultBillingAddress(
				addressCity = "Test Address",
				addressCountry = "United States",
				addressName = "Test Name",
				addressPostalCode = "Test Zip Code",
				addressRegion = "California",
				addressStreet1 = "Test Street");

			Account.viewDefaultShippingAddress(
				addressCity = "Test Address",
				addressCountry = "United States",
				addressName = "Test Name",
				addressPostalCode = "Test Zip Code",
				addressRegion = "California",
				addressStreet1 = "Test Street");
		}
	}

	@description = "COMMERCE-9872 | As a Sales Agent, I want to not be able to see accounts that are outside the organization I'm part of"
	@priority = "4"
	test CannotViewAccountsOutsideOrganizationAsSalesAgent {
		property portal.acceptance = "true";

		task ("Given an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("And the acccount has a pending and a placed order") {
			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Commerce Account",
				orderStatus = "1",
				paymentMethod = "money-order",
				paymentStatus = "2");

			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Commerce Account",
				orderItems = "MIN55861:1",
				orderStatus = "2",
				paymentMethod = "money-order",
				paymentStatus = "2");
		}

		task ("When the Sales Agent logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "sales.agent@liferay.com");
		}

		task ("Then the Sales Agent will not see any accounts in the Account Selector") {
			CommerceAcceleratorsInitializer.gotoAccountSelectorAccountsList();

			AssertElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_NO_ACCOUNTS_WERE_FOUND");
		}

		task ("And the Sales Agent will not see any account in the Account Management page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No accounts were found.");
		}

		task ("And the Sales Agent will not see any order in the Pending Orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			AssertElementNotPresent(
				key_orderAuthor = "Commerce Account",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");
		}

		task ("And the Sales Agent will not see any order in the Placed Orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			AssertElementNotPresent(
				key_orderAuthor = "Commerce Account",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");
		}
	}

	@description = "COMMERCE-9871 |  As a Sales Agent, I want to be able to see all the accounts and orders that are present in the organization to which the Sales Agent belongs"
	@priority = "4"
	test CanViewAccountsAndOrdersAsSalesAgent {
		property portal.acceptance = "true";

		task ("Given 4 accounts are created") {
			for (var account : list "A,B,C,D") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account ${account}",
					accountEntryType = "Business");
			}
		}

		task ("And 2 accounts are linked to the organization") {
			for (var account : list "A,B") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = "Account ${account}",
					organizationName = "Test Organization");
			}
		}

		task ("And the account A has a placed order") {
			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Account A",
				orderItems = "MIN55861:1",
				orderStatus = "1",
				paymentMethod = "money-order",
				paymentStatus = "2");
		}

		task ("And the account B has a pending order") {
			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Account B",
				orderItems = "MIN55861:1",
				orderStatus = "2",
				paymentMethod = "money-order",
				paymentStatus = "2");
		}

		task ("When the Sales Agent logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "sales.agent@liferay.com");
		}

		task ("Then the Sales Agent can see the accounts that are part of the organization in the Account Selector") {
			CommerceAcceleratorsInitializer.gotoAccountSelectorAccountsList();

			for (var account : list "A,B") {
				AssertElementPresent(
					key_accountName = "Account ${account}",
					locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");
			}

			for (var account : list "C,D") {
				AssertElementNotPresent(
					key_accountName = "Account ${account}",
					locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");
			}
		}

		task ("And the Sales Agent can see the accounts that are part of the organization in the Account Management page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			for (var account : list "A,B") {
				AssertElementPresent(
					key_tableEntry = "Account ${account}",
					locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");
			}

			for (var account : list "C,D") {
				AssertElementNotPresent(
					key_tableEntry = "Account ${account}",
					locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");
			}
		}

		task ("And the Sales Agent can see one Pending Order related to Account B") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			AssertElementPresent(
				key_orderAuthor = "Account B",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");
		}

		task ("And the Sales Agent can see one Placed Order related to Account A") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			AssertElementPresent(
				key_orderAuthor = "Account A",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");
		}

		task ("And the Sales Agent can see the order item on the mini-cart if Account B is set as active") {
			CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Account B");

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "U-Joint",
				cartItemPriceValue = "24.00",
				cartItemQuantity = "1",
				cartItemSku = "MIN55861");
		}
	}

}