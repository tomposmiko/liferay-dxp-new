@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		Navigator.openURL();

		if (IsElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE")) {
			User.logoutPG();
		}

		User.firstLoginPG();

		CommerceConfiguration.commerceAdminTearDown();

		CommerceConfiguration.commerceInitializersTearDown();
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AddANewPaymentTerm {
		property portal.acceptance = "false";

		// TODO COMMERCE-8279 AddANewPaymentTerm pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AssertPaymentTermIsSortedByPriority {
		property portal.acceptance = "false";

		// TODO COMMERCE-8295 AssertPaymentTermIsSortedByPriority pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AssertPaymentTermPriority {
		property portal.acceptance = "false";

		// TODO COMMERCE-8293 AssertPaymentTermPriority pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test AssertPaymentTermPriorityIsUnique {
		property portal.acceptance = "false";

		// TODO COMMERCE-8296 AssertPaymentTermPriorityIsUnique pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CancelTheCreationOfANewEntry {
		property portal.acceptance = "false";

		// TODO COMMERCE-8286 CancelTheCreationOfANewEntry pending implementation

	}

	@description = "Delete a new payment term to Terms and Conditions."
	@priority = "3"
	test CanDeleteAPaymentTerm {
		property portal.acceptance = "false";

		task ("Given a new entry into the Terms and Conditions with the status to Active") {
			CommerceNavigator.gotoPortlet(
				category = "Order Management",
				portlet = "Terms and Conditions");

			CommerceOrders.addTermsAndCondition(
				termsAndConditionName = "Test Terms and Condition",
				termsAndConditionType = "Payment Terms",
				valuePosition = "");

			Click(locator1 = "Icon#BACK");

			CommerceOrders.viewTermsAndConditionEntry(
				termsAndConditionActiveStatus = "Yes",
				termsAndConditionName = "Test Terms and Condition",
				termsAndConditionType = "Payment Terms",
				valuePosition = "0");
		}

		task ("When I delete the terms and conditions") {
			CommerceOrders.deleteTermsAndCondition(termsAndConditionName = "Test Terms and Condition");
		}

		task ("Then the entry is deleted") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No Items were found.");
		}
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test ChangeTheStatus {
		property portal.acceptance = "false";

		// TODO COMMERCE-8280 ChangeTheStatus pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test EditAPaymentTerm {
		property portal.acceptance = "false";

		// TODO COMMERCE-8282 EditAPaymentTerm pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test PaymentTermNameIsUnique {
		property portal.acceptance = "false";

		// TODO COMMERCE-8283 PaymentTermNameIsUnique pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test UseFilterAndSearch {
		property portal.acceptance = "false";

		// TODO COMMERCE-8291 UseFilterAndSearch pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test UseTheLocalization {
		property portal.acceptance = "false";

		// TODO COMMERCE-8284 UseTheLocalization pending implementation

	}

}