@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6021. AddASKU"
	@priority = 3
	test AddASKU {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "BLACKSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		CommerceSKUs.addPriceToSKU(price = "10.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6024. AddASKUWithSubscriptions"
	@priority = 3
	test AddASKUWithSubscriptions {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "BLACK:10.0");

		Click(
			key_value = "BLACKSKU",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			key_entry = "Subscriptions",
			locator1 = "CommerceNavigation#ANY_ENTRY_NAME");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Override Subscription Settings",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent.assertVisible(
			key_entryName = "Payment Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");

		AssertElementPresent.assertVisible(
			key_entryName = "Delivery Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");

		Button.clickSave();

		AssertVisible(locator1 = "Message#SUCCESS");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Override Subscription Settings",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertVisible(locator1 = "Message#SUCCESS");

		AssertNotVisible(
			key_entryName = "Payment Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");

		AssertNotVisible(
			key_entryName = "Delivery Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");
	}

	@description = "This is a test for COMMERCE-9891 UI to show External Reference code of SKU"
	@priority = 3
	test CanEditSKUERC {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin is on the SKUs tab of the Products") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");
		}

		task ("And clicks a product SKU") {
			CommerceNavigator.searchEntry(entryName = "MIN93015");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("When edits and publishes a new ERC value for the SKU") {
			CommerceSKUs.editSkuERC(
				publish = "true",
				skuERC = "Test ERC");
		}

		task ("Then verifies that the SKU ERC is updated successfully") {
			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "Test ERC");
		}
	}

	@description = "This is a test for COMMERCE-9891 UI to show External Reference code of SKU"
	@priority = 3
	test CanEditSKUERCOfANewProduct {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin creates a new Simple Product") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Simple T-Shirt",
				productType = "Simple");
		}

		task ("And admin goes to the SKUs tab of the new product and clicks default SKU") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_value = "default",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Edit");
		}

		task ("When edits and publishes a new ERC value for the SKU") {
			CommerceSKUs.editSkuERC(
				publish = "true",
				skuERC = "New ERC");
		}

		task ("Then verifies that the SKU ERC is updated successfully") {
			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "New ERC");
		}
	}

	@description = "This is a test for COMMERCE-9891 UI to show External Reference code of SKU"
	@priority = 5
	test CanNotUseTheSameSKUERCForDifferentSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin edits and publishes SKU ERC of a product") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			CommerceNavigator.gotoTableListEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_value = "MIN93015",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Edit");

			CommerceSKUs.editSkuERC(
				closeFrame = "true",
				publish = "true",
				skuERC = "Test ERC");
		}

		task ("When enters the same ERC value to another product and clicks Publish") {
			Click(locator1 = "CommerceNavigation#BACK");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoTableListEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_value = "MIN55861",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Edit");

			CommerceSKUs.editSkuERC(
				publish = "true",
				skuERC = "Test ERC");
		}

		task ("Then verifies that the same ERC cannot be given twice and an error message appears") {
			AssertElementNotPresent(locator1 = "Message#SUCCESS");

			Alert.viewErrorMessage(errorMessage = "Error:There is already one SKU with the external reference code.");
		}
	}

	@description = "This is a test for COMMERCE-6022. EditASKU"
	@priority = 3
	test EditASKU {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "BLACKSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		CommerceSKUs.addPriceToSKU(price = "10.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		CommerceNavigator.gotoEntry(entryName = "BLACKSKU");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "REDSKU");

		CommerceSKUs.addPriceToSKU(price = "20.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		CommerceNavigator.gotoEntry(entryName = "REDSKU");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		AssertElementPresent(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "REDSKU");

		AssertElementPresent(
			locator1 = "CommerceEntry#PRICE_FIELD",
			value1 = "20.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		SelectFrame.selectFrameTop();
	}

	@description = "This is a test for COMMERCE-6023. RemoveASKU"
	@priority = 5
	test RemoveASKU {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "BLACK:10.0");

		Alert.viewSuccessMessage();

		if (IsElementPresent(locator1 = "//a[contains(text(),'BLACKSKU')]")) {
			CommerceEntry.deleteCommerceEntry();
		}

		Alert.viewSuccessMessage();
	}

	@description = "[Please Update]"
	@ignore = "true"
	@priority = 4
	test VerifyIfSaveAndSaveAsDraftButtonsAreNotPresent {

		// TODO COMMERCE-7074 VerifyIfSaveAndSaveAsDraftButtonsAreNotPresent

	}

}