@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userRole = "Buyer",
			userScreenName = "buyeruser",
			userSiteMembership = "Minium");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11227 | Can use pagination for Billing Address table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsBillingAddressesTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And 11 billing addresses linked to the account are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City ${num}",
					countryISOCode = "AF",
					name = "Test Address ${num}",
					street1 = "Test street ${num}",
					type = 1,
					zip = "Test Zip ${num}");
			}
		}

		task ("And all billing addresses are added in the Channel Defaults' Billing Addresses table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsBillingAddress(
					accountEntryName = "Commerce Account",
					billingAddressName = "Test Address ${num}",
					channelName = "Test Channel ${num}");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for billing addresses table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "BillingCommerceAddresses");

			AssertTextEquals(
				key_id = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "BillingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "BillingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "BillingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "BillingCommerceAddresses",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "BillingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "BillingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "BillingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "BillingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11235 | Can use pagination for Channel Account Managers table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsChannelAccountManagersTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And users are added in the Channel Defaults' channel account managers table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsChannelAccountManager(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					userEmailAddress = "test@liferay.com");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for the table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "Users");

			AssertTextEquals(
				key_id = "Users",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "Users",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "Users",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "Users",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "Users",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "Users",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "Users",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "Users",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "Users",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "Users",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "Users",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "Users",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "Users",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "Users",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "Users",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11233 | Can use pagination for Currencies table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsCurrenciesTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And the currencies are added in the Channel Defaults' Currencies table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsCurrency(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					currencyCode = "USD");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for Currencies table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "CommerceCurrencies");

			AssertTextEquals(
				key_id = "CommerceCurrencies",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceCurrencies",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "CommerceCurrencies",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "CommerceCurrencies",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommerceCurrencies",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceCurrencies",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommerceCurrencies",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "CommerceCurrencies",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "CommerceCurrencies",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceCurrencies",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "CommerceCurrencies",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "CommerceCurrencies",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommerceCurrencies",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceCurrencies",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommerceCurrencies",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11229 | Can use pagination for Delivery Terms and Conditions table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsDeliveryTermsAndConditionsTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And 11 delivery terms are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
					termsCount = 11,
					termsType = "Delivery");
			}
		}

		task ("And all delivery terms are added in the corresponding Channel Defaults table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsDeliveryTerm(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					termsAndConditionsName = "delivery-term-${num}");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for the table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "DeliveryCommerceTerm");

			AssertTextEquals(
				key_id = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "DeliveryCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "DeliveryCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "DeliveryCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "DeliveryCommerceTerm",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "DeliveryCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "DeliveryCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "DeliveryCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "DeliveryCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11232 | Can use pagination for Discounts table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsDiscountsTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And 11 discounts are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONDiscountsAPI._addDiscount(
					active = "true",
					level = "L1",
					percentageLevel1 = 10,
					target = "products",
					title = "Test Discount ${num}",
					usePercentage = "true");
			}
		}

		task ("And all discounts are added in the Channel Defaults' discounts table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsDiscount(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					discountTitle = "Test Discount ${num}");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for Discounts table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "CommerceDiscounts");

			AssertTextEquals(
				key_id = "CommerceDiscounts",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceDiscounts",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "CommerceDiscounts",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "CommerceDiscounts",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommerceDiscounts",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceDiscounts",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommerceDiscounts",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "CommerceDiscounts",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "CommerceDiscounts",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceDiscounts",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "CommerceDiscounts",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "CommerceDiscounts",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommerceDiscounts",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommerceDiscounts",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommerceDiscounts",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11234 | Can use pagination for Payment Methods table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsPaymentMethodsTablePagination {
		property portal.acceptance = "false";

		task ("Given 10 other channels are created (the Minium site is the first channel)") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for payment methods table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "CommercePaymentMethod");

			AssertTextEquals(
				key_id = "CommercePaymentMethod",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Minium Portal,Test Channel 1,Test Channel 2,Test Channel 3") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePaymentMethod",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 4",
				key_secondColumnValue = "",
				key_table = "CommercePaymentMethod",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "CommercePaymentMethod",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommercePaymentMethod",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 4,Test Channel 5,Test Channel 6,Test Channel 7") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePaymentMethod",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "3,8") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommercePaymentMethod",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "CommercePaymentMethod",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "CommercePaymentMethod",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 8,Test Channel 9,Test Channel 10") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePaymentMethod",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 7",
				key_secondColumnValue = "",
				key_table = "CommercePaymentMethod",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "CommercePaymentMethod",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommercePaymentMethod",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 4,Test Channel 5,Test Channel 6,Test Channel 7") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePaymentMethod",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "3,8") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommercePaymentMethod",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}
	}

	@description = "COMMERCE-11230 | Can use pagination for Payment Terms and Conditions table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsPaymentTermsAndConditionsTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And 11 payment terms are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
					termsCount = 11,
					termsType = "Payment");
			}
		}

		task ("And all payment terms are added in the corresponding Channel Defaults table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsPaymentTerm(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					termsAndConditionsName = "payment-term-${num}");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for shipping addresses table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "PaymentCommerceTerm");

			AssertTextEquals(
				key_id = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "PaymentCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "PaymentCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "PaymentCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "PaymentCommerceTerm",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "PaymentCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "PaymentCommerceTerm",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "PaymentCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "PaymentCommerceTerm",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11231 | Can use pagination for Pricelists table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsPriceListsTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And 11 price lists are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
					catalogName = "Minium",
					currencyCode = "USD",
					priceListName = "Price List ${num}");
			}
		}

		task ("And all pricelists are added in the Channel Defaults' pricelists table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsPriceList(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					priceListName = "Price List ${num}");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for Pricelists table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "CommercePriceLists");

			AssertTextEquals(
				key_id = "CommercePriceLists",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePriceLists",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "CommercePriceLists",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "CommercePriceLists",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommercePriceLists",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePriceLists",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommercePriceLists",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "CommercePriceLists",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "CommercePriceLists",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePriceLists",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "CommercePriceLists",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "CommercePriceLists",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "CommercePriceLists",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "CommercePriceLists",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "CommercePriceLists",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11228 | Can use pagination for Shipping Addresses table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsShippingAddressesTablePagination {
		property portal.acceptance = "false";

		task ("Given 11 channels are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("And 11 shipping addresses linked to the account are created") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City ${num}",
					countryISOCode = "AF",
					name = "Test Address ${num}",
					street1 = "Test street ${num}",
					type = 3,
					zip = "Test Zip ${num}");
			}
		}

		task ("And all shipping addresses are added in the Channel Defaults' Shipping Addresses table in relation to a channel") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10,11") {
				CommerceJSONAccountsAPI._addChannelDefaultsShippingAddress(
					accountEntryName = "Commerce Account",
					channelName = "Test Channel ${num}",
					shippingAddressName = "Test Address ${num}");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for shipping addresses table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "ShippingCommerceAddresses");

			AssertTextEquals(
				key_id = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Test Channel 1,Test Channel 2,Test Channel 3,Test Channel 4") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 5",
				key_secondColumnValue = "",
				key_table = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "ShippingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "ShippingCommerceAddresses",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 9,Test Channel 10,Test Channel 11") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 8",
				key_secondColumnValue = "",
				key_table = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "ShippingCommerceAddresses",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 5,Test Channel 6,Test Channel 7,Test Channel 8") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "4,9") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "ShippingCommerceAddresses",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_ELLIPSIS");
			}
		}
	}

	@description = "COMMERCE-11226 | Can use pagination for Shipping Options table in the account channel defaults"
	@priority = 3
	test CanAssertChannelDefaultsShippingOptionsTablePagination {
		property portal.acceptance = "false";

		task ("Given 10 other channels are created (the Minium site is the first channel)") {
			for (var num : list "1,2,3,4,5,6,7,8,9,10") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = "Test Channel ${num}",
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("When the admin navigates to the channel defaults") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("And the admin changes the pagination for shipping options table") {
			CommerceEntry.changePagination(
				itemsPerPage = "4 Items",
				key_id = "ShippingOption");

			AssertTextEquals(
				key_id = "ShippingOption",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 1 to 4 of 11 entries.");
		}

		task ("Then the first 4 items are present in the first page") {
			for (var channel : list "Minium Portal,Test Channel 1,Test Channel 2,Test Channel 3") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingOption",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 5th item is not present in the first page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 4",
				key_secondColumnValue = "",
				key_table = "ShippingOption",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("When the admin goes to the next page") {
			Click(
				key_id = "ShippingOption",
				locator1 = "CommerceEntry#PAGINATION_NEXT_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "ShippingOption",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 4,Test Channel 5,Test Channel 6,Test Channel 7") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingOption",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "3,8") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "ShippingOption",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("When the admin goes to the third page") {
			Click(
				key_id = "ShippingOption",
				key_pageNumber = 3,
				locator1 = "CommerceEntry#PAGINATION_EXACT_PAGE_BY_TABLE");

			AssertTextEquals(
				key_id = "ShippingOption",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 9 to 11 of 11 entries.");
		}

		task ("Then all items from 9th to 11th are shown in the third page") {
			for (var channel : list "Test Channel 8,Test Channel 9,Test Channel 10") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingOption",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 8th item is not shown in the third page") {
			AssertElementNotPresent(
				key_firstColumnValue = "Test Channel 7",
				key_secondColumnValue = "",
				key_table = "ShippingOption",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("When the admin goes back to the second page") {
			Click(
				key_id = "ShippingOption",
				locator1 = "CommerceEntry#PAGINATION_PREVIOUS_PAGES_BY_TABLE");

			AssertTextEquals(
				key_id = "ShippingOption",
				locator1 = "CommerceEntry#PAGINATION_RESULTS_BY_TABLE",
				value1 = "Showing 5 to 8 of 11 entries.");
		}

		task ("Then all items from 5th to 8th are shown in the second page") {
			for (var channel : list "Test Channel 4,Test Channel 5,Test Channel 6,Test Channel 7") {
				AssertElementPresent(
					key_firstColumnValue = ${channel},
					key_secondColumnValue = "",
					key_table = "ShippingOption",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}

		task ("And the 4th and 9th items are not shown in the second page") {
			for (var num : list "3,8") {
				AssertElementNotPresent(
					key_firstColumnValue = "Test Channel ${num}",
					key_secondColumnValue = "",
					key_table = "ShippingOption",
					locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
			}
		}
	}

	@description = "Verify a default payment method linked to an account is applied when that account completes the checkout process"
	@priority = 5
	test CanCheckoutWithDefaultPaymentMethod {
		property portal.acceptance = "true";

		task ("Given all payment methods are activated with varying priorities") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethodConfiguration : list "PayPal:1,Authorize.Net:2,Mercanet:3,Money Order:4") {
				var paymentMethod = StringUtil.extractFirst(${paymentMethodConfiguration}, ":");
				var priority = StringUtil.extractLast(${paymentMethodConfiguration}, ":");

				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod},
					priority = ${priority});
			}
		}

		task ("And given Money Order is set as the default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "Money Order");
		}

		task ("When the buyer adds a product to the cart and starts the checkout process") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();
		}

		task ("Then at the Order Summary and Payment Method steps, the payment method should be set as Money Order") {
			CommerceCheckout.initializersCheckout(
				defaultPaymentMethod = "Money Order",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "Verify the active payment method with the highest priority is applied to an order if the default payment method is not enabled in the channel"
	@priority = 3
	test CanCheckoutWithDefaultPaymentMethodDisabled {
		property portal.acceptance = "false";

		task ("Given Paypal and Money Order payment methods are active with priorities 1 and 2") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethodConfiguration : list "PayPal:1,Money Order:2") {
				var paymentMethod = StringUtil.extractFirst(${paymentMethodConfiguration}, ":");
				var priority = StringUtil.extractLast(${paymentMethodConfiguration}, ":");

				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod},
					priority = ${priority});
			}
		}

		task ("And given PayPal is set as the default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "PayPal");
		}

		task ("And given the PayPal payment method is disabled") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.editPaymentMethod(
				active = "false",
				paymentMethod = "PayPal");
		}

		task ("When the buyer creates an order from pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer adds a product to the cart and starts the checkout process") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();
		}

		task ("Then at the Order Summary and Payment Method steps, the payment method should be the active payment method with the highest priority(Money Order) and not the default payment method(PayPal)") {
			CommerceCheckout.initializersCheckout(
				defaultPaymentMethod = "Money Order",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				notEligiblePaymentMethods = "PayPal",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "Verify the active payment method with the highest priority is applied to an order if the default payment method is linked to the order type of the order but is not enabled in the channel"
	@priority = 5
	test CanCheckoutWithDefaultPaymentMethodDisabledAndEligibleForOrderType {
		property portal.acceptance = "true";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Order Type 1 Description",
				orderTypeName = "Order Type 1");
		}

		task ("And given Money Order, Mercanet, and PayPal payment methods are active with priorities 1,2, and 3") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethodConfiguration : list "Money Order:1,Mercanet:2,PayPal:3") {
				var paymentMethod = StringUtil.extractFirst(${paymentMethodConfiguration}, ":");
				var priority = StringUtil.extractLast(${paymentMethodConfiguration}, ":");

				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod},
					priority = ${priority});
			}
		}

		task ("And given PayPal, Money Order, and Mercanet payment methods are linked to order type 1") {
			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "PayPal");

			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "Money Order");

			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "Mercanet");

			Refresh();
		}

		task ("And given PayPal is set as the default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "PayPal");
		}

		task ("And given the PayPal payment method is disabled") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.editPaymentMethod(
				active = "false",
				paymentMethod = "PayPal");
		}

		task ("When the buyer creates an order from pending orders with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer adds a product to the cart and starts the checkout process") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();
		}

		task ("Then at the Order Summary and Payment Method steps, the payment method should be the active payment method with the highest priority(Mercanet) and not the default payment method(PayPal)") {
			CommerceCheckout.initializersCheckout(
				defaultPaymentMethod = "Mercanet",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				notEligiblePaymentMethods = "PayPal",
				paymentMethod = "Mercanet",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "Verify the default payment method is applied to an order if the order type is linked to the default payment method"
	@priority = 5
	test CanCheckoutWithDefaultPaymentMethodEligibleForOrderType {
		property portal.acceptance = "true";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Order Type 1 Description",
				orderTypeName = "Order Type 1");
		}

		task ("And given Money Order, Mercanet, and PayPal payment methods are active with priorities 1,2, and 3") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethodConfiguration : list "Money Order:1,Mercanet:2,PayPal:3") {
				var paymentMethod = StringUtil.extractFirst(${paymentMethodConfiguration}, ":");
				var priority = StringUtil.extractLast(${paymentMethodConfiguration}, ":");

				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod},
					priority = ${priority});
			}
		}

		task ("And given Money Order, Mercanet, and PayPal payment methods are linked to order type 1") {
			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "PayPal");

			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "Money Order");

			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "Mercanet");

			Refresh();
		}

		task ("And given Money Order is set as the default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "Money Order");
		}

		task ("When the buyer creates an order from pending orders with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("And the buyer adds a product to the cart and starts the checkout process") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();
		}

		task ("Then at the Order Summary and Payment Method steps, the payment method should be the default payment method set for Commerce Account(Money Order)") {
			CommerceCheckout.initializersCheckout(
				defaultPaymentMethod = "Money Order",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "Verify the payment method with the highest priority is applied to an order if the default payment method is not linked to the order type of the Order"
	@priority = 3
	test CanCheckoutWithDefaultPaymentMethodIneligibleForOrderType {
		property portal.acceptance = "false";

		task ("Given 2 active order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Order Type 1 Description",
				orderTypeName = "Order Type 1");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Order Type 2 Description",
				orderTypeName = "Order Type 2");
		}

		task ("And given Paypal, Money Order and Mercanet payment methods are active with priorities 0,1, and 2") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethodConfiguration : list "PayPal:0,Money Order:1,Mercanet:2") {
				var paymentMethod = StringUtil.extractFirst(${paymentMethodConfiguration}, ":");
				var priority = StringUtil.extractLast(${paymentMethodConfiguration}, ":");

				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod},
					priority = ${priority});
			}
		}

		task ("And given Money Order and Mercanet are linked to Order Type 1 and PayPal is linked to Order Type 2") {
			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "Money Order");

			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 1",
				paymentMethod = "Mercanet");

			Refresh();

			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type 2",
				paymentMethod = "PayPal");

			Refresh();
		}

		task ("And given PayPal is set as the default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "PayPal");
		}

		task ("When the buyer creates an order from pending orders with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Order Type 1");
		}

		task ("And the buyer adds a product to the cart and starts the checkout process") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();
		}

		task ("Then at the Order Summary and Payment Method steps, the payment method should be the one with the highest priority(Mercanet) and not the default payment method(PayPal)") {
			CommerceCheckout.initializersCheckout(
				defaultPaymentMethod = "Mercanet",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				notEligiblePaymentMethods = "PayPal",
				paymentMethod = "Mercanet",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "Verify users can see the status of a default payment method linked to an account"
	@priority = 5
	test CanDeactivatePaymentMethodLinkedToAnAccount {
		property portal.acceptance = "true";

		task ("Given all payment methods are activated from Channels") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethod : list "Money Order,Mercanet,Authorize.Net,PayPal") {
				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod});
			}
		}

		task ("And given Money Order is set as the default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "Money Order");
		}

		task ("When the Money Order payment method is disabled") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.editPaymentMethod(
				active = "false",
				paymentMethod = "Money Order");
		}

		task ("And the user goes into the Channel Defaults tab inside the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("Then the the status of Payment Method on the Active column for Minium Portal is No") {
			AssertElementPresent(
				key_columnNumber = 1,
				key_productName = "Minium Portal",
				key_value = "Money Order",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");

			AssertElementPresent(
				key_columnNumber = 2,
				key_productName = "Minium Portal",
				key_value = "No",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}
	}

	@description = "Verify users can edit default payment method linked to an account"
	@priority = 5
	test CanEditDefaultPaymentMethod {
		property portal.acceptance = "true";

		task ("Given all payment methods are activated from Channels") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethod : list "Money Order,Mercanet,Authorize.Net,PayPal") {
				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod});
			}
		}

		task ("When the user goes into the Channel Defaults tab for an account in Minium account Management") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("And clicks the Edit button of the Minium Channel from Payment Methods section") {
			Click(
				key_firstColumnValue = "Minium Portal",
				key_secondColumnValue = "Use Priority Settings",
				key_table = "PaymentMethod",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("Then a list of active payment methods appears as sorted alphanumerically by localized name") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			for (var paymentMethod : list "Use Priority Settings,Authorize.Net,Mercanet,Money Order,PayPal") {
				AssertElementPresent(
					key_radioOption = ${paymentMethod},
					locator1 = "CommerceEntry#RADIO_BUTTON");
			}
		}

		task ("When the user selects a payment method and clicks save") {
			Click.clickAtNotVisible(
				key_radioOption = "Money Order",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Button.clickSave();

			IFrame.selectTopFrame();
		}

		task ("Then the Default Payment Method should be saved and listed correctly") {
			AssertElementPresent(
				key_columnNumber = 1,
				key_productName = "Minium Portal",
				key_value = "Money Order",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}

		task ("When the user clicks the Edit button to change the payment method a second time") {
			Click(
				key_firstColumnValue = "Minium Portal",
				key_secondColumnValue = "Money Order",
				key_table = "PaymentMethod",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then after choosing the option 'Use Priority Settings', it will be saved and listed correctly") {
			Click.clickAtNotVisible(
				key_radioOption = "Use Priority Settings",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Button.clickSave();

			IFrame.selectTopFrame();

			AssertElementPresent(
				key_columnNumber = 1,
				key_productName = "Minium Portal",
				key_value = "Use Priority Settings",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}
	}

	@description = "COMMERCE-11224 | Cannot view search bars in the data-sets in the account's channel defaults"
	@priority = 3
	test CannotViewSearchBarInTheAccountsChannelDefaults {
		property portal.acceptance = "false";

		task ("Given the admin navigates to the account entry (Commerce Account)") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");
		}

		task ("When the admin navigates to the Channel Defaults tab") {
			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");
		}

		task ("Then the search bar is removed from the data-sets") {
			AssertElementNotPresent(locator1 = "ObjectCustomViews#VIEW_BUILDER_SEARCH_BAR");
		}
	}

	@description = "Verify an account reverts to priority settings after an offline payment method that is set as default payment method for the account is removed"
	@priority = 3
	test CanRemoveOfflinePaymentSetAsDefaultPaymentMethod {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceChannelsDefaultPaymentMethods#RemoveOfflinePaymentLinkedAsDefaultPaymentMethod";

		task ("Given a new offline payment method") {
			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method");
		}

		task ("And given all payment methods are activated") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethod : list "Money Order,Mercanet,Authorize.Net,PayPal,Test Offline Payment Method") {
				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = ${paymentMethod});
			}
		}

		task ("And given the offline payment method is set as default payment method for the Commerce Account") {
			CommerceAccountChannelDefaults.setAccountChannelDefaults(
				accountName = "Commerce Account",
				channelName = "Minium Portal",
				defaultPaymentMethod = "Use Priority Settings",
				paymentMethod = "Test Offline Payment Method");
		}

		task ("When the user deletes the offline payment method") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Offline Payment Method Keys",
				configurationScope = "System Scope");

			SystemSettings.deleteConfigurationEntry(configurationEntry = "Test Offline Payment Method");

			AssertElementNotPresent(
				key_configurationEntry = "Test Offline Payment Method",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("And the user goes into the Channel Defaults tab inside the Account") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Commerce Account");
		}

		task ("Then the Default Payment Method should be 'Use Priority Settings'") {
			AssertElementPresent(
				key_columnNumber = 1,
				key_productName = "Minium Portal",
				key_value = "Use Priority Settings",
				locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_COLUMN_CONTENT");
		}
	}

}