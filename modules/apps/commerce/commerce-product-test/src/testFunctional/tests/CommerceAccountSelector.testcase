@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-5937. As a buyer, I want open Account Selector to close if I open the Global Search"
	@priority = "3"
	test AssertAccountSelectorIsClosedAfterGlobalSearchIsOpened {
		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		ApplicationsMenu.gotoSite(site = "Minium");

		Click(locator1 = "Button#ANGLE_DOWN");

		AssertElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_SHOW");

		Click(locator1 = "AppBuilder#SEARCH_BUTTON");

		AssertElementNotPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_SHOW");
	}

	@description = "COMMERCE-5938. As a buyer, I want open Account Selector to close if I open the mini-cart"
	@priority = "3"
	test AssertAccountSelectorIsClosedAfterMiniCartIsOpened {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		ApplicationsMenu.gotoSite(site = "Minium");

		Click(locator1 = "Button#ANGLE_DOWN");

		AssertElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_SHOW");

		Click(locator1 = "CommerceAccelerators#MINI_CART_BUTTON");

		AssertElementNotPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_SHOW");
	}

	@description = "COMMERCE-5925. As a buyer, I want the account I have currently selected to be highlighted in the account selector bar"
	@priority = "3"
	test AssertActiveAccountIsVisibleOnAccountSelectorBar {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertElementPresent(
			key_filterOption = "Commerce Account",
			locator1 = "AppBuilder#CHOOSE_APP_SEARCH_FILTER_BY_OPTION");
	}

	@description = "COMMERCE-5924. As a buyer, I want the account I have currently selected to be highlighted in the account selector dropdown"
	@priority = "3"
	test AssertActiveAccountIsVisibleOnAccountSelectorDropdown {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		AssertElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_MENU_SELECTED_ACCOUNT");
	}

	@description = "COMMERCE-9022. As a sales agent, I want to be able to cancel the in-flow account creation"
	@priority = "3"
	test CanCancelInFlowAccountCreation {
		task ("GIVEN a Minium site is created and the Catalog page is reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("AND the account selector is opened") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");
		}

		task ("AND the 'Create New Account' button is clicked") {
			Button.click(button = "Create New Account");

			SelectFrameTop();
		}

		task ("AND a modal shows up AND a name is typed") {
			PortletEntry.inputName(name = "${accountName}");
		}

		task ("AND the user clicks 'Cancel'") {
			Click(
				key_text = "Cancel",
				locator1 = "Button#ANY_SECONDARY");
		}

		task ("THEN the modal closes and the account is not created") {
			AssertElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_NO_ACCOUNTS_WERE_FOUND");

			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

			SelectFrameTop();

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			CommerceAcceleratorsInitializer.viewDisabledAddToCartButton(productName = "ABS Sensor");
		}
	}

	@description = "COMMERCE-9022. As a Sales Agent, I want to be able to select an account from the list (which is not the selected one), and have the selected account change to the newly selected account"
	@priority = "3"
	test CanChangeActiveInFlowAccountFromAccountsList {
		task ("WHEN a minium site is created and the catalog page is reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("AND two accounts are created via the Account Selector") {
			for (var accountNumber : list "1,2") {
				Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

				if (IsElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON")) {
					Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");
				}

				Button.click(button = "Create New Account");

				CommerceAcceleratorsInitializer.createNewAccountInFlow(accountName = "Commerce Account ${accountNumber}");
			}
		}

		task ("AND the last created account is selected") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_MENU_SELECTED_ACCOUNT",
				value1 = "Commerce Account 2");
		}

		task ("WHEN the user changes account") {
			Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");

			Click(
				key_accountName = "Commerce Account 1",
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");
		}

		task ("THEN the newly selected account appears in the Account Selectors bar") {
			AssertTextEquals(
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_MENU_SELECTED_ACCOUNT",
				value1 = "Commerce Account 1");
		}
	}

	@description = "COMMERCE-9022. As a Sales Agent, I want to be able to create a new Account from the account selector"
	@priority = "3"
	test CanCheckoutAfterInFlowAccountCreation {
		property portal.acceptance = "true";

		task ("GIVEN a Minium site created and the catalog page is reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("WHEN an account is in-flow created") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

			Button.click(button = "Create New Account");

			CommerceAcceleratorsInitializer.createNewAccountInFlow(accountName = "Commerce Account");
		}

		task ("AND a buyer user is associated with the account") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceNavigator.gotoEntry(entryName = "Commerce Account");

			CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
				accountName = "Commerce Account",
				emailAddress = "buyer@liferay.com",
				role = "Buyer",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			CommerceLogin.editPasswordCP(
				newPassword = "ttest",
				requirePasswordReset = "true",
				userScreenName = "buyeruser");
		}

		task ("AND the buyer user logs in and reaches the catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				newPassword = "test",
				password = "ttest",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = "2");

		CommerceCheckout.gotoCheckoutViaMiniCart();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "ABS Sensor",
			productQuantity = "2",
			productUnitPrice = "50",
			shippingMethod = "Standard");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
			value1 = "Success! Your order has been processed.");
	}

	@description = "COMMERCE-9022. As a Sales Agent, I want to be able to create a new Account from the account selector"
	@priority = "3"
	test CanCreateNewAccountInFlow {
		property portal.acceptance = "true";

		task ("Setup: Add an organization") {
			JSONOrganization.addOrganization(
				organizationName = "Minium",
				organizationSite = "false");
		}

		task ("GIVEN a minium site is created and the Catalog page reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("AND the account selector is opened") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");
		}

		task ("AND the "Create New Account" button is clicked and the modal shows up") {
			Button.click(button = "Create New Account");
		}

		task ("AND the user input at least the required field and saves") {
			CommerceAcceleratorsInitializer.createNewAccountInFlow(
				accountDescription = "Account Description",
				accountExternalReferenceCode = "EXTERNALREFCODE",
				accountName = "Commerce Account",
				accountOrganizationsList = "Minium");
		}

		task (" THEN the new account is created and the user is able to place an order") {
			AssertTextEquals(
				locator1 = "CommerceFrontStore#ACCOUNT_SELECTOR_SELECTED_ACCOUNT",
				value1 = "Commerce Account");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			AssertElementPresent(
				key_tableEntry = "Commerce Account",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");

			CommerceNavigator.gotoEntry(entryName = "Commerce Account");

			CommerceEntry.viewAccountManagementAcccountEntry(
				accountName = "Commerce Account",
				accountType = "Business",
				organizationsList = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			CommerceAcceleratorsInitializer.viewEnabledAddToCartButton(productName = "ABS Sensor");
		}
	}

	@description = "COMMERCE-9022. As a Buyer (without manage account permissions), I am not able to create an account"
	@priority = "3"
	test CannotCreateAccountInFlowWithoutPermissions {
		property portal.acceptance = "true";

		task ("GIVEN a Minium site created and the catalog page is reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("WHEN an account is in-flow created") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

			Button.click(button = "Create New Account");

			CommerceAcceleratorsInitializer.createNewAccountInFlow(accountName = "Commerce Account");
		}

		task ("AND a buyer user is associated with the account") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceNavigator.gotoEntry(entryName = "Commerce Account");

			CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
				accountName = "Commerce Account",
				emailAddress = "buyer@liferay.com",
				role = "Buyer",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			CommerceLogin.editPasswordCP(
				newPassword = "ttest",
				requirePasswordReset = "true",
				userScreenName = "buyeruser");
		}

		task ("AND the buyer user logs in and reaches the catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				newPassword = "test",
				password = "ttest",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("AND the user opens the account selector") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");
		}

		task ("THEN the buyer is not able to see the 'Create New Account' button") {
			AssertElementNotPresent(
				key_text = "Create New Account",
				locator1 = "Button#ANY");
		}
	}

	@description = "COMMERCE-9022. COMMERCE-9022. As a Sales Agent, I get an advice when I try to create an account without the required fields filled"
	@priority = "3"
	test CannotSaveInFlowAccountWithoutRequiredField {
		task ("GIVEN a minium site is created and the Catalog page reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("AND the account selector is opened") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");
		}

		task ("AND the 'Create New Account' button is clicked and the modal shows up") {
			Button.click(button = "Create New Account");

			SelectFrameTop();
		}

		task ("AND the user clicks 'Create'") {
			Button.click(button = "Create");
		}

		task ("THEN a message that asks to fill the required field(s) appear and when the user closes the modal the account has not been created") {
			AssertElementPresent(locator1 = "//div[@class='modal-content']/div/h1[text()='Create New Account']");

			Click(
				key_text = "Cancel",
				locator1 = "Button#ANY_SECONDARY");
		}
	}

	@description = "COMMERCE-9022. As a Sales Agent, I want to search for an account in the accounts list, and select it as active account"
	@priority = "3"
	test CanSearchForAnInFlowAccountAndSelectItAsActive {
		property portal.acceptance = "true";

		task ("WHEN a minium site is created and the catalog page is reached") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");
		}

		task ("AND two accounts are created via the Account Selector") {
			for (var accountNumber : list "First,Second") {
				Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

				if (IsElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON")) {
					Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");
				}

				Button.click(button = "Create New Account");

				CommerceAcceleratorsInitializer.createNewAccountInFlow(accountName = "${accountNumber} Account");
			}
		}

		task ("AND the user opens the Account Selector") {
			Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");
		}

		task ("AND the last created account is selected") {
			AssertTextEquals(
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_MENU_SELECTED_ACCOUNT",
				value1 = "Second Account");
		}

		task ("AND the user can see the list of the accounts in the Account Selector special section") {
			Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");

			for (var accountsList : list "First,Second") {
				AssertElementPresent(
					key_accountName = "${accountsList} Account",
					locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");
			}
		}

		task ("WHEN the user searches for a specific account, the search results shows the right one and it is selectable as current account") {
			Type(
				locator1 = "AppBuilder#INPUT_OBJECT_RENAME",
				value1 = "First");

			AssertElementPresent(
				key_accountName = "First Account",
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

			AssertElementNotPresent(
				key_accountName = "Second Account",
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

			Click(
				key_accountName = "First Account",
				locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

			AssertTextPresent(
				locator1 = "ContentDashboard#INFO_PANEL_TITLE",
				value1 = "First Account");
		}
	}

	@description = "COMMERCE-5927. As a buyer, I want to be able to select an account from the list (which is not the selected one), and have the selected account change to the newly selected account"
	@priority = "3"
	test ChangeActiveAccountFromAccountsList {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		Navigator.gotoBack();

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 2");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_MENU_SELECTED_ACCOUNT",
			value1 = "Commerce Account 1");

		Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");

		Click(
			key_accountName = "Commerce Account 2",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

		AssertVisible(
			key_filterOption = "Commerce Account 2",
			locator1 = "AppBuilder#CHOOSE_APP_SEARCH_FILTER_BY_OPTION");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_MENU_SELECTED_ACCOUNT",
			value1 = "Commerce Account 2");
	}

	@description = "COMMERCE-5929. As a buyer, I want to be able to select an order from the list (which is not the selected one), and have the selected order change to the newly selected order"
	@priority = "3"
	test ChangeActiveOrderFromOrdersList {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "test");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click(
			key_filterOption = "Add Order",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click(
			key_filterOption = "Add Order",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		ApplicationsMenu.gotoSite(site = "Minium");

		WaitForElementPresent(locator1 = "CommerceEntry#ACTIVE_ORDER_ID");

		var getFirstId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		Click(locator1 = "Button#ANGLE_DOWN");

		WaitForElementPresent(locator1 = "CommerceEntry#ORDER_ID_FROM_ACCOUNT_SELECTOR");

		var getSecondId = selenium.getText("CommerceEntry#ORDER_ID_FROM_ACCOUNT_SELECTOR");

		WaitForElementPresent(locator1 = "CommerceEntry#ORDER_ID_FROM_ACCOUNT_SELECTOR");

		Click(locator1 = "CommerceEntry#ORDER_ID_FROM_ACCOUNT_SELECTOR");

		AssertElementNotPresent(
			key_filterOption = "${getFirstId}",
			locator1 = "AppBuilder#CHOOSE_APP_SEARCH_FILTER_BY_OPTION");

		AssertElementPresent(
			key_filterOption = "${getSecondId}",
			locator1 = "AppBuilder#CHOOSE_APP_SEARCH_FILTER_BY_OPTION");

		Click(locator1 = "CommerceAccelerators#MINI_CART_BUTTON");

		AssertElementPresent(locator1 = "CommerceAccelerators#MINI_CART_EMPTY");
	}

	@description = "COMMERCE-5936. As a buyer, I want to be able to create a new order from the account selector dropdown's order list view, The created order should then be the selected order"
	@priority = "3"
	test CreateNewOrderFromAccountSelectorDropdown {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		Click(locator1 = "Button#ANGLE_DOWN");

		WaitForElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ORDER_ID");

		var getOrderId = selenium.getText("CommerceAccelerators#ACCOUNT_SELECTOR_ORDER_ID");

		Button.click(button = "Create New Order");

		AssertElementNotPresent(
			key_filterOption = "${getOrderId}",
			locator1 = "AppBuilder#CHOOSE_APP_SEARCH_FILTER_BY_OPTION");
	}

	@description = "COMMERCE-5956. As a buyer, I want to search for an account in the accounts list, and select it as active account"
	@priority = "3"
	test SearchForAnAccountAndSelectItAsActive {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "First Account");

		Navigator.gotoBack();

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Second Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");

		Type(
			locator1 = "AppBuilder#INPUT_OBJECT_RENAME",
			value1 = "Second");

		AssertElementPresent(
			key_accountName = "Second Account",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

		AssertElementNotPresent(
			key_accountName = "First Account",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

		Click(
			key_accountName = "Second Account",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

		AssertTextPresent(
			locator1 = "ContentDashboard#INFO_PANEL_TITLE",
			value1 = "Second Account");
	}

	@description = "COMMERCE-5957. As a buyer, I want to search for an order in the orders list, and select it as active order"
	@priority = "3"
	test SearchForAnOrderAndSelectItAsActive {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

		SelectFrameTop();

		var firstOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

		var secondOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		Type(
			locator1 = "CommerceEntry#SEARCH_ORDER_ID",
			value1 = "${firstOrderId}");

		Click(
			key_entryName = "${firstOrderId}",
			locator1 = "CommerceEntry#SEARCH_ORDER_ID_RESULT");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		AssertTextPresent(
			locator1 = "CommerceEntry#ORDER_ID_FIRST_RESULT",
			value1 = "${firstOrderId}");
	}

	@description = "COMMERCE-5926. As a buyer, I want to be able to see all of the accounts I am a member of in the account selector dropdown"
	@priority = "3"
	test ViewAccountSelectorDropdownAccountsList {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		Navigator.gotoBack();

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 2");

		Navigator.gotoBack();

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 3");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN_BACK_BUTTON");

		AssertElementPresent(
			key_accountName = "Commerce Account 1",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

		AssertElementPresent(
			key_accountName = "Commerce Account 2",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");

		AssertElementPresent(
			key_accountName = "Commerce Account 3",
			locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_ACCOUNT_LIST_ITEM");
	}

	@description = "COMMERCE-5928. As a buyer, I want to be able to switch the account selector dropdown's view from the account list to the order list and I want to be able to see all the orders for the account I have selected"
	@priority = "3"
	test ViewAccountSelectorDropdownOrdersList {
		property portal.acceptance = "Intern Test";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account 1");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Button.click(button = "Add Order");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Button.click(button = "Add Order");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		Click.clickNoMouseOver(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		AssertElementPresent(
			key_rowNumber = "1",
			locator1 = "AppBuilder#VALIDATE_LIST_TITLE_NAME_AT_ROW");

		AssertElementPresent(
			key_rowNumber = "2",
			locator1 = "AppBuilder#VALIDATE_LIST_TITLE_NAME_AT_ROW");
	}

}