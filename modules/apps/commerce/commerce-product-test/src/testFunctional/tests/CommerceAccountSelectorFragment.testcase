@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		task ("A Minium site with Money Order enabled") {
			CommerceConfiguration.commerceSetUp(
				minium = "true",
				moneyOrder = "true");
		}

		task ("2 accounts with a buyer user are created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 1",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				createNewAccount = "true",
				existingUser = "true",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the current site theme is changed into Classic Theme") {
			PagesAdmin.openPagesAdmin(siteURLKey = "minium");

			PagesAdmin.changeSiteCurrentTheme(themeName = "Classic");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-10947 | I want mini-cart to automatically update when the user changes the selected account/order"
	@priority = 5
	test CanMiniCartFragmentUpdateFollowingAccountSelectorChanges {
		property portal.acceptance = "true";

		task ("Given an order is created for Commerce Account 1(U-Joint x 3)") {
			var firstAccountOrderId = CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Commerce Account 1",
				orderItems = "MIN55861:3",
				orderStatus = 2,
				paymentMethod = "money-order",
				paymentStatus = 2);
		}

		task ("And two orders are created for Commerce Account 2(ABS Sensor x 2, Mount x 5)") {
			var secondAccountOrderIds = ListUtil.newList();

			for (var orderItem : list "MIN93015:2,MIN55857:5") {
				var orderId = CommerceJSONOrdersAPI._addCommerceOrder(
					accountEntryName = "Commerce Account 2",
					orderItems = ${orderItem},
					orderStatus = 2,
					paymentMethod = "money-order",
					paymentStatus = 2);

				ListUtil.add(${secondAccountOrderIds}, ${orderId});
			}
		}

		task ("And a new content page with the Account Selector and the Mini Cart fragments deployed is created") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Mini Cart",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Mini Cart",
				siteName = "Minium");

			PageEditor.addFragment(
				collectionName = "Cart",
				fragmentName = "Mini Cart");

			PageEditor.addFragment(
				collectionName = "Account",
				fragmentName = "Account Selector",
				targetFragmentName = "Mini Cart");

			PageEditor.publish();
		}

		task ("When the buyer navigates to the page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceEntry.gotoMenuTab(menuTab = "Mini Cart");
		}

		task ("Then on Commerce Account 1's order, the mini cart is showing the correct order items(U-Joint x 3)") {
			AssertTextEquals(
				locator1 = "CommerceFrontStore#ACCOUNT_SELECTOR_SELECTED_ACCOUNT",
				value1 = "Commerce Account 1");

			AssertTextEquals(
				locator1 = "CommerceEntry#ACTIVE_ORDER_ID",
				value1 = ${firstAccountOrderId});

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "U-Joint",
				cartItemPriceValue = "24.00",
				cartItemQuantity = 3,
				cartItemSku = "MIN55861");

			Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");
		}

		task ("When the buyer changes the selected account to the second account") {
			CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Commerce Account 2");

			AssertTextEquals(
				locator1 = "CommerceFrontStore#ACCOUNT_SELECTOR_SELECTED_ACCOUNT",
				value1 = "Commerce Account 2");

			var orderId = ListUtil.get(${secondAccountOrderIds}, 1);

			AssertTextEquals(
				locator1 = "CommerceEntry#ACTIVE_ORDER_ID",
				value1 = ${orderId});
		}

		task ("Then the mini-cart shows the order items for the second account's first order(Mount x 5)") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "Mount",
				cartItemPriceValue = "3.00",
				cartItemQuantity = 5,
				cartItemSku = "MIN55857");

			Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");
		}

		task ("When the buyer changes the active order") {
			var orderId = ListUtil.get(${secondAccountOrderIds}, 0);

			CommerceAccountSelector.selectOrderFromOrdersList(orderId = ${orderId});
		}

		task ("And the user navigates back to the page") {
			CommerceEntry.gotoMenuTab(menuTab = "Mini Cart");

			AssertTextEquals(
				locator1 = "CommerceFrontStore#ACCOUNT_SELECTOR_SELECTED_ACCOUNT",
				value1 = "Commerce Account 2");

			AssertTextEquals(
				locator1 = "CommerceEntry#ACTIVE_ORDER_ID",
				value1 = ${orderId});
		}

		task ("Then the mini-cart shows the order items for the second account's second order(ABS Sensor x 2)") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 2,
				cartItemSku = "MIN93015");
		}
	}

	@description = "COMMERCE-10946 | I want to be able to switch between accounts using the Account Selector fragment"
	@priority = 5
	test CanUseAccountSelectorFragment {
		property portal.acceptance = "true";

		task ("Given a public page is added with the Account Selector fragment") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Account Selector",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Account Selector",
				siteName = "Minium");

			PageEditor.addFragment(
				collectionName = "Account",
				fragmentName = "Account Selector");

			PageEditor.publish();
		}

		task ("When the buyer navigates to the Account Selector page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceEntry.gotoMenuTab(menuTab = "Account Selector");
		}

		task ("Then the user is able to change the active account") {
			AssertTextEquals(
				locator1 = "CommerceFrontStore#ACCOUNT_SELECTOR_SELECTED_ACCOUNT",
				value1 = "Commerce Account 1");

			CommerceAccountSelector.viewAccountSelectorAccountsList(accounts = "Commerce Account 1,Commerce Account 2");

			CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Commerce Account 2");

			AssertTextEquals(
				locator1 = "CommerceFrontStore#ACCOUNT_SELECTOR_SELECTED_ACCOUNT",
				value1 = "Commerce Account 2");
		}

		task ("And the user is able to create new orders") {
			Button.click(button = "Create New Order");

			WaitForVisible(locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_ID");

			var orderId = selenium.getText("CommerceOrders#PENDING_ORDERS_ORDER_ID");

			CommerceEntry.gotoMenuTab(menuTab = "Account Selector");

			AssertTextEquals(
				locator1 = "CommerceEntry#ACTIVE_ORDER_ID",
				value1 = ${orderId});
		}
	}

}