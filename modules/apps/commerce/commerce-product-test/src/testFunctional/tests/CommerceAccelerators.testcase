@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "quarantine";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		Uncheck(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_REQUIRE_STRANGERS_TO_VERIFY_THEIR_EMAIL_ADDRESS_CHECKBOX");

		PortletEntry.save();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			CommerceConfiguration.commerceAdminTearDown(userScreenName = "buyer");

			CommerceConfiguration.commerceInitializersTearDown();

			User.logoutPG();
		}
	}

	test DeactivateCommerceAccount {
		property portal.acceptance = "quarantine";
		property test.name.skip.portal.instance = "CommerceAccelerators#DeactivateCommerceAccount";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		Click(
			key_navUnderline = "Members",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			emailAddress = "buyer@liferay.com",
			role = "Buyer");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "ttest",
			resetPassword = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		CommerceAcceleratorsInitializer.viewMiniumSelectedAccount(selectedAccount = "Commerce Account");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		CommerceAcceleratorsInitializer.viewEnabledAddToCartButton(productName = "ABS Sensor");

		CommerceLogin.miniumLogoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.deactivateCommerceAccountViaFront(accountName = "Commerce Account");

		CommerceLogin.miniumLogoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		Click(locator1 = "CommerceAccelerators#ACCOUNT_SELECTOR_DROPDOWN");

		AssertElementPresent(locator1 = "CommerceAccelerators#ACCOUNT_SWITCHER_EMPTY_TABLE");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		CommerceAcceleratorsInitializer.viewDisabledAddToCartButton(productName = "ABS Sensor");

		CommerceAcceleratorsInitializer.viewAllAccountsFromAccountSelector();

		AssertElementNotPresent(locator1 = "CommerceAccelerators#ACCOUNT_MANAGEMENT_ROLE_TABLE_NAME");
	}

	@description = "This is for COMMERCE-2658. Can be Drag and Drop fragments on a Minium site page."
	@priority = 4
	test FragmentsCanBeDragAndDroppedToMiniumSitePage {
		property test.name.skip.portal.instance = "CommerceAccelerators#FragmentsCanBeDragAndDroppedToMiniumSitePage";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		JSONLayout.addPublicLayout(
			groupName = "Minium",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Minium");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading Example 1");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML",
			targetFragmentName = "Heading");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Minium");

		var position = 1;

		AssertTextEquals(
			fragmentName = "heading",
			id = "element-text",
			index = ${position},
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
			value1 = "Heading Example 1");

		AssertTextEquals(
			fragmentName = "html",
			id = "element-html",
			index = ${position},
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
			value1 = "HTML Example A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
	}

	test InitializeNewMiniumSite {
		property environment.acceptance = "quarantine";
		property portal.acceptance = "quarantine";
		property test.name.skip.portal.instance = "CommerceAccelerators#InitializeNewMiniumSite";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceEntry.viewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Minium Portal",
			channelSiteName = "Minium",
			channelType = "Site",
			commerceSiteType = "B2B");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceNavigator.gotoEntry(entryName = "Minium");

		CommerceEntry.viewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.viewPaginationResults(results = "Showing 1 to 10 of 50 entries.");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CommerceEntry.viewOptionsEntry(optionName = "Package Quantity");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceEntry.viewSpecificationLabelsEntries(specificationLabelsEntries = "Quantity,Dimensions,Fit,Warranty,Length,Weight,Height,Material,Width");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

		CommerceEntry.viewSpecificationGroupsEntries(specificationGroupsEntries = "Warranty,Fit,Dimensions,Quantity,Material");
	}

	test InitializeNewSpeedwellSite {
		property environment.acceptance = "quarantine";
		property portal.acceptance = "quarantine";
		property test.name.skip.portal.instance = "CommerceAccelerators#InitializeNewSpeedwellSite";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceEntry.viewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Speedwell Portal",
			channelSiteName = "Speedwell",
			channelType = "Site",
			commerceSiteType = "B2C");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceNavigator.gotoEntry(entryName = "Speedwell");

		CommerceEntry.viewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Speedwell");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.viewPaginationResults(results = "Showing 1 to 10 of 50 entries.");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CommerceEntry.viewOptionsEntry(optionName = "Package Quantity");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceEntry.viewSpecificationLabelsEntries(specificationLabelsEntries = "Quantity,Material,Fit,Dimensions,Weight,Width,Warranty,Length,Height");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

		CommerceEntry.viewSpecificationGroupsEntries(specificationGroupsEntries = "Quantity,Fit,Material,Dimensions,Warranty");
	}

	test MiniumSiteFullFlow {
		property portal.acceptance = "quarantine";
		property test.name.skip.portal.instance = "CommerceAccelerators#MiniumSiteFullFlow";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoTableListEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		Click(
			key_navUnderline = "Members",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			emailAddress = "buyer@liferay.com",
			role = "Buyer");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "ttest",
			resetPassword = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 2);

		Pause(locator1 = 5000);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Pause(locator1 = 3000);

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "ABS Sensor",
			productQuantity = 2,
			productUnitPrice = 50,
			shippingMethod = "Standard");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 2);

		CommerceLogin.miniumLogoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

		CommerceAcceleratorsInitializer.reviewOrder(
			orderAuthor = "buyer@liferay.com",
			productName = "ABS Sensor",
			productPrice = "100.00",
			productQuantity = 2,
			productSKU = "MIN93015",
			productUnitPrice = "50.00");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		CommerceAcceleratorsInitializer.reviewOrder(
			orderAuthor = "buyer@liferay.com",
			productName = "ABS Sensor",
			productPrice = "100.00",
			productQuantity = 2,
			productSKU = "MIN93015",
			productUnitPrice = "50.00");

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Open");

		CommerceOrders.viewOrdersEntry(
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = 2,
			productSKU = "MIN93015",
			productTotalPrice = "100.00");

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.viewOrdersEntry(
			addressAddress = "Test Address",
			addressCity = "Test City",
			addressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = 2,
			productSKU = "MIN93015",
			productTotalPrice = "100.00");
	}

	test SpeedwellSiteFullFlow {
		property portal.acceptance = "quarantine";
		property test.name.skip.portal.instance = "CommerceAccelerators#SpeedwellSiteFullFlow";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		User.editUserSiteCP(
			siteName = "Speedwell",
			userScreenName = "buyer");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellAccountDropdownItem(dropdownItem = "My Account");

		CommerceNavigator.gotoSpeedwellDashboardItem(dashboardItem = "Login & Security");

		CommerceAcceleratorsInitializer.viewSpeedwellAccount(
			userEmailAddress = "test@liferay.com",
			userFirstName = "Test",
			userLastName = "Test",
			userScreenName = "test");

		CommerceLogin.speedwellLogout();

		CommerceLogin.speedwellLogin(
			password = "ttest",
			resetPassword = "test",
			urlAppend = "web/speedwell",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 2);

		Pause(locator1 = 5000);

		Refresh();

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Pause(locator1 = 3000);

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "ABS Sensor",
			productQuantity = 2,
			productUnitPrice = 50,
			shippingMethod = "Standard");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = 2);

		CommerceLogin.speedwellLogout();

		CommerceLogin.speedwellLogin(
			password = "test",
			urlAppend = "web/speedwell",
			userEmailAddress = "test@liferay.com");

		Refresh();

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Open");

		CommerceOrders.viewOrdersEntry(
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = 2,
			productSKU = "SPEED93015",
			productTotalPrice = "100.00");

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.viewOrdersEntry(
			addressAddress = "Test Address",
			addressCity = "Test City",
			addressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = 2,
			productSKU = "SPEED93015",
			productTotalPrice = "100.00");
	}

}