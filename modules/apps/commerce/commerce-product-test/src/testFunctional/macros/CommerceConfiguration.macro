definition {

	macro commerceAdminTearDown {
		var emptyCount = 0;

		Navigator.openURL();

		CommerceJSONShipmentsAPI._deleteAllCommerceShipments();

		var shipmentsCount = CommerceJSONShipmentsAPI._getCommerceShipmentsCount();

		TestUtils.assertEquals(
			actual = ${shipmentsCount},
			expected = ${emptyCount});

		JSONUser.tearDownNonAdminUsers();

		CommerceJSONAccountsAPI._deleteAllCommerceAccounts();

		var accountsCount = CommerceJSONAccountsAPI._getCommerceAccountsCount();

		TestUtils.assertEquals(
			actual = ${accountsCount},
			expected = ${emptyCount});

		CommerceJSONAccountGroupsAPI._deleteAllCommerceAccountGroups();

		var accountGroupsCount = CommerceJSONAccountGroupsAPI._getCommerceAccountGroupsCount();

		TestUtils.assertEquals(
			actual = ${accountGroupsCount},
			expected = ${emptyCount});

		CommerceJSONOrganizationsAPI._deleteAllOrganizations();

		var organizationsCount = CommerceJSONOrganizationsAPI._getOrganizationsCount();

		TestUtils.assertEquals(
			actual = ${organizationsCount},
			expected = ${emptyCount});

		CommerceJSONProductsAPI._deleteAllCommerceProducts();

		var productsCount = CommerceJSONProductsAPI._getCommerceProductsCount();

		TestUtils.assertEquals(
			actual = ${productsCount},
			expected = ${emptyCount});

		CommerceJSONOptionsAPI._deleteAllCommerceOptions();

		var optionsCount = CommerceJSONOptionsAPI._getCommerceOptionsCount();

		TestUtils.assertEquals(
			actual = ${optionsCount},
			expected = ${emptyCount});

		CommerceJSONSpecificationGroupsAPI._deleteAllCommerceSpecificationGroups();

		var specificationGroupsCount = CommerceJSONSpecificationGroupsAPI._getCommerceSpecificationGroupsCount();

		TestUtils.assertEquals(
			actual = ${specificationGroupsCount},
			expected = ${emptyCount});

		CommerceJSONSpecificationsAPI._deleteAllCommerceSpecifications();

		var specificationsCount = CommerceJSONSpecificationsAPI._getCommerceSpecificationsCount();

		TestUtils.assertEquals(
			actual = ${specificationsCount},
			expected = ${emptyCount});

		CommerceJSONChannelsAPI._deleteAllCommerceChannels();

		var channelsCount = CommerceJSONChannelsAPI._getCommerceChannelsCount();

		TestUtils.assertEquals(
			actual = ${channelsCount},
			expected = ${emptyCount});

		CommerceJSONCatalogsAPI._deleteAllNoSystemCommerceCatalogs();

		var noSystemCatalogIds = CommerceJSONCatalogsAPI._getCommerceNoSystemCatalogIds();

		TestUtils.assertEquals(
			actual = ${noSystemCatalogIds},
			expected = "");

		CommerceJSONPriceListsAndPromotionsAPI._deleteAllNoMasterPriceListsAndPromotions();

		var priceListAndPromotionIds = CommerceJSONPriceListsAndPromotionsAPI._getCommerceNoMasterPriceListsAndPromotions();

		TestUtils.assertEquals(
			actual = ${priceListAndPromotionIds},
			expected = "");

		CommerceJSONDiscountsAPI._deleteAllCommerceDiscounts();

		var discountsCount = CommerceJSONDiscountsAPI._getCommerceDiscountsCount();

		TestUtils.assertEquals(
			actual = ${discountsCount},
			expected = ${emptyCount});

		CommerceJSONAvailableEstimatesAPI._deleteCommerceAvailableEstimates();

		var availableEstimatesCount = CommerceJSONAvailableEstimatesAPI._getAvailableEstimatesCount();

		TestUtils.assertEquals(
			actual = ${availableEstimatesCount},
			expected = ${emptyCount});

		CommerceJSONMeasurementUnitsAPI._deleteCommerceMeasurementUnits();

		var availableMeasurementUnits = CommerceJSONMeasurementUnitsAPI._getCommerceAvailableMeasurementUnitsCount();

		TestUtils.assertEquals(
			actual = ${availableMeasurementUnits},
			expected = ${emptyCount});

		CommerceJSONTaxCategoriesAPI._deleteCommerceTaxCategories();

		var commerceTaxCategoriesIds = CommerceJSONTaxCategoriesAPI._getCommereTaxCategoriesCount();

		TestUtils.assertEquals(
			actual = ${commerceTaxCategoriesIds},
			expected = ${emptyCount});

		CommerceJSONWarehousesAndInventoriesAPI._deleteAllWarehouseItems();

		var warehousesCount = CommerceJSONWarehousesAndInventoriesAPI._getCommerceWarehousesCount();

		TestUtils.assertEquals(
			actual = ${warehousesCount},
			expected = ${emptyCount});

		CommerceJSONTermsAndConditionsAPI._deleteAllCommerceTermsAndConditions();

		var commerceTermsAndConditionsCount = CommerceJSONTermsAndConditionsAPI._getCommerceTermsAndConditionsCount();

		TestUtils.assertEquals(
			actual = ${commerceTermsAndConditionsCount},
			expected = ${emptyCount});

		CommerceConfiguration.commerceInitializersTearDown();
	}

	macro commerceInitializersTearDown {
		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		CommerceJSONSitesAPI._deleteCommerceSites();
	}

	macro commerceSetUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		if (isSet(storeFront)) {
			CommerceConfiguration.commerceStoreFrontSetUp();
		}

		if (isSet(minium)) {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			if (isSet(moneyOrder) && (${moneyOrder} == "true")) {
				CommerceChannels.openChannelsAdmin();

				CommerceNavigator.gotoEntry(entryName = "Minium Portal");

				CommerceChannels.editPaymentMethod(
					active = "true",
					paymentMethod = "Money Order");
			}
		}
	}

	macro commerceStoreFrontSetUp {
		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Health Check");

		for (var buttonRowName : list "Service Access Policy,Commerce Countries,Commerce Currencies,Commerce Product Measurement Units,Account Roles,Catalog Base Price Lists/Promotions") {
			if (!(IsElementPresent(key_buttonRowName = ${buttonRowName}, key_buttonStatus = "disabled", locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME"))) {
				Click(
					key_buttonRowName = ${buttonRowName},
					key_buttonStatus = "",
					locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

				WaitForElementPresent(
					key_value = ${buttonRowName},
					locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");
			}
		}

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewChannelsEntry(
			channelCurrency = "US Dollar",
			channelName = "Test Channel",
			channelType = "Site",
			siteName = "Guest");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Click(
			key_menuTab = "General",
			locator1 = "CommerceEntry#MENU_TAB");

		for (var fixIssueButtonName : list "Product Detail,Product Compare,Commerce Cart,Checkout") {
			if (IsElementPresent(key_fixIssueButtonName = ${fixIssueButtonName}, locator1 = "CommerceEntry#FIX_ISSUE_BUTTON")) {
				Click(
					key_fixIssueButtonName = ${fixIssueButtonName},
					locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

				Alert.viewSuccessMessage();
			}
		}
	}

	macro commerceTearDown {
		CommerceJSONOrdersAPI._deleteAllCommerceOrdersAndCheck();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			if (IsElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE")) {
				User.logoutPG();
			}

			User.firstLoginPG();

			CommerceConfiguration.commerceAdminTearDown();

			if (isSet(doLogout)) {
				User.logoutPG();
			}
		}
	}

	@description = "Create a Content Page to be used as Catalog page"
	macro setUpCatalogPage {
		var leftColumnWidgets = "Search Bar,Search Options";
		var rightColumnWidgets = "Sort,Search Results";

		ContentPages.addPage(pageName = ${pageName});

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid");

		PageEditor.editLayoutGrid(
			columnCount = 2,
			panel = "General");

		PageEditor.clickConfigurableField(fragmentName = "Grid");

		DragAndDrop.dragAndDrop(
			key_position = 2,
			locator1 = "PageEditor#GRID_COLUMN_RESIZER",
			value1 = "-100,0");

		if (isSet(facets)) {
			for (var facetName : list ${facets}) {
				var leftColumnWidgets = "${leftColumnWidgets},${facetName} Facet";
			}
		}

		for (var widgetName : list ${leftColumnWidgets}) {
			PageEditor.addElementToColumn(
				columnNumber = 1,
				navTab = "Widgets",
				portletName = ${widgetName});
		}

		for (var widgetName : list ${rightColumnWidgets}) {
			PageEditor.addElementToColumn(
				columnNumber = 2,
				navTab = "Widgets",
				portletName = ${widgetName},
				position = 1);
		}

		SearchPortlets.configureSearchBarWidget(searchScope = "Everything");

		SearchPortlets.configureSearchOptions(allowEmptySearches = "true");

		PageEditor.publish();
	}

}