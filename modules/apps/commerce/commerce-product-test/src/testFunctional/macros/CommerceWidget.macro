definition {

	macro addAccountAndChildToOrganization {
		Navigator.openSitePage(
			pageName = ${pageName},
			siteName = ${siteName});

		Click(locator1 = "Button#EXPAND");

		Click(
			key_nodeName = ${key_nodeName},
			locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");

		DragAndDrop.dragAndDropPortletToPortletNoError(
			key_nodeDestination = ${key_nodeDestination},
			key_nodeOrigin = ${key_nodeOrigin},
			locator1 = "CommerceOrganizationManagementWidget#NODE_ORIGIN",
			locator2 = "CommerceOrganizationManagementWidget#NODE_DESTINATION",
			value1 = "Commerce Account");

		AssertConfirm(value1 = "Commerce Account will be moved into Organization 1.");

		DragAndDrop.dragAndDropPortletToPortletNoError(
			key_nodeDestination = "Organization 1",
			key_nodeOrigin = "Child Org 1",
			locator1 = "CommerceOrganizationManagementWidget#NODE_ORIGIN",
			locator2 = "CommerceOrganizationManagementWidget#NODE_DESTINATION",
			value1 = "Child Org 1");

		AssertConfirm(value1 = "Child Org 1 will be moved into Organization 1.");
	}

	macro addAccountViaOrganizationManagementWidget {
		Click.clickAtNotVisible(
			key_radioOption = ${key_radioOption},
			locator1 = "CommerceEntry#RADIO_BUTTON");

		Type(
			locator1 = "TextInput#NAME",
			value1 = ${value});

		Button.clickSave();
	}

	macro addRootCategory {
		var key_categoryName = ${categoryName};

		Type(
			key_vocabularyName = ${vocabularyName},
			locator1 = "AssetCategorization#CATEGORIES_FIELD",
			value1 = ${categoryName});

		Click.mouseDownMouseUp(locator1 = "AssetCategorization#CATEGORY_AUTOCOMPLETE_SPECIFIC");

		AssertElementPresent(
			locator1 = "CommerceWidget#TAG_FACET_LABEL_LAYOUT",
			tagName = ${categoryName});
	}

	macro addUserViaOrganizationManagementWidget {
		Type(
			locator1 = "CommerceOrganizationManagementWidget#INVITE_EMAIL_INPUT",
			value1 = ${value});

		Click(
			key_roleOption = ${key_roleOption},
			locator1 = "CommerceOrganizationManagementWidget#SELECT_ROLE");

		Button.clickSave();
	}

	macro assertOptionFacetsCount {
		var optionName = ${optionName};

		var javaScriptCountElement = '''
		
		const stringToMatch = "${optionName}";

		return document.querySelectorAll(`[data-qa-id='${stringToMatch}'] li`).length.toString();

		''';

		var count = selenium.getEval(${javaScriptCountElement});

		return ${count};

		echo("THE NUMBER OF FACETED LABELS IS ${count}");

		if (${count} != ${expectedLabels}) {
			fail("Labels number is not correct");
		}
	}

	macro assertOrganizationManagementWigetTitlePresent {
		AssertElementPresent(
			key_nodeName = ${key_nodeName},
			locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
	}

	macro assertSpecificationPanel2FacetsCount {
		var specificationGroup = ${specificationGroup};

		var javaScriptCountElement = '''

		const stringToMatch = "${specificationGroup}";

		return document.querySelectorAll(`[data-qa-id='${stringToMatch}'] li`).length.toString();

		''';

		var count = selenium.getEval(${javaScriptCountElement});

		return ${count};

		echo("THE NUMBER OF FACETED LABELS IS ${count}");

		if (${count} != ${expectedLabels}) {
			fail("Labels number is not correct");
		}
	}

	macro associateAccountWithOrganization {
		Click.clickAtNotVisible(
			key_radioOption = ${key_radioOption},
			locator1 = "CommerceEntry#RADIO_BUTTON");

		Type(
			locator1 = "CommerceOrganizationManagementWidget#SEARCH_ACCOUNT_INPUT",
			value1 = ${value});

		KeyPress(
			locator1 = "CommerceOrganizationManagementWidget#SEARCH_ACCOUNT_INPUT",
			value1 = "\ENTER");

		Button.clickSave();
	}

	macro canCreateChildOrganization {
		Type(
			locator1 = "TextInput#NAME",
			value1 = ${value});

		Button.clickSave();
	}

	macro canDragAndDropOrganizaitionAndChildOrganization {
		Click(locator1 = "Button#EXPAND");

		Click(
			key_nodeName = ${key_nodeName},
			locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");

		DragAndDrop.dragAndDropPortletToPortletNoError(
			key_nodeDestination = ${key_nodeDestination},
			key_nodeOrigin = ${key_nodeOrigin},
			locator1 = "CommerceOrganizationManagementWidget#NODE_ORIGIN",
			locator2 = "CommerceOrganizationManagementWidget#NODE_DESTINATION",
			value1 = ${key_nodeOrigin});

		AssertConfirm(value1 = "${key_nodeOrigin} will be moved into ${key_nodeDestination}.");

		DragAndDrop.dragAndDropPortletToPortletNoError(
			key_nodeDestination = "Organization 1",
			key_nodeOrigin = ${key_nodeChild},
			locator1 = "CommerceOrganizationManagementWidget#NODE_ORIGIN",
			locator2 = "CommerceOrganizationManagementWidget#NODE_DESTINATION",
			value1 = ${key_nodeChild});

		AssertConfirm(value1 = "${key_nodeChild} will be moved into ${key_nodeDestination}.");

		Refresh();
	}

	macro deleteFilterEntry {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Configuration");

		WaitForLiferayEvent.initializeLiferayEventLog();

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#CONFIGURATION");

		Navigator.gotoNavTab(navTab = "Product Selection");

		AssertChecked(
			locator1 = "Radio#ANY",
			radioLabel = "Dynamic");

		CommerceUtilities.expandField(accordionTitle = "filter");

		Click.mouseOverClick(
			key_button = "delete",
			locator1 = "CommerceWidget#PRODUCT_PUBLISHER_ADD_REMOVE_FILTER_BUTTON");

		Button.click(button = "Save");

		Alert.viewSuccessMessage();

		IFrame.closeFrame();
	}

	macro gotoSVGNode {
		Click(locator1 = "Button#EXPAND");

		Click(
			key_nodeName = ${key_nodeName},
			locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");

		Click(locator1 = "CommerceOrganizationManagementWidget#PLUS_BUTTON");

		Click(
			key_orgType = ${key_orgType},
			locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");
	}

	macro openOrganizationWidget {
		Navigator.openSitePage(
			pageName = "Organization Management Widget Page",
			siteName = "Minium");

		Click(locator1 = "Button#EXPAND");
	}

	macro productPublisherAddFilter {
		CommerceUtilities.expandField(accordionTitle = "filter");

		Click(
			key_button = "add",
			locator1 = "CommerceWidget#PRODUCT_PUBLISHER_ADD_REMOVE_FILTER_BUTTON");

		if (isSet(optionQuery)) {
			Select(
				key_title = "Query Contains",
				locator1 = "CalendarLookAndFeelConfiguration#SELECT_BORDER_WIDTH_COLUMN",
				value1 = ${optionQuery});
		}

		if (isSet(optionAndOperator)) {
			Select(
				key_title = "And Operator",
				locator1 = "CalendarLookAndFeelConfiguration#SELECT_BORDER_WIDTH_COLUMN",
				value1 = ${optionAndOperator});
		}

		if (isSet(filterType)) {
			Select(
				key_fieldName = "queryName0",
				locator1 = "PRMMDFRequest#SELECT",
				value1 = ${filterType});

			Click(
				key_button = "Select",
				locator1 = "CommerceWidget#PRODUCT_PUBLISHER_FILTER_ADD_SELECT_BUTTON");

			SelectFrameTop();

			CommerceWidget.setFilterItems(
				categories = ${categories},
				filterTitle = ${filterType},
				tags = ${filterEntries});
		}

		Button.click(button = "Save");

		Alert.viewSuccessMessage();

		IFrame.closeFrame();
	}

	macro removeChildOrganization {
		Click(locator1 = "Button#EXPAND");

		Click(
			key_nodeName = ${key_nodeName},
			locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");

		Click(
			key_nodeName = ${key_nodeChild},
			locator1 = "CommerceOrganizationManagementWidget#VERTICAL_ELLIPSIS");

		ClickNoError(
			key_menuItem = "Remove",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertConfirm(value1 = "${key_nodeChild} will be removed from ${key_nodeName}.");

		Refresh();

		Click(locator1 = "Button#EXPAND");
	}

	macro setFilterItems {
		SelectFrame.selectFrameNoLoading(
			key_title = ${filterTitle},
			locator1 = "IFrame#MODAL_ANY");

		if (${filterTitle} == "Tags") {
			for (var tag : list ${tags}) {
				Click(
					key_columnName = "name",
					key_tableEntry = ${tag},
					locator1 = "LexiconTable#TABLE_ENTRY_INFO_CHECKBOX");
			}

			SelectFrameTop();

			Button.click(button = "Done");
		}
		else if (${filterTitle} == "Categories") {
			for (var category : list ${categories}) {
				Click(
					key_nodeName = ${key_card},
					locator1 = "Treeview#NODE_ITEM");
			}

			SelectFrameTop();

			Button.click(button = "Add");
		}

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#CONFIGURATION");
	}

	macro updateFacetConfiguration {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Configuration");

		WaitForLiferayEvent.initializeLiferayEventLog();

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		if (isSet(displayTemplate)) {
			Select(
				key_fieldLabel = "Display Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${displayTemplate});
		}

		if (isSet(parameterName)) {
			FormFields.editText(
				fieldName = "parameterName",
				fieldValue = ${parameterName});
		}

		if (isSet(maxTerms)) {
			FormFields.editText(
				fieldName = "maxTerms",
				fieldValue = ${maxTerms});
		}

		if (isSet(frequencyThreshold)) {
			FormFields.editText(
				fieldName = "frequencyThreshold",
				fieldValue = ${frequencyThreshold});
		}

		if (isSet(rangesArray)) {
			FormFields.editTextMultiline(
				fieldName = "rangesJSONArray",
				fieldValue = ${rangesArray});
		}

		if (${displayFrequencies} == "disable") {
			FormFields.disableCheckbox(fieldName = "frequenciesVisible");
		}

		PortletEntry.save();
	}

	macro updateProductPublisherConfiguration {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Configuration");

		WaitForLiferayEvent.initializeLiferayEventLog();

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#CONFIGURATION");

		if (isSet(productSelection)) {
			var key_content = ${productSelection};

			Navigator.gotoNavTab(navTab = "Product Selection");

			AssertChecked(
				locator1 = "Radio#ANY",
				radioLabel = ${productSelection});

			if (${productSelection} == "Dynamic") {
				AssertElementPresent(
					key_entry = "Filter",
					locator1 = "CommerceNavigation#ANY_ENTRY_NAME");

				if (isSet(filterType)) {
					CommerceWidget.productPublisherAddFilter(
						filterEntries = ${filterEntries},
						filterType = ${filterType});
				}
			}
			else if (${productSelection} == "Manual") {
				AssertElementPresent(
					key_entry = "Product Entries",
					locator1 = "CommerceNavigation#ANY_ENTRY_NAME");
			}
			else if (${productSelection} == "Data Source") {
				AssertElementPresent(
					key_entry = "Data Source",
					locator1 = "CommerceNavigation#ANY_ENTRY_NAME");
			}
		}

		if (isSet(renderSelection)) {
			var key_content = ${renderSelection};

			Navigator.gotoNavTab(navTab = "Render Selection");

			AssertChecked(
				locator1 = "Radio#ANY",
				radioLabel = ${renderSelection});

			if (${renderSelection} == "Use Application Display Template") {
				AssertElementPresent(
					key_entry = "Display Template",
					locator1 = "CommerceNavigation#ANY_ENTRY_NAME");
			}
			else if (${renderSelection} == "Use Custom Renderer") {
				AssertElementPresent(
					key_entry = "Product List Renderer",
					locator1 = "CommerceNavigation#ANY_ENTRY_NAME");
			}
		}

		if (isSet(itemsPerPage)) {
			Navigator.gotoNavTab(navTab = "Pagination");

			Type(
				key_text = "Number of Items to Display",
				locator1 = "TextInput#ANY",
				value1 = ${itemsPerPage});
		}

		SelectFrameTop();
	}

}