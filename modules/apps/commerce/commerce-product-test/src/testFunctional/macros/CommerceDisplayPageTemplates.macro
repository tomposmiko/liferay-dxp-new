definition {

	@summary = "Add multiple fragments using index or position in a Display Page Template."
	macro addFragment {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (!(isSet(targetFragmentName))) {
			var targetFragmentName = ${fragmentName};
		}

		Navigator.gotoNavTab(navTab = "Fragments");

		PageEditor.expandFragmentCollection(collectionName = ${collectionName});

		if (${index} == 1) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#FRAGMENT_DROP_TARGET",
				value1 = "");
		}
		else {
			var position = ${index} - 1;

			DragAndDrop.javaScriptDragAndDropToBottom(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				key_index = ${position},
				key_targetFragmentName = ${targetFragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "CommerceEntry#ANY_FRAGMENT_DROP_TARGET_N",
				value1 = "");
		}

		PageEditor.waitForAutoSave();
	}

	@summary = "Add Display Page Template entry and map fragments to the given fields."
	macro addMappedDisplayPageTemplateEntry {
		task ("Given a new ${contentType} type display page template with fragment created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = ${contentType},
				displayPageTemplateEntryName = ${displayPageName},
				groupName = ${groupName});
		}

		task ("And the fragments mapped to the given fields, published and optionally click on the given menu item") {
			CommerceDisplayPageTemplates.mapFragmentsToFields(
				displayPageName = ${displayPageName},
				fieldsList = ${fieldsList},
				fragmentName = ${fragmentName},
				siteURLKey = ${siteURLKey});

			if (isSet(menuItem)) {
				LexiconEntry.gotoEntryMenuItem(
					menuItem = ${menuItem},
					rowEntry = ${displayPageName});

				Alert.viewSuccessMessage();
			}
		}
	}

	macro checkCollectionDisplayProductSpecificationsPresent {
		var productSpecifications = CommerceJSONProductsAPI._getCommerceProductSpecifications(productName = ${product});

		for (var productSpecification : list ${productSpecifications}) {
			var specification = StringUtil.extractFirst(${productSpecification}, ":");
			var value = StringUtil.extractLast(${productSpecification}, ":");

			AssertElementPresent(
				key_specification = ${specification},
				key_value = ${value},
				locator1 = "CommerceFrontStore#COLLECTION_DISPLAY_PRODUCT_SPECIFICATION_ENTRY");

			echo("The Specification ${specification} with the value ${value} is present");
		}
	}

	@summary = "Map a fragment to a field in a Display Page Template"
	macro mapEditableTextToField {
		if (${index} == 1) {
			var contributed = "false";
		}
		else {
			var contributed = "true";
		}

		if (!(isSet(id))) {
			var id = "element-text";
		}

		PageEditorMapping.gotoEditableFieldMapping(
			className = ${className},
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id},
			index = ${index});

		if (isSet(source)) {
			Select(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${source});
		}

		Select(
			key_fieldLabel = "Field",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${field});

		PageEditor.waitForAutoSave();
	}

	@summary = "Map multiple fields to multiple fragments using index and position. Then publish the Display Page Template"
	macro mapFragmentsToFields {
		Variables.assertDefined(parameterList = "${displayPageName},${fieldsList},${fragmentName},${siteURLKey}");

		if (!(isSet(collectionName))) {
			var collectionName = "Basic Components";
		}

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = ${displayPageName});

		var index = 1;

		for (var fieldName : list ${fieldsList}) {
			CommerceDisplayPageTemplates.addFragment(
				collectionName = ${collectionName},
				fragmentName = ${fragmentName},
				index = ${index});

			CommerceDisplayPageTemplates.mapEditableTextToField(
				field = ${fieldName},
				fragmentName = ${fragmentName},
				index = ${index});

			var index = ${index} + 1;
		}

		PageEditor.publish();
	}

	macro viewFragmentText {
		if (!(isSet(id))) {
			var id = "element-text";
		}

		AssertElementPresent(
			key_fragmentText = ${fragmentText},
			key_id = ${id},
			locator1 = "CommerceEntry#ASSERT_FRAGMENTS_TEXT_IN_SF");
	}

	@summary = "Verify the multiple mapped fieldsâ€™ outcome."
	macro viewMappedFragmentsText {
		for (var fragmentText : list ${fragmentsTextList}) {
			CommerceDisplayPageTemplates.viewFragmentText(fragmentText = ${fragmentText});
		}
	}

}