definition {

	macro addFullDescriptionViaCKEditor {
		Type.typeCKEditor(
			locator1 = "CKEditor#BODY_FIELD",
			value1 = ${entryFullDescription});
	}

	macro addNewAccountGroupsEntry {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});
	}

	macro addNewAccountsEntry {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Select(
			locator1 = "Select#TYPE",
			value1 = ${criteriaType});

		Button.clickSave();

		CommerceEntry.gotoNestedMenu(nestedMenu = "Users");

		Click(locator1 = "Button#PLUS");

		CommerceItemSelector.selectEntry(entryName = ${user});

		AssertClick(
			locator1 = "ItemSelector#ADD_BUTTON",
			value1 = "Add");
	}

	macro addNewAvailabilityEstimatesEntry {
		Type(
			locator1 = "CommerceEntry#TITLE_FIELD",
			value1 = ${entryName});
	}

	macro addNewCatalogsEntry {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${catalogName});

		Select(
			key_title = "Default Catalog Language",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = ${catalogLanguage});

		Select(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = ${catalogCurrency});
	}

	macro addNewChannelsEntry {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		Pause(locator1 = 3000);

		Type(
			locator1 = "TextInput#NAME",
			value1 = ${channelName});

		Select(
			key_fieldLabel = "Currency",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${channelCurrency});

		Select(
			locator1 = "Select#TYPE",
			value1 = ${channelType});

		Click(
			key_text = "Add",
			locator1 = "Button#ANY");

		if (isSet(siteName)) {
			SelectFrameTop();

			Click(
				key_menuTab = "Type",
				locator1 = "CommerceEntry#MENU_TAB");

			AssertClick(
				locator1 = "Button#SELECT",
				value1 = "Select Site");

			SelectFrame(locator1 = "IFrame#MODAL_IFRAME");

			Click(
				key_siteName = ${siteName},
				locator1 = "CommerceNavigation#CHOOSE_SITE_BUTTON");

			SelectFrameTop(value1 = "relative=top");

			Button.clickSave();
		}

		Pause(locator1 = 5000);
	}

	macro addNewCountriesEntry {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#BILLING_ALLOWED_CHECKBOX");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#SHIPPING_ALLOWED_CHECKBOX");

		Type(
			locator1 = "CommerceEntry#TWO_LETTERS_ISO_CODE_FIELD",
			value1 = ${entryIsoTwoLetters});

		Type(
			locator1 = "CommerceEntry#THREE_LETTERS_ISO_CODE_FIELD",
			value1 = ${entryIsoThreeLetters});

		Type(
			locator1 = "CommerceEntry#NUMERIC_ISO_CODE_FIELD",
			value1 = ${entryIsoNumber});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#SUBJECT_TO_VAT_CHECKBOX");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");
	}

	macro addNewCurrenciesEntry {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Type(
			locator1 = "CommerceEntry#CODE_FIELD",
			value1 = ${code});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#PRIMARY_CHECKBOX");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");
	}

	macro addNewDimensionUnit {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Type(
			locator1 = "CommerceEntry#KEY_FIELD",
			value1 = ${entryName});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#PRIMARY_CHECKBOX");
	}

	macro addNewDiscountsEntry {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		Type(
			locator1 = "TextInput#NAME",
			value1 = ${discountName});

		Select(
			key_fieldLabel = "Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${discountType});

		Select(
			key_fieldLabel = "Apply To",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${discountTarget});

		Button.click(button = "Submit");

		SelectFrameTop();

		Type(
			locator1 = "CommerceEntry#DISCOUNT_AMOUNT",
			value1 = ${discountAmount});

		if (isSet(maximumDiscountAmount)) {
			Type(
				locator1 = "CommerceEntry#MAXIMUM_DISCOUNT_AMOUNT_FIELD",
				value1 = ${maximumDiscountAmount});
		}

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");

		Button.clickPublish();
	}

	macro addNewFilters {
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = ${filterCategory},
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		if (IsElementPresent(key_inputType = "checkbox", locator1 = "CommerceEntry#FILTER_INPUT_TYPE")) {
			for (var item : list ${filterItem}) {
				Click.clickAtNotVisible(
					key_filterItem = ${item},
					key_inputType = "checkbox",
					locator1 = "CommerceEntry#FILTER_SELECT_FILTER");
			}
		}
		else if (IsElementPresent(key_inputType = "radio", locator1 = "CommerceEntry#FILTER_INPUT_TYPE")) {
			Click.clickAtNotVisible(
				key_filterItem = ${filterItem},
				key_inputType = "radio",
				locator1 = "CommerceEntry#FILTER_SELECT_FILTER");
		}

		if (IsElementPresent(key_menuItem = "Add Filter", locator1 = "CommerceEntry#ANY_MENU_ITEM")) {
			Click(
				key_menuItem = "Add Filter",
				locator1 = "CommerceEntry#ANY_MENU_ITEM");
		}
		else {
			Click(
				key_menuItem = "Edit Filter",
				locator1 = "CommerceEntry#ANY_MENU_ITEM");
		}

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");
	}

	macro addNewNotificationTemplate {
		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Type(
			locator1 = "TextArea#DESCRIPTION",
			value1 = "${entryName} Description");

		Select(
			locator1 = "Select#TYPE",
			value1 = ${notificationType});

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Enabled",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			locator1 = "CommerceEntry#NOTIFICATION_TEMPLATE_FROM_ADDRESS_FIELD",
			value1 = ${fromAddress});

		Type(
			locator1 = "CommerceEntry#NOTIFICATION_TEMPLATE_FROM_NAME_FIELD",
			value1 = ${fromName});
	}

	macro addNewPriceListsEntry {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Type(
			locator1 = "TextInput#NAME",
			value1 = ${priceListName});

		Select(
			key_fieldLabel = "Catalog",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${priceListCatalog});

		Select(
			key_fieldLabel = "Currency",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${priceListCurrency});
	}

	macro addNewRegionsEntry {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Type(
			locator1 = "CommerceEntry#CODE_FIELD",
			value1 = ${code});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");
	}

	macro addNewWeightUnit {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${entryName});

		Type(
			locator1 = "CommerceEntry#KEY_FIELD",
			value1 = ${entryName});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#PRIMARY_CHECKBOX");
	}

	macro addOptionsEntry {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${optionName});

		Type(
			locator1 = "CommerceEntry#DESCRIPTION_FIELD",
			value1 = ${optionDescription});

		Select(
			locator1 = "CommerceEntry#FIELD_TYPE_SELECT",
			value1 = ${optionFieldType});

		Check.checkToggleSwitch(locator1 = "CommerceEntry#FACETABLE_CHECKBOX");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#REQUIRED_CHECKBOX");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#SKU_CONTRIBUTOR_CHECKBOX");
	}

	macro addOptionValue {
		Type(
			locator1 = "CommerceEntry#MODAL_NAME_FIELD",
			value1 = ${valueName});

		Type(
			locator1 = "CommerceEntry#PRIORITY_FIELD",
			value1 = ${valuePriority});
	}

	macro addPricingEntry {
		Type(
			locator1 = "CommerceEntry#PRICE_FIELD",
			value1 = ${price});
	}

	macro addProductDescription {
		Type(
			locator1 = "CommerceEntry#SHORT_DESCRIPTION_FIELD",
			value1 = ${productShortDescription});

		CommerceEntry.addFullDescriptionViaCKEditor(entryFullDescription = ${productFullDescription});

		Click(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");
	}

	macro addProductsEntry {
		WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${productName});

		Type(
			locator1 = "CommerceEntry#CREATE_NEW_PRODUCT_CATALOG_FIELD",
			value1 = ${productCatalog});

		Click(
			key_menuItem = ${productCatalog},
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		Click(locator1 = "Button#SUBMIT");

		SelectFrameTop();

		WaitForElementPresent(
			key_title = ${productName},
			locator1 = "Header#H3_TITLE");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		AssertSelectedLabel(
			key_fieldLabel = "Catalog",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${productCatalog});

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${productName});

		if (!(isSet(compileDescription))) {
			var compileDescription = "true";
		}

		if (${compileDescription} == "true") {
			echo("compileDescription enabled");

			CommerceEntry.addProductDescription(
				productFullDescription = ${productFullDescription},
				productShortDescription = ${productShortDescription});
		}

		if (!(isSet(publishProduct))) {
			var publishProduct = "true";
		}

		if (${publishProduct} == "true") {
			echo("publishProduct enabled");

			CommerceEntry.publishEntry(status = "Approved");
		}
	}

	macro addSKUsEntry {
		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = ${productSKU});

		CommerceEntry.selectAssociatedOptionsValue(optionValue = ${optionValue});
	}

	macro addTaxCategory {
		Click(locator1 = "Button#PLUS");

		Type(
			key_fieldLabel = "External Reference Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyReferenceCode});

		Type(
			key_fieldLabel = "Name",
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${keyName});

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyDescription});

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = ${keyName});

		AssertTextEquals(
			key_fieldLabel = "External Reference Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyReferenceCode});

		AssertTextEquals(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyName});

		AssertTextEquals(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyDescription});

		Click(locator1 = "Button#BACK");
	}

	macro clickNoError {
		ClickNoError(
			key_menuItem = ${menuItem},
			locator1 = "CommerceEntry#ANY_MENU_ITEM");
	}

	macro createNewAccountGroup {
		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Accounts");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewAccountsEntry(
			criteriaType = ${accountCriteriaType},
			entryName = ${accountsEntryName},
			user = ${user});

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Account Groups");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewAccountGroupsEntry(entryName = ${accountGroupsEntryName});

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceEntry.gotoNestedMenu(nestedMenu = "Accounts");

		Click(locator1 = "Button#PLUS");

		CommerceItemSelector.selectEntry(entryName = ${accountsEntryName});

		Click(
			locator1 = "ItemSelector#ADD_BUTTON",
			value1 = "Add");
	}

	macro createNewCurrenciesEntry {
		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCurrenciesEntry(
			code = ${code},
			entryName = ${entryName});

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	macro createNewSpecificationGroups {
		Click(locator1 = "Button#PLUS");

		Type(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationTitle});

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationDescription});

		Button.clickSave();
	}

	macro createNewSpecificationLabels {
		Click(locator1 = "Button#PLUS");

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationTitle});

		Type(
			locator1 = "CommerceEntry#DESCRIPTION_FIELD",
			value1 = ${specificationDescription});

		Button.clickSave();
	}

	macro deleteCommerceEntry {
		var paginationResults = selenium.getText("CommerceEntry#PAGINATION_RESULTS");

		var numberOfEntries = StringUtil.extractLast(${paginationResults}, " ");

		var numberOfEntriesAfterDeletion = ${numberOfEntries} - 1;

		ClickNoError(
			key_value = "",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		if (${numberOfEntriesAfterDeletion} != 0) {
			var paginationResults = StringUtil.replace(${paginationResults}, ${numberOfEntries}, ${numberOfEntriesAfterDeletion});

			AssertTextEquals(
				locator1 = "CommerceEntry#PAGINATION_RESULTS",
				value1 = ${paginationResults});
		}

		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertElementNotPresent(locator1 = "Message#ERROR");
	}

	macro deleteTaxCategory {
		Click(
			locator1 = "Icon#SVG_ELLIPSIS",
			value1 = ${keyName});

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		AssertElementNotPresent(
			key_value = ${keyName},
			locator1 = "TextInput#GENERIC_TEXT_INPUT");
	}

	macro editEntryFullDescription {
		CommerceEntry.addFullDescriptionViaCKEditor(entryFullDescription = ${newEntryFullDescription});
	}

	macro editEntryName {
		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${newEntryName});
	}

	macro editEntryShortDescription {
		Type(
			locator1 = "CommerceEntry#SHORT_DESCRIPTION_FIELD",
			value1 = ${newEntryShortDescription});
	}

	macro editTaxCategory {
		Type(
			key_fieldLabel = "External Reference Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyReferenceCode});

		Type(
			key_fieldLabel = "Name",
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${keyName});

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyDescription});

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = ${keyName});

		AssertTextEquals(
			key_fieldLabel = "External Reference Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyReferenceCode});

		AssertTextEquals(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyName});

		AssertTextEquals(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${keyDescription});

		Click(locator1 = "Button#BACK");
	}

	macro gotoBreadcrumb {
		Click(
			key_breadcrumb = ${breadcrumb},
			locator1 = "CommerceEntry#BREADCRUMBS",
			value1 = ${breadcrumb});
	}

	macro gotoMenuTab {
		AssertClick(
			key_menuTab = ${menuTab},
			locator1 = "CommerceEntry#MENU_TAB",
			value1 = ${menuTab});
	}

	macro gotoNestedMenu {
		AssertClick(
			key_nestedMenu = ${nestedMenu},
			locator1 = "CommerceEntry#NESTED_MENU",
			value1 = ${nestedMenu});
	}

	macro publishEntry {
		Button.clickPublish();

		AssertElementPresent(
			key_status = ${status},
			locator1 = "CommerceEntry#WORKFLOW_STATUS");
	}

	macro publishProductImage {
		SelectFrameTop(value1 = "relative=top");

		//SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		SelectFrame(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Pause(locator1 = 3000);
	}

	macro saveEntry {
		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Pause(locator1 = 3000);
	}

	macro saveEntryAsDraft {
		Button.clickSaveAsDraft();

		if (IsElementPresent(locator1 = "Message#SUCCESS")) {
			AssertElementPresent(locator1 = "Message#SUCCESS");
		}
		else {
			AssertTextEquals(
				key_status = ${status},
				locator1 = "CommerceEntry#WORKFLOW_STATUS",
				value1 = ${status});
		}

		Pause(locator1 = 3000);
	}

	macro selectAssociatedOptionsValue {
		if (IsElementPresent(locator1 = "CommerceEntry#OPTION_SELECT")) {
			Click(locator1 = "CommerceEntry#OPTION_SELECT");

			Click(
				key_selectValue = ${optionValue},
				locator1 = "CommerceEntry#OPTIONS_SELECT_LIST");
		}

		if (IsElementPresent(key_optionType = "checkbox_multiple", key_optionValue = ${optionValue}, locator1 = "CommerceEntry#OPTION_VALUE")) {
			Click(
				key_optionType = "checkbox_multiple",
				key_optionValue = ${optionValue},
				locator1 = "CommerceEntry#OPTION_VALUE");
		}

		if (IsElementPresent(key_optionType = "radio", key_optionValue = ${optionValue}, locator1 = "CommerceEntry#OPTION_VALUE")) {
			Click(
				key_optionType = "radio",
				key_optionValue = ${optionValue},
				locator1 = "CommerceEntry#OPTION_VALUE");
		}
	}

	macro setEntryEligibility {
		if (isSet(accountGroupsEligibility)) {
			var title = "Add Account Groups";

			Click(
				key_radioOption = "Specific Account Groups",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			for (var accountGroup : list ${accountGroupsEligibility}) {
				CommerceRelations.assignSingleRelationToProductsEntry(
					entryName = ${accountGroup},
					title = ${title});

				Click(
					key_title = ${title},
					locator1 = "CommerceEntry#ADD_RELATION_CLEAN_INPUT_BUTTON");
			}
		}
		else if (isSet(accountsEligibility)) {
			var title = "Add Accounts";

			Click(
				key_radioOption = "Specific Accounts",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			for (var account : list ${accountsEligibility}) {
				CommerceRelations.assignSingleRelationToProductsEntry(
					entryName = ${account},
					title = ${title});

				Click(
					key_title = ${title},
					locator1 = "CommerceEntry#ADD_RELATION_CLEAN_INPUT_BUTTON");
			}
		}
		else {
			Click(
				key_radioOption = "All Accounts",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		if (isSet(channelsEligibility)) {
			var title = "Add Channels";

			Click(
				key_radioOption = "Specific Channels",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			for (var channel : list ${channelsEligibility}) {
				CommerceRelations.assignSingleRelationToProductsEntry(
					entryName = ${channel},
					title = ${title});

				Click(
					key_title = ${title},
					locator1 = "CommerceEntry#ADD_RELATION_CLEAN_INPUT_BUTTON");
			}
		}
		else {
			Click(
				key_radioOption = "All Channels",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		if (isSet(unpublish)) {
			echo("Do not need to click Publish button");
		}
		else {
			Button.clickPublish();
		}
	}

	macro uploadCatalogEntrySingleImage {
		AssertClick(
			locator1 = "CommerceEntry#PRODUCT_IMAGE_SELECT_FILE",
			value1 = "Select File");

		CommerceItemSelector.uploadSingleFile(uploadFileName = ${uploadFileName});
	}

	macro viewAccountsEntry {
		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = ${accountName});

		AssertTextEquals(
			locator1 = "TextInput#EMAIL",
			value1 = ${accountEmail});

		AssertSelectedLabel(
			locator1 = "Select#TYPE",
			value1 = ${accountType});

		if (isSet(accountVATNumber)) {
			AssertTextEquals(
				key_fieldLabel = "VAT Number",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${accountVATNumber});
		}

		if (isSet(accountDefaultBilling)) {
			AssertSelectedLabel(
				key_fieldLabel = "Default Billing",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${accountDefaultBilling});
		}

		if (isSet(accountDefaultShipping)) {
			AssertSelectedLabel(
				key_fieldLabel = "Default Shipping",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${accountDefaultShipping});
		}

		if (${isAccountActive} == "true") {
			AssertChecked(locator1 = "Checkbox#ACTIVE");
		}
		else {
			AssertNotChecked(locator1 = "Checkbox#ACTIVE");
		}
	}

	macro viewCatalogsEntry {
		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${catalogName});

		AssertSelectedLabel(
			key_title = "Default Catalog Language",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = ${catalogLanguage});

		AssertSelectedLabel(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = ${catalogCurrency});
	}

	macro viewChannelsEntry {
		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = ${channelName});

		AssertSelectedLabel(
			key_fieldLabel = "Currency",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${channelCurrency});

		if (isSet(commerceSiteType)) {
			AssertSelectedLabel(
				key_fieldLabel = "Commerce Site Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${commerceSiteType});
		}

		Click(
			key_menuTab = "Type",
			locator1 = "CommerceEntry#MENU_TAB");

		AssertTextEquals(
			locator1 = "CommerceEntry#CHANNEL_TYPE_VALUE",
			value1 = ${channelType});

		if (isSet(channelSiteName)) {
			AssertElementPresent(
				key_rowEntry = ${channelSiteName},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}
	}

	macro viewCurrenciesEntry {
		for (var currencyName : list ${currenciesList}) {
			AssertElementPresent(
				key_entryName = ${currencyName},
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	macro viewDiscountsEntry {
		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = ${discountName});

		AssertChecked.assertCheckedNotVisible(locator1 = "CommerceEntry#ACTIVE_CHECKBOX");

		AssertSelectedLabel(
			key_fieldLabel = "Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${discountType});

		AssertSelectedLabel(
			key_fieldLabel = "Apply To",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${discountTarget});

		AssertValue(
			locator1 = "CommerceEntry#DISCOUNT_AMOUNT",
			value1 = ${discountAmount});

		AssertValue(
			locator1 = "CommerceEntry#MAXIMUM_DISCOUNT_AMOUNT_FIELD",
			value1 = ${maximumDiscountAmount});

		CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

		CommerceEntry.viewEntryEligibility(
			accountGroupsEligibility = ${accountGroupsEligibility},
			accountsEligibility = ${accountsEligibility},
			channelsEligibility = ${channelsEligibility});
	}

	macro viewEntryEligibility {
		if (isSet(accountGroupsEligibility)) {
			var title = "Add Account Groups";

			AssertChecked(
				key_radioOption = "Specific Account Groups",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_title = ${title},
				locator1 = "CommerceEntry#ADD_RELATION_FIELD");

			for (var accountGroup : list ${accountGroupsEligibility}) {
				AssertElementPresent(
					key_entryName = ${accountGroup},
					key_table = "Account Groups",
					locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
			}
		}
		else if (isSet(accountsEligibility)) {
			var title = "Add Accounts";

			AssertChecked(
				key_radioOption = "Specific Accounts",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_title = ${title},
				locator1 = "CommerceEntry#ADD_RELATION_FIELD");

			for (var account : list ${accountsEligibility}) {
				AssertElementPresent(
					key_entryName = ${account},
					key_table = "Accounts",
					locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
			}
		}
		else {
			AssertChecked(
				key_radioOption = "All Accounts",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		if (isSet(channelsEligibility)) {
			var title = "Add Channels";

			AssertChecked(
				key_radioOption = "Specific Channels",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementPresent(
				key_title = ${title},
				locator1 = "CommerceEntry#ADD_RELATION_FIELD");

			for (var channel : list ${channelsEligibility}) {
				AssertElementPresent(
					key_entryName = ${channel},
					key_table = "Channels",
					locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
			}
		}
		else {
			AssertChecked(
				key_radioOption = "All Channels",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}
	}

	macro viewOptionsEntry {
		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${optionName});

		if (isSet(optionDescription)) {
			AssertTextEquals(
				locator1 = "CommerceEntry#DESCRIPTION_FIELD",
				value1 = ${optionDescription});
		}
	}

	macro viewPaginationResults {
		AssertTextEquals(
			locator1 = "CommerceEntry#PAGINATION_RESULTS",
			value1 = ${results});
	}

	macro viewPriceListEntry {
		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${priceListName});

		AssertSelectedLabel(
			key_fieldLabel = "Catalog",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${priceListCatalog});

		AssertSelectedLabel(
			key_fieldLabel = "Currency",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${priceListCurrency});
	}

	macro viewProductOptions {
		Click(locator1 = "CommerceEntry#PRODUCT_DETAIL_VIEW_OPTION");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${optionName});

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Use in Faceted Navigation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Required",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "SKU Contributor",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		for (var optionList : list ${optionList}) {
			IsElementPresent(
				key_entryName = ${optionList},
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		Click(locator1 = "Icon#CLOSE");

		Refresh();
	}

	macro viewProductsEntry {
		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = ${productName});

		AssertTextEquals(
			locator1 = "CommerceEntry#SHORT_DESCRIPTION_FIELD",
			value1 = ${productShortDescription});
	}

	macro viewProductSkus {
		for (var skusList : list ${skusList}) {
			var sku = StringUtil.extractFirst(${skusList}, ":");
			var price = StringUtil.extractLast(${skusList}, ":");

			Refresh();

			Click(
				key_entryName = ${sku},
				locator1 = "CommerceNavigation#ENTRY_NAME");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_FIELD",
				value1 = ${sku});

			AssertTextEquals(
				locator1 = "CommerceEntry#INPUT_PRICE",
				value1 = ${price});

			Click(locator1 = "Icon#CLOSE");
		}
	}

	macro viewSpecificationGroups {
		Click(
			key_entry = ${specificationTitle},
			locator1 = "CommerceNavigation#ANY_ENTRY_NAME");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationTitle});

		AssertTextEquals(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationDescription});

		AssertTextEquals(
			key_fieldLabel = "Key",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationTitle});
	}

	macro viewSpecificationGroupsEntries {
		for (var specificationGroupsEntry : list ${specificationGroupsEntries}) {
			AssertElementPresent(
				key_rowEntry = ${specificationGroupsEntry},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME_LINK");
		}
	}

	macro viewSpecificationLabels {
		Click(
			key_entry = ${specificationTitle},
			locator1 = "CommerceNavigation#ANY_ENTRY_NAME");

		AssertTextEquals(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationTitle});

		AssertTextEquals(
			locator1 = "CommerceEntry#DESCRIPTION_FIELD",
			value1 = ${specificationDescription});

		AssertTextEquals(
			key_fieldLabel = "Key",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${specificationTitle});
	}

	macro viewSpecificationLabelsEntries {
		for (var specificationLabelsEntry : list ${specificationLabelsEntries}) {
			AssertElementPresent(
				key_rowEntry = ${specificationLabelsEntry},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME_LINK");
		}
	}

}