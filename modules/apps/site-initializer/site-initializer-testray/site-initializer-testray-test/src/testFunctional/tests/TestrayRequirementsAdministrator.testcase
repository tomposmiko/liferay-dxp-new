@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite();

			Refresh();
		}

		task ("Go to Testray, Create Project and change pagination") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("Go to created project and add a new team") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			TestrayManage.createTeam(teamName = "Components_1 Team");

			TestrayManage.closeModalInOptions();
		}

		task ("Go to created project and add two new components") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(
				componentName = "Components_1 Project 1",
				teamName = "Components_1 Team");

			Testray.addNewComponent(
				componentName = "Components_1 Project 2",
				teamName = "Components_1 Team");

			Refresh();
		}

		task ("Go to project page and add a new Requirement") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.addRequirement(
				componentId = "Components_1 Project 1",
				linkTitle = "ATF_Requirements Link Title",
				linkURL = "https://www.google.com",
				requirementDescription = "ATF_Requirements Description",
				requirementName = "ATF_Requirements Summary");
		}

		task ("Go to Testray 2 and change the pagination") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Testray.deleteAllProjects();

		Testray.tearDownCP();

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-160546 - Verify if as an Administrator, I should be able to delete Requirements"
	@priority = 5
	test AdminCanDeleteRequirements {
		task ("Given that the user goes to project page") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");
		}

		task ("When the user goes to delete a requirement") {
			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayContextMenu.clickContextMenuProjects(name = "ATF_Requirements Summary");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");
		}

		task ("then the requirement should not be displayed anymore") {
			Testray.assertItemNotPresent(itemName = "ATF_Requirements Summary");
		}
	}

	@description = "This is a test for LPS-160545 - Verify if as an Administrator, I should be able to edit Requirements"
	@priority = 5
	test AdminCanEditRequirements {
		task ("Given that the user goes to project page") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");
		}

		task ("When the user goes to edit a requirement") {
			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayContextMenu.clickContextMenuProjects(name = "ATF_Requirements Summary");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			TestrayRequirements.editRequirement(
				componentId = "Components_1 Project 2",
				linkTitle = "the front page of the internet",
				linkURL = "https://reddit.com",
				requirementDescription = "ATF_Requirements Description Edited",
				requirementName = "ATF_Requirements Summary Edited");
		}

		task ("Then the requirement is displayed with the new infos") {
			TestrayRequirements.verifyRequirement(
				key_requirementSummary = "ATF_Requirements Summary Edited",
				linkTitle = "the front page of the internet",
				requirementComponent = "Components_1 Project 2",
				requirementTeam = "Components_1 Team");
		}
	}

	@description = "This is a test for LPS-160544 - Verify if as an Administrator, I should be able to link and unlink a Case to a Requirement"
	@priority = 5
	test AdminCanLinkAndUnlinkCaseToRequirement {
		task ("Given that the user goes to project page") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");
		}

		task ("And given that the user adds a new Case") {
			Testray.projectTabNavigator(navTabName = "Cases");

			TestrayCases.typeCasesField(
				caseName = "ATF_Requirements Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "ATF_Requirements Case Description",
				duration = 10,
				priority = 5,
				steps = "ATF_Requirements Case Steps");
		}

		task ("When the user goes to requirements and link a case") {
			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.goToRequirement(requirementSummary = "ATF_Requirements Summary");

			TestrayRequirements.addRequirementCase(
				buttonText = "Select Cases",
				caseName = "ATF_Requirements Case",
				linkText = "Link Cases");
		}

		task ("Then the case should be displayed on Requirement page") {
			TestrayRequirements.verifyRequirementCase(
				requirementCaseName = "ATF_Requirements Case",
				requirementComponent = "Components_1 Project 1",
				requirementPriority = 5);
		}

		task ("When the user goes to requirements and unlink a case") {
			TestrayRequirements.addRequirementCase(
				buttonText = "Select Cases",
				caseName = "ATF_Requirements Case",
				linkText = "Link Cases");
		}

		task ("Then the case should not be displayed on Requirement page") {
			Testray.assertItemNotPresent(itemName = "ATF_Requirements Case");
		}
	}

	@description = "This is a test for LPS-166833 - Verify that as an administrator I cannot create requirements with an invalid URL link"
	@priority = 4
	test AdminCanNotAddRequirementsWithInvalidUrl {
		task ("Given the user tries to create a requirement with an invalid URL") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.addRequirement(linkURL = "www.google.com");
		}

		task ("Then an invalid URL message appears") {
			Testray.viewErrorMessage(
				fieldLabel = "Link URL",
				warningMessage = "The link URL must be a valid URL.");
		}
	}

	@description = "This is a test for LPS-164143 - Verify that the user can not create a requirement if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewRequiredField {
		task ("Given the user tries to create a requirements without filling out the required fields") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.addRequirement();
		}

		task ("Then a required field message appears") {
			Testray.viewErrorMessage(
				fieldLabel = "Summary",
				warningMessage = "summary is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Link URL",
				warningMessage = "linkURL is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Link Title",
				warningMessage = "linkTitle is a required field");
		}
	}

}