@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("create all objects: projects, teams, components, cases, requirements") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				description = "Description 1",
				priority = 5,
				projectName = ${projectName},
				steps = "Steps 1");

			JSONTestray.addRequirement(
				componentName = ${componentName},
				linkTitle = "The front page of the internet",
				projectName = ${projectName},
				requirementName = "Requirement 1");

			JSONTestray.addRequirement(
				componentName = ${componentName},
				linkTitle = "Page of the internet 2",
				linkURL = "https://reddit.com",
				projectName = ${projectName},
				requirementName = "Requirement 2");
		}

		task ("Go to the Requirements page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");

			Testray.goToProjectPage(projectName = ${caseName});

			Testray.projectTabNavigator(navTabName = "Requirements");
		}

		task ("add a case to the requirement") {
			TestrayRequirements.addRequirementCase(
				buttonText = "Select Requirements",
				caseName = "Requirement 1",
				linkText = "Link Requirements");

			TestrayRequirements.addRequirementCase(
				buttonText = "Select Requirements",
				caseName = "Requirement 2",
				linkText = "Link Requirements");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "teams",
			objectName = ${teamName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173530 | Test Summary: Verify if as an Administrator I should be able to filter case requirements by link"
	@priority = 5
	test AdminCanFilterCaseRequirementsByLink {
		task ("When the user filter a case requirement by link") {
			TestrayFilter.clickFilter();

			Type(
				key_fieldLabel = "Link",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "google");

			Button.click(button = "Apply");
		}

		task ("Then can see the filters apply in the list by link") {
			TestrayRequirements.verifyRequirement(
				linkTitle = "The front page of the internet",
				requirementComponent = "Component 1",
				requirementSummary = "Requirement 1",
				requirementTeam = "Team 1");

			Testray.assertItemNotPresent(key_name = "Requirement 2");
		}
	}

	@description = "Story ID: LPS-173530 | Test Summary: Verify if as an Administrator I should be able to filter case requirements by summary"
	@priority = 5
	test AdminCanFilterCaseRequirementsBySummary {
		task ("When the user filter a case requirement by summary") {
			TestrayFilter.clickFilter();

			Type(
				key_fieldLabel = "Summary",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Requirement 1");

			Button.click(button = "Apply");
		}

		task ("Then can see the filters apply in the list by summary") {
			Testray.assertItemName(key_name = "Requirement 1");

			Testray.assertItemNotPresent(key_name = "Requirement 2");
		}
	}

	@description = "Story ID: LPS-173530 | Test Summary: Verify if as an Administrator I should be able to filter case requirements using multiple filtering options"
	@priority = 5
	test AdminCanFilterCaseRequirementsWithMultipleOptions {
		task ("When the user filter a case requirement with multiple options") {
			TestrayFilter.clickFilter();

			Type(
				key_fieldLabel = "Summary",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Requirement 1");

			Type(
				key_fieldLabel = "Link",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "google");

			Button.click(button = "Apply");
		}

		task ("Then can see the multiple options in the table and do not see the requirement 2") {
			TestrayRequirements.verifyRequirement(
				linkTitle = "The front page of the internet",
				requirementComponent = "Component 1",
				requirementSummary = "Requirement 1",
				requirementTeam = "Team 1");

			Testray.assertItemNotPresent(key_name = "Requirement 2");
		}
	}

	@description = "Story ID: LPS-173530 | Test Summary: Verify if as an Administrator I should not see case requirements that don't exist when I try filtering for them"
	@priority = 4
	test AdminCanFilterForNonexistantCaseRequirements {
		task ("When the user filters a case requirement by its non-existent name") {
			TestrayFilter.clickFilter();

			Type(
				key_fieldLabel = "Summary",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Requirement 3");

			Button.click(button = "Apply");
		}

		task ("Then can see message no results found") {
			TestrayFilter.assertNoResultsFound();
		}
	}

	@description = "Story ID: LPS-173530 | Test Summary: Verify if as an Administrator I should be able to filter the filter options"
	@priority = 4
	test AdminCanFilterOptionsToFilter {
		task ("When the user search field called link") {
			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(value = "Link");
		}

		task ("Then can see the field called link and do not see the field key") {
			AssertElementPresent(
				key_fieldLabel = "Link",
				locator1 = "TextInput#GENERIC_TEXT_INPUT");

			AssertElementNotPresent(
				key_fieldLabel = "Key",
				locator1 = "TextInput#GENERIC_TEXT_INPUT");
		}
	}

}