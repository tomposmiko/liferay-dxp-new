@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var suiteName = "Suite 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Given that I create all the necessary objects") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});
		}

		task ("Then I go to TR2 and change the paging") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = ${productVersion});

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Automation ID: LPS-156438 | Test Summary: Verify if as an Administrator can Add a Build"
	@priority = 5
	test AdminCanAddBuild {
		task ("Given that the user add a new build") {
			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("Then the Routine should appear on the list") {
			Testray.assertItemName(text = "Build 1");
		}
	}

	@description = "Automation ID: LPS-163712 | Test Summary: Verify if as an administrator can add a build with multiple options(Suite, Case, Option and Select Stacks)"
	@priority = 5
	test AdminCanAddBuildWithMultipleOptions {
		task ("Given that the user add a new build") {
			JSONTestray.addSuite(suiteName = ${suiteName});

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Suites");

			Testray.assertItemName(text = "Suite 1");

			Testray.projectTabNavigator(navTabName = "Routines");

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			TestrayBuild.addBuildViaUI(
				buildFieldName = ${buildName},
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = ${productVersion},
				routine = ${routineName});
		}

		task ("Then the Build should appear on the list") {
			Testray.assertItemName(text = "Build 1");
		}
	}

	@description = "Automation ID: LPS-157540 | Test Summary: Verify if as an Administrator I should be able to archive a build "
	@ignore = "Test Stub"
	@priority = 3
	test AdminCanArchiveBuild {

		// TODO LPS-157540 AdminCanArchiveBuild pending implementation

	}

	@description = "Automation ID: LPS-157539 | Test Summary: Verify if as an Administrator I should be able to Autoanalyze Builds in a Routine and assert that the Assignee, Comments, Issues have been copied"
	@ignore = "Test Stub"
	@priority = 5
	test AdminCanAutoanalyzeBuildsInRoutine {

		// TODO LPS-157539 AdminCanAutoanalyzeBuildsInRoutine pending implementation

	}

	@description = "Automation ID: LPS-156513 | Test Summary: Verify if as an Administrator I can delete Builds"
	@priority = 5
	test AdminCanDeleteBuild {
		task ("Then I create a build") {
			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			Testray.assertItemName(text = "Build 1");
		}

		task ("When a build is deleted") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "builds",
				objectName = ${buildName});
		}

		task ("Then the build should not appear on the list") {
			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			Testray.assertItemNotPresent(itemName = "Build 1");
		}
	}

	@description = "Automation ID: LPS-156575 | Test Summary: Verify if as an Administrator I should be able to delete a build that contains runs"
	@priority = 4
	test AdminCanDeleteBuildContainsRuns {
		task ("Given that the user add a new build with Environments Factors") {
			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			TestrayBuild.addBuildViaUI(
				buildFieldName = ${buildName},
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = ${productVersion},
				routine = ${routineName});
		}

		task ("And deleted build with runs") {
			TestrayBuild.goToBuild(buildName = "Build 1");

			Testray.projectTabNavigator(navTabName = "Runs");

			Testray.assertItemName(text = "Option 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "builds",
				objectName = "Build 1");

			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayContextMenu.clickContextMenuProjects(name = ${routineName});
		}

		task ("Then the build with runs should not appear on the list") {
			Testray.assertItemNotPresent(itemName = "Build 1");
		}
	}

	@description = "Automation ID: LPS-156543 | Test Summary: Verify if as an Administrator I am able to edit Builds"
	@priority = 5
	test AdminCanEditBuild {
		task ("Given that the user add a new build") {
			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			TestrayBuild.addBuildViaUI(
				buildFieldName = ${buildName},
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = ${productVersion},
				routine = ${routineName});
		}

		task ("When a build is edited") {
			TestrayContextMenu.clickContextMenuProjects(name = "Build 1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			TestrayBuild.editBuild(
				description = "Description Edited",
				fieldName = "Build 1 Edited",
				gitHash = 12345,
				productVersion = "1.2",
				routine = "Routine 1");
		}

		task ("Then the build should appear on the list with name edited") {
			Testray.assertItemName(text = "Build 1 Edited");
		}
	}

	@description = "Automation ID: LPS-156546 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate build"
	@priority = 5
	test AdminCanNotAddDuplicateBuild {
		task ("Given that the user add a new build") {
			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			TestrayBuild.addBuildViaUI(
				buildFieldName = ${buildName},
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = ${productVersion},
				routine = ${routineName});
		}

		task ("When add a build with duplicated name") {
			TestrayBuild.addBuildViaUI(
				buildFieldName = ${buildName},
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = "1.3",
				routine = ${routineName});
		}

		task ("Then a warning message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Build name already exists");
		}
	}

	@description = "Automation ID: LPS-156557 | Test Summary: Verify if as an Administrator I should not be able to archive a build where its task is in analysis"
	@ignore = "Test Stub"
	@priority = 3
	test AdminCanNotArchivedBuildInAnalysis {

		// TODO LPS-156557 AdminCanNotArchivedBuildInAnalysis pending implementation

	}

	@description = "Automation ID: LPS-156455 | Test Summary: Verify if as an Administrator I should not be able to archive a promoted build"
	@ignore = "Test Stub"
	@priority = 5
	test AdminCanNotArchivePromotedBuild {

		// TODO LPS-156455 AdminCanNotArchivePromotedBuild pending implementation

	}

	@description = "Automation ID: LPS-156583 | Test Summary: Verify if as an Administrator I should be able to promote a build"
	@priority = 5
	test AdminCanPromoteBuild {
		task ("Given that the user add a new build") {
			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			TestrayBuild.addBuildViaUI(
				buildFieldName = ${buildName},
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = ${productVersion},
				routine = ${routineName});
		}

		task ("When a build is promoted") {
			TestrayContextMenu.clickContextMenuProjects(name = "Build 1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Promote");
		}

		task ("Then the promoted build should appear on the list") {
			TestrayBuild.verifyPromoteBuild();
		}
	}

	@description = "Automation ID: LPS-156585 | Test Summary: Verify if as an Administrator I should be able to sort the Builds Name"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSortBuildByName {

		// TODO LPS-156585 AdminCanSortBuildByName pending implementation

	}

	@description = "Automation ID: LPS-156588 | Test Summary: Verify if as an Administrator I should be able to sort the Builds Product Version"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSortBuildProductVersion {

		// TODO LPS-156588 AdminCanSortBuildProductVersion pending implementation

	}

	@description = "Automation ID: LPS-156586 | Test Summary: Verify if as an Administrator I should be able to sort the Builds Promoted"
	@ignore = "Test Stub"
	@priority = 3
	test AdminCanSortBuildPromoted {

		// TODO LPS-156586 AdminCanSortBuildPromoted pending implementation

	}

	@description = "Automation ID: LPS-156580 | Test Summary: Verify if as an Administrator I should be able to specify a start and end parameter when fetching a build index "
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSpecifyStartAndEndParameter {

		// TODO LPS-156580 AdminCanSpecifyStartAndEndParameter pending implementation

	}

	@description = "Automation ID: LPS-156592 | Test Summary: Verify if as an Administrator I should be able to unarchive a build"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanUnarchiveBuilds {

		// TODO LPS-156592 AdminCanUnarchiveBuilds pending implementation

	}

}