@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var componentName = "Component 1";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Given that a Testray project and team are created") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I am able to add Components"
	@priority = 5
	test AdminCanAddComponent {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("Then the component should appear on the list") {
			Testray.assertItemName(text = ${componentName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should be able to add a component that does not have a team"
	@priority = 5
	test AdminCanAddComponentWithoutTeam {
		task ("Given I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When I add a new component without adding a team") {
			Testray.addNewComponent(componentName = ${componentName});
		}

		task ("Then I assert that the component was created without a team") {
			Testray.assertItemName(text = ${componentName});

			Testray.assertItemNotPresent(text = ${teamName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify that as an Administrator I am able to edit Components while connecting a Team"
	@priority = 5
	test AdminCanAddTeamToComponent {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I add a new Component without a Team") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(componentName = ${componentName});

			Testray.assertItemName(text = ${componentName});
		}

		task ("Then I should be able to edit the component and add a Team") {
			Testray.editComponent(
				componentName = ${componentName},
				newComponentName = "Component 1 Edited",
				newTeamName = ${teamName});

			Testray.assertItemName(text = "Component 1 Edited");

			Testray.assertItemName(text = ${teamName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an administrator I can change the team assigned to the Component"
	@priority = 3
	test AdminCanChangeTeamToComponent {
		task ("Given that I create a new 'Team' and a new 'Component' via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the Manage Components") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When I change the component team") {
			Testray.changeTeamToComponent(
				currentTeam = ${teamName},
				newTeamName = "Team 2");
		}

		task ("Then I assert that the Team has been changed") {
			Testray.assertItemName(text = "Team 2");
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should be able to delete a component that does not have a team"
	@priority = 3
	test AdminCanDeleteComponentWithoutTeam {
		task ("Given I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When I add a new component without adding a team") {
			Testray.addNewComponent(componentName = ${componentName});

			Testray.assertItemName(text = ${componentName});

			Testray.assertItemNotPresent(text = ${teamName});
		}

		task ("And I should be able to delete the component") {
			Testray.deleteComponent(itemName = ${componentName});
		}

		task ("Then I assert that the component was deleted") {
			Testray.assertItemNotPresent(itemName = ${componentName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should be able to add a Component that has a Team"
	@priority = 5
	test AdminCanDeleteComponentWithTeam {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I go to Manage Component") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("And I assert that the component was created") {
			Testray.assertItemName(text = ${componentName});

			Testray.assertItemName(text = ${teamName});
		}

		task ("Then I delete the created component and I state that it does not appear in the list") {
			Testray.deleteComponent(itemName = ${componentName});

			Testray.assertItemNotPresent(itemName = ${componentName});
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify that as an Administrator I can edit Components"
	@priority = 4
	test AdminCanEditComponent {
		task ("Given that I create a new 'Team' and a new 'Component' via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the created Project") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});
		}

		task ("When I go to Manage Components and edit the Component") {
			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.assertItemName(text = ${componentName});

			SelectFrameTop();

			TestrayContextMenu.clickContextMenuProjects(name = ${componentName});

			Testray.editComponent(
				componentName = ${componentName},
				newComponentName = "Component Edited");
		}

		task ("Then I assert that the component was edited") {
			Testray.assertItemName(text = "Component Edited");
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate component"
	@priority = 3
	test AdminCanNotAddDuplicatedComponent {
		task ("Given that I create a new 'Component' via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("When I go to Manage Component and try to add a component with a duplicate name") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.assertItemName(text = ${componentName});

			Testray.addNewComponent(componentName = ${componentName});
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Component name already exists");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Component the system should return that component"
	@priority = 4
	test AdminCanSearchComponent {
		task ("Given that two component are created via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = "Component 2",
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And go to the manage components") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("And confirm that there are two components in the table") {
			AssertElementPresent(
				key_projectName = ${componentName},
				locator1 = "Testray#ITEM_NAME");

			AssertElementPresent(
				key_projectName = "Component 2",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("When the user filter component 1") {
			TestrayFilter.clickFilter();

			PortletEntry.inputName(name = ${componentName});

			Button.click(button = "Apply");
		}

		task ("Then the user see only component 1 in the table") {
			AssertElementPresent(
				key_projectName = ${componentName},
				locator1 = "Testray#ITEM_NAME");
		}

		task ("And do not see the component 2 in the table") {
			AssertElementNotPresent(
				key_projectName = "Component 2",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("Delete the component") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "components",
				objectName = "Component 2");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Component that does not exist the system should not return that component"
	@priority = 3
	test AdminCanSearchComponentNonExistent {
		task ("Given that component are created via API") {
			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And go to the manage components") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When the user search component non existent") {
			TestrayFilter.clickFilter();

			PortletEntry.inputName(name = "Component 3");

			Button.click(button = "Apply");
		}

		task ("Then not see the component 3 in the table") {
			AssertElementNotPresent(
				key_projectName = "Component 3",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-159528 | Test Summary: Verify if as an Administrator I can see the warning message 'This field is required' when trying to save without a name"
	@priority = 2
	test CannotAddComponentWithoutAName {
		task ("Given I go to the Manage Component page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");
		}

		task ("When I try to add a component without a name") {
			Testray.addNewComponent(componentName = "");
		}

		task ("Then I assert that the 'Name' field is required") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}