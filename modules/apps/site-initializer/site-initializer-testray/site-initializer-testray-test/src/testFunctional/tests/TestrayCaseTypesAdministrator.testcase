@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseType = "Case Type 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTR2Site(siteName = ${testSiteName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Automation ID: LPS-156676 | Test Summary: Verify if the Administrator can Add Case Types"
	@priority = 5
	test AdminCanAddCaseTypes {
		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePaginationInModal(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("Then I assert that the newly created 'Case Type' is present in the list") {
			Testray.assertItemName(text = ${caseType});
		}
	}

	@description = "Automation ID: LPS-156679 | Test Summary: Verify that as an Administrator I can delete Case Types"
	@priority = 5
	test AdminCanDeleteCaseTypes {
		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePaginationInModal(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("When I delete a Case Type") {
			TestrayManage.deleteCasesTypes(valueName = ${caseType});
		}

		task ("Then I shouldn't be able to see the same in the list") {
			Testray.assertItemNotPresent(text = ${caseType});
		}
	}

	@description = "Automation ID: LPS-156681 | Test Summary: Verify if the Administrator can Edit Case Types"
	@priority = 5
	test AdminCanEditCaseTypes {
		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePaginationInModal(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("And I edit the name of the Case Type") {
			TestrayManage.editNewName(
				valueName = ${caseType},
				valueType = "Case Type Edited");
		}

		task ("Then I assert that the name has been changed in the list") {
			Testray.assertItemName(text = "Case Type Edited");
		}

		task ("Delete object") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = "Case Type Edited");
		}
	}

	@description = "Automation ID: LPS-166555 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate cases types"
	@priority = 5
	test AdminCanNotAddDuplicateCasesTypes {
		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePaginationInModal(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("When I try to create a new Case Type with an existing title") {
			TestrayManage.createNewCaseTypes(caseName = ${caseType});
		}

		task ("Then an error message is shown") {
			Alert.viewErrorMessage(errorMessage = "The Case Type name already exists");
		}
	}

	@description = "Automation ID: LPS-164131 | Test Summary: Verify that the user can not create a case type if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewRequiredField {
		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("Create a new Case Type and assert message of required field") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePaginationInModal(
				numberItems = 20,
				valuePagination = 150);

			TestrayManage.createNewCaseTypes(caseName = "");

			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}