@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "user@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Go to Testray") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONUser.deleteUserByEmailAddress(userEmailAddress = "user@liferay.com");

		Testray.tearDownCP();

		ClientExtensionGeneral.goToRemoteAppsPortlet();

		ClientExtensionGeneral.deleteRemoteApp(tableEntry = "Testray");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173531 | Test Summary: Verify that as an administrator can add and delete a new user"
	@priority = 5
	test AdminCanAddAndDeleteNewUser {
		task ("When that the administrator add a user") {
			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Manage Users");

			Click(locator1 = "Button#PLUS");

			TestrayManageUser.addUser(
				listRoles = "Testray User",
				rePassword = "test1",
				userEmailAddressEdit = "userfirst@liferay.com",
				userFirstNameEdit = "changedfirstname",
				userLastNameEdit = "Updateln",
				userPassword = "test1",
				userScreenNameEdit = "testscreen");
		}

		task ("Then can see the user created in the list") {
			AssertElementPresent(
				key_projectName = "changedfirstname Updateln",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("When delete the user") {
			Testray.goToProjectPage(projectName = "userfirst@liferay.com");

			Button.click(button = "Delete User");
		}

		task ("Then can not see the user in the list") {
			Refresh();

			AssertElementNotPresent(
				key_projectName = "changedfirstname Updateln",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-173531 | Test Summary: Verify if as an Administrator I should be able to filter manage users by name"
	@priority = 4
	test AdminCanFilterUsersByName {
		task ("Given that there are two users present in the table") {
			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Manage Users");

			AssertElementPresent(
				key_projectName = "userfn userln",
				locator1 = "Testray#ITEM_NAME");

			AssertElementPresent(
				key_projectName = "Test Test",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("When the user filter a user by name") {
			TestrayFilter.clickFilter();

			TestrayFilter.typeFilter(
				label = "Name",
				value = "userfn userln");
		}

		task ("Then can see the user named test test in the table and no longer see the userfn userln") {
			AssertElementPresent(
				key_projectName = "userfn userln",
				locator1 = "Testray#ITEM_NAME");

			AssertElementNotPresent(
				key_projectName = "Test Test",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-173531 | Test Summary: Verify if as an Administrator I should not see manage users that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanNotFilterForNonExistentUsers {
		task ("When filtering a user by his non-existent name") {
			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Manage Users");

			AssertElementPresent(
				key_projectName = "Test Test",
				locator1 = "Testray#ITEM_NAME");

			TestrayFilter.clickFilter();

			TestrayFilter.typeFilter(
				label = "Name",
				value = "Test 2");
		}

		task ("Then the user is not present in the User table") {
			AssertElementNotPresent(
				key_projectName = "Test Test",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-149551 | Test Summary: Verify if as an User can edit account information"
	@priority = 4
	test CanEditAccountInformation {
		task ("When the user change the account informations") {
			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Manage Users");

			Testray.goToProjectPage(projectName = "user@liferay.com");

			TestrayManageUser.editUserInformation(
				userEmailAddressEdit = "user@liferay.com",
				userFirstNameEdit = "changedfirstname",
				userLastNameEdit = "Updateln",
				userScreenNameEdit = "testscreen");

			Testray.checkSuccessAlertAppearsAndDisappears();
		}

		task ("Then the account information is displayed in Manage Users") {
			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Manage Users");

			Testray.goToProjectPage(projectName = "changedfirstname Updateln");

			TestrayManageUser.viewUserInfomation(
				emailAddress = "user@liferay.com",
				firstName = "changedfirstname",
				lastName = "Updateln",
				screenName = "testscreen");
		}
	}

	@description = "Story ID: LPS-164964 | Test Summary: Verify if as an administrator I cannot save roles without the select options"
	@priority = 3
	test CanNotSaveRolesWithoutOptions {
		task ("When the user tries to save roles without options selected") {
			TestrayLayout.manageAccountSidebar(valueName = "Manage Account");

			TestrayManageUser.changeRole(roleName = "Administrator");

			TestrayManageUser.changeRole(roleName = "Power User");

			TestrayManageUser.changeRole(roleName = "User");

			Button.clickSave();
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "Please, select one or more roles.");
		}
	}

	@description = "Story ID: LPS-149551 | Test Summary: Verify that the user can not edit informations of user if all the required fields are not filled in"
	@priority = 2
	test CanViewFieldRequired {
		task ("When the user tries to created account without informations") {
			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Manage Users");

			Testray.goToProjectPage(projectName = "user@liferay.com");

			TestrayManageUser.editUserInformation(
				userEmailAddressEdit = "",
				userFirstNameEdit = "",
				userLastNameEdit = "",
				userScreenNameEdit = "");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "First Name",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "Last Name",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "Email Address",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "Screen Name",
				warningMessage = "This field is required.");
		}
	}

}