@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Given that a Testray Project are created") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I am able to add a Team"
	@priority = 5
	test AdminCanAddTeam {
		task ("When the team are created") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			TestrayManage.createTeam(teamName = ${teamName});
		}

		task ("Then I should be able to assert that the Team was created") {
			Testray.assertItemName(text = ${teamName});
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I am able to delete a Team"
	@priority = 5
	test AdminCanDeleteTeam {
		task ("Given that a team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");
		}

		task ("When I delete the newly created Team") {
			TestrayManage.deleteProductVersion(
				itemManage = "Delete",
				versionName = ${teamName});
		}

		task ("Then I should be able to assert that the Team has been deleted") {
			Testray.assertItemNotPresent(text = ${teamName});
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I am able to edit a Team"
	@priority = 5
	test AdminCanEditTeam {
		task ("Given that a team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");
		}

		task ("When I edit the Team") {
			TestrayManage.editTeam(
				currentTeamName = ${teamName},
				newTeamName = "Team Edited");
		}

		task ("Then I should be able to assert that the Team has been edited") {
			Testray.assertItemName(text = "Team Edited");
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate Teams"
	@priority = 3
	test AdminCanNotAddDuplicateTeams {
		task ("Given that a team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");
		}

		task ("When I try to create an existing Team") {
			TestrayManage.createTeam(teamName = ${teamName});
		}

		task ("Then I should be able to assert that an error message is shown") {
			Alert.viewErrorMessage(errorMessage = "The Team name already exists");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Team that does not exist the system should not return that team"
	@priority = 3
	test AdminCanNotSearchTeamNonExistent {
		task ("Given that two team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");
		}

		task ("When the user search team non existent") {
			TestrayFilter.clickFilter();

			PortletEntry.inputName(name = "Team 3");

			Button.click(button = "Apply");
		}

		task ("Then not see the team 3 in the table") {
			AssertElementNotPresent(
				key_projectName = "Team 3",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Team the system should return that team"
	@priority = 4
	test AdminCanSearchTeam {
		task ("Given that two team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");
		}

		task ("And go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");
		}

		task ("And confirm that there are two teams in the table") {
			AssertElementPresent(
				key_projectName = ${teamName},
				locator1 = "Testray#ITEM_NAME");

			AssertElementPresent(
				key_projectName = "Team 2",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("When the user filter team 1") {
			TestrayFilter.clickFilter();

			PortletEntry.inputName(name = ${teamName});

			Button.click(button = "Apply");
		}

		task ("Then the user see only team 1 in the table") {
			AssertElementPresent(
				key_projectName = ${teamName},
				locator1 = "Testray#ITEM_NAME");
		}

		task ("And do not see the team 2 in the table") {
			AssertElementNotPresent(
				key_projectName = "Team 2",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I can see the warning message 'This field is required' when trying to save without a name"
	@priority = 2
	test AssertThatTheFieldIsRequired {
		task ("Given I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");
		}

		task ("When I try to create a Team without filling in the name") {
			TestrayManage.createTeam();
		}

		task ("Then I should be able to assert that the field is required") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}