@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});

			Refresh();
		}

		task ("Go to Testray, Create Project and change pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.createProjectTestray(
				description = "Projects_1 Project Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Testray.deleteAllProjects();

		Testray.tearDownCP();

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-162816 - Verify that as an Administrator I can delete a smart suite"
	@priority = 4
	test AdminCanDeleteSmartSuite {
		task ("Given that the user goes to add a new component") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(componentName = "Components_1 Project");

			TestrayManage.closeModalInOptions();
		}

		task ("And given that the user adds a new requirement") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.addRequirement(
				componentId = "Components_1 Project",
				linkTitle = "ATF_Requirements Link Title",
				linkURL = "https://www.google.com",
				requirementDescription = "ATF_Requirements Description",
				requirementName = "ATF_Requirements Summary");
		}

		task ("And given that the user adds a Smart Suite") {
			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				caseType = "Manual Test",
				mainComponent = "Tags",
				priorityNumber = 3,
				smartSuite = "true",
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("When the smart suite is deleted") {
			TestraySuites.deleteSuite(suiteName = "ATF_Suites_1 Suite");
		}

		task ("Then the suite is not displayed anymore") {
			Testray.assertItemNotPresent(itemName = "ATF_Suites_1 Suite");
		}
	}

	@description = "This is a test for LPS-160626 - Verify if as an Administrator I am able delete a suite"
	@priority = 4
	test AdminCanDeleteSuite {
		task ("Given that the user goes to add a new suite") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("When the user deletes the created suite") {
			TestraySuites.deleteSuite(suiteName = "ATF_Suites_1 Suite");
		}

		task ("Then the suite is not displayed anymore") {
			Testray.assertItemNotPresent(itemName = "ATF_Suites_1 Suite");
		}
	}

	@description = "This is a test for LPS-160574 - Verify if as an Administrator I am able to design Suites"
	@priority = 4
	test AdminCanDesignSuite {
		task ("Given that the user goes to add a new component") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(componentName = "Components_1 Project");

			TestrayManage.closeModalInOptions();
		}

		task ("Given that the user goes to add a new case") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Cases");

			TestrayCases.typeCasesField(
				caseName = "ATF_Suites Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project",
				description = "ATF_Suites Case Description",
				duration = 10,
				priority = 5,
				steps = "ATF_Suites Case Steps");
		}

		task ("When the user add a new suite with the created case") {
			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				caseName = "ATF_Suites Case",
				suiteDescription = "Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("Then the selected case is displayed on suite details") {
			TestraySuites.goToSuiteDetails(suiteName = "ATF_Suites_1 Suite");

			Testray.assertItemName(text = "ATF_Suites Case");
		}
	}

	@description = "This is a test for LPS-162815 - Verify that as an Administrator I can edit and update a smart suite"
	@priority = 4
	test AdminCanEditSmartSuite {
		task ("Given that the user goes to add a new component") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(componentName = "Components_1 Project");

			TestrayManage.closeModalInOptions();
		}

		task ("And given that the user adds a new requirement") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.addRequirement(
				componentId = "Components_1 Project",
				linkTitle = "ATF_Requirements Link Title",
				linkURL = "https://www.google.com",
				requirementDescription = "ATF_Requirements Description",
				requirementName = "ATF_Requirements Summary");
		}

		task ("And given that the user adds a Smart Suite") {
			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				caseType = "Unit Test",
				mainComponent = "Components_1 Project",
				priorityNumber = 1,
				requirementName = "ATF_Requirements Summary",
				smartSuite = "true",
				subComponent = "Components_1 Project",
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("Then the case parameters are presented in the details of the suite") {
			TestraySuites.goToSuiteDetails(suiteName = "ATF_Suites_1 Suite");

			TestraySuites.verifyCaseParametersInSuite(
				caseType = "Unit Test",
				components = "Components_1 Project",
				priority = 1,
				requirements = "ATF_Requirements Summary",
				subComponents = "Components_1 Project");
		}

		task ("When the user edits the created smart suite") {
			TestrayDropdown.selectProjectDirectory(project = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.editSmartSuite(
				caseType = "Cucumber",
				mainComponent = "Calendar",
				priorityNumber = 5,
				smartSuite = "true",
				subComponent = "Wiki",
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("Then the case parameters are presented with details edited") {
			TestraySuites.goToSuiteDetails(suiteName = "ATF_Suites_1 Suite");

			TestraySuites.verifyCaseParametersInSuite(
				caseType = "Cucumber",
				components = "Calendar",
				priority = 5,
				requirements = "ATF_Requirements Summary",
				subComponents = "Wiki");
		}
	}

	@description = "This is a test for LPS-160627 - Verify if as an Administrator I am able to edit suites"
	@priority = 4
	test AdminCanEditSuite {
		task ("Given that the user goes to add a new suite") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("When the user edits the created suite") {
			TestraySuites.editSuite(
				newDescription = "ATF_Suites_1 Suite Description Edited",
				newName = "ATF_Suites_1 Suite Edited",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("then the suite should appear on the list with the new informations") {
			TestraySuites.verifySuite(
				suiteDescription = "ATF_Suites_1 Suite Description Edited",
				suiteName = "ATF_Suites_1 Suite Edited",
				suiteType = "Static");
		}
	}

	@description = "This is a test for LPS-166559 - Verify if as an Administrator I should not be able to add a duplicate Suites"
	@priority = 5
	test AdminCanNotAddDuplicateSuites {
		task ("Given that the user goes to add a new suite duplicate") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");

			TestraySuites.addSuite(
				suiteDescription = "ATF_Suites_1 Suite Description",
				suiteName = "ATF_Suites_1 Suite");
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Suite name already exists");
		}
	}

	@description = "This is a test for LPS-164152 - Verify that the user can not create a suite if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewRequiredField {
		task ("Given that the user goes to add a new suite without name") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Suites");

			TestraySuites.addSuite(
				suiteDescription = "",
				suiteName = "");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}