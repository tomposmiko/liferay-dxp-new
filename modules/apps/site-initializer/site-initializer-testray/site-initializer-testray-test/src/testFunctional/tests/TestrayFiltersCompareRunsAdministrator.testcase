@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var caseResultName = "case result 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("create all objects: projects, routine, teams, components, cases, case type, enviroment factors, product version, build, category, options, run and case results") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = "Routine 1");

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = "Case Type 1",
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addCases(
				caseName = "Case 2",
				caseType = "Case Type 1",
				componentName = ${componentName},
				priority = 5,
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = "7.0",
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "7.0",
				projectName = ${projectName},
				routineName = "Routine 1");

			JSONTestray.addRun(
				buildName = "Build 1",
				runName = "Run 1");

			JSONTestray.addRun(
				buildName = "Build 1",
				runName = "Run 2");

			JSONTestray.addCaseResult(
				buildName = "Build 1",
				caseName = "Case 1",
				caseResultName = "case result 1",
				componentName = ${componentName},
				runName = "Run 1");

			JSONTestray.addCaseResult(
				buildName = "Build 1",
				caseName = "Case 2",
				caseResultName = "case result 2",
				componentName = ${componentName},
				runName = "Run 2");
		}

		task ("Go to the build page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			TestrayBuild.goToBuild(buildName = ${buildName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = "1.2");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = "7.0");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "routines",
			objectName = "Routine 1");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = "Case Type 1");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "factorcategories",
			objectName = "Category 1");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-162623 | Test Summary: Verify if as an Administrator I am able to filter the cases Tab in a Run Comparison Result by case name"
	@priority = 3
	test AdminCanFilterCasesTabInRunComparisonResultByCaseName {
		task ("Given that the user select two runs for compare runs") {
			Testray.projectTabNavigator(navTabName = "Runs");

			TestrayContextMenu.clickContextMenuProjects(name = "Run 1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Run A");

			TestrayContextMenu.clickContextMenuProjects(name = "Run 2");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Run B");

			TestrayManage.selectOptionsManage(itemValue = "Compare Runs");

			Button.click(button = "Compare Runs");

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("And that the user has two cases different in the table") {
			AssertElementPresent(
				key_projectName = "Case 1",
				locator1 = "Testray#ITEM_NAME");

			AssertElementPresent(
				key_projectName = "Case 2",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("When the user filter a compare runs by case name") {
			TestrayFilter.clickFilter();

			ScrollWebElementIntoView(
				key_projectName = "Case 2",
				locator1 = "Testray#ITEM_NAME");

			Type(
				key_fieldLabel = "Case Name",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Case 1");

			Button.click(button = "Apply");
		}

		task ("Then the user see case 1 in the table") {
			AssertElementPresent(
				key_projectName = "Case 1",
				locator1 = "Testray#ITEM_NAME");
		}

		task ("And do not see case 2 in the table") {
			AssertElementNotPresent(
				key_projectName = "Case 2",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-162623 | Test Summary: Verify if as an Administrator I am able to filter the cases Tab in a Run Comparison Result by priority"
	@priority = 3
	test AdminCanFilterDetailsTabInRunComparisonResultByPriority {
		task ("Given that the user select two runs for compare runs") {
			Testray.projectTabNavigator(navTabName = "Runs");

			TestrayContextMenu.clickContextMenuProjects(name = "Run 1");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Run A");

			TestrayContextMenu.clickContextMenuProjects(name = "Run 2");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Run B");
		}

		task ("And that the user has two priority different in the table") {
			TestrayManage.selectOptionsManage(itemValue = "Compare Runs");

			Button.click(button = "Compare Runs");

			Testray.projectTabNavigator(navTabName = "Cases");

			AssertElementPresent(
				key_projectName = 3,
				locator1 = "Testray#ITEM_NAME");

			AssertElementPresent(
				key_projectName = 5,
				locator1 = "Testray#ITEM_NAME");
		}

		task ("When the user filter a compare runs by priority") {
			TestrayFilter.clickFilter();

			ScrollWebElementIntoView(
				key_projectName = "Case 2",
				locator1 = "Testray#ITEM_NAME");

			Select(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Priority",
				value1 = 3);

			Button.click(button = "Apply");
		}

		task ("Then the user see priority 3 in the table") {
			AssertElementPresent(
				key_projectName = 3,
				locator1 = "Testray#ITEM_NAME");
		}

		task ("And do not see priority 5 in the table") {
			AssertElementNotPresent(
				key_projectName = 5,
				locator1 = "Testray#ITEM_NAME");
		}
	}

}