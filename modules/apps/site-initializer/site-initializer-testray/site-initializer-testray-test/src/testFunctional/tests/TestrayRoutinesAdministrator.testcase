@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";
	var projectName = "Project 1";
	var routineName = "Routine 1";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Go to Testray, Create Project and change pagination") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Automation ID: LPS-160583 | Test Summary: Verify if as an Administrator I should be able to add and delete a Routine with Default Environment Factors"
	@priority = 5
	test AdminCanAddAndDeleteRoutineWithDefaultEnvironmentFactors {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("And that the user add default environments factors") {
			TestrayRoutines.goToRoutine(routineName = ${routineName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = "Environment Factors 1");
		}

		task ("Then the routine is deleted with predefined environment factors, they should not appear in the list") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			TR2Utils.clickBreadcrumb(text = ${projectName});

			Testray.projectTabNavigator(navTabName = "Routines");

			Testray.assertItemNotPresent(itemName = ${routineName});
		}

		task ("Delete objects") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");
		}
	}

	@description = "Automation ID: LPS-160582 | Test Summary: Verify if as an Administrator I am able to add a Routine"
	@priority = 5
	test AdminCanAddRoutine {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("Then the Routine should appear on the list") {
			Testray.assertItemName(text = ${routineName});
		}
	}

	@description = "Automation ID: LPS-160581 | Test Summary: Verify if as an Administrator I am able to delete a Routine"
	@priority = 5
	test AdminCanDeleteRoutine {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("Then the routine should appear on the list") {
			Testray.assertItemName(text = ${routineName});

			TestrayLayout.clickResultsOnSidebar();
		}

		task ("And when a routine is deleted") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});
		}

		task ("Then the routine should not appear on the list") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.assertItemNotPresent(itemName = ${routineName});
		}
	}

	@description = "Automation ID: LPS-160586 | Test Summary: Verify if as an Administrator I should be able to delete a routine that contains builds"
	@priority = 5
	test AdminCanDeleteRoutineWithBuilds {
		task ("Given that the user add a new Routine and a new Case") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addComponent(
				componentName = "Component 1",
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = "Case Type 1");

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = "Case Type 1",
				componentName = "Component 1",
				projectName = ${projectName});

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Routines");
		}

		task ("When the user goes add a new build with enviroments") {
			JSONTestray.addEnvironmentFactors(environmentFactorsName = "Environment Factors 1");

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "1.2",
				projectName = ${projectName},
				routineName = ${routineName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});

			Testray.assertItemName(text = "Build 1");

			TestrayLayout.clickResultsOnSidebar();
		}

		task ("And when a routine is deleted") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});
		}

		task ("Then the routine should not appear on the list") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.assertItemNotPresent(itemName = ${routineName});
		}

		task ("Delete objects") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");
		}
	}

	@description = "This is a test for LPS-160580 - Verify if as an Administrator I am able to edit a Routine"
	@priority = 5
	test AdminCanEditRoutine {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("When the user goes to edit the Routine and change the name") {
			SelectFrameTop();

			TestrayRoutines.editRoutine(
				newNameRoutine = "Routine 1 Edited",
				routineName = ${routineName});
		}

		task ("Then the Routine should be updated on the list") {
			Testray.assertItemName(text = "Routine 1 Edited");
		}
	}

	@description = "This is a test for LPS-160585 - Verify if as an Administrator I should not be able to add a duplicate routine"
	@priority = 5
	test AdminCanNotAddDuplicateRoutine {
		task ("Given that the user add Routine with duplicated name") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.createRoutine(key_name = ${routineName});
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Routine name already exists");
		}
	}

	@description = "This is a test for LPS-164145 - Verify that the user can not create a routine if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewRequiredField {
		task ("Given that the user add a new Routine without name") {
			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.createRoutine(key_name = "");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

	@description = "This is a test for LPS-164144 - Verify the user can access a project on Project Directory"
	@priority = 3
	test CanGoToProjectDirectory {
		task ("Given that the user add a new Project") {
			JSONTestray.addProject(
				projectDescription = "Project Description 2",
				projectName = "Project 2");
		}

		task ("And the user goes to the new Project from the project directory") {
			Testray.goToProjectPage(projectName = ${projectName});

			Testray.assertProjectTitleHeader(projectName = ${projectName});

			TestrayDropdown.selectProjectDirectory(project = "Project 2");
		}

		task ("Then the user goes to another project") {
			Testray.assertProjectTitleHeader(projectName = "Project 2");
		}

		task ("Delete project") {
			JSONTestrayAPI.deleteProject(projectName = "Project 2");
		}
	}

}