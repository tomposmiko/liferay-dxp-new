@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite();

			Refresh();
		}

		task ("Go to Testray, Create Project and change pagination") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Testray.deleteAllProjects();

		Testray.tearDownCP();

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-160583 - Verify if as an Administrator I should be able to add and delete a Routine with Default Environment Factors"
	@priority = "5"
	test AdminCanAddAndDeleteRoutineWithDefaultEnvironmentFactors {
		task ("Given that the user add a new Routine") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");
		}

		task ("And that the user add default environments factors") {
			TestrayContextMenu.clickContextMenuProjects(name = "Routines_1 Routine");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Default Environment Factors");

			TestrayBuild.selectDefaultEnvironmentFactors(
				label = "Application Server",
				label1 = "Browser",
				listCategory = "Application Server,Browser",
				listOption = "JBoss 6.1",
				listOption1 = "Chrome x");
		}

		task ("Then the routine is deleted with predefined environment factors, they should not appear in the list") {
			TestrayRoutines.deleteRoutine(itemName = "Routines_1 Routine");

			Testray.assertItemNotPresent(itemName = "Routines_1 Routine");
		}
	}

	@description = "This is a test for LPS-160582 - Verify if as an Administrator I am able to add a Routine"
	@priority = "5"
	test AdminCanAddRoutine {
		task ("Given that the user add a new Routine") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");
		}

		task ("Then the Routine should appear on the list") {
			Testray.assertItemName(key_name = "Routines_1 Routine");
		}
	}

	@description = "This is a test for LPS-160581 - Verify if as an Administrator I am able to delete a Routine"
	@priority = "5"
	test AdminCanDeleteRoutine {
		task ("Given that the user add a new Routine") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");
		}

		task ("Then the routine should appear on the list") {
			Testray.assertItemName(key_name = "Routines_1 Routine");
		}

		task ("And when a routine is deleted") {
			TestrayRoutines.deleteRoutine(itemName = "Routines_1 Routine");
		}

		task ("Then the routine should not appear on the list") {
			Testray.assertItemNotPresent(itemName = "Routines_1 Routine");
		}
	}

	@description = "This is a test for LPS-160586 - Verify if as an Administrator I should be able to delete a routine that contains builds "
	@priority = "5"
	test AdminCanDeleteRoutineWithBuilds {
		task ("Given that the user add a new Routine and a new Case") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			TestrayManage.createTeam(teamName = "Components_1 Team");

			TestrayManage.closeModalInOptions();

			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(
				componentName = "Components_1 Project 1",
				teamName = "Components_1 Team");

			Refresh();

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");

			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");

			Testray.projectTabNavigator(navTabName = "Cases");

			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = "40",
				priority = "5",
				steps = "Auto Test Steps");

			Testray.projectTabNavigator(navTabName = "Routine");
		}

		task ("When the user goes add a new build with enviroments") {
			TestrayContextMenu.clickContextMenuProjects(name = "Routines_1 Routine");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Default Environment Factors");

			TestrayBuild.selectDefaultEnvironmentFactors(
				label = "Application Server",
				label1 = "Browser",
				listCategory = "Application Server,Browser",
				listOption = "Tomcat 6.0",
				listOption1 = "Chrome 57");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.createBuild(
				addVersion = "1.2",
				caseName = "Cases_1 Case",
				description = "Routines_4 Build Description",
				dropdownItem = "New Build",
				fieldName = "Routines_4 Build",
				gitHash = "12345",
				productVersion = "1.2",
				routine = "Routines_1 Routine");

			Testray.assertItemName(key_name = "Routines_4 Build");

			TestrayLayout.clickResultsOnSidebar();
		}

		task ("And when a routine is deleted") {
			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");

			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.deleteRoutine(itemName = "Routines_1 Routine");
		}

		task ("Then the routine should not appear on the list") {
			Testray.assertItemNotPresent(itemName = "Routines_1 Routine");
		}
	}

	@description = "This is a test for LPS-160580 - Verify if as an Administrator I am able to edit a Routine"
	@priority = "5"
	test AdminCanEditRoutine {
		task ("Given that the user add a new Routine") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");
		}

		task ("When the user goes to edit the Routine and change the name") {
			SelectFrameTop();

			TestrayRoutines.editRoutine(
				newNameRoutine = "Routines_1 Routine Edited",
				routineName = "Routines_1 Routine");
		}

		task ("Then the Routine should be updated on the list") {
			Testray.assertItemName(key_name = "Routines_1 Routine Edited");
		}
	}

	@description = "This is a test for LPS-160585 - Verify if as an Administrator I should not be able to add a duplicate routine"
	@priority = "5"
	test AdminCanNotAddDuplicateRoutine {
		task ("Given that the user add Routine with duplicated name") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Routine name already exists");
		}
	}

	@description = "This is a test for LPS-164145 - Verify that the user can not create a routine if all the required fields are not filled in"
	@priority = "3"
	test AdminCanViewRequiredField {
		task ("Given that the user add a new Routine without name") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

	@description = "This is a test for LPS-164144 - Verify the user can access a project on Project Directory"
	@priority = "3"
	test CanGoToProjectDirectory {
		task ("Given that the user add a new Project") {
			Testray.createProjectTestray(
				description = "Projects_2 Description",
				key_name = "Projects_2 Project");

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");
		}

		task ("And the user goes to the new Project from the project directory") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.assertProjectTitleHeader(projectName = "Projects_1 Project");

			TestrayDropdown.selectProjectDirectory(project = "Projects_2 Project");
		}

		task ("Then the user goes to another project") {
			Testray.assertProjectTitleHeader(projectName = "Projects_2 Project");
		}
	}

}