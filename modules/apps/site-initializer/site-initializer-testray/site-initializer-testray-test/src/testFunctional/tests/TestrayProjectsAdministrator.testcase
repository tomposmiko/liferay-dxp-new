@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Testray.addTestraySite();

		Refresh();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		TestrayRoutines.deleteRoutineSetup();

		Testray.deleteAllProjects();

		Testray.tearDownCP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-160539. Verify if as an Administrator I am able to add a Project"
	@priority = "5"
	test AdminCanAddProject {
		task ("Go to Testray and Create Project") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Project Description",
				key_name = "Projects_1 Project");
		}

		task ("Change pagination and Assert it the project was created") {
			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");

			Testray.assertItemName(key_name = "Projects_1 Project");
		}
	}

	@description = "This is a test for LPS-160536. Verify that as an Administrator I am able to add a Project from the dropdown"
	@priority = "4"
	test AdminCanAddProjectFromDropdown {
		task ("Go to Testray and Create Project") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectByDropdown(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");
		}

		task ("Change pagination, go to project and Assert project title") {
			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");

			Testray.assertItemName(key_name = "Projects_1 Project");
		}
	}

	@description = "This is a test for LPS-160538. Verify if as an Administrator I am able to delete a Project"
	@priority = "5"
	test AdminCanDeleteProject {
		task ("Go to Testray and Create Project") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");
		}

		task ("Delete the project and assert has been deleted") {
			Testray.deleteProject(nameProject = "Projects_1 Project");

			Testray.assertItemNotPresent(key_name = "Projects_1 Project");
		}
	}

	@description = "This is a test for LPS-160537. Verify if as an Administrator I am able to edit a Project name and description"
	@priority = "5"
	test AdminCanEditProject {
		task ("Go to Testray, Create Project and change pagination") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");
		}

		task ("Edit Project name and description and change pagination") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			Testray.editProjectTestray(
				description = "Projects_1 Project Description Edited",
				name = "Projects_1 Project Edited");

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");
		}

		task ("Go to Home Page and Assert it the name and description has been edited") {
			TestrayLayout.clickResultsOnSidebar();

			Testray.assertItemName(key_name = "Projects_1 Project Edited");

			Testray.assertProjectDescription(value = "Projects_1 Project Description Edited");
		}
	}

	@description = "This is a test for LPS-160541. Verify if as an Administrator I should not be able to add a duplicate Project"
	@priority = "5"
	test AdminCanNotAddDuplicateProject {
		task ("Go to Testray, Create Project duplicate") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Project name already exists");
		}
	}

	@description = "This is a test for LPS-164076 Verify that the user can not create a project if all the required fields are not filled in"
	@priority = "3"
	test AdminCanViewWarningMessage {
		task ("Go to Testray, Create Project and create product version") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "",
				key_name = "");
		}

		task ("Assert a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

	@description = "This is a test for LPS-160898. Verify if as an Administrator I should be able to delete a project that contains routines without associated builds"
	@priority = "5"
	test CanDeleteProjectsThatContainRoutinesWithoutAssociatedBuilds {
		task ("Create project, change pagination and create Routine") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");

			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Projects_1 Routine");
		}

		task ("Delete the project and assert it was deleted") {
			Testray.deleteProject(nameProject = "Projects_1 Project");

			Testray.assertItemNotPresent(key_name = "Projects_1 Project");
		}
	}

	@description = "This is a test for LPS-160897. Verify if as an Administrator I should not be able to delete a project that contains routines with associated builds"
	@priority = "5"
	test CannotDeleteProjectsThatContainRoutinesWithAssociatedBuilds {
		task ("Go to Testray and create a Project") {
			ApplicationsMenu.gotoSite(site = "Testray 2");

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");
		}

		task ("Go to created project and add a new team") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			TestrayManage.createTeam(teamName = "Components_1 Team");

			TestrayManage.closeModalInOptions();
		}

		task ("Go to created project and add a component") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(
				componentName = "Components_1 Project 1",
				teamName = "Components_1 Team");

			Refresh();
		}

		task ("Create a new Routine and a new Case") {
			Testray.changePagination(
				numberItems = "20",
				valuePagination = "150");

			Testray.goToProjectPage(projectName = "Projects_1 Project");

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");

			Testray.projectTabNavigator(navTabName = "Cases");

			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Automated Functional Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = "40",
				priority = "5",
				steps = "Auto Test Steps");

			Testray.projectTabNavigator(navTabName = "Routine");
		}

		task ("Add a new build with enviroments") {
			TestrayContextMenu.clickContextMenuProjects(name = "Routines_1 Routine");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Default Environment Factors");

			TestrayBuild.selectDefaultEnvironmentFactors(
				label = "Application Server",
				label1 = "Browser",
				listCategory = "Application Server,Browser",
				listOption = "Tomcat 6.0",
				listOption1 = "Chrome 57");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.createBuild(
				addVersion = "1.2",
				caseName = "Cases_1 Case",
				description = "Builds_1 Project Description",
				dropdownItem = "New Build",
				fieldName = "Builds_1 Project",
				gitHash = "12345",
				productVersion = "1.2",
				routine = "Routines_1 Routine");

			Testray.assertItemName(key_name = "Builds_1 Project");
		}

		task ("Delete project and assert a warning message is displayed") {
			Testray.deleteProject(nameProject = "Projects_1 Project");

			Alert.viewErrorMessage(errorMessage = "The Project cannot be deleted because it has associated builds");
		}
	}

}