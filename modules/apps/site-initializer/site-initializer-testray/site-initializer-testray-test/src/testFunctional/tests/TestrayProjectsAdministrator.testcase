@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";
	var projectName = "Project 1";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}
	}

	tearDown {
		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-165583 | Test Summary: Verify if as an Administrator I am able to add a Project"
	@priority = 5
	test AdminCanAddProject {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#AdminCanAddProject";

		task ("When the user Create a Project") {
			Testray.createProjectTestray(
				description = "Project Description",
				key_name = "Project 1");
		}

		task ("Then can see the project in the list") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.assertItemName(key_name = "Project 1");
		}
	}

	@description = "Automation ID: LPS-160536| Test Summary: Verify that as an Administrator I am able to add a Project from the dropdown"
	@priority = 4
	test AdminCanAddProjectFromDropdown {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#AdminCanAddProjectFromDropdown";

		task ("When the user Create a Project from the dropdown") {
			Testray.createProjectByDropdown(
				description = "Project Description",
				key_name = "Project 1");
		}

		task ("Then can see the project in the list") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.assertItemName(key_name = "Project 1");
		}
	}

	@description = "Automation ID: LPS-160538| Test Summary: Verify if as an Administrator I am able to delete a Project"
	@priority = 5
	test AdminCanDeleteProject {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#AdminCanDeleteProject";

		task ("Given that the user Create a Project via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});
		}

		task ("When the project is deleted") {
			Testray.deleteProject(projectName = "Project 1");
		}

		task ("Then the project is not displayed anymore") {
			Testray.assertItemNotPresent(key_name = "Project 1");
		}
	}

	@description = "Automation ID: LPS-160537| Test Summary: Verify if as an Administrator I am able to edit a Project"
	@priority = 5
	test AdminCanEditProject {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#AdminCanEditProject";

		task ("Given that the user Create a Project") {
			Testray.createProjectTestray(
				description = "Project Description",
				key_name = "Project one");
		}

		task ("When the user edits the created project") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = "Project one");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			Testray.editProjectTestray(
				description = "Project Description Edited",
				name = "Project 1");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("Then the project are presented with details edited") {
			Testray.assertItemName(key_name = "Project 1");
		}
	}

	@description = "Automation ID: LPS-160541| Test Summary: Verify if as an Administrator I should not be able to add a duplicate Project"
	@priority = 5
	test AdminCanNotAddDuplicateProject {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#AdminCanNotAddDuplicateProject";

		task ("When the user tries to create a duplicate project") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			Testray.createProjectTestray(
				description = "Project Description",
				key_name = "Project 1");
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Project name already exists");
		}
	}

	@description = "Automation ID: LPS-164076| Test Summary: Verify that the user can not create a project if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewWarningMessage {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#AdminCanViewWarningMessage";

		task ("When the user tries to create a project without a name") {
			Testray.createProjectTestray(
				description = "",
				key_name = "");
		}

		task ("Then an error message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

	@description = "Automation ID: LPS-160898| Test Summary: Verify if as an Administrator I should be able to delete a project that contains routines without associated builds"
	@priority = 5
	test CanDeleteProjectsThatContainRoutinesWithoutAssociatedBuilds {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#CanDeleteProjectsThatContainRoutinesWithoutAssociatedBuilds";

		task ("Given that the user Create a Project without associated builds") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.createRoutine(key_name = "Routine 1");
		}

		task ("When the project is deleted") {
			Testray.deleteProject(projectName = "Project 1");
		}

		task ("Then the project is not displayed anymore") {
			Testray.assertItemNotPresent(key_name = "Project 1");
		}
	}

	@description = "Automation ID: LPS-160897| Test Summary: Verify if as an Administrator I should not be able to delete a project that contains routines with associated builds"
	@priority = 5
	test CannotDeleteProjectsThatContainRoutinesWithAssociatedBuilds {
		property test.name.skip.portal.instance = "TestrayProjectsAdministrator#CannotDeleteProjectsThatContainRoutinesWithAssociatedBuilds";

		task ("Given that the user Create a Project") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("And add a new team") {
			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			TestrayManage.createTeam(teamName = "Components_1 Team");

			TestrayManage.closeModalInOptions();
		}

		task ("And add a component") {
			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(
				componentName = "Components_1 Project 1",
				teamName = "Components_1 Team");

			Refresh();
		}

		task ("And create a new Routine and a new Case") {
			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.createRoutine(key_name = "Routines_1 Routine");

			Testray.projectTabNavigator(navTabName = "Cases");

			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 40,
				priority = 5,
				steps = "Auto Test Steps");

			Testray.projectTabNavigator(navTabName = "Routine");
		}

		task ("And add a new build with enviroments") {
			TestrayContextMenu.clickContextMenuProjects(name = "Routines_1 Routine");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Select Default Environment Factors");

			TestrayBuild.selectDefaultEnvironmentFactors(
				label = "Application Server",
				label1 = "Browser",
				listCategory = "Application Server,Browser",
				listOption = "Tomcat 6.0",
				listOption1 = "Chrome 57");

			TestrayRoutines.goToRoutine(routineName = "Routines_1 Routine");

			TestrayBuild.createBuild(
				addVersion = "1.2",
				caseName = "Cases_1 Case",
				description = "Builds_1 Project Description",
				dropdownItem = "New Build",
				fieldName = "Builds_1 Project",
				gitHash = 12345,
				productVersion = "1.2",
				routine = "Routines_1 Routine");

			Testray.assertItemName(key_name = "Builds_1 Project");
		}

		task ("When the user tries to delete a project with associated constructions") {
			Testray.deleteProject(projectName = ${projectName});
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Project cannot be deleted because it has associated builds");
		}
	}

}