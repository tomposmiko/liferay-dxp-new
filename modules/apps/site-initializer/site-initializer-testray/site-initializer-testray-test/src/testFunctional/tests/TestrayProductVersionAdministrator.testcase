@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var productVersion = "1.2";
	var projectName = "Project 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});
		}

		task ("Given that I create all the necessary objects") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "productversions",
			objectName = ${productVersion});

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Automation ID: LPS-160531 | Test Summary: Verify if As an Administrator I am able to add Product Versions"
	@priority = 5
	test AdminCanAddProductVersion {
		task ("Given that I create a new 'Product Version' via API") {
			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});
		}

		task ("When I go to Manage Product Version") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Product Versions");
		}

		task ("Then I assert that the 'Product Version' was created") {
			Testray.assertItemName(text = ${productVersion});
		}
	}

	@description = "Automation ID: LPS-160533 | Test Summary: Verify if as an Administrator I am able to delete Product Versions"
	@priority = 5
	test AdminCanDeleteProductVersion {
		task ("Given that I create a new 'Product Version' via API") {
			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});
		}

		task ("When I go to Manage Product Version and delete the created version") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Product Versions");

			TestrayManage.deleteProductVersion(
				itemManage = "Delete",
				versionName = ${productVersion});
		}

		task ("Then I should be able to tell that the version has been deleted") {
			Testray.assertItemNotPresent(text = ${productVersion});
		}
	}

	@description = "Automation ID: LPS-160532 | Test Summary: Verify if as an Administrator I am able to Edit Product Versions"
	@priority = 5
	test AdminCanEditProductVersion {
		task ("Given that I create a new 'Product Version' via API") {
			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});
		}

		task ("When I go to Manage Product Version") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Product Versions");
		}

		task ("Then I should be able to edit an already created version") {
			TestrayManage.editProductVersion(
				caseName = "1.3.x",
				itemManage = "Edit",
				valueName = ${productVersion});

			Testray.assertItemName(text = "1.3.x");
		}
	}

	@description = "Automation ID: LPS-160534 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate Product Versions"
	@priority = 5
	test AdminCanNotAddDuplicateProductVersion {
		task ("Given that I create a new 'Product Version' via API") {
			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});
		}

		task ("When I go to Manage Product Version and I try to duplicate a version") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayManage.createProductVersion(
				manageOption = "Manage Product Versions",
				nameOptions = ${projectName},
				version = ${productVersion});
		}

		task ("Then I assert that the error message appears") {
			Alert.viewErrorMessage(errorMessage = "The Product Version name already exists");
		}
	}

	@description = "Automation ID: LPS-161334 | Test Summary: Verify if as an Administrator I can see the warning message 'This field is required' when trying to save without a name"
	@priority = 3
	test AdminCanViewWarningMessage {
		task ("Given I go to the Manage Product Versions page and try to create a version without filling in the 'Name' field") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayManage.createProductVersion(
				manageOption = "Manage Product Versions",
				nameOptions = ${projectName});
		}

		task ("Then I assert that the 'Name' field is required") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}