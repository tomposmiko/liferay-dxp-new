@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTestraySite(siteName = ${testSiteName});

			Refresh();
		}

		task ("Go to Testray, Create Project and change pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.createProjectTestray(
				description = "Projects_1 Description",
				key_name = "Projects_1 Project");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("Go to created project and add a new team") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Teams");

			TestrayManage.createTeam(teamName = "Components_1 Team");

			TestrayManage.closeModalInOptions();
		}

		task ("Go to created project and add a component") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Manage Components");

			Testray.addNewComponent(
				componentName = "Components_1 Project 1",
				teamName = "Components_1 Team");

			Testray.addNewComponent(
				componentName = "Components_1 Project 2",
				teamName = "Components_1 Team");

			Refresh();
		}

		task ("Go to Testray 2 and change the pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("Go to project and go to tab cases") {
			Testray.goToProjectPage(projectName = "Projects_1 Project");

			Testray.projectTabNavigator(navTabName = "Cases");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Testray.deleteAllProjects();

		Testray.tearDownCP();

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for LPS-163753 - Verify as an administrator I can add another Cases in the Add Another button"
	@priority = 3
	test AdminCanAddAnotherCase {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				addAnotherCase = "Add Another",
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");

			Button.click(button = "Save");
		}

		task ("Then the case is created with the new infos") {
			Button.click(button = "Cancel");

			TestrayCases.verifyCase(
				caseName = "Copy - Cases_1 Case",
				casePriority = 5,
				key_caseComponent = "Components_1 Project 1");
		}
	}

	@description = "This is a test for LPS-156790 - Verify if as an Administrator I am able to add Cases without Subcomponents"
	@priority = 5
	test AdminCanAddCase {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");
		}

		task ("Then the case is created with the new infos") {
			TestrayCases.verifyCase(
				caseName = "Cases_1 Case",
				casePriority = 5,
				key_caseComponent = "Components_1 Project 1");
		}
	}

	@description = "This is a test for LPS-156791 - Verify if as an Administrator I am able to delete Cases without Subcomponents"
	@priority = 5
	test AdminCanDeleteCase {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");
		}

		task ("When the user delete a case") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");
		}

		task ("Then the case should no longer be found") {
			Testray.assertItemNotPresent(itemName = "Cases_1 Case");
		}
	}

	@description = "This is a test for LPS-167574 - Verify that an administrator can delete cases in the 'Select Cases to Export' modal"
	@priority = 3
	test AdminCanDeleteCasesInModalExportCases {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");

			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("When the user select a cases for export") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Export Cases");

			Button.click(button = "Add Cases");

			Click.clickAtNotVisible(
				key_checkboxOption = "Cases_1 Case",
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");

			Button.click(button = "Select Cases");

			Testray.assertItemName(key_name = "Cases_1 Case");
		}

		task ("Then can delete this case and it no longer appears in the list") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			Testray.assertItemNotPresent(key_name = "Cases_1 Case");
		}
	}

	@description = "This is a test for LPS-156793 - Verify if as an Administrator I am able to edit Cases without Subcomponents"
	@priority = 5
	test AdminCanEditCase {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");

			TestrayCases.verifyCase(
				caseName = "Cases_1 Case",
				casePriority = 5,
				key_caseComponent = "Components_1 Project 1");
		}

		task ("And the user goes to edit a case") {
			TestrayContextMenu.clickContextMenuProjects(name = "Cases_1 Case");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			TestrayCases.editCases(
				caseName = "Cases_1 Case Edited",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 2",
				description = "Cases_1 Case Description Edited",
				duration = 30,
				priority = 4,
				steps = "http://test.edit.com");
		}

		task ("Then the case is edited with the new infos") {
			TestrayCases.verifyCase(
				caseName = "Cases_1 Case Edited",
				casePriority = 4,
				key_caseComponent = "Components_1 Project 2");
		}
	}

	@description = "This is a test for LPS-156916 - Verify if as an Administrator I am able to Export Cases from another Project"
	@ignore = "Test Stub"
	@priority = 3
	test AdminCanExportCase {

		// TODO LPS-156916 AdminCanExportCase pending implementation

	}

	@description = "This is a test for LPS-156919 - Verify if As an Administrator, I should be able to link and unlink Requirements to a Case"
	@priority = 3
	test AdminCanLinkAndUnlinkRequirements {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");
		}

		task ("And Add a new Requirement") {
			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayRequirements.addRequirement(
				componentId = "Components_1 Project 1",
				linkTitle = "ATF_Requirements Link Title",
				linkURL = "https://www.google.com",
				requirementDescription = "ATF_Requirements Description",
				requirementName = "ATF_Requirements Summary");
		}

		task ("When the user goes to cases and link a requirements") {
			Testray.projectTabNavigator(navTabName = "Cases");

			Testray.goToProjectPage(projectName = "Cases_1 Case");

			Testray.projectTabNavigator(navTabName = "Requirements");

			TestrayCases.linkCasesRequirement(
				buttonText = "Select Requirements",
				linkText = "Link Requirements",
				requirementName = "ATF_Requirements Summary");
		}

		task ("Then the requirements should be displayed on Case page") {
			TestrayCases.verifyLinkCaseRequirement(
				component = "Components_1 Project 1",
				summary = "ATF_Requirements Summary",
				teamName = "Components_1 Team");
		}

		task ("When the user goes to cases and unlink a requirement") {
			TestrayCases.linkCasesRequirement(
				buttonText = "Select Requirements",
				linkText = "Link Requirements",
				requirementName = "ATF_Requirements Summary");
		}

		task ("Then the requirement should not be displayed on Case page") {
			Testray.assertItemNotPresent(itemName = "ATF_Requirements Summary");
		}
	}

	@description = "This is a test for LPS-166791 - Verify that cases be added with an estimated duration less than zero"
	@priority = 4
	test AdminCanNotAddCasesWithEstimatedDurationLessThanZero {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "",
				duration = "-1",
				priority = 5,
				steps = "");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Estimated Duration",
				warningMessage = "estimatedDuration must be greater than or equal to 0");
		}
	}

	@description = "This is a test for LPS-156933 - Verify if as an Administrator I should not be able to add a duplicate case"
	@priority = 5
	test AdminCannotAddDuplicatedCase {
		task ("Given that the user add a new Case duplicate") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");

			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Case name already exists");
		}
	}

	@description = "This is a test for LPS-167573 - Verify that as administrator cases cannot be exported without linked Cases"
	@priority = 3
	test AdminCannotExportCasesWithoutCasesLinked {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "Cases_1 Case",
				caseTypeId = "Manual Test",
				componentId = "Components_1 Project 1",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");

			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);
		}

		task ("When the user try export cases without linked cases") {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_1 Project");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Export Cases");
		}

		task ("Then a warning message appears") {
			AssertElementPresent(
				key_text = "There are no linked cases.",
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_REPLACEMENT_ALERT");
		}
	}

	@description = "This is a test for LPS-156950 - Verify if as an Administrator I should be able to Sort by Errors"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSortErrors {

		// TODO LPS-156950 AdminCanSortErrors pending implementation

	}

	@description = "This is a test for LPS-156947 - Verify if as an Administrator I should be able to Sort by Product Version"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSortProductVersion {

		// TODO LPS-156947 AdminCanSortProductVersion pending implementation

	}

	@description = "This is a test for LPS-156949 - Verify if as an Administrator I should be able to Sort by Status"
	@ignore = "Test Stub"
	@priority = 4
	test AdminCanSortStatus {

		// TODO LPS-156949 AdminCanSortStatus pending implementation

	}

	@description = "This is a test for LPS-164133 - Verify that the user can not create a case if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewRequiredField {
		task ("Given that the user add a new Case") {
			TestrayCases.typeCasesField(
				caseName = "",
				caseTypeId = "",
				componentId = "",
				description = "Cases_1 Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Type",
				warningMessage = "caseTypeId is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Main Component",
				warningMessage = "componentId is a required field");
		}
	}

}