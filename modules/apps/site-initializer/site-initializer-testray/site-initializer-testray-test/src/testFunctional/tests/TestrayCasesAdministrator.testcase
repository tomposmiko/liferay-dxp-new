@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Login and create a Testray Site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Testray.addTR2Site(siteName = ${testSiteName});
		}

		task ("Given that a Testray project, team, and component are created") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONTestrayAPI.deleteProject(projectName = ${projectName});

		JSONTestrayAPI.deleteObjectViaAPI(
			object = "casetypes",
			objectName = ${caseType});

		Testray.testrayApisTearDown();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-165584 | Test Summary: Verify as an administrator I can add another Cases in the Add Another button"
	@priority = 3
	test AdminCanAddAnotherCase {
		task ("Given I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("When I create a new case and select the option Add another") {
			TestrayCases.typeCasesField(
				addAnotherCase = "Add Another",
				caseName = ${caseName},
				caseTypeId = "Manual Test",
				componentId = "Component 1",
				description = "Case Description",
				duration = 60,
				priority = 3,
				steps = "Auto Test Steps");

			Button.click(button = "Save");
		}

		task ("Then I assert that a new Case was created and a copy of the new Case as well") {
			Button.click(button = "Cancel");

			TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Case 1",
				casePriority = 3);

			TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Copy - Case 1",
				casePriority = 3);
		}
	}

	@description = "Story ID: LPS-146923 | Test Summary: Verify if as an Administrator I am able to add Cases without Subcomponents"
	@priority = 5
	test AdminCanAddCase {
		task ("Given that I create a new Case via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("When I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("Then the case is created with the new infos") {
			TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Case 1",
				casePriority = 3);
		}
	}

	@description = "Story ID: LPS-165583 | Test Summary: Verify if as an Administrator I am able to delete Cases without Subcomponents"
	@priority = 5
	test AdminCanDeleteCase {
		task ("Given that I create a new Case via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("And I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("When the user delete a case") {
			TestrayContextMenu.clickContextMenuProjects(name = ${caseName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");
		}

		task ("Then the case should no longer be found") {
			Testray.assertItemNotPresent(text = ${caseName});
		}
	}

	@description = "Story ID: LPS-165583 | Test Summary: Verify that an administrator can delete cases in the 'Select Cases to Export' modal"
	@priority = 3
	test AdminCanDeleteCasesInModalExportCases {
		task ("Given that I create a new Case via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("And I select a case for export") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Export Cases");

			Button.click(button = "Add Cases");

			Click.clickAtNotVisible(
				key_checkboxOption = ${caseName},
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");

			Button.click(button = "Select Cases");

			Testray.assertItemName(text = ${caseName});
		}

		task ("When I delete this case") {
			TestrayContextMenu.clickContextMenuProjects(name = ${caseName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");
		}

		task ("Then I assert that Case is no longer present") {
			Testray.assertItemNotPresent(text = ${caseName});
		}
	}

	@description = "Story ID: LPS-146923 | Test Summary: Verify if as an Administrator I am able to edit Cases without Subcomponents"
	@priority = 5
	test AdminCanEditCase {
		task ("Given that I create a new Case via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("When I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("And the user goes to edit a case") {
			TestrayContextMenu.clickContextMenuProjects(name = ${caseName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			TestrayCases.editCases(
				caseName = "Case Edited",
				caseTypeId = "Case Type 1",
				componentId = "Component 1",
				description = "Case Description",
				duration = 30,
				priority = 3,
				steps = "http://test.edit.com");
		}

		task ("Then the case is edited with the new infos") {
			TestrayCases.verifyCase(
				caseComponent = "Component 1",
				caseName = "Case Edited",
				casePriority = 3);
		}
	}

	@description = "Story ID: LPS-165583 | Test Summary: Verify if as an Administrator I am able to Export Cases from another Project"
	@ignore = "true"
	@priority = 3
	test AdminCanExportCase {

		// TODO LPS-156916 AdminCanExportCase pending implementation

	}

	@description = "Story ID: LPS-160751 | Test Summary: Verify if As an Administrator, I should be able to link and unlink Requirements to a Case"
	@priority = 3
	test AdminCanLinkAndUnlinkRequirements {
		task ("Given that I create a new Case and new Requirement via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addRequirement(
				componentName = ${componentName},
				linkTitle = "ATF Requirement Link",
				projectName = ${projectName},
				requirementName = "Requirement Summary");
		}

		task ("And I go to the Requirement page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");

			Testray.goToProjectPage(projectName = "Case 1");

			Testray.projectTabNavigator(navTabName = "Requirements");
		}

		task ("When the user goes to cases and link a requirements") {
			TestrayCases.linkCasesRequirement(
				buttonText = "Select Requirements",
				linkText = "Link Requirements",
				requirementName = "Requirement Summary");
		}

		task ("And the user goes to cases and unlink a requirement") {
			TestrayCases.linkCasesRequirement(
				buttonText = "Select Requirements",
				linkText = "Link Requirements",
				requirementName = "Requirement Summary");
		}

		task ("Then the requirement should not be displayed on Case page") {
			Testray.assertItemNotPresent(text = "Requirement Summary");
		}
	}

	@description = "Story ID: LPS-146923 | Test Summary: Verify that cases be added with an estimated duration less than zero"
	@priority = 4
	test AdminCanNotAddCasesWithEstimatedDurationLessThanZero {
		task ("Given I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("When I add a new Case with the estimated duration below 0") {
			TestrayCases.typeCasesField(
				caseName = ${caseName},
				caseTypeId = "Manual Test",
				componentId = ${componentName},
				description = "Case Description",
				duration = "-1",
				priority = 3,
				steps = "Auto Test Steps");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Estimated Duration",
				warningMessage = "estimatedDuration must be greater than or equal to 0");
		}
	}

	@description = "Story ID: LPS-165582 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate case"
	@priority = 5
	test AdminCannotAddDuplicatedCase {
		task ("Given that I create a new Case via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("And I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("When I add a new Case duplicate") {
			TestrayCases.typeCasesField(
				caseName = ${caseName},
				caseTypeId = ${caseType},
				componentId = ${componentName},
				description = "",
				duration = 60,
				priority = 3,
				steps = "Auto Test Steps");
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Case name already exists");
		}
	}

	@description = "Story ID: LPS-165583 | Test Summary: Verify that as administrator cases cannot be exported without linked Cases"
	@priority = 3
	test AdminCannotExportCasesWithoutCasesLinked {
		task ("Given that I create a new Case via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("When the user try export cases without linked cases") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Export Cases");
		}

		task ("Then a warning message appears") {
			AssertElementPresent(
				key_text = "There are no linked cases.",
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_REPLACEMENT_ALERT");
		}
	}

	@description = "Story ID: LPS-156220 | Test Summary: Verify if as an Administrator I should be able to Sort by Errors"
	@ignore = "true"
	@priority = 4
	test AdminCanSortErrors {

		// TODO LPS-156950 AdminCanSortErrors pending implementation

	}

	@description = "Story ID: LPS-156220 | Test Summary: Verify if as an Administrator I should be able to Sort by Product Version"
	@ignore = "true"
	@priority = 4
	test AdminCanSortProductVersion {

		// TODO LPS-156947 AdminCanSortProductVersion pending implementation

	}

	@description = "Story ID: LPS-156220 | Test Summary: Verify if as an Administrator I should be able to Sort by Status"
	@ignore = "true"
	@priority = 4
	test AdminCanSortStatus {

		// TODO LPS-156949 AdminCanSortStatus pending implementation

	}

	@description = "Story ID: LPS-146923 | Test Summary: Verify that the user can not create a case if all the required fields are not filled in"
	@priority = 3
	test AdminCanViewRequiredField {
		task ("Given I go to the Cases page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			Testray.projectTabNavigator(navTabName = "Cases");
		}

		task ("When I try to add a case without filling in the required fields") {
			TestrayCases.typeCasesField(
				caseName = "",
				caseTypeId = "",
				componentId = "",
				description = "Case Description",
				duration = 60,
				priority = 5,
				steps = "Auto Test Steps");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Type",
				warningMessage = "caseTypeId is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Main Component",
				warningMessage = "componentId is a required field");
		}
	}

}