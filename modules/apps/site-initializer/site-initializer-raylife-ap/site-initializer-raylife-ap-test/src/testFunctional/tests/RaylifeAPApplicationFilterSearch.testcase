@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-165493=true";
	property osgi.modules.includes = "site-initializer-raylife-ap";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Raylife AP";

	var testSiteName = "Raylife AP";
	var testSiteURL = "raylife-ap";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Raylife AP Site") {
			Site.openSitesAdmin();

			Raylife.createRaylifeSite(siteName = "Raylife D2C");

			Raylife.createRaylifeSite(siteName = "Raylife AP");
		}

		task ("Login as Scott Producer because of roles and permissions") {
			User.logoutPG();

			RaylifeAP.userLoginInRaylife(email = "scott.producer");

			RaylifeAP.goToRaylifeUserProfileMenu(raylifeSite = "Raylife AP");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		RaylifeAP.deleteAllCreatedEntries(searchTerm = "Testing");

		Raylife.tearDownCP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "Story ID: LPS-152415 | Test Summary: Verify that the filter can filter through the Auto product"
	@ignore = "true"
	@priority = 3
	test CanFilterByProduct {
	}

	@description = "Story ID: LPS-152415 | Test Summary: Verify that the filter can filter through the statuses (Bound - Incomplete - Open)"
	@ignore = "true"
	@priority = 3
	test CanFilterByStatus {
	}

	@description = "Story ID: LPS-152415 | Test Summary: Verify that the filter button is a toggle that turns the filter on and off"
	@priority = 4
	test CanViewTheFilterEnableAndDisable {
		property test.name.skip.portal.instance = "RaylifeAPApplicationFilterSearch#CanViewTheFilterEnableAndDisable";

		// Skip portal instance due to LRQA-79129. Unskip after it is resolved

		task ("Given I go to the Applications page") {
			RaylifeAPNavigator.gotoSidebarItem(itemName = "Applications");
		}

		task ("When I click on the filter icon") {
			RaylifeAP.clickOnFilter();
		}

		task ("Then I should be able to see the filter options") {
			RaylifeAP.assertViewFilterOptions(options = "Product,Status");
		}

		task ("And when I click on the filter icon again") {
			RaylifeAP.clickOnFilter();
		}

		task ("Then the filter settings are hidden") {
			RaylifeAP.assertNotViewFilterOptions(options = "Product,Status");
		}
	}

	@description = "Story ID: LPS-152415 | Test Summary: Verify that search dialog box searches for the application number, name and email address"
	@priority = 4
	test CanViewTheSearchResults {
		property test.name.skip.portal.instance = "RaylifeAPApplicationFilterSearch#CanViewTheSearchResults";

		// Skip portal instance due to LRQA-79129. Unskip after it is resolved

		task ("Given that I generate a new application") {
			RaylifeAPNavigator.gotoSidebarItem(itemName = "Dashboard");

			RaylifeApplicationModal.openNewApplicationFlow(
				insurance = "Personal",
				product = "Auto");

			RaylifeApplicationModal.typeAllNewApplicationContactInfoFields(
				apt = 0000,
				city = "New York",
				emailAddress = "test@liferay.com",
				firstName = "Testing",
				lastName = "Model",
				phoneNumber = 0123456789,
				state = "NY",
				streetAddress = "Address",
				zipCode = 12345);

			RaylifeApplicationModal.typeAllNewApplicationVehicleInfoFields(
				annualMileage = 50000,
				make = "Volvo",
				model = "v90 cross country",
				ownership = "Own",
				primaryUse = "Business",
				year = 2019);

			RaylifeApplicationModal.typeAllNewApplicationDriverInfoFields(
				ageFirstLicenced = 18,
				firstName = "Testing",
				gender = "Female",
				highestEducation = "Masters",
				lastName = "Model",
				maritalStatus = "Single",
				militaryAffiliation = "None",
				occupation = "Engineer",
				relationToContact = "Spouse");

			RaylifeApplicationModal.typeAllNewApplicationCoverageInfoFields(
				bodilyInjury = "$30,000 / $60,000",
				collisionAmount = "$2,000",
				comprehensiveAmount = "$750",
				medicalAmount = "$1,000",
				propertyDamage = "$25,000",
				uninsuredOrUnderinsuredMBI = "$30,000 / $60,000",
				uninsuredOrUnderinsuredMPD = "$150,000");

			Button.click(button = "Generate Quote");
		}

		task ("And I go to the Applications page") {
			RaylifeAPNavigator.gotoSidebarItem(itemName = "Applications");
		}

		task ("When I search for the email address of the generated application") {
			RaylifeAP.search(searchTerm = "test@liferay.com");
		}

		task ("Then I should be able to assert the result of the search") {
			RaylifeAP.assertQuantity(text = "Applications (1)");

			RaylifeAP.assertTextAtTable(
				lineColunm = 5,
				linePosition = 1,
				text = "test@liferay.com");
		}
	}

}