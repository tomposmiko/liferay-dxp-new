@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "site-initializer-raylife-ap";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Raylife AP";

	var testSiteName = "Raylife AP";
	var testSiteURL = "raylife-ap";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Raylife AP Site") {
			Site.openSitesAdmin();

			TeamExtranet.addSiteTemplateCP(
				siteName = "${testSiteName}",
				siteTemplateName = "Raylife AP");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		RaylifeAP.tearDownCP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "LPS-151795 - Verify if user can enter a valid email address"
	@priority = "5"
	test CanSignIn {
		task ("Go to Raylife AP and exit Raylife AP") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");

			var portalURL = PropsUtil.get("portal.url");

			User.logoutPG();
		}

		task ("Sign in New Account and assert the user can enter with an valid email") {
			Navigator.openSpecificURL(url = "${portalURL}/web/raylife-ap");

			AssertElementPresent(locator1 = "RaylifeAP#LOGIN_PAGE");

			RaylifeAP.signIn();

			AssertElementPresent(
				key_title = "Hi, Test Test.",
				locator1 = "RaylifeAP#DASHBOARD_HEADER");
		}
	}

	@description = "LPS-151792 - Verify if message 'Please enter a valid email address.' appers when email is not valid"
	@priority = "5"
	test CanViewMessageEmailNotValid {
		task ("Go to Raylife AP and exit Raylife AP") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");

			var portalURL = PropsUtil.get("portal.url");

			User.logoutPG();
		}

		task ("Sign in New Account and assert the email invalid message") {
			Navigator.openSpecificURL(url = "${portalURL}/web/raylife-ap");

			RaylifeAP.signIn(
				emailAddress = "test",
				password = "test");

			AssertElementPresent(locator1 = "RaylifeAP#EMAIL_INVALID_MESSAGE");

			User.firstLoginPG();
		}
	}

	@description = "LPS-151790 - Check that the message 'This field is required' appears when the e-mail field is required"
	@priority = "5"
	test CanViewMessageFieldEmailRequired {
		task ("Go to Raylife AP and exit Raylife AP") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");

			var portalURL = PropsUtil.get("portal.url");

			User.logoutPG();
		}

		task ("Sign in New Account and assert the field email required message") {
			Navigator.openSpecificURL(url = "${portalURL}/web/raylife-ap");

			RaylifeAP.signIn(
				emailAddress = "",
				password = "test");

			AssertElementPresent(locator1 = "RaylifeAP#FIELD_REQUIRED_MESSAGE");

			User.firstLoginPG();
		}
	}

	@description = "LPS-151791 - Check that the message 'This field is required' appears when the password field is required"
	@priority = "5"
	test CanViewMessageFieldPasswordRequired {
		task ("Go to Raylife AP and exit Raylife AP") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");

			var portalURL = PropsUtil.get("portal.url");

			User.logoutPG();
		}

		task ("Sign in New Account and assert the field password required message") {
			Navigator.openSpecificURL(url = "${portalURL}/web/raylife-ap");

			RaylifeAP.signIn(
				emailAddress = "test@liferay.com",
				password = "");

			AssertElementPresent(locator1 = "RaylifeAP#FIELD_REQUIRED_MESSAGE");

			User.firstLoginPG();
		}
	}

}