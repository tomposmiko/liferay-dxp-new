/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.dynamic.data.lists.uad.anonymizer;

import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.service.AssetEntryLocalService;
import com.liferay.dynamic.data.lists.model.DDLRecordVersion;
import com.liferay.dynamic.data.lists.service.DDLRecordVersionLocalService;
import com.liferay.dynamic.data.lists.uad.constants.DDLUADConstants;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.User;
import com.liferay.user.associated.data.anonymizer.DynamicQueryUADAnonymizer;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the ddl record version UAD anonymizer.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom service methods should be put in
 * {@link DDLRecordVersionUADAnonymizer}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 */
public abstract class BaseDDLRecordVersionUADAnonymizer
	extends DynamicQueryUADAnonymizer<DDLRecordVersion> {

	@Override
	public void autoAnonymize(
			DDLRecordVersion ddlRecordVersion, long userId, User anonymousUser)
		throws PortalException {

		if (ddlRecordVersion.getUserId() == userId) {
			ddlRecordVersion.setUserId(anonymousUser.getUserId());
			ddlRecordVersion.setUserName(anonymousUser.getFullName());

			autoAnonymizeAssetEntry(ddlRecordVersion, anonymousUser);
		}

		if (ddlRecordVersion.getStatusByUserId() == userId) {
			ddlRecordVersion.setStatusByUserId(anonymousUser.getUserId());
			ddlRecordVersion.setStatusByUserName(anonymousUser.getFullName());
		}

		ddlRecordVersionLocalService.updateDDLRecordVersion(ddlRecordVersion);
	}

	@Override
	public void delete(DDLRecordVersion ddlRecordVersion)
		throws PortalException {

		ddlRecordVersionLocalService.deleteDDLRecordVersion(ddlRecordVersion);
	}

	@Override
	public Class<DDLRecordVersion> getTypeClass() {
		return DDLRecordVersion.class;
	}

	protected void autoAnonymizeAssetEntry(
		DDLRecordVersion ddlRecordVersion, User anonymousUser) {

		AssetEntry assetEntry = fetchAssetEntry(ddlRecordVersion);

		if (assetEntry != null) {
			assetEntry.setUserId(anonymousUser.getUserId());
			assetEntry.setUserName(anonymousUser.getFullName());

			assetEntryLocalService.updateAssetEntry(assetEntry);
		}
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return ddlRecordVersionLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return DDLUADConstants.USER_ID_FIELD_NAMES_DDL_RECORD_VERSION;
	}

	protected AssetEntry fetchAssetEntry(DDLRecordVersion ddlRecordVersion) {
		return assetEntryLocalService.fetchEntry(
			DDLRecordVersion.class.getName(),
			ddlRecordVersion.getRecordVersionId());
	}

	@Reference
	protected AssetEntryLocalService assetEntryLocalService;

	@Reference
	protected DDLRecordVersionLocalService ddlRecordVersionLocalService;

}