@component-name = "portal-dispatch"
definition {

	property custom.properties = "cluster.link.enabled=true";
	property osgi.modules.includes = "dispatch-executor-sample";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Job Scheduler";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JobScheduler.openJobSchedulerAdmin();

			if (IsElementPresent(key_name = "Cluster Mode Test", locator1 = "JobScheduler#JOB_ITEM_NAME")) {
				JobScheduler.deleteJobItem(jobItemName = "Cluster Mode Test");
			}
		}
	}

	@priority = 4
	test CanTriggerJobWithClusterMode {
		property portal.acceptance = "true";
		property portal.release = "true";

		task ("Given cluster.link.enabled") {
			AssertConsoleTextPresent(value1 = "Autodetecting JGroups outgoing IP address and interface");
		}

		task ("And Given Scheduled job definition created") {
			JobScheduler.openJobSchedulerAdmin();

			JobScheduler.addScheduleTrigger(
				taskExecutorType = "Sample Executor",
				triggerName = "Cluster Mode Test");
		}

		task ("When in Job Scheduler Trigger the Single Node (Memory Clustered) is set") {
			JobScheduler.setJobSchedulerTrigger(
				key_name = "Cluster Mode Test",
				selectFieldLabel = "Task Execution Cluster Mode",
				selectFieldValue = "Single Node (Memory Clustered)");
		}

		task ("Then job can be triggered in the Job Scheduler") {
			JobScheduler.openJobSchedulerAdmin();

			Click(
				key_name = "Cluster Mode Test",
				locator1 = "JobScheduler#RUN_NOW_BUTTON");

			while ((IsElementNotPresent(key_name = "Cluster Mode Test", locator1 = "JobScheduler#STATUS", status = "Successful")) && (maxIterations = "200")) {
				Refresh();
			}

			AssertElementPresent(
				key_name = "Cluster Mode Test",
				locator1 = "JobScheduler#STATUS",
				status = "Successful");
		}
	}

	@priority = 4
	test ClusterModeTaskExecutionIsAvailable {
		property portal.acceptance = "true";
		property portal.release = "true";

		task ("Given cluster.link.enabled") {
			AssertConsoleTextPresent(value1 = "Autodetecting JGroups outgoing IP address and interface");
		}

		task ("And Given Scheduled job definition created") {
			JobScheduler.openJobSchedulerAdmin();

			JobScheduler.addScheduleTrigger(
				taskExecutorType = "Sample Executor",
				triggerName = "Cluster Mode Test");
		}

		task ("When in Dispatch Trigger of the scheduled job") {
			Click(
				key_name = "Cluster Mode Test",
				locator1 = "JobScheduler#JOB_ITEM_NAME");

			Click(
				key_tab = "Job Scheduler Trigger",
				locator1 = "NavTab#TAB_LINK");
		}

		task ("Then All Nodes, Single Node (Persisted), and Single Node (Memory clustered) options are available") {
			for (var option : list "All Nodes,Single Node (Memory Clustered),Single Node (Persisted)") {
				AssertElementPresent(
					key_option = ${option},
					locator1 = "JobScheduler#DISPATCH_CLUSTER_MODE_OPTION");
			}
		}
	}

}