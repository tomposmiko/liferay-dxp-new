@component-name = "extra-apps-content-targeting"
definition {
	property custom.properties = "layout.parallel.render.enable=false";
	property extraapps.plugins.includes = "content-targeting";
	property ignore.errors = "IX_DC6100CC";
	property portal.release = "false";
	property portal.upstream = "false";
	property test.run.environment = "EE";
	property testray.component.names = "Content Targeting";
	property testray.main.component.name = "Content Targeting";

	setUp {
		TestCase.setUpPortalInstance();

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test"
			);

			Site.tearDownCP();
		}
	}

	@priority = "5"
	test AddUserSegmentBlankCP {
		property content.targeting.release = "true";

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Audience Targeting"
		);

		ContentTargetingUserSegment.addCP(
			userSegmentDescription = "User Segment Description",
			userSegmentName = "User Segment Name"
		);

		PortletEntry.save();
	}
}