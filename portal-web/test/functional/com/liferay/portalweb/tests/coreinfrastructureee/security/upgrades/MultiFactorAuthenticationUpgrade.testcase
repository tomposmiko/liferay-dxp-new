@component-name = "portal-upgrades"
definition {

	property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
	property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
	property dummy.socket.proxy.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property test.smtp.server.enabled = "true";
	property testray.component.names = "Multi Factor Authentication";
	property testray.main.component.name = "Upgrades Security";

	setUp {
		Navigator.openURL();
	}

	@description = "LRQA-62443 Assert MFA OTP configuration at instance level. Verify MFA works at the instance level after upgrade from 7.3.10."
	@priority = "5"
	test ViewMFAConfigurationInInstanceLevelAfterUpgrade7310 {
		property data.archive.type = "data-archive-mfa-instance-level";
		property portal.version = "7.3.10";

		task ("Login at able.com and send otp email") {
			User.firstLoginUI(
				password = "test",
				specificUrl = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Check OTP information for test test") {
			MultiFactorAuthentication.verifyOTP(
				portalUrl = "http://www.able.com:8080",
				recipient = "test test",
				specificUrl = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("View OTP email sender") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseUrl = "http://www.able.com:8080");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}
	}

	@description = "LRQA-62443 Assert MFA OTP configuration at system level. Verify MFA works at the system level after upgrade from 7.3.10."
	@priority = "5"
	test ViewMFAConfigurationInSystemLevelAfterUpgrade7310 {
		property data.archive.type = "data-archive-mfa-system-level";
		property portal.version = "7.3.10";

		var portalUrl = PropsUtil.get("portal.url");

		task ("Login and send OTP email") {
			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Check OTP information for test test") {
			MultiFactorAuthentication.verifyOTP(
				portalUrl = "${portalUrl}",
				recipient = "test test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("View OTP email sender") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}
	}

}