@component-name = "portal-security"
definition {

	property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
	property dummy.socket.proxy.disabled = "true";
	property osgi.app.includes = "multi-factor-authentication";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property test.smtp.server.enabled = "true";
	property testray.main.component.name = "Multi Factor Authentication";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginUI();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "This is a use case for LPS-110309 and LPS-112805"
	@priority = "4"
	test AssertDescriptionsForConfigurationEntries {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertDescriptionsForConfigurationEntries";

		task ("Assert Disable multi-factor authentication system-wide message is present in Multi-Factor Authentication System configuration") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication System Configuration",
				configurationScope = "System Scope");

			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_DISABLE",
				value1 = "Disable multi-factor authentication system-wide.");
		}

		task ("Assert default descriptions at multifactor authentication") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.assertDescriptions();
		}
	}

	@description = "This is a use case for LPS-109786"
	@priority = "4"
	test AssertNotificationsAfterMFADisabledOrEnabled {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertNotificationsAfterMFADisabledOrEnabled";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure MFA and Email OTP and enable OTP") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Diable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "true");
		}

		task ("Go to able.com and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "1");

			Notifications.gotoNotifications();

			AssertTextEquals(
				key_contentBody = "Multi-factor authentication has been disabled by the system administrator and is unavailable to all instances. You will be notified when it becomes enabled again so long as you keep it enabled in Instance Settings.",
				locator1 = "Notifications#NOTIFICATIONS_CONTENT",
				value1 = "Multi-factor authentication has been disabled by the system administrator and is unavailable to all instances. You will be notified when it becomes enabled again so long as you keep it enabled in Instance Settings.");
		}

		task ("Enable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "false");
		}

		task ("Go to able.com and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "2");

			Notifications.gotoNotifications();

			AssertTextEquals(
				key_contentBody = "Multi-factor authentication has been enabled by the system administrator. If you do not want this you can disable it in Instance Settings.",
				locator1 = "Notifications#NOTIFICATIONS_CONTENT",
				value1 = "Multi-factor authentication has been enabled by the system administrator. If you do not want this you can disable it in Instance Settings.");
		}

		task ("Go to able.com and disable OTP") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");
			MultiFactorAuthentication.configureOTP(enableOTP = "false");
		}

		task ("Disable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "true");
		}

		task ("Go to able.com and and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "2");
		}

		task ("Enable mfa") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "false");
		}

		task ("Go to able.com and and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "2");
		}
	}

	@description = "This is a use case for LPS-92659"
	@priority = "5"
	test BlockedAfterReachAllowedFailedAttempts {
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#BlockedAfterReachAllowedFailedAttempts";

		var portalURL = PropsUtil.get("portal.url");

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Configure OTP failed attempts allowed and retry time out") {
			MultiFactorAuthentication.emailOTPConfiguration(
				failedAttemptsAllowed = "1",
				retryTimeout = "5");
		}

		task ("Sign out and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP email") {
			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Verify password test is not valid for test test") {
			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "test test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test",
				validOTP = "false");

			AssertElementPresent(
				key_fieldName = "emailOTPSentSubject",
				locator1 = "Message#ERROR");
		}

		task ("Verify password test is valid for Test test") {
			Pause(locator1 = "5000");

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}
	}

	@description = "This is a use case for LPS-86515"
	@priority = "5"
	test CheckOrderOfMFAVerifier {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#CheckOrderOfMFAVerifier";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com and enable OTP") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Set MFA checker order to 100") {
			MultiFactorAuthentication.setServiceRankingValue(orderValue = "100");
		}

		task ("Go to able.com and enable OTP In time-base OTP password configuration") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureTOTP(enableTOTP = "true");
		}

		task ("Set MFA checker order to 10") {
			MultiFactorAuthentication.setServiceRankingValue(orderValue = "10");
		}

		task ("Go to able.com and get Time-base OTP") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and sign in at able.com and assert Time-base OTP field is not available") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.viewEmailOTPVerifyField();

			MultiFactorAuthentication.viewNoTOTPField();
		}
	}

	@description = "This is a use case for LPS-112805"
	@priority = "5"
	test DisabledBasicAuthenticationOnInstanceLevel {
		property custom.properties = "access.control.sanitize.security.exception=false${line.separator}json.service.serialize.throwable=true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#DisabledBasicAuthenticationOnInstanceLevel";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com and enable OTP") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Disable Auto Login Basic Authentication Header") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "API Authentication",
				configurationName = "Auto Login Basic Authentication Header",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "enabled");

			PortletEntry.save();
		}

		task ("Disable Basic Authentication Protocol Support") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "API Authentication",
				configurationName = "Basic Authentication Protocol Support",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "enabled");

			PortletEntry.save();
		}

		task ("Check if Instance admin is able to disable Basic Authentication") {
			var curl = '''
				http://www.able.com:8080/api/jsonws/user/get-current-user
			''';

			var reponse = JSONCurlUtil.get("${curl}");

			MultiFactorAuthentication.canAdminDisableBasicAuthentication(userResponse = "${response}");
		}
	}

	@description = "This is a use case for LPS-102468"
	@priority = "5"
	test DisableOTPForInstanceOnSystemLevel {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#DisableOTPForInstanceOnSystemLevel";

		task ("Enable MFA") {
			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "false");
		}

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure OTP Email sender") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Sign out of able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Login at able.com and send OTP email") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Login with test test") {
			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("Sign out of able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Open URL and disable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "true");
		}

		task ("Logout and login with test@www.able.com at able.com") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}
	}

	@description = "This is a use case for LPS-102467 and LPS-110444"
	@priority = "5"
	test EditEmailTemplate {
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#EditEmailTemplate";

		var portalURL = PropsUtil.get("portal.url");

		task ("Enable OTP") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Configure email OTP") {
			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPSentElements(elementList = "emailOTPSentSubject,emailOTPSentBody");

			MultiFactorAuthentication.emailOTPConfiguration(
				emailOTPSentBody = "One-Time Password for test is:[$ONE_TIME_PASSWORD$]",
				emailOTPSentSubject = "[$PORTAL_URL$]: Your One-Time Password for test");
		}

		task ("Sign Out") {
			SignOut.signOut();
		}

		task ("Login and send OTP email") {
			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("View OTP mail") {
			MockMock.viewMailForOTP(
				asset = "${portalURL}: Your One-Time Password for test",
				content = "One-Time Password for test is:",
				sender = "Joe Bloggs <test@liferay.com>",
				subject = "${portalURL}: Your One-Time Password for test");
		}
	}

	@description = "This is a use case for LPS-101720"
	@priority = "5"
	test EnableOTPForInstanceAsInstanceAdminUser {
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#EnableOTPForInstanceAsInstanceAdminUser";

		task ("Enable MFA") {
			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMFA = "false");
		}

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login into able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Enable OTP email sender") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Sign out of able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Login into able.com and send OTP email") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Check OTP informations") {
			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("Disable OTP at able.com") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "false");
		}

		task ("Log out and login at able.com") {
			User.logoutPG(specificURL = "http://www.able.com:8080/");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}
	}

	@description = "This is a use case for LPS-101746"
	@priority = "5"
	test EndUserPermissionCheck {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		var portalURL = PropsUtil.get("portal.url");
		task ("Add user with password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable IP Address 127.0.0.1/255.0.0.0") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "IP Address Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureIPAddress(enableIP = "true");

			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#IP_ADDRESS_CONFIGURATION_ALLOWED_IP_FIELD_1",
				value1 = "127.0.0.1/255.0.0.0");
		}

		task ("Logout and login as new user") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert user doesn't have permissions to configure Instance Settings") {
			Navigator.openSpecificURL(url = "${portalURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet");

			AssertTextEquals(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a use case for LPS-102469"
	@priority = "5"
	test LoginSuccessfulAfterResetPasswordAsEndUser {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginSuccessfulAfterResetPasswordAsEndUser";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Signout and send reset password link for new user") {
			SignOut.signOut();

			User.forgotPasswordSendResetLink(userEmailAddress = "userea@liferay.com");
		}

		task ("Reset password by link") {
			MockMock.openBodyLink(
				asset = "${portalURL}: Reset Your Password",
				content = "You can reset your password for ${portalURL}",
				subject = "${portalURL}: Reset Your Password");

			User.setPasswordByResetLink(
				newPassword1 = "test",
				newPassword2 = "test");
		}

		task ("Logout and login with new password") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}
	}

	@description = "This is a use case for LPS-92659"
	@priority = "5"
	test LoginSuccessfulAfterRetryTimeout {
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginSuccessfulAfterRetryTimeout";

		var portalURL = PropsUtil.get("portal.url");

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP and set failed attempts maximum number and retry time out") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");

			MultiFactorAuthentication.emailOTPConfiguration(
				failedAttemptsAllowed = "1",
				retryTimeout = "10");
		}

		task ("Sign out and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP email") {
			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Check OTP email for test test and Test Test") {
			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "test test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test",
				validOTP = "false");

			Pause(locator1 = "11000");

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}
	}

	@description = "This is a use case for LPS-101746"
	@priority = "5"
	test LoginWithIPBasedVerifierEnabled {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithIPBasedVerifierEnabled";

		var portalURL = PropsUtil.get("portal.url");

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable IP address 127.0.0.1/255.0.0.0") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "IP Address Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureIPAddress(enableIP = "true");

			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#IP_ADDRESS_CONFIGURATION_ALLOWED_IP_FIELD_1",
				value1 = "127.0.0.1/255.0.0.0");
		}

		task ("Logou and login") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Search for Test Test on MFA IP OTP verification success") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "Audit");

			Audit.searchViaKeywords(
				resourceName = "IPAddressHeadlessMFAChecker",
				searchTerm = "MFA_IP_OTP_VERIFICATION_SUCCESS",
				userName = "Test Test");
		}

		task ("Assert audit details") {
			Audit.viewAuditDetails(
				additionalInformation = "None",
				clientIP = "127.0.0.1",
				resourceAction = "MFA_IP_OTP_VERIFICATION_SUCCESS",
				resourceName = "IPAddressHeadlessMFAChecker",
				userName = "Test Test");
		}

		task ("Configure none IP address allowed") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "IP Address Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureIPAddress(
				allowedIP = " ",
				enableIP = "true");
		}

		task ("Signout and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP Email and check email for Test Test") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Search for Test Test on MFA IP OTP verification failure") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "Audit");

			Audit.searchViaKeywords(
				resourceName = "IPAddressHeadlessMFAChecker",
				searchTerm = "MFA_IP_OTP_VERIFICATION_FAILURE",
				userName = "Test Test");
		}

		task ("Assert audit details") {
			Audit.viewAuditDetails(
				additionalInformation = "IP is not allowed",
				clientIP = "127.0.0.1",
				resourceAction = "MFA_IP_OTP_VERIFICATION_FAILURE",
				resourceName = "IPAddressHeadlessMFAChecker",
				userName = "Test Test");
		}
	}

	@description = "This is a use case for LPS-101717"
	@priority = "5"
	test LoginWithIPBasedVerifierFailedOnInstanceLevel {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithIPBasedVerifierFailedOnInstanceLevel";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Enable OTP") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Assert IP address and TOTP configurations are present for virtual instance scope") {
			MultiFactorAuthentication.viewConfigurationPresent(
				configurationNameList = "IP Address Configuration,Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");
		}

		task ("Enable IP address") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "IP Address Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureIPAddress(enableIP = "true");
		}

		task ("Signout and login at able.com") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure IP address allowed 192.168.132.153/255.0.0.0") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "IP Address Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureIPAddress(
				allowedIP = "192.168.132.153/255.0.0.0",
				enableIP = "true");
		}

		task ("Signout and login at able.com") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");
		}

		task ("Send OTP email and assert informations for test test") {
			MultiFactorAuthentication.viewOTPSendEmailButtonPresent();

			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}
	}

	@description = "This is a use case for LPS-101720"
	@priority = "5"
	test LoginWithOTPEnabled {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithOTPEnabled";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Sign out and login with new user") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email and check informations for userfn userln") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}
	}

	@description = "This is a use case for LPS-98267, LRQA-60284."
	@priority = "5"
	test LoginWithTOTPEnabledForEndUser {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithTOTPEnabledForEndUser";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Enable OTP") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable TOTP") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureTOTP(enableTOTP = "true");
		}

		task ("Sign out and login withg userea@liferay.com") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email and check informations for userfn userln") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			var secretKey = selenium.getAttribute("//input[contains(@id,'sharedSecret')]@value");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Verify if TOTP key is unchanged") {
			MultiFactorAuthentication.viewTOTPField();

			MultiFactorAuthentication.getTOTP(secretKeyUnchanged = "${secretKey}");
		}

		task ("Remove TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			AssertClick(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");
		}

		task ("Assert TOTP field is present") {
			MultiFactorAuthentication.viewTOTPFieldPresentOnMFA();
		}

		task ("Sign out and Login as new user") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert OTP send button is present and TOTP field is not present") {
			MultiFactorAuthentication.viewOTPSendEmailButtonPresent();

			MultiFactorAuthentication.viewNoTOTPField();
		}
	}

	@description = "This is a use case for LPS-115566"
	@priority = "5"
	test RemoveAndAutoGenerateTOTP {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#RemoveAndAutoGenerateTOTP";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable TOTP") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureTOTP(enableTOTP = "true");
		}

		task ("Go to able.com and get TOTP") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Remove TOTP and assert field is present") {
			AssertClick(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");

			MultiFactorAuthentication.viewTOTPFieldPresentOnMFA();
		}
	}

	@description = "This is a use case for LPS-115566"
	@priority = "4"
	test RemoveCurrentTOTPWontAffectOthers {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#RemoveCurrentTOTPWontAffectOthers";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Signout and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable TOTP") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureTOTP(enableTOTP = "true");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and login as new user") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email and verify information for userfn userln") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Remove remove configured TOTP") {
			AssertClick(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");
		}

		task ("Sign out and login as test@liferay.com") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Assert TOTP field is present") {
			MultiFactorAuthentication.viewTOTPField();
		}
	}

	@description = "This is a use case for LPS-101750"
	@priority = "5"
	test UseCustomMFAVerifier {
		property osgi.modules.includes = "multi-factor-authentication-sample";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#UseCustomMFAVerifier";

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.multi.factor.authentication.sample_1.0.0");

		task ("Enable OTP") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Assert MFA order is set to 400 and set it to 50") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "MFA Sample Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.viewMFAOrderValue(orderValue = "400");

			MultiFactorAuthentication.configureOTP(
				enableOTP = "true",
				order = "50");
		}

		task ("Signout and check custom OTP verification text") {
			SignOut.signOut();

			MultiFactorAuthentication.verifyCustomOTP(verificationText = "test_text");
		}
	}

	@description = "This is a use case for LPS-118204"
	@priority = "4"
	test VerifyUIchangesInMFA {
		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable TOTP") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureTOTP(enableTOTP = "true");
		}

		task ("Get TOTP") {
			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Assert warning message in TOTP description") {
			MultiFactorAuthentication.viewWarningMessage();
			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#TOTP_REMOVE_DESCRIPTION",
				value1 = "You can only have one time-based one-time password configured for your account. Remove your existing time-based one-time password to generate a new time-based one-time password.");
		}

		task ("Signout and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
		task ("Check User TOTP UI") {
			MultiFactorAuthentication.checkTOTPUI();
		}
	}

	@description = "This is a use case for LPS-89360"
	@priority = "4"
	test ViewOrderOfOTPVerifier {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewOrderOfOTPVerifier";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Assert order field is present") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.viewOTPOrderFieldAvailable();
			AssertElementPresent(
				key_fieldName = "service.ranking",
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_FIELD");
		}
	}

	@description = "This is a use case for LPS-92658"
	@priority = "4"
	test ViewResourceActionsOfOTPVerificationFailure {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewResourceActionsOfOTPVerificationFailure";

		var portalURL = PropsUtil.get("portal.url");

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Sign out and login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP email and check informations for test test and Test Test") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "test test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test",
				validOTP = "false");

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Search Test Test in OTP browser MFA Checker") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "Audit");

			Audit.searchViaKeywords(
				resourceName = "EmailOTPBrowserMFAChecker",
				searchTerm = "MFA_EMAIL_OTP_VERIFICATION_FAILURE",
				userName = "Test Test");
		}

		task ("Assert audit details") {
			Audit.viewAuditDetails(
				additionalInformation = "Incorrect email one-time password",
				resourceAction = "MFA_EMAIL_OTP_VERIFICATION_FAILURE",
				resourceName = "EmailOTPBrowserMFAChecker",
				userName = "Test Test");
		}
	}

	@description = "This is a use case for LPS-86515"
	@priority = "5"
	test ViewResourceActionsOfTOTPVerificationAttempts {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewResourceActionsOfTOTPVerificationAttempts";

		task ("Add CP able.com") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure OTP email sender") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Multi-Factor Authentication and Email One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.configureOTP(enableOTP = "true");
		}

		task ("Enable TOTP") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://www.able.com:8080",
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.configureTOTP(enableTOTP = "true");
		}

		task ("Sign out and login at able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");
		}

		task ("Send OTP email and check informations for test test") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			var secretKey = selenium.getAttribute("//input[contains(@id,'sharedSecret')]@value");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and login at able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");
		}

		task ("Type wrong password at TOTP field") {
			MultiFactorAuthentication.tryWrongTOTP(wrongValue = "111111");
		}

		task ("Get TOTP") {
			MultiFactorAuthentication.getTOTP(secretKeyUnchanged = "${secretKey}");
		}

		task ("Search for Test Test TOTP success verification on browser setup MFA checker") {
			ApplicationsMenu.gotoPortlet(
				category = "Security",
				panel = "Control Panel",
				portlet = "Audit");

			Audit.searchViaKeywords(
				resourceName = "TimeBasedOTPBrowserSetupMFAChecker",
				searchTerm = "MFA_TIMEBASED_OTP_VERIFICATION_SUCCESS",
				userName = "Test Test");
		}

		task ("Search for Test Test TOTP failure verification on browser setup MFA checker") {
			Audit.searchViaKeywords(
				resourceName = "TimeBasedOTPBrowserSetupMFAChecker",
				searchTerm = "MFA_TIMEBASED_OTP_VERIFICATION_FAILURE",
				userName = "Test Test");
		}

		task ("Search for Test Test TOTP not verified on on browser setup MFA checker") {
			Audit.searchViaKeywords(
				resourceName = "TimeBasedOTPBrowserSetupMFAChecker",
				searchTerm = "MFA_TIMEBASED_OTP_NOT_VERIFIED",
				userName = "Test Test");
		}

		task ("Search for Test Test OTP email not verified on browser setup MFA checker") {
			Audit.searchViaKeywords(
				resourceName = "EmailOTPBrowserMFAChecker",
				searchTerm = "MFA_EMAIL_OTP_NOT_VERIFIED",
				userName = "Test Test");
		}
	}

}