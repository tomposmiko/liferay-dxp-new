@component-name = "portal-search"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Search Experiences";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-168704."
	test AssertBlacklistedTextEmbeddingProvidersAreUnavailable {
		property custom.properties = "feature.flag.LPS-122920=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.component.blacklist.internal.configuration.ComponentBlacklistConfiguration.config";
		property osgi.module.configurations = "blacklistComponentNames=[\"com.liferay.search.experiences.internal.ml.embedding.text.TXTAITextEmbeddingProvider\",\"com.liferay.search.experiences.internal.ml.embedding.text.HuggingFaceInferenceAPITextEmbeddingProvider\"]";
		property test.name.skip.portal.instance = "SemanticSearch#AssertBlacklistedTextEmbeddingProvidersAreUnavailable";

		WaitForConsoleTextPresent(value1 = "Disabling com.liferay.search.experiences.internal.ml.embedding.text.TXTAITextEmbeddingProvider");

		WaitForConsoleTextPresent(value1 = "Disabling com.liferay.search.experiences.internal.ml.embedding.text.HuggingFaceInferenceAPITextEmbeddingProvider");

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		OSGiConfig.deleteOSGiConfigFile(osgiConfigFileName = "com.liferay.portal.component.blacklist.internal.configuration.ComponentBlacklistConfiguration.config");

		WaitForConsoleTextPresent(value1 = "Enabling com.liferay.search.experiences.internal.ml.embedding.text.TXTAITextEmbeddingProvider");

		WaitForConsoleTextPresent(value1 = "Enabling com.liferay.search.experiences.internal.ml.embedding.text.HuggingFaceInferenceAPITextEmbeddingProvider");

		Refresh();

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");
	}

	@description = "This is a use case for LPS-174623."
	test AssertReindexWarningAppearsForCriticalChanges {
		property custom.properties = "feature.flag.LPS-122920=true";
		property test.name.skip.portal.instance = "SemanticSearch#AssertReindexWarningAppearsForCriticalChanges";

		task ("When System Settings are using default configurations, assert the warning is not present") {
			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When Text Embeddings Enabled is checked and the form is not saved, assert the warning appears") {
			Check.checkNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When Text Embeddings Enabled is unchecked, assert the warning is removed") {
			Uncheck.uncheckNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When Text Embeddings Enabled is checked again, assert the warning appears") {
			Check.checkNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("Fill out required fields so that the test can save the form") {
			PortletEntry.inputText(
				fieldLabel = "Access Token",
				text = "original");

			PortletEntry.inputText(
				fieldLabel = "Model",
				text = "albert");

			Click(
				key_itemName = "albert-base-v1",
				locator1 = "FormFields#FIELD_DROPDOWN_ITEM");
		}

		task ("When the form is saved with Text Embeddings Enabled checked, assert the warning is removed") {
			SemanticSearch.saveAndContinue();

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When the user makes changes to any field within Text Embedding Provider Settings or the Type field and the form is not saved, assert the warning appears. When the user reverts the fields back to their previously saved values, assert the warning is removed") {
			Select(
				ariaLabel = "Text Embedding Provider",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = "Hugging Face Inference Endpoint");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			Select(
				ariaLabel = "Text Embedding Provider",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = "txtai");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			Select(
				ariaLabel = "Text Embedding Provider",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = "Hugging Face Inference API");

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			PortletEntry.inputText(
				fieldLabel = "Access Token",
				text = "change");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			PortletEntry.inputText(
				fieldLabel = "Access Token",
				text = "original");

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			PortletEntry.inputText(
				fieldLabel = "Model",
				text = "facebook");

			Click(
				key_itemName = "facebook/bart-base",
				locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			PortletEntry.inputText(
				fieldLabel = "Model",
				text = "albert");

			Click(
				key_itemName = "albert-base-v1",
				locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			PortletEntry.inputNumber(
				fieldLabel = "Model Timeout",
				number = 30);

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			PortletEntry.inputNumber(
				fieldLabel = "Model Timeout",
				number = 25);

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			Select(
				ariaLabel = "Embedding Vector Dimensions",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = 384);

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			Select(
				ariaLabel = "Embedding Vector Dimensions",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = 768);

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");

			Select(
				ariaLabel = "Types",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = "Message Boards Message");

			AssertElementPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When the form is saved with Text Embeddings Enabled checked and there are changes made to any field within Text Embedding Provider Settings or the Type field, assert the warning is removed") {
			SemanticSearch.saveAndContinue();

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When changes are made to fields that are not within Text Embedding Provider Settings or are not the Type field and the form is not saved, assert the warning does not appear") {
			PortletEntry.inputNumber(
				fieldLabel = "Max Character Count",
				number = 501);

			Select(
				ariaLabel = "Text Truncation Strategy",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = "End");

			Select(
				ariaLabel = "Languages",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = "Finnish (Finland)");

			PortletEntry.inputNumber(
				fieldLabel = "Text Embedding Cache Timeout",
				number = 604801);

			AssertElementNotPresent(
				key_infoMessage = "Changes to this configuration require a reindex",
				locator1 = "Message#INFO_SPECIFIC");
		}
	}

	test AssertSearchUsingTxtaiWithTextEmbeddingElementHasNoError {
		property custom.properties = "feature.flag.LPS-122920=true";
		property txtai.enabled = "true";

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Test Web Content");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Rescore by Text Embedding");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Web Content",
			searchAssetType = "Web Content Article");

		AssertElementNotPresent(locator1 = "Message#ERROR");
	}

	test AssertTxtaiTextEmbeddingIndexFieldAddedToAssets {
		property custom.properties = "feature.flag.LPS-122920=true";
		property txtai.enabled = "true";

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Test Web Content");

		JSONBlog.addEntry(
			entryContent = "Test Blog Content",
			entryTitle = "Test Blog",
			groupName = "Guest");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Test Knowledge Base Article Content",
			kbArticleTitle = "Test Knowledge Base Article");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "",
			threadSubject = "Test Message Board Thread");

		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "",
			wikiPageName = "Test Wiki Page");

		Search.openSearchPage();

		SearchResultPortlet.configureSearchResults(displayDocumentForm = "true");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		for (var assetTitle : list "Test Web Content,Test Blog,Test Knowledge Base Article,Test Message Board Thread,Test Wiki Page") {
			SearchResultPortlet.viewDocumentDetailValue(
				documentDetailKey = "text_embedding_768_en_US",
				documentDetailKeyValue = "0.0",
				searchAssetTitle = ${assetTitle});
		}
	}

	test AssertTxtaiWithTextEmbeddingElementAffectsBlueprintPreview {
		property custom.properties = "feature.flag.LPS-122920=true";
		property txtai.enabled = "true";

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Test Web Content");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Rescore by Text Embedding");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		AssertElementNotPresent(locator1 = "Message#ERROR");

		var key_assetTitle = "Test Web Content";
		var assetScoreBoosted = selenium.getText("Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		echo("Search score with Semantic Search: ${assetScoreBoosted}");

		Uncheck.uncheckToggleSwitch(
			key_elementName = "Rescore by Text Embedding",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_ENABLE_DISABLE_TOGGLE");

		Click(locator1 = "Blueprints#BLUEPRINTS_PREVIEW_REFRESH_SEARCH_BUTTON");

		WaitForLiferayEvent.initializeLiferayEventLog();

		var assetScoreUnboosted = selenium.getText("Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		if (${assetScoreUnboosted} != ${assetScoreBoosted}) {
			echo("Assertion PASSED: Semantic Search had an effect on the search result score");

			echo("Search score without Semantic Search: ${assetScoreUnboosted}");

			echo("Search score with Semantic Search: ${assetScoreBoosted}");
		}
		else {
			fail("Assertion FAILED: Semantic Search had no effect on the search result score");
		}
	}

	test ViewHuggingFaceSystemSettingsRequiredFieldValidation {
		property custom.properties = "feature.flag.LPS-122920=true";

		PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		PortletEntry.inputText(
			fieldLabel = "Access Token",
			text = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputText(
			fieldLabel = "Access Token",
			text = "test");

		PortletEntry.inputText(
			fieldLabel = "Model",
			text = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputText(
			fieldLabel = "Model",
			text = "facebook");

		FormFields.viewFieldDropdownItem(itemName = "facebook/bart-base");

		Click(
			key_itemName = "facebook/bart-base",
			locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

		PortletEntry.inputNumber(
			fieldLabel = "Model Timeout",
			number = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputNumber(
			fieldLabel = "Model Timeout",
			number = 25);

		AssertElementNotPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_ENABLED");

		PortletEntry.save();
	}

	@description = "This is a use case for LPS-170345 and LPS-172161."
	test ViewSystemAndInstanceSettingsSaveUI {
		property custom.properties = "feature.flag.LPS-122920=true";
		property test.name.skip.portal.instance = "SemanticSearch#ViewSystemAndInstanceSettingsSaveUI";

		task ("Within System Settings, fill out required fields for Hugging Face Inference API and save") {
			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			Check.checkNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			PortletEntry.inputText(
				fieldLabel = "Access Token",
				text = "System Settings Token");

			PortletEntry.inputText(
				fieldLabel = "Model",
				text = "facebook");

			Click(
				key_itemName = "facebook/bart-base",
				locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

			SemanticSearch.saveAndContinue();
		}

		task ("Assert txtai field is not present after saving") {
			AssertElementNotPresent(
				key_fieldLabel = "Host Address",
				locator1 = "TextInput#GENERIC_TEXT_INPUT");
		}

		task ("Assert form fields retain the values added earlier") {
			AssertChecked.assertCheckedNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "System Settings Token");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "facebook/bart-base");
		}

		task ("Refresh the page and assert form fields retain the values added earlier") {
			Refresh();

			AssertChecked.assertCheckedNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "System Settings Token");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "facebook/bart-base");
		}

		task ("Assert field values are reset when the form is reset to default") {
			SystemSettings.resetConfiguration();

			AssertElementNotPresent(
				key_fieldLabel = "Host Address",
				locator1 = "TextInput#GENERIC_TEXT_INPUT");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			AssertElementPresent(
				key_fieldLabel = "Text Embedding Provider",
				key_value = "Hugging Face Inference API",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "");
		}

		task ("Within Instance Settings, fill out required fields for Hugging Face Inference API and save") {
			PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			PortletEntry.inputText(
				fieldLabel = "Access Token",
				text = "Instance Settings Token");

			PortletEntry.inputText(
				fieldLabel = "Model",
				text = "albert");

			Click(
				key_itemName = "albert-base-v1",
				locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

			SemanticSearch.saveAndContinue();
		}

		task ("Assert txtai field is not present after saving") {
			AssertElementNotPresent(
				key_fieldLabel = "Host Address",
				locator1 = "TextInput#GENERIC_TEXT_INPUT");
		}

		task ("Assert form fields retain the values added earlier") {
			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "Instance Settings Token");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "albert-base-v1");
		}

		task ("Refresh the page and assert form fields retain the values added earlier") {
			Refresh();

			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "Instance Settings Token");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "albert-base-v1");
		}

		task ("Back in System Settings, fill out required fields for Hugging Face Inference API and save") {
			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			Check.checkNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			PortletEntry.inputText(
				fieldLabel = "Access Token",
				text = "System Settings Token");

			PortletEntry.inputText(
				fieldLabel = "Model",
				text = "facebook");

			Click(
				key_itemName = "facebook/bart-base",
				locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

			SemanticSearch.saveAndContinue();
		}

		task ("Back in Instance Settings, assert field values remain unchanged after changes were made to System Settings") {
			PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "Instance Settings Token");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "albert-base-v1");
		}

		task ("Assert Instance Settings field values use the System Settings values when resetting to default") {
			SystemSettings.resetConfiguration();

			AssertChecked.assertCheckedNotVisible(
				key_settingFieldName = "Text Embeddings Enabled",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.viewInputText(
				fieldLabel = "Access Token",
				fieldValue = "System Settings Token");

			SystemSettings.viewInputText(
				fieldLabel = "Model",
				fieldValue = "facebook/bart-base");
		}
	}

	@description = "This is a use case for LPS-173824."
	test ViewSystemSettingUnsuccessfulConnectionWarning {
		property custom.properties = "feature.flag.LPS-122920=true";
		property test.name.skip.portal.instance = "SemanticSearch#ViewSystemSettingUnsuccessfulConnectionWarning";
		property txtai.enabled = "true";

		task ("Assert the warning doesn't appear when connection is successful and changes persist when configuration is saved") {
			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			PortletEntry.inputNumber(
				fieldLabel = "Max Character Count",
				number = 501);

			SystemSettings.saveConfiguration();

			AssertElementNotPresent(
				key_text = "Continue to Save",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			Navigator.openURL();

			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			SystemSettings.viewNumberInputText(
				fieldLabel = "Max Character Count",
				fieldValue = 501);
		}

		task ("Assert the warning appears when connection is unsuccessful, but the changes are still saved when clicking the Continue button") {
			Select(
				ariaLabel = "Embedding Vector Dimensions",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = 384);

			SemanticSearch.saveAndContinue();

			Navigator.openURL();

			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			AssertElementPresent(
				key_fieldLabel = "Embedding Vector Dimensions",
				key_value = 384,
				locator1 = "Select#GENERIC_SELECT_VALUE");
		}

		task ("Assert changes remain on the page when warning is closed") {
			Select(
				ariaLabel = "Embedding Vector Dimensions",
				locator1 = "Select#ANY_ARIA_LABEL",
				value1 = 512);

			Button.clickSave();

			Click(
				key_text = "Cancel",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			AssertElementPresent(
				key_fieldLabel = "Embedding Vector Dimensions",
				key_value = 512,
				locator1 = "Select#GENERIC_SELECT_VALUE");
		}

		task ("Assert changes are not saved when warning is closed") {
			Navigator.openURL();

			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

			AssertElementPresent(
				key_fieldLabel = "Embedding Vector Dimensions",
				key_value = 384,
				locator1 = "Select#GENERIC_SELECT_VALUE");
		}
	}

	test ViewTxtaiSystemSettingsRequiredFieldValidation {
		property custom.properties = "feature.flag.LPS-122920=true";

		PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		Select(
			ariaLabel = "Text Embedding Provider",
			locator1 = "Select#ANY_ARIA_LABEL",
			value1 = "txtai");

		PortletEntry.inputText(
			fieldLabel = "Host Address",
			text = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputText(
			fieldLabel = "Host Address",
			text = "test");

		PortletEntry.save();
	}

	test ViewTxtaiSystemSettingsTestConfiguration {
		property custom.properties = "feature.flag.LPS-122920=true";
		property test.name.skip.portal.instance = "SemanticSearch#ViewTxtaiSystemSettingsTestConfiguration";
		property txtai.enabled = "true";

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		Button.click(button = "Test Configuration");

		Alert.viewSuccessMessageText(successMessage = "Connection is successful");

		Select(
			ariaLabel = "Embedding Vector Dimensions",
			locator1 = "Select#ANY_ARIA_LABEL",
			value1 = 384);

		Button.click(button = "Test Configuration");

		Alert.viewWarningSpecific(warningMessage = "The dimensions from the connection do not match the configured embedding vector dimensions. Expected 384, but got 768.");

		Select(
			ariaLabel = "Embedding Vector Dimensions",
			locator1 = "Select#ANY_ARIA_LABEL",
			value1 = 768);

		Button.click(button = "Test Configuration");

		Alert.viewSuccessMessageText(successMessage = "Connection is successful");

		PortletEntry.inputText(
			fieldLabel = "Host Address",
			text = "");

		Button.click(button = "Test Configuration");

		Alert.viewWarningSpecific(warningMessage = "Unable to connect to txtai. Connection failed with: java.lang.IllegalArgumentException: Host name may not be null.");

		AntCommand(
			locator1 = "build-test-semantic-search.xml",
			value1 = "stop-txtai");

		Refresh();

		Button.click(button = "Test Configuration");

		Alert.viewWarningSpecific(warningMessage = "Unable to connect to txtai. Connection failed");
	}

}