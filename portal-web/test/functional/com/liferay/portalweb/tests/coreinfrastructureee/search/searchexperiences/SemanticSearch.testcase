@component-name = "portal-search"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Search Experiences";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-168704."
	test AssertBlacklistedTextEmbeddingProvidersAreUnavailable {
		property custom.properties = "feature.flag.LPS-122920=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.component.blacklist.internal.configuration.ComponentBlacklistConfiguration.config";
		property osgi.module.configurations = "blacklistComponentNames=[\"com.liferay.search.experiences.internal.ml.embedding.text.TXTAITextEmbeddingProvider\",\"com.liferay.search.experiences.internal.ml.embedding.text.HuggingFaceInferenceAPITextEmbeddingProvider\"]";
		property test.name.skip.portal.instance = "SemanticSearch#AssertBlacklistedTextEmbeddingProvidersAreUnavailable";

		WaitForConsoleTextPresent(value1 = "Disabling com.liferay.search.experiences.internal.ml.embedding.text.TXTAITextEmbeddingProvider");

		WaitForConsoleTextPresent(value1 = "Disabling com.liferay.search.experiences.internal.ml.embedding.text.HuggingFaceInferenceAPITextEmbeddingProvider");

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementNotPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		OSGiConfig.deleteOSGiConfigFile(osgiConfigFileName = "com.liferay.portal.component.blacklist.internal.configuration.ComponentBlacklistConfiguration.config");

		WaitForConsoleTextPresent(value1 = "Enabling com.liferay.search.experiences.internal.ml.embedding.text.TXTAITextEmbeddingProvider");

		WaitForConsoleTextPresent(value1 = "Enabling com.liferay.search.experiences.internal.ml.embedding.text.HuggingFaceInferenceAPITextEmbeddingProvider");

		Refresh();

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "txtai",
			locator1 = "Select#GENERIC_SELECT_VALUE");

		AssertElementPresent(
			key_fieldLabel = "Text Embedding Provider",
			key_value = "Hugging Face Inference API",
			locator1 = "Select#GENERIC_SELECT_VALUE");
	}

	test AssertSearchUsingTxtaiWithTextEmbeddingElementHasNoError {
		property custom.properties = "feature.flag.LPS-122920=true";
		property txtai.enabled = "true";

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Test Web Content");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Rescore by Text Embedding");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Web Content",
			searchAssetType = "Web Content Article");

		AssertElementNotPresent(locator1 = "Message#ERROR");
	}

	test AssertTxtaiTextEmbeddingIndexFieldAddedToAssets {
		property custom.properties = "feature.flag.LPS-122920=true";
		property txtai.enabled = "true";

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Test Web Content");

		JSONBlog.addEntry(
			entryContent = "Test Blog Content",
			entryTitle = "Test Blog",
			groupName = "Guest");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Test Knowledge Base Article Content",
			kbArticleTitle = "Test Knowledge Base Article");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "",
			threadSubject = "Test Message Board Thread");

		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "",
			wikiPageName = "Test Wiki Page");

		Search.openSearchPage();

		SearchResultPortlet.configureSearchResults(displayDocumentForm = "true");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		for (var assetTitle : list "Test Web Content,Test Blog,Test Knowledge Base Article,Test Message Board Thread,Test Wiki Page") {
			SearchResultPortlet.viewDocumentDetailValue(
				documentDetailKey = "text_embedding_768_en_US",
				documentDetailKeyValue = "0.0",
				searchAssetTitle = ${assetTitle});
		}
	}

	test AssertTxtaiWithTextEmbeddingElementAffectsBlueprintPreview {
		property custom.properties = "feature.flag.LPS-122920=true";
		property txtai.enabled = "true";

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Test Web Content");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Rescore by Text Embedding");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		AssertElementNotPresent(locator1 = "Message#ERROR");

		var key_assetTitle = "Test Web Content";
		var assetScoreBoosted = selenium.getText("Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		echo("Search score with Semantic Search: ${assetScoreBoosted}");

		Uncheck.uncheckToggleSwitch(
			key_elementName = "Rescore by Text Embedding",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_ENABLE_DISABLE_TOGGLE");

		Click(locator1 = "Blueprints#BLUEPRINTS_PREVIEW_REFRESH_SEARCH_BUTTON");

		WaitForLiferayEvent.initializeLiferayEventLog();

		var assetScoreUnboosted = selenium.getText("Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		if (${assetScoreUnboosted} != ${assetScoreBoosted}) {
			echo("Assertion PASSED: Semantic Search had an effect on the search result score");

			echo("Search score without Semantic Search: ${assetScoreUnboosted}");

			echo("Search score with Semantic Search: ${assetScoreBoosted}");
		}
		else {
			fail("Assertion FAILED: Semantic Search had no effect on the search result score");
		}
	}

	test ViewHuggingFaceSystemSettingsRequiredFieldValidation {
		property custom.properties = "feature.flag.LPS-122920=true";

		PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		PortletEntry.inputText(
			fieldLabel = "Access Token",
			text = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputText(
			fieldLabel = "Access Token",
			text = "test");

		PortletEntry.inputText(
			fieldLabel = "Model",
			text = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputText(
			fieldLabel = "Model",
			text = "facebook");

		FormFields.viewFieldDropdownItem(itemName = "facebook/bart-base");

		Click(
			key_itemName = "facebook/bart-base",
			locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

		Type(
			key_fieldLabel = "Model Timeout",
			locator1 = "TextInput#GENERIC_NUMBER_INPUT",
			value1 = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		Type(
			key_fieldLabel = "Model Timeout",
			locator1 = "TextInput#GENERIC_NUMBER_INPUT",
			value1 = 25);

		AssertElementNotPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_ENABLED");

		PortletEntry.save();
	}

	test ViewTxtaiSystemSettingsRequiredFieldValidation {
		property custom.properties = "feature.flag.LPS-122920=true";

		PortalSettings.openToConfigInInstanceSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		Select(
			ariaLabel = "Text Embedding Provider",
			locator1 = "Select#ANY_ARIA_LABEL",
			value1 = "txtai");

		PortletEntry.inputText(
			fieldLabel = "Host Address",
			text = "");

		AssertElementPresent(
			key_text = "Test Configuration",
			locator1 = "Button#ANY_DISABLED_CLASS");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "This field is required.");

		PortletEntry.inputText(
			fieldLabel = "Host Address",
			text = "test");

		PortletEntry.save();
	}

	test ViewTxtaiSystemSettingsTestConfiguration {
		property custom.properties = "feature.flag.LPS-122920=true";
		property test.name.skip.portal.instance = "SemanticSearch#ViewTxtaiSystemSettingsTestConfiguration";
		property txtai.enabled = "true";

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.search.experiences.configuration.SemanticSearchConfiguration");

		Button.click(button = "Test Configuration");

		Alert.viewSuccessMessageText(successMessage = "Connection is successful");

		Select(
			ariaLabel = "Embedding Vector Dimensions",
			locator1 = "Select#ANY_ARIA_LABEL",
			value1 = 384);

		Button.click(button = "Test Configuration");

		Alert.viewWarningSpecific(warningMessage = "The dimensions from the connection do not match the configured embedding vector dimensions. Expected 384, but got 768.");

		Select(
			ariaLabel = "Embedding Vector Dimensions",
			locator1 = "Select#ANY_ARIA_LABEL",
			value1 = 768);

		Button.click(button = "Test Configuration");

		Alert.viewSuccessMessageText(successMessage = "Connection is successful");

		PortletEntry.inputText(
			fieldLabel = "Host Address",
			text = "");

		Button.click(button = "Test Configuration");

		Alert.viewWarningSpecific(warningMessage = "Unable to connect to txtai. Connection failed with: java.lang.IllegalArgumentException: Host name may not be null.");

		AntCommand(
			locator1 = "build-test-semantic-search.xml",
			value1 = "stop-txtai");

		Refresh();

		Button.click(button = "Test Configuration");

		Alert.viewWarningSpecific(warningMessage = "Unable to connect to txtai. Connection failed");
	}

}