@component-name = "portal-authentication-ee"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property app.server.bundles.size = "1";
	property databases.size = "1";
	property dummy.socket.proxy.disabled = "true";
	property osgi.app.includes = "saml";
	property plugins.deployment.type = "osgi";
	property test.run.environment = "EE";
	property testray.main.component.name = "SAML";

	// All test cases are currently configured to run Liferay SAML as the IdP and Liferay SAML as the SP. This will change as more SAML implmentations are added to this test suite (ie Shibboleth)

	setUp {
		User.firstLoginPG(rememberMeChecked = "false");
	}

	@priority = "5"
	test AddUserInheritedRolesAsSAMLAttributeStatements {
		property test.name.skip.portal.instance = "SAML#AddUserInheritedRolesAsSAMLAttributeStatements";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			Attributes = "siteRoles",
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.addCategoryLogLevels(
			categoryName = "com.liferay.saml.opensaml.integration.internal.profile.BaseProfile",
			categoryPriority = "DEBUG"
		);

		JSONRole.addSiteRole(roleKey = "TestSiteRole", roleTitle = "TestSiteRole");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		Navigator.openURL();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Memberships"
		);

		Site.assignUserGroupAsMemberCP(
			siteName = "Site Name",
			userGroupName = "UG UserGroup Name"
		);

		Navigator.openURL();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Memberships"
		);

		Site.assignSiteRoleToUserGroup(
			roleName = "TestSiteRole",
			userGroupName = "UG UserGroup Name"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups"
		);

		UserGroup.assignMemberCP(
			userGroupName = "UG UserGroup Name",
			userScreenName = "test"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.gotoEditCP(userScreenName = "test");

		User.viewUserInfomationRolesCP(
			roleTitle = "TestSiteRole",
			roleType = "Inherited Site Roles"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		User.logoutPG(specificURL = "http://www.able.com:9080/");

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		AssertConsoleTextPresent(value1 = "TestSiteRole");
	}

	@priority = "4"
	test AssertSSOIdleSessionTakesPrecedenceOverIdPSessionTimeout {
		property test.name.skip.portal.instance = "CPSAML#AssertSSOIdleSessionTakesPrecedenceOverIdPSessionTimeout";
		property web.xml.timeout = "2";

		SAML.configureLiferaySAMLAsIdP(
			idpSessionIdleTimeout = "480",
			idpSessionMaximumAge = "0",
			samlEntityID = "samlidp"
		);

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "false",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		Navigator.openURL();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "DangerDue to inactivity, your session has expired. Please save any data you may have entered before refreshing the page."
		);

		Refresh();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "SAML Admin"
		);

		SAMLNavigation.gotoIdentityProvider();

		SAMLRole.configureIdentityProvider(
			idpSessionIdleTimeout = "60",
			idpSessionMaximumAge = "0"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "false",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		Navigator.openURL();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "DangerDue to inactivity, your session has expired. Please save any data you may have entered before refreshing the page."
		);

		Refresh();

		User.viewLoggedOutPG();
	}

	@priority = "4"
	test AssertSSOSessionExistsAfterSPSessionTimeout {
		property test.name.skip.portal.instance = "CPSAML#AssertSSOSessionExistsAfterSPSessionTimeout";
		property web.xml.timeout = "2";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "false",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "DangerDue to inactivity, your session has expired. Please save any data you may have entered before refreshing the page."
		);

		Refresh();

		AssertClick(locator1 = "UserBar#USER_SIGN_IN", value1 = "Sign In");

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");
	}

	@priority = "4"
	test AssertSSOSessionExpiresAfterMaximumSessionAge {
		property test.name.skip.portal.instance = "CPSAML#AssertSSOSessionExpiresAfterMaximumSessionAge";
		property web.xml.timeout = "2";

		SAML.configureLiferaySAMLAsIdP(
			idpSessionIdleTimeout = "0",
			idpSessionMaximumAge = "180",
			samlEntityID = "samlidp"
		);

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "false",
			samlEnabled = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		Navigator.openURL();

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "DangerDue to inactivity, your session has expired. Please save any data you may have entered before refreshing the page."
		);

		Refresh();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		Pause(locator1 = "120000");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_EXPIRED_SESSION",
			value1 = "DangerDue to inactivity, your session has expired. Please save any data you may have entered before refreshing the page."
		);

		Refresh();

		User.viewLoggedOutPG();
	}

	@priority = "4"
	test SPInitiatedSSOWithScreenNameIdentifier {
		property test.name.skip.portal.instance = "SPInitiatedSSOWithScreenNameIdentifier";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "screenName",
			nameIdentifierFormat = "Unspecified",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.addCategoryLogLevels(
			categoryName = "com.liferay.saml.opensaml.integration",
			categoryPriority = "DEBUG"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		AssertConsoleTextPresent(value1 = "nameid-format:unspecified");
	}

	@description = "This is a use case for LPS-50747."
	@priority = "5"
	test ValidateVulnerabilitiesXMLAttacks {
		property test.name.skip.portal.instance = "CPSAML#ValidateVulnerabilitiesXMLAttacks";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		var adminEditURL = Navigator.getCurrentURL();

		var maliciousURL = '''
				${adminEditURL}/&_15_content=%3C!DOCTYPE%20lolz%20%5B%0A%3C!ENTITY%20lol%20%22lol%22%3E%0A%3C!ENTITY%20lol2%20%22%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%22%3E%0A%3C!ENTITY%20lol3%20%22%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%22%3E%0A%3C!ENTITY%20lol4%20%22%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%22%3E%0A%3C!ENTITY%20lol5%20%22%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%22%3E%0A%3C!ENTITY%20lol6%20%22%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%22%3E%0A%3C!ENTITY%20lol7%20%22%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%22%3E%0A%3C!ENTITY%20lol8%20%22%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%22%3E%0A%3C!ENTITY%20lol9%20%22%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%22%3E%0A%5D%3E%0A%3Clolz%3E%26lol9%3B%3C%2Flolz%3E
			''';

		Navigator.openSpecificURL(url = "${maliciousURL}");

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		Navigator.openURL();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		var adminEditURL = Navigator.getCurrentURL();

		Navigator.openSpecificURL(url = "${maliciousURL}");

		WebContent.addCP(
			webContentContent = "Web Content Content 2",
			webContentTitle = "Web Content Title 2"
		);

		PortletEntry.publish();
	}

	@description = "Sign into portal by executing a IdP initiated SSO login. After a successful login, the IdP will redirect to the SP. If the same users with the same email address are present on both instances, it will authenticate and show the SP. SAML can authenticate across major portal versions, that is, the IdP can be Portal 6.1 EE GA3 and the SP can be Portal 6.2. EE GA1. For testing purposes, it is obvious if the authentication succeeds or fails if the IdP and SP are different portal versions."
	@priority = "4"
	test ViewIdPInitiatedSSO {
		property environment.acceptance = "false";
		property test.name.skip.portal.instance = "CPSAML#ViewIdPInitiatedSSO";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		// Verify SP is logged in

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "false",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Logout SP and verify SP is logged out

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();
	}

	@description = "LPS-50220 - IdP initiated SSO login should work regardless if 'Remember Me' is checked or not."
	@priority = "4"
	test ViewIdPInitiatedSSOWithRememberMeChecked {
		property test.name.skip.portal.instance = "CPSAML#ViewIdPInitiatedSSOWithRememberMeChecked";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		// Verify SP is logged in

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Logout SP and verify SP is logged out

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();
	}

	@description = "LPS-49666 - SAML Single Logout should support HTTP-POST binding."
	@priority = "4"
	test ViewSingleLogoutHTTPPostBindingInConsole {
		property test.name.skip.portal.instance = "CPSAML#ViewSingleLogoutHTTPPostBindingInConsole";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.addCategoryLogLevels(
			categoryName = "com.liferay.saml.opensaml.integration",
			categoryPriority = "DEBUG"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		var portalURL = PropsUtil.get("portal.url");

		SAML.executeIdPInitiatedSSO(
			idpInitiatedSSOURL = "${portalURL}/c/portal/saml/sso?entityId=samlsp&amp;RelayState=http://www.able.com:9080",
			password = "test",
			rememberMeChecked = "true",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		AssertConsoleTextPresent(
			value1 = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
		);
	}

	@priority = "4"
	test ViewSingleLogoutWithMultipleSPs {
		property app.server.bundles.size = "2";
		property databases.size = "2";
		property test.name.skip.portal.instance = "CPSAML#ViewSingleLogoutWithMultipleSPs";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp2",
			spURL = "http://www.baker.com:10080"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		Navigator.gotoLoginPage();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Initiate Single Logout for first SP

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is logged out

		Navigator.openURL();

		User.viewLoggedOutPG();

		// Verify second SP is logged out

		Navigator.openSpecificURL(url = "http://www.baker.com:10080");

		User.viewLoggedOutPG();
	}

	@description = "Sign into portal by executing a SP initiated SSO login. This is done by clicking on the 'Sign In' link in the dockbar on the SP. After the SP is logged in, and if both instances has the same user and email address, the IdP will also be logged in."
	@priority = "4"
	test ViewSPInitiatedSSO {
		property environment.acceptance = "false";
		property test.name.skip.portal.instance = "CPSAML#ViewSPInitiatedSSO";

		SAML.configureLiferaySAMLAsIdP(samlEntityID = "samlidp");

		SAML.configureLiferaySAMLAsSP(
			nameIdentifierAttributeName = "emailAddress",
			samlEntityID = "samlsp",
			spURL = "http://www.able.com:9080/"
		);

		User.logoutPG();

		User.viewLoggedOutPG();

		// Verify SP is logged in

		SAML.executeSPInitiatedSSO(
			password = "test",
			specificURL = "http://www.able.com:9080",
			spURL = "http://www.able.com:9080/",
			userEmailAddress = "test@liferay.com"
		);

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Verify IdP is logged in

		Navigator.openURL();

		User.viewLoggedInPG(userFirstName = "Test", userLastName = "Test");

		// Logout SP and verify SP is logged out

		User.logoutPG(specificURL = "http://www.able.com:9080");

		User.viewLoggedOutPG();

		// Verify IdP is also logged out

		Navigator.openURL();

		User.viewLoggedOutPG();
	}
}