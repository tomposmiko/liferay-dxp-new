@component-name = "portal-core-infrastructure-portal-services-ee"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Auditing";
	property testray.testcase.product.edition = "EE";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();
		}
	}

	@description = "This test Audit can be enabled or disabled through System Settings and OSGI config file."
	@priority = "4"
	test CanEnableOrDisableAudit {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.audit.configuration.AuditConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;false&quot;";
		property test.name.skip.portal.instance = "AuditConfiguration#CanEnableOrDisableAudit";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Audit",
			configurationScope = "System Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "Enabled");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Audit");

		AssertElementNotPresent(locator1 = "AuditReports#REPORTS_TABLE_RESOURCE_ACTION");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Audit",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Enabled");

		SystemSettings.saveConfiguration();

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Audit");

		AssertTextEquals(
			key_resourceAction = "LOGIN",
			key_resourceName = "User",
			locator1 = "AuditReports#REPORTS_TABLE_RESOURCE_ACTION",
			value1 = "LOGIN");
	}

	@description = "This test Audit log can be disabled to persist in database table Audit_AuditEvent through System Settings or OSGI config file"
	@priority = "4"
	test CanEnableOrDisableDatabasePersistence {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.audit.router.configuration.PersistentAuditMessageProcessorConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;false&quot;";
		property test.name.skip.portal.instance = "AuditConfiguration#CanEnableOrDisableDatabasePersistence";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Persistent Message Audit Message Processor",
			configurationScope = "System Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "Enabled");

		SignOut.signOut();

		var auditTablePersistenceDisabled = SQL.executeMySQLStatement(mysqlStatement = "SELECT COUNT(*) FROM Audit_AuditEvent;");

		echo("Audit table: ${auditTablePersistenceDisabled}");

		if (!(contains("${auditTablePersistenceDisabled}", "0"))) {
			fail("Unexpected entries found in Audit_AuditEvent event table.");
		}

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Persistent Message Audit Message Processor",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Enabled");

		SystemSettings.saveConfiguration();

		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "test@liferay.com");

		var auditTablePersistenceEnabled = SQL.executeMySQLStatement(mysqlStatement = "SELECT COUNT(*) FROM Audit_AuditEvent;");

		echo("Audit table: ${auditTablePersistenceEnabled}");

		if (!(contains("${auditTablePersistenceEnabled}", "2"))) {
			fail("Expected entries not found in Audit_AuditEvent event table.");
		}
	}

}