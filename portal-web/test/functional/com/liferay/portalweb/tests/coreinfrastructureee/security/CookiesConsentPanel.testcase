@component-name = "portal-security"
definition {

	property custom.properties = "feature.flag.LPS-142518=true";
	property portal.release = "quarantine";
	property portal.upstream = "true";
	property testray.main.component.name = "Cookies";

	setUp {
		task ("Setup: Setup portal instance") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			CookiePreferenceHandlingAdmin.enablePreferenceHandlingInInstanceSettings();
		}
	}

	@description = "This is a use case for LPS-142518. TC-5 When End-User accept selected cookies, only selected cookies are saved."
	@priority = "5"
	test CookiesConsentPanelAcceptsOnlySelectedCookies {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelAcceptsOnlySelectedCookies";

		task ("Given: User opens the Cookie Consent portlet from the Cookie Banner via Configuration link") {
			CookieBanner.openCookieConsentPanel();
		}

		task ("When: User accepts only selected cookies via Accept Selected button") {
			CookieConsentPanel.editCookieConsentConsent(
				functionalCookies = "true",
				performanceCookies = "true");

			CookieConsentPanel.cookiesConfirmSelected();
		}

		task ("Then: Only selected cookie category related cookies are saved, and nothing more") {
			CookieHelper.checkEachCookiesSavedValue(
				cookieNameListWithFalseValue = "CONSENT_TYPE_PERSONALIZATION",
				cookieNameListWithTrueValue = "CONSENT_TYPE_FUNCTIONAL,CONSENT_TYPE_NECESSARY,CONSENT_TYPE_PERFORMANCE");
		}
	}

	@description = "This is a use case for LPS-142518. TC-7 Verify that Cookie Consent Panel could be added to a Site Page."
	@priority = "5"
	test CookiesConsentPanelCouldBeAddedToASitePage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldBeAddedToASitePage";

		task ("Given: User creates a site page and adds Cookie Consent Configuration widget to it.") {
			CookieHelper.createSitePageWithCookieBannerConfigurationPortlet();
		}

		task ("Then: All elements of the Cookie Consent Portlet are present on the site page") {
			CookieConsentPanel.verifyAllElementsArePresentOnCookieConsentPortlet();
		}
	}

	@description = "This is a use case for LPS-152844. Combined AC-5, AC-6, AC-7. Verify that Cookie Consent pangel could be enabled and customized."
	@priority = "5"
	test CookiesConsentPanelCouldBeEnabledAndCustomized {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldBeEnabledAndCustomized";

		task ("When: the End User opens the 'Cookie Consent' panel") {
			CookieNavigator.gotoInstanceSettings(portlet = "Consent Panel");

			CookieConsentAdmin.setCustomTextForAllFields(text = "INSTANCE_LEVEL");

			CookieBanner.openCookieConsentPanel();
		}

		task ("Then: they see the panel's title as the Title is configured for the 'Consent Panel' in the site administration.") {
			CookieConsentPanel.verifyCustomTextsArePresent(key_text = "INSTANCE_LEVEL");
		}
	}

	@description = "This is a use case for LPS-152844. AC-8. Verify that Cookie Consent panel could be enabled and customized on a Site page."
	@priority = "5"
	test CookiesConsentPanelCouldBeEnabledAndCustomizedOnASitePage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldBeEnabledAndCustomizedOnASitePage";

		task ("Given: a site configured to show the Banner") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "PolicyPage");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "PolicyPage",
				widgetName = "Type Facet");
		}

		task ("When: the End User opens the 'Cookie Consent' panel and clicks on the 'Cookie Policy Link's Display Link Text' with the configured URL as a link on that after the Description") {
			CookieNavigator.gotoInstanceSettings(portlet = "Consent Panel");

			CookieConsentAdmin.setCookiePolicyLink(cookiePolicyLink = "/web/guest/policypage");

			CookieBanner.openCookieConsentPanel();

			CookieConsentPanel.clickOnPolicyLink(cookiePolicyLink = "/web/guest/policypage");
		}

		task ("Then: they go to the 'Cookie Policy Link' page.") {
			CookieHelper.verifyPolicyPageIsVisible(policyLink = "/web/guest/policypage");
		}
	}

	@description = "This is a use case for LPS-148320. Combined AC-1, AC-2, AC-3. Verify that Cookie Consent Panel could be enabled and customized via OSGI file. Blocked by LPS-153615."
	@ignore = "true"
	@priority = "5"
	test CookiesConsentPanelCouldBeEnabledAndCustomizedViaOSGIFile {
		property osgi.module.configuration.file.names = "com.liferay.cookies.configuration.CookiesBannerConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookiesConsentPanelCouldBeEnabledAndCustomizedViaOSGIFile";

		task ("Given: a site configured to show the Consent Panel via OSGI file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.cookies.configuration.consent.CookiesConsentConfiguration.scoped~default.config");

			CookieNavigator.gotoInstanceSettings(portlet = "Consent Panel");

			CookieConsentAdmin.verifyAllConfigurationElementsAreConfigured(text = "INSTANCE_LEVEL");
		}

		task ("When: modify configuration entries and click cancel button") {
			CookieConsentAdmin.setCustomTextForAllFields(
				cancel = "true",
				text = "Modify SITE");
		}

		task ("Then: all the configuration value changes are not saved.") {
			CookieNavigator.gotoInstanceSettings(portlet = "Consent Panel");

			CookieConsentAdmin.verifyAllConfigurationElementsAreConfigured(text = "INSTANCE_LEVEL");
		}

		task ("When: remove all the title and description values and click save button") {
			Type(
				locator1 = "CookieConsentAdmin#TITLE",
				value1 = "");

			Type(
				locator1 = "CookieConsentAdmin#DESCRIPTION",
				value1 = "");

			CookieBannerAdmin.saveConfiguration();
		}

		task ("Then: the configuration value changes cannot be saved because all the Title and Description must have a value.") {
			AssertTextEquals(
				locator1 = "Message#ERROR",
				value1 = "Please enter a valid title.");
		}
	}

	@description = "This is a use case for LPS-168413. TC-1: Verify that save cookie preference via Cookies Banner Configuration widget at site level."
	@priority = "5"
	test CookiesConsentPanelCouldSaveCookieSettingsViaPortletAtSiteLevel {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookiesConsentPanelCouldSaveCookieSettingsViaPortletAtSiteLevel";

		task ("Given: Create a site page with a Cookies Banner Configuration widget and add a new virtual host as SiteURL") {
			CookieBanner.cookiesBannerDeclineAll();

			JSONGroup.addGroup(groupName = "Site Name");

			CookieHelper.createSitePageWithCookieBannerConfigurationPortlet(groupName = "Site Name");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.baker.com");

			UserBar.signOut();
		}

		task ("When: Log in use virtual host and enable cookie at site level") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.baker.com:8080",
				userEmailAddress = "test@liferay.com");

			CookiePreferenceHandlingAdmin.enablePreferenceHandlingWithCookieConsentInSiteSettings(
				baseURL = "http://www.baker.com:8080",
				portlet = "Preference Handling",
				siteURLKey = "site-name");

			CookieConsentAdmin.setCustomTextForAllFieldsAtSiteLevel(
				baseURL = "http://www.baker.com:8080",
				siteURLKey = "site-name",
				text = "www.baker.com",
				webSiteText = "/web/site-name#www.baker.com");
		}

		task ("And: Go to page and select all toggle buttons") {
			Navigator.gotoSitePage(
				baseURL = "http://www.baker.com:8080",
				pageName = "Cookie Consent Test Page",
				siteName = "Site Name");

			CookieConsentPanel.selectAllCookiesOnConsentPanel();
		}

		task ("Then: Verify all cookies are saved with 'accepted' as value and custom texts are present") {
			CookieConsentPanel.verifyCustomTextsArePresentInPortlet(
				baseURL = "http://www.baker.com:8080",
				key_text = "www.baker.com",
				pageName = "Cookie Consent Test Page",
				siteName = "Site Name");

			CookieHelper.checkAllCookieAreAcceptedAndSaved();
		}

		task ("Then: Verify that localhost cookies are not affected") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");

			CookieHelper.checkAllCookieAreDeclinedAndSaved();
		}
	}

	@description = "This is a use case for LPS-142518. TC-6 Verify that Cookie Consent Panel could be used to save Cookie Preferences."
	@priority = "5"
	test CookiesConsentPanelCouldSaveCookieSettingsWhenItsOnASitePage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentPanelCouldSaveCookieSettingsWhenItsOnASitePage";

		task ("Given: User creates a site page and adds Cookie Consent Configuration widget to it.") {
			CookieHelper.createSitePageWithCookieBannerConfigurationPortlet();
		}

		task ("When: User selects Accept All button on the Cookie Consent Configuration widget") {
			CookieConsentPanel.selectAllCookiesOnConsentPanel();
		}

		task ("Then: All cookie consent category related cookies are created and saved with 'accepted' as value.") {
			CookieHelper.checkAllCookieAreAcceptedAndSaved();
		}
	}

	@description = "This is a use case for LPS-142518. TC-4 Verify that Decline All could be set and cookies are stored with declined values."
	@priority = "5"
	test CookiesConsentPanelDeclineAllSelected {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CookiesConsentPanel#CookieConsentDeclineAllSelected";

		task ("Given: Use opens the Cookie consent portlet in a popup") {
			CookieBanner.openCookieConsentPanel();
		}

		task ("When: User click on Decline all") {
			CookieConsentPanel.cookiesDeclineAll();
		}

		task ("Then: All cookie consent category related cookies are created and saved with 'declined' as value.") {
			CookieHelper.checkAllCookieAreDeclinedAndSaved();
		}

		task ("And: Cookie Consent portlet in the popup is closed.") {
			CookieBanner.checkCookieConsentPanelIsNotVisible();
		}
	}

}