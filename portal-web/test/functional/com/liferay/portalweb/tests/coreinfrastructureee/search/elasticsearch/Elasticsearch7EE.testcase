@component-name = "portal-search-ee"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsThread.tearDownCP();

			DMDocument.tearDownCP();

			Page.tearDownCP();
		}
	}

	test HotDeployLearningToRankApp {
		property hot.deploy.osgi.app.includes = "portal-search-learning-to-rank";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#HotDeployLearningToRankApp";

		var appName = "Liferay Enterprise Search Learning to Rank";

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");

		AssertConsoleTextPresent(value1 = "STARTED ${appName}");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Learning to Rank",
			configurationScope = "System Scope");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.viewAppCP(
			appName = ${appName},
			appStatus = "Active",
			searchTerm = "Learning");

		AppManager.deactivateAppCP(appName = ${appName});

		AppManager.viewAppCP(
			appName = ${appName},
			appStatus = "Resolved",
			searchTerm = "Learning");

		AssertConsoleTextPresent(value1 = "STOPPED com.liferay.portal.search.learning.to.rank");

		AppManager.activateAppCP(appName = ${appName});

		AssertConsoleTextPresent(value1 = "STARTED com.liferay.portal.search.learning.to.rank");

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");
	}

	@ignore = "true"
	@priority = 5
	test LearningToRankSmoke {
		property elastic.override.version = "7.17.0";
		property elasticsearch.ltr.enabled = "true";
		property osgi.app.includes = "portal-search-learning-to-rank";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#LearningToRankSmoke";

		AntCommand(
			locator1 = "build-test-elasticsearch7.xml",
			value1 = "add-ltr-linear-regression-model -Dbackup.index=.ltrstore -Delasticsearch.port=9200");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		var script = TestCase.getFileContent(fileName = "blogs-ltr-subset.groovy");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		var assetEntryTitleListNoLTR = "";
		var iterator = 1;

		while ((${iterator} != 21) && (maxIterations = "20")) {
			var assetEntryTitle = selenium.getText("//div[contains(@id,'SearchResultsPortlet')]//li[${iterator}]/div//a");

			var assetEntryTitleListNoLTR = StringUtil.add(${assetEntryTitleListNoLTR}, ${assetEntryTitle});
			var iterator = ${iterator} + 1;
		}

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Learning to Rank",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "enabled");

		FormFields.editTextMultiline(
			fieldName = "model",
			fieldValue = "linearregression");

		SystemSettings.saveConfiguration();

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		var assetEntryTitleListLTR = "";
		var iterator = 1;

		while ((${iterator} != 21) && (maxIterations = "20")) {
			var assetEntryTitle = selenium.getText("//div[contains(@id,'SearchResultsPortlet')]//li[${iterator}]/div//a");

			var assetEntryTitleListLTR = StringUtil.add(${assetEntryTitleListLTR}, ${assetEntryTitle});
			var iterator = ${iterator} + 1;
		}

		if (${assetEntryTitleListNoLTR} != ${assetEntryTitleListLTR}) {
			echo("Assertion succeeded: Search result rankings were different with and without LTR");

			echo("Rankings without LTR: ${assetEntryTitleListNoLTR}");

			echo("Rankings with LTR: ${assetEntryTitleListLTR}");
		}
		else {
			fail("Assertion failed: Search result rankings were the same with and without LTR");
		}
	}

	@priority = 5
	test PortalClusterSmokeTest {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property minimum.slave.ram = "24";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#PortalClusterSmokeTest";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(
			nodePort = 9200,
			numberOfNodes = 1);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Clustering.shutdownSpecificServer(nodePort = 8);

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openSpecificURL(url = "http://localhost:9080");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@priority = 5
	test XPackPkiAuthenticationSmokeTest {
		property browser.chrome.version = "86.0";
		property elastic.pki.authentication.enabled = "true";
		property elastic.xpack.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch-monitoring";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackPkiAuthenticationSmokeTest";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		Portlet.addPG(portletName = "Elasticsearch Monitoring");

		ElasticsearchMonitoring.viewPG();
	}

	@priority = 5
	test XPackPkiAuthenticationWithJDK11 {
		property browser.chrome.version = "86.0";
		property elastic.pki.authentication.enabled = "true";
		property elastic.xpack.enabled = "true";
		property elasticsearch.jdk11.enabled = "true";
		property environment.acceptance = "openjdk11";
		property minimum.slave.ram = "24";
		property osgi.app.includes = "portal-search-elasticsearch-monitoring";
		property portal.release = "openjdk11";
		property portal.suite.search.engine = "openjdk11";
		property portal.upstream = "openjdk11";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackPkiAuthenticationWithJDK11";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		Portlet.addPG(portletName = "Elasticsearch Monitoring");

		ElasticsearchMonitoring.viewPG();
	}

	@priority = 5
	test XPackSmokeTest {
		property browser.chrome.version = "86.0";
		property elastic.xpack.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch-monitoring";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackSmokeTest";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(
			pageName = "Elasticsearch Monitoring Page",
			sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Elasticsearch Monitoring Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		Portlet.addPG(portletName = "Elasticsearch Monitoring");

		ElasticsearchMonitoring.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewAsGuestPG();
	}

	@priority = 5
	test XPackWithJDK11 {
		property browser.chrome.version = "86.0";
		property elastic.xpack.enabled = "true";
		property elasticsearch.jdk11.enabled = "true";
		property environment.acceptance = "openjdk11";
		property minimum.slave.ram = "24";
		property osgi.app.includes = "portal-search-elasticsearch-monitoring";
		property portal.release = "openjdk11";
		property portal.suite.search.engine = "openjdk11";
		property portal.upstream = "openjdk11";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackWithJDK11";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(
			pageName = "Elasticsearch Monitoring Page",
			sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Elasticsearch Monitoring Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		Portlet.addPG(portletName = "Elasticsearch Monitoring");

		ElasticsearchMonitoring.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewAsGuestPG();
	}

	@description = "This is a use case for LPS-151205."
	@priority = 5
	test XPackWithRestrictedCipherSuitesAndTLSVersions {
		property browser.chrome.version = "86.0";
		property elastic.xpack.configure.tls.cipher.suites = "true";
		property elastic.xpack.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch-monitoring";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackWithRestrictedCipherSuitesAndTLSVersions";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		Portlet.addPG(portletName = "Elasticsearch Monitoring");

		ElasticsearchMonitoring.viewPG();
	}

}