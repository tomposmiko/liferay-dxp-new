@component-name = "portal-search-ee"
definition {

	property osgi.app.includes = "portal-search-elasticsearch7";
	property osgi.module.configuration.file.names = "com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config";
	property osgi.module.configurations = "blacklistBundleSymbolicNames=&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.api,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise.test.data,com.liferay.portal.mobile.device.detection.fiftyonedegrees,com.liferay.portal.search.elasticsearch6.impl,com.liferay.portal.search.elasticsearch6.spi,com.liferay.portal.search.elasticsearch6.api,com.liferay.portal.search.elasticsearch6.xpack.security.impl&quot;";
	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsThread.tearDownCP();

			DMDocument.tearDownCP();

			Page.tearDownCP();
		}
	}

	test AssertSimilarResultsDisplayTemplate {
		property test.name.skip.portal.instance = "Elasticsearch7EE#AssertSimilarResultsDisplayTemplate";

		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Similar Results Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Similar Results Page",
			widgetName = "Asset Publisher");

		Navigator.gotoPage(pageName = "Similar Results Page");

		Portlet.addPG(portletName = "Similar Results");

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "WC Title 1");

		AssertElementPresent(
			key_linkResultTitle = "WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		SearchPortlets.configureSimilarResults(displayTemplate = "List Layout");

		AssertElementPresent(
			key_listResultTitle = "WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LIST_TITLE");

		AssertElementPresent(
			key_listResultTitle = "WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LIST_TITLE");

		SearchPortlets.configureSimilarResults(displayTemplate = "Card Layout");

		AssertElementPresent(
			key_cardResultTitle = "WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_CARD_TITLE");

		AssertElementPresent(
			key_cardResultTitle = "WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_CARD_TITLE");
	}

	test AssertSimilarResultsMatchesAssetType {
		property test.name.skip.portal.instance = "Elasticsearch7EE#AssertSimilarResultsMatchesAssetType";

		for (var count : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Content",
				entryTitle = "Similar Results Blogs Title ${count}");

			JSONDocument.addFile(
				dmDocumentDescription = "DM Content",
				dmDocumentTitle = "Similar Results DM Title ${count}",
				groupName = "Guest");

			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Content",
				threadSubject = "Similar Results MB Title ${count}");

			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "Similar Results WC Title ${count}");
		}

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Similar Results Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Similar Results Page",
			widgetName = "Asset Publisher");

		Navigator.gotoPage(pageName = "Similar Results Page");

		Portlet.addPG(portletName = "Similar Results");

		SearchPortlets.configureSimilarResults(
			displayTemplate = "Compact Layout",
			minimumDocumentFrequency = "1",
			minimumTermFrequency = "1");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results Blogs Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Blogs Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results Blogs Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results DM Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results DM Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results DM Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results MB Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results MB Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results MB Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results WC Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		Click(locator1 = "Icon#ANGLE_LEFT_BACK");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "Similar Results WC Title 1");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results WC Title 2",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementPresent(
			key_linkResultTitle = "Similar Results WC Title 3",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results Blogs Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results DM Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");

		AssertElementNotPresent(
			key_linkResultTitle = "Similar Results MB Title",
			locator1 = "Search#SIMILAR_RESULTS_LINK_TITLE");
	}

	test HotDeployLearningToRankApp {
		property hot.deploy.osgi.app.includes = "portal-search-learning-to-rank";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#HotDeployLearningToRankApp";

		var appName = "Liferay Learning to Rank ";

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");

		AssertConsoleTextPresent(value1 = "STARTED ${appName}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Learning to Rank",
			configurationScope = "System Scope");

		ProductMenu.gotoPortlet(
			category = "Apps",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.viewAppCP(
			appName = "${appName}",
			appStatus = "Active",
			searchTerm = "Learning");

		AppManager.deactivateAppCP(appName = "${appName}");

		AppManager.viewAppCP(
			appName = "${appName}",
			appStatus = "Resolved",
			searchTerm = "Learning");

		AssertConsoleTextPresent(value1 = "STOPPED com.liferay.portal.search.learning.to.rank");

		AppManager.activateAppCP(appName = "${appName}");

		AssertConsoleTextPresent(value1 = "STARTED com.liferay.portal.search.learning.to.rank");

		AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");
	}

	@priority = "5"
	test LearningToRankSmoke {
		property osgi.module.configuration.file.names = "com.liferay.portal.search.learning.to.rank.configuration.LearningToRankConfiguration.config:com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;${line.separator}model=&quot;linearregression&quot;:blacklistBundleSymbolicNames=&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.api,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise.test.data,com.liferay.portal.mobile.device.detection.fiftyonedegrees,com.liferay.portal.search.elasticsearch6.impl,com.liferay.portal.search.elasticsearch6.spi,com.liferay.portal.search.elasticsearch6.api,com.liferay.portal.search.elasticsearch6.xpack.security.impl,com.liferay.portal.search.elasticsearch6.xpack.monitoring.web&quot;";
		property remote.elasticsearch.enabled = "true";
		property remote.elasticsearch.ltr.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#LearningToRankSmoke";

		AntCommand(
			locator1 = "build-test-elasticsearch7.xml",
			value1 = "add-ltr-linear-regression-model -Dbackup.index=.ltrstore -Delasticsearch.port=9200");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration");

		var script = TestCase.getFileContent(fileName = "blogs-ltr-subset.groovy");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		if (IsTextEqual(locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_ORDER", resultOrder = "1", value1 = "Alien³")) {
			SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Alien³,Alien,Alien Nation");
		}
		else {
			SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Alien,Alien³,Alien Nation");
		}
	}

	@priority = "5"
	test PortalClusterSmokeTest {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#PortalClusterSmokeTest";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(numberOfNodes = "1");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Clustering.shutdownSpecificServer(nodePort = "8");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openSpecificURL(url = "http://localhost:9080");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@priority = "5"
	test XPackSmokeTest {
		property elastic.xpack.enabled = "true";
		property osgi.app.includes = "portal-search-elasticsearch6-xpack-monitoring,portal-search-elasticsearch7";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7EE#XPackSmokeTest";

		// Workaround for LPS-104802

		/*JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");*/

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			panel = "Site Administration",
			portlet = "Pages");

		SitePages.addPublicPage(
			pageName = "X-Pack Monitoring Page",
			sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "X-Pack Monitoring Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "X-Pack Monitoring Page");

		Portlet.addPG(portletName = "X-Pack Monitoring");

		XPackMonitoring.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "X-Pack Monitoring Page");

		XPackMonitoring.viewAsGuestPG();
	}

}