@component-name = "portal-liferay-online"
definition {

	property database.types = "mysql";
	property liferay.online.properties = "true";
	property portal.release = "true";
	property portal.upstream = "false";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Liferay Online";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();

			WebContent.tearDownCP();
		}
	}

	@description = "Create a Site with the Bootcamp Site initializer"
	@ignore = "Test Stub"
	@priority = "5"
	test AddBootcampSite {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "I can create a Virtual Instance with Default Initializer"
	@ignore = "Test Stub"
	@priority = "4"
	test AddVirtualInstanceWithDefaultInitializer {

		// TODO Create the automation about the LPS-135077.

	}

	@description = "I can create a New Virtual Instance with the initializer"
	@ignore = "Test Stub"
	@priority = "5"
	test AddVirtualInstanceWithInitializer {

		// TODO Create the automation about the LPS-135077.

	}

	@description = "Raylife initializer is not deployed and is not shown on inicializer list"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotSelectInitializerWithoutDeploy {

		// TODO Create the automation about the LPS-135077.

	}

	@priority = "5"
	test Smoke {
		AssertConsoleTextPresent(value1 = "Stopping blacklisted bundle");

		HeadlessPortalInstanceAPI.addPortalInstance(
			domain = "liferay.com",
			portalInstanceId = "www.able.com",
			virtualHost = "www.able.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@liferay.com");

		Smoke.viewWelcomeContentPage();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Test Page1");

		SitePages.addPublicPage(pageName = "Test Page2");

		SitePages.addPublicPage(pageName = "Test Page3");

		var pageName = "Test Page1";
		var portletBody = "Please configure this portlet to make it visible to all users.";
		var portletName = "IFrame";

		task ("Add a '${portletName}' portlet to the page named '${pageName}'") {
			Navigator.gotoSpecificURLPage(
				pageName = "${pageName}",
				url = "http://www.able.com:8080");

			Portlet.addPG(
				i = "${i}",
				portletName = "${portletName}");

			Portlet.viewTitle(portletName = "${portletName}");

			Portlet.viewBody(
				portletBody = "${portletBody}",
				portletName = "${portletName}");

			Navigator.gotoSpecificURLPage(
				pageName = "${pageName}",
				url = "http://www.able.com:8080");

			Portlet.viewTitle(portletName = "${portletName}");

			Portlet.viewBody(
				portletBody = "${portletBody}",
				portletName = "${portletName}");
		}

		var collectionName = "Basic Components";
		var contentPageName = "Test Content Page";
		var fragmentId = "Heading";
		var fragmentName = "Heading";

		task ("Add a '${fragmentName}' fragment to the content page named '${contentPageName}'") {
			task ("Create a Content Page") {
				Navigator.openSpecificURL(url = "http://www.able.com:8080");

				ProductMenu.gotoPortlet(
					category = "Site Builder",
					portlet = "Pages");

				ContentPages.addPage(pageName = "${contentPageName}");
			}

			task ("Add a basic '${fragmentName}' component") {
				PageEditor.addFragment(
					collectionName = "${collectionName}",
					fragmentName = "${fragmentName}");
			}

			task ("Publish Content Page") {
				PageEditor.clickPublish();
			}

			task ("Navigate to the content page") {
				Navigator.gotoSpecificURLPage(
					pageName = "${contentPageName}",
					url = "http://www.able.com:8080");
			}

			task ("Assert the '${fragmentName}' fragment is present") {
				AssertElementPresent(locator1 = "//h1[contains(.,'Heading Example')]");
			}
		}

		var portlet = "Web Content";

		task ("Navigate to Product Menu > Sites > Content > ${portlet}") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "${portlet}");

			SiteAdmin.viewPortletTitle(portletTitle = "${portlet}");
		}

		var webContentContent = "Web Content Content";
		var webContentTitle = "Web Content Title";

		task ("Add a web content article with '${webContentTitle}' as the title and '${webContentContent}' as the content") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "${webContentContent}",
				webContentTitle = "${webContentTitle}");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "${webContentTitle}");
		}
	}

	@description = "View the Bootcamp Categories"
	@ignore = "Test Stub"
	@priority = "3"
	test ViewBootcampCategories {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "View the Bootcamp Stylebook Classic Theme"
	@ignore = "Test Stub"
	@priority = "4"
	test ViewBootcampClassicStylebook {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "View the Bootcamp Collections"
	@ignore = "Test Stub"
	@priority = "4"
	test ViewBootcampCollections {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "View the Bootcamp Documents"
	@ignore = "Test Stub"
	@priority = "4"
	test ViewBootcampDocuments {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "View the Bootcamp Fragments Collections"
	@ignore = "Test Stub"
	@priority = "3"
	test ViewBootcampFragmentsCollections {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "View the Bootcamp Pages"
	@ignore = "Test Stub"
	@priority = "4"
	test ViewBootcampPages {

		// TODO Create the automation about the LPS-137508.

	}

	@description = "View the Bootcamp Page Templates"
	@ignore = "Test Stub"
	@priority = "4"
	test ViewBootcampPageTemplates {

		// TODO Create the automation about the LPS-137508.

	}

}