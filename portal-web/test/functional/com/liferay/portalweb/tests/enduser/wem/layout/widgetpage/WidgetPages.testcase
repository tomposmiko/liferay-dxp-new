@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Page Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "The user can add a page based in global search template."
	@priority = 5
	@uitest
	test AddPageBasedOnGlobalSearchTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a page based in global search template") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.addPage(
				pageName = "Test Page Name",
				pageTemplateName = "Search");
		}

		task ("View portlets are shown in search template page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			for (var portletName : list "Search Bar,Suggestions,Site Facet,Type Facet,Tag Facet,Category Facet,Folder Facet,User Facet,Modified Facet,Search Results,Search Options") {
				Portlet.viewDefaultTitle(portletName = ${portletName});
			}
		}
	}

	@description = "Can add a widget page with escape characters."
	@priority = 3
	test AddPageWithEscapeCharacter {
		task ("Add a page with escape characters name") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.addPage(pageName = "Test's Page Name");
		}

		task ("View the alert not shown") {
			AssertAlertNotPresent();
		}
	}

	@priority = 3
	test AddPageWithMultipleChildPages {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("Add three children pages") {
			for (var i : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Child Page ${i}",
					parentLayoutName = "Test Page Name");
			}
		}

		task ("View parent page is shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.viewPageItemPresent(pageName = "Test Page Name");
		}

		task ("View children pages are shwon") {
			for (var i : list "1,2,3") {
				PagesAdmin.viewPageItemPresent(
					depth = 2,
					pageName = "Test Child Page ${i}");
			}
		}
	}

	@description = "The user can add a private widget page with a child page."
	@priority = 4
	test AddPrivateChildPage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a private widget page") {
			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Private Page");
		}

		task ("Add a child page") {
			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Child Page",
				parentLayoutName = "Test Private Page");
		}

		task ("View child page is shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.viewPageItemPresent(
				depth = 2,
				pageName = "Test Child Page",
				privacy = "Private Pages");
		}
	}

	@description = "The user can add a Blogs portlet to private page."
	@priority = 4
	test AddWidgetToPrivatePage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a private widget page") {
			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Private Page");
		}

		task ("Add a Blogs portlet to private page") {
			Navigator.gotoPrivateSitePage(
				pageName = "Test Private Page",
				siteName = ${randomSiteName});

			Portlet.addPG(portletName = "Blogs");
		}

		task ("View Blogs portlet is shown") {
			Portlet.viewPG(portletName = "Blogs");
		}
	}

	@description = "The user can add a Blogs portlet to public page."
	@priority = 4
	test AddWidgetToPublicPage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("Add a Blogs portlet to public page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Portlet.addPG(portletName = "Blogs");
		}

		task ("View Blogs portlet is shown") {
			Portlet.viewPG(portletName = "Blogs");
		}
	}

	@description = "The user can change the page layout template of a widget page."
	@priority = 5
	test ChangeLayoutTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("View the default page layout template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			WidgetPages.viewPageLayout(
				pageColumnNumberList = "1,2",
				spanList = "4,8");
		}

		task ("Change the layout template then view the layout is applied to page") {
			for (var layoutTemplate : list "1 Column,2 Columns (50/50),2 Columns (70/30),3 Columns,1-2 Columns (30/70),1-2 Columns (70/30),1-2-1 Columns (50/50),1-2-1 Columns (70/30),1-3-1 Columns,1-3-2 Columns,2-1-2 Columns,2-2 Columns,3-2-3 Columns") {
				JSONLayout.updateLayoutTemplateOfPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Page Name",
					layoutTemplate = ${layoutTemplate});

				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = ${randomSiteName});

				Navigator.gotoEditPageViaControlMenu(pageName = "Test Page Name");

				PagesAdmin.viewSelectedLayoutColumn(columnName = ${layoutTemplate});
			}
		}
	}

	@description = "Can configure a full page application to use all available portlets on the page."
	@priority = 4
	test ConfigureFullPageApplicationOfPage {
		property osgi.app.includes = "hello-soy";

		task ("Add a Full Page Application page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "full_page_application");
		}

		task ("Configure the page with all available portlets then view the portlet is shown") {
			for (var portletName : list "Blogs,Wiki,Media Gallery,Message Boards,RSS Publisher,Documents and Media,Form,Application Authorization Request") {
				PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

				PagesAdmin.configurePage(
					pageName = "Test Page Name",
					portlet = ${portletName},
					sitePageType = "Full Page Application");

				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = ${randomSiteName});

				Portlet.viewPG(portletName = ${portletName});

				AssertElementNotPresent(locator1 = "ControlMenu#ADD");
			}
		}
	}

	@description = "Can edit the page name and layout template via pages administration."
	@priority = 5
	test EditViaPagesAdmin {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Edit the name of the first page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name 1");

			PagesAdmin.editName(pageNameEdit = "Test Page Name 1 Edited");
		}

		task ("View the edited name is shown") {
			PagesAdmin.viewPageItemPresent(pageName = "Test Page Name 1 Edited");
		}

		task ("Change the layout template of the second page") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name 2",
				layoutTemplate = "1 Column");
		}

		task ("View the edited layout template is shown") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name 2");

			PagesAdmin.viewSelectedLayoutColumn(columnName = "1 Column");
		}

		task ("Edit the name of the second page") {
			PagesAdmin.editName(pageNameEdit = "Test Page Name 2 Edited");
		}

		task ("View the edited name is shown") {
			PagesAdmin.viewPageItemPresent(pageName = "Test Page Name 2 Edited");
		}
	}

	@description = "This is a test for LPS-169310. The Add menu should persist tab selection in the same browser session."
	@priority = 5
	test PersistAddMenuTabSelectionInTheSameBrowserSession {
		property portal.acceptance = "true";

		task ("Given a page designer accesses to the Add menu on a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(locator1 = "ControlMenu#ADD");
		}

		task ("When the page designer selects the Content tab") {
			Navigator.gotoNavTab(navTab = "Content");
		}

		task ("Then the Add menu persists the tab selection in the same browser session") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Test Page Name");

			Click(locator1 = "ControlMenu#ADD");

			Navigator.viewActivatedNavTab(navTab = "Content");
		}
	}

	@description = "This is a test for LPS-169310. The tab selection of Add menu should be back to default in a new browser session."
	@priority = 5
	test PersistDefaultAddMenuTabSelectionInTheNewBrowserSession {
		task ("Given a page designer selects the Content tab on the Add menu") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(locator1 = "ControlMenu#ADD");

			Navigator.gotoNavTab(navTab = "Content");
		}

		task ("When the page designer accesses to the Add menu in a new browser session") {
			var baseURL = PropsUtil.get("portal.url");

			Open.openInTheNewTab(locator1 = "${baseURL}/web/${siteURLKey}/test-page-name");

			Click(locator1 = "ControlMenu#ADD");
		}

		task ("Then the Add menu persists the default tab selection") {
			Navigator.viewActivatedNavTab(navTab = "Widgets");
		}
	}

	@description = "This is a use case for LPS-123143. View the languageId shown in configuration page."
	@priority = 3
	test ViewLanguageIdInConfigurationPage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("View default locale is shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name");

			PortletEntry.viewLocale(locale = "en-US");
		}
	}

}