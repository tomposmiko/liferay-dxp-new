@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-150277=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up virtual instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a company Object with a Text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Region",
				fieldName = "region",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	@description = "This is a test for LPS-149984. The page editor cannot add fragment into Form Container without mapping entity."
	@priority = "4"
	test CannotAddFragmentToFormContainerWithoutMappingEntity {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator adds a Form Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");
		}

		task ("Then the page creator could see Select a content type to start creating the form message shown in Form Container") {
			AssertVisible(
				key_fragmentName = "Form Container",
				key_messageInfo = "Select a content type to start creating the form.",
				key_position = "1",
				locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");
		}

		task ("When the page creator tries to add a Heading fragment into Form Container") {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_fragmentName = "Heading",
				key_targetFragmentName = "Form Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
		}

		task ("Then the page creator still see the Select a content type to start creating the form message shown in Form Container") {
			AssertVisible(
				key_fragmentName = "Form Container",
				key_messageInfo = "Select a content type to start creating the form.",
				key_position = "1",
				locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");

			PageEditor.viewFragmentNotPresent(fragmentName = "Heading");
		}

		task ("When the page creator tries to add a Heading fragment into Form Container after mapping entity") {
			PageEditor.editFormContainer(
				contentType = "Purchase Order",
				panel = "General");

			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_fragmentName = "Heading",
				key_targetFragmentName = "Form Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator could see the Heading is inside the Form Container") {
			AssertVisible(
				key_targetFragmentName = "Heading",
				locator1 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET");
		}
	}

	@description = "This is a test for LPS-151867 and LPS-149984. The page editor could add Form Container fragment from Form Components set to page. The page editor could map entity to Form Container in content page."
	@priority = "5"
	test MapEntityToFormContainerInContentPage {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator adds a Form Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");
		}

		task ("Then the page creator could see the Form Container on page") {
			PageEditor.viewFragment(fragmentName = "Form Container");
		}

		task ("When the page creator navigates to the General panel of Form Container") {
			PageEditor.gotoConfiguration(fragmentName = "Form Container");
		}

		task ("Then the page creator could select the content type of Form Container") {
			AssertSelectedLabel(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "None");

			Select(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Purchase Order");

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Purchase Order");
		}
	}

	@description = "This is a test for LPS-149984. The page editor could map entity to Form Container in display page template."
	@priority = "5"
	test MapEntityToFormContainerInDisplayPageTemplate {
		property testray.component.names = "Display Pages,Fragments";

		task ("Given a page creator has a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("When the page creator adds a Form Container to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");
		}

		task ("Then the page creator could see Select a content type to start creating the form message shown in Form Container") {
			AssertVisible(
				key_fragmentName = "Form Container",
				key_messageInfo = "Select a content type to start creating the form.",
				key_position = "1",
				locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");
		}

		task ("When the page creator navigates to the General panel of Form Container") {
			PageEditor.gotoConfiguration(fragmentName = "Form Container");
		}

		task ("Then the page creator could select the content type of Form Container") {
			AssertSelectedLabel(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "None");

			Select(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Purchase Order");

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Purchase Order");
		}
	}

	@description = "This is a test for LPS-149984. The Form Container has all capabilities of Container."
	@priority = "4"
	test ViewCapabilitiesOfFormContainer {
		task ("Given a page creator has a content page with a Form Container fragment") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");
		}

		task ("When the page creator navigates to the Styles panel of Form Container") {
			PageEditor.gotoStyle(fragmentName = "Form Container");
		}

		task ("Then the page creator could see common styles section on Styles panel") {
			for (var fieldSetLabel : list "Spacing,Text,Background,Borders,Effects") {
				AssertElementPresent(
					key_fieldSetLabel = "${fieldSetLabel}",
					locator1 = "PageEditor#COMMON_STYLES_FIELDSET_LABEL");
			}
		}

		task ("When the page creator navigates to the General panel of Form Container") {
			Navigator.gotoNavTab(navTab = "General");
		}

		task ("Then the page creator could see the Frame section on General panel") {
			AssertElementPresent(
				key_fieldSetLabel = "Frame",
				locator1 = "PageEditor#COMMON_STYLES_FIELDSET_LABEL");
		}

		task ("When the page creator navigates to the Advanced panel of Form Container") {
			Navigator.gotoNavTab(navTab = "Advanced");
		}

		task ("Then the page creator could see the Hide from Site Search Results checkbox on General panel") {
			AssertElementPresent(
				checkboxName = "Hide from Site Search Results",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("When the page creator opens the dropdown menu of Form Container topper") {
			Click.waitForMenuToggleJSClick(
				key_fragmentName = "Form Container",
				locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");
		}

		task ("Then the page creator could see the Save Composition action on dropdown menu") {
			MenuItem.viewPresent(menuItem = "Save Composition");
		}
	}

}