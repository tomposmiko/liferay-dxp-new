@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-146373. The page creator could access to Look and Feel settings via the configuration icon."
	@priority = "4"
	test AccessToLookAndFeelSettings {
		task ("Given a page creator accesses to the Page Design Options panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Page Design Options");
		}

		task ("When the page creator click the configuration icon") {
			Click(locator1 = "PageEditor#MORE_LINK");
		}

		task ("Then the page creator accesses to the Look and Feel settings") {
			AssertElementPresent(
				key_title = "General",
				locator1 = "Header#H2_TITLE");

			for (var sectionName : list "Favicon,Master,Style Book,Theme") {
				AssertElementPresent(
					key_sectionTitle = "${sectionName}",
					locator1 = "PagesAdmin#SECTION_TITLE");
			}
		}
	}

	@description = "This is a test for LPS-153383. The page creator cannot resize editor sidebar to an invalid size."
	@priority = "4"
	test CannotResizeLeftSidebarPanelBeyoundLimitation {
		task ("Given a page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator accesses to the left sidebar panel") {
			AssertVisible(
				key_sidebarButton = "Fragments and Widgets",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
		}

		task ("Then the page creator cannot resize the left sidebar panel more than 500px or less than 280px") {
			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "220,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "500px");

			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "100,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "500px");

			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "-220,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "280px");

			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "-100,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "280px");
		}
	}

	@description = "This is a test for LPS-146373. The page creator could close the left sidebar panel via the times icon."
	@priority = "4"
	test CloseLeftPageEditorSidebar {
		task ("Given a page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator click the times icon on the Fragments and Widgets panel") {
			Click(
				key_text = "times",
				locator1 = "Icon#ANY");
		}

		task ("Then the left page editor sidebar is closed") {
			AssertElementNotPresent(locator1 = "Sidebar#PANEL_OPEN");
		}
	}

	@description = "This is a test for LPS-158746. Could add and remove fragment to Favorites session on content page in card view."
	@priority = "3"
	test CouldAddAndRemoveFragmentInCardView {
		task ("Given go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When switch to card view") {
			Click(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("Then assert could add and remove fragment to Favorites session") {
			MouseOver(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			MouseOver(
				ariaLabel = "Mark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertTextEquals(
				locator1 = "Tooltip#GENERIC_TOOLTIP",
				value1 = "Mark Button as Favorite");

			Click.clickNoMouseOver(
				ariaLabel = "Mark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertElementPresent(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertElementPresent(
				index = "1",
				key_panel = "Favorites",
				locator1 = "Panel#PANEL_BY_INDEX");

			MouseOver(
				ariaLabel = "Unmark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertTextEquals(
				locator1 = "Tooltip#GENERIC_TOOLTIP",
				value1 = "Unmark Button as Favorite");

			Click.clickNoMouseOver(
				ariaLabel = "Unmark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertElementNotPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertElementPresent(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");
		}
	}

	@description = "This is a test for LPS-158746. Could add and remove fragment to Favorites session and widget to Highlighted session on content page."
	@priority = "5"
	test CouldAddAndRemoveFragmentToFavoritesSessionAndWidgetToighlightedSession {
		property portal.release = "false";

		task ("When go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then could add and remove fragment to Favorites session and widget to Highlighted session") {
			task ("Go to add and remove favorite fragment") {
				MouseOver(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				MouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertTextEquals(
					locator1 = "Tooltip#GENERIC_TOOLTIP",
					value1 = "Mark Button as Favorite");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					index = "1",
					key_panel = "Favorites",
					locator1 = "Panel#PANEL_BY_INDEX");

				MouseOver(
					ariaLabel = "Unmark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertTextEquals(
					locator1 = "Tooltip#GENERIC_TOOLTIP",
					value1 = "Unmark Button as Favorite");

				Click.clickNoMouseOver(
					ariaLabel = "Unmark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementNotPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}

			task ("Go to add and remove favorite widget") {
				Navigator.gotoNavTab(navTab = "Widgets");

				AssertClick(
					key_collectionName = "Collaboration",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_COLLAPSED",
					value1 = "Collaboration");

				MouseOver(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Calendar as Favorite",
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Highlighted",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Unmark Calendar as Favorite",
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementNotPresent(
					key_collectionName = "Highlighted",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}
		}
	}

	@description = "This is a test for LPS-158746. Could add and remove fragment to Favorites session and widget to Highlighted session on content page."
	@priority = "5"
	test CouldAddAndRemoveFragmentToFavoritesSessionAndWidgetToighlightedSessionOnReleaseBundle {
		property portal.upstream = "false";

		task ("When go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then could add and remove fragment to Favorites session and widget to Highlighted session") {
			task ("Go to add and remove favorite fragment") {
				MouseOver(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				MouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertTextEquals(
					locator1 = "Tooltip#GENERIC_TOOLTIP",
					value1 = "Mark Button as Favorite");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					index = "1",
					key_panel = "Favorites",
					locator1 = "Panel#PANEL_BY_INDEX");

				MouseOver(
					ariaLabel = "Unmark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertTextEquals(
					locator1 = "Tooltip#GENERIC_TOOLTIP",
					value1 = "Unmark Button as Favorite");

				Click.clickNoMouseOver(
					ariaLabel = "Unmark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementNotPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}

			task ("Go to add and remove favorite widget") {
				Navigator.gotoNavTab(navTab = "Widgets");

				MouseOver(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Calendar as Favorite",
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Highlighted",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Unmark Calendar as Favorite",
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementNotPresent(
					key_collectionName = "Highlighted",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}
		}
	}

	@description = "This is a test for LPS-140266. The user could look for color samples via scroll bar."
	@priority = "4"
	@uitest
	test FindColorSamplesViaScrollBar {
		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Find color samples via scroll bar") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				key_fieldLabel = "Text Color",
				locator1 = "Button#COLOR_PICKER");

			ScrollWebElementIntoView(
				category = "Button Link",
				index = "1",
				locator1 = "PageEditor#COLOR_SWATCH_ITEM",
				panel = "Buttons");

			ScrollWebElementIntoView(
				category = "Brand Colors",
				index = "1",
				locator1 = "PageEditor#COLOR_SWATCH_ITEM",
				panel = "Color System");
		}
	}

	@description = "This is a test for LPS-146373. The page creator should be redirected to the previous page when clicking the back button in the page editor."
	@priority = "4"
	test RedirectToPreviousPageWhenClickBackInPageEditor {
		task ("Given a page creator adds a content page via the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Content Page Name");
		}

		task ("When the page creator clicks the back button in page editor") {
			PageEditor.clickBack();
		}

		task ("Then the page creator should be redirected to the Pages admin") {
			ControlMenu.viewHeaderTitle(headerTitle = "Pages");
		}

		task ("Given the page creator accesses to page editor via view mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			ContentPages.gotoPageEditor();
		}

		task ("When the page creator clicks the back button in page editor") {
			PageEditor.clickBack();
		}

		task ("Then the page creator should be redirected to the content page at view mode") {
			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertVisible(locator1 = "Icon#EDIT_PENCIL");
		}
	}

	@description = "This is a test for LPS-146373. The page creator could use a scroll bar for each section in the page editor."
	@priority = "4"
	test UseScrollBarInEachSection {
		task ("Given a page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator accesses to the Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("Then the page creator use the scroll bar to find the Menu Display fragment set") {
			ScrollWebElementIntoView(
				key_collectionName = "Menu Display",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL");
		}

		task ("When the page creator accesses to the Styles panel of Heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.gotoStyle(fragmentName = "Heading");
		}

		task ("Then the page creator use the scroll bar to find the effects section") {
			ScrollWebElementIntoView(
				key_fieldSetLabel = "Effects",
				locator1 = "PageEditor#ITEM_CONFIGURATION_FIELDSET_LABEL");
		}

		task ("When the page creator adds more fragments into page") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				targetFragmentName = "Heading");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "Grid");
		}

		task ("Then the page creator use the scroll bar to find the content at the bottom of page") {
			ScrollWebElementIntoView(
				fragmentName = "card",
				id = "link",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			var leftSidebarButtonsWidth = selenium.getElementWidth("PageEditor#FRAGMENT_SIDEBAR_BODY");
			var leftSidebarPanelWidth = selenium.getElementWidth("Sidebar#PANEL_OPEN");
			var bodyWidth = selenium.getElementWidth("//body");
			var rightSidebarWidth = selenium.getElementWidth("PageEditor#ITEM_CONFIGURATION_SIDEBAR");
			var gridFragmentWidth = selenium.getElementWidth("//div[@aria-label='Grid']");
			var leftSidebarWidth = ${leftSidebarButtonsWidth} + ${leftSidebarPanelWidth};
			var offsetWidth = selenium.getAttribute("//div[contains(@class,'overflow-auto')]@offsetWidth");
			var clientWidth = selenium.getAttribute("//div[contains(@class,'overflow-auto')]@clientWidth");

			var scrollBarWidth = ${offsetWidth} - ${clientWidth};
			var bothSidebarWidth = ${leftSidebarWidth} + ${rightSidebarWidth};
			var pageContentWidth = ${gridFragmentWidth} + ${scrollBarWidth};

			TestUtils.assertEquals(
				actual = MathUtil.difference("${bodyWidth}", "${bothSidebarWidth}"),
				expected = "${pageContentWidth}");
		}
	}

	@description = "This is a test for LPS-136412. View collapse style changes in fragment configuration."
	@priority = "5"
	test ViewCollapseStyleInFragmentConfiguration {
		property portal.acceptance = "true";

		task ("Add a dropdown fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Dropdown");
		}

		task ("Go to configuration") {
			PageEditor.gotoConfiguration(fragmentName = "Dropdown");
		}

		task ("Assert the styles are collapsible and are listed in groups") {
			Panel.collapsePanel(panel = "Dropdown Options");

			Panel.collapsePanel(panel = "Frame");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'fieldset')]");

			Panel.expandPanel(panel = "Dropdown Options");

			Panel.expandPanel(panel = "Frame");
		}

		task ("Go to Styles and assert the styles are collapsible and are listed in groups") {
			Navigator.gotoNavTab(navTab = "Styles");

			for (var key_panel : list "Spacing,Text,Background,Borders,Effects") {
				Panel.collapsePanel(panel = "${key_panel}");
			}

			AssertElementNotPresent(locator1 = "//div[contains(@class,'fieldset')]");

			for (var key_panel : list "Spacing,Text,Background,Borders,Effects") {
				Panel.expandPanel(panel = "${key_panel}");
			}
		}
	}

	@description = "This is a test for LPS-158746. The favorite fragment is hidden if it is not allowed on master page."
	@priority = "3"
	test ViewFavoriteFragmentIsHiddenWhenItIsNotAllowedOnMasterPage {
		task ("Given go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("And choose Button and Card fragment as Favorites") {
			MouseOver(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			Click.clickNoMouseOver(
				ariaLabel = "Mark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			MouseOver(
				key_collectionName = "Basic Components",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			Click.clickNoMouseOver(
				ariaLabel = "Mark Card as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
		}

		task ("When not allow Button fragment on master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			AssertClick(
				locator1 = "Button#CONFIGURE_ALLOWED_FRAGMENTS",
				value1 = "Configure Allowed Fragments");

			SelectFrame(value1 = "relative=top");

			Uncheck.uncheckToggleSwitch(
				key_fragmentName = "Button",
				locator1 = "Checkbox#ALLOWED_FRAGMENT");

			Button.clickSave();

			Button.clickNoError(button = "Publish Master");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name 2");

			PageEditor.publish();
		}

		task ("Then Button fragment is hidden on conetent page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
		}
	}

	@description = "This is a test for LPS-158746. Favorite session is hidden when no favorite fragment is chosen."
	@priority = "4"
	test ViewFavoriteSessionIsHiddenWhenNoFavoriteFragmentIsChosen {
		task ("Given go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then assert favorite session is hidden") {
			AssertElementNotPresent(
				key_panel = "Favorites",
				locator1 = "Panel#PANEL");
		}

		task ("When switch to card view") {
			Click(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("And then assert favorite session is hidden") {
			AssertElementNotPresent(
				key_panel = "Favorites",
				locator1 = "Panel#PANEL");
		}
	}

	@description = "This is a test for LPS-158746. Different users keep their own favorites list."
	@priority = "4"
	test ViewFavoritesListInDifferentUsers {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given having 2 users") {
			for (var number : list "1,2") {
				JSONUser.addUser(
					userEmailAddress = "user${number}@liferay.com",
					userFirstName = "userfn${number}",
					userLastName = "userln${number}",
					userScreenName = "usersn${number}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "user${number}@liferay.com");

				JSONUser.addUserToSite(
					groupName = "Test Site Name",
					userEmailAddress = "user${number}@liferay.com");

				JSONRole.assignSiteRoleToUser(
					groupName = "Test Site Name",
					roleTitle = "Site Administrator",
					userEmailAddress = "user${number}@liferay.com");
			}
		}

		task ("When the users add their own favorites list on content page") {
			task ("Assert user1 could add favorites list") {
				User.logoutPG();

				User.loginPG(
					password = "test",
					userEmailAddress = "user1@liferay.com");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				MouseOver(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}

			task ("Assert user2 could add favorites list") {
				User.logoutPG();

				User.loginPG(
					password = "test",
					userEmailAddress = "user2@liferay.com");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				AssertElementNotPresent(
					key_panel = "Favorites",
					locator1 = "Panel#PANEL");

				MouseOver(
					key_collectionName = "Basic Components",
					key_fragmentName = "Card",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Card as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Card",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Card",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}
		}

		task ("Then assert favorites list is kept for user session") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "user1@liferay.com");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			AssertElementNotPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
		}
	}

	@description = "This is a test for LPS-140266. The color samples are sorted by the token definition doc order and sections."
	@priority = "5"
	@uitest
	test ViewOrderOfColorSamplesInColorPicker {
		property portal.acceptance = "true";

		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("View the order of color samples in color picker") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				key_fieldLabel = "Text Color",
				locator1 = "Button#COLOR_PICKER");

			var n = "1";

			for (var panel : list "Color System,General,Typography,Buttons") {
				AssertTextEquals(
					index = "${n}",
					locator1 = "PageEditor#COLOR_SWATCH_PANEL",
					value1 = "${panel}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var category : list "Brand Colors,Grays,Theme Colors") {
				AssertTextEquals(
					index = "${n}",
					locator1 = "PageEditor#COLOR_SWATCH_CATEGORY",
					panel = "Color System",
					value1 = "${category}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var i : list "1,2,3,4") {
				AssertAttributeValue(
					attribute1 = "title",
					category = "Brand Colors",
					index = "${n}",
					locator1 = "PageEditor#COLOR_SWATCH_ITEM",
					panel = "Color System",
					value1 = "Brand Color ${i}");

				var n = ${n} + 1;
			}
		}

		task ("View the token name shown in tooltip when hover on color swatch item") {
			MouseOver.javaScriptFocus(
				category = "Grays",
				index = "1",
				locator1 = "PageEditor#COLOR_SWATCH_ITEM",
				panel = "Color System");

			AssertVisible(
				key_content = "White",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-132422. The list of actions appear in right order for pages."
	@priority = "3"
	test ViewOrderOfContentPagesActions {
		task ("Add a Heading fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("Remove the Heading fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Heading");
		}

		task ("Assert the actions order for content pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewOrder(menuItemList = "Edit,Translate,View,Preview Draft,Discard Draft,Orphan Widgets,Copy Page,Export for Translation,Import Translation,Configure,Permissions,Delete");
		}
	}

	@description = "This is a test for LPS-146373. The page creator could find Fragments and Widgets, Browser, Page Design Options, Page Content, and Comments on the left sidebar while fragment configuration on the right sidebar. Both page editor sidebars shouldn't overlay the page content."
	@priority = "4"
	test ViewPageEditorSidebars {
		task ("When the page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page creator sees Fragments and Widgets, Browser, Page Design Options, Page Content, and Comments on the left sidebar while fragment configuration on the right sidebar and both page editor sidebars don't overlay the page content") {
			for (var tabName : list "Fragments and Widgets,Browser,Page Design Options,Page Content,Comments") {
				AssertVisible(
					key_tabName = "${tabName}",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");
			}

			AssertTextEquals.assertPartialTextCaseSensitive(
				locator1 = "PageEditor#ITEM_CONFIGURATION_SIDEBAR",
				value1 = "Select a Page Element");

			AssertTextEquals.assertPartialTextCaseSensitive(
				locator1 = "PageEditor#ITEM_CONFIGURATION_SIDEBAR",
				value1 = "Select a page element to activate this panel.");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.clickConfigurableField(fragmentName = "Heading");

			for (var tabName : list "General,Styles,Advanced") {
				AssertVisible(
					key_tab = "${tabName}",
					locator1 = "NavTab#TAB_LINK");
			}

			var leftSidebarButtonsWidth = selenium.getElementWidth("PageEditor#FRAGMENT_SIDEBAR_BODY");
			var leftSidebarPanelWidth = selenium.getElementWidth("Sidebar#PANEL_OPEN");
			var bodyWidth = selenium.getElementWidth("//body");
			var rightSidebarWidth = selenium.getElementWidth("PageEditor#ITEM_CONFIGURATION_SIDEBAR");
			var headingFragmentWidth = selenium.getElementWidth("//div[@aria-label='Heading']");
			var leftSidebarWidth = ${leftSidebarButtonsWidth} + ${leftSidebarPanelWidth};

			var bothSidebarWidth = ${leftSidebarWidth} + ${rightSidebarWidth};

			TestUtils.assertEquals(
				actual = MathUtil.difference("${bodyWidth}", "${bothSidebarWidth}"),
				expected = "${headingFragmentWidth}");
		}
	}

	@description = "This is a test for LPS-146373. Both page editor sidebars should be closed when the product menu is open."
	@priority = "4"
	test ViewPageEditorSidebarsClosedWhenProductMenuOpen {
		task ("Given a page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator opens the Product Menu") {
			ProductMenuHelper.openProductMenu();
		}

		task ("Then both page editor sidebars are closed") {
			AssertElementNotPresent(locator1 = "Sidebar#PANEL_OPEN");

			AssertElementNotPresent(locator1 = "PageEditor#ITEM_CONFIGURATION_SIDEBAR_OPEN");
		}
	}

	@description = "This is a test for LPS-153650. The portal version info should be shown on the Home page."
	@priority = "4"
	test ViewPortalVersionInfoOnHomePage {
		var portalVersionInfo = selenium.getText("//div[contains(@id,'fragment-')][.//*[contains(@class,'paragraph')]]//*[contains(@data-lfr-editable-id,'element-text')]");

		var match = StringUtil.matches("${portalVersionInfo}", "Liferay Digital Experience Platform \d+\.\d+\.\d+ Update \d+ \(\w+ \/ Build \d+ \/ \w+ \d+, \d+\)");

		if ("${match}" == "true") {
			echo("The portal version info ${portalVersionInfo} is shown on the Home page");
		}
		else {
			fail("The portal version info ${portalVersionInfo} is missing on the Home page");
		}
	}

}