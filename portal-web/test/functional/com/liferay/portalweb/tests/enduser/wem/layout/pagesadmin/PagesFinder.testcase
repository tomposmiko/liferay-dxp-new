@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Default setup") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create new Sites") {
			JSONGroup.addGroup(groupName = "Test Site Name");

			JSONGroup.addGroup(groupName = "Test Site Name 2");

			JSONGroup.addGroup(groupName = "Test Site Name 3");
		}

		task ("Add layouts of various types for the pages finder") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Portlet Page",
				type = "portlet");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Embedded Page",
				type = "embedded");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Link to Layout",
				type = "link_to_layout");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Full Page Application",
				type = "full_page_application");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Panel Page",
				type = "panel");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test URL",
				type = "url");

			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Test Private Page",
				type = "portlet");

			for (var i : list "1,2,3,4") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Default Page ${i}");
			}

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 2",
				layoutName = "Test Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			JSONGroup.deleteGroupByName(groupName = "Test Site Name 2");

			JSONGroup.deleteGroupByName(groupName = "Test Site Name 3");
		}
	}

	@description = "This is the test for LPS-103104. Can add a child page via page tree panel."
	@priority = "5"
	test AddChildPageViaPageFinder {
		Navigator.openSiteURL(siteName = "Test Site Name 2");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicChildPage(
			childPageName = "Test Child Page",
			parentPageName = "Test Page Name");

		PagesFinder.navigateToChildPage(
			childPageName = "Test Child Page",
			parentPageName = "Test Page Name");
	}

	@description = "This is the test for LPS-103104. Can add pages of different types via page tree panel."
	@priority = "3"
	test AddPagesOfDifferentTypesViaPageFinder {
		ProductMenu.gotoSite(site = "Test Site Name 3");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicPage(
			pageName = "Widget Page",
			sitePageType = "Widget Page");

		PagesFinder.addPublicPage(
			pageName = "Panel",
			sitePageType = "Panel");

		PagesFinder.addPublicPage(
			pageName = "Embedded",
			pageTypeURL = "https://www.google.com",
			sitePageType = "Embedded");

		PagesFinder.addPublicPage(
			pageName = "Link to URL",
			pageTypeURL = "https://www.google.com",
			sitePageType = "Link to URL");

		PagesFinder.addPublicPage(
			pageName = "Page Set",
			sitePageType = "Page Set");

		PagesFinder.addPublicPage(
			pageName = "Link to a Page of This Site",
			sitePageType = "Link to a Page of This Site");

		PagesFinder.addPublicContentPage(pageName = "Content Page");

		PageEditor.clickPublish();

		PagesFinder.addPrivatePage(
			pageName = "Private Widget Page",
			sitePageType = "Widget Page");

		PagesFinder.selectPageType(optionValue = "Public Pages");

		for (var pageName : list "Content Page,Embedded,Link to a Page of This Site,Link to URL,Page Set,Panel") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "${pageName}");
		}

		PagesFinder.selectPageType(optionValue = "Private Pages");

		PagesFinder.viewPageNameInPagesFinder(pageName = "Private Widget Page");
	}

	@description = "This is the test for LPS-103104. Can add a widget page via page tree panel."
	@priority = "5"
	test AddPageViaPageFinder {
		Navigator.openSiteURL(siteName = "Test Site Name 2");

		PagesFinder.goToFindAPage();

		PagesFinder.addPublicPage(pageName = "Test Public Page");

		PagesFinder.navigateToPage(pageName = "Test Public Page");
	}

	@description = "This is a test for LPS-102544. Can navigate to both public and private pages from pages finder."
	test NavigateToBothPageTypesViaPageFinder {
		task ("Navigate to Test site Name") {
			Navigator.openSiteURL(siteName = "Test Site Name");
		}

		PagesFinder.goToFindAPage();

		PagesFinder.selectPageType(optionValue = "Private Pages");

		PagesFinder.navigateToPage(pageName = "Test Private Page");

		PagesFinder.selectPageType(optionValue = "Public Pages");

		PagesFinder.navigateToPage(pageName = "Test Portlet Page");
	}

	@description = "This is a test for LPS-90363. Assert that all page types can be found and counted in the pages finder."
	@priority = "5"
	test SearchAllPageTypes {
		task ("Navigate to Test site Name") {
			Navigator.openSiteURL(siteName = "Test Site Name");
		}

		task ("Type search term in pages finder") {
			PagesFinder.goToFindAPage();

			PagesFinder.inputPageSearch(keyword = "Test");
		}

		task ("Assert that we find all 11 pages within Pages Administration") {
			PagesFinder.viewInPagesAdministration();

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "11 Results for Test");
		}
	}

}