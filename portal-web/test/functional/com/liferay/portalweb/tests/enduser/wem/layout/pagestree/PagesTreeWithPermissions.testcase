@component-name = "portal-wcm"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Pages Tree";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});
	static var randomUserEmailAddress = StringUtil.randomString(8);
	var userFirstName = StringUtil.randomString(8);
	var userLastName = StringUtil.randomString(8);
	var userScreenName = StringUtil.randomString(8);
	static var randomRoleKey = StringUtil.randomString(8);

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"),
				userFirstName = ${userFirstName},
				userLastName = ${userLastName},
				userScreenName = StringUtil.toLowerCase(${userScreenName}));

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a new regular role") {
			JSONRole.addRegularRole(
				roleKey = ${randomRoleKey},
				roleTitle = ${randomRoleKey});
		}
	}

	@description = "This is a test for LPS-129406. The user that has all permissions for Web Content in Content & Data role can not add a page via Page Tree Panel."
	@priority = 4
	test CannotAddPageWithAllWebContentPermissions {
		task ("Define the permissions of regular role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com.liferay.portal.kernel.model.Group,VIEW_SITE_ADMINISTRATION:90,VIEW_CONTROL_PANEL:com_liferay_journal_web_portlet_JournalPortlet,ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW:com.liferay.journal,ADD_ARTICLE,ADD_FEED,ADD_FOLDER,ADD_STRUCTURE,ADD_TEMPLATE,PERMISSIONS,SUBSCRIBE,UPDATE,VIEW:com.liferay.journal.model.JournalFolder,ACCESS,ADD_SUBFOLDER,ADD_ARTICLE,DELETE,PERMISSIONS,SUBSCRIBE,UPDATE,VIEW:com.liferay.journal.model.JournalArticle,ADD_DISCUSSION,DELETE,DELETE_DISCUSSION,EXPIRE,PERMISSIONS,SUBSCRIBE,UPDATE,UPDATE_DISCUSSION,VIEW:com.liferay.journal.model.JournalFeed,DELETE,PERMISSIONS,UPDATE,VIEW:com.liferay.dynamic.data.mapping.model.DDMStructure-com.liferay.journal.model.JournalArticle,DELETE,PERMISSIONS,UPDATE,VIEW:com.liferay.dynamic.data.mapping.model.DDMTemplate-com.liferay.journal.model.JournalArticle,DELETE,PERMISSIONS,UPDATE,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "regular");
		}

		task ("Assign the regular role to new user") {
			JSONRole.assignRoleToUser(
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("View the new user cannot add a page via Page Tree panel") {
			ProductMenuHelper.openProductMenu();

			PagesFinder.goToPagesFinder();

			AssertElementNotPresent(locator1 = "Icon#PLUS");
		}

		task ("View the new user is able to navigate and add a Web Content") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			AssertElementPresent(locator1 = "Icon#PLUS");
		}

		task ("View the new user is able to navigate and add a Structure") {
			NavItem.gotoStructures();

			AssertElementPresent(locator1 = "Icon#PLUS");
		}

		task ("View the new user is able to navigate and add a Template") {
			NavItem.gotoTemplates();

			AssertElementPresent(locator1 = "Icon#PLUS");
		}
	}

	@description = "This is a test for LPS-106110. Pages are not shown when users are not allowed to view certain pages."
	@priority = 4
	test CannotViewChildPageWhenRemovingSiblingPagePermissions {
		task ("Define the permissions of regular role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,ACCESS_IN_CONTROL_PANEL,VIEW:com.liferay.portal.kernel.model.Group,VIEW_SITE_ADMINISTRATION:com.liferay.layout.seo,VIEW:com.liferay.depot.model.DepotEntry,VIEW_SITE_ADMINISTRATION",
				roleTitle = ${randomRoleKey},
				roleType = "regular");
		}

		task ("Assign the regular role to new user") {
			JSONRole.assignRoleToUser(
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Add two children pages for Test Page Name 1") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Child Page ${i}",
					parentLayoutName = "Test Page Name 1");
			}
		}

		task ("Remove view permission from Test Child Page 1 on Site Member and Guest") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.expandPageTree(depth = 2);

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Child Page 1");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "site-member");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("View page via Page Tree panel") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			for (var i : list "1,2") {
				PagesFinder.viewPageNameInPagesFinder(pageName = "Test Page Name ${i}");
			}

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Child Page 2");

			AssertElementNotPresent(
				key_pageName = "Test Child Page 1",
				locator1 = "PagesFinder#PAGE_NAME");
		}
	}

}