@component-name = "portal-collaboration"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property custom.properties = "default.layout.template.id=1_column";
	property testray.main.component.name = "Blogs";
	var pageName = "Blogs Page";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Blogs Page", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.addPG(portletName = "Blogs");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test"
			);

			BlogsEntry.tearDownCP();

			Blogs.tearDownConfigurationScopePG(pageName = "Blogs Page");

			Organization.tearDownCP();

			PortalInstances.tearDownCP();

			Page.tearDownCP();

			Site.tearDownCP();
		}
	}

	@priority = "4"
	test AddBlogsEntryWithHTML {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntryWithHTML(
			entryContent = '''<b>Bold Type</b> <i>Italics</i>''',
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Bold Type Italics",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContentBold = "Bold Type",
			entryContentItalics = "Italics",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test AddBlogsEntryWithInlineImage {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContentWithInlineImage(
			entryContent = "Blogs Entry Content",
			navTab = "Upload Image",
			uploadFileName = "Document_1.jpg"
		);

		Pause(locator1 = "3000");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewInlineImage(uploadFileName = "Document_1");
	}

	@priority = "5"
	test AddBlogsEntryWithSpecialCharacters {

		Blogs.addEntry(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|'''
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|'''
		);

		BlogsEntry.viewPG(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|'''
		);
	}

	@priority = "4"
	test AllowMultiplePortletConfigurationsPerSite {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Site Page 1", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Site Page 1",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		SitePages.addPublicPage(pageName = "Site Page 2", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Site Page 2",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoSitePage(pageName = "Site Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSitePage(pageName = "Site Page 2", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSitePage(pageName = "Site Page 1", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.selectMaximumItemstoDisplay(maximumItemsToDisplay = "75");

		BlogsConfiguration.uncheckComments();

		BlogsConfiguration.uncheckRelatedAssets();

		Button.clickSave();

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.gotoRSS();

		BlogsConfiguration.uncheckRSSSubscriptionCheckbox();

		Button.clickSave();

		Navigator.gotoSitePage(pageName = "Site Page 2", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.viewDefaultConfiguration();

		Navigator.openSiteURL(siteName = "Liferay");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.gotoRSS();

		BlogsConfiguration.viewDefaultConfigurationRSS();
	}

	@priority = "3"
	test ChangeBlogsEntryCoverImage {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		for (var entryCount : list "1,2") {
			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_${entryCount}.jpg",
				dmDocumentTitle = "Document_${entryCount}.jpg"
			);
		}

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_3",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Documents and Media",
			uploadFileName = "Document_3.jpg"
		);

		Button.clickPublish();

		Pause(locator1 = "30000");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_3"
		);

		BlogsNavigator.gotoBrowseImage();

		ItemSelector.searchDMImages(imageFileName = "Document_1");

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		var key_imageFileName = "Document_1.jpg";

		Click(locator1 = "ItemSelector#SELECT_FILE_IMAGE_PREVIEW");

		SelectFrameTop(value1 = "relative=top");

		AssertClick(locator1 = "ItemSelector#ADD_BUTTON", value1 = "Add");

		PortletEntry.publish();

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_1"
		);
	}

	@priority = "4"
	test ChangeBlogsRatingType {
		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		Navigator.gotoNavTab(navTab = "Social");

		PortalSettings.configureBlogsRatingType(ratingType = "Stars");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Blogs Page");

		AssertTextEquals(
			locator1 = "Ratings#AVERAGE_LABEL",
			value1 = "Average (0 Votes)"
		);

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR_EMPTY_1");
	}

	@priority = "4"
	test DeleteBlogsEntry {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.moveToRecycleBinCP(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.deleteCP(assetName = "Blogs Entry Title", assetType = "Blogs Entry");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.viewDefaultCP(assetName = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsEntry.viewDefaultCP(entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	test DeleteDraftBlogsEntry {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		BlogsEntry.moveToRecycleBinDraftCP(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.deleteCP(assetName = "Blogs Entry Title", assetType = "Blogs Entry");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.viewDefaultCP(assetName = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsEntry.viewDefaultCP(entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	test DemoTrackbackURL {
		property custom.properties = "blogs.trackback.enabled=true";
		property dummy.socket.proxy.disabled = "true";
		property test.name.skip.portal.instance = "BlogsUsecase#DemoTrackbackURL";

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title"
		);

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title",
			pageName = "Blogs Page"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title"
		);

		BlogsEntryComment.viewPG(
			commentCount = "1",
			entryComment = "[...] Blogs Entry2 Content [...] Read More",
			userFullName = "Test Test"
		);

		AssertClick(locator1 = "Link#READ_MORE", value1 = "Read More");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title"
		);

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Virtual Instances"
		);

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com"
		);

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Blogs Page", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080"
		);

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title"
		);

		var key_entryContent = "Blogs Entry3 Content";
		var key_entryTitle = "Blogs Entry3 Title";

		AssertClick.assertPartialTextClickAt(
			locator1 = "Blogs#ENTRY_COMMENTS_COUNT",
			value1 = "0"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title"
		);

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry3-title"
		);

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080"
		);

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry3 Content",
			entryContent2 = "Blogs Entry4 Content",
			entryTitle = "Blogs Entry3 Title",
			entryTitle2 = "Blogs Entry4 Title",
			pageName = "Blogs Page",
			siteName = "http://www.able.com:8080",
			virtualHosts = "true",
			virtualHostsURL = "www.able.com:8080"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry4 Content",
			entryTitle = "Blogs Entry4 Title"
		);

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title"
		);

		BlogsEntryComment.viewPG(
			commentCount = "1",
			entryComment = "[...] Blogs Entry4 Content [...] Read More",
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title",
			userFullName = "Test Test"
		);

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry3-title"
		);

		AssertClick(locator1 = "Link#READ_MORE", value1 = "Read More");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry4 Content",
			entryTitle = "Blogs Entry4 Title"
		);

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com",
			virtualHostsURL = "http://www.able.com:8080"
		);

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080"
		);

		Blogs.addEntry(
			entryContent = "Blogs Entry5 Content",
			entryTitle = "Blogs Entry5 Title"
		);

		var key_entryContent = "Blogs Entry5 Content";
		var key_entryTitle = "Blogs Entry5 Title";

		AssertClick.assertPartialTextClickAt(
			locator1 = "Blogs#ENTRY_COMMENTS_COUNT",
			value1 = "0"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry5 Content",
			entryTitle = "Blogs Entry5 Title"
		);

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry5-title"
		);

		Navigator.gotoSpecificURLPage(
			pageName = "Blogs Page",
			url = "http://www.able.com:8080"
		);

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry5 Content",
			entryContent2 = "Blogs Entry6 Content",
			entryTitle = "Blogs Entry5 Title",
			entryTitle2 = "Blogs Entry6 Title",
			pageName = "Blogs Page",
			virtualHosts = "true",
			virtualHostsURL = "http://www.able.com:8080"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry6 Content",
			entryTitle = "Blogs Entry6 Title"
		);

		BlogsNavigator.gotoPG(
			entryContent = "Blogs Entry5 Content",
			entryTitle = "Blogs Entry5 Title"
		);

		BlogsEntryComment.viewPG(
			commentCount = "1",
			entryComment = "[...] Blogs Entry6 Content [...] Read More",
			userFullName = "Test Test"
		);

		AssertTextEquals.assertValue(
			locator1 = "BlogsEntry#COMMENTS_TRACKBACK_URL",
			value1 = "http://www.able.com:8080/web/guest/blogs-page/-/blogs/trackback/blogs-entry5-title"
		);

		AssertClick(locator1 = "Link#READ_MORE", value1 = "Read More");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry6 Content",
			entryTitle = "Blogs Entry6 Title"
		);
	}

	@priority = "4"
	test ImportBlogsCommentLAR {
		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntryComment.add(entryComment = "Blogs Entry Comment");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntryComment.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Comment",
			userFullName = "Test Test"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		LAR.exportPortlet(larFileName = "Blogs.portlet.lar");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.tearDownCP();

		Navigator.gotoPage(pageName = "Blogs Page");

		LAR.importPortlet(larFileName = "Blogs.portlet.lar");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntryComment.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Comment",
			userFullName = "Test Test"
		);
	}

	@priority = "5"
	test RestoreBlogsEntry {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.moveToRecycleBinCP(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.restoreCP(
			assetName = "Blogs Entry Title",
			assetRestoreLocation = "Blogs",
			assetType = "Blogs Entry"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.viewDefaultCP(assetName = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "3"
	test StagingBlogs {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCP(siteName = "Site Name", siteType = "Blank");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Site Page Name",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Site Page Name",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Site Page Name",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Blogs Page 1", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Page 1",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs Aggregator");

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Recent Bloggers");

		ProductMenu.gotoSite(site = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Blogs Page 2", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Page 2",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 2", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		RecentBloggers.viewPG(entryAuthor = "Test Test", postCount = "1");

		BlogsAggregatorPortlet.viewBlogsEntryViaBAPortletPG(
			viewEntryTitle = "Blogs Entry Title 1"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Site Page Name",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(
			checkContentNameList = "Blogs",
			checkPageName = "Blogs Page 1"
		);

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		RecentBloggers.viewPG(entryAuthor = "Test Test", postCount = "1");

		BlogsAggregatorPortlet.viewBlogsEntryViaBAPortletPG(
			viewEntryTitle = "Blogs Entry Title 1"
		);

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 2", siteName = "Site Name");

		BlogsConfiguration.configureScopePG(
			scopeSelection = "Blogs Page 2 (Create New)"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 2", siteName = "Site Name");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		BlogsAggregatorPortlet.viewBlogsEntryViaBAPortletPG(
			viewEntryTitle = "Blogs Entry Title 1,Blogs Entry Title 2"
		);

		BlogsAggregatorPortlet.configureSelectionMethod(selectionMethod = "Scope");

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		BlogsAggregatorPortlet.viewBlogsEntryViaBAPortletPG(
			viewEntryTitle = "Blogs Entry Title 1",
			viewNoEntryTitle = "Blogs Entry Title 2"
		);

		Navigator.gotoStagedSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(
			checkContentNameList = "Blogs,Navigation Menus",
			checkPageName = "Blogs Page 2",
			contentDateRange = "All"
		);

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Blogs Page 2", siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2"
		);

		Navigator.gotoSitePage(pageName = "Blogs Page 1", siteName = "Site Name");

		BlogsAggregatorPortlet.viewBlogsEntryViaBAPortletPG(
			viewEntryTitle = "Blogs Entry Title 1",
			viewNoEntryTitle = "Blogs Entry Title 2"
		);
	}

	@priority = "3"
	test StagingBlogsCP {
		property test.name.skip.portal.instance = "BlogsUsecase#StagingBlogsCP";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCP(siteName = "Site Name", siteType = "Blank");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Site Page Name",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Site Page Name",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Site Page Name",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		ProductMenu.gotoSite(site = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();
	}

	@priority = "3"
	test StagingBlogsWithScheduledPublishing {
		property test.name.skip.portal.instance = "BlogsUsecase#StagingBlogsWithScheduledPublishing";

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCP(siteName = "Site Name", siteType = "Blank");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Blogs Page", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(pageName = "Blogs Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoStagedSitePage(pageName = "Blogs Page", siteName = "Site Name");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(pageName = "Blogs Page", siteName = "Site Name");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(
			checkContentNameList = "Blogs",
			checkPageName = "Blogs Page"
		);

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Blogs Page", siteName = "Site Name");

		Blogs.viewNoEntryCP();

		Pause(locator1 = "180000");

		Refresh();

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test ViewBlogsEntriesAsGuestViaAP {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntriesAsGuestViaAP";

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.deletePG(portletName = "Blogs");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Refresh();

		Blogs.addEntry(
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2"
		);

		BlogsEntry.removeViewPermissionsPG(
			entryTitle = "Blogs Entry Title 2",
			roleTitle = "Guest"
		);

		User.logoutPG();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title 2");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewNoEntryViaAPPG(
			assetTitle = "Blogs Entry Title 2",
			entryContent = "Blogs Entry Content 2",
			entryTitle = "Blogs Entry Title 2"
		);
	}

	@priority = "4"
	test ViewBlogsEntryAsPublishedAfterFutureDisplayDateEditing {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryAsPublishedAfterFutureDisplayDateEditing";

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editDisplayDateYear();

		PortletEntry.publish();

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editDisplayDate(displayTimeMinute = "00");

		PortletEntry.publish();

		PortletEntry.viewNoNavItemLink();

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "3"
	test ViewBlogsEntryAsPublishedViaAP {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryAsPublishedViaAP";

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Asset Publisher Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Asset Publisher Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		Blogs.addViaAP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		BlogsEntry.editEntryContent(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entrySubtitle = "",
			entrySubtitleEdit = "Blogs Entry Subtitle Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit"
		);

		BlogsEntry.saveAsDraft();

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewNoEntryViaAPPG(
			assetTitle = "Blogs Entry Title",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.publishDraftCP(
			entryContent = "Blogs Entry Content Edit",
			entrySubtitle = "Blogs Entry Subtitle Edit",
			entryTitle = "Blogs Entry Title Edit"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title Edit",
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit"
		);
	}

	@priority = "3"
	test ViewBlogsEntryFriendlyURLViaBlogsPortletAndRecentBloggers {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryFriendlyURLViaBlogsPortletAndRecentBloggers";
		var portalURL = PropsUtil.get("portal.url");
		var entryAuthor = "Test Test";
		var entryContent = "Blogs Entry Content";
		var entryTitle = "Blogs Entry Title";
		var entryTitleURL = StringUtil.replace("Blogs Entry Title", " ", "-");
		var entryTitleURL = StringUtil.lowerCase("${entryTitleURL}");
		var pageNameURL = StringUtil.replace("Blogs Page", " ", "-");
		var pageNameURL = StringUtil.lowerCase("${pageNameURL}");
		var friendlyURL = "${portalURL}/web/guest/${pageNameURL}/-/blogs/${entryTitleURL}";

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.openSpecificURL(url = "${friendlyURL}");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Recent Bloggers Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Recent Bloggers Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Recent Bloggers Page");

		Portlet.addPG(portletName = "Recent Bloggers");

		var key_entryAuthor = "Test Test";

		AssertClick(locator1 = "Blogs#RECENT_BLOGGER_USER_NAME", value1 = "Test Test");

		AssertLocation(value1 = "${friendlyURL}");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test ViewBlogsEntryOnMultiplePagesWithDefaultAndPageScope {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryOnMultiplePagesWithDefaultAndPageScope";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Navigator.gotoPage(pageName = "Blogs Page");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Blogs Page2", sitePageType = "Widget Page");

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Page2",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Blogs Page2");

		Portlet.addPG(portletName = "Blogs");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration"
		);

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsNavigator.gotoConfigurationScopePG();

		BlogsConfiguration.selectScopePG(scopeSelection = "Blogs Page2");

		Navigator.gotoPage(pageName = "Blogs Page2");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsConfiguration.selectScopeCP(
			scopeDefault = "Default",
			scopeSelection = "Blogs Page2"
		);

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryTable(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Test Test",
			entryTitle = "Blogs Entry Title"
		);

		var key_entryTitle = "Blogs Entry Title";

		AssertClick(locator1 = "Blogs#ENTRY_TABLE_TITLE", value1 = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration"
		);

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsNavigator.gotoConfigurationScopePG();

		BlogsConfiguration.viewScopeSelection(scopeSelection = "${siteName}");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration"
		);

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsNavigator.gotoConfigurationScopePG();

		BlogsConfiguration.selectScopePG(scopeSelection = "Blogs Page2");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "3"
	test ViewBlogsEntryWithCoverImageFromDMFolders {
		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Documents and Media Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Documents and Media Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.addPG(portletName = "Documents and Media");

		DMFolder.addPG(
			dmFolderDescription = "DM Folder 1 Description",
			dmFolderName = "DM Folder 1 Name"
		);

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 1 Name");

		DMFolder.addSubfolderPG(
			dmSubFolderDescription = "DM SubFolder 1 Description",
			dmSubFolderName = "DM SubFolder 1 Name"
		);

		DMNavigator.gotoFolder(dmFolderName = "DM SubFolder 1 Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg"
		);

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMFolder.addPG(
			dmFolderDescription = "DM Folder 2 Description",
			dmFolderName = "DM Folder 2 Name"
		);

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 2 Name");

		DMFolder.addSubfolderPG(
			dmSubFolderDescription = "DM SubFolder 2 Description",
			dmSubFolderName = "DM SubFolder 2 Name"
		);

		DMNavigator.gotoFolder(dmFolderName = "DM SubFolder 2 Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntryWithCoverImageFromDMFolders(
			dmFolderName = "DM Folder 1 Name",
			dmSubFolderName = "DM SubFolder 1 Name",
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title",
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntryWithCoverImageFromDMFolders(
			dmFolderName = "DM Folder 2 Name",
			dmSubFolderName = "DM SubFolder 2 Name",
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title"
		);

		AssertElementPresent(
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE",
			key_uploadFileName = "Document_1"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title"
		);

		AssertElementPresent(
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE",
			key_uploadFileName = "Document_2"
		);
	}

	@priority = "3"
	test ViewBlogsEntryWithCoverImageUploadedToDM {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg"
		);

		Pause(locator1 = "1000");

		Button.clickPublish();

		Pause(locator1 = "30000");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");
	}

	@priority = "4"
	test ViewBlogsEntryWithCustomAbstract {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryWithCustomAbstract";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addWithCustomAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test ViewBlogsEntryWithDefaultAbstract {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntryWithDefaultAbstract";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addWithDefaultAbstract(
			entryAbstractDescription = "Blogs Entry Custom Abstract",
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewAbstractDisplay(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsNavigator.gotoEntryWithAbstractPG(
			entryAbstractDescription = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent...",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Liferay Portal provides an excellent platform for building web applications, websites, and portals, but it can additionally be used for a new category of web applications called social applications. The definition is simple: a social application is a web application that additionally leverages social identity, data, and features or services. In the left figure, the light blue squares represent a definition of a standard web application while the darker blue squares show the addition of social aspects.",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "3"
	test ViewBlogsEntryWithFutureDisplayDateViaBlogsAggregator {
		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Blogs Aggregator Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Blogs Aggregator Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		Portlet.addPG(portletName = "Blogs Aggregator");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(
			entryAbstractDescription = "Blogs Entry Abstract Description"
		);

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		BlogsEntry.viewNoEntryViaBlogsAggregatorPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoEntryAsGuestPG(entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		BlogsEntry.viewNoEntryViaBlogsAggregatorPG();

		Pause(locator1 = "180000");

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		AssertTextEquals.assertTextCaseInsensitive(
			locator1 = "Portlet#H2_HEADER",
			value1 = "Blogs Aggregator"
		);

		var key_entryAbstractDescription = "Blogs Entry Abstract Description";
		var key_entryTitle = "Blogs Entry Title";

		AssertTextEquals(
			locator1 = "BlogsAggregator#ENTRY_TITLE",
			value1 = "Blogs Entry Title"
		);

		AssertTextEquals(
			locator1 = "BlogsEntry#CONTENT_ABSTRACT",
			value1 = "Blogs Entry Abstract Description"
		);

		AssertClick(
			locator1 = "BlogsAggregator#ENTRY_TITLE",
			value1 = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Aggregator Page");

		AssertTextEquals.assertTextCaseInsensitive(
			locator1 = "Portlet#H2_HEADER",
			value1 = "Blogs Aggregator"
		);

		AssertTextEquals(
			locator1 = "BlogsEntry#CONTENT_ABSTRACT",
			value1 = "Blogs Entry Abstract Description"
		);

		AssertClick(
			locator1 = "BlogsAggregator#ENTRY_TITLE",
			value1 = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test ViewBlogsEntryWithImageEditedViaItemSelector {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		ImageEditor.gotoImageEditorViaItemSelector(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media"
		);

		ImageEditor.rotateImage(rotateDirection = "right");

		Pause(locator1 = "3000");

		ImageEditor.applyChangesAndSaveFile();

		Pause(locator1 = "3000");

		SelectFrameTop(value1 = "relative=top");

		AssertClick(locator1 = "ItemSelector#ADD_BUTTON", value1 = "Add");

		AssertClick(locator1 = "Button#PUBLISH", value1 = "Publish");

		AssertTextEquals(locator1 = "Portlet#HEADER", value1 = "Blogs");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2 (1).jpg");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewInlineImage(uploadFileName = '''Document_2+%281%29.jpg''');
	}

	@priority = "3"
	test ViewBlogsEntryWithSpecialCharactersOnPrivateVirtualHost {
		property test.name.skip.portal.instance = "BlogsUsecase#ViewBlogsEntriesWithSpecialCharactersOnPublicAndPrivateVirtualHostPages";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.baker.com",
			privateVirtualHosts = "true"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPrivatePage(pageName = "Private Blogs Page");

		Navigator.gotoSpecificURLPage(
			baseURL = "http://www.baker.com:8080/group/guest",
			pageName = "Private Blogs Page"
		);

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|'''
		);

		BlogsNavigator.gotoEntryPG(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|'''
		);

		BlogsEntry.viewPG(
			entryContent = '''Blogs Entry Content `~!@#$%^&*(){}[],.<>/?|''',
			entryTitle = '''Blogs Entry Title `~!@#$%^&*(){}[],.<>/?|'''
		);
	}

	@priority = "4"
	test ViewBlogsEntryWithUploadedCoverImage {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Upload Image",
			uploadFileName = "Document_1.jpg"
		);

		Button.clickPublish();

		Pause(locator1 = "30000");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@priority = "4"
	test ViewNoBlogsDraftDisplaysInAP {
		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Asset Publisher Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Asset Publisher Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.editDraftPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Draft",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Draft"
		);

		Click(locator1 = "Icon#BACK");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content Draft",
			entryTitle = "Blogs Entry Title Draft"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		AssetPublisherPortlet.viewManualNoAssetsMessagePG();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content Draft",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Draft",
			entryTitleEdit = "Blogs Entry Title Edit"
		);

		Navigator.gotoPage(pageName = "Asset Publisher Page");

		BlogsEntry.viewEntryViaAPPG(
			assetTitle = "Blogs Entry Title Edit",
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit"
		);

		BlogsEntry.viewNoEntryViaAPPG(
			assetTitle = "Blogs Entry Title Draft",
			entryContent = "Blogs Entry Content Draft",
			entryTitle = "Blogs Entry Title Draft"
		);
	}

	@priority = "4"
	test ViewParentOrganizationViaSelectOrganizationInBlogsConfiguration {
		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.addPG(portletName = "Blogs Aggregator");

		Portlet.gotoPortletOptions(
			portletName = "${portletName}",
			portletOption = "Configuration"
		);

		var key_portletName = "Blogs Aggregator";

		AssertTextPresent(locator1 = "Portlet#TITLE", value1 = "Blogs Aggregator");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Navigator.gotoNavItem(navItem = "Setup");

		AssertClick(locator1 = "Button#SELECT", value1 = "Select");

		SelectFrame(value1 = "relative=top");

		SelectFrame(
			locator1 = "UsersAndOrganizationsSelectOrganization#SELECT_ORGANIZATION_IFRAME"
		);

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");

		IFrame.closeFrame();

		var key_modalTitle = "Configuration";

		Click(locator1 = "Button#CLOSE_MODAL");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		for (var orgName : list "Organization1 Name,Organization2 Name,Organization3 Name") {
			Organization.addCP(orgName = "${orgName}", orgType = "Organization");

			ProductMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations"
			);
		}

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.searchCP(
			orgName = "Organization3 Name",
			searchTerm = "Organization3 Name"
		);

		Organization.selectParentOrganizationCP(
			orgName = "Organization3 Name",
			parentOrgName = "Organization1 Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewParentOrganizationCP(
			orgName = "Organization1 Name",
			parentOrgExist = "true",
			parentOrgName = "Organization1 Name",
			subOrgName = "Organization3 Name"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewParentOrganizationCP(
			orgName = "Organization2 Name",
			parentOrgExist = "false"
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsAggregatorPortlet.viewParentOrganizationPG(
			orgName = "Organization2 Name",
			parentOrgName = ""
		);

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsAggregatorPortlet.viewParentOrganizationPG(
			orgName = "Organization3 Name",
			parentOrgName = "Organization1 Name"
		);
	}
}