@component-name = "portal-change-list"
@ignore = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Change List";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Change Lists",
			panel = "Control Panel",
			portlet = "Settings");

		ChangeList.enableChangeList();

		ChangeList.changeUserSettingsPopuConfirmation(changeUserPopupConfirmation = "disable");

		ProductMenu.gotoPortlet(
			category = "Change Lists",
			panel = "Control Panel",
			portlet = "Overview");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ProductMenu.gotoPortlet(
				category = "Change Lists",
				panel = "Control Panel",
				portlet = "Settings");

			ChangeList.changeUserSettingsPopuConfirmation(changeUserPopupConfirmation = "enable");

			ChangeList.disableChangeList();
		}
	}

	@priority = "5"
	test AssertOnChangesDisplayedInTheActiveChangeList {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "First Web Content");

		Button.clickPublishToChangeList();

		Click(locator1 = "ChangeList#INDICATOR");

		ChangeList.viewChangeOnOverview(
			contentChangeType = "Added",
			contentTitle = "First Web Content",
			contentType = "Web Content");

		ChangeList.selectChangeList(changeListName = "Select Change List");

		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Second Change List Name");

		AssertTextEquals(
			locator1 = "ChangeList#ACTIVE_CHANGE_LIST_TITLE",
			value1 = "Second Change List Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "Second Web Content");

		Button.clickPublishToChangeList();

		Click(locator1 = "ChangeList#INDICATOR");

		ChangeList.viewChangeOnOverview(
			contentChangeType = "Added",
			contentTitle = "Second Web Content",
			contentType = "Web Content");
	}

	@priority = "5"
	test AssertOnChangesDisplayedOnOverview {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "Web Content Title");

		Button.clickPublishToChangeList();

		ProductMenu.gotoPortlet(
			category = "Change Lists",
			panel = "Control Panel",
			portlet = "Overview");

		ChangeList.viewChangeOnOverview(
			contentChangeType = "Added",
			contentTitle = "Web Content Title",
			contentType = "Web Content");

		ChangeList.viewAddedItemCounter(nbrOfAddedItems = "1");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.editCP(
			changeListEnabled = "true",
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "Web Content Title",
			webContentTitleEdit = "Web Content Title Edit");

		ProductMenu.gotoPortlet(
			category = "Change Lists",
			panel = "Control Panel",
			portlet = "Overview");

		ChangeList.viewChangeOnOverview(
			contentChangeType = "Modified",
			contentTitle = "Web Content Title Edit",
			contentType = "Web Content");

		ChangeList.viewModifiedItemCounter(nbrOfModifiedItems = "1");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "Web Content Title Edit");

		ProductMenu.gotoPortlet(
			category = "Change Lists",
			panel = "Control Panel",
			portlet = "Overview");

		ChangeList.viewChangeOnOverview(
			contentChangeType = "Deleted",
			contentTitle = "Web Content Title Edit",
			contentType = "Web Content");

		ChangeList.viewAddedItemCounter(nbrOfAddedItems = "1");

		ChangeList.viewModifiedItemCounter(nbrOfModifiedItems = "0");

		ChangeList.viewDeletedItemCounter(nbrOfDeletedItems = "1");
	}

	@priority = "4"
	test AssertOnStructureContentType {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		Navigator.gotoNavItem(navItem = "Structures");

		WebContentStructures.addCP(
			structureDescription = "Structure Description",
			structureName = "My Structure");

		DynamicDataMapping.addField(
			field = "Web Content",
			fieldFieldLabel = "Web Content",
			fieldName = "WebContent");

		WebContentStructures.saveCP(
			changeListEnabled = "true",
			structureName = "My Structure");

		Click(locator1 = "ChangeList#INDICATOR");

		ChangeList.viewContentTypeOnOverview(
			contentTitle = "My Structure",
			contentType = "Dynamic Data Mapping Structure");
	}

	@priority = "4"
	test AssertOnTemplateContentType {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			changeListEnabled = "true",
			structureName = "Basic Web Content",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		Click(locator1 = "ChangeList#INDICATOR");

		ChangeList.viewContentTypeOnOverview(
			contentTitle = "WC Template Name",
			contentType = "Dynamic Data Mapping Template");
	}

	@priority = "3"
	test CancelChangeListCreation {
		ChangeList.cancelChangeListCreation();
	}

	@description = "Create New Change List"
	@priority = "5"
	test CreateNewChangeListAndActivate {
		property test.name.skip.portal.instance = "ChangeListGlobalOverview#CreateNewChangeListAndActivate";

		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ChangeList.selectChangeList(changeListName = "Select Change List");

		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Second Change List Name");

		AssertTextEquals(
			locator1 = "ChangeList#ACTIVE_CHANGE_LIST_TITLE",
			value1 = "Second Change List Name");

		AssertTextPresent(
			locator1 = "ChangeList#EMPTY_PRODUCTION_VIEW_TEXT",
			value1 = "No change list has been published yet.");

		ChangeList.selectChangeList(changeListName = "Select Change List");

		ChangeList.searchForChangeList(changeListName = "Change List Name");

		Click(
			key_changeListName = "Change List Name",
			locator1 = "ChangeList#CHANGE_LIST_NAME_CARD_VIEW");

		AssertTextEquals(
			locator1 = "ChangeList#ACTIVE_CHANGE_LIST_TITLE",
			value1 = "Change List Name");

		ChangeList.selectChangeList(changeListName = "Second Change List Name");

		AssertTextEquals(
			locator1 = "ChangeList#ACTIVE_CHANGE_LIST_TITLE",
			value1 = "Second Change List Name");

		AssertTextPresent(
			locator1 = "ChangeList#EMPTY_PRODUCTION_VIEW_TEXT",
			value1 = "No change list has been published yet.");
	}

	@priority = "4"
	test CreateNewChangeListExistingName {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ProductMenu.gotoPortlet(
			category = "Change Lists",
			panel = "Control Panel",
			portlet = "Overview");

		ChangeList.selectChangeList(changeListName = "Select Change List");

		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		Alert.viewErrorMessage(errorMessage = "Name is already used by another change list.");
	}

	@description = "Try to create new change list with too long name"
	@priority = "3"
	test CreateNewChangeListWithLongName {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphioparaomelitokatakechymenokichlepikossyphophattoperisteralektryonoptekephalliokigklopeleiolagoiosiraiobaphetraganopterygon");

		Alert.viewLengthValidationField();
	}

	@description = "Try to create new change list with empty string name"
	@priority = "3"
	test CreateNewChangeListWithNoName {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = " ");

		Alert.viewRequiredField();
	}

	@description = "Try to create new change list with empty string in the description"
	@priority = "3"
	test CreateNewChangeListWithSpaceInTheDescription {
		ChangeList.addNewChangeList(
			changeListDescription = " ",
			changeListName = "Change List Name");

		AssertTextEquals(
			locator1 = "ChangeList#ACTIVE_CHANGE_LIST_TITLE",
			value1 = "Change List Name");
	}

	@priority = "5"
	test DeleteChangeListFromOverviewScreen {
		ChangeList.addNewChangeList(
			changeListDescription = "Change List Description",
			changeListName = "Change List Name");

		ChangeList.deleteChangeListFromOverviewScreen(changeListName = "Change List Name");
	}

}