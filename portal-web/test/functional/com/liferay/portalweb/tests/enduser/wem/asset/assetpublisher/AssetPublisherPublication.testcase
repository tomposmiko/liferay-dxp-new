@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Publisher";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page",
			widgetName = "Asset Publisher");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This is a use case for LPS-82674."
	@priority = "4"
	test PublishDeleteWCFolderWithArticleViaAP {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		JSONWebcontent.addFolder(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name",
			groupName = "Site Name (Staging)",
			site = "false");

		JSONWebcontent.addWebContent(
			content = "Webcontent Content",
			folderName = "WC Folder Name",
			groupName = "Site Name (Staging)",
			site = "false",
			title = "Webcontent Title");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Alert.viewInfoMessageSpecific(infoMessage = "There are no results.");

		Navigator.openSiteURL(siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "WC Folder Description",
			assetTitle = "WC Folder Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Webcontent Content",
			assetTitle = "Webcontent Title");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSiteURL(siteName = "Site Name");

		Alert.viewInfoMessageSpecific(infoMessage = "There are no results.");
	}

	@description = "This is a use case for LPS-81196."
	@priority = "3"
	test StagingPublishAssetPublisherConfiguredCategoriesFilter {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		JSONCategory.addVocabulary(
			groupName = "Site Name (Staging)",
			site = "false",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Site Name (Staging)",
			site = "false",
			title = "Category Name 1",
			vocabularyName = "Vocabulary Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.configureCategoriesFilterPG(categoryName = "Category Name 1");

		IFrame.closeFrame();

		var categoryId = JSONCategory.getCategoryId(
			categoryName = "Category Name 1",
			groupName = "Site Name (Staging)",
			site = "false",
			vocabularyName = "Vocabulary Name");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${categoryId}",
			content = "Web Content With One Category",
			groupName = "Site Name (Staging)",
			site = "false",
			title = "Web Content Title 1");

		JSONCategory.addCategory(
			groupName = "Site Name (Staging)",
			site = "false",
			title = "Category Name 2",
			vocabularyName = "Vocabulary Name");

		var firstCategoryId = JSONCategory.getCategoryId(
			categoryName = "Category Name 1",
			groupName = "Site Name (Staging)",
			site = "false",
			vocabularyName = "Vocabulary Name");
		var secondCategoryId = JSONCategory.getCategoryId(
			categoryName = "Category Name 2",
			groupName = "Site Name (Staging)",
			site = "false",
			vocabularyName = "Vocabulary Name");

		JSONWebcontent.addWebContent(
			assetCategoryIds = "${firstCategoryId},${secondCategoryId}",
			content = "Web Content With Two Categories",
			groupName = "Site Name (Staging)",
			site = "false",
			title = "Web Content Title 2");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content With One Category",
			assetTitle = "Web Content Title 1");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content With Two Categories",
			assetTitle = "Web Content Title 2");

		AssetPublisherPortlet.editConfigureCategoriesFilterPG(
			categoryNames = "Category Name 1,Category Name 2",
			queryContains = "Does not Contain");

		IFrame.closeFrame();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content With One Category",
			assetTitle = "Web Content Title 1");

		AssetPublisherPortlet.viewAssetNotPresentPG(
			assetContent = "Web Content With Two Categories",
			assetTitle = "Web Content Title 2");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content With One Category",
			assetTitle = "Web Content Title 1");

		AssetPublisherPortlet.viewAssetNotPresentPG(
			assetContent = "Web Content With Two Categories",
			assetTitle = "Web Content Title 2");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();
	}

}