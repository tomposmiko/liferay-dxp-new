@component-name = "portal-publications"
definition {

	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Page Administration";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "Create content page template into a Publication and publish"
	@priority = 3
	test CanCreateContentPageTemplateAndPublish {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		task ("Add a content page template") {
			JSONGroup.addGroup(groupName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Content Page Template Name",
				pageTemplateType = "Content Page Template");
		}

		task ("Add fragments to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.publish();
		}

		task ("Add a content page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Content Page Template Name");
		}

		task ("View the fragments are shown in content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			PageEditor.viewFragment(fragmentName = "Button");
		}

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");
	}

	@description = "Add custom fragments into a publication and publish"
	@priority = 3
	test CanCreateCustomFragmentsAndPublish {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		task ("Add a fragment collection") {
			JSONFragment.addFragmentCollection(
				groupName = "Site Name",
				name = "Collection Name");
		}

		task ("Add a new fragment") {
			var htmlSnippet = '''<div class="component-test-fragment-name">%0A%09<h2 data-lfr-editable-id="title1" data-lfr-editable-type="rich-text"></h2>%0A</div>''';

			JSONFragment.addSection(
				collectionName = "Collection Name",
				fragmentStatus = "Approved",
				groupName = "Site Name",
				html = ${htmlSnippet},
				name = "Test Fragment Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Content Page Name",
				type = "content");
		}

		task ("Add a new fragment to the page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Test Fragment Name");
		}

		task ("Publish the new fragment") {
			PageEditor.viewFragmentEditableText(
				editableText = "Example Rich Text",
				fragmentName = "Test Fragment Name",
				id = "title1");

			PageEditor.publish();
		}

		task ("View the new fragment") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Site Name");

			ContentPages.viewFragmentText(
				fragmentName = "test-fragment-name",
				id = "title1",
				text = "Example Rich Text");
		}

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");
	}

	@description = "Create pages through an existing page template into a publication and publish"
	@priority = 3
	test CanCreatePagethroughExistingPageTemplateAndPublish {
		task ("Add a widget page template") {
			JSONGroup.addGroup(groupName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.addCollection(collectionName = "Widget Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Widget Page Template Name",
				pageTemplateType = "Widget Page Template");
		}

		task ("Add a Blogs widget to widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Widget Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Widget Page Template Name");

			Portlet.addPG(portletName = "Blogs");
		}

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		task ("Adds a widget page based on template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			PagesAdmin.addPage(
				collectionName = "Widget Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Widget Page Template Name");
		}

		task ("View Blogs widget in widget page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			Portlet.viewSpecificPG(portletName = "Blogs");
		}

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");
	}

	@description = "This is a use cas for LPS-176197. As a publication admin, I would like to preview fragment before publishing"
	@priority = 3
	test CanPreviewAfterChangeFragmentBeforePublishing {
		task ("Add Content Page with paragraph fragment") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");

			PageEditor.publish();
		}

		JSONPublications.addPublication(publicationName = "Test Publication");

		JSONPublications.selectPublication(publicationName = "Test Publication");

		task ("Edit paragraph fragment and assert the preview before and after the change") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page",
				siteName = "Guest");

			PageEditor.editFragmentText(
				fragmentName = "Paragraph",
				id = "element-text",
				text = "Paragraph text edited.");

			PageEditor.publish();

			PublicationsNavigator.gotoReviewChanges();

			PublicationsChanges.viewChanges(
				changeCategory = "Page",
				changeSite = "Guest",
				changeTitle = "Test Page",
				changeType = "Modified",
				changeUser = "Test Test");

			PublicationsNavigator.gotoViewChangeDetails(
				changeCategory = "Page",
				changeTitle = "Test Page");

			var ctCollectionId = JSONPublicationsAPI._getCTCollectionId(publicationName = "Test Publication");

			PublicationsChangeDetails.viewFragmentChangePreviewInDisplay(
				fragmentPreviewInProduction = "previewCTCollectionId=0",
				fragmentPreviewInPublication = "previewCTCollectionId=${ctCollectionId}");
		}
	}

	@description = "This is a use case for LPS-164162 - Styling Content Pages is not properly applied when the user edits a page in a Publication"
	@priority = 3
	test CanStyleContentPages {
		task ("Enable Publications and add Content Page") {
			ContentPages.addPage(pageName = "Example Page");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				navTab = "Fragments");

			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = 2,
				fragmentName = "Button",
				navTab = "Fragments");

			PageEditor.publish();
		}

		task ("Create new publication and edit Content Page") {
			JSONPublications.addPublication(publicationName = "Test Publication");

			JSONPublications.selectPublication(publicationName = "Test Publication");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Example Page",
				siteName = "Guest");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(
				paddingLeft = 2,
				paddingRight = 2);

			PageEditor.publish();
		}

		task ("Go to edit Content Page again and assert that 'spacing' is changed") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Example Page",
				siteName = "Guest");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 2,
				paddingRight = 2);
		}
	}

	@priority = 4
	test ContentPageChangesCanBeAutomaticallyResolved {
		property test.assert.warning.exceptions = "true";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Content Page Name",
			type = "content");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication Name 1");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Separator");

		PageEditor.addWidget(
			portletName = "Web Content Display",
			targetFragmentName = "Separator");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Refresh();

		PageEditor.publish();

		JSONPublications.addPublication(publicationName = "Publication Name 2");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Paragraph");

		PageEditor.gotoStyle(fragmentName = "Paragraph");

		PageEditor.configureFragment(
			alignment = "Align Right",
			textColor = "Warning");

		PageEditor.addWidget(
			portletName = "Asset Publisher",
			targetFragmentName = "Paragraph");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content");

		Refresh();

		PageEditor.publish();

		JSONPublications.publishPublication(publicationName = "Publication Name 2");

		Publications.viewPublicationPublished(publicationName = "Publication Name 2");

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name 1");

		AssertElementNotPresent(locator1 = "Publications#NEEDS_MANUAL_RESOLUTION_TABLE");

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "This publication contains changes to a content page. Publishing these changes will fully overwrite the page's content and layout in production.");

		Publications.publishPublication(publicationName = "Publication Name 1");
	}

	@description = "This is the use case for LPS-148816. Preview pages when reviewing publication changes"
	@priority = 4
	test PreviewPageWhenReviewingPublicationChanges {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		PublicationsChanges.viewChanges(
			changeCategory = "Page Set",
			changeSite = "Site Name",
			changeTitle = "Pages",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Page",
			changeSite = "Site Name",
			changeTitle = "Test Page",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsNavigator.gotoViewChangeDetails(
			changeCategory = "Page",
			changeTitle = "Test Page");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Display");

		AssertVisible(
			key_pageURL = "site-name/test-page?p_l_mode=preview&previewCTCollection",
			locator1 = "PublicationsChangeDetails#PAGE_VIEWPORT_PREVIEW");
	}

	@priority = 4
	test PublishDeletedPageWithTag {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		AssetCategorization.addTag(tagName = "tag name");

		PortletEntry.save();

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Tag",
			changeSite = "Site Name",
			changeTitle = "tag name",
			changeType = "Added",
			changeUser = "Test Test");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.deletePage(pageName = "Test Page");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		Page.viewNoPG(pageName = "Test Page");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Page",
			changeSite = "Site Name",
			changeTitle = "Test Page",
			changeType = "Deleted",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.openSiteURL(siteName = "site-name");

		Page.viewNoPG(pageName = "Test Page");
	}

	@priority = 4
	test PublishPrivateContentPageWithFragment {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONFragment.addFragmentCollection(
			groupName = "Site Name",
			name = "Collection Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		var fragmentHtml = '''<lfr-widget-asset-list>''';
		var htmlSnippet = '''<lfr-''';

		FragmentsEditor.autocompleteFragmentHTML(
			autocompleteField = "lfr-widget-asset-list",
			fragmentHtml = ${fragmentHtml},
			htmlSnippet = ${htmlSnippet});

		PortletEntry.publish();

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		ContentPages.addPrivatePage(pageName = "Test Page");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Fragment Name");

		PageEditor.publish();

		Navigator.openWithAppendToBaseURL(urlAppend = "group/site-name/test-page");

		WebContent.viewPGViaAP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.gotoPrivateSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContent.viewPGViaAP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@priority = 5
	test ViewPageFriendlyURLAfterRevertingPublication {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		PagesAdmin.editFriendlyURL(friendlyURLEdit = "/test-page-edited");

		AssertTextEquals(
			key_text = "Friendly URL",
			locator1 = "TextInput#ANY",
			value1 = "/test-page-edited");

		Publications.workOnProduction();

		AssertTextEquals(
			key_text = "Friendly URL",
			locator1 = "TextInput#ANY",
			value1 = "/test-page");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		AssertTextEquals(
			key_text = "Friendly URL",
			locator1 = "TextInput#ANY",
			value1 = "/test-page-edited");

		PublicationsNavigator.openPublicationsHistory();

		Publications.revertPublication(publicationName = "Publication Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page");

		AssertTextEquals(
			key_text = "Friendly URL",
			locator1 = "TextInput#ANY",
			value1 = "/test-page");
	}

	@description = "Widgets pages run into conflicts in a publication"
	test WidgetPageChangesCanBeAutomaticallyResolved {
		JSONGroup.addGroup(groupName = "Test Site");

		JSONLayout.addPublicLayout(
			groupName = "Test Site",
			layoutName = "Test Widget Page Name");

		JSONPublications.addPublication(publicationName = "Test Publication");

		Publications.selectPublication(publicationName = "Test Publication");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site",
			layoutName = "Test Widget Page Name",
			widgetName = "Asset Publisher");

		Publications.selectPublication(publicationName = "Test Publication");

		Publications.workOnProduction();

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site",
			layoutName = "Test Widget Page Name",
			widgetName = "Asset Publisher");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Test Publication");

		Button.clickPublish();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "No unresolved conflicts, ready to publish.");
	}

}