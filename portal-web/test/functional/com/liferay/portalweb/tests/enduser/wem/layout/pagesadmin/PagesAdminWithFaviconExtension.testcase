@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Page Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});
	static var randomEntryName1 = StringUtil.randomString(8);
	static var randomEntryName2 = StringUtil.randomString(8);

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add two remote apps for favicon extension") {
			JSONClientExtension.addRemoteAppEntry(
				name = ${randomEntryName1},
				type = "themeFavicon",
				url = "https://www.google.com/favicon.ico");

			JSONClientExtension.addRemoteAppEntry(
				name = ${randomEntryName2},
				type = "themeFavicon",
				url = "https://www.nba.com/favicon.ico");
		}
	}

	@description = "This is a test for LPS-153654. The site designer could change favicon from favicon extension for page, page template, and group of pages."
	@priority = 5
	test ChangeFavicons {
		property portal.acceptance = "true";

		task ("Given a site designer has a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Widget Page Name");
		}

		task ("When the site designer accesses to the widget page") {
			Navigator.gotoSitePage(
				pageName = "Widget Page Name",
				siteName = "Test Site name");
		}

		task ("Then the site designer could view the favicon from theme") {
			AssertElementPresent(
				imageFileName = "classic-theme/images/favicon.ico",
				locator1 = "Icon#FAVICON");
		}

		task ("When the site designer add a favicon extension to widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Widget Page Name");

			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = "Favicon from Theme");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName1});

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName1});

			PortletEntry.save();
		}

		task ("Then the site designer could view the new favicon on widget page") {
			Navigator.gotoSitePage(
				pageName = "Widget Page Name",
				siteName = "Test Site name");

			AssertElementPresent(
				imageFileName = "https://www.google.com/favicon.ico",
				locator1 = "Icon#FAVICON");
		}

		task ("Given a site designer has a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Collection");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Page Template Name",
				pageTemplateType = "Content Page Template");

			PageEditor.assertFragmentSidebarLoaded();

			AssertElementPresent(
				imageFileName = "classic-theme/images/favicon.ico",
				locator1 = "Icon#FAVICON");
		}

		task ("When the site designer changes favicon of content page template") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = "Favicon from Theme");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName1});

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName1});

			PortletEntry.save();
		}

		task ("Then the site designer could view the new favicon on content page template") {
			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertElementPresent(
				imageFileName = "https://www.google.com/favicon.ico",
				locator1 = "Icon#FAVICON");
		}

		task ("When the site designer changes favicon of pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			WaitForPageLoad();

			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = "Favicon from Theme");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName2});

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName2});

			PortletEntry.save();
		}

		task ("Then the site designer could view the new favicon on new page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertElementPresent(
				imageFileName = "https://www.nba.com/favicon.ico",
				locator1 = "Icon#FAVICON");

			Navigator.gotoSitePage(
				pageName = "Widget Page Name",
				siteName = "Test Site name");

			AssertElementPresent(
				imageFileName = "https://www.google.com/favicon.ico",
				locator1 = "Icon#FAVICON");
		}
	}

	@description = "This is a test for LPS-153654. The site designer could clear the favicon extenion selection."
	@priority = 4
	test ClearFaviconExtensionSelection {
		task ("Given a site designer has a content page with a favicon extension") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName1});

			PortletEntry.save();
		}

		task ("When the site designer accesses to the Look and Feel settings") {
			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();
		}

		task ("Then the site designer could clear the favicon extension selection") {
			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName1});

			Click(
				ariaLabel = "Clear Favicon",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = "Favicon from Theme");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertElementPresent(
				imageFileName = "classic-theme/images/favicon.ico",
				locator1 = "Icon#FAVICON");
		}
	}

	@description = "This is a test for LPS-153654. The site designer could apply a different favicon extension to an inheritor page from master page."
	@priority = 4
	test OverwriteInheritedFavionExtensionFromMasterPageTemplate {
		task ("Given a site designer has a content page with inherited favicon extension from master page template") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = ${randomSiteName},
				masterPageTemplateEntryName = "Master Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${siteURLKey});

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Master Page Template");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName1});

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			MastersPageTemplates.publishMaster();

			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addPage(
				masterLayoutName = "Master Page Template",
				pageName = "Test Page Name");
		}

		task ("When the site designer accesses to the Look and Feel settings of content page") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = "Favicon from Master");
		}

		task ("Then the site designer could apply a new favicon extension") {
			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName2});

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName2});

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertElementPresent(
				imageFileName = "https://www.nba.com/favicon.ico",
				locator1 = "Icon#FAVICON");
		}
	}

	@description = "This is a test for LPS-153654. The site designer could apply a different favicon extension to an inheritor page from page template."
	@priority = 4
	test OverwriteInheritedFavionExtensionFromPageTemplate {
		task ("Given a site designer has a content page with inherited favicon extension from content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Collection");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Page Template Name",
				pageTemplateType = "Content Page Template");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName1});

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();

			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("When the site designer accesses to the Look and Feel settings of content page") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();
		}

		task ("Then the site designer could apply a new favicon extension") {
			Navigator.gotoNavTab(navTab = "Design");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName2});

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName2});

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertElementPresent(
				imageFileName = "https://www.nba.com/favicon.ico",
				locator1 = "Icon#FAVICON");
		}
	}

	@description = "This is a test for LPS-153654. Page should inherit the favicon extension from page template."
	@priority = 4
	test ViewInheritedFavionExtensionFromPageTemplate {
		task ("Given a site designer has a content page template with a favicon extension") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Collection");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Page Template Name",
				pageTemplateType = "Content Page Template");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			PagesAdmin.selectFaviconExtension(extensionName = ${randomEntryName1});

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("When the site designer creates a content page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Then the site designer see the inherited favicon extension from content page template") {
			AssertElementPresent(
				imageFileName = "https://www.google.com/favicon.ico",
				locator1 = "Icon#FAVICON");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				locator1 = "PagesAdmin#FAVICON_NAME",
				value1 = ${randomEntryName1});
		}
	}

}