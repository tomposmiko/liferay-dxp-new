definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Remote Apps";
	property testray.main.component.name = "Remote Apps";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a created Remote App > Custom Element with Use ES modules checked") {
			JSONClientExtension.addCustomElementRemoteAppEntry(
				customElementHtmlName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementURL = "https://localhost:8081/runtime.js",
				customElementUseESM = "true");
		}

		task ("And Given a Remote App portlet added to widget page") {
			ClientExtension.addPortletToWidgetPage(
				portletName = "Vanilla Counter",
				widgetPageName = "My Widget Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ClientExtensionGeneral.tearDown();

			Navigator.gotoPage(pageName = "Home");

			while (IsElementPresent(locator1 = "Navigation#ANY_SITE_NAV_BUT_HOME")) {
				var layoutName = selenium.getText("Navigation#ANY_SITE_NAV_BUT_HOME");

				JSONLayout.deletePublicLayout(
					groupName = "Guest",
					layoutName = "${layoutName}");

				Navigator.gotoPage(pageName = "Home");

				PortalInstances.tearDownCP();
			}
		}
	}

	@description = "LPS-165438. When add a remote app in the html <script> tag with src is rendered as a module type"
	@priority = "5"
	test CanRenderCustomElementAsModuleType {
		task ("When Navigate to remote app portlet page") {
			Navigator.gotoPage(pageName = "My Widget Page");

			// Workaround for page to render script tag when using json to setup the test

			Refresh();
		}

		task ("Then in the html <script> tag with src 'https://localhost:8081/runtime.js' is rendered as a module type") {
			AssertElementPresent(locator1 = "//script[contains(@src,'https://localhost:8081/runtime.js') and contains(@type,'module')]");
		}
	}

}