@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogPostingAPI.deleteAllBlogPostings();

			JSONSitenavigation.deleteSiteNavigationMenu(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");

			JSONWebcontent.deleteWebContent(
				groupName = "Guest",
				title = "Web Content Title");

			JSONDocument.deleteFile(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Guest");

			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@priority = "4"
	test GetAssetLibraryDocumentInformationInNavigationMenuWithSiteId {
		property portal.acceptance = "true";

		task ("And Given an asset library connect to the site") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "Guest");
		}

		task ("And Given a document is uploaded with post request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var documentId = DocumentAPI.getIdOfCreatedDocument(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				filePath = "${filePath}");
		}

		task ("And Given a navigation menu doesn't use custom name associate with the document through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Document_1.txt",
				depotName = "Test Depot Name",
				item = "Document");
		}

		task ("When with get request and siteId to retrieve the navigation menu") {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "Guest");

			var response = NavigationMenuAPI.getNavigationMenu(siteId = "${siteId}");
		}

		task ("Then I can see values of useCustomName is false, contentURL equals to document endpoint and type equals to document") {
			var portalURL = JSONCompany.getPortalURL();

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "document",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/documents/${documentId}",
				expectedUseCustomName = "false",
				responseFromSite = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetAssetLibraryDocumentInformationWithNavigationMenuId {
		property portal.acceptance = "true";

		task ("And Given an asset library connect to the site") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "Guest");
		}

		task ("And Given a document is uploaded with post request in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var filePath = TestCase.getDependenciesDirPath(fileName = "Document_1.txt");

			var documentId = DocumentAPI.getIdOfCreatedDocument(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				filePath = "${filePath}");
		}

		task ("And Given a navigation menu use custom name associate with the document through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Document_1.txt",
				depotName = "Test Depot Name",
				item = "Document");

			NavigationMenusAdmin.editItem(
				itemName = "Document_1.txt",
				useCustomName = "true");
		}

		task ("When with get request and navigationMenuId to retrieve the navigation menu") {
			var navigationMenuId = JSONSitenavigationSetter.setSiteNavigationMenuId(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");

			var response = NavigationMenuAPI.getNavigationMenu(navigationMenuId = "${navigationMenuId}");
		}

		task ("Then I can see values of useCustomName equals to true, contentURL equals to document endpoint and type equals to document") {
			var portalURL = JSONCompany.getPortalURL();

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "document",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/documents/${documentId}",
				expectedUseCustomName = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetAssetLibraryStructuredContentInformationInNavigationMenuWithSiteId {
		property portal.acceptance = "true";

		task ("And Given an asset library connect to the site") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "Guest");
		}

		task ("And Given a content structure created in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			WebContentNavigator.openWebContentStructuresAdminInAssetLibrary(depotId = "${assetLibraryId}");

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("And Given a web content article is created in asset Library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseFromCreate = HeadlessWebcontentAPI.createStructuredContentInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "Web Content Title");
		}

		task ("And Given a navigation menu use custom name associate with the created web content through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				depotName = "Test Depot Name",
				item = "Web Content Article");

			NavigationMenusAdmin.editItem(
				itemName = "Web Content Title",
				useCustomName = "true");
		}

		task ("When with get request and siteId to retrieve the navigation menu") {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "Guest");

			var response = NavigationMenuAPI.getNavigationMenu(siteId = "${siteId}");
		}

		task ("Then I can see values of useCustomName equals to true, contentURL equals to webcontent endpoint and type equals to structuredContent") {
			var portalURL = JSONCompany.getPortalURL();
			var structuredContentId = HeadlessWebcontentAPI.getWebContentIdFromResponse(responseToParse = "${responseFromCreate}");

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "structuredContent",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/structured-contents/${structuredContentId}",
				expectedUseCustomName = "true",
				responseFromSite = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetAssetLibraryWebContentArticlesInformationWithNavigationMenuId {
		property portal.acceptance = "true";

		task ("And Given an asset library connect to the site") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "Guest");
		}

		task ("And Given a content structure created in asset library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			WebContentNavigator.openWebContentStructuresAdminInAssetLibrary(depotId = "${assetLibraryId}");

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}

		task ("And Given a web content article is created in asset Library") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseFromCreate = HeadlessWebcontentAPI.createStructuredContentInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "Web Content Title");
		}

		task ("And Given a navigation menu doesn't use custom name associate with the web content through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				depotName = "Test Depot Name",
				item = "Web Content Article");
		}

		task ("When with get request and navigationMenuId to retrieve the navigation menu") {
			var navigationMenuId = JSONSitenavigationSetter.setSiteNavigationMenuId(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");

			var response = NavigationMenuAPI.getNavigationMenu(navigationMenuId = "${navigationMenuId}");
		}

		task ("Then I can see values of useCustomName is false, contentURL equals to webcontent endpoint and type equals to structuredContent") {
			var portalURL = JSONCompany.getPortalURL();
			var structuredContentId = HeadlessWebcontentAPI.getWebContentIdFromResponse(responseToParse = "${responseFromCreate}");

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "structuredContent",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/structured-contents/${structuredContentId}",
				expectedUseCustomName = "false",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetBlogEntryInformationInNavigationMenuWithNavigationMenuId {
		property portal.acceptance = "true";

		task ("And Given with post request and siteId I create a blog entry") {
			var blogPostingId = BlogPostingAPI.getIdOfCreatedBlogPosting(
				articleBody = "ArticleBody",
				headline = "Headline");
		}

		task ("And Given the navigation menu doesn't use custom name assciate with blog entry through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Headline",
				item = "Blogs Entry");
		}

		task ("When with get request to retrieve the navigation menu with navigationMenuId") {
			var navigationMenuId = JSONSitenavigationSetter.setSiteNavigationMenuId(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");

			var response = NavigationMenuAPI.getNavigationMenu(navigationMenuId = "${navigationMenuId}");
		}

		task ("Then I can see values of useCustomName is false, contentURL equals to blog endpoint and type equals to blogPosting") {
			var portalURL = JSONCompany.getPortalURL();

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "blogPosting",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/blog-postings/${blogPostingId}",
				expectedUseCustomName = "false",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetBlogEntryInformationInNavigationMenuWithSiteId {
		property portal.acceptance = "true";

		task ("And Given with post request and siteId I create a blog entry") {
			var blogPostingId = BlogPostingAPI.getIdOfCreatedBlogPosting(
				articleBody = "ArticleBody",
				headline = "Headline");
		}

		task ("And Given the navigation menu which use custom name associate with the blog entry though UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Headline",
				item = "Blogs Entry");

			NavigationMenusAdmin.editItem(
				itemName = "Headline",
				useCustomName = "true");
		}

		task ("When with get request to retrieve the navigation menu with siteId") {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "Guest");

			var response = NavigationMenuAPI.getNavigationMenu(siteId = "${siteId}");
		}

		task ("Then I can see values of useCustomName is true, contentURL equals to blog endpoint and type equals to blogPosting") {
			var portalURL = JSONCompany.getPortalURL();

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "blogPosting",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/blog-postings/${blogPostingId}",
				expectedUseCustomName = "true",
				responseFromSite = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetDocumentInformationInNavigationMenuWithSiteId {
		property portal.acceptance = "true";

		task ("And Given a document is uploaded with post request") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Guest",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("And Given a navigation menu doesn't use custom name associate with the document through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Document_1.txt",
				item = "Document");
		}

		task ("When with get request and siteId to retrieve the navigation menu") {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "Guest");

			var response = NavigationMenuAPI.getNavigationMenu(siteId = "${siteId}");
		}

		task ("Then I can see values of useCustomName is false, contentURL equals to document endpoint and type equals to document") {
			var portalURL = JSONCompany.getPortalURL();
			var documentId = JSONDocument.getFileEntryId(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Guest");

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "document",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/documents/${documentId}",
				expectedUseCustomName = "false",
				responseFromSite = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetDocumentInformationWithNavigationMenuId {
		property portal.acceptance = "true";

		task ("And Given a document is uploaded with post request") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Guest",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("And Given a navigation menu use custom name associate with the document through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Document_1.txt",
				item = "Document");

			NavigationMenusAdmin.editItem(
				itemName = "Document_1.txt",
				useCustomName = "true");
		}

		task ("When with get request and navigationMenuId to retrieve the navigation menu") {
			var navigationMenuId = JSONSitenavigationSetter.setSiteNavigationMenuId(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");

			var response = NavigationMenuAPI.getNavigationMenu(navigationMenuId = "${navigationMenuId}");
		}

		task ("Then I can see values of useCustomName equals to true, contentURL equals to document endpoint and type equals to document") {
			var portalURL = JSONCompany.getPortalURL();
			var documentId = JSONDocument.getFileEntryId(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Guest");

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "document",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/documents/${documentId}",
				expectedUseCustomName = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetStructuredContentInformationInNavigationMenuWithSiteId {
		property portal.acceptance = "true";

		task ("And Given a web content article is created") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("And Given a navigation menu use cutom name associate with the created web content through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				item = "Web Content Article");

			NavigationMenusAdmin.editItem(
				itemName = "Web Content Title",
				useCustomName = "true");
		}

		task ("When with get request and siteId to retrieve the navigation menu") {
			var siteId = JSONGroupAPI._getSiteIdByGroupKey(groupName = "Guest");

			var response = NavigationMenuAPI.getNavigationMenu(siteId = "${siteId}");
		}

		task ("Then I can see values of useCustomName equals to true, contentURL equals to webcontent endpoint and type equals to structuredContent") {
			var portalURL = JSONCompany.getPortalURL();
			var structuredContentId = HeadlessWebcontentAPI.getStructuredContentIdByTitle(title = "Web Content Title");

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "structuredContent",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/structured-contents/${structuredContentId}",
				expectedUseCustomName = "true",
				responseFromSite = "true",
				responseToParse = "${response}");
		}
	}

	@priority = "4"
	test GetWebContentArticlesInformationWithNavigationMenuId {
		property portal.acceptance = "true";

		task ("And Given a web content article is created") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("And Given a navigation menu doesn't use custom name associate with the web content through UI") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				item = "Web Content Article");
		}

		task ("When with get request and navigationMenuId to retrieve the navigation menu") {
			var navigationMenuId = JSONSitenavigationSetter.setSiteNavigationMenuId(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");

			var response = NavigationMenuAPI.getNavigationMenu(navigationMenuId = "${navigationMenuId}");
		}

		task ("Then I can see values of useCustomName is false, contentURL equals to webcontent endpoint and type equals to structuredContent") {
			var portalURL = JSONCompany.getPortalURL();
			var structuredContentId = HeadlessWebcontentAPI.getStructuredContentIdByTitle(title = "Web Content Title");

			NavigationMenuAPI.assertResponseHasCorrectInformations(
				expectedType = "structuredContent",
				expectedURL = "${portalURL}/o/headless-delivery/v1.0/structured-contents/${structuredContentId}",
				expectedUseCustomName = "false",
				responseToParse = "${response}");
		}
	}

}