@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Lists";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Assert that the UI works correctly for adding Asset Lists."
	@priority = "5"
	test AddAssetList {
		property portal.acceptance = "true";

		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Create a dynamic asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Assert Asset List Entry names and types") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.viewAssetList(
				assetListTitle = "Manual Asset List Test",
				type = "Manual");

			AssetListsAdmin.viewAssetList(
				assetListTitle = "Dynamic Asset List Test",
				type = "Dynamic");
		}
	}

	@description = "Assert that the UI correctly displays a useful error message when an Asset List is added with a duplicate name."
	@priority = "3"
	test AddDuplicateAssetList {
		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Create an asset list that has the same name as the first asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAddMenuItem(menuItem = "Manual Collection");

			PortletEntry.inputText(
				fieldLabel = "Title",
				text = "Manual Asset List Test");

			Button.clickSave();
		}

		task ("Assert an error displays notifying that the user is not allowed to create a duplicate asset list") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_MODAL_CONTENT",
				value1 = "A collection with that title already exists.");
		}
	}

	@description = "Assert that the UI works correctly for deleting Asset Lists."
	@priority = "5"
	test DeleteAssetList {
		property osgi.modules.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Asset List Test");
		}

		task ("Create a dynamic asset list") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Asset List Test");
		}

		task ("Delete both asset lists") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.deleteEntry(assetListTitle = "Manual Asset List Test");

			AssetListsAdmin.deleteEntry(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Assert the taglib that displays when there are no entries displays") {
			AssertElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB");
		}
	}

	@description = "Assert that the UI works correctly for renaming Asset Lists."
	@priority = "5"
	test RenameAssetList {
		property portal.acceptance = "true";

		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Asset List Test");
		}

		task ("Rename the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.renameAssetList(
				newAssetListTitle = "Manual Asset List Edit",
				oldAssetListTitle = "Manual Asset List Test");
		}

		task ("Assert that the name of the asset list changed correctly") {
			AssetListsAdmin.viewAssetList(
				assetListTitle = "Manual Asset List Edit",
				type = "Manual");
		}
	}

	@description = "Assert that Asset Lists correctly display their selected content."
	@priority = "4"
	test ViewAssetListContent {
		task ("Create a web content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Asset List Test");
		}

		task ("Select the created web content article to be linked to the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Asset List Test",
				assetName = "WC WebContent Title",
				assetType = "Basic Web Content",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article");
		}

		task ("Assert the selected web content article is viewable from the View Content action for the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Manual Asset List Test",
				assetTitle = "WC WebContent Title",
				assetType = "Web Content Article");
		}
	}

	@description = "This is a test for LPS-84331. Assert that Asset Lists correctly display where they are used."
	@priority = "4"
	test ViewAssetListUsages {
		task ("Create a public page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Asset List Test");
		}

		task ("Add an Asset Publisher portlet to the created public page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Select the created manual asset list to be used in the asset publisher portlet") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.selectAssetList(assetListName = "Manual Asset List Test");
		}

		task ("Assert the created asset list is used exactly once") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.viewUsages(
				assetListTitle = "Manual Asset List Test",
				usageAmount = "1",
				usageType = "All");
		}
	}

	@description = "This is for LPS-101228. Validate if web content articles matching with content sets based on grouped keywords displayed correctly in Asset Publisher."
	@priority = "4"
	test ViewWCViaAPWithAssetListBasedOnGroupedKeywords {
		property osgi.modules.includes = "bookmarks,document-library-google-docs";

		task ("Create public page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page");
		}

		task ("Add an Asset Publisher portlet to the created public page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Asset Publisher");
		}

		task ("Create web content articles") {
			for (var text : list "1,1 2,1 2 3,1 2 3 4,2 3 4,3 4,4") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content ${text}",
					groupName = "Test Site Name",
					title = "WC WebContent Title ${text}");
			}
		}

		for (var rule : list "Contains All,Contains Any,Does Not Contain All,Does Not Contain Any") {
			if ("${rule}" == "Contains All") {
				var queryAndOperator = "All";
				var queryContains = "Contains";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "\"2 3\" \"3 4\"",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1 2 3 4,2 3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1,1 2,1 2 3,1 3 4,3 4,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
			else if ("${rule}" == "Contains Any") {
				var queryAndOperator = "Any";
				var queryContains = "Contains";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "\"2 3\" \"3 4\"",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1 2 3,1 2 3 4,2 3 4,3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1 2,1,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
			else if ("${rule}" == "Does Not Contain All") {
				var queryAndOperator = "All";
				var queryContains = "Does Not Contain";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "\"2 3\" \"3 4\"",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1,1 2,1 2 3,3 4,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1 2 3 4,1 3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
			else if ("${rule}" == "Does Not Contain Any") {
				var queryAndOperator = "Any";
				var queryContains = "Does Not Contain";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "\"2 3\" \"3 4\"",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1,1 2,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1 2 3,1 2 3 4,2 3 4,3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
		}
	}

	@description = "This is for LPS-101228. Validate if web content articles matching with content sets based on keywords displayed correctly in Asset Publisher."
	@priority = "5"
	test ViewWebContentViaAssetPublisherWithAssetListBasedOnKeywords {
		property osgi.modules.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		task ("Create public page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page");
		}

		task ("Add an Asset Publisher portlet to the created public page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Asset Publisher");
		}

		task ("Create web content articles") {
			for (var text : list "1,1 2,1 2 3,1 2 3 4,2 3 4,3 4,4") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content ${text}",
					groupName = "Test Site Name",
					title = "WC WebContent Title ${text}");
			}
		}

		for (var rule : list "Contains All,Contains Any,Does Not Contain All,Does Not Contain Any") {
			if ("${rule}" == "Contains All") {
				var queryAndOperator = "All";
				var queryContains = "Contains";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "2 3",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1 2 3,1 2 3 4,2 3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1,1 2,1 3 4,3 4,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
			else if ("${rule}" == "Contains Any") {
				var queryAndOperator = "Any";
				var queryContains = "Contains";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "2 3",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1 2,1 2 3,1 2 3 4,2 3 4,3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
			else if ("${rule}" == "Does Not Contain All") {
				var queryAndOperator = "All";
				var queryContains = "Does Not Contain";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "2 3",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1,1 2,3 4,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1 2 3,1 2 3 4,1 3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
			else if ("${rule}" == "Does Not Contain Any") {
				var queryAndOperator = "Any";
				var queryContains = "Does Not Contain";

				task ("Create a dynamic asset list") {
					JSONAssetlist.addDynamicAssetListEntryWithItemType(
						groupName = "Test Site Name",
						itemType = "All Types",
						title = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("Create filter rule for asset list") {
					AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

					AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Asset List ${queryContains} ${queryAndOperator}");

					AssetListsAdmin.addKeywordsFilter(
						keyWords = "2 3",
						queryAndOperator = "${queryAndOperator}",
						queryContains = "${queryContains}");
				}

				task ("Select the created dynamic asset list to be used in the asset publisher portlet") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Asset List ${queryContains} ${queryAndOperator}");
				}

				task ("View web content articles matching with dynamic asset list display in Asset Publisher") {
					Navigator.gotoSitePage(
						pageName = "Asset Publisher Page",
						siteName = "Test Site Name");

					for (var text : list "1,4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_TITLE",
							value1 = "WC WebContent Title ${text}");

						AssertTextEquals(
							locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
							value1 = "WC WebContent Content ${text}");
					}
				}

				task ("View web content articles not matching with dynamic asset list not display in Asset Publisher") {
					for (var text : list "1 2,1 2 3,1 2 3 4,2 3 4,3 4") {
						var key_assetTitle = "WC WebContent Title ${text}";

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_TITLE");

						AssertElementNotPresent(locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION");
					}
				}
			}
		}
	}

}