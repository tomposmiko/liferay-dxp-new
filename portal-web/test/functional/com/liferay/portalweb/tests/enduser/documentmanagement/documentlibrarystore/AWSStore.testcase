@component-name = "portal-document-library-store"
@ignore = "true"
definition {

	property aws.store.enabled = "true";
	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Document Library Stores";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a use case for LPS-129271."
	@priority = 4
	test AssertNoErrorMessageAfterExportAndImportSiteLAR {
		property test.name.skip.portal.instance = "AWSStore#AssertNoErrorMessageAfterExportAndImportSiteLAR";

		var bucketID = PropsUtil.get("s3.bucket.id");
		var companyId = JSONCompany.getCompanyId();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		AntCommand(
			locator1 = "build-test-s3-store.xml",
			value1 = "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketID}");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		AntCommand(
			locator1 = "build-test-s3-store.xml",
			value1 = "assert-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketID}");

		LAR.exportSiteCP(siteScopeName = "Test Site Name");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		HeadlessSite.addSite(siteName = "Test Site Name 1");

		LAR.importSiteCP(
			larFileName = ${larFileName},
			siteName = "Test Site Name 1");

		AssertConsoleTextNotPresent(value1 = "java.io.IOException");
	}

	@description = "Verify a data migration can be executed from the default store to AWS S3 store."
	@priority = 3
	test AWSS3StoreDataMigration {
		property store.migration.test = "true";
		property test.name.skip.portal.instance = "AWSStore#AWSS3StoreDataMigration";

		task ("Given a document is added to the default store") {
			var bucketId = PropsUtil.get("s3.bucket.id");
			var companyId = JSONCompany.getCompanyId();
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Test Site Name",
				site = "true");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");

			AntCommands.runCommand("build-test-s3-store.xml", "assert-no-document-in-bucket -Ds3.bucket.id=${bucketId} -DcompanyId=${companyId} -DgroupId=${groupId}");
		}

		task ("And given the user cannot migrate data to AWS S3 store without setting up a connection configuration") {
			ServerAdministration.openServerAdmin();

			Navigator.gotoNavItem(navItem = "Data Migration");

			AssertElementNotPresent(
				key_fieldLabel = "dl.store.impl",
				key_value = "com.liferay.portal.store.s3.S3Store",
				locator1 = "Select#GENERIC_SELECT_VALUE");
		}

		task ("When the user adds the configuration") {
			AntCommands.runCommand("build-test.xml", "prepare-aws-s3-configuration -Ds3.bucket.id=${bucketId}");

			OSGiConfig.waitForOSGiConfig();

			Refresh();
		}

		task ("Then the user can now migrate data over to the AWS S3 bucket") {
			SelectField.select(
				selectFieldLabel = "dl.store.impl",
				selectFieldValue = "com.liferay.portal.store.s3.S3Store");
		}

		task ("When the user executes the data migration") {
			Button.click(button = "Execute");

			AssertTextPresent(
				locator1 = "//body",
				value1 = "Executing com.liferay.document.library.internal.convert.document.library.DocumentLibraryConvertProcess");

			WaitForConsoleTextPresent(value1 = "Please set dl.store.impl in your portal-ext.properties to use com.liferay.portal.store.s3.S3Store");

			WaitForConsoleTextPresent(value1 = "Finished conversion for com.liferay.document.library.internal.convert.document.library.DocumentLibraryConvertProcess");
		}

		task ("Then the document is migrated over from the default store to the AWS S3 store") {
			AntCommands.runCommand("build-test-s3-store.xml", "assert-document-in-bucket -Ds3.bucket.id=${bucketId} -DcompanyId=${companyId} -DgroupId=${groupId}");
		}

		task ("And the user can configure the portal to use AWS S3 store without issue") {
			Portlet.shutdownServer();

			var newProperty = "dl.store.impl=com.liferay.portal.store.s3.S3Store";

			AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=${newProperty}");

			Portlet.startServer(deleteLiferayHome = "false");

			User.firstLoginPG();

			Smoke.viewWelcomeContentPage();
		}
	}

	@priority = 5
	test AWSS3StoreSmoke {
		property test.name.skip.portal.instance = "AWSStore#AWSS3StoreSmoke";

		var bucketId = PropsUtil.get("s3.bucket.id");
		var companyId = JSONCompany.getCompanyId();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		AntCommand(
			locator1 = "build-test-s3-store.xml",
			value1 = "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		AntCommand(
			locator1 = "build-test-s3-store.xml",
			value1 = "assert-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			portlet = "Recycle Bin");

		RecycleBin.emptyCP();

		AntCommand(
			locator1 = "build-test-s3-store.xml",
			value1 = "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");
	}

	@description = "This is a use case for LPS-122233."
	@priority = 3
	test ReIndexingDoesNotAddNewS3StoreCacheFiles {
		property test.name.skip.portal.instance = "AWSStore#ReIndexingDoesNotAddNewS3StoreCacheFiles";

		for (var fileNum : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title ${fileNum}",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_${fileNum}.jpg");
		}

		var tempDir = PropsUtil.get("app.server.temp.dir");
		var displayDateHour = DateUtil.getFormattedCurrentDate("HH", "UTC");
		var displayDateDay = DateUtil.getFormattedCurrentDate("dd", "UTC");
		var displayDateMonth = DateUtil.getFormattedCurrentDate("MM", "UTC");
		var displayDateYear = DateUtil.getFormattedCurrentDate("yyyy", "UTC");

		var s3TempDir = "${tempDir}/liferay/s3/${displayDateYear}/${displayDateMonth}/${displayDateDay}/${displayDateHour}";

		var filesBeforeReIndex = FileUtil.listFiles(${s3TempDir});

		echo("S3 temp directory files before reindex: ${filesBeforeReIndex}.");

		if (${filesBeforeReIndex} == "") {
			fail("The S3 directory is empty at ${s3TempDir}.");
		}

		SearchAdministration.executeReindex();

		var filesAfterReIndex = FileUtil.listFiles(${s3TempDir});

		echo("S3 temp directory files after reindex: ${filesAfterReIndex}.");

		if (${filesBeforeReIndex} == ${filesAfterReIndex}) {
			echo("The S3 temp directory remains unchanged after re-indexing.");
		}
		else {
			fail("The S3 temp directory modified after re-indexing.");
		}
	}

	@description = "This is a use case for LPS-127589."
	@priority = 3
	test S3ConnectionDoesNotLeakWhenServingFileAsStream {
		property test.name.skip.portal.instance = "AWSStore#S3ConnectionDoesNotLeakWhenServingFileAsStream";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		ServerAdministration.openServerAdmin();

		var script = '''
			import com.liferay.document.library.kernel.service.DLFileEntryLocalServiceUtil;
			import com.liferay.document.library.kernel.store.DLStoreUtil;
 
			List fileEntries = DLFileEntryLocalServiceUtil.getFileEntries(0,1);
 
			fileEntries.each { fileEntry ->
				(1..60).each {
					try {
						InputStream is = DLStoreUtil.getFileAsStream(fileEntry.getCompanyId(), fileEntry.getRepositoryId(), fileEntry.getName())
					} 
					catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		AssertConsoleTextNotPresent(value1 = "ConnectionPoolTimeoutException");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

}