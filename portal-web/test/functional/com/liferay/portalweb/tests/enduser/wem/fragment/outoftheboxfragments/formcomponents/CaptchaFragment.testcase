@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-150277=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a company Object with a Text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");
		}

		task ("Enable Inputs Fragment collection in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			task ("Disable Inputs Fragment collection in Gogo Shell") {
				GogoShell.openGogoShellAdmin();

				GogoShell.executeCommand(commandName = "scr:disable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

				GogoShell.viewOutput(outputContent = "true");
			}

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	@description = "This is a test for LPS-155168. The page creator cannot input Text Verification and reload the Simple Captcha in page editor."
	@priority = "4"
	test CannotInputTextVerificationAndReloadSimpleCaptchaInPageEditor {
		property test.name.skip.portal.instance = "CaptchaFragment#CannotInputTextVerificationAndReloadSimpleCaptchaInPageEditor";

		task ("Given a page creator has a content page with a Form Container") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}
		}

		task ("When the page creator adds a Captcha fragment into Form Container") {
			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "CAPTCHA");
		}

		task ("Then the page creator cannot type text verification and reload simple captcha") {
			AssertAttributeValue(
				attribute1 = "disabled",
				index = "1",
				locator1 = "Fragment#INPUT_CAPTCHA_BODY",
				value1 = "true");
		}
	}

	@description = "This is a test for LPS-155168. The user could submit Text verification of Simple Captcha via clicking submit at view mode."
	@priority = "4"
	test SubmitTextVerificationViaClickingSubmit {
		property test.name.skip.portal.instance = "CaptchaFragment#SubmitTextVerificationViaClickingSubmit";

		task ("Given a site member has a content page with a Captcha and a Submit Button inside Form Container") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}

			task ("Add a Captcha and a Submit Button fragment into Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "CAPTCHA");

				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Submit Button",
					targetFragmentName = "CAPTCHA");

				PageEditor.publish();
			}
		}

		task ("When the site member accesses to the content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the site member could submit text verification via clicking submit") {
			Type(
				inputFieldId = "captchaText",
				locator1 = "TextInput#INPUT_ID",
				value1 = "Fake");

			Button.clickSubmitButton();

			Alert.viewErrorMessage(errorMessage = "CAPTCHA verification failed. Please try again.");
		}
	}

	@description = "This is a test for LPS-155168. The user could submit Text verification of Simple Captcha via pressing enter at view mode. The user could see error message when validation fail."
	@priority = "5"
	test SubmitTextVerificationViaPressingEnter {
		property test.name.skip.portal.instance = "CaptchaFragment#SubmitTextVerificationViaPressingEnter";

		task ("Given a site member has a content page with a Captcha inside Form Container") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}

			task ("Add a Captcha fragment into Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "CAPTCHA");

				PageEditor.publish();
			}
		}

		task ("When the site member accesses to the content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the site member could submit text verification via pressing enter") {
			Type(
				inputFieldId = "captchaText",
				locator1 = "TextInput#INPUT_ID",
				value1 = "Fake");

			KeyPress(
				inputFieldId = "captchaText",
				locator1 = "TextInput#INPUT_ID",
				value1 = "\ENTER");

			Alert.viewErrorMessage(errorMessage = "CAPTCHA verification failed. Please try again.");
		}
	}

	@description = "This is a test for LPS-155168. The user could submit Verification of reCaptcha at view mode."
	@priority = "5"
	test SubmitVerificationOfReCaptcha {
		property test.name.skip.portal.instance = "CaptchaFragment#SubmitVerificationOfReCaptcha";

		task ("Given a site member has a content page with a reCaptcha and a Submit Button inside Form Container") {
			task ("Configure reCaptcha Engine") {
				SystemSettings.openSystemSettingsAdmin();

				SystemSettings.gotoConfiguration(
					configurationCategory = "Security Tools",
					configurationName = "CAPTCHA",
					configurationScope = "System Scope");

				SystemSettings.selectOptionSetting(
					fieldName = "CAPTCHA Engine",
					selectOption = "reCAPTCHA");

				SystemSettings.editTextAreaSetting(
					settingName = "reCAPTCHA Public Key",
					settingValue = PropsUtil.get("recaptcha.public.key"));

				SystemSettings.editTextAreaSetting(
					settingName = "reCAPTCHA Private Key",
					settingValue = PropsUtil.get("recaptcha.private.key"));

				SystemSettings.saveConfiguration();
			}

			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}

			task ("Add a Captcha and a Submit Button fragment into Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "CAPTCHA");

				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Submit Button",
					targetFragmentName = "CAPTCHA");

				AssertElementPresent(locator1 = "IFrame#RECAPTCHA");

				PageEditor.publish();
			}
		}

		task ("When the site member accesses to the content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the site member could submit verification of reCaptcha") {
			AssertElementPresent(locator1 = "IFrame#RECAPTCHA");

			Button.clickSubmitButton();

			Alert.viewErrorMessage(errorMessage = "CAPTCHA verification failed. Please try again.");
		}
	}

}