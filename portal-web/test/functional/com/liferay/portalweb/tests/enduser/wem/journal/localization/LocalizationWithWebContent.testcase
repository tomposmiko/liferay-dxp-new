@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Web Content Administration";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a localized web content via Web Content Display widget."
	@priority = "4"
	test AddLocalizedWebContent {
		property testray.component.names = "Localization,Web Content Administration";

		task ("Given a site designer has a page where a Web Content Display widget displays a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("When the site designer adds a Chinese translation to web content via Web Content Display") {
			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Edit Web Content",
				webContentTitle = "Web Content Title");

			PortletEntry.changeLocale(locale = "zh-CN");

			WebContent.addCP(
				webContentContent = "世界您好 Content",
				webContentTitle = "世界您好 Title");

			PortletEntry.publish();
		}

		task ("Then the site designer could view the translation after changing the user language to Chinese") {
			LanguagePortlet.selectLanguagePG(
				locale = "zh-CN",
				textIcon = "中文-中国");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "世界您好 Content",
				webContentTitle = "世界您好 Title");
		}

		task ("When the site designer changes the user language back to default") {
			LanguagePortlet.tearDownLanguagePG();
		}

		task ("Then the site designer could view the web content in English") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-100416. Non-Repeatable text fields show incorrect translation on label at first load."
	@priority = "4"
	test AddNonRepeatableTextFieldWithTranslation {
		task ("Given a site designer has a translated web content structure with associated template") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "English",
				fieldName = "Text");

			DataEngine.toggleFieldRepeatable(fieldFieldLabel = "English");

			WebContentStructures.addLocalization(
				locale = "de-DE",
				localization1Name = "Name der WC-Struktur");

			DataEngine.editFieldLabel(
				fieldFieldLabel = "English",
				fieldFieldLabelEdit = "German");

			WebContentStructures.saveCP();

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFieldNames = "English*",
				templateName = "WC Template Name");
		}

		task ("When the site designer changes the default site language to German") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureCurrentLanguagesCP(defaultPortalLanguage = "German (Germany)");
		}

		task ("Then the site designer could view the German language as default on the web content at edit mode") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			PortletEntry.viewLocale(locale = "de-DE");

			WebContent.assertFieldOnWebContent(fieldFieldLabel = "German");
		}

		task ("When the site designer changes the user language to English") {
			PortletEntry.changeLocale(locale = "en-US");
		}

		task ("Then the site designer could view the English translation in the field label") {
			WebContent.assertFieldOnWebContent(fieldFieldLabel = "English");
		}

		task ("When the site designer changes the user language to German") {
			PortletEntry.changeLocale(locale = "de-DE");
		}

		task ("Then the site designer could view the German translation in the field label") {
			WebContent.assertFieldOnWebContent(fieldFieldLabel = "German");
		}
	}

	@description = "This is a use case for LRQA-61632. Add a web content based on structure with translated default values."
	@priority = "4"
	test AddWebContentBasedOnStructureWithTranslatedDefaultValue {
		task ("Given a site designer has a web content structure with translated default values") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit Default Values",
				rowEntry = "WC Structure Name");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Type(
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "This is a Text field");

			PortletEntry.changeLocale(locale = "es-ES");

			Type(
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "Este es un campo de texto");

			WebContentStructures.saveCP();
		}

		task ("When the site designer adds a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Then the site designer could view the translated default values in web content editor") {
			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			AssertAttributeValue(
				attribute1 = "value",
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "This is a Text field");

			PortletEntry.changeLocale(locale = "es-ES");

			AssertAttributeValue(
				attribute1 = "value",
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "Este es un campo de texto");
		}
	}

	@description = "The User can add a web content with multiples translation and visualize it on the page."
	@priority = "4"
	test AddWebContentWithMultipleTranslations {
		property testray.component.names = "Localization,Web Content Administration";

		task ("Given the site designer has a page where a Web Content Display widget displays a web content with multiple translations") {
			JSONWebcontent.addBasicWebContentLocalized(
				contentMap = "en_US:WC Content,es_ES:WC Contenido,de_DE:WC Inhalt,fi_FI:WC Pitoisuus",
				groupName = "Test Site Name",
				titleMap = "en_US:WC Title,es_ES:WC Titulo,de_DE:WC Titel,fi_FI:WC Otsikko");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC Title");

			IFrame.closeFrame();
		}

		task ("When the site designer opens the web content at edit mode via Web Content Display after change the user language to Espanish") {
			LanguagePortlet.selectLanguagePG(
				locale = "es_ES",
				textIcon = "español-España");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC Contenido",
				webContentTitle = "WC Titulo");

			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Editar contenido web",
				webContentTitle = "WC Titulo");
		}

		task ("Then the site designer could view the web content in Spanish") {
			PortletEntry.changeLocale(locale = "es-ES");

			WebContent.viewCP(
				webContentContent = "WC Contenido",
				webContentTitle = "WC Titulo");
		}

		task ("When the site designer opens the web content at edit mode via Web Content Display after change the user language to German") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			LanguagePortlet.selectLanguagePG(
				locale = "de-DE",
				textIcon = "deutsch-Deutschland");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC Inhalt",
				webContentTitle = "WC Titel");

			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Webcontent bearbeiten",
				webContentTitle = "WC Titel");
		}

		task ("Then the site designer could view the web content in German") {
			PortletEntry.changeLocale(locale = "de-DE");

			WebContent.viewCP(
				webContentContent = "WC Inhalt",
				webContentTitle = "WC Titel");
		}

		task ("When the site designer opens the web content at edit mode via Web Content Display after change the user language to Finnish") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			LanguagePortlet.selectLanguagePG(
				locale = "fi-FI",
				textIcon = "suomi-Suomi");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC Pitoisuus",
				webContentTitle = "WC Otsikko");

			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Muokkaa web-sisältöä",
				webContentTitle = "WC Otsikko");
		}

		task ("Then the site designer could view the web content in German Finnish") {
			PortletEntry.changeLocale(locale = "fi-FI");

			WebContent.viewCP(
				webContentContent = "WC Pitoisuus",
				webContentTitle = "WC Otsikko");
		}
	}

	@description = "This is a use case for LRQA-61632. Add web content with translated Text field."
	@priority = "4"
	test AddWebContentWithTranslatedTextField {
		task ("Given a site designer has a structure with two Text fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text1",
				fieldName = "Text");

			DataEngine.addField(
				fieldFieldLabel = "Text2",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("When the site designer adds a translated web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			PortletEntry.inputTitle(title = "Web Content Title");

			Type(
				key_fieldFieldLabel = "Text1",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "This is a Text field");

			PortletEntry.changeLocale(locale = "es-ES");

			Type(
				key_fieldFieldLabel = "Text2",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "Este es un campo de texto");

			PortletEntry.publish();
		}

		task ("Then the site designer could view the translated web content at edit mode") {
			WebContentAdmin.gotoEntry(entry = "Web Content Title");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			AssertAttributeValue(
				attribute1 = "value",
				key_fieldFieldLabel = "Text1",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "This is a Text field");

			PortletEntry.changeLocale(locale = "es-ES");

			AssertAttributeValue(
				attribute1 = "value",
				key_fieldFieldLabel = "Text2",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "Este es un campo de texto");
		}
	}

	@description = "This is a use case for LPS-114001. The placeholder values are the same as the default Language's value."
	@priority = "4"
	test AssertPlaceholderValuesSameAsTheDefaultLanguage {
		task ("Given the site designer has a not translated web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When the site designer changes the user language to Spanish in web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentAdmin.gotoEntry(entry = "Web Content Title");

			PortletEntry.changeLocale(locale = "ca-ES");
		}

		task ("Then the site designer could view the web content in English") {
			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("When the site designer changes the user language to Dutch after adding a Chinese translation") {
			PortletEntry.changeLocale(locale = "zh-CN");

			WebContent.addCP(
				webContentContent = "网页内容",
				webContentTitle = "网页内容标题");

			PortletEntry.changeLocale(locale = "nl-NL");
		}

		task ("Then the site designer could still view the web content in English") {
			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-83319. The user could change default language of web content after enable Changeable Default Language."
	@priority = "5"
	test ChangeWebContentDefaultLanguage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "LocalizationWithWebContent#ChangeWebContentDefaultLanguage";

		task ("Given the site designer enables the Changeable Default Language for web content") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Administration",
				configurationScope = "System Scope");

			SystemSettings.configureSystemSetting(
				enableSetting = "true",
				settingFieldName = "Changeable Default Language");
		}

		task ("When the site designer changes the default user language to es-ES in web content editor") {
			JSONWebcontent.addBasicWebContentLocalized(
				contentMap = "en_US:Web Content Content,es_ES:Contenido de contenido web",
				groupName = "Test Site Name",
				titleMap = "en_US:Web Content Title,es_ES:Título del contenido web");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewDefaultLanguage(defaultLanguage = "English (US)");

			WebContent.changeDefaultLanguage(defaultLanguage = "es_ES");

			WebContent.viewDefaultLanguage(defaultLanguage = "Spanish (ES)");

			WebContent.viewCP(
				webContentContent = "Contenido de contenido web",
				webContentTitle = "Título del contenido web");

			PortletEntry.publish();
		}

		task ("Then the site designer could view the default user language of web content is es-ES") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			PortletEntry.viewLocale(locale = "es-ES");

			WebContent.viewCP(
				webContentContent = "Contenido de contenido web",
				webContentTitle = "Título del contenido web");

			WebContent.viewDefaultLanguage(defaultLanguage = "Spanish (ES)");
		}
	}

	@description = "This is a test for LPS-137902. The user can delete a localized content in the web content."
	@priority = "4"
	test DeleteLocalizedContent {
		task ("Given the site designer has a translated web content") {
			JSONWebcontent.addBasicWebContentLocalized(
				contentMap = "en_US:Web Content Content,es_ES:Contenido de contenido web",
				groupName = "Test Site Name",
				titleMap = "en_US:Web Content Title,es_ES:Título del contenido web");
		}

		task ("When the site designer changes to es-ES in web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.changeLocale(locale = "es-ES");
		}

		task ("Then the site designer could view the translations") {
			WebContent.viewCP(
				webContentContent = "Contenido de contenido web",
				webContentTitle = "Título del contenido web");
		}

		task ("When the site designer deletes the Spanish translation in the content field") {
			WebContent.addCP(webContentContent = "");

			PortletEntry.publish();
		}

		task ("Then the site designer could view the empty field for Spanish translation") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			PortletEntry.changeLocale(locale = "es-ES");

			WebContent.viewCP(
				webContentContent = "",
				webContentTitle = "Título del contenido web");
		}
	}

	@description = "View available locales in Web Content Display with translation tools."
	@priority = "4"
	test ViewAvailableTranslations {
		property testray.component.names = "Localization,Web Content Administration";

		task ("Given a site designer has a page where a Web Content Display widget displays a web content with Translations tool") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			WebContentDisplayPortlet.configureSetup(userToolNameList = "Translations");

			WebContentDisplayPortlet.saveConfiguration();

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("When the site designer adds a Chinese translation to web content via Web Content Display") {
			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Edit Web Content",
				webContentTitle = "Web Content Title");

			PortletEntry.changeLocale(locale = "zh-CN");

			WebContent.addCP(
				webContentContent = "世界您好 Content",
				webContentTitle = "世界您好 Title");

			PortletEntry.publish();
		}

		task ("Then the site designer could view the translation after changing the user language to Chinese") {
			LanguagePortlet.selectLanguagePG(
				locale = "zh-cn",
				portletName = "JournalContentPortlet",
				textIcon = "中文-中国");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "世界您好 Content",
				webContentTitle = "世界您好 Title");
		}

		task ("When the site designer changes the user language to English") {
			LanguagePortlet.selectLanguagePG(
				locale = "en_US",
				portletName = "JournalContentPortlet",
				textIcon = "english-United States");
		}

		task ("Then the site designer could view the web content in English") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for 119020. Can add web content when the portal change the default language."
	@priority = "4"
	test ViewChangedDefaultPortalLanguageViaWebContent {
		property test.name.skip.portal.instance = "LocalizationWithWebContent#ViewChangedDefaultPortalLanguageViaWebContent";
		property testray.component.names = "Localization,Web Content Administration";

		task ("Given a site designer has web contents with and without translation") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content 1",
				groupName = "Test Site Name",
				title = "Web Content Title 1");

			JSONWebcontent.addBasicWebContentLocalized(
				contentMap = "en_US:Web Content Content 2,es_ES:Contenido de contenido web 2",
				groupName = "Test Site Name",
				titleMap = "en_US:Web Content Title 2,es_ES:Título del contenido web 2");
		}

		task ("When the site designer changes the default portal language to Spanish") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureCurrentLanguagesCP(defaultPortalLanguage = "Spanish (Spain)");
		}

		task ("Then the site designer can add a third web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			PortletEntry.viewLocale(
				locale = "es-ES",
				portletName = "Web Content");

			WebContent.addCP(
				webContentContent = "Web Content Content 3",
				webContentTitle = "Web Content Title 3");

			PortletEntry.publish();
		}
	}

	@description = "This is a use case for LPS-110938. The localized Friendly URL of WC is shown in WCD when select template with Friendly URL field and it is displayed in DPT."
	@priority = "3"
	test ViewLocalizedFriendlyURLInWCD {
		task ("Given a site designer has a web content with an associated display page template and a template with Friendly URL field") {
			task ("Add a display page template with Web Content Article and Basic Web Content") {
				JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
					contentType = "Web Content Article",
					displayPageTemplateEntryName = "Display Page Name",
					groupName = "Test Site Name",
					subType = "Basic Web Content");
			}

			task ("Add a Display Page Content fragment to display page template") {
				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Display Page Content");

				PageEditor.publish();
			}

			task ("Add a template with Content and Friendly URL for Basic Web Content") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				NavItem.gotoTemplates();

				WebContentTemplates.addCP(
					structureName = "Basic Web Content",
					templateFieldNames = "Content,Friendly URL",
					templateName = "WC Template Name");
			}

			task ("Add a web content article based on Basic Web Content") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				WebContentNavigator.gotoAddCP();
			}

			task ("Type title and content") {
				WebContent.addCP(
					webContentContent = "Web Content Content",
					webContentTitle = "Web Content Title");
			}

			task ("Select the new template") {
				WebContent.selectTemplateCP(
					structureName = "Basic Web Content",
					templateName = "WC Template Name");
			}

			task ("Select the display page template") {
				WebContent.editDisplayPage(
					pageName = "Display Page Name",
					pageType = "Display Page Templates");
			}

			task ("Set up Friendly URL in English") {
				WebContent.editFriendlyURL(webContentFriendlyURL = "webcontentenglish");
			}

			task ("Set up Friendly URL in Spanish") {
				Click(
					key_fieldName = "friendlyURL",
					locator1 = "WC#LOCALIZED_BUTTON");

				Click(
					key_locale = "es-ES",
					locator1 = "Translation#LOCALIZATION_NAME");

				Type(
					inputFieldId = "friendlyURL",
					locator1 = "TextInput#INPUT_ID",
					value1 = "webcontentspanish");

				PortletEntry.publish();
			}
		}

		task ("When the site designer displays the web content in Web Content Display with custom template") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("Then the site designer could view the web content with English friendly URL") {
			var baseURL = PropsUtil.get("portal.url");

			for (var content : list "Web Content Content,${baseURL}/web/test-site-name/w/webcontentenglish") {
				WebContentDisplayPortlet.viewContent(
					webContentContent = "${content}",
					webContentTitle = "Web Content Title");
			}
		}

		task ("When the site designer changes the user language to Spanish") {
			LanguagePortlet.selectLanguagePG(
				locale = "es_ES",
				textIcon = "español-España");
		}

		task ("Then the site designer could view the web content with Spanish friendly URL") {
			var baseURL = PropsUtil.get("portal.url");

			for (var content : list "Web Content Content,${baseURL}/web/test-site-name/w/webcontentspanish") {
				WebContentDisplayPortlet.viewContent(
					webContentContent = "${content}",
					webContentTitle = "Web Content Title");
			}
		}
	}

	@description = "This is a use case for LPS-141460. The Localized friendly URL of web content should not be autogenerated."
	@priority = "4"
	test ViewLocalizedFriendlyURLNotAutogenerated {
		task ("Given a site designer has a translated web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.changeLocale(locale = "pt-BR");

			WebContent.addCP(webContentTitle = "Título de contéudo web");

			PortletEntry.publish();
		}

		task ("When the site designer changes to pt-BR in web content editor") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			Panel.expandPanel(panel = "Friendly URL");

			PortletEntry.changeLocale(locale = "pt-BR");
		}

		task ("Then the site designer could view the localized friendly URL is not autogenerated") {
			AssertTextEquals(
				inputFieldId = "friendlyURL",
				locator1 = "TextInput#INPUT_ID",
				value1 = "");
		}
	}

}