@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a destination page for the Search Bar widget") {
			JSONLayout.addPublicLayout(groupName = "Test Site Name", layoutName = "Search");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/search");

			Portlet.addPG(portletName = "Search Results");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/search");

			Portlet.addPG(portletName = "Type Facet");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(
				collectionZipFile = "fragment-collection.zip"
			);
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-78928. Content pages will appear when users filter search results by page facet."
	@priority = "5"
	test FilterByPageFacet {
		property portal.acceptance = "true";

		task ("Add a Static Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Static Text"
			);
		}

		task ("Add a web content article with the same text as the Static Text fragment") {
			JSONWebcontent.addWebContent(
				content = "This is static text",
				groupName = "Test Site Name",
				title = "Web Content Title"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Search by text that appears in both the content page and web content article") {
			Search.searchCP(searchTerm = "static");
		}

		task ("Assert both the content page and web content article appear in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");

			Search.viewResultAssetTitle(searchAssetTitle = "Web Content Title");
		}

		task ("Flag the Page facet in the search results to filter results to only show pages") {
			Check(
				locator1 = "SearchResults#FACET_PORTLET_CHECKBOX_SPECIFIC",
				key_checkboxName = "Page",
				key_facetClass = "Type"
			);
		}

		task ("Assert the content page appears in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}

		task ("Assert the web content article does not appear in the search results") {
			Search.viewNoResultAssetTitle(searchAssetTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-78928. Editable text in content pages is searchable."
	@priority = "5"
	test SearchEditableText {
		property portal.acceptance = "true";

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Search by text that appears in the editable text field in the Rich Text fragment") {
			Search.searchCP(searchTerm = "duis");
		}

		task ("Assert the content page appears in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name?p_l_mode=edit"
			);
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment text"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Search by the new text that appears in the editable text field in the Rich Text fragment") {
			Search.searchCP(searchTerm = "editable");
		}

		task ("Assert the content page appears in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}

		task ("Search by the old text that appeared in the editable text field in the Rich Text fragment") {
			Search.searchCP(searchTerm = "duis");
		}

		task ("Assert the content page does not appear in the search results") {
			Search.viewNoResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}
	}

	@description = "This is a test for LPS-78928. Static text in content pages is searchable."
	@priority = "5"
	test SearchStaticText {
		property portal.acceptance = "true";

		task ("Add a Static Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Static Text"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Search by the static text in the Static Text fragment") {
			Search.searchCP(searchTerm = "static");
		}

		task ("Assert the content page appears in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}
	}
}