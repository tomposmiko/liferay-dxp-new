@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create a Document And Media") {
			ACUtils.createDMAndAddToPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11308 | Test Summary: Delete browser storage changes userid and anonymous user appears"
	@priority = "3"
	test CheckDeleteBrowserStorageChangesUserId {
		property analytics.cloud.upstream = "false";
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${userId}",
				expected = "${localStorageItem1}");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Clear local storage") {
			ACUtils.clearLocalStorage();
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertNotEquals(
				actual = "${localStorageItem2}",
				expected = "${localStorageItem1}");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACCards.viewTotalCount(
				cardName = "Anonymous",
				count = "1");

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.openItem(itemName = "user1 user1");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			ACUtils.assertPageTitle(pageTitle = "documentPreviewed");
		}

		task ("Check that the event generated by anonymous user does not appear for user1") {
			ACUtils.assertPageTitleNotPresent(pageTitle = "documentDownloaded");
		}

		task ("Navigate to Documents and Media tab in Asset dashboard") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Documents and Media");
		}

		task ("Change the time filter to Last 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to the overview tab in document report entry") {
			ACNavigation.openItem(itemName = "DM AC Title");
		}

		task ("Check the number of downloads made by the anonymous user") {
			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Downloads",
				metricValue = "1");
		}
	}

	@description = "Feature ID: LRAC-10998 | Automation ID: LRAC-11382 | Test Summary: Check that the Identify event is not resent if the user stays logged in for less than 7 days"
	@priority = "3"
	test CheckIdentityEventNotResentIfUserStaysLoggedForLessThan7days {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the AC Page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get current time value in milliseconds from local storage") {
			var currentMillisecondsValue = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Returns current time value in milliseconds in 1 day") {
			var millisecondsValue = ${currentMillisecondsValue} - 86400000;
		}

		task ("Change the local storage with the new value") {
			ACUtils.setLocalStorageValue(
				keyName = "ac_client_identity_last_updated_date",
				keyValue = "${millisecondsValue}");
		}

		task ("Get number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Check if the present value in the local storage is equal to the converted") {
			TestUtils.assertEquals(
				actual = "${localStorageItem1}",
				expected = "${millisecondsValue}");
		}

		task ("Hard refresh the page") {
			TestUtils.hardRefresh();
		}

		task ("Get number from local storage") {
			var actualMillisecondsValue = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Check if the present value in the local storage is equal to the converted") {
			TestUtils.assertEquals(
				actual = "${actualMillisecondsValue}",
				expected = "${millisecondsValue}");
		}
	}

	@description = "Story: LRAC-10998 | Automation ID: LRAC-11380 | Test Summary: Check that the Identify event is not sent every time the user interacts with the site"
	@priority = "3"
	test CheckIdentityEventNotTriggeredAlwaysUserInteractsWithSite {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Navigate to the connected site") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the time of the last update of the identity event") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the time of the last update of the identity event") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Check that the time of the last update of the identity event has not changed") {
			TestUtils.assertEquals(
				actual = "${localStorageItem2}",
				expected = "${localStorageItem1}");
		}

		task ("Navigate to the connected site") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the time of the last update of the identity event") {
			var localStorageItem3 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Check that the time of the last update of the identity event has not changed") {
			TestUtils.assertEquals(
				actual = "${localStorageItem3}",
				expected = "${localStorageItem1}");
		}
	}

	@description = "Feature ID: LRAC-10998 | Automation ID: LRAC-11381 | Test Summary: Check that the Identify event is resent if the user stays logged in for more than 7 days and check if the same individual has not been counted twice when the event is resent"
	@priority = "5"
	test CheckIdentityEventResentIfUserStaysLoggedForMoreThan7days {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user2@liferay.com",
				userFirstName = "user2",
				userLastName = "user2",
				userScreenName = "user2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user2@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user2@liferay.com",
				userLoginFullName = "user2 user2");
		}

		task ("Visit the AC Page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get current time value in milliseconds from local storage") {
			var currentMillisecondsValue = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Return current time value in milliseconds more than 7 days") {
			var millisecondsValue = ${currentMillisecondsValue} - 691200000;
		}

		task ("Change the local storage with the new value") {
			ACUtils.setLocalStorageValue(
				keyName = "ac_client_identity_last_updated_date",
				keyValue = "${millisecondsValue}");
		}

		task ("Get number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Check if the present value in the local storage is equal to the converted") {
			TestUtils.assertEquals(
				actual = "${localStorageItem1}",
				expected = "${millisecondsValue}");
		}

		task ("Hard refresh the page") {
			TestUtils.hardRefresh();
		}

		task ("Get number from local storage") {
			var actualMillisecondsValue = ACUtils.getLocalStorageItem(keyName = "ac_client_identity_last_updated_date");
		}

		task ("Check if the present value in the local storage is different to the converted") {
			TestUtils.assertNotEquals(
				actual = "${actualMillisecondsValue}",
				expected = "${millisecondsValue}");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Overview on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToOverviewTab();
		}

		task ("Check that the same individual has not been counted more than once in the AC") {
			ACCards.viewTotalCount(
				cardName = "Total Individuals",
				count = "1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8715 | Test Summary: Check identity is triggered when logging in after a unintended session close"
	@priority = "3"
	test CheckIdentityTriggeredWhenLoginAfterASessionClose {
		property proxy.server.enabled = "true";

		task ("Sign out and Close sessions") {
			UserBar.signOut();

			ACUtils.closeAllSessions();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");

			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8714 | Test Summary: Check Identity is triggered when logging out and in again"
	@priority = "3"
	test CheckIdentityTriggeredWhenLogoutAndLoginAgain {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");

			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Clear local storage") {
			ACUtils.clearLocalStorage();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8713 | Test Summary: Check Identity triggers upon logging in and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckIdentityUponLogin {
		property proxy.server.enabled = "true";

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");

			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11309 | Test Summary: New user changes userid"
	@priority = "5"
	test CheckLoginNewUserChangesUserId {
		property analytics.cloud.upstream = "false";
		property proxy.server.enabled = "true";

		task ("Add two new users") {
			for (var username : list "user1,user2") {
				JSONUser.addUser(
					userEmailAddress = "${username}@liferay.com",
					userFirstName = "${username}",
					userLastName = "${username}",
					userScreenName = "${username}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${username}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${userId}",
				expected = "${localStorageItem1}");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user2@liferay.com",
				userLoginFullName = "user2 user2");
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertNotEquals(
				actual = "${localStorageItem2}",
				expected = "${localStorageItem1}");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.openItem(itemName = "user1 user1");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			ACUtils.assertPageTitle(pageTitle = "documentPreviewed");
		}

		task ("Check that the event generated by user2 does not appear for user1") {
			ACUtils.assertPageTitleNotPresent(pageTitle = "documentDownloaded");
		}

		task ("Navigate to the Known Individuals tab") {
			ACNavigation.backNavigation(pageName = "Known Individuals");
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.openItem(itemName = "user2 user2");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			ACUtils.assertPageTitle(pageTitle = "documentDownloaded");
		}
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11310 | Test Summary: Login as same user keeps userid"
	@priority = "3"
	test CheckLoginSameUserKeepUserId {
		property analytics.cloud.upstream = "false";
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${userId}",
				expected = "${localStorageItem1}");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${localStorageItem2}",
				expected = "${localStorageItem1}");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem3 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${localStorageItem3}",
				expected = "${localStorageItem2}");
		}
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11307 | Test Summary: Logout continues to track user"
	@priority = "4"
	test CheckLogoutContinuesToTrackUserWithSameUserId {
		property analytics.cloud.upstream = "false";
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${userId}",
				expected = "${localStorageItem1}");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = "${localStorageItem2}",
				expected = "${localStorageItem1}");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.openItem(itemName = "user1 user1");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			for (var eventName : list "documentPreviewed,documentDownloaded") {
				ACUtils.assertPageTitle(pageTitle = "${eventName}");
			}
		}
	}

}