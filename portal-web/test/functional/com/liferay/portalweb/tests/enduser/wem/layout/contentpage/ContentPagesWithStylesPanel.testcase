@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	@description = "This is a test for LPS-161974. Add custom values to margin and padding on fragment of content page."
	@priority = 4
	test AddCustomValuesToSpacing {
		task ("Given a page creator has a Button fragment on a content page") {
			SetWindowSize.maximizeWindow();

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page creator selects an existing token on Marging Left of Spacing") {
			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(marginLeft = 1);
		}

		task ("Then the page creator should see the cleared input field and selected token on dropdown menu") {
			Click(
				ariaLabel = "Margin Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			AssertTextEquals(
				ariaLabel = "Margin Left",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
				value1 = "");

			AssertCssValue(
				ariaLabel = "Set Margin Left to 1",
				locator1 = "Button#ANY_WITH_ARIA_LABEL",
				locator2 = "background-color",
				value1 = "rgba(240, 245, 255, 1)");
		}

		task ("When the page creator adds a value on input field of Marging Left") {
			Type(
				ariaLabel = "Margin Left",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
				value1 = 20);

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Margin Left");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator should see all items on dropdown menu are unselected") {
			for (var i : list "0,1,2,3,4,5,6,7,8,9,10") {
				AssertCssValue(
					ariaLabel = "Set Margin Left to ${i}",
					locator1 = "Button#ANY_WITH_ARIA_LABEL",
					locator2 = "background-color",
					value1 = "rgba(0, 0, 0, 0)");
			}
		}

		task ("When the page creator adds a value on input field of Padding Left") {
			Click(
				ariaLabel = "Padding Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			Type(
				ariaLabel = "Padding Left",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
				value1 = 20);

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Padding Left");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator should see all items on dropdown menu are unselected") {
			for (var i : list "0,1,2,3,4,5,6,7,8,9,10") {
				AssertCssValue(
					ariaLabel = "Set Padding Left to ${i}",
					locator1 = "Button#ANY_WITH_ARIA_LABEL",
					locator2 = "background-color",
					value1 = "rgba(0, 0, 0, 0)");
			}
		}

		task ("When the page creator selects an existing token on Padding Left of Spacing") {
			DropdownMenuItem.click(menuItem = "Spacer 2");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator should see the cleared input field and second token as selected on dropdown menu") {
			Click(
				ariaLabel = "Padding Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			AssertTextEquals(
				ariaLabel = "Padding Left",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
				value1 = "");

			AssertCssValue(
				ariaLabel = "Set Padding Left to 2",
				locator1 = "Button#ANY_WITH_ARIA_LABEL",
				locator2 = "background-color",
				value1 = "rgba(240, 245, 255, 1)");
		}
	}

	@description = "This is a test for LPS-162301. Designers cannot reset undefined Spacing styles."
	@priority = 3
	test CannotResetUndefinedSpacingStyles {
		task ("Given a page designer has a Button fragment with padding right styles on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(paddingRight = 9);
		}

		task ("When the page designer opens the Padding Top dropdown list") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				ariaLabel = "Padding Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		task ("Then the page designer cannot see the reset button") {
			AssertElementNotPresent(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");
		}
	}

	@description = "This is a test for LPS-142050. In page editor, selecting Custom in units could insert any type of character."
	@priority = 4
	test ConfigureCustomUnit {
		task ("Given a page designer has a Heading fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page designer accesses to the Styles panel of Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");
		}

		task ("Then the page designer sees the default unit of Border Width is PX") {
			AssertTextEquals(
				key_fieldLabel = "Border Width",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL",
				value1 = "PX");
		}

		task ("When the page designer selects custom unit for Border Width of Heading") {
			PageEditor.configureFragment(
				fieldLabel = "Border Width",
				unit = "CUSTOM");
		}

		task ("Then the page designer could define a custom unit for Border Width") {
			PageEditor.configureFragment(borderWidth = "3rem");

			AssertTextEquals(
				key_fieldLabel = "Border Width",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL",
				value1 = "REM");

			AssertTextEquals(
				key_text = "Border Width",
				locator1 = "TextInput#ANY",
				value1 = 3);

			PageEditor.viewFragmentStyle(
				borderWidth = "3rem",
				fragmentName = "Heading");
		}
	}

	@description = "This is a test for LPS-147788. View default behavior of custom unit on styles tab of content page."
	@priority = 4
	test DetachLinkedNonColorToken {
		task ("Given a page designer has a Heading fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page designer changes the Font Size style of Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(fontSize = "Font Size Large");
		}

		task ("Then the page designer could detach the linked font size") {
			PageEditor.detachToken(fieldLabel = "Font Size");

			AssertTextEquals(
				key_text = "Font Size",
				locator1 = "TextInput#ANY",
				value1 = "1.125");

			AssertTextEquals(
				key_fieldLabel = "Font Size",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL",
				value1 = "REM");
		}

		task ("When the page designer selects custom unit for Font Size of Heading") {
			PageEditor.configureFragment(
				fieldLabel = "Font Size",
				unit = "CUSTOM");
		}

		task ("Then the page designer see the previous value restored in Font Size after click outside field") {
			AssertTextEquals(
				key_text = "Font Size",
				locator1 = "TextInput#ANY",
				value1 = "");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			AssertTextEquals(
				key_text = "Font Size",
				locator1 = "TextInput#ANY",
				value1 = "1.125");

			AssertTextEquals(
				key_fieldLabel = "Font Size",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL",
				value1 = "REM");
		}

		task ("When the page designer changes the Border Radius style of Heading") {
			PageEditor.configureFragment(borderRadius = "Border Radius Large");
		}

		task ("Then the page designer could detach the linked border radius") {
			PageEditor.detachToken(fieldLabel = "Border Radius");

			AssertTextEquals(
				key_text = "Border Radius",
				locator1 = "TextInput#ANY",
				value1 = "0.375");

			AssertTextEquals(
				key_fieldLabel = "Border Radius",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL",
				value1 = "REM");
		}

		task ("When the page designer selects custom unit for Border Radius of Heading") {
			PageEditor.configureFragment(
				fieldLabel = "Border Radius",
				unit = "CUSTOM");
		}

		task ("Then the page designer see the previous value restored in Border Radius after click outside field") {
			AssertTextEquals(
				key_text = "Border Radius",
				locator1 = "TextInput#ANY",
				value1 = "");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			AssertTextEquals(
				key_text = "Border Radius",
				locator1 = "TextInput#ANY",
				value1 = "0.375");

			AssertTextEquals(
				key_fieldLabel = "Border Radius",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL",
				value1 = "REM");
		}
	}

	@description = "This is a test for LPS-162301. Designers are able to reset the values from the spacing component by entering a value in the text area."
	@priority = 3
	test ResetSpacingStylesFromCustomValue {
		task ("Given a page designer has a Button fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page designer defines a custom value for the Padding Top") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				ariaLabel = "Padding Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			Type(
				ariaLabel = "Padding Top",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
				value1 = 4);

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Padding Top");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page designer can see the reset button on the dropdown list") {
			AssertVisible(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			AssertCssValue(
				index = 1,
				key_fragmentName = "Button",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				locator2 = "padding-top",
				value1 = "4px");

			Click(
				index = 1,
				key_fragmentName = "Button",
				locator1 = "Fragment#FRAGMENT_CONTENT");
		}

		task ("When the page designer resets the padding top style to initial value") {
			PageEditor.restoreSpacing(fieldLabel = "Padding Top");
		}

		task ("Then the page designer sees the padding top back to the default one") {
			AssertCssValue(
				index = 1,
				key_fragmentName = "Button",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				locator2 = "padding-top",
				value1 = "0px");
		}
	}

	@description = "This is a test for LPS-162301. Designers are able to reset the values from the spacing component by selecting from Existing tokens."
	@priority = 4
	test ResetSpacingStylesFromExistingTokens {
		task ("Given a page designer has a Button fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page designer opens the Padding Top dropdown list") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				ariaLabel = "Padding Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		task ("Then the page designer cannot see the reset button") {
			AssertElementNotPresent(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");
		}

		task ("When the page designer select a padding top style from exiting tokens") {
			DropdownMenuItem.click(menuItem = "Spacer 3");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingTop = 3);
		}

		task ("Then the page designer could reset the padding top style to initial value") {
			PageEditor.restoreSpacing(fieldLabel = "Padding Top");

			AssertCssValue(
				index = 1,
				key_fragmentName = "Button",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				locator2 = "padding-top",
				value1 = "0px");
		}
	}

	@description = "This is a test for LPS-162301. Designers are able to reset the values from the spacing component to the parent viewport value."
	@priority = 4
	test ResetSpacingStylesToParentViewportValue {
		task ("Given a page designer has a Button fragment with different spacing styles in each viewport") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(paddingLeft = 1);

			PageEditor.switchViewport(deviceType = "Tablet");

			PageEditor.configureFragment(paddingLeft = 2);

			PageEditor.switchViewport(deviceType = "Landscape Phone");

			PageEditor.configureFragment(paddingLeft = 4);

			PageEditor.switchViewport(deviceType = "Portrait Phone");

			PageEditor.configureFragment(paddingLeft = 5);
		}

		task ("When the page designer switches to the Landscape Phone viewport") {
			PageEditor.switchViewport(deviceType = "Landscape Phone");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 4);

			SelectFrameTop();
		}

		task ("Then the page designer can reset the padding left to the Tablet viewport value") {
			Click(
				ariaLabel = "Padding Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Padding Left");

			MouseOver(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			AssertVisible(
				key_content = "Reset to Tablet Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

			Click(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			PageEditor.waitForAutoSave();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 2);

			SelectFrameTop();
		}

		task ("When the page designer switches to the Portrait Phone viewport") {
			PageEditor.switchViewport(deviceType = "Portrait Phone");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 5);

			SelectFrameTop();
		}

		task ("Then the page designer can reset the padding left to the Landscape Phone viewport value") {
			Click(
				ariaLabel = "Padding Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Padding Left");

			MouseOver(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			AssertVisible(
				key_content = "Reset to Landscape Phone Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

			Click(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			PageEditor.waitForAutoSave();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 2);

			SelectFrameTop();
		}

		task ("When the page designer switches to the Tablet viewport") {
			PageEditor.switchViewport(deviceType = "Tablet");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 2);

			SelectFrameTop();
		}

		task ("Then the page designer can reset the padding left to the Desktop viewport value") {
			Click(
				ariaLabel = "Padding Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Padding Left");

			MouseOver(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			AssertVisible(
				key_content = "Reset to Desktop Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

			Click(
				key_text = "restore",
				locator1 = "MenuItem#ANY_ICON");

			PageEditor.waitForAutoSave();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				paddingLeft = 1);
		}
	}

	@description = "This is a test for LPS-136279 and LPS-163362. View the styles of color selectors."
	@priority = 4
	test ViewStylesOfColorInputs {
		task ("Given a page designer has a Heading fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page designer accesses to the Styles panel of Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");
		}

		task ("Then the page designer sees the styles of color selectors") {
			task ("View the Inherited · computed value shown in Text Color, Background Color and Border Color selectors") {
				AssertTextEquals(
					key_fieldLabel = "Text Color",
					locator1 = "Button#COLOR_PICKER",
					value1 = "#272833");

				AssertTextEquals(
					key_text = "Background Color",
					locator1 = "TextInput#ANY",
					value1 = "#00000000");

				AssertTextEquals(
					key_text = "Border Color",
					locator1 = "TextInput#ANY",
					value1 = "#272833");
			}

			task ("View the tooltip shown when hover on icon of selectors") {
				MouseOver(
					key_fieldLabel = "Text Color",
					locator1 = "Icon#COLOR_PICKER_ICON");

				AssertVisible(
					key_content = "Text Color",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_fieldLabel = "Background Color",
					locator1 = "Button#COLOR_PICKER");

				AssertVisible(
					key_content = 00000000,
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_fieldLabel = "Border Color",
					locator1 = "Button#COLOR_PICKER");

				AssertVisible(
					key_content = 272833,
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
			}
		}

		task ("When the page designer hovers on the inherited indicator of Text Color") {
			MouseOver(
				key_fieldLabel = "Text Color",
				locator1 = "Icon#INHERITED_INDICATOR");
		}

		task ("Then the page designer sees the Inherited Value shown on the tooltip") {
			AssertVisible(
				key_content = "Inherited Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-136279 and LPS-163362. View the styles of Font Family, Font Weight and Font Size selectors."
	@priority = 4
	test ViewStylesOfSelectInputs {
		task ("Given a page designer has a Heading fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page designer accesses to the Styles panel of Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");
		}

		task ("Then the page designer sees the styles of Font Family, Font Weight and Font Size selectors") {
			task ("View the Font Family, Font Weight and Font Size selectors use icon") {
				for (var fieldName : list "font-family,bold,font-size") {
					AssertElementPresent(
						key_text = ${fieldName},
						locator1 = "Select#GENERIC_SELECT_FIELD_WITH_ICON");
				}
			}

			task ("View the computed value is shown in the Font Family, Font Weight and Font Size selectors by default") {
				AssertTextEquals(
					key_text = "font-family",
					locator1 = "Select#GENERIC_SELECT_FIELD_WITH_ICON_TEXT",
					value1 = "system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"");

				AssertTextEquals(
					key_text = "bold",
					locator1 = "Select#GENERIC_SELECT_FIELD_WITH_ICON_TEXT",
					value1 = 400);

				AssertTextEquals(
					key_text = "font-size",
					locator1 = "Select#GENERIC_SELECT_FIELD_WITH_ICON_TEXT",
					value1 = "14px");
			}

			task ("View the tooltip shown when hover on icon of selectors") {
				MouseOver(
					key_text = "corner-radius",
					locator1 = "Icon#ANY");

				AssertVisible(
					key_content = "Border Radius",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "shadow",
					locator1 = "Icon#ANY");

				AssertVisible(
					key_content = "Shadow",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
			}
		}

		task ("When the page designer hovers on the inherited indicator of Font Family") {
			MouseOver(
				key_fieldLabel = "Font Family",
				locator1 = "Icon#INHERITED_INDICATOR");
		}

		task ("Then the page designer sees the Inherited Value shown on the tooltip") {
			AssertVisible(
				key_content = "Inherited Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("When the page designer hovers on the inherited indicator of Font Weight") {
			MouseOver(
				key_fieldLabel = "Font Weight",
				locator1 = "Icon#INHERITED_INDICATOR");
		}

		task ("Then the page designer sees the Inherited Value shown on the tooltip") {
			AssertVisible(
				key_content = "Inherited Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("When the page designer hovers on the inherited indicator of Font Size") {
			MouseOver(
				key_fieldLabel = "Font Size",
				locator1 = "Icon#INHERITED_INDICATOR");
		}

		task ("Then the page designer sees the Inherited Value shown on the tooltip") {
			AssertVisible(
				key_content = "Inherited Value",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-136279. The text align should be indicated by align icon."
	@priority = 4
	test ViewStylesOfTextAlignButtons {
		task ("Given a page designer has a Heading fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page designer accesses to the Styles panel of Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");
		}

		task ("Then the page designer sees the styles of text align buttons") {
			task ("View the align left, align center, align right and align justify icons are shown in Text section") {
				for (var fieldName : list "align-left,align-center,align-right,align-justify") {
					AssertVisible(
						key_text = ${fieldName},
						locator1 = "PageEditor#TEXT_ALIGN_ICON");
				}
			}

			task ("View the align left icon is selected") {
				AssertVisible(
					key_text = "align-left",
					locator1 = "PageEditor#ACTIVE_TEXT_ALIGN_ICON");
			}

			task ("View the tooltip shown when hover on icon of text align") {
				MouseOver(
					key_text = "align-left",
					locator1 = "PageEditor#TEXT_ALIGN_ICON");

				AssertVisible(
					key_content = "Align Left",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "align-center",
					locator1 = "PageEditor#TEXT_ALIGN_ICON");

				AssertVisible(
					key_content = "Align Center",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "align-right",
					locator1 = "PageEditor#TEXT_ALIGN_ICON");

				AssertVisible(
					key_content = "Align Right",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "align-justify",
					locator1 = "PageEditor#TEXT_ALIGN_ICON");

				AssertVisible(
					key_content = "Justify",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
			}
		}
	}

	@description = "This is a test for LPS-163362. View the styles of Border Width, Border Radius, Opacity and Shadow text inputs."
	@priority = 4
	test ViewStylesOfTextInputs {
		task ("Given a page designer has a Heading fragment on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page designer accesses to the Styles panel of Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");
		}

		task ("Then the page designer sees the styles of Border Width, Border Radius, Opacity and Shadow text inputs") {
			task ("View the Border Width, Border Radius, Opacity and Shadow selectors use icon") {
				for (var fieldName : list "border-width,corner-radius,opacity,shadow") {
					AssertElementPresent(
						key_text = ${fieldName},
						locator1 = "TextInput#GENERIC_TEXT_INPUT_WITH_ICON");
				}
			}

			task ("View the default value is shown in Border Width, Border Radius, Opacity and Shadow text inputs") {
				AssertTextEquals(
					ariaLabel = "Border Width",
					locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
					value1 = 0);

				AssertTextEquals(
					ariaLabel = "Border Radius",
					locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
					value1 = 0);

				AssertTextEquals(
					ariaLabel = "Opacity",
					locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
					value1 = 100);

				AssertTextEquals(
					ariaLabel = "Shadow",
					locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
					value1 = "none");
			}

			task ("View the tooltip shown when hover on icon of Border Width, Border Radius, Opacity and Shadow text inputs") {
				MouseOver(
					key_text = "border-width",
					locator1 = "Icon#ANY");

				AssertVisible(
					key_content = "Border Width",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "corner-radius",
					locator1 = "Icon#ANY");

				AssertVisible(
					key_content = "Border Radius",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "opacity",
					locator1 = "Icon#ANY");

				AssertVisible(
					key_content = "Opacity",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

				MouseOver(
					key_text = "shadow",
					locator1 = "Icon#ANY");

				AssertVisible(
					key_content = "Shadow",
					locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
			}
		}
	}

}