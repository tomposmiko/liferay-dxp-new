@component-name = "portal-wcm"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-136413. The global page template is invisible to user without permission in page creation."
	@priority = "4"
	test GlobalTemplateIsInvisibleToUserWithoutPermissionInPageCreation {
		property test.name.skip.portal.instance = "PagesAdminWithPermissions#GlobalTemplateIsInvisibleToUserWithoutPermissionInPageCreation";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a regular role") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name",
				roleTitle = "Roles Regrole Name");
		}

		task ("Define permission to new regular role") {
			for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
					roleTitle = "Roles Regrole Name");
			}

			for (var resourceActionIndex : list "ADD_COMMUNITY,ADD_LAYOUT,ADD_LAYOUT_BRANCH,ADD_LAYOUT_SET_BRANCH,ASSIGN_MEMBERS,ASSIGN_USER_ROLES,CONFIGURE_PORTLETS,DELETE,EXPORT_IMPORT_LAYOUTS,EXPORT_IMPORT_PORTLET_INFO,MANAGE_ANNOUNCEMENTS,MANAGE_ARCHIVED_SETUPS,MANAGE_LAYOUTS,MANAGE_STAGING,MANAGE_SUBGROUPS,MANAGE_TEAMS,PERMISSIONS,PREVIEW_IN_DEVICE,PUBLISH_PORTLET_INFO,PUBLISH_STAGING,UPDATE,VIEW,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION,VIEW_STAGING") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Group",
					roleTitle = "Roles Regrole Name");
			}

			for (var resourceActionIndex : list "ADD_DISCUSSION,ADD_LAYOUT,CONFIGURE_PORTLETS,CUSTOMIZE,DELETE,DELETE_DISCUSSION,PERMISSIONS,UPDATE,UPDATE_DISCUSSION,UPDATE_LAYOUT_CONTENT,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Roles Regrole Name");
			}
		}

		task ("Assign regular role to the user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Grant permissions for only Owner in search global template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

			LexiconCard.clickEllipsisItem(
				card = "Search",
				item = "Permissions");

			PermissionsInline.addOrRemoveAnyPermissionsFromSpecificRole(
				addOrRemoveViewPermission = "Remove",
				permissionsKeyList = "INLINE_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");

			PermissionsInline.addOrRemoveAnyPermissionsFromSpecificRole(
				addOrRemoveViewPermission = "Remove",
				permissionsKeyList = "INLINE_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "user");

			IFrame.closeFrame();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("View global search template is not shown when page creation") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");

			Navigator.gotoNavNested(navNested = "Global Templates");

			PagesAdmin.viewPageTemplateTypeNotPresent(pageTemplateName = "Search");
		}

		task ("Sign in as Test Test") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");
		}

		task ("Grant View permission for new regular role in search global template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

			LexiconCard.clickEllipsisItem(
				card = "Search",
				item = "Permissions");

			PermissionsInline.addOrRemoveAnyPermissionsFromSpecificRole(
				addOrRemoveViewPermission = "Add",
				permissionsKeyList = "INLINE_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "roles-regrole-name");

			IFrame.closeFrame();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("View global search template is shown when page creation") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");

			Navigator.gotoNavNested(navNested = "Global Templates");

			PagesAdmin.viewPageTemplateTypePresent(pageTemplateName = "Search");
		}
	}

	@description = "This is a test for LPS-152446. When a user without edit permissions clicks a content page in page administration, the page is opened in view mode."
	@priority = "4"
	test NavigateToViewModeWhenClickOnContentPageItemAsUserWithoutEditPermission {
		task ("Given a marketer without edit permission has a content page") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");

			JSONRole.addSiteRole(
				roleKey = "Marketer",
				roleTitle = "Marketer");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.layout.seo",
				roleTitle = "Marketer",
				roleType = "site");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Marketer",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("When the marketer clicks on the content page item in Pages admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			Click(
				key_pageName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ENTRY_TITLE_LINK");
		}

		task ("Then the marketer accesses to the content page at view mode") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");

			JSONRole.deleteRole(roleTitle = "Marketer");
		}
	}

	@description = "This is a test for LPS-152446. When a user without edit permissions searches for a content page in pages administration, and then clicks on it in the results, the page is opened in view mode."
	@priority = "4"
	test NavigateToViewModeWhenClickOnContentPageTitleFromSearchResultsAsUserWithoutEditPermission {
		task ("Given a marketer without edit permission has a content page") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");

			JSONRole.addSiteRole(
				roleKey = "Marketer",
				roleTitle = "Marketer");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Marketer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.layout.seo",
				roleTitle = "Marketer",
				roleType = "site");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Marketer",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("When the marketer clicks on the content page title in search results of Pages admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			Search.searchCP(searchTerm = "Test Page Name");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "Test Page Name");
		}

		task ("Then the marketer accesses to the content page at view mode") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");

			JSONRole.deleteRole(roleTitle = "Marketer");
		}
	}

	@description = "Can remove inline view permission for Guest."
	@priority = "5"
	test RemoveViewPermissionForGuest {
		property portal.acceptance = "true";
		property testray.component.names = "Roles";

		task ("Add widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Uncheck view permission for guest then verify checkbox in unchecked") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Page Name");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Guest");
		}
	}

}