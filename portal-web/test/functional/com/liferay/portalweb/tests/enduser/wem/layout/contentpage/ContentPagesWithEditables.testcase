@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a content page and edit its fragment immediately. This is a variation of the steps from LPS-85872."
	@priority = "5"
	test AddContentPageWithEditedFragmentText {
		property testray.component.names = "Training";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Content");

		PageEditor.editFragmentText(
			fragmentName = "Content",
			id = "content",
			text = "New editable fragment text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the Content fragment has the updated editable text") {
			AssertVisible(
				key_content = "New editable fragment text",
				key_fragmentClass = "body",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-101333. Freemarker code should not be executed in an html fragment."
	@priority = "5"
	test AddContentPageWithHTMLFragment {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML");

		PageEditor.editFragmentHTML(
			editableId = "element-html",
			fileName = "fragment_freemarker_basic.html",
			fragmentName = "HTML");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the freemarker code was not executed") {
			AssertTextNotEquals(
				locator1 = "//div[contains(@class,'fragment-html-test')]",
				value1 = "Basic Test");
		}
	}

	@description = "This is a test for LPS-95045. A user should be able to add an image fragment and change the image in the fragment."
	@priority = "5"
	test AddContentPageWithImageFragment {

		// Ignore test from acceptance until LRQA-52823 resolved

		property portal.acceptance = "false";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			fileName = "Document_1.png",
			fragmentName = "Image",
			id = "image");

		task ("Assert the Image fragment's image was changed") {
			AssertVisible(
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT_IMAGE");
		}

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the Image fragment appears with the image") {
			AssertVisible(
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT_IMAGE");
		}

		ContentPages.clickPencil();

		task ("Assert the Image fragment's image has persisted") {
			AssertVisible(
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT_IMAGE");
		}
	}

}