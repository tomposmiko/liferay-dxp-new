@component-name = "portal-segmentation"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		Navigator.openURL();

		task ("Add role with permissions") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_content_dashboard_web_portlet_ContentDashboardAdminPortlet",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Roles Regrole Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONRole.deleteRole(roleTitle = "Roles Regrole Name");

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "LPS-130918: Given the Segment Service Configuration in Instance Settings And Enable Segmentation by roles is checked in System Settings
    When Enable Segmentation by roles is disabled And the user accesses the Segments tab in the role assignment screen
    Then the user may still add segments to the list by using the '+' button, but assigning won't be accomplished"
	@priority = "4"
	test AssigningBySegmentNotWorkingDisabledInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#AssigningBySegmentNotWorkingDisabledInstanceSettings";

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Global",
				operator = "contains",
				segmentName = "Segment global usersn",
				text = "usersn");
		}

		task ("Enable Assign roles by segment from system settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Disable segmentation by roles from instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "Virtual Instance Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Assign the segment to the role created") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.addAssignee(
				assigneeName = "Segment global usersn",
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Log out and login with the user assigned to the segment") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert the role is not working") {
			AssertElementNotPresent(locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("Login with Test user to allow teardown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Delete one of the segments") {
			Segmentation.openSegmentsAdmin(siteURLKey = "global");

			Segmentation.deleteSegment(entry = "Segment global usersn");
		}
	}

	@description = "LPS-122800: Validate if, with the option Enable Assign roles by segments disabled, the option Assign Site Roles is disabled"
	@priority = "4"
	@uitest
	test AssignSiteRolesOptionInSegmentsEditor {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#AssignSiteRolesOptionInSegmentsEditor";

		task ("Add segment in Test Site Name") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment site usersn",
				text = "usersn");
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Open segment's options and assert the option Assign site roles is disabled") {
			Segmentation.openSegmentOptions(segmentName = "site");

			AssertElementPresent(
				key_text = "",
				locator1 = "Dropdown#ANY_DISABLED");
		}

		task ("Enable Assign roles by segment") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Open segment's options and assert the option Assign site roles is enabled") {
			Segmentation.openSegmentOptions(segmentName = "site");

			AssertElementPresent(
				key_text = "Assign Site Roles",
				locator1 = "Dropdown#ANY_ENABLED");
		}
	}

	@description = "LPS-130918: Given the Segment Service Configuration in Instance Settings And Enable Segmentation by roles is checked in System Settings
    When Enable Segmentation by roles is enabled And the user accesses the Segments tab in the role assignment screen
    Then no warning message is shown and the assigning will be accomplished"
	@priority = "3"
	test CanAssignBySegmentEnabledInstanceSettings {
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#CanAssignBySegmentEnabledInstanceSettings";

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Global",
				operator = "contains",
				segmentName = "Segment global usersn",
				text = "usersn");
		}

		task ("Enable Assign roles by segment from system settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Enable segmentation by roles from instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "Virtual Instance Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Assign the segment to the role created") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.addAssignee(
				assigneeName = "Segment global usersn",
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Log out and login with the user assigned to the segment") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert the role is working") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Applications");

			AssertElementPresent(
				key_category = "Content",
				key_portlet = "Content Dashboard",
				locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("Login with Test user to allow teardown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Delete one of the segments") {
			Segmentation.openSegmentsAdmin(siteURLKey = "global");

			Segmentation.deleteSegment(entry = "Segment global usersn");
		}
	}

	@description = "LPS-130918: Given the Segment Service Configuration in Instance Settings And Enable Segmentation by roles is checked in System Settings
    When Enable Segmentation by roles is enabled
    Then it shows a dialog allowing user to assign/unassign site roles"
	@priority = "4"
	test CanAssignSiteRolesToSegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#CanAssignSiteRolesToSegment";

		task ("Add segment in Test Site Name") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment site usersn",
				text = "usersn");
		}

		task ("Enable Assign roles by segment at System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Disable segmentation by roles from instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "Virtual Instance Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Add site role to segment") {
			Segmentation.assignSiteRoles(
				roleName = "Site Member",
				segmentName = "Segment site usersn");
		}
	}

	@description = "LPS-130918: Given the Segment Service Configuration in Instance Settings
	When Enable Segmentation by roles is disabled And the user accesses the Segments tab in the role assignment screen
	Then a message will show: 'Warning: Assigning roles by segment is disabled. To enable, go to Instance Settings.'."
	@priority = "3"
	test CheckMessageSegmentationByRolesDisabledInstanceSettings {
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#CheckMessageSegmentationByRolesDisabledInstanceSettings";

		task ("Disable segmentation by roles from instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "Virtual Instance Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to the role segments assignee's section") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role._goToRoleAssigneeType(
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assert the warning message is displayed") {
			AssertTextPresent(
				locator1 = "Segmentation#ASSIGN_SITE_ROLES_DISABLED_WARNING",
				textValue = "Assigning roles by segment is disabled",
				value1 = "Assigning roles by segment is disabled. To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-121943: Validate if, with the option Enable Assign roles by segments disabled, the role is not working for the user"
	@priority = "4"
	@uitest
	test DisableAssignRolesBySegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#DisableAssignRolesBySegment";

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				newPassword = "test",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Global",
				operator = "contains",
				segmentName = "Segment global usersn",
				text = "usersn");
		}

		task ("Assign the segment to the role created") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.addAssignee(
				assigneeName = "Segment global usersn",
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assert the Enable Assign roles by segments checkbox is disabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Log out and login with the user assigned to the segment") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert the role is not working") {
			AssertElementNotPresent(locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("Login with Test user to allow teardown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Delete one of the segments") {
			Segmentation.openSegmentsAdmin(siteURLKey = "global");

			Segmentation.deleteSegment(entry = "Segment global usersn");
		}
	}

	@description = "LPS-122799: Validate if, with the option Enable Assign roles by segments disabled, the warning message is displayed"
	@priority = "3"
	@uitest
	test DisableAssignRolesWarningMessage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#DisableAssignRolesWarningMessage";

		task ("Assert the Enable Assign roles by segments checkbox is disabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to the role segments assignee's section") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role._goToRoleAssigneeType(
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assert the warning message is displayed") {
			AssertTextPresent(
				locator1 = "Segmentation#ASSIGN_SITE_ROLES_DISABLED_WARNING",
				textValue = "Assigning roles by segment is disabled",
				value1 = "Assigning roles by segment is disabled. To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-130918: Given the Segment Service Configuration in Instance Settings And Enable Segmentation by roles is checked in System Settings
    When Enable Segmentation by roles is disabled
    Then the Assign Site Roles option will be disabled in the Segments Editor"
	@priority = "4"
	test DisabledAssignSiteRolesOptionInSegmentsEditor {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#DisabledAssignSiteRolesOptionInSegmentsEditor";

		task ("Add segment in Test Site Name") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment site usersn",
				text = "usersn");
		}

		task ("Enable Assign roles by segment at System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Disable segmentation by roles from instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "Virtual Instance Scope");

			Segmentation.disableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to segments portlet") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Open segment's options and assert the option Assign site roles is enabled") {
			Segmentation.openSegmentOptions(segmentName = "site");

			AssertElementPresent(
				key_text = "Assign Site Roles",
				locator1 = "Dropdown#ANY_DISABLED");
		}
	}

	@description = "LPS-121943: Validate if, with the option Enable Assign roles by segments enabled, the role is working for the user."
	@priority = "4"
	@uitest
	test EnableAssignRolesBySegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#EnableAssignRolesBySegment";

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Global",
				operator = "contains",
				segmentName = "Segment global usersn",
				text = "usersn");
		}

		task ("Assign the segment to the role created") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.addAssignee(
				assigneeName = "Segment global usersn",
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Enable Assign roles by segment") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Log out and login with the user assigned to the segment") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert the role is working") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Applications");

			AssertElementPresent(
				key_category = "Content",
				key_portlet = "Content Dashboard",
				locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("Login with Test user to allow teardown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Delete one of the segments") {
			Segmentation.openSegmentsAdmin(siteURLKey = "global");

			Segmentation.deleteSegment(entry = "Segment global usersn");
		}
	}

	@description = "LPS-122799: Validate if, with the option Enable Assign roles by segments enabled, the warning message is not displayed"
	@priority = "3"
	@uitest
	test EnableAssignRolesNoWarningMessage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SegmentationAssigningRoles#EnableAssignRolesNoWarningMessage";

		task ("Enable Assign roles by segment") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");

			Segmentation.enableAssingRolesBySegmentsCheckbox();
		}

		task ("Go to the role segments assignee's section") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role._goToRoleAssigneeType(
				assigneeType = "Segments",
				roleTitle = "Roles Regrole Name");
		}

		task ("Assert the warning message is NOT displayed") {
			AssertTextNotPresent(
				locator1 = "Segmentation#ASSIGN_SITE_ROLES_DISABLED_WARNING",
				textValue = "Assigning roles by segment is disabled",
				value1 = "Assigning roles by segment is disabled. To enable, go to Instance Settings.");
		}
	}

}