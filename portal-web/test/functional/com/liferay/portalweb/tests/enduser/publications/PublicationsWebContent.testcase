@component-name = "portal-publications"
definition {

	property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "This is the use case for LPS-161035."
	@priority = "4"
	test CanViewWebContentHistoryOverMultiplePublications {
		property custom.properties = "feature.flag.LPS-161038=true";

		task ("Add new web content on new added site") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Site Name",
				title = "Web Content Title");
		}

		task ("Add and select a new Publication") {
			JSONPublications.addPublication(publicationName = "Publication Name 1");

			JSONPublications.selectPublication(publicationName = "Publication Name 1");
		}

		task ("View Publication timeline") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewPublicationTimelineEntry(
				index = "1",
				publicationName = "Publication Name 1");
		}

		task ("Edit the web content") {
			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 1",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit 1");
		}

		task ("Publish the publication") {
			JSONPublications.selectPublication(publicationName = "Publication Name 1");

			JSONPublications.publishPublication(publicationName = "Publication Name 1");

			Publications.viewPublicationPublished(publicationName = "Publication Name 1");
		}

		task ("Add a new Publication") {
			JSONPublications.addPublication(publicationName = "Publication Name 2");
		}

		task ("View Publication timeline in Production") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 1");

			WebContent.viewPublicationTimelineEntry(
				index = "1",
				publicationName = "Production");

			WebContent.viewPublicationTimelineEntry(
				index = "2",
				publicationName = "Publication Name 1");
		}

		task ("View Publication timeline in Publication") {
			JSONPublications.selectPublication(publicationName = "Publication Name 2");

			Refresh();

			WebContent.viewPublicationTimelineEntry(
				index = "1",
				publicationName = "Publication Name 2");

			WebContent.viewPublicationTimelineEntry(
				index = "2",
				publicationName = "Publication Name 1");
		}
	}

	@description = "This is use case for LPS-159561. Making the changes in the description doesn't yield a missing requirement conflict."
	@priority = "3"
	test MakingChangesInDescriptionCannotYieldConflict {
		JSONGroup.addGroup(groupName = "Site Name");

		WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "site-name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addFields(fieldNameList = "Text,Link to Page");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "site-name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text,Link to Page",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "This is a Text field",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.addWithStructureCP(webContentText = "This is a edited Text field");

		PortletEntry.publish();

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		AssertElementNotPresent(locator1 = "Publications#NEEDS_MANUAL_RESOLUTION_TABLE");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");
	}

	@description = "Manage Conflicting Web Content Folder changes and discard the changes."
	@priority = "4"
	test ManageConflictingWebContentFolderChanges {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Site Name");

		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.moveToFolderCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentFolder.gotoEditCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		PortletEntry.inputName(name = "WC Folder Name Edited");

		PortletEntry.save();

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Folder",
			changeSite = "Site Name",
			changeTitle = "WC Folder Name Edited",
			changeType = "Modified",
			changeUser = "Test Test");

		JSONPublications.addPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

		RecycleBin.deleteCP(
			assetName = "WC Folder Name",
			assetType = "Web Content Folder");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Folder",
			changeSite = "Site Name",
			changeTitle = "WC Folder Name",
			changeType = "Deleted",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication 2 Name");

		Publications.viewPublicationPublished(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertTextNotPresent(
			locator1 = "WC#ENTRY_LIST_TITLE",
			value1 = "Web Content Folder");

		PublicationsNavigator.gotoPublish(publicationName = "Publication 1 Name");

		PublicationsChanges.discardChanges(
			changeCategory = "WC Folder Name",
			changeTitle = "WC Folder Name Edited",
			conflictingChanges = "true",
			entryTitle = "WC Folder Name Edited");

		JSONPublications.publishPublication(publicationName = "Publication 1 Name");

		Publications.viewPublicationPublished(publicationName = "Publication 1 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertTextNotPresent(
			locator1 = "WC#ENTRY_LIST_TITLE",
			value1 = "Web Content Folder");
	}

	@priority = "4"
	test PublishExpiredWebContentViaWCD {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.expireSpecificVersionCP(webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.viewMessage(expiredWebContentTitle = "WC WebContent Title");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.viewMessage(expiredWebContentTitle = "WC WebContent Title");
	}

	@priority = "4"
	test PublishWebContentWithCategory {

		// Workaround LPS-148719

		property database.types = "hypersonic,mariadb,mysql,postgresql";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONCategory.addVocabulary(
			groupName = "Site Name",
			title = "Vocabulary Name");

		JSONCategory.addCategory(
			groupName = "Site Name",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		PublicationsNavigator.openPublicationsAdmin();

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Category Vocabulary",
			changeSite = "Site Name",
			changeTitle = "Vocabulary Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Category",
			changeSite = "Site Name",
			changeTitle = "Category Name",
			changeType = "Added",
			changeUser = "Test Test");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Search Bar");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Search Results");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		SearchPortlets.searchWidget(searchTerm = "Category Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		SearchPortlets.searchWidget(searchTerm = "Category Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content");
	}

	@ignore = "true"
	@priority = "4"
	test PublishWebContentWithDMAndImageFields {
		property test.assert.warning.exceptions = "true";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "site-name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addFields(fieldNameList = "Upload,Image,Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "site-name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Upload,Image,Text",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			dmDocumentTitle = "DM Document Title",
			dmNavTab = "Documents and Media",
			navTab = "Web Content Images",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentImage = "Document_1.jpg",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title",
			webContentUpload = "DM Document Title");

		PortletEntry.publish();

		AssertElementPresent(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_LIST_TITLE");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Dynamic Data Mapping Structure",
			changeSite = "Site Name",
			changeTitle = "WC Structure Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Dynamic Data Mapping Template",
			changeSite = "Site Name",
			changeTitle = "WC Template Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Document",
			changeSite = "Site Name",
			changeTitle = "DM Document Title",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Document",
			changeOrder = "2",
			changeSite = "Site Name",
			changeTitle = "Document_1.jpg",
			changeType = "Added",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_LIST_TITLE");
	}

	@priority = "4"
	test PublishWebContentWithFriendlyURL {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addWithFriendlyURL(
			friendlyURL = "friendlyUrl",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editDisplayPage(
			pageName = "Test Page",
			pageType = "Pages");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/-/friendlyUrl");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Widget",
			changeSite = "Site Name",
			changeTitle = "Asset Publisher on Test Page",
			changeType = "Added",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/-/friendlyUrl");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title");
	}

	@priority = "3"
	test ReviewChangesCanProcessWebContentsWithThemeDisplayInTemplate {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONGroup.addGroup(groupName = "Site Name");

		WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "site-name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAdd();

		WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

		Uncheck(
			checkboxName = "Cacheable",
			locator1 = "Checkbox#ANY_CHECKBOX");

		WebContentTemplates.inputTemplateAddScreenFields(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name",
			templateScript = "themeDisplay.getScopeGroupId()");

		DDLDataDefinition.save();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "WC Web Content Text",
			webContentTitle = "WC Web Content Title");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Web Content Title");

		WebContent.addCP(webContentDescription = "Web Content Description");

		PortletEntry.publish();

		PublicationsNavigator.gotoReviewChanges();

		PublicationsNavigator.gotoViewChangeDetails(
			changeCategory = "Web Content Article",
			changeTitle = "WC Web Content Title");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Data");

		AssertConsoleTextNotPresent(value1 = "Error executing FreeMarker template");
	}

	@description = "This is the use case for LPS-161841. The order of the versions is not reversed When resolving web content article version conflicts during publication."
	@priority = "4"
	test WebContentArticleVersionCannotBeReversedWhenResolvingTheConflicts {
		task ("Add new web content on new added site") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Site Name",
				title = "Web Content Title");
		}

		task ("Add a new Publication") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		task ("Edit the web content 3 times") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 1",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit 1");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 1");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 2",
				webContentTitle = "Web Content Title Edit 1",
				webContentTitleEdit = "Web Content Title Edit 2");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 2");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 3",
				webContentTitle = "Web Content Title Edit 2",
				webContentTitleEdit = "Web Content Title Edit 3");
		}

		task ("Edit the web content on Production mode") {
			PublicationsNavigator.openPublicationsAdmin();

			Publications.workOnProduction();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 1",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit 1");
		}

		task ("Publish the publication") {
			JSONPublications.selectPublication(publicationName = "Publication Name");

			JSONPublications.publishPublication(publicationName = "Publication Name");

			Publications.viewPublicationPublished(publicationName = "Publication Name");
		}

		task ("View the web content version 1.3 displays on Production") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 3");

			WebContent.viewCP(
				webContentContent = "Web Content Content Edit 3",
				webContentTitle = "Web Content Title Edit 3");
		}
	}

}