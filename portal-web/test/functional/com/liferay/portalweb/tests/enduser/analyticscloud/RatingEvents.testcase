@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8923 | Test Summary: Check vote is triggered when voting and check its properties"
	@priority = 5
	test CheckVoteEventWhenVotingForBlogAndCheckProperties {
		property proxy.server.enabled = "true";

		task ("Add a blog to the page and connect AC to DXP") {
			ACUtils.createBlogsAndAddToPage();

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Change blog rating type to star") {
			Ratings.configureRatingType(
				applications = "Blogs",
				portlet = "Ratings",
				ratingType = "Stars",
				siteName = "Site Name");
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst(${assignedPropertyName}, "Combined");

			var dataSourceName = StringUtil.trim(${dataSourceName});

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = ${dataSourceName});
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("View the blog entry and rate it") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");

			task ("Start Har recording") {
				ProxyUtil.startHarRecording("VOTE");

				ACUtils.waitForSendingRequest();
			}

			Ratings.rateStar(ratingStarCount = 4);
		}

		task ("Get entryId of blog entry") {
			var entryId = JSONBlog.getBlogEntryId(
				entryTitle = "Blogs AC Title",
				groupName = "Site Name");
		}

		task ("View the properties of blogVOTE event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "className",
				value = "com.liferay.blogs.model.BlogsEntry");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "classPK",
				value = ${entryId});

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "ratingType",
				value = "stars");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "score",
				value = "0.8");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = ${expectedChannelId},
				expectedDataSourceId = ${expectedDataSourceId});
		}
	}

	@description = "Bug: LRAC-11450 | Automation ID: LRAC-11507 | Test Summary: Check vote is triggered when voting for DM and check its properties"
	@priority = 5
	test CheckVoteEventWhenVotingForDMAndCheckProperties {
		property proxy.server.enabled = "true";

		task ("Add a documents and media to the page and connect DXP to AC") {
			ACUtils.createDMAndAddToPage();

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Go to Settings and save the property id and data source id") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
			var dataSourceName = StringUtil.extractFirst(${assignedPropertyName}, "Combined");

			var dataSourceName = StringUtil.trim(${dataSourceName});

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = ${dataSourceName});
		}

		task ("Go to the site page and rate the documents and media") {
			ACUtils.launchDXP();

			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");

			task ("Start the har recording") {
				ProxyUtil.startHarRecording("VOTE");

				ACUtils.waitForSendingRequest();
			}

			DMDocument.expandInfo();

			Ratings.rateStar(ratingStarCount = 4);
		}

		task ("Get the document entry Id") {
			var entryId = JSONDocument.getFileEntryId(
				dmDocumentTitle = "DM AC Title",
				groupName = "Site Name");
		}

		task ("Assert the properties of the VOTE event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "classPK",
				value = ${entryId});

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "className",
				value = "com.liferay.document.library.kernel.model.DLFileEntry");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "ratingType",
				value = "stars");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "score",
				value = "0.8");
		}

		task ("Assert the common request values") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = ${expectedChannelId},
				expectedDataSourceId = ${expectedDataSourceId});
		}
	}

}