@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "This is a use case for LPS-114438. Only can edit inline content, mapped content and comments of elements when select Content Editing."
	@priority = 5
	test CanOnlyEditContentInContentEditionMode {
		property portal.acceptance = "true";

		var siteName = StringUtil.randomString(8);

		task ("Add a Web Content Article, a Blogs Entry and a Document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = ${randomSiteName},
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Assert Edit Mode is Page Design") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			AssertTextEquals(
				locator1 = "PageEditor#EDIT_MODE_SELECTOR",
				value1 = "Page Design");
		}

		task ("Add a Heading, Paragraph, Image and Asset Publisher to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Paragraph");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Image");
		}

		task ("Edit inline content of Heading") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Add a comment for Heading") {
			PageEditor.addComment(
				fragmentComment = "This is a fragment comment.",
				fragmentName = "Heading",
				position = 1);
		}

		task ("Map title of Web Content Article to Paragraph") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			SelectFrame(value1 = "relative=top");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("Select document as inline content of Image") {
			PageEditor.editFragmentImage(
				fragmentName = "Image",
				id = "image-square",
				imageFileName = "Document Title");
		}

		task ("Select Blogs Entry in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");
		}

		task ("Select Content Editing") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(locator1 = "PageEditor#EDIT_MODE_SELECTOR");

			MenuItem.click(menuItem = "Content Editing");

			AssertTextEquals(
				locator1 = "PageEditor#EDIT_MODE_SELECTOR",
				value1 = "Content Editing");
		}

		task ("Assert only Browser and Comments are shown in sidebar") {
			for (var tabName : list "Browser,Comments") {
				AssertVisible(
					key_tabName = ${tabName},
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");
			}

			for (var tabName : list "Fragments and Widgets,Page Design Options") {
				AssertElementNotPresent(
					key_tabName = ${tabName},
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");
			}
		}

		task ("Assert topper of elements are hidden") {
			for (var elementName : list "Heading,Paragraph,Image,Asset Publisher") {
				PageEditor.viewFragmentNotPresent(fragmentName = ${elementName});
			}
		}

		task ("Assert can edit editable field of Heading fragment") {
			Click(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			DoubleClick(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			AssertElementPresent(locator1 = "//*[contains(@class,'component-heading') and contains(@data-lfr-editable-id,'element-text')]/div[contains(@class,'cke_editable_inline')]");

			PageEditor.clickManagementBar();
		}

		task ("Assert can select mapped content of Paragraph fragment") {
			Click(
				fragmentName = "paragraph",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			Navigator.gotoNavTab(navTab = "Mapping");

			AssertVisible(
				key_fieldLabel = "Item",
				key_text = "change",
				locator1 = "Icon#ANY_ITEM_SELECTOR");

			PageEditor.clickManagementBar();
		}

		task ("Assert can edit editable field of Image fragment") {
			Click(locator1 = "//div[contains(@class,'component-image')]//img[@data-lfr-editable-id='image-square']");

			DoubleClick(locator1 = "//div[contains(@class,'component-image')]//img[@data-lfr-editable-id='image-square']");

			ItemSelector.selectDMImage(
				imageFileName = "Document Title",
				navTab = "Documents and Media");

			PageEditor.clickManagementBar();
		}

		task ("Assert ellipsis button of Asset Publisher present") {
			MouseOver.mouseOverNotVisible(locator1 = "//menu[contains(@class,'portlet-topper-toolbar')][contains(@id,'AssetPublisher')]//button[*//*[name()='svg'][contains(@class,'icon-ellipsis-v')]]");
		}

		task ("Edit Web Content Article and Blogs Entry via Contents panel") {
			for (var title : list "Web Content Title,Blogs Entry Title") {
				PageEditor.gotoTab(tabName = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = ${title});

				if (${title} == "Web Content Title") {
					WebContent.addCP(webContentTitle = "Web Content Title Edit");

					CKEditor.addContentInWebContent(
						content = "Web Content Content Edit",
						fieldLabel = "Content");

					Button.clickPublish();
				}

				if (${title} == "Blogs Entry Title") {
					BlogsEntry.editEntryContent(
						entryContent = "Blogs Entry Content",
						entryContentEdit = "Blogs Entry Content Edit",
						entryTitle = "Blogs Entry Title",
						entryTitleEdit = "Blogs Entry Title Edit");

					Button.clickPublish();
				}

				PageEditor.assertFragmentSidebarLoaded();

				Click(locator1 = "PageEditor#EDIT_MODE_SELECTOR");

				MenuItem.click(menuItem = "Content Editing");

				AssertTextEquals(
					locator1 = "PageEditor#EDIT_MODE_SELECTOR",
					value1 = "Content Editing");
			}
		}

		task ("Assert Edited Web Content") {
			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "Web Content Title Edit");
		}

		task ("Assert Edited Blogs Entry") {
			AssertTextEquals(
				key_assetTitle = "Blogs Entry Title Edit",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Blogs Entry Title Edit");
		}

		task ("View comment of Heading in Comments panel") {
			PageEditor.gotoTab(tabName = "Comments");

			PageEditor.viewCommentList(
				commentCount = "1 Comment",
				fragmentName = "Heading",
				openComment = "true");
		}

		task ("Reply to comment of Heading") {
			PageEditor.replyToComment(commentReply = "This is a reply");

			PageEditor.viewCommentReply(
				commentReply = "This is a reply",
				user = "Test Test");
		}
	}

}