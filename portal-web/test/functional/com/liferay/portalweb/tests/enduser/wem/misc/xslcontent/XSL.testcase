@component-name = "portal-xsl"
definition {
	property osgi.module.configuration.file.names = "com.liferay.xsl.content.web.configuration.XSLContentConfiguration.config";
	property osgi.module.configurations = "com.liferay.portlet.include=&quot;true&quot;\ncom.liferay.portlet.display-category=&quot;category.cms&quot;";
	property osgi.modules.includes = "xsl-content";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "XSL";
	property testray.main.component.name = "XSL";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.addPG(portletName = "XSL Content");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "XSL Content",
			configurationName = "Options",
			configurationScope = "System Scope"
		);

		XSLContent.configureConfigurationAdminXSL();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test"
			);

			Site.tearDownCP();
		}
	}

	@priority = "4"
	test AddXSL {
		property test.name.skip.portal.instance = "XSL#AddXSL";

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XML Description",
			dmDocumentFile = "test.xml",
			dmDocumentTitle = "Test XML Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Test XML Title");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XSL Description",
			dmDocumentFile = "test.xsl",
			dmDocumentTitle = "Test XSL Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Test XSL Title");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test XML Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xmlURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xml url ${xmlURL}");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test XSL Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xslURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xsl url ${xslURL}");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#DIALOG");

		Type(locator1 = "TextInput#SETUP_XML_URL", value1 = "@portal_url@/${xmlURL}");

		Type(locator1 = "TextInput#SETUP_XSL_URL", value1 = "@portal_url@/${xslURL}");

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		SelectFrameTop(value1 = "relative=top");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		XSLContent.viewXSLPortletHymnDisplay(
			tableArtistEntry = "Dall√°n Forgaill",
			tableCountryEntry = "Ireland",
			tableTitleEntry = "Be Thou my Vision",
			tableYearEntry = "700"
		);

		XSLContent.viewXSLPortletHymnDisplay(
			tableArtistEntry = "Stanley Gai",
			tableCountryEntry = "US",
			tableTitleEntry = "Say Something",
			tableYearEntry = "2015"
		);
	}

	@priority = "4"
	test ConfigurePortletWithCorruptXML {
		property ignore.errors = "must be terminated by the matching end-tag";
		property test.name.skip.portal.instance = "XSL#ConfigurePortletWithCorruptXML";

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XML Description",
			dmDocumentFile = "test_corrupt.xml",
			dmDocumentTitle = "Test Corrupt XML Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(
			dmDocumentTitle = "Test Corrupt XML Title"
		);

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XSL Description",
			dmDocumentFile = "test.xsl",
			dmDocumentTitle = "Test XSL Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Test XSL Title");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test Corrupt XML Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xmlURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xml url ${xmlURL}");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test XSL Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xslURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xsl url ${xslURL}");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#DIALOG");

		Type(locator1 = "TextInput#SETUP_XML_URL", value1 = "@portal_url@/${xmlURL}");

		Type(locator1 = "TextInput#SETUP_XSL_URL", value1 = "@portal_url@/${xslURL}");

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		SelectFrameTop(value1 = "relative=top");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		XSLContent.viewErrorMessage();
	}

	@priority = "4"
	test ConfigurePortletWithCorruptXSL {
		property ignore.errors = "must be terminated by the matching end-tag";
		property test.name.skip.portal.instance = "XSL#ConfigurePortletWithCorruptXSL";

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XML Description",
			dmDocumentFile = "test.xml",
			dmDocumentTitle = "Test XML Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Test XML Title");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XSL Description",
			dmDocumentFile = "test_corrupt.xsl",
			dmDocumentTitle = "Test Corrupt XSL Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(
			dmDocumentTitle = "Test Corrupt XSL Title"
		);

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test XML Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xmlURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xml url ${xmlURL}");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test Corrupt XSL Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xslURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xsl url ${xslURL}");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#DIALOG");

		Type(locator1 = "TextInput#SETUP_XML_URL", value1 = "@portal_url@/${xmlURL}");

		Type(locator1 = "TextInput#SETUP_XSL_URL", value1 = "@portal_url@/${xslURL}");

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		SelectFrameTop(value1 = "relative=top");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		XSLContent.viewErrorMessage();
	}

	@priority = "4"
	test ConfigurePortletWithIncorrectVersionXmlAndXsl {
		property test.name.skip.portal.instance = "XSL#ConfigurePortletWithIncorrectVersionXmlAndXsl";

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XML Description",
			dmDocumentFile = "test_version.xml",
			dmDocumentTitle = "Test XML Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Test XML Title");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "Test XSL Description",
			dmDocumentFile = "test_version.xsl",
			dmDocumentTitle = "Test XSL Title"
		);

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Test XSL Title");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Add",
			roleList = "Guest"
		);

		IFrame.closeFrame();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test XML Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xmlURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xml url ${xmlURL}");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		XSLContent.gotoDocumentURL(dmDocumentTitle = "Test XSL Title");

		var valueName = selenium.getElementValue("//input[contains(@id,'url')]");

		echo("value name ${valueName}");

		var xslURL = RegexUtil.replace("${valueName}", "(localhost:\d+\/)(documents\/.*)", "2");

		echo("xsl url ${xslURL}");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#DIALOG");

		Type(locator1 = "TextInput#SETUP_XML_URL", value1 = "@portal_url@/${xmlURL}");

		Type(locator1 = "TextInput#SETUP_XSL_URL", value1 = "@portal_url@/${xslURL}");

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		SelectFrameTop(value1 = "relative=top");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		XSLContent.viewErrorMessage();

		XSLContent.viewConsoleError(consoleTextError = "only XML 1.0 is supported");
	}

	@priority = "4"
	test ViewXSLDefaultContent {
		property test.name.skip.portal.instance = "XSL#ViewXSLDefaultContent";

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.viewPG(portletBody = "Belgian Waffles", portletName = "XSL Content");

		Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Site Name");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		XSLContent.viewConfigurationXSLContent();
	}
}