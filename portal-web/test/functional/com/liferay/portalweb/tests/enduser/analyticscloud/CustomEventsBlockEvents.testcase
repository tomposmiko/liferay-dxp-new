@component-name = "portal-analytics-cloud"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-7346 | Automation ID: LRAC-10147 | Test Summary: Block single custom event and block custom events in bulk"
	@priority = "5"
	test CanBlockCustomEvent {
		task ("Fill fields and create 3 custom events") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");

			var customEventName2 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName2}",
				timeToSendCustomEvent = "1");

			var customEventName3 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName3}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Block custom event") {
			ACCustomEvents.blockCustomEvent(customEventName = "${customEventName1}");
		}

		task ("Search for the name of the custom event that was blocked in custom event list") {
			ACUtils.searchBar(searchItem = "${customEventName1}");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no items found.");
		}

		task ("Navigation to block custom event list") {
			ACCustomEvents.openBlockCustomEventList();
		}

		task ("Search for the name of the custom event that was blocked in block list") {
			ACUtils.searchBar(searchItem = "${customEventName1}");

			ACUtils.viewNameList(nameList = "${customEventName1}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.backNavigation(pageName = "Events");

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Block all custom events") {
			ACCustomEvents.blockAllCustomEvents();

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no views on the selected period.");
		}

		task ("Navigation to block custom event list") {
			ACCustomEvents.openBlockCustomEventList();
		}

		task ("Search for the name of the custom event that was blocked in block list") {
			for (var customEventName : list "${customEventName2},${customEventName3}") {
				ACUtils.searchBar(searchItem = "${customEventName}");

				ACUtils.viewNameList(nameList = "${customEventName}");
			}
		}
	}

	@description = "Feature ID: LRAC-7346 | Automation ID: LRAC-10152 | Test Summary: Blocked events are not shown on Segments"
	@priority = "5"
	test CheckBlockedEventsNotShownOnSegments {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Block custom event") {
			ACCustomEvents.blockCustomEvent(customEventName = "${customEventName}");
		}

		task ("Navigation to segments") {
			ACNavigation.exitSettings();

			ACNavigation.goToSegments();
		}

		task ("Create a new dynamic segment and check that the custom event that has been blocked does not appear") {
			ACSegments.createDynamicSegment();

			ACUtils.searchBar(searchItem = "${customEventName}");

			AssertElementPresent(
				key_SegmentField = "No results were found.",
				locator1 = "ACSegments#SEGMENT_CRITERION_ITEM");
		}
	}

	@description = "Feature ID: LRAC-7346 | Automation ID: LRAC-10150 | Test Summary: Block/Unblock custom events as non-admin"
	@priority = "3"
	test CheckCannotBlockOrUnblockCustomEventsAsNonAdmin {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Login as a non-admin user and switch the property in AC") {
			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Assert block event icon is not present") {
			var key_nameList = "${customEventName}";

			if (IsElementNotPresent(locator1 = "ACUtils#NAME_LIST")) {
				ACUtils.searchBar(searchItem = "${customEventName}");
			}

			MouseOver(locator1 = "ACUtils#NAME_LIST");

			AssertElementNotPresent(
				key_actionButton = "Block",
				locator1 = "ACCustomEvents#BLOCK_HIDE_BUTTON");

			AssertElementNotPresent(locator1 = "ACSettings#SELECT_ALL_CHECKBOX");
		}

		task ("Logout AC and login as an owner user") {
			ACNavigation.exitSettings();

			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "test@liferay.com",
				password = "test");

			ACWorkspace.openWorkspace();
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Block custom event") {
			ACCustomEvents.blockCustomEvent(customEventName = "${customEventName}");
		}

		task ("Logout AC and Login as a non-admin user") {
			ACNavigation.exitSettings();

			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Navigation to block custom event list") {
			ACCustomEvents.openBlockCustomEventList();
		}

		task ("Assert block event icon is not present") {
			var key_nameList = "${customEventName}";

			if (IsElementNotPresent(locator1 = "ACUtils#NAME_LIST")) {
				ACUtils.searchBar(searchItem = "${customEventName}");
			}

			MouseOver(locator1 = "ACUtils#NAME_LIST");

			AssertElementNotPresent(
				key_actionButton = "Unblock Event",
				locator1 = "ACCustomEvents#BLOCK_HIDE_BUTTON");

			AssertElementNotPresent(locator1 = "ACSettings#SELECT_ALL_CHECKBOX");
		}
	}

}