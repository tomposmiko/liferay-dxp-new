@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-144089. The navigation menu admin cannot view empty vocabulary on preview menu."
	@priority = "4"
	test CannotViewEmptyVocabularyOnPreviewMenu {
		task ("Given a navigation menu admin has a navigation menu") {
			task ("Add a category under the first vocabulary") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "Vocabulary Name 1");

				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name",
					vocabularyName = "Vocabulary Name 1");
			}

			task ("Add the second vocabulary") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "Vocabulary Name 2");
			}

			task ("Add a navigation menu") {
				JSONSitenavigation.addSiteNavigationMenu(
					groupName = "Test Site Name",
					siteNavigationMenuName = "Navigation Menu Name");
			}
		}

		task ("When the navigation menu admin adds two vocabulary items to navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitleList = "Vocabulary Name 1,Vocabulary Name 2",
				item = "Vocabulary");
		}

		task ("Then the navigation menu admin could view the alert icon on empty vocabulary item") {
			NavigationMenusAdmin.viewItem(itemName = "Vocabulary Name 1");

			NavigationMenusAdmin.viewItemWarningIcon(itemName = "Vocabulary Name 2");
		}

		task ("When the navigation menu admin opens the preview menu modal and changes the display template to List Menu") {
			NavigationMenusAdmin.openPreviewMenu();

			NavigationMenusAdmin.changeDisplayTemplate(displayTemplate = "List Menu");
		}

		task ("Then the navigation menu admin could only view the first vocabulary on preview menu") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(
				key_itemName = "Category Name",
				locator1 = "NavigationMenusWidget#LIST_MENU_ANY_ITEM");

			AssertElementNotPresent(
				key_itemName = "Vocabulary Name 2",
				locator1 = "NavigationMenusWidget#LIST_MENU_ANY_ITEM");
		}
	}

	@description = "This is a test for LPS-144089. The navigation menu admin could choose display template when preview navigation menu."
	@priority = "5"
	test ConfigureDisplayTemplateOnPreviewMenu {
		property portal.acceptance = "true";

		task ("Given a navigation menu admin has a navigation menu with item") {
			task ("Add a Heading fragment to a content page then publish") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Heading");

				PageEditor.publish();
			}

			task ("Add a navigation menu") {
				JSONSitenavigation.addSiteNavigationMenu(
					groupName = "Test Site Name",
					siteNavigationMenuName = "Navigation Menu Name");
			}

			task ("Add a page item in navigation menu") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					privateLayout = "false",
					siteNavigationMenuItemName = "Test Page Name",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "layout");
			}
		}

		task ("When the navigation menu admin opens the preview menu modal in navigation menu editor") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.openPreviewMenu();
		}

		task ("Then the default display template is Bar minimally styled") {
			NavigationMenusAdmin.viewDisplayTemplate(displayTemplate = "Bar minimally styled");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(
				key_pageName = "Test Page Name",
				locator1 = "Home#PAGE");

			SelectFrameTop();
		}

		task ("When the navigation menu admin changes the display template to List Menu") {
			NavigationMenusAdmin.changeDisplayTemplate(displayTemplate = "List Menu");
		}

		task ("Then the item is displayed as List Menu") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(
				key_itemName = "Test Page Name",
				locator1 = "NavigationMenusWidget#LIST_MENU_ANY_ITEM");
		}
	}

	@description = "This is a test for LPS-144089. The navigation menu admin could preview menu in navigation menu editor."
	@priority = "5"
	test PreviewMenuInNavigationMenuEditor {
		property portal.acceptance = "true";

		task ("Given a navigation menu admin has a navigation menu with multiple items") {
			task ("Add the first display page template for Web Content Article and Basic Web Content") {
				JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
					contentType = "Web Content Article",
					displayPageTemplateEntryName = "Web Content DPT",
					groupName = "Test Site Name",
					subType = "Basic Web Content");
			}

			task ("Add a Display Page Content fragment to the first display page template") {
				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Web Content DPT");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Display Page Content");

				PageEditor.publish();
			}

			task ("Mark the first display page template as default") {
				DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Web Content DPT");
			}

			task ("Add the second display page template for Blogs Entry") {
				JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
					contentType = "Blogs Entry",
					displayPageTemplateEntryName = "Blogs Entry DPT",
					groupName = "Test Site Name");
			}

			task ("Add a Display Page Content fragment to the second display page template") {
				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Blogs Entry DPT");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Display Page Content");

				PageEditor.publish();
			}

			task ("Mark the second display page template as default") {
				DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Blogs Entry DPT");
			}

			task ("Add the third display page template for Document") {
				JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
					contentType = "Document",
					displayPageTemplateEntryName = "Document DPT",
					groupName = "Test Site Name",
					subType = "Basic Document");
			}

			task ("Add a Display Page Content fragment to the third display page template") {
				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Document DPT");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Display Page Content");

				PageEditor.publish();
			}

			task ("Mark the third display page template as default") {
				DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Document DPT");
			}

			task ("Add the fourth display page template for Category") {
				JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
					contentType = "Category",
					displayPageTemplateEntryName = "Category DPT",
					groupName = "Test Site Name");
			}

			task ("Add a Display Page Content fragment to the fourth display page template") {
				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Category DPT");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Display Page Content");

				PageEditor.publish();
			}

			task ("Mark the fourth display page template as default") {
				DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Category DPT");
			}

			task ("Add a web content, blogs entry and document") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title");

				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content",
					groupName = "Test Site Name",
					title = "Blogs Entry Title");

				JSONDocument.addFileWithUploadedFile(
					dmDocumentTitle = "Document Title",
					groupName = "Test Site Name",
					mimeType = "image/jpeg",
					sourceFileName = "Document_1.jpg");
			}

			task ("Add a category under a vocabulary") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "Vocabulary Name");

				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name",
					vocabularyName = "Vocabulary Name");
			}

			task ("Add a widget page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name");
			}

			task ("Add a navigation menu") {
				JSONSitenavigation.addSiteNavigationMenu(
					groupName = "Test Site Name",
					siteNavigationMenuName = "Navigation Menu Name");
			}

			task ("Add different type items to navigation menu") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					siteNavigationMenuItemName = "Submenu Name",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "node");

				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					parentSiteNavigationMenuItem = "Submenu Name",
					siteNavigationMenuItemName = "Liferay",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "url",
					url = "https://www.liferay.com",
					useNewTab = "false");

				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					privateLayout = "false",
					siteNavigationMenuItemName = "Test Page Name",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "layout");

				NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

				NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

				NavigationMenusAdmin.addItem(
					assetTitle = "Web Content Title",
					item = "Web Content Article");

				NavigationMenusAdmin.addItem(
					assetTitle = "Blogs Entry Title",
					item = "Blogs Entry");

				NavigationMenusAdmin.addItem(
					assetTitle = "Document Title",
					item = "Document");

				NavigationMenusAdmin.addItem(
					assetTitleList = "Category Name",
					item = "Category");
			}
		}

		task ("When the navigation menu admin opens the preview menu modal") {
			NavigationMenusAdmin.openPreviewMenu();
		}

		task ("Then the navigation menu admin could view the above items on preview menu") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var itemName : list "Submenu Name,Test Page Name,Web Content Title,Blogs Entry Title,Document Title,Category Name") {
				AssertVisible(
					key_pageName = "${itemName}",
					locator1 = "Home#PAGE");
			}

			MouseOver.javaScriptMouseOver(
				key_pageName = "Submenu Name",
				locator1 = "NavigationMenusWidget#CHILD_TOGGLE");

			AssertVisible(
				key_childPageName = "Liferay",
				locator1 = "Home#PAGE_CHILD_PAGE");
		}
	}

}