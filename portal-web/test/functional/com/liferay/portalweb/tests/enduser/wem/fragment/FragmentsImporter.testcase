@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			Navigator.openURL();

			Site.tearDownCP();
		}
	}

	@description = "This is a test case for LPS-80625. The fragment importer should not allow invalid zip files to be imported."
	@priority = "5"
	test CannotImportInvalidZip {
		property portal.acceptance = "true";

		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Attempt to import a zip file with invalid structure") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "fragment-invalid-zip.zip");

			Button.click(button = "Import");
		}

		task ("Assert the user is prevented from importing an invalid zip and an error message displays") {
			Alert.viewErrorMessage(errorMessage = "The selected file is not a valid zip file.");

			IFrame.closeFrame();
		}
	}

	@description = "This is a test case for LPS-80625. The fragment importer should not allow non-zip files to be imported."
	@priority = "5"
	test CannotImportNonZip {
		property portal.acceptance = "true";

		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Attempt to import a non-zip file") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "Document_1.doc");
		}

		task ("Assert the form validator displays an error that the file is not a zip file") {
			AssertTextEquals(
				locator1 = "Message#ERROR_FORM_VALIDATION",
				value1 = "Please enter a file with a valid extension (zip).");

			IFrame.closeFrame();
		}
	}

	@description = "Fragment collections can be exported and imported."
	@priority = "5"
	test ExportImportCollectionViewFragment {
		property portal.acceptance = "true";

		task ("Add a fragment collection") {
			FragmentsAdmin.addCollection(
				collectionDescription = "Collection Description",
				collectionName = "Collection Name");
		}

		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Add a section fragment that uses the Button fragment code") {
			FragmentsAdmin.addSection(fragmentName = "Fragment Name");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.css");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.js");

			Button.clickPublish();

			FragmentsAdmin.viewEntryPresent(entry = "Fragment Name");
		}

		task ("Export the fragment collection") {
			FragmentsAdmin.exportCollection(collectionName = "Collection Name");
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "New Site Name");
		}

		task ("Navigate to fragments admin in the new site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "new-site-name");
		}

		task ("Import the fragment collection into the new site") {
			FragmentsAdmin.importCollectionFromTempFolder();
		}

		task ("Navigate to the fragment collection in the new site") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Assert the section fragment survived the import and the fragment preview displays the Button fragment") {
			FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");

			SelectFrame.selectFrameNoLoading(locator1 = "FragmentEditor#PREVIEW_IFRAME");

			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a testcase for LPS-96113. All fragments in dependencies should validate successfully."
	@priority = "5"
	test ValidateDependenciesFragments {
		property portal.acceptance = "true";

		task ("Navigate to the fragment import screen") {
			FragmentsAdminNavigator.gotoImportCollection();
		}

		task ("Import fragment dependencies") {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "fragment-collection.zip");

			Button.click(button = "Import");
		}

		task ("Assert the zip imported properly") {
			AssertElementNotPresent(locator1 = "Message#ERROR");
		}

		task ("Assert that all fragments validated") {
			AssertElementNotPresent(
				key_infoMessage = "The following fragments have validation issues",
				locator1 = "Message#INFO_SPECIFIC");
		}
	}

}