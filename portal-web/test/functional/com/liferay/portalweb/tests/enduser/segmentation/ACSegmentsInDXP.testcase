@component-name = "portal-segmentation"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Segmentation";

	setUp {
		task ("Open Analytics Cloud") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			Navigator.openURL(baseURL = ${analyticsCloudURL});
		}

		task ("Take token from Analytics Cloud") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP portal, login and create site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Navigator.openURL();

			JSONGroup.addGroup(groupName = "Test Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");
		}

		task ("Conect DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Test Site Name");
		}

		task ("Navigate to Page and Blog") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Close all sessions and wait") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and Switch Property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Go to Segments and add a new segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.editTextCriterion(textInput = "test@liferay.com");

			ACSegments.saveSegment();
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "LPS-96574 Given I have edit, delete and permission permissions for segments And I have connected my DXP instance with AC When I create an Individual Segment in AC and it shows in the DXP Segments administration Then I don't see the edit action"
	@priority = 3
	test CheckNotEditableSegmentFromACAtDXP {
		property test.name.skip.portal.instance = "ACSegmentsInDXP#CheckNotEditableSegmentFromACAtDXP";

		task ("Update Segments Analytics Cloud in System Settings") {
			Segmentation.updateSegmentsInterval(interval = 1);
		}

		task ("Go to segmentats page and assert that not possible Edit/Delete ") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			while ((IsElementNotPresent(key_tableEntry = "Dynamic Segment Test", locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS")) && (maxIterations = "40")) {
				Refresh();
			}

			Click.waitForMenuToggleJSClick(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

			AssertElementNotPresent(
				key_menuItem = "Edit",
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}
	}

	@description = "LPS-111465 When a default virtual instance/company is not synced to AC, none of the segments created on AC for other virtual instances are listed in People > Segments"
	@priority = 5
	test DefaultInstanceNotSynchronizedWithAC {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ACSegmentsInDXP#DefaultInstanceNotSynchronizedWithAC";

		task ("Update Segments Analytics Cloud in System Settings") {
			Segmentation.updateSegmentsInterval();
		}

		task ("Create a new virtual Instance") {
			PortalInstances.openVirtualInstancesAdmin();

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");
		}

		task ("Go to Virtual Instance Created") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Navigator.openSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Assert that the Virtual Instance is not connected with AC") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			Click(locator1 = "AnalyticsCloudConnection#ANALYTICS_CLOUD_DXP_BUTTON");

			AssertElementPresent(locator1 = "ACDXPSettings#CONNECT_BUTTON_DISABLED");

			Navigator.openSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Go to segments page and assert that the segment created is not present") {
			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			AssertElementNotPresent(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");
		}
	}

	@description = "LPS-111465 When a non-default virtual instance/company is synced to AC, all the segments created on AC with more than one member are listed in People > Segments"
	@ignore = "true"
	@priority = 5
	test NonDefaultInstanceSynchronizedOnAC {

		// TODO LPS-111464 NonDefaultInstanceSynchronizedOnAC pending implementation

	}

	@description = "LPS-96574 Given I have edit, delete and permission permissions for segments And I have connected my DXP instance with AC When I create an Individual Segment in AC and it shows in the DXP Segments administration And I delete the segment Then in the next sync time, the segment will appear again"
	@priority = 4
	test PersistSegmentFromACAtDXP {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ACSegmentsInDXP#PersistSegmentFromACAtDXP";

		task ("Change 'Check Interval' at Segment Analytics Cloud in System Settings") {
			Segmentation.updateSegmentsInterval(interval = 1);
		}

		task ("Go to segmentats page and assert that the segment created is preset") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			while ((IsElementNotPresent(key_tableEntry = "Dynamic Segment Test", locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS")) && (maxIterations = "40")) {
				Refresh();
			}

			AssertElementPresent(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");
		}

		task ("Assert that 'Check Interval' it's one at Segment Analytics Cloud in System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Analytics Cloud Segments",
				configurationScope = "System Scope");

			AssertElementPresent(
				key_value = 1,
				locator1 = "SystemSettings#UPDATE_INTERVAL_SEGMENTS_VALUE");

			AssertClick(
				key_text = "Update",
				locator1 = "Button#ANY",
				value1 = "Update");

			Alert.viewSuccessMessage();
		}

		task ("Go to segments page and assert that the segment created is preset again") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			AssertElementPresent(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");
		}
	}

	@description = "LPS-94938 Validate if the user is redirected to the segment page details when he tries to see the detail of the imported segment from Analytics Cloud into DXP	"
	@priority = 5
	test RedirectToSegmentPageAC {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ACSegmentsInDXP#RedirectToSegmentPageAC";

		task ("Update Segments Analytics Cloud in System Settings") {
			Segmentation.updateSegmentsInterval(interval = 1);
		}

		task ("Go to segmentats page and click at segment crieted in AC") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			while ((IsElementNotPresent(key_tableEntry = "Dynamic Segment Test", locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS")) && (maxIterations = "40")) {
				Refresh();
			}

			Click(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");
		}

		task ("Go and Log into AC and assert the segment page is open") {
			Navigator.selectSpecificWindow(windowTitle = "Dynamic Segment Test - Segment - Analytics Cloud");

			if (IsElementPresent(locator1 = "AnalyticsCloudConnection#ANALYTICS_CLOUD_USER_LOGIN_FIELD")) {
				AnalyticsCloud.loginAnalyticsCloud(
					emailAddress = "test@liferay.com",
					password = "test");
			}

			ACUtils.assertPageTitle(pageTitle = "Dynamic Segment Test");
		}
	}

	@description = "LPS-94938 Validate if the user is redirected to the not found Analytics Cloud page, when he tries to see the detail of the imported segment from Analytics Cloud into DXP, one time that the segment does not exist in Analytics Cloud anymore"
	@priority = 4
	test RedirectToSegmentPageErrorAC {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ACSegmentsInDXP#RedirectToSegmentPageErrorAC";

		task ("Update Segments Analytics Cloud in System Settings") {
			Segmentation.updateSegmentsInterval(interval = 1);
		}

		task ("Go to segmentats page and at segment created in AC") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			while ((IsElementNotPresent(key_tableEntry = "Dynamic Segment Test", locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS")) && (maxIterations = "40")) {
				Refresh();
			}

			AssertElementPresent(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");
		}

		task ("Go to AC and delete segment that was created") {
			ACUtils.closeAllSessions();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});

			ACNavigation.goToSegments();

			ACSegments.deleteSegment(searchTerm = "Dynamic Segment Test");

			ACSegments.viewDeletedSegmentName(searchTerm = "Dynamic Segment Test");
		}

		task ("Go back to DXP and update Segments Analytics Cloud") {
			Navigator.openURL();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");

			Segmentation.updateSegmentsInterval();
		}

		task ("Go to segmentats page and click at segment created in AC") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			Click(
				key_tableEntry = "Dynamic Segment Test",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK");
		}

		task ("Go and Log into AC and assert the ERROR page is open") {
			Navigator.selectSpecificWindow(windowTitle = "Analytics Cloud");

			if (IsElementPresent(locator1 = "AnalyticsCloudConnection#ANALYTICS_CLOUD_USER_LOGIN_FIELD")) {
				AnalyticsCloud.loginAnalyticsCloud(
					emailAddress = "test@liferay.com",
					password = "test");
			}

			AssertTextPresent(
				locator1 = "//body",
				value1 = "The page you are looking for does not exist.");
		}
	}

	@description = "LPS-94940 Validate if, The migrated AC segment, it appears in Liferay DXP Segments administration without an edit/delete actions"
	@ignore = "true"
	@priority = 4
	test SegmentsWithoutEditingAndDeletingFromTheSite {

		// TODO LPS-94940 SegmentsWithoutEditingAndDeletingFromTheSite pending implementation

	}

	@description = "LPS-94938 Validate if the user have the text unlinked when he tries to see the detail of the imported segment from Analytics Cloud into DXP, one time that the connection with Analytics Cloud does not exist anymore"
	@priority = 4
	test ShoudNotRedirectToSegmentPageAC {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ACSegmentsInDXP#ShoudNotRedirectToSegmentPageAC";

		task ("Update Segments Analytics Cloud in System Settings") {
			Segmentation.updateSegmentsInterval();
		}

		task ("Disconnect AC") {
			ACUtils.tearDownDXP();
		}

		task ("Go to segments admin and Assert is not possible to click on the segment previously created ") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			AssertElementNotPresent(
				key_segmentName = "Dynamic Segment Test",
				locator1 = "Segmentation#CLICKABLE_SEGMENT_NAME");
		}

		task ("Conect DXP to AC and navigate to Page") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Test Site Name");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}
	}

}