@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		task ("Go back to Desktop viewport") {
			Click(
				key_deviceType = "Desktop",
				locator1 = "PageEditor#DEVICE_TYPE");
		}

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-119979. Customize the Layout of Grid in each viewport."
	@priority = 4
	test CustomizeLayoutOfGridInEachViewport {
		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 6") {
			PageEditor.editLayoutGrid(
				columnCount = 6,
				panel = "General");
		}

		task ("Select the 2 Modules per Row as Layout in Desktop viewport") {
			PageEditor.editLayoutGrid(
				layout = "2 Modules per Row",
				panel = "Styles");
		}

		task ("Select the 3 Modules per Row as Layout in Tablet viewport") {
			Click(
				key_deviceType = "Tablet",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			Select(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "3 Modules per Row");

			Pause(locator1 = 3000);
		}

		task ("Select the 6 Modules per Row as Layout in Landscape Phone viewport") {
			Click(
				key_deviceType = "Landscape Phone",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			Select(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "6 Modules per Row");

			Pause(locator1 = 3000);
		}

		task ("Select the 1 Module per Row as Layout in Portrait Phone viewport") {
			Click(
				key_deviceType = "Portrait Phone",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			Select(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "1 Module per Row");

			Pause(locator1 = 3000);
		}

		task ("Assert the Layout of Grid is 2 Modules per Row and the height of module is greater than 20px in Desktop viewport") {
			Click(
				key_deviceType = "Desktop",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			PageEditor.viewGridStyle(
				columnCount = 6,
				layout = 6,
				position = 1);

			var moduleHeight = selenium.getElementHeight("//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-6')]");

			var moduleHeight = StringUtil.replace(${moduleHeight}, "px", "");

			TestUtils.isGreaterThan(
				actual = ${moduleHeight},
				expected = 20);
		}

		task ("Assert the Layout of Grid is 3 Modules per Row and the height of module is greater than 20px in Tablet viewport") {
			Click(
				key_deviceType = "Tablet",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewGridStyle(
				columnCount = 6,
				layout = 4,
				position = 1);

			var moduleHeight = selenium.getElementHeight("//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')]");

			var moduleHeight = StringUtil.replace(${moduleHeight}, "px", "");

			TestUtils.isGreaterThan(
				actual = ${moduleHeight},
				expected = 20);

			SelectFrame(value1 = "relative=top");
		}

		task ("Assert the Layout of Grid is 6 Modules per Row and the height of module is greater than 20px in Landscape Phone viewport") {
			Click(
				key_deviceType = "Landscape Phone",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewGridStyle(
				columnCount = 6,
				layout = 2,
				position = 1);

			var moduleHeight = selenium.getElementHeight("//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-2')]");

			var moduleHeight = StringUtil.replace(${moduleHeight}, "px", "");

			TestUtils.isGreaterThan(
				actual = ${moduleHeight},
				expected = 20);

			SelectFrame(value1 = "relative=top");
		}

		task ("Assert the Layout of Grid is 1 Module per Row and the height of module is greater than 20px in Portrait Phone viewport") {
			Click(
				key_deviceType = "Portrait Phone",
				locator1 = "PageEditor#DEVICE_TYPE");

			Pause(locator1 = 3000);

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewGridStyle(
				columnCount = 6,
				layout = 12,
				position = 1);

			var moduleHeight = selenium.getElementHeight("//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-12')]");

			var moduleHeight = StringUtil.replace(${moduleHeight}, "px", "");

			TestUtils.isGreaterThan(
				actual = ${moduleHeight},
				expected = 20);

			SelectFrame(value1 = "relative=top");
		}
	}

	@description = "This is a test for LPS-110723. When change to other viewports, there are only limited common fragment style categories available."
	@priority = 4
	test PropagateCommonFragmentStyleDefinedInDesktopToOtherViewports {
		task ("Add a Paragraph to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Configure the Margin and Padding styles of Paragraph") {
			PageEditor.gotoStyle(fragmentName = "Paragraph");

			PageEditor.configureFragment(
				marginBottom = 2,
				marginLeft = 2,
				marginRight = 2,
				marginTop = 2,
				paddingBottom = 2,
				paddingLeft = 2,
				paddingRight = 2,
				paddingTop = 2);

			PageEditor.viewFragmentStyle(
				fragmentName = "Paragraph",
				marginBottom = 2,
				marginLeft = 2,
				marginRight = 2,
				marginTop = 2,
				paddingBottom = 2,
				paddingLeft = 2,
				paddingRight = 2,
				paddingTop = 2);
		}

		task ("Assert the common styles are propagated to other viewports") {
			for (var deviceType : list "Tablet,Landscape Phone,Portrait Phone") {
				Click(
					key_deviceType = ${deviceType},
					locator1 = "PageEditor#DEVICE_TYPE");

				Pause(locator1 = 3000);

				SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

				PageEditor.viewFragmentStyle(
					fragmentName = "Paragraph",
					marginBottom = 2,
					marginLeft = 2,
					marginRight = 2,
					marginTop = 2,
					paddingBottom = 2,
					paddingLeft = 2,
					paddingRight = 2,
					paddingTop = 2);

				SelectFrame(value1 = "relative=top");
			}
		}
	}

	@description = "This is a test for LPS-110707. Can resize the width of device viewport when edit content page."
	@priority = 5
	test ResizeDeviceViewport {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		Click(
			key_deviceType = "Desktop",
			locator1 = "PageEditor#DEVICE_TYPE");

		AssertElementNotPresent(locator1 = "PageEditor#VIEWPORT_HANDLE");

		Click(
			key_deviceType = "Tablet",
			locator1 = "PageEditor#DEVICE_TYPE");

		AssertVisible(locator1 = "PageEditor#VIEWPORT_HANDLE");

		DragAndDrop.dragAndDrop(
			locator1 = "PageEditor#VIEWPORT_HANDLE",
			value1 = "200,0");

		AssertElementPresent(
			key_style = "992px",
			locator1 = "PageEditor#VIEWPORT_RESIZER");

		Click(
			key_deviceType = "Portrait Phone",
			locator1 = "PageEditor#DEVICE_TYPE");

		AssertVisible(locator1 = "PageEditor#VIEWPORT_HANDLE");

		DragAndDrop.dragAndDrop(
			locator1 = "PageEditor#VIEWPORT_HANDLE",
			value1 = "200,0");

		AssertElementPresent(
			key_style = "576px",
			locator1 = "PageEditor#VIEWPORT_RESIZER");
	}

	@description = "This is a test for LPS-110723. When change to other viewports, there are only limited common fragment style categories available."
	@priority = 5
	test ViewCommonFragmentStyleFieldSets {
		task ("Add a Heading to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Assert all common fragment style fieldsets are available on Desktop viewport") {
			PageEditor.clickConfigurableField(fragmentName = "Heading");

			Pause(locator1 = 3000);

			AssertClick(
				key_navItem = "Styles",
				locator1 = "PageEditor#NAV_ITEM_BUTTON",
				value1 = "Styles");

			for (var fieldSetLabel : list "Margin,Padding,Size,Text,Background,Borders,Effects") {
				AssertElementPresent(
					key_fieldSetLabel = ${fieldSetLabel},
					locator1 = "PageEditor#COMMON_STYLES_FIELDSET_LABEL");
			}
		}

		task ("Assert only Margin and Padding are available on other viewports") {
			for (var deviceType : list "Tablet,Landscape Phone,Portrait Phone") {
				Click(
					key_deviceType = ${deviceType},
					locator1 = "PageEditor#DEVICE_TYPE");

				Pause(locator1 = 3000);

				for (var fieldSetLabel : list "Margin,Padding") {
					AssertElementPresent(
						key_fieldSetLabel = ${fieldSetLabel},
						locator1 = "PageEditor#COMMON_STYLES_FIELDSET_LABEL");
				}
			}
		}
	}

}