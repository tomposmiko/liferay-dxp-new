@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-76825. A user can search for a page from pages admin."
	@priority = "5"
	test SearchPages {
		task ("Add two pages to root and add one child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page One"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page Two"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page Three",
				parentLayoutName = "Page One"
			);
		}

		task ("Navigate to pages administration") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Search for all three pages and assert they all appear") {
			Search.searchCP(searchTerm = "page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page One"
			);

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Page One"
			);

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Page Two"
			);

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Page Two"
			);

			AssertTextEquals(
				locator1 = "//tr[3]/td[2]",
				value1 = "Page Three"
			);

			AssertTextEquals(
				locator1 = "//tr[3]/td[3]",
				value1 = "Page One Page Three"
			);
		}

		task ("Search for one page and assert only that page appears") {
			Search.searchCP(searchTerm = "one");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page One"
			);

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Page One"
			);

			AssertElementNotPresent(
				locator1 = "//tr/td[2][contains(.,'Page Two')]"
			);

			AssertElementNotPresent(
				locator1 = "//tr/td[2][contains(.,'Page Three')]"
			);
		}

		task ("Search for child page and assert that page appears") {
			Search.searchCP(searchTerm = "three");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page Three"
			);

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Page One Page Three"
			);

			AssertElementNotPresent(
				locator1 = "//tr/td[2][contains(.,'Page One')]"
			);

			AssertElementNotPresent(
				locator1 = "//tr/td[2][contains(.,'Page Two')]"
			);
		}
	}

	@description = "This is a test for LPS-86218. A user can change the display style to table, which is a flat table view of all pages. Pages should display in an order that follows the page hierarchy."
	@priority = "5"
	test ViewTableDisplayStyle {
		task ("Add a several pages and child pages") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page 1"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 1",
				type = "content"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "ZZZ",
				parentLayoutName = "Content Page 1",
				type = "content"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 1 Child 1",
				parentLayoutName = "Content Page 1",
				type = "content"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 1 Child 2",
				parentLayoutName = "Content Page 1",
				type = "content"
			);

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page 1 Child 1",
				parentLayoutName = "Widget Page 1"
			);
		}

		task ("Navigate to Pages Admin") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Change the display style to 'Table'") {
			SitePages.changeDisplayStyle(
				displayStyle = "Table"
			);
		}

		task ("Assert the pages appear and are ordered in a way that follows the page hierarchy") {
			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Widget Page 1"
			);

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Widget Page 1"
			);

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Widget Page 1 Child 1"
			);

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Widget Page 1 Widget Page 1 Child 1"
			);

			AssertTextEquals(
				locator1 = "//tr[3]/td[2]",
				value1 = "Content Page 1"
			);

			AssertTextEquals(
				locator1 = "//tr[3]/td[3]",
				value1 = "Content Page 1"
			);

			AssertTextEquals(
				locator1 = "//tr[4]/td[2]",
				value1 = "ZZZ"
			);

			AssertTextEquals(
				locator1 = "//tr[4]/td[3]",
				value1 = "Content Page 1 ZZZ"
			);

			AssertTextEquals(
				locator1 = "//tr[5]/td[2]",
				value1 = "Content Page 1 Child 1"
			);

			AssertTextEquals(
				locator1 = "//tr[5]/td[3]",
				value1 = "Content Page 1 Content Page 1 Child 1"
			);

			AssertTextEquals(
				locator1 = "//tr[6]/td[2]",
				value1 = "Content Page 1 Child 2"
			);

			AssertTextEquals(
				locator1 = "//tr[6]/td[3]",
				value1 = "Content Page 1 Content Page 1 Child 2"
			);
		}
	}
}