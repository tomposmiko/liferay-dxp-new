@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for for LPS-111548. Reloading the page will clean all Undo states."
	@priority = "4"
	test ConfigureHeadingFragmentAndRefreshPageWithUndoEnabled {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.waitForAutoSave();

		AssertVisible(
			key_text = "undo",
			locator1 = "Icon#ANY_ENABLED");

		PageEditor.gotoStyle(fragmentName = "Heading");

		PageEditor.configureFragment(alignment = "Center");

		PageEditor.viewFragmentStyle(
			alignment = "center",
			fragmentName = "heading");

		Refresh();

		AssertElementPresent(
			key_text = "undo",
			locator1 = "Icon#ANY_DISABLED");
	}

	@description = "This is a test for LPS-112030. Can return to a given saved interactions via Undo History list."
	@priority = "5"
	test RestoreSavedInteractionsViaUndoHistory {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.gotoStyle(fragmentName = "Button");

		PageEditor.configureFragment(alignment = "Center");

		PageEditor.gotoDuplicate(fragmentName = "Button");

		PageEditor.removeFragment(
			duplicateFragment = "true",
			fragmentName = "Button");

		Click(locator1 = "PageEditor#UNDO_HISTORY");

		MenuItem.click(menuItem = "Add Button");

		PageEditor.viewFragment(fragmentName = "Button");

		MenuItem.click(menuItem = "Update Button Configuration");

		PageEditor.viewFragmentStyle(
			alignment = "center",
			fragmentName = "button");

		for (var menuItem : list "Add Button,Update Button Configuration,Duplicate Button,Delete Button") {
			MenuItem.viewVisible(menuItem = "${menuItem}");
		}

		MenuItem.click(menuItem = "Duplicate Button");

		PageEditor.viewDuplicateFragment(fragmentName = "Button");

		PageEditor.viewFragmentStyle(
			alignment = "center",
			fragmentName = "button");

		for (var menuItem : list "Add Button,Update Button Configuration,Duplicate Button,Delete Button") {
			MenuItem.viewVisible(menuItem = "${menuItem}");
		}

		MenuItem.click(menuItem = "Delete Button");

		AssertElementNotPresent(
			key_fragmentName = "Button",
			locator1 = "Fragment#FRAGMENT_HEADER_2");

		PageEditor.viewFragment(fragmentName = "Button");

		PageEditor.viewFragmentStyle(
			alignment = "center",
			fragmentName = "button");

		for (var menuItem : list "Add Button,Update Button Configuration,Duplicate Button,Delete Button") {
			MenuItem.viewVisible(menuItem = "${menuItem}");
		}
	}

	@description = "This is a test for LPS-111549. Redo can make the page editor rollback the previous undo state up to X that is the number of undo interactions."
	@priority = "5"
	test UndoAndRedoPagechanges {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		PageEditor.addElementToTab(
			collectionName = "Basic Components",
			fragmentName = "Heading",
			index = "2",
			navItem = "Tab 1",
			navTab = "Fragments",
			position = "1");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "New editable fragment text");

		PageEditor.gotoStyle(fragmentName = "Heading");

		PageEditor.configureFragment(alignment = "Center");

		PageEditor.gotoDuplicate(fragmentName = "Tabs");

		PageEditor.removeFragment(
			duplicateFragment = "true",
			fragmentName = "Tabs");

		AssertVisible(
			key_text = "undo",
			locator1 = "Icon#ANY_ENABLED");

		AssertElementPresent(
			key_text = "redo",
			locator1 = "Icon#ANY_DISABLED");

		for (var i : list "1,2,3,4,5,6") {
			Click(
				key_text = "undo",
				locator1 = "Icon#ANY");
		}

		PageEditor.viewNoFragment(fragmentName = "Tabs");

		AssertVisible(
			key_text = "redo",
			locator1 = "Icon#ANY_ENABLED");

		AssertElementPresent(
			key_text = "undo",
			locator1 = "Icon#ANY_DISABLED");

		Click(
			key_text = "redo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Tabs");

		Click(
			key_text = "redo",
			locator1 = "Icon#ANY");

		AssertElementPresent(
			key_fragmentName = "Heading",
			key_inFragmentName = "Tabs",
			locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

		Click(
			key_text = "redo",
			locator1 = "Icon#ANY");

		AssertTextEquals(
			key_fragmentName = "heading",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "New editable fragment text");

		Click(
			key_text = "redo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragmentStyle(
			alignment = "center",
			fragmentName = "heading");

		Click(
			key_text = "redo",
			locator1 = "Icon#ANY");

		PageEditor.viewDuplicateFragment(fragmentName = "Tabs");

		Click(
			key_text = "redo",
			locator1 = "Icon#ANY");

		AssertElementNotPresent(
			key_fragmentName = "Heading",
			locator1 = "Fragment#FRAGMENT_HEADER_2");

		PageEditor.viewFragment(fragmentName = "Tabs");

		AssertVisible(
			key_text = "undo",
			locator1 = "Icon#ANY_ENABLED");

		AssertElementPresent(
			key_text = "redo",
			locator1 = "Icon#ANY_DISABLED");
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted fragments and widgets back."
	@priority = "5"
	test UndoDeletedFragmentAndWidgetInPage {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.addWidget(
			portletName = "Asset Publisher",
			targetFragmentName = "Button");

		PageEditor.removeFragment(fragmentName = "Button");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Button");

		PageEditor.removeFragment(fragmentName = "Asset Publisher");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Asset Publisher");
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted composition of fragments back."
	@priority = "5"
	test UndoDeletedFragmentComposition {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.addElementToContainer(
			collectionName = "Layout Elements",
			fragmentName = "Grid",
			navTab = "Fragments");

		PageEditor.removeFragmentViaPageStructure(fragmentName = "Container");

		PageEditor.viewNoFragment(fragmentName = "Container");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Container");
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted Collection Display with collection items back."
	@priority = "3"
	test UndoDeletedFragmentWithCollection {
		property osgi.app.includes = "bookmarks,document-library-google-docs";

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${i}",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		PageEditor.removeFragment(fragmentName = "Collection Display");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Collection Display");

		for (var i : list "1,2,3") {
			if ("${i}" == "1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "WC WebContent Title 3",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
			}

			if ("${i}" == "2") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "WC WebContent Title ${i}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
			}

			if ("${i}" == "3") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "WC WebContent Title 1",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
			}
		}
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted fragments with custom configuration back."
	@priority = "4"
	test UndoDeletedFragmentWithCustomConfiguration {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		PageEditor.gotoStyle(fragmentName = "Tabs");

		PageEditor.configureFragment(numberOfTabs = "2");

		AssertVisible(
			key_navItem = "Tab 2",
			locator1 = "Fragment#NAV_ITEM_TAB");

		AssertElementNotPresent(
			key_navItem = "Tab 3",
			locator1 = "Fragment#NAV_ITEM_TAB");

		PageEditor.removeFragment(fragmentName = "Tabs");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Tabs");

		AssertVisible(
			key_navItem = "Tab 2",
			locator1 = "Fragment#NAV_ITEM_TAB");

		AssertElementNotPresent(
			key_navItem = "Tab 3",
			locator1 = "Fragment#NAV_ITEM_TAB");
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted fragments with edited inline content back."
	@priority = "4"
	test UndoDeletedFragmentWithInlineContent {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "New editable fragment text");

		PageEditor.removeFragment(fragmentName = "Heading");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "Heading");

		AssertTextEquals(
			key_fragmentName = "heading",
			locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
			value1 = "New editable fragment text");
	}

	@description = "This is a test for LPS-111946. Undo can bring deleted fragments with mapped content back."
	@priority = "3"
	test UndoDeletedFragmentWithMappedContent {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "HTML",
			id = "element");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WebContent Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		PageEditor.removeFragment(fragmentName = "HTML");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewFragment(fragmentName = "HTML");

		AssertVisible(
			key_content = "WC WebContent Title",
			key_fragmentClass = "content",
			locator1 = "Fragment#FRAGMENT");
	}

	@description = "This is a use case for for LPS-111548. Undo can make the page editor come back to previous state up to 100 last states when the page has more than 100 states."
	@priority = "5"
	test UndoPagechangeHundredTimes {
		property web.xml.timeout = "30";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19") {
			PageEditor.gotoStyle(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "${i}");
		}

		PageEditor.removeFragment(fragmentName = "Tabs");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18") {
			PageEditor.gotoStyle(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "${i}");
		}

		PageEditor.removeFragment(fragmentName = "Tabs");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18") {
			PageEditor.gotoStyle(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "${i}");
		}

		PageEditor.removeFragment(fragmentName = "Tabs");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18") {
			PageEditor.gotoStyle(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "${i}");
		}

		PageEditor.removeFragment(fragmentName = "Tabs");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19") {
			PageEditor.gotoStyle(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "${i}");
		}

		var count = "0";

		while ("${count}" != "100" && (maxIterations = "100")) {
			Click(
				key_text = "undo",
				locator1 = "Icon#ANY");

			AssertTextEquals(
				locator1 = "PageEditor#AUTOSAVE_MESSAGE",
				value1 = "Saved");

			var count = ${count} + 1;
		}

		AssertVisible(
			key_navItem = "Tab 4",
			locator1 = "Fragment#NAV_ITEM_TAB");

		AssertElementNotPresent(
			key_navItem = "Tab 5",
			locator1 = "Fragment#NAV_ITEM_TAB");

		AssertElementPresent(
			key_text = "undo",
			locator1 = "Icon#ANY_DISABLED");
	}

	@description = "This is a test for LPS-111548. Undo can make the page editor come back to previous state up to X last states when the page has X states that is less than 20."
	@priority = "5"
	test UndoPagechangeThreeTimes {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid");

		PageEditor.viewGridStyle(
			columnCount = "3",
			position = "1");

		PageEditor.editLayoutGrid(
			columnCount = "1",
			panel = "General");

		PageEditor.viewGridStyle(
			columnCount = "1",
			position = "1");

		Click(
			key_sidebarButton = "Selection",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		PageEditor.editLayoutGrid(
			columnCount = "2",
			panel = "General");

		PageEditor.viewGridStyle(
			columnCount = "2",
			position = "1");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewGridStyle(
			columnCount = "1",
			position = "1");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		PageEditor.viewGridStyle(
			columnCount = "3",
			position = "1");

		Click(
			key_text = "undo",
			locator1 = "Icon#ANY");

		AssertElementPresent(
			key_text = "undo",
			locator1 = "Icon#ANY_DISABLED");
	}

	@description = "This is a test for LPS-112030. The all saved interactions are shown in the Undo History list."
	@priority = "5"
	test ViewSavedInteractionsViaUndoHistory {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.gotoStyle(fragmentName = "Button");

		PageEditor.configureFragment(alignment = "Center");

		PageEditor.gotoDuplicate(fragmentName = "Button");

		PageEditor.removeFragment(
			duplicateFragment = "true",
			fragmentName = "Button");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading",
			targetFragmentName = "Button");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "New editable fragment text");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image",
			targetFragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Image",
			id = "image");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Small Image");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		DragAndDrop.javaScriptDragAndDropToUp(
			id = "element-text",
			key_dragFragmentName = "Button",
			key_fragmentName = "Heading",
			locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
			locator2 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			value1 = "");

		PageEditor.waitForAutoSave();

		Click(locator1 = "PageEditor#UNDO_HISTORY");

		for (var menuItem : list "Add Button,Update Button Configuration,Duplicate Fragment,Delete Button,Add Heading,Update Heading Editable Values,Add Image,Update Image Editable Values,Move Button") {
			MenuItem.viewVisible(menuItem = "${menuItem}");
		}
	}

}