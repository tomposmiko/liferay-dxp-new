@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(
				collectionZipFile = "fragment-collection.zip"
			);
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a content page with fragments."
	@priority = "5"
	test AddContentPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1"
			);
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);
		}

		task ("Assert the Button fragment is present") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Submit",
				key_fragmentClass = "footer",
				key_position = "3"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Cancel",
				key_fragmentClass = "footer",
				key_position = "3"
			);
		}

		task ("Assert the Submit and Cancel buttons in the Button fragment is present") {
			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}
		}
	}

	@description = "Create a content page from a page template with fragments."
	@priority = "5"
	test AddContentPageFromPageTemplate {
		property portal.acceptance = "true";

		task ("Add a page template collection") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");
		}

		task ("Add a page template with a Button fragment") {
			PageTemplatesAdmin.add(pageTemplateName = "Page Template Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button"
			);

			Button.clickPublish();
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name"
			);
		}

		task ("Navigate to the content page") {
			Navigator.gotoSitePage(pageName = "Test Page Name", siteName = "Test Site Name");
		}

		task ("Assert the Button fragment is present and the buttons work") {
			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}

			Button.clickNoError(button = "Submit");

			AssertConfirm(value1 = "Form submitted");
		}
	}

	@description = "Add a content page and edit its fragment immediately. This is a variation of the steps from LPS-85872."
	@priority = "5"
	test AddContentPageWithEditedFragmentText {
		property testray.component.names = "Training";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Content fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content"
			);
		}

		task ("Edit the Content fragment editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Content",
				id = "content",
				text = "New editable fragment text"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Assert the Content fragment has the updated editable text") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "New editable fragment text",
				key_fragmentClass = "body",
				key_position = "1"
			);
		}
	}

	@description = "Users can only edit content pages in edit mode."
	@priority = "5"
	test CannotEditInViewMode {
		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Navigate to the content page (defaults to 'View Mode')") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Assert the page cannot be edited in 'View Mode' by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
		}

		task ("Navigate to the content page's 'Edit Mode' using the mode toggle") {
			ContentPages.gotoEditMode();
		}

		task ("Assert the content page can be edited in 'Edit Mode' by asserting the fragments side bar is present") {
			AssertVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
		}

		task ("Navigate to the content page's 'View Mode' using the mode toggle") {
			ContentPages.gotoViewMode();
		}

		task ("Assert the page cannot be edited in 'View Mode' by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
		}
	}

	@description = "Edit an existing content page that has fragments. This testcase covers the bug found in LPS-85872."
	@priority = "5"
	test EditContentPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/test-content-page-name"
			);
		}

		task ("Navigate to the content page's 'Edit Mode' using the mode toggle") {
			ContentPages.gotoEditMode();
		}

		task ("Add a Content fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content"
			);
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment text"
			);
		}

		task ("Navigate to the content page's 'View Mode' using the mode toggle") {
			ContentPages.gotoViewMode();
		}

		task ("Assert the Title Fragment is present") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1"
			);
		}

		task ("Assert the Rich Text fragment with updated editable text is present") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "New editable fragment text",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);
		}

		task ("Assert the Content fragment is present") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3"
			);
		}
	}

	@description = "This is a test for LPS-81870. In edit mode the page should still show the elements of the page that are not from the page itself, like the header, footer, or elements defined by the theme."
	@priority = "5"
	test ViewEditModeHeaderFooterTheme {
		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Assert the header and footer are disabled") {
			AssertVisible(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER"
			);

			AssertVisible(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER"
			);
		}

		task ("Assert the header and footer contain the elements that are part of the header and footer") {
			AssertVisible(
				locator1 = "Home#DEFAULT_LOGO"
			);

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = "Test Site Name"
			);

			AssertTextEquals(
				locator1 = "Message#INFO",
				value1 = "This search bar is not visible to users yet. Set up its destination to make it visible."
			);

			AssertVisible(
				locator1 = "UserBar#USER_AVATAR_IMAGE"
			);

			AssertVisible(
				locator1 = "Home#PAGE",
				key_pageName = "Test Content Page Name"
			);

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER",
				value1 = "Powered By Liferay"
			);
		}

		task ("Assert clicking on the disabled header will cause a popover message explaining that the header is disabled") {
			Click(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER"
			);

			AssertVisible(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER"
			);

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. To change theme settings go to page configuration."
			);
		}

		task ("Click away from the header so the popover will disappear") {
			Click(
				locator1 = "PageEditor#EMPTY_MESSAGE"
			);

			AssertElementNotPresent(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER"
			);
		}

		task ("Assert clicking on the disabled footer will cause a popover message explaining that the footer is disabled") {
			Click(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER"
			);

			AssertVisible(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER"
			);

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. To change theme settings go to page configuration."
			);
		}
	}
}