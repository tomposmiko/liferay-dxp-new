@component-name = "portal-headless-frontend-infrastructure"
@disable-webdriver = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		task ("Given active object definitions created") {
			var objectDefinitionId1 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");
			var objectDefinitionId2 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");
		}
	}

	tearDown {
		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteObjectViaAPI(objectName = "University");

			ObjectAdmin.deleteObjectViaAPI(objectName = "Subject");
		}
	}

	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_1 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var objectDefinitionId1 = JSONObject.getObjectId(objectName = "University");
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Subject");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${objectDefinitionId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in subjects GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "subjects");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${universityId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "name");
		}
	}

	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_2 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var objectDefinitionId1 = JSONObject.getObjectId(objectName = "University");
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Subject");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${objectDefinitionId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in universities GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${subjectId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Foundations",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "name");
		}
	}

	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_3 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var objectDefinitionId1 = JSONObject.getObjectId(objectName = "University");
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Subject");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${objectDefinitionId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through subjects PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in subjects GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "subjects");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${universityId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "name");
		}
	}

	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_4 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var objectDefinitionId1 = JSONObject.getObjectId(objectName = "University");
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Subject");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${objectDefinitionId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through subjects PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in universities GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${subjectId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Foundations",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "name");
		}
	}

}