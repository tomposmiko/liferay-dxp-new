@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		ObjectDefinitionAPI.setUpGlobalobjectDefinitionId();
	}

	tearDown {
		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectDefinitionAPI.modifyRelationship(
				deletionType = "cascade",
				objectName = "University");

			ObjectAdmin.deleteObjectViaAPI(objectName = "University");

			ObjectAdmin.deleteObjectViaAPI(objectName = "Subject");

			ObjectAdmin.deleteObjectViaAPI(objectName = "Student");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanDeleteObjectEntryWithDisassociateDeletionTypeRelationshipCreated_1 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects with deletionType Disassociate created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "disassociate",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given three university entries created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
			var universityId3 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Third University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with all three universities through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId3}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When deleting subject entry") {
			var response = ObjectDefinitionAPI.deleteObjectEntry(
				en_US_plural_label = "subjects",
				objectEntryId = "${subjectId}");
		}

		task ("Then the subject does not appear in any of the universities in universities GET endpoint with nestedFields=universitiesSubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertResponseNotIncludeDetailsOfDeletedObject(
				expectedValue = "[],[],[]",
				responseToParse = "${responseToParse}");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanDeleteObjectEntryWithDisassociateDeletionTypeRelationshipCreated_2 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects with deletionType Disassociate created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "disassociate",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given three university entries created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
			var universityId3 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Third University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with all three universities through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId3}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When deleting one of the universities") {
			var response = ObjectDefinitionAPI.deleteObjectEntry(
				en_US_plural_label = "universities",
				objectEntryId = "${universityId1}");
		}

		task ("Then receiving correct information about the related objects in subjects GET endpoint with nestedFields=universitiesSubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "subjects");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Second University,Liferay Third University",
				getObjectsWithNestedFieldReponse = "${responseToParse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetFirstObjectEntiresRelatedToSecondObjectByManyToMany {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("And Given subject entry related to the university entry created") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When I call universities GET endpoint with {universityId}/universitySubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectEntryRelation(
				en_US_plural_label = "universities",
				objectId = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then I receive the correct information about the subjects related to it") {
			ObjectDefinitionAPI.assertResponseHasCorrectObjectEntryName(
				expectedValue = "Liferay Foundations",
				objectEntryId = "${subjectId}",
				responseToParse = "${responseToParse}");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_1 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in subjects GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "subjects");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${universityId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_2 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in universities GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${subjectId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Foundations",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_3 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through subjects PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in subjects GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "subjects");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${universityId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_4 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with university entry through subjects PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then the subject is related to the university in universities GET endpoint with nestedFields=universitiesSubjects") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "${subjectId}",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "id");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Foundations",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_5 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given two university entries created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
		}

		task ("Given two subject entries created") {
			var subjectId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay First Foundations");
			var subjectId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Second Foundations");
		}

		task ("When each subject related to each universtity through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId1}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId2}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then receiving correct information about the related objects in subjects GET endpoint with nestedFields=universitiesSubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "subjects");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay First University",
				getObjectsWithNestedFieldReponse = "${responseToParse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId1}",
				objectField = "name");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Second University",
				getObjectsWithNestedFieldReponse = "${responseToParse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${subjectId2}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetManyToManyRelationshipDetailsAsNestedFields_6 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given two university entries created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
		}

		task ("Given two subject entries created") {
			var subjectId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay First Foundations");
			var subjectId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Second Foundations");
		}

		task ("When each subject related to each universtity through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId1}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId2}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then receiving correct information about the related objects in universities GET endpoint with nestedFields=universitiesSubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay First Foundations",
				getObjectsWithNestedFieldReponse = "${responseToParse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId1}",
				objectField = "name");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Second Foundations",
				getObjectsWithNestedFieldReponse = "${responseToParse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId2}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CanGetMultipleManyToManyRelationshipDetailsAsNestedFields {
		property portal.acceptance = "true";

		task ("Given active student object definition created") {
			var objectDefinitionId3 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given manyToMany relationship universityStudents created") {
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Student");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesStudents",
				name = "universitiesStudents",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("Given student entry created") {
			var studentId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Liferay Employee");
		}

		task ("Given I relate subject entry with university entry through subjects PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Given I relate student entry with university entry through students PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "students",
				objectEntry1 = "${studentId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesStudents");
		}

		task ("When I call universities GET endpoint with nestedFields=universitiesSubjects,universitiesStudents") {
			var getObjectsWithNestedFieldReponse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects,universitiesStudents",
				objects = "universities");
		}

		task ("Then I receive correct information about the related objects") {
			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Foundations",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesSubjects",
				objectEntryId = "${universityId}",
				objectField = "name");

			ObjectDefinitionAPI.assertNestedFieldDetail(
				expectedValue = "Liferay Employee",
				getObjectsWithNestedFieldReponse = "${getObjectsWithNestedFieldReponse}",
				nestedField = "universitiesStudents",
				objectEntryId = "${universityId}",
				objectField = "name");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetObjectEntiresRelatedByManyToManyWhenDifferentRelationshipTypesCreated {
		property portal.acceptance = "true";

		task ("Given active student object definition created") {
			var objectDefinitionId3 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given oneToMany relationship universityStudents created") {
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Student");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesStudents",
				name = "universitiesStudents",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "oneToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("Given student entry created") {
			var studentId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Liferay Employee");
		}

		task ("Given subject entry related to university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Given student entry related to university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${studentId}",
				relationshipName = "universitiesStudents");
		}

		task ("When I call universities GET endpoint with {universityId}/universitySubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectEntryRelation(
				en_US_plural_label = "universities",
				objectId = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then I receive the correct information about the subjects related to it") {
			ObjectDefinitionAPI.assertResponseHasCorrectObjectEntryName(
				expectedValue = "Liferay Foundations",
				objectEntryId = "${subjectId}",
				responseToParse = "${responseToParse}");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetObjectEntiresRelatedByOneToManyWhenDifferentRelationshipTypesCreated {
		property portal.acceptance = "true";

		task ("Given active student object definition created") {
			var objectDefinitionId3 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given oneToMany relationship subjectStudents created") {
			var objectDefinitionId2 = JSONObject.getObjectId(objectName = "Student");

			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "subjectsStudents",
				name = "subjectsStudents",
				objectDefinitionId1 = "${staticObjectId2}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "oneToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("Given student entry created") {
			var studentId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Liferay Employee");
		}

		task ("Given subject entry related to university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Given student entry related to subject entry through subjects PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${studentId}",
				relationshipName = "subjectsStudents");
		}

		task ("When I call subjects GET endpoint with {subjectId}/subjectStudents") {
			var responseToParse = ObjectDefinitionAPI.getObjectEntryRelation(
				en_US_plural_label = "subjects",
				objectId = "${subjectId}",
				relationshipName = "subjectsStudents");
		}

		task ("Then I receive the correct information about the students related to it") {
			ObjectDefinitionAPI.assertResponseHasCorrectObjectEntryName(
				expectedValue = "Liferay Employee",
				objectEntryId = "${studentId}",
				responseToParse = "${responseToParse}");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanGetSecondObjectEntiresRelatedToFirstObjectByManyToMany {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("And Given university entry related to the subject entry created") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "subjects",
				objectEntry1 = "${subjectId}",
				objectEntry2 = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When I call universities GET endpoint with {universityId}/universitySubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectEntryRelation(
				en_US_plural_label = "subjects",
				objectId = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then I receive the correct information about the subjects related to it") {
			ObjectDefinitionAPI.assertResponseHasCorrectObjectEntryName(
				expectedValue = "Liferay University",
				objectEntryId = "${universityId}",
				responseToParse = "${responseToParse}");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test DeletedObjectDoesNotAppearInManyToManyRelationshipDetailsNestedFields_1 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
			var universityId3 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Third University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with all three universities through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId3}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When deleting subject entry") {
			ObjectDefinitionAPI.deleteObjectEntry(
				en_US_plural_label = "subjects",
				objectEntryId = "${subjectId}");
		}

		task ("Then the subject does not appear in any of the universities in universities GET endpoint with nestedFields=universitiesSubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertResponseNotIncludeDetailsOfDeletedObject(
				expectedValue = "[],[],[]",
				responseToParse = "${responseToParse}");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test DeletedObjectDoesNotAppearInManyToManyRelationshipDetailsNestedFields_2 {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
			var universityId3 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Third University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with all three universities through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId3}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When deleting one of the universities") {
			ObjectDefinitionAPI.deleteObjectEntry(
				en_US_plural_label = "universities",
				objectEntryId = "${universityId1}");
		}

		task ("Then the subject is going to be deleted and will be disassociated from other universities") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertResponseNotIncludeDetailsOfDeletedObject(
				expectedValue = "[],[]",
				responseToParse = "${responseToParse}");

			var responseToParse = ObjectDefinitionAPI.getObjectEntries(en_US_plural_label = "subjects");

			var actualValue = JSONUtil.getWithJSONPath("${responseToParse}", "$.totalCount");

			TestUtils.assertEquals(
				actual = "${actualValue}",
				expected = "0");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test ObjectEntryDeletionImpossibleWithPreventDeletionTypeRelationshipCreated {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects with deletionType prevent created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "prevent",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given three university entries created") {
			var universityId1 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay First University");
			var universityId2 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Second University");
			var universityId3 = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay Third University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("When I relate subject entry with all three universities through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId1}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId2}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");

			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId3}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("When deleting subject entry") {
			var responseToParse = ObjectDefinitionAPI.deleteObjectEntry(
				en_US_plural_label = "subjects",
				objectEntryId = "${subjectId}");
		}

		task ("Then assert bad response and subject entry is not deleted") {
			var responseToParse1 = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "universitiesSubjects",
				objects = "universities");

			ObjectDefinitionAPI.assertStatusInResponse(
				expectedValue = "BAD_REQUEST",
				responseToParse = "${responseToParse}");

			ObjectDefinitionAPI.assertResponseIncludeCorrectDetailsOfNotDeletedObject(
				expectedValue = "Liferay Foundations,Liferay Foundations,Liferay Foundations",
				objectEntryId = "${subjectId}",
				responseToParse = "${responseToParse1}");
		}
	}

	@disable-webdriver = "true"
	@priority = "5"
	test RelationshipEnpointGetsDeletedWhenObjectDefinitionDeleted {
		property portal.acceptance = "true";

		task ("Given manyToMany relationship universitySubjects created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "universitiesSubjects",
				name = "universitiesSubjects",
				objectDefinitionId1 = "${staticObjectId1}",
				objectDefinitionId2 = "${staticObjectId2}",
				type = "manyToMany");
		}

		task ("Given university entry created") {
			var universityId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Liferay University");
		}

		task ("Given subject entry created") {
			var subjectId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Liferay Foundations");
		}

		task ("Given subject entry related to university entry through universities PUT endpoint") {
			ObjectDefinitionAPI.relateObjectEntries(
				en_US_plural_label = "universities",
				objectEntry1 = "${universityId}",
				objectEntry2 = "${subjectId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Given I delete the subject object definition") {
			ObjectDefinitionAPI.deleteRelationship(objectDefinitionId = "${staticObjectId1}");

			ObjectAdmin.deleteObjectViaAPI(objectName = "Subject");
		}

		task ("When I call universities GET endpoint with {universityId}/universitySubjects") {
			var responseToParse = ObjectDefinitionAPI.getObjectEntryRelation(
				en_US_plural_label = "universities",
				objectId = "${universityId}",
				relationshipName = "universitiesSubjects");
		}

		task ("Then I receive an error message of relationship not present") {
			ObjectDefinitionAPI.assertStatusInResponse(
				expectedValue = "NOT_FOUND",
				responseToParse = "${responseToParse}");
		}
	}

}