@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdmin.importCollectionFromDependenciesFolder(
			collectionZipFile = "fragment-collection.zip"
		);

		DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPagesAdmin.add(displayPageName = "Display Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title"
		);

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text"
		);

		PageEditorMapping.selectAssetType(
			assetType = "Web Content Article",
			subType = "Basic Web Content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Title",
			id = "title",
			itemName = "Title"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Rich Text",
			id = "rich-text",
			itemName = "content"
		);

		Button.clickPublish();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "When a display page is marked as default, associated assets will be displayed through the display page by default without need for additional configuration."
	@priority = "5"
	test ViewDisplayPageMarkedAsDefault {
		DisplayPagesAdmin.markDisplayPageAsDefault(rowEntry = "Display Page Name");

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		PortletEntry.publish();

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Title",
			key_fragmentClass = "header",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Content",
			key_fragmentClass = "rich-text",
			key_position = "2"
		);
	}

	@description = "Display pages can be viewed through the asset publisher widget."
	@priority = "5"
	test ViewDisplayPageViaAssetPublisher {
		property portal.acceptance = "true";

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Pages"
		);

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		SitePages.addPublicPage(pageName = "Site Page Name");

		Navigator.gotoSitePage(pageName = "Site Page Name", siteName = "Test Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureAssetLinkBehaviorPG(
			assetLinkBehavior = "View in Context"
		);

		AssertTextEquals(
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "Webcontent Title",
			key_assetTitle = "Webcontent Title"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "Webcontent Content",
			key_assetTitle = "Webcontent Title"
		);

		Click(locator1 = "AP#ASSET_ABSTRACT_TITLE", key_assetTitle = "Webcontent Title");

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Title",
			key_fragmentClass = "header",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Content",
			key_fragmentClass = "rich-text",
			key_position = "2"
		);
	}

	@description = "Display pages can be viewed through friendly URL."
	@priority = "5"
	test ViewDisplayPageViaFriendlyURL {
		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContent.editDisplayPage(
			pageName = "Display Page Name",
			pageType = "Display Pages"
		);

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Title",
			key_fragmentClass = "header",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Content",
			key_fragmentClass = "rich-text",
			key_position = "2"
		);
	}

	@description = "A selected display page should override the default display page."
	@priority = "5"
	test ViewNonDefaultDisplayPage {
		DisplayPagesAdmin.markDisplayPageAsDefault(rowEntry = "Display Page Name");

		DisplayPagesAdmin.add(displayPageName = "Non-Default Display Page");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text"
		);

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title"
		);

		PageEditorMapping.selectAssetType(
			assetType = "Web Content Article",
			subType = "Basic Web Content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Rich Text",
			id = "rich-text",
			itemName = "content"
		);

		PageEditorMapping.mapEditableTextToAsset(
			fragmentName = "Title",
			id = "title",
			itemName = "Title"
		);

		Button.clickPublish();

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContent.editDisplayPage(
			pageName = "Non-Default Display Page",
			pageType = "Display Pages"
		);

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Content",
			key_fragmentClass = "rich-text",
			key_position = "1"
		);

		AssertVisible(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Title",
			key_fragmentClass = "header",
			key_position = "2"
		);
	}

	@description = "When no display page is selected, assets should not be displayed through the default display page."
	@priority = "4"
	test ViewNoSelectedDisplayPage {
		DisplayPagesAdmin.markDisplayPageAsDefault(rowEntry = "Display Page Name");

		WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		Panel.expandPanel(panel = "Display Page");

		Click(locator1 = "WCSelectDisplayPage#NONE");

		PortletEntry.publish();

		Navigator.openWithAppendToBaseURL(
			urlAppend = "web/test-site-name/-/webcontent-title"
		);

		AssertTextPresent(value1 = "The requested resource could not be found.");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		SitePages.addPublicPage(pageName = "Site Page Name");

		Navigator.gotoSitePage(pageName = "Site Page Name", siteName = "Test Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureAssetLinkBehaviorPG(
			assetLinkBehavior = "View in Context"
		);

		AssertTextEquals(
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "Webcontent Title",
			key_assetTitle = "Webcontent Title"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "Webcontent Content",
			key_assetTitle = "Webcontent Title"
		);

		Click(locator1 = "AP#ASSET_ABSTRACT_TITLE", key_assetTitle = "Webcontent Title");

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DETAIL_CONTENT",
			value1 = "Webcontent Content"
		);

		AssertElementNotPresent(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Title",
			key_fragmentClass = "header",
			key_position = "1"
		);

		AssertElementNotPresent(
			locator1 = "Fragment#FRAGMENT",
			key_content = "Webcontent Content",
			key_fragmentClass = "rich-text",
			key_position = "2"
		);
	}
}