@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(
				collectionZipFile = "fragment-collection.zip"
			);
		}

		task ("Add a display page with fragments mapped to Basic Web Content") {
			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPagesAdmin.addDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);

			PageEditorMapping.selectAssetType(
				assetType = "Web Content Article",
				subType = "Basic Web Content"
			);

			PageEditorMapping.mapEditableTextToAsset(
				fragmentName = "Title",
				id = "title",
				itemName = "Title"
			);

			PageEditorMapping.mapEditableTextToAsset(
				fragmentName = "Rich Text",
				id = "rich-text",
				itemName = "Content"
			);

			Button.clickPublish();

			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-86191. A user can configure the page settings for each individual display page. This test will test 'Show Header' and 'Show Footer'."
	@priority = "4"
	test ConfigureDisplayPageShowHeaderAndFooter {
		task ("Add a web content that uses the display page") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Pages"
			);
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the page header and footer appear") {
			AssertVisible(
				locator1 = "Home#DEFAULT_LOGO"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			AssertVisible(
				locator1 = "Home#FOOTER"
			);
		}

		task ("Configure the display page settings so the header and footer do not appear") {
			DisplayPagesAdmin.openDisplayPagesAdmin(
				siteURLKey = "test-site-name"
			);

			DisplayPagesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Configure"
			);

			Navigator.gotoNavTab(navTab = "Look and Feel");

			Click(locator1 = "Radio#SPECIFIC_LOOK");

			Uncheck.uncheckToggleSwitch(
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
				key_toggleSwitchLabel = "Show Footer"
			);

			Uncheck.uncheckToggleSwitch(
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
				key_toggleSwitchLabel = "Show Header"
			);

			Button.clickSave();
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the page header and footer do not appear") {
			AssertElementNotPresent(
				locator1 = "Home#DEFAULT_LOGO"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			AssertElementNotPresent(
				locator1 = "Home#FOOTER"
			);
		}
	}

	@description = "This is a test for LPS-86191. A user can configure the page settings for each individual display page. This test changes the theme."
	@priority = "4"
	test ConfigureDisplayPageTheme {
		task ("Add a web content that uses the display page") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Pages"
			);
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the display page is using the Classic Theme") {
			AssertElementPresent(
				locator1 = "//link[contains(@href,'classic-theme')]"
			);

			AssertElementNotPresent(
				locator1 = "//link[contains(@href,'fjord-theme')]"
			);
		}

		task ("Change the display page theme from Classic to Fjord") {
			DisplayPagesAdmin.openDisplayPagesAdmin(
				siteURLKey = "test-site-name"
			);

			DisplayPagesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Configure"
			);

			Navigator.gotoNavTab(navTab = "Look and Feel");

			Click(locator1 = "Radio#SPECIFIC_LOOK");

			Click(locator1 = "SitePagesEditPage#CHANGE_CURRENT_THEME_BUTTON");

			SelectFrame(locator1 = "IFrame#DIALOG");

			LexiconCard.clickCard(
				card = "Fjord"
			);

			SelectFrameTop(value1 = "relative=top");

			Button.clickSave();
		}

		task ("View the web content through the display page") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the display page is using the Fjord Theme") {
			AssertElementPresent(
				locator1 = "//link[contains(@href,'fjord-theme')]"
			);

			AssertElementNotPresent(
				locator1 = "//link[contains(@href,'classic-theme')]"
			);
		}
	}

	@description = "This is a test for LPS-86221. A user can preview a draft status web content article within its display page."
	@priority = "5"
	test PreviewDraftWebContent {
		task ("Mark the display page as default") {
			DisplayPagesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a draft status web content article") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			PortletEntry.saveAsDraft();
		}

		task ("Preview the draft status web content article") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Webcontent Title",
				menuItem = "Preview Draft"
			);
		}

		task ("Assert the draft status web content article's preview displays using the display page") {
			AssertTextEquals(
				locator1 = "WCPreview#PREVIEW_TITLE",
				value1 = "Webcontent Title"
			);

			IFrame.selectModalFrame();

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a test for LPS-86221. A user can preview a pending status web content article within its display page."
	@priority = "5"
	test PreviewPendingWebContent {
		task ("Mark the display page as default") {
			DisplayPagesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			ProductMenu.gotoPortlet(
				category = "Configuration",
				panel = "Site Administration",
				portlet = "Workflow"
			);

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article"
			);
		}

		task ("Submit a web content article for publication") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			PortletEntry.submitForPublication();
		}

		task ("Preview the pending status web content article") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Webcontent Title",
				menuItem = "Preview"
			);
		}

		task ("Assert the draft status web content article's preview displays using the display page") {
			AssertTextEquals(
				locator1 = "WCPreview#PREVIEW_TITLE",
				value1 = "Webcontent Title"
			);

			IFrame.selectModalFrame();

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			IFrame.selectTopFrame();
		}
	}

	@description = "This is a test for LPS-86221. A user can preview a published web content article within its display page."
	@priority = "5"
	test PreviewPublishedWebContent {
		task ("Mark the display page as default") {
			DisplayPagesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			PortletEntry.publish();
		}

		task ("Preview the web content article") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Webcontent Title",
				menuItem = "Preview"
			);
		}

		task ("Assert the web content article's preview displays using the display page") {
			AssertTextEquals(
				locator1 = "WCPreview#PREVIEW_TITLE",
				value1 = "Webcontent Title"
			);

			IFrame.selectModalFrame();

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			IFrame.selectTopFrame();
		}
	}

	@description = "When a display page is marked as default, associated assets will be displayed through the display page by default without need for additional configuration."
	@priority = "5"
	test ViewDisplayPageMarkedAsDefault {
		task ("Mark the display page as default") {
			DisplayPagesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			PortletEntry.publish();
		}

		task ("View the web content article through its friendly URL") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the web content article displays through the display page") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);
		}
	}

	@description = "This is a test for LPS-86190. Asset metadata should appear in page source."
	@priority = "4"
	test ViewDisplayPageMetadata {
		task ("Add a vocabulary and category") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name"
			);

			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name"
			);
		}

		task ("Add a web content article with a category and tag") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			Panel.expandPanel(panel = "Metadata");

			AssetCategorization.addCategory(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name"
			);

			AssetCategorization.addTag(tagName = "test tag");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Pages"
			);
		}

		task ("View page source of the web content article's friendly URL page") {
			var baseURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(
				url = "view-source:${baseURL}/web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the display page contains the web content article's tag and category") {
			AssertTextPresent(value1 = "meta content=&quot;test tag,category name&quot;");
		}
	}

	@description = "Display pages can be viewed through the asset publisher widget."
	@priority = "5"
	test ViewDisplayPageViaAssetPublisher {
		property portal.acceptance = "true";

		task ("Add a web content article that uses the display page") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Pages"
			);
		}

		task ("Add a widget page to the site") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.addPublicPage(pageName = "Site Page Name");
		}

		task ("Add an Asset Publisher Widget to the widget page") {
			Navigator.gotoSitePage(pageName = "Site Page Name", siteName = "Test Site Name");

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("View the web content article through the Asset Publisher widget") {
			AssertTextEquals(
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Webcontent Title",
				key_assetTitle = "Webcontent Title"
			);

			AssertTextEquals.assertPartialText(
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Webcontent Content",
				key_assetTitle = "Webcontent Title"
			);

			Click(locator1 = "AP#ASSET_ABSTRACT_TITLE", key_assetTitle = "Webcontent Title");
		}

		task ("Assert the Asset Publisher widget brings the user to view the web content article through the display page") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);
		}
	}

	@description = "Display pages can be viewed through friendly URL."
	@priority = "5"
	test ViewDisplayPageViaFriendlyURL {
		task ("Add a web content article") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Pages"
			);
		}

		task ("Navigate to the web content article's friendly URL") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the web content article displays through the display page") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);
		}
	}

	@description = "A selected display page should override the default display page."
	@priority = "5"
	test ViewNonDefaultDisplayPage {
		task ("Mark the display page as default") {
			DisplayPagesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a second display page that is mapped to Basic Web Content") {
			DisplayPagesAdmin.addDisplayPage(displayPageName = "Non-Default Display Page");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);

			PageEditorMapping.selectAssetType(
				assetType = "Web Content Article",
				subType = "Basic Web Content"
			);

			PageEditorMapping.mapEditableTextToAsset(
				fragmentName = "Rich Text",
				id = "rich-text",
				itemName = "Content"
			);

			PageEditorMapping.mapEditableTextToAsset(
				fragmentName = "Title",
				id = "title",
				itemName = "Title"
			);

			Button.clickPublish();
		}

		task ("Add a web content article that uses the second display page") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			WebContent.editDisplayPage(
				pageName = "Non-Default Display Page",
				pageType = "Display Pages"
			);
		}

		task ("Navigate to the web content article's friendly URL") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the web content article displays through the second display page and not the first display page") {
			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "2"
			);
		}
	}

	@description = "When no display page is selected, assets should not be displayed through the default display page."
	@priority = "4"
	test ViewNoSelectedDisplayPage {
		task ("Mark the display page as default") {
			DisplayPagesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content article that has no display page selected") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			Panel.expandPanel(panel = "Display Page");

			Click(locator1 = "WCSelectDisplayPage#NONE");

			PortletEntry.publish();
		}

		task ("Navigate to what the web content article's friendly URL would have been if it had a display page selected") {
			Navigator.openWithAppendToBaseURL(
				urlAppend = "web/test-site-name/-/webcontent-title"
			);
		}

		task ("Assert the web content article does not display because there is no display page") {
			AssertTextPresent(value1 = "The requested resource could not be found.");
		}

		task ("Add a widget page to the site") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.addPublicPage(pageName = "Site Page Name");
		}

		task ("Add an Asset Publisher Widget to the page") {
			Navigator.gotoSitePage(pageName = "Site Page Name", siteName = "Test Site Name");

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("View the web content article through the Asset Publisher widget") {
			AssertTextEquals(
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Webcontent Title",
				key_assetTitle = "Webcontent Title"
			);

			AssertTextEquals.assertPartialText(
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Webcontent Content",
				key_assetTitle = "Webcontent Title"
			);

			Click(locator1 = "AP#ASSET_ABSTRACT_TITLE", key_assetTitle = "Webcontent Title");
		}

		task ("Assert a default generic template instead of the default display page is used to display the web content article") {
			AssertTextEquals.assertPartialText(
				locator1 = "AP#ASSET_ABSTRACT_DETAIL_CONTENT",
				value1 = "Webcontent Content"
			);

			AssertElementNotPresent(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Title",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertElementNotPresent(
				locator1 = "Fragment#FRAGMENT",
				key_content = "Webcontent Content",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);
		}
	}
}