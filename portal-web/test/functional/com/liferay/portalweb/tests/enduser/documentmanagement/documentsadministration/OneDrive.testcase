@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Online Editing";
	property testray.component.name = "OneDrive";
	var pageName = "Documents and Media Page";
	var portletName = "Documents and Media";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "OneDrive",
			configurationScope = "Virtual Instance Scope");

		var oneDriveClientID = PropsUtil.get("onedrive.client.id");

		Type(
			key_text = "clientId",
			locator1 = "TextArea#ANY",
			value1 = "${oneDriveClientID}");

		var oneDriveClientSecret = PropsUtil.get("onedrive.client.secret");

		Type(
			key_text = "clientSecret",
			locator1 = "TextArea#ANY",
			value1 = "${oneDriveClientSecret}");

		var oneDriveTenant = PropsUtil.get("onedrive.tenant");

		Type(
			key_text = "tenant",
			locator1 = "TextArea#ANY",
			value1 = "${oneDriveTenant}");

		ScrollWebElementIntoView(locator1 = "Button#CANCEL");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}

		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		OneDrive.goToOneDrive();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			DMDocumentType.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "This test ensures that an Excel sheet can be added via the OneDrive editor."
	@priority = "5"
	test AddExcelSheet {
		property test.name.skip.portal.instance = "OneDrive#AddExcelSheet";

		OneDrive.deleteDocument(dmDocumentTitle = "Add Excel Sheet Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Excel");

		OneDrive.AddDocument(
			dmDocumentTitle = "Add Excel Sheet Title",
			key_documentTitle = "Add Excel Sheet Title.xlsx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Add Excel Sheet Title",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Add Excel Sheet Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Add Excel Sheet Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Add Excel Sheet Title");
	}

	@description = "This test ensures that a Powerpoint presentation can be added via the OneDrive editor."
	@priority = "5"
	test AddPowerPointPresentation {
		property test.name.skip.portal.instance = "OneDrive#AddPowerPointPresentation";

		OneDrive.deleteDocument(dmDocumentTitle = "Add PowerPoint Presentation Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "PowerPoint");

		OneDrive.AddDocument(
			dmDocumentTitle = "Add PowerPoint Presentation Title",
			key_documentTitle = "Add PowerPoint Presentation Title.pptx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Add PowerPoint Presentation Title",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Add PowerPoint Presentation Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Add PowerPoint Presentation Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Add PowerPoint Presentation Title");
	}

	@description = "This test ensures that a Word document can be added via the OneDrive editor. "
	@priority = "5"
	test AddWordDocument {
		property test.name.skip.portal.instance = "OneDrive#AddWordDocument";

		OneDrive.deleteDocument(dmDocumentTitle = "Add Word Doc Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Word");

		OneDrive.AddDocument(
			dmDocumentTitle = "Add Word Doc Title",
			key_documentTitle = "Add Word Doc Title.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Add Word Doc Title",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Add Word Doc Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Add Word Doc Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Add Word Doc Title");
	}

	@description = "This test covers LPS-102478. It ensures that an Office 365 document automatically checks in after the lock is expired."
	@priority = "4"
	test AutoCheckinDocumentAfterLockExpiration {
		property test.name.skip.portal.instance = "OneDrive#AutoCheckinDocumentAfterLockExpiration";

		property custom.properties = "lock.expiration.time.com.liferay.document.library.kernel.model.DLFileEntry=80000";

		OneDrive.deleteDocument(dmDocumentTitle = "Auto Checkin Word Doc Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Word");

		OneDrive.AddDocument(
			dmDocumentTitle = "Auto Checkin Word Doc Title",
			key_documentTitle = "Auto Checkin Word Doc Title.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Pause(locator1 = "100000");

		Refresh();

		AssertElementNotPresent(
			key_dmDocumentTitle = "Auto Checkin Word Doc Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE");
	}

	@description = "This test ensures that a Word Document is autotagged once checked in."
	@priority = "4"
	test AutoTagWordDocument {
		property test.name.skip.portal.instance = "OneDrive#AutoTagWordDocument";

		OneDrive.deleteDocument(dmDocumentTitle = "Auto Tagging Word Doc Title");

		Navigator.openURL();

		AutoTagging.enableOpenNLP(
			assetType = "Document",
			confidenceThreshold = "0.05");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Word");

		OneDrive.AddDocument(
			dmDocumentContent = "Alice's Adventures in Wonderland.docx",
			dmDocumentTitle = "Auto Tagging Word Doc Title",
			key_documentTitle = "Auto Tagging Word Doc Title.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Auto Tagging Word Doc Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentTitle = "Auto Tagging Word Doc Title",
			tagNameList = "adventures");
	}

	@description = "This test ensures that no residual data is left in the Portal UI after canceling checkout under site admin on an Excel document during creation."
	@priority = "4"
	test CancelCheckoutOnExcelSheet {
		property test.name.skip.portal.instance = "OneDrive#CancelCheckoutOnExcelSheet";

		OneDrive.deleteDocument(dmDocumentTitle = "Cancel Checkout Excel Sheet Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Excel");

		OneDrive.AddDocument(
			dmDocumentTitle = "Cancel Checkout Excel Sheet Title",
			key_documentTitle = "Cancel Checkout Excel Sheet Title.xlsx");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.cancelCheckoutCP(dmDocumentTitle = "Cancel Checkout Excel Sheet Title");

		AssertElementNotPresent(
			key_rowEntry = "Cancel Checkout Excel Sheet Title",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
			value1 = "Cancel Checkout Excel Sheet Title");
	}

	@description = "This test ensures that no residual data is left in the Portal UI after canceling checkout on a Word document during creation."
	@priority = "4"
	test CancelCheckoutOnWordDocument {
		property test.name.skip.portal.instance = "OneDrive#CancelCheckoutOnWordDocument";

		OneDrive.deleteDocument(dmDocumentTitle = "Cancel Checkout Word Doc Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Word");

		OneDrive.AddDocument(
			dmDocumentTitle = "Cancel Checkout Word Doc Title",
			key_documentTitle = "Cancel Checkout Word Doc Title.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.cancelCheckoutPG(dmDocumentTitle = "Cancel Checkout Word Doc Title");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Cancel Checkout Word Doc Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE");
	}

	@description = "This test ensures that an Excel sheet can be deleted."
	@priority = "5"
	test DeleteExcelSheet {
		property test.name.skip.portal.instance = "OneDrive#DeleteExcelSheet";

		OneDrive.deleteDocument(dmDocumentTitle = "Delete Excel Sheet Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Excel");

		OneDrive.AddDocument(
			dmDocumentTitle = "Delete Excel Sheet Title",
			key_documentTitle = "Delete Excel Sheet Title.xlsx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Delete Excel Sheet Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.deletePG(dmDocumentTitle = "Delete Excel Sheet Title");
	}

	@description = "This test ensures that a PowerPoint presentation can be deleted."
	@priority = "5"
	test DeletePowerPointPresentation {
		property test.name.skip.portal.instance = "OneDrive#DeletePowerPointPresentation";

		OneDrive.deleteDocument(dmDocumentTitle = "Delete PowerPoint Presentation Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "PowerPoint");

		OneDrive.AddDocument(
			dmDocumentTitle = "Delete PowerPoint Presentation Title",
			key_documentTitle = "Delete PowerPoint Presentation Title.pptx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Delete PowerPoint Presentation Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.deletePG(dmDocumentTitle = "Delete PowerPoint Presentation Title");
	}

	@description = "This test ensures that a Word document can be deleted."
	@priority = "5"
	test DeleteWordDocument {
		property test.name.skip.portal.instance = "OneDrive#DeleteWordDocument";

		OneDrive.deleteDocument(dmDocumentTitle = "Delete Word Doc Title");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Word");

		OneDrive.AddDocument(
			dmDocumentTitle = "Delete Word Doc Title",
			key_documentTitle = "Delete Word Doc Title.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Delete Word Doc Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.deletePG(dmDocumentTitle = "Delete Word Doc Title");
	}

	@description = "This test ensures that an Excel sheet title can be changed via the OneDrive editor."
	@priority = "4"
	test EditExcelSheet {
		property test.name.skip.portal.instance = "OneDrive#EditExcelSheet";

		for (var documentTitle : list "Document_1,Excel Sheet Title Edited") {
			OneDrive.deleteDocument(dmDocumentTitle = "${documentTitle}");
		}

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.xlsx",
			dmDocumentTitle = "Document_1.xlsx");

		OneDrive.gotoEdit(dmDocumentTitle = "Document_1.xlsx");

		OneDrive.editTitle(
			dmDocumentTitle = "Excel Sheet Title Edited",
			key_documentTitle = "Document_1.xlsx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Document_1.xlsx",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Document_1.xlsx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewAllPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Excel Sheet Title Edited",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test ensures that a Powerpoint presentation title can be changed via the OneDrive editor."
	@priority = "4"
	test EditPowerPointPresentation {
		property test.name.skip.portal.instance = "OneDrive#EditPowerPointPresentation";

		for (var documentTitle : list "Document_2,Powerpoint Presentation Title Edited") {
			OneDrive.deleteDocument(dmDocumentTitle = "${documentTitle}");
		}

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.pptx",
			dmDocumentTitle = "Document_2.pptx");

		OneDrive.gotoEdit(dmDocumentTitle = "Document_2.pptx");

		OneDrive.editTitle(
			dmDocumentTitle = "Powerpoint Presentation Title Edited",
			key_documentTitle = "Document_2.pptx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Document_2.pptx",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Document_2.pptx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewAllPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Powerpoint Presentation Title Edited",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test ensures that a Word document title can be changed via the OneDrive editor."
	@priority = "4"
	test EditWordDocument {
		property test.name.skip.portal.instance = "OneDrive#EditWordDocument";

		for (var documentTitle : list "Document_3,Word Doc Title Edited") {
			OneDrive.deleteDocument(dmDocumentTitle = "${documentTitle}");
		}

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_3.docx",
			dmDocumentTitle = "Document_3.docx");

		OneDrive.gotoEdit(dmDocumentTitle = "Document_3.docx");

		OneDrive.editTitle(
			dmDocumentTitle = "Word Doc Title Edited",
			key_documentTitle = "Document_3.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Document_3.docx",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "Document_3.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewAllPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Word Doc Title Edited",
			dmDocumentVersionNumber = "2.0");
	}

}