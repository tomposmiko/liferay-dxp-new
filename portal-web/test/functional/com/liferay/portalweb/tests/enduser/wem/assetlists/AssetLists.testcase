@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Lists";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Assert that the UI works correctly for adding Asset Lists."
	@priority = "5"
	test AddAssetList {
		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Create a dynamic asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Assert Asset List Entry names and types") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.viewAssetList(
				assetListTitle = "Manual Asset List Test",
				type = "Manual");

			AssetListsAdmin.viewAssetList(
				assetListTitle = "Dynamic Asset List Test",
				type = "Dynamic");
		}
	}

	@description = "Assert that the UI correctly displays a useful error message when an Asset List is added with a duplicate name."
	@priority = "3"
	test AddDuplicateAssetList {
		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Create an asset list that has the same name as the first asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAddMenuItem(menuItem = "Manual Selection");

			PortletEntry.inputText(
				fieldLabel = "Title",
				text = "Manual Asset List Test");

			Button.clickSave();
		}

		task ("Assert an error displays notifying that the user is not allowed to create a duplicate asset list") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_MODAL_CONTENT",
				value1 = "A content set with that title already exists.");
		}
	}

	@description = "Assert that the UI works correctly for deleting Asset Lists."
	@priority = "5"
	test DeleteAssetList {
		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Create a dynamic asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Delete both asset lists") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.deleteEntry(assetListTitle = "Manual Asset List Test");

			AssetListsAdmin.deleteEntry(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Assert the taglib that displays when there are no entries displays") {
			AssertElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB");
		}
	}

	@description = "Assert that the UI works correctly for renaming Asset Lists."
	@priority = "5"
	test RenameAssetList {
		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Rename the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.renameAssetList(
				newAssetListTitle = "Manual Asset List Edit",
				oldAssetListTitle = "Manual Asset List Test");
		}

		task ("Assert that the name of the asset list changed correctly") {
			AssetListsAdmin.viewAssetList(
				assetListTitle = "Manual Asset List Edit",
				type = "Manual");
		}
	}

	@description = "Assert that Asset Lists correctly display their selected content."
	@priority = "4"
	test ViewAssetListContent {
		task ("Create a web content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Select the created web content article to be linked to the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Asset List Test",
				assetName = "WC WebContent Title",
				assetType = "Basic Web Content");
		}

		task ("Assert the selected web content article is viewable from the View Content action for the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Manual Asset List Test",
				assetTitle = "WC WebContent Title",
				assetType = "Web Content Article");
		}
	}

	@description = "This is a test for LPS-84331. Assert that Asset Lists correctly display where they are used."
	@priority = "4"
	test ViewAssetListUsages {
		task ("Create a public page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Add an Asset Publisher portlet to the created public page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("Select the created manual asset list to be used in the asset publisher portlet") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.selectAssetList(assetListName = "Manual Asset List Test");
		}

		task ("Assert the created asset list is used exactly once") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.viewUsages(
				assetListTitle = "Manual Asset List Test",
				usageAmount = "1",
				usageType = "All");
		}
	}

}