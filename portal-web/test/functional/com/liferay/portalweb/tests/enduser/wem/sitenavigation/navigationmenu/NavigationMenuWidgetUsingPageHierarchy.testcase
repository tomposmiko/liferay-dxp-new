@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-87134. Assert we can navigate to a child page in the Navigation Menu widget."
	@priority = "5"
	test AddChildPage {
		task ("Add a page and child page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Child Page",
				parentLayoutName = "Site Page");
		}

		task ("Navigate to the child page using the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Test Site Name");

			Page.gotoChildPagePG(
				childPageName = "Site Child Page",
				pageName = "Site Page");
		}
	}

	@description = "This is a test for LPS-87134. Assert we can navigate to different pages in the Navigation Menu widget."
	@priority = "5"
	test AddMultiplePages {
		task ("Add three pages to the site") {
			for (var index : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Site Page ${index}");
			}
		}

		task ("Navigate to each of the three pages using the Navigation Menu widget") {
			for (var index : list "1,2,3") {
				Navigator.gotoSitePage(
					pageName = "Site Page ${index}",
					siteName = "Test Site Name");
			}
		}
	}

	@description = "This is a test for LPS-87134. Assert Pages Hierarchy is the default navigation in the Navigation Menu widget. If this fails we need to either report this as a bug or adjust the rest of the tests in this testcase to set pages hierarchy as the default in the Navigation Menu widget."
	@priority = "3"
	test AssertPagesHierarchyNavigationIsDefault {
		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page");
		}

		task ("Navigate to the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Test Site Name");
		}

		task ("Assert the Navigation Menu widget is configured to show 'Public Pages Hierarchy' by default") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			AssertSelectedLabel(
				locator1 = "NavigationMenusWidget#SELECT_NAVIGATION",
				value1 = "Public Pages Hierarchy");
		}
	}

	@description = "Assert we can edit the site page name and that it updates on the Navigation Menu widget"
	@priority = "4"
	test EditSitePage {
		task ("Add a page to the site") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.addPublicPage(pageName = "Site Page");
		}

		task ("Edit the name of the page") {
			SitePages.gotoPageMenuItem(
				menuItem = "Configure",
				pageName = "Site Page");

			Page.editName(pageNameEdit = "Site Page Edit");
		}

		task ("Navigate to the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page Edit",
				siteName = "Test Site Name");
		}

		task ("Assert the Navigation Menu widget shows the updated page name") {
			Page.view(
				pageName = "Site Page Edit",
				privacy = "Public Pages");
		}
	}

	@description = "This is a test for LPS-87134. Assert we can hide pages in the Navigation Menu widget."
	@priority = "4"
	test HidePages {
		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Visible");
		}

		task ("Add a second page t othe site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Site Page Hidden");
		}

		task ("Configure the first page to be visible") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.gotoPageMenuItem(
				menuItem = "Configure",
				pageName = "Site Page Visible");

			Page.toggleHiddenFromNavigationMenuWidget(toggleValue = "disable");

			Button.clickSave();
		}

		task ("Configure the second page to be hidden") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			SitePages.gotoPageMenuItem(
				menuItem = "Configure",
				pageName = "Site Page Hidden");

			Page.toggleHiddenFromNavigationMenuWidget(toggleValue = "enable");

			Button.clickSave();
		}

		task ("Assert the first page is visible in the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page Visible",
				siteName = "Test Site Name");
		}

		task ("Assert the second page is not visible in the Navigation Menu widget") {
			AssertElementNotPresent(
				key_pageName = "Site Page Hidden",
				locator1 = "Home#PAGE");
		}
	}

}