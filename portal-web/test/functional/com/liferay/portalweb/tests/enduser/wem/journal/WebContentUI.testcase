@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Test that the UI for adding a WC folder works."
	@priority = 5
	test AddFolder {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");
	}

	@description = "Test that the UI for adding a WC works."
	@priority = 4
	test AddWebContent {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Test that the UI for saving a WC as a draft works."
	@priority = 4
	test AddWebContentDraft {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addDraft(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoViewStatus(
			webContentStatus = "DRAFT",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Draft",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Test that the UI for adding multiple WC works."
	@priority = 3
	test AddWebContentMultiple {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 1");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 2");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 3",
			webContentTitle = "WC WebContent Title 3");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 3");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 1");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "WC WebContent Title 1");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 2");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "WC WebContent Title 2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 3");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 3",
			webContentTitle = "WC WebContent Title 3");
	}

	@description = "Test that the UI for editing WC localization works."
	@priority = 4
	test EditWCAddLocalization {
		property testray.component.names = "Localization,Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.addCP(
			webContentContent = "WC Contenido de la web Contenido",
			webContentTitle = "WC Contenido de la web Titulo");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.viewCP(
			webContentContent = "WC Contenido de la web Contenido",
			webContentTitle = "WC Contenido de la web Titulo");
	}

	@description = "This is a test for LPS-153323. View kebab icon of web content visible."
	@priority = 4
	test ViewKebabIconOfWebContentVisible {
		property testray.component.names = "Web Content Administration";

		task ("Add a published web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check kebab icon of the web content visible") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			AssertCssValue(
				locator1 = "//dd//button[contains(@class, 'dropdown-toggle')]",
				locator2 = "color",
				value1 = "rgba(107, 108, 126, 1)");
		}
	}

	@description = "This is a test for LPS-146458. View the available status filters of Web Content admin."
	@priority = 5
	test ViewStatusFiltersOfWebContentAdmin {
		property portal.acceptance = "true";

		task ("Add a published web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View the available status filters of Web Content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Click(locator1 = "Dropdown#FILTER_AND_ORDER");

			for (var filterName : list "Draft,Scheduled,With Approved Versions,With Expired Versions") {
				MenuItem.viewVisible(menuItem = ${filterName});
			}

			for (var filterName : list "Denied,Pending") {
				MenuItem.viewNotPresent(menuItem = ${filterName});
			}
		}

		task ("Enable Single Approver Workflow for Web Content Article at site level") {
			Workflow.openWorkflowAdmin(siteURLKey = "test-site-name");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("View the available status filters of Web Content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Click(locator1 = "Dropdown#FILTER_AND_ORDER");

			for (var filterName : list "Draft,Denied,Pending,Scheduled,With Approved Versions,With Expired Versions") {
				MenuItem.viewVisible(menuItem = ${filterName});
			}
		}
	}

}