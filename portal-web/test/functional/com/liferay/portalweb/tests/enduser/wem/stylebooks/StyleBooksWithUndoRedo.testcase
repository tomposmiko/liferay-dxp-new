@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Style Books";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-142363. The history will be cleared when publishing the style book or leaving style book editor or reloading page."
	@priority = "4"
	test ClearInteractionStatesHistory {
		task ("Given a style book designer has a style book with interaction states") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			WaitForPageLoad();

			StyleBooks.expandSection(sectionName = "Theme Colors");

			Type(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#557744");

			StyleBooks.clickManagementBar();

			StyleBooks.waitForAutoSave();

			Click(locator1 = "PageEditor#UNDO_HISTORY");

			MenuItem.viewVisible(menuItem = "Update Success");
		}

		task ("When the style book designer publishes the style book") {
			StyleBooks.clickPublish();
		}

		task ("Then the interaction states history is cleared") {
			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			AssertVisible(
				key_text = "time",
				locator1 = "Icon#ANY_DISABLED");

			StyleBooks.expandSection(sectionName = "Theme Colors");

			AssertTextEquals(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#557744");
		}

		task ("When the style book designer leaves the style book editor") {
			Type(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#115544");

			StyleBooks.clickManagementBar();

			StyleBooks.waitForAutoSave();

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");
		}

		task ("Then the interaction states history is cleared") {
			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			AssertVisible(
				key_text = "time",
				locator1 = "Icon#ANY_DISABLED");

			StyleBooks.expandSection(sectionName = "Theme Colors");

			AssertTextEquals(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#115544");
		}

		task ("When the style book designer refreshes the page") {
			Type(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#335544");

			StyleBooks.clickManagementBar();

			StyleBooks.waitForAutoSave();

			Refresh();
		}

		task ("Then the interaction states history is cleared") {
			AssertVisible(
				key_text = "time",
				locator1 = "Icon#ANY_DISABLED");

			StyleBooks.expandSection(sectionName = "Theme Colors");

			AssertTextEquals(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#335544");
		}
	}

	@description = "This is a test for LPS-142363. The History dropdown menu could list up to the last 100 interaction states."
	@priority = "4"
	test ListUpToLastHundredInteractionStatesOnHistoryDropdownMenu {
		property custom.properties = "session.timeout=30";
		property web.xml.timeout = "30";

		task ("Given a style book designer has a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");
		}

		task ("When the style book designer creates 100 interactions states") {
			for (var n : list "1,2,3,4") {
				for (var token : list "111111,222222,333333,444444,555555,666666,777777,888888,999999,000000") {
					Type(
						key_fieldLabel = "Brand Color ${n}",
						key_groupLabel = "Brand Colors",
						locator1 = "TextInput#GROUPED_TEXT_INPUT",
						value1 = "#${token}");

					StyleBooks.clickManagementBar();

					StyleBooks.waitForAutoSave();
				}
			}

			StyleBooks.expandSection(sectionName = "Grays");

			for (var n : list "100,200,300,400,500,600") {
				for (var token : list "111111,222222,333333,444444,555555,666666,777777,888888,999999,000000") {
					Type(
						key_fieldLabel = "Gray ${n}",
						key_groupLabel = "Grays",
						locator1 = "TextInput#GROUPED_TEXT_INPUT",
						value1 = "#${token}");

					StyleBooks.clickManagementBar();

					StyleBooks.waitForAutoSave();
				}
			}
		}

		task ("Then the style book designer could see the last 100 interactions states on history dropdown menu") {
			Click(locator1 = "PageEditor#UNDO_HISTORY");

			AssertTextEquals(
				index = "1",
				locator1 = "MenuItem#MENU_ITEM_BY_INDEX",
				value1 = "Update Gray 600");

			AssertTextEquals(
				index = "100",
				locator1 = "MenuItem#MENU_ITEM_BY_INDEX",
				value1 = "Update Brand Color 1");

			AssertTextEquals(
				index = "102",
				locator1 = "MenuItem#MENU_ITEM_BY_INDEX",
				value1 = "Undo All");
		}
	}

	@description = "This is a test for LPS-142363. The style book designer could undo all interaction states at one time."
	@priority = "5"
	test UndoAllInteractionStates {
		task ("Given a style book designer has a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			WaitForPageLoad();
		}

		task ("When the style book designer creates interactions states") {
			task ("Change the Success to #557744 in Color System form") {
				StyleBooks.expandSection(sectionName = "Theme Colors");

				Type(
					key_fieldLabel = "Success",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = "#557744");

				StyleBooks.clickManagementBar();

				StyleBooks.waitForAutoSave();
			}

			task ("Change the Font Family Base to times in Typography form") {
				StyleBooks.selectForm(formName = "Typography");

				Type(
					key_fieldLabel = "Font Family Base",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = "times");

				StyleBooks.clickManagementBar();

				StyleBooks.waitForAutoSave();
			}
		}

		task ("Then the style book designer could undo all interactions states") {
			Click(locator1 = "PageEditor#UNDO_HISTORY");

			MenuItem.click(menuItem = "Undo All");

			StyleBooks.waitForAutoSave();

			AssertTextEquals(
				key_fieldLabel = "Font Family Base",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'");

			StyleBooks.selectForm(formName = "Color System");

			StyleBooks.expandSection(sectionName = "Theme Colors");

			AssertTextEquals(
				key_fieldLabel = "Success",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#287D3C");
		}
	}

	@description = "This is a test for LPS-142363. The style book designer could undo or redo interaction states."
	@priority = "5"
	test UndoAndRedoInteractionStates {
		task ("Given a style book designer has a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");
		}

		task ("When the style book designer creates interactions states") {
			AssertVisible(
				key_text = "undo",
				locator1 = "Icon#ANY_DISABLED");

			AssertVisible(
				key_text = "redo",
				locator1 = "Icon#ANY_DISABLED");

			StyleBooks.linkValueFromStyleBook(
				colorSwatchItem = "Success",
				fieldLabel = "Brand Color 1");

			AssertVisible(
				key_text = "redo",
				locator1 = "Icon#ANY_DISABLED");
		}

		task ("Then the style book designer could undo and redo interactions states") {
			task ("Undo the last interaction state") {
				Click(
					key_text = "undo",
					locator1 = "Icon#ANY");

				InputField.viewText(
					fieldLabel = "Brand Color 1",
					text = "#0B5FFF");

				AssertVisible(
					key_text = "undo",
					locator1 = "Icon#ANY_DISABLED");
			}

			task ("Redo the last interaction state") {
				Click(
					key_text = "redo",
					locator1 = "Icon#ANY");

				AssertElementPresent(
					key_fieldLabel = "Brand Color 1",
					key_text = "Success",
					locator1 = "Button#ANY_WITH_LABEL");

				AssertVisible(
					key_text = "undo",
					locator1 = "Icon#ANY_ENABLED");
			}
		}
	}

}