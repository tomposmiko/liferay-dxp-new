@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Activate local live staging") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name");

			Staging.activateStagingCP(siteName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "User can only administrate display pages in staging view."
	@priority = 5
	test AssertDisplayPagesAreOnlyEditableInStagingView {
		property portal.acceptance = "true";

		task ("Assert display pages admin is accessible in the staging site") {
			PageTemplatesAdmin.openPageTemplatesMenuAdmin(siteURLKey = "test-site-name-staging");

			AssertVisible(
				key_navItem = "Display Page Templates",
				locator1 = "NavBar#NAV_ITEM_LINK");
		}

		task ("Assert display pages admin is not accessible in the live site") {
			PageTemplatesAdmin.openPageTemplatesMenuAdmin(siteURLKey = "test-site-name");

			AssertElementNotPresent(
				key_navItem = "Display Page Templates",
				locator1 = "NavBar#NAV_ITEM_LINK");
		}
	}

	@description = "This is a use case for LPS-86193. Can export display page template and import to Staging site via UI."
	@priority = 3
	test ExportImportDisplayPageTemplateInStagingSite {
		task ("Add a display page template with Web Content Article type and Basic Web Content subtype") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name-staging",
				site = "false",
				subType = "Basic Web Content");
		}

		task ("Add a Collection Display to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content",
				targetFragmentName = "Collection Display");

			PageEditor.clickPublish();
		}

		task ("Export display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();
		}

		task ("Import display page template in a new staging site") {
			JSONGroup.addGroup(groupName = "Site Name");

			Staging.openStagingAdmin(siteURLKey = "site-name");

			Staging.activateStagingCP(siteName = "Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "site-name-staging");

			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Display Page Name");
		}

		task ("Assert the Collection Display and the Display Page Template are shown in display page template") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Collection Display",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertVisible(
				key_fragmentName = "Collection Display",
				key_message = "No Collection Selected Yet",
				locator1 = "Fragment#NOT_COLLECTION_SELECTED_MESSAGE");

			AssertElementPresent(
				key_fragmentName = "Display Page Content",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertVisible(
				key_fragmentName = "Display Page Content",
				key_messageIfo = "The display page content will be shown here.",
				locator1 = "Fragment#MESSAGE_INFO");
		}
	}

	@description = "This tests one of the workarounds of LPS-92522."
	@priority = 5
	test PublishDisplayPageWithFragment {
		property portal.acceptance = "true";

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Web Content Article",
			displayPageName = "Display Page Name",
			subType = "Basic Web Content");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		Button.clickPublish();

		Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

		Staging.publishCustomPublication();

		AssertConsoleTextNotPresent(value1 = "PortletDataException");
	}

}