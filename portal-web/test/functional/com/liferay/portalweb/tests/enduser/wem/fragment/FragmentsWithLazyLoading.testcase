@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-124056. The page creator could enable Lazy loading on the Image fragment."
	@priority = "5"
	test ConfigureLazyLoadingOnImageFragment {
		task ("Given a page creator has a content page with an Image fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");

			AssertAttributeValue(
				attribute1 = "loading",
				fragmentName = "image",
				id = "image",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "auto");
		}

		task ("When the page creator accesses to the Image Source panel of Image") {
			PageEditor.clickEditableField(
				fragmentName = "Image",
				id = "image");

			Navigator.gotoNavTab(navTab = "Image Source");
		}

		task ("Then the page creator could enable lazy loading") {
			PageEditor.configureFragment(enableLazyLoading = "true");

			AssertAttributeValue(
				attribute1 = "loading",
				fragmentName = "image",
				id = "image",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "lazy");
		}

		task ("When the page creator disable lazy loading on Image") {
			PageEditor.configureFragment(enableLazyLoading = "false");
		}

		task ("Then the value of loading is back to auto") {
			AssertAttributeValue(
				attribute1 = "loading",
				fragmentName = "image",
				id = "image",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "auto");
		}
	}

}