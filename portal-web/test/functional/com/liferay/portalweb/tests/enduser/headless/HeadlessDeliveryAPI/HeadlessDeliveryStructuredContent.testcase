@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a content structure created") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			WebContent.tearDownCP();

			WebContentStructures.tearDownCP();
		}
	}

	@description = "StructuredContent is created with defined priority"
	@priority = "5"
	test CanCreateStructuredContentWithDefinedPriorityValue {
		property portal.acceptance = "true";

		task ("When a web content is created with defined priority") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "6.1",
				title = "WC WebContent Title");
		}

		task ("Then the response body includes the defined priority value") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "6.1",
				responseToParse = "${response}");
		}
	}

	@description = "StructuredContent can be modified priority value"
	@priority = "5"
	test CanModifyStructuredContentPriorityValue {
		property portal.acceptance = "true";

		task ("Given a web content is created with default priority") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title");
		}

		task ("when edit priority value is modified to 3.0") {
			var response = HeadlessWebcontentAPI.editStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "3.0",
				responseToParse = "${responseToParse}",
				title = "WC WebContent Title");
		}

		task ("Then the response body includes the modified priority value") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "3.0",
				responseToParse = "${response}");
		}
	}

	@description = "StructuredContent can be sorted with a set priority"
	@priority = "5"
	test CanSortDescendingStructuredContentsByPriority {
		property portal.acceptance = "true";

		task ("Given three web contents are created with different priorities") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse1 = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1.2",
				title = "WC WebContent Title 1");
			var responseToParse2 = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1.3",
				title = "WC WebContent Title 2");
			var responseToParse3 = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1.4",
				title = "WC WebContent Title 3");
		}

		task ("When web contents are sorted with descending priority") {
			var response = HeadlessWebcontentAPI.sortStructureContent(sortvalue = "priority%3Adesc");
		}

		task ("Then the response body includes a list with descending priority") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "1.4,1.3,1.2",
				responseToParse = "${response}");
		}
	}

	@description = "StructuredContent can be filtered with default priority"
	@priority = "5"
	test StructuredContentContainsPriorityField {
		property portal.acceptance = "true";

		task ("Given a web content are created with default priority") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title");
		}

		task ("When web contents are filtered with default priority") {
			var response = HeadlessWebcontentAPI.filterStructuredContent(filtervalue = "priority%20eq%200.0");
		}

		task ("Then the response body includes the default priority field") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "0.0",
				responseToParse = "${response}");
		}
	}

	@description = "StructuredContent can be filtered with a set priority"
	@priority = "5"
	test StructuredContentContainsUpdatedPriorityValueFilteredByEqualTo {
		property portal.acceptance = "true";

		task ("Given three web contents are created with default priority") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse1 = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title 1");
			var responseToParse2 = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title 2");
			var responseToParse3 = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title 3");
		}

		task ("Given edit a web content with different priorities") {
			var editStructuredContentId = HeadlessWebcontentAPI.editStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1.3",
				responseToParse = "${responseToParse2}",
				title = "WC WebContent Title 2");
		}

		task ("When web contents are filtered with 1.3 priority") {
			var response = HeadlessWebcontentAPI.filterStructuredContent(filtervalue = "priority%20eq%201.3");
		}

		task ("Then the response body only includes items with priority 1.3") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "1.3",
				responseToParse = "${response}");

			HeadlessWebcontentAPI.assertProperNumberOfItems(
				expectedTotalElement = "1",
				responseToParse = "${response}");

			HeadlessWebcontentAPI.assertStructuredContentIdIsFilteredWithCorrectValue(
				editStructuredContentId = "${editStructuredContentId}",
				responseToParse = "${response}");
		}
	}

	@description = "StructuredContent is created with priority field"
	@priority = "5"
	test StructuredContentIsCreatedWithPriorityField {
		property portal.acceptance = "true";

		task ("When a web contents is created with default priority") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContent(
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title");
		}

		task ("Then the response body includes the default priority field") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "0.0",
				responseToParse = "${response}");
		}
	}

}