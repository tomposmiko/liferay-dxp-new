@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToApis();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ExecUtil.executeCommand("docker start osbasahbackend");

		ACUtils.launchAC();

		ACNavigation.goToSettings();

		ACSettings.goToApis();

		ACUtils.clickAnyButton(button = "Revoke");

		ACUtils.clickAnyButton(button = "Continue");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11103 | Test Summary: There is no previous export process for the same type and date range"
	@priority = 4
	test CreateNewScheduledExportProcess {
		var startDate = "1905-05-13";
		var startTime = "11:45:00.000";
		var endDate = "2022-05-13";
		var endTime = "09:20:00.000";
		var type = "page";

		var upperCaseType = StringUtil.upperCase(${type});
		var status = "PENDING";
		var message = "A new data export file for this date range and type will be created. Please come back later.";

		task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Create a new export schedule via API") {
			ACApi.createNewExportSchedule(
				endDate = ${endDate},
				endTime = ${endTime},
				startDate = ${startDate},
				startTime = ${startTime},
				token = ${token},
				type = ${type});
		}

		task ("Check if the API response is correct for a new export schedule") {
			ACApi.viewApiResponseForExportProcess(
				endDate = ${endDate},
				endTime = ${endTime},
				message = ${message},
				startDate = ${startDate},
				startTime = ${startTime},
				status = ${status},
				upperCaseType = ${upperCaseType});
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11104 | Test Summary: There is an export scheduled but not started"
	@priority = 3
	test ExportScheduledButNotStarted {
		var startDate = "2000-11-06";
		var startTime = "11:00:00.000";
		var endDate = "2001-09-06";
		var endTime = "20:30:00.000";
		var type = "segment";

		var upperCaseType = StringUtil.upperCase(${type});
		var status = "PENDING";
		var message1 = "A new data export file for this date range and type will be created. Please come back later.";
		var message2 = "A data export for this date range and type has already been scheduled. Please come back later.";

		task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Create a new export schedule via API") {
			ACApi.createNewExportSchedule(
				endDate = ${endDate},
				endTime = ${endTime},
				startDate = ${startDate},
				startTime = ${startTime},
				token = ${token},
				type = ${type});
		}

		task ("Check if the API response is correct for a new export schedule") {
			ACApi.viewApiResponseForExportProcess(
				endDate = ${endDate},
				endTime = ${endTime},
				message = ${message1},
				startDate = ${startDate},
				startTime = ${startTime},
				status = ${status},
				upperCaseType = ${upperCaseType});
		}

		task ("Run the same curl command again") {
			ACApi.createNewExportSchedule(
				endDate = ${endDate},
				endTime = ${endTime},
				startDate = ${startDate},
				startTime = ${startTime},
				token = ${token},
				type = ${type});
		}

		task ("Check if API response is correct when run same curl twice and export process not started") {
			ACApi.viewApiResponseForExportProcess(
				endDate = ${endDate},
				endTime = ${endTime},
				message = ${message2},
				startDate = ${startDate},
				startTime = ${startTime},
				status = ${status},
				upperCaseType = ${upperCaseType});
		}
	}

	@description = "Feature ID: LRAC-12705 | Automation ID: LRAC-13592 | Test Summary: An internal problem occurred during the export process"
	@priority = 2
	test InternalProblemOccurredInExportProcess {
		var startDate = "1987-05-13";
		var startTime = "11:45:00.000";
		var endDate = "2008-05-13";
		var endTime = "09:20:00.000";
		var type = "page";
		var message = "An internal problem happened when trying to reach our services";
		var containerName = "osbasahbackend";

		task ("Get the token value") {
			var token = ACApi.getTokenValue();
		}

		task ("Stop the osbasahbackend container") {
			var containerID = ExecUtil.executeCommand("docker ps -aqf name=${containerName}");

			ExecUtil.executeCommand("docker stop ${containerID}");
		}

		task ("Create a data export using analytics cloud API with invalid type") {
			ACApi.createNewExportSchedule(
				endDate = ${endDate},
				endTime = ${endTime},
				startDate = ${startDate},
				startTime = ${startTime},
				token = ${token},
				type = ${type});
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(message = ${message});
		}

		task ("Start the osbasahbackend container") {
			ExecUtil.executeCommand("docker start ${containerID}");
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11107 | Test Summary: The request command has 'fromDate' after 'toDate'"
	@priority = 3
	test RequestCommandHasFromDateAfterToDate {
		var startDate = "2021-01-04";
		var startTime = "12:00:00.000";
		var endDate = "2019-08-13";
		var endTime = "20:50:00.000";
		var type = "individual";
		var message = "Wrong range date. \"fromDate\" cannot be after \"toDate\"";

		task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Create a new export schedule via API") {
			ACApi.createNewExportSchedule(
				endDate = ${endDate},
				endTime = ${endTime},
				startDate = ${startDate},
				startTime = ${startTime},
				token = ${token},
				type = ${type});
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(message = ${message});
		}
	}

	@description = "Feature ID: LRAC-12705 | Automation ID: LRAC-12949 | Test Summary: The request command has an invalid type"
	@priority = 2
	test RequestCommandHasInvalidType {
		var startDate = "1987-05-13";
		var startTime = "11:45:00.000";
		var endDate = "2008-05-13";
		var endTime = "09:20:00.000";
		var typeList = "accounts,acqa";
		var message = "The \"type\" query parameter must be either \"individual\", \"page\", or \"segment\"";

		task ("Get the token value") {
			var token = ACApi.getTokenValue();
		}

		for (var type : list ${typeList}) {
			task ("Create a data export using analytics cloud API with invalid type") {
				ACApi.createNewExportSchedule(
					endDate = ${endDate},
					endTime = ${endTime},
					startDate = ${startDate},
					startTime = ${startTime},
					token = ${token},
					type = ${type});
			}

			task ("Check if the API response is correct for the error case") {
				ACApi.viewApiResponseForError(message = ${message});
			}
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11106 | Test Summary: The request command has the wrong date format"
	@priority = 3
	test RequestCommandHasWrongDateFormat {
		var startDate = "2022-02-01";
		var endDate = "2022-05-16";
		var type = "page";
		var message = "Both dates in range must be ISO 8601 compliant yyyy-MM-dd'T'HH:mm[:ss.SSS'Z']";

		task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Run curl command with wrong date format") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			var curl = '''
				${analyticsCloudURL}/api/reports/export/${type}?fromDate=${startDate}\&toDate=${endDate}
					-H "Authorization: Bearer ${token}"
			''';

			var apiResponse = JSONCurlUtil.get(${curl}, "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = ${apiResponse},
				message = ${message});
		}
	}

	@description = "Feature ID: LRAC-10833 | Automation ID: LRAC-11105 | Test Summary: The request command does not contain 'fromDate' or 'toDate'"
	@priority = 3
	test RequestCommandNotContainFromDateOrToDate {
		var startDate = "1964-07-09";
		var startTime = "15:36:00.000";
		var endDate = "2017-06-15";
		var endTime = "10:20:00.000";
		var type = "individual";
		var message = "\"fromDate\" and \"toDate\" query parameters are mandatory and must be ISO 8601 compliant yyyy-MM-dd'T'HH:mm[:ss.SSS'Z']";

		task ("Get the token value to create the schedule") {
			var token = ACApi.getTokenValue();
		}

		task ("Run curl command without 'fromDate' and 'toDate'") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			var curl = '''
				${analyticsCloudURL}/api/reports/export/${type}
					-H "Authorization: Bearer ${token}"
			''';

			var apiResponse = JSONCurlUtil.get(${curl}, "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = ${apiResponse},
				message = ${message});
		}

		task ("Run curl command without 'fromDate'") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			var curl = '''
				${analyticsCloudURL}/api/reports/export/${type}?toDate=${endDate}T${endTime}Z
					-H "Authorization: Bearer ${token}"
			''';

			var apiResponse = JSONCurlUtil.get(${curl}, "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = ${apiResponse},
				message = ${message});
		}

		task ("Run curl command without 'toDate'") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			var curl = '''
				${analyticsCloudURL}/api/reports/export/${type}?fromDate=${startDate}T${startTime}Z
					-H "Authorization: Bearer ${token}"
			''';

			var apiResponse = JSONCurlUtil.get(${curl}, "$");
		}

		task ("Check if the API response is correct for the error case") {
			ACApi.viewApiResponseForError(
				apiResponse = ${apiResponse},
				message = ${message});
		}
	}

}