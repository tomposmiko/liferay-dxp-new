@component-name = "portal-collaboration"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property custom.properties = "default.layout.template.id=1_column";
	property testray.main.component.name = "Wiki";
	var pageName = "Wiki Test Page";
	var portletName = "Wiki";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Wiki Test Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Wiki Test Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.addPG(portletName = "Wiki");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			WikiPage.tearDownCP();

			WikiNode.tearDownCP();

			Page.tearDownCP();
		}
	}

	@priority = "4"
	test ActivateInitialStagingWithWikiAttachment {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCP(siteName = "Site Name", siteType = "Blank");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Staging Test Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Staging Test Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Wiki");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		WikiNavigator.gotoAllPagesPG();

		WikiPage.addPG(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title"
		);

		WikiNavigator.gotoPG(wikiPageTitle = "Wiki Page Title");

		WikiPage.addAttachmentViaPageEdit(
			attachmentFileName = "Document_1.jpg",
			wikiPageTitle = "Wiki Page Title"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name", uncheckContent = "Wiki");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		WikiNavigator.gotoPG(wikiPageTitle = "Wiki Page Title");

		WikiPage.viewAttachmentPGViaEdit(
			attachmentFileName = "Document_1.jpg",
			wikiPageTitle = "Wiki Page Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		WikiNavigator.gotoPG(wikiPageTitle = "Wiki Page Title");

		WikiPage.viewAttachmentPGViaEdit(
			attachmentFileName = "Document_1.jpg",
			wikiPageTitle = "Wiki Page Title"
		);
	}

	@priority = "4"
	test ConfigurePortletDisplaySettings {
		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		WikiPortlet.viewConfigurationTabs(
			isNotPresent = "NAVIGATION_EMAIL_FROM,NAVIGATION_PAGE_ADDED_EMAIL,NAVIGATION_PAGE_UPDATED_EMAIL,NAVIGATION_RSS",
			isPresent = "SETUP_DISPLAY_SETTINGS_PANEL"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		LexiconEntry.gotoHeaderMenuItem(menuItem = "Configuration");

		WikiPortlet.viewConfigurationTabs(
			isNotPresent = "SETUP_DISPLAY_SETTINGS",
			isPresent = "NAVIGATION_EMAIL_FROM,NAVIGATION_PAGE_ADDED_EMAIL,NAVIGATION_PAGE_UPDATED_EMAIL,NAVIGATION_RSS"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		WikiPortlet.configureDisplaySettings(
			uncheckSetting = "ENABLE_COMMENTS,ENABLE_COMMENT_RATINGS,ENABLE_PAGE_RATINGS,SHOW_RELATED_ASSETS"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		WikiPortlet.viewDisplaySettings(
			uncheckedSetting = "ENABLE_COMMENTS,ENABLE_COMMENT_RATINGS,ENABLE_PAGE_RATINGS,SHOW_RELATED_ASSETS"
		);
	}

	@priority = "5"
	test DeleteDeleteWikiFrontpage {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoCP(wikiPageTitle = "FrontPage");

		WikiPage.addFrontPageCP(
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiNodeName = "Main"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiPage.moveToRecycleBinCP(wikiNodeName = "Main", wikiPageTitle = "FrontPage");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.deleteCP(assetName = "FrontPage", assetType = "Wiki Page");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.viewDefaultCP(assetName = "FrontPage");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoFrontPageCP();

		WikiPage.viewFrontPageDefaultCP(wikiPageTitle = "FrontPage");
	}

	@priority = "5"
	test importWikiLARLinkNode {
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPrivatePage(pageName = "Research Projects");

		Page.view(pageName = "Research Projects", privacy = "Private Pages");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.gotoSpecificURLPage(
			pageName = "Research Projects",
			url = "${portalURL}/group/guest/research-projects"
		);

		Portlet.addPG(portletName = "Wiki");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		LAR.importPortlet(
			larFileName = "research-projects-update-node.lar",
			mirrorWithOverwriting = "true",
			uploadFrom = "dependencies"
		);

		Refresh();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertClick(
			locator1 = "Wiki#DESCRIPTIVE_VIEW_ENTRY_TITLE",
			value1 = "Organic Research Projects",
			key_wikiPageTitle = "Organic Research Projects"
		);

		AssertClick(
			locator1 = "Wiki#DESCRIPTIVE_VIEW_ENTRY_TITLE",
			value1 = "FrontPage",
			key_wikiPageTitle = "FrontPage"
		);

		AssertClick(locator1 = "WikiEntry#BODY_LINK", value1 = "Sweet Potatoes");

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "Sweet Potatoes");
	}

	@priority = "5"
	test RateAndEditPageComment {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content 1",
			wikiPageTitle = "Wiki Page 1"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoAllPagesPG();

		WikiTable.viewEntry(draftStatus = "Approved", wikiPageTitle = "Wiki Page 1");

		WikiNavigator.gotoEntryViaPGTable(wikiPageTitle = "Wiki Page 1");

		WikiEntry.viewPageContentBody(wikiPageContent = "Wiki Page Content 1");

		WikiPage.addComment(entryComment = "Wiki Page Comment");

		WikiPage.rateCommentAsGood();

		WikiPage.editComment(
			entryComment = "Wiki Page Comment",
			entryCommentEdit = "Wiki Page Comment Edited"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoAllPagesPG();

		WikiNavigator.gotoEntryViaPGTable(wikiPageTitle = "Wiki Page 1");

		WikiPage.viewCommentPG(
			entryComment = "Wiki Page Comment Edited",
			wikiPageTitle = "Wiki Page 1"
		);

		WikiPage.viewCommentRatingGood();
	}

	@priority = "5"
	test RatePage {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content 1",
			wikiPageTitle = "Wiki Page 1"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoAllPagesPG();

		WikiTable.viewEntry(draftStatus = "Approved", wikiPageTitle = "Wiki Page 1");

		WikiNavigator.gotoEntryViaPGTable(wikiPageTitle = "Wiki Page 1");

		WikiEntry.viewPageContentBody(wikiPageContent = "Wiki Page Content 1");

		WikiPage.rate4StarsPG(wikiPageTitle = "Wiki Page 1");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoAllPagesPG();

		WikiNavigator.gotoEntryViaPGTable(wikiPageTitle = "Wiki Page 1");

		WikiEntry.viewPageContentBody(wikiPageContent = "Wiki Page Content 1");

		WikiPage.viewRate4StarsPG(wikiPageTitle = "Wiki Page 1");
	}

	@priority = "5"
	test RestoreDeleteWikiFrontpage {
		property portal.acceptance = "true";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoCP(wikiPageTitle = "FrontPage");

		WikiPage.addFrontPageCP(
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiPageTitle = "FrontPage"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiPage.moveToRecycleBinCP(wikiNodeName = "Main", wikiPageTitle = "FrontPage");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.restoreOverwriteCP(assetName = "FrontPage");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoFrontPageCP();

		WikiPage.viewFrontPageCP(
			wikiFrontPageContent = "Wiki FrontPage Content",
			wikiFrontPageTitle = "FrontPage",
			wikiNodeName = "Main"
		);
	}

	@priority = "4"
	test SearchWikiAttachments {
		WikiPage.addFrontPagePG(
			wikiNodeName = "Main",
			wikiPageContent = "Wiki FrontPage Content"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.addAttachmentViaPageEdit(
			attachmentFileName = "Document_1.txt",
			wikiPageTitle = "FrontPage"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.searchPG(searchTerm = "document");

		WikiPage.viewSearchResultsPG(
			wikiAttachment = "true",
			wikiAttachmentBody = "Document_1.txt",
			wikiPageTitle = "FrontPage"
		);
	}

	@priority = "4"
	test SearchWikiComment {
		WikiPage.addFrontPagePG(
			wikiNodeName = "Main",
			wikiPageContent = "Wiki FrontPage Content"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.addChildPagePG(
			wikiChildPageContent = "Wiki FrontPage Child Page Content",
			wikiChildPageTitle = "Wiki FrontPage Child Page Title",
			wikiPageTitle = "FrontPage"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoPG(wikiPageTitle = "Wiki FrontPage Child Page Title");

		WikiPage.addComment(
			entryComment = "Wiki FrontPage Child Page Comment Body document"
		);

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.searchPG(searchTerm = "document");

		WikiPage.viewSearchResultsPG(
			commentBody = "Wiki FrontPage Child Page Comment Body document",
			wikiComment = "true",
			wikiPageTitle = "Wiki FrontPage Child Page Title"
		);
	}

	@priority = "3"
	test ViewNoWikiXSSviaAddPage {
		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiPage.editFrontPagePG(
			wikiPageContentEdit = '''<script>alert(123);</script>'''
		);

		AssertClick(locator1 = "Link#EDIT", value1 = "Edit");

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@priority = "4"
	test ViewWikiDraftPagesViaBreadcrumb {
		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.addPG(portletName = "Breadcrumb");

		AssertClick(
			locator1 = "WikiTable#NAVIGATION_RECENT_CHANGES",
			value1 = "Recent Changes"
		);

		Breadcrumb.viewPG(
			breadcrumbListVisible = "Wiki Test Page",
			pathLocator = "PAGE"
		);

		Breadcrumb.viewPG(
			breadcrumbListVisible = "Recent Changes",
			pathLocator = "PAGE"
		);

		AssertClick(locator1 = "WikiTable#NAVIGATION_ALL_PAGES", value1 = "All Pages");

		Breadcrumb.viewPG(
			breadcrumbListVisible = "Wiki Test Page",
			pathLocator = "CURRENT_LOCATION"
		);

		Breadcrumb.viewPG(
			breadcrumbListVisible = "All Pages",
			pathLocator = "CURRENT_LOCATION"
		);

		AssertClick(
			locator1 = "WikiTable#NAVIGATION_DRAFT_PAGES",
			value1 = "Draft Pages"
		);

		Breadcrumb.viewPG(
			breadcrumbListVisible = "Wiki Test Page",
			pathLocator = "PAGE"
		);

		Breadcrumb.viewPG(
			breadcrumbListVisible = "Draft Pages",
			pathLocator = "CURRENT_LOCATION"
		);
	}

	@priority = "4"
	test WikiNavigationPortletSmoke {
		Navigator.openURL(pageName = "Wiki Test Page");

		Portlet.addPG(portletName = "Tree Menu");

		AntCommand.antCommand(
			locator1 = "build-test.xml",
			value1 = "remove-plugin -Dplugin.name=wiki-navigation-portlet"
		);
	}
}