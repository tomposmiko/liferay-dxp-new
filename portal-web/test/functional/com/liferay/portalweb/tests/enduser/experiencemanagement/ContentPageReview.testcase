@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Page Review";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Enable Content Page Comments at the instance level") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Content Page Editor",
				configurationScope = "Virtual Instance Scope");

			FormFields.enableCheckbox(fieldName = "Comments Enabled");

			SystemSettings.saveConfiguration();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This case ensures that the user can add a comment to a fragment of a content page."
	@priority = "5"
	test AddComment {
		property test.name.skip.portal.instance = "ContentPageReview#AddComment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Title",
			position = "1");

		PageEditor.viewComment(fragmentComment = "This is a fragment comment!");
	}

	@description = "This case ensures that the user can add a comment with escape characters to a fragment of a content page."
	@priority = "4"
	test AddCommentWithEscapeCharacters {
		property test.name.skip.portal.instance = "ContentPageReview#AddCommentWithEscapeCharacters";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Content");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
			fragmentClass = "body",
			fragmentComment = '''& < > " Escape Characters Comment''',
			fragmentName = "Content",
			position = "1");

		PageEditor.viewComment(fragmentComment = '''& < > " Escape Characters Comment''');
	}

	@description = "This case ensures a user can delete a fragment comment after publishing a content page."
	@priority = "5"
	test DeleteComment {
		property test.name.skip.portal.instance = "ContentPageReview#DeleteComment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Title",
			position = "1");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "Lorem ipsum dolor sit amet",
			key_fragmentClass = "header",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.viewComment(fragmentComment = "This is a fragment comment.");

		PageEditor.replyToComment(commentReply = "Fragment Comment.");

		PageEditor.viewCommentReply(
			commentReply = "Fragment Comment.",
			user = "Test Test");

		PageEditor.deleteComment(fragmentComment = "This is a fragment comment.");
	}

	@description = "This test ensures that Content Page Comments can be disabled at the instance level."
	@priority = "4"
	test DisableContentPageCommentsAtInstanceScope {
		property test.name.skip.portal.instance = "ContentPageReview#DisableContentPageCommentsAtInstanceScope";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Title",
			position = "1");

		PageEditor.clickPublish();

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Pages",
			configurationName = "Content Page Editor",
			configurationScope = "Virtual Instance Scope");

		FormFields.disableCheckbox(fieldName = "Comments Enabled");

		SystemSettings.saveConfiguration();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		AssertElementNotPresent(locator1 = "Fragment#FRAGMENT_COMMENT_ICON");

		AssertElementNotPresent(
			key_tabName = "Comments",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");

		AssertElementNotPresent(
			key_fragmentComment = "This is a fragment comment.",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY");
	}

	@description = "This case ensures a user can reopen a resolved comment after publishing a content page."
	@priority = "4"
	test ReopenResolvedComment {
		property test.name.skip.portal.instance = "ContentPageReview#ReopenResolvedComment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Static Text");

		PageEditor.addComment(
			content = "This is static text.",
			fragmentClass = "static-text",
			fragmentComment = "This is a fragment comment",
			fragmentName = "Static Text",
			position = "1");

		PageEditor.replyToComment(commentReply = "Fragment Comment 1");

		PageEditor.resolveComment(fragmentComment = "This is a fragment comment");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "This is static text.",
			key_fragmentClass = "static-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.reopenResolvedComment(
			commentReply = "Fragment Comment 1",
			fragmentComment = "This is a fragment comment");

		PageEditor.replyToComment(commentReply = "Fragment Comment 2");
	}

	@description = "This case ensures a user can mark a fragment comment as resolved after publishing a content page."
	@priority = "4"
	test ResolveComment {
		property test.name.skip.portal.instance = "ContentPageReview#ResolveComment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Static Text");

		PageEditor.addComment(
			content = "This is static text.",
			fragmentClass = "static-text",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Static Text",
			position = "1");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "This is static text.",
			key_fragmentClass = "static-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.resolveComment(fragmentComment = "This is a fragment comment.");
	}

	@description = "This test ensures that Content Page Comments is being used once the proper configuration is enabled."
	@priority = "5"
	test Smoke {
		property test.name.skip.portal.instance = "ContentPageReview#Smoke";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.gotoTab(tabName = "Comments");

		PageEditor.viewComment();

		PageEditor.closeSidebar(tabName = "Comments");
	}

	@description = "This case ensures that the user can see a fragment comment after publishing a content page."
	@priority = "5"
	test ViewComment {
		property test.name.skip.portal.instance = "ContentPageReview#ViewComment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditor.addComment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			key_fragmentClass = "rich-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.viewComment(
			fragmentComment = "This is a fragment comment!",
			key_fragmentName = "Rich Text");
	}

	@description = "This test covers LPS-101027. It ensures that a published comment should remain if staging is deactivated."
	@priority = "3"
	test ViewCommentAfterDeactivatingStaging {
		property test.name.skip.portal.instance = "ContentPageReview#ViewCommentAfterDeactivatingStaging";

		Staging.openStagingAdmin(siteURLKey = "test-site-name");

		Staging.activateStagingCP(siteName = "Test Site Name");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name-staging");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditor.addComment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.clickPublish();

		Navigator.gotoStagedSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging");

		Staging.deactivateStagingCP(siteName = "Test Site Name");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoCommentViaFragment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.viewComment(
			fragmentComment = "This is a fragment comment!",
			key_fragmentName = "Rich Text");
	}

	@description = "This test covers LPS-99643. It ensures that the comment on the content page is not removed after the draft is discarded."
	@priority = "4"
	test ViewCommentAfterDiscardedDraft {
		property test.name.skip.portal.instance = "ContentPageReview#ViewCommentAfterDiscardedDraft";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditor.addComment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.clickDiscardDraft();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			key_fragmentClass = "rich-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.viewComment(
			fragmentComment = "This is a fragment comment",
			key_fragmentName = "Rich Text");
	}

	@description = "This test covers LPS-99063. It ensures that Edit and Delete actions should not appear for comment if a user did not create it."
	@priority = "4"
	test ViewCommentAsNonCreator {
		property test.name.skip.portal.instance = "ContentPageReview#ViewCommentByNonCreator";

		JSONUser.addUser(
			userEmailAddress = "user1@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "user1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "user1@liferay.com",
			userScreenName = "user1");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Administrator",
			userScreenName = "user1");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditor.addComment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.clickPublish();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "user1@liferay.com");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			key_fragmentClass = "rich-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.viewComment(
			fragmentComment = "This is a fragment comment!",
			key_fragmentName = "Rich Text");

		AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_ELLIPSIS");
	}

	@description = "This case ensures that users can view created comments when no fragment is selected and navigate to them."
	@priority = "5"
	test ViewCommentList {
		property test.name.skip.portal.instance = "ContentPageReview#ViewCommentList";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "Title fragment comment",
			fragmentName = "Title",
			position = "1");

		PageEditor.gotoCommentList();

		PageEditor.viewCommentList(
			commentCount = "1 Comment",
			fragmentName = "Title",
			openComment = "true");

		PageEditor.viewComment(fragmentComment = "Title fragment comment");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Content");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
			fragmentClass = "body",
			fragmentComment = "Content fragment comment",
			fragmentName = "Content",
			position = "2");

		PageEditor.gotoCommentList();

		PageEditor.viewCommentList(
			commentCount = "1 Comment",
			fragmentName = "Title");

		PageEditor.viewCommentList(
			commentCount = "1 Comment",
			fragmentName = "Content",
			openComment = "true");

		PageEditor.viewComment(fragmentComment = "Content fragment comment");
	}

	@description = "This case ensures that comment list can be viewed and accessed via site navigation."
	@priority = "5"
	test ViewCommentListNavigation {
		property test.name.skip.portal.instance = "ContentPageReview#ViewCommentListNavigation";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "Title fragment comment",
			fragmentName = "Title",
			position = "1");

		PageEditor.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		PageEditor.viewCommentList(
			commentCount = "1 Comment",
			fragmentName = "Title",
			openComment = "true");

		Pause(locator1 = "5000");

		var fragmentComment = "Title fragment comment";

		if (!(IsElementPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY"))) {
			Click(
				key_fragmentName = "Title",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_LIST_HEADING");
		}

		PageEditor.viewComment(fragmentComment = "Title fragment comment");
	}

	@description = "This test covers LPS-100024. It ensures that comments from different experiences are independent from one another."
	@priority = "4"
	test ViewCommentOnDifferentExperience {
		property test.name.skip.portal.instance = "ContentPageReview#CommentOnDifferentExperience";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ProductMenu.gotoPortlet(
			category = "People",
			panel = "Site Administration",
			portlet = "Segments");

		LexiconEntry.gotoAdd();

		Segmentation.addProperties(propertyOption = "Email Address");
		Segmentation.fillTitle(titleField = "New Segment Title");
		Segmentation.changeCriterionInputEmailAddress(criterionInputOption = "Contains");
		Segmentation.fillEmailAddress(emailAddressField = "liferay");

		Button.clickSave();

		Alert.viewSuccessMessage();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addExperience(experienceName = "New Experience Name");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Title",
			position = "1");

		PageEditor.changeExperience(newExperience = "Default");

		PageEditor.removeFragment(fragmentName = "Title");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_CENTER_TEXT",
			value1 = "There are no comments yet.");

		PageEditor.changeExperience(newExperience = "New Experience Name");

		PageEditor.viewCommentList(
			commentCount = "1 Comment",
			fragmentName = "Title",
			openComment = "true");
	}

	@description = "This case ensures that a comment can be added and viewed using the icon in the fragment topper."
	@priority = "5"
	test ViewCommentViaFragment {
		property test.name.skip.portal.instance = "ContentPageReview#ViewCommentViaFragment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditor.addCommentViaFragment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoCommentViaFragment(
			content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
			fragmentClass = "rich-text",
			fragmentComment = "This is a fragment comment!",
			fragmentName = "Rich Text",
			position = "1");

		PageEditor.viewComment(
			fragmentComment = "This is a fragment comment!",
			key_fragmentName = "Rich Text");
	}

	@description = "This case ensures that the user can see an edited fragment comment after publishing a content page."
	@priority = "4"
	test ViewEditedComment {
		property test.name.skip.portal.instance = "ContentPageReview#ViewEditedComment";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Static Text");

		PageEditor.addComment(
			content = "This is static text.",
			fragmentClass = "static-text",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Static Text",
			position = "1");

		PageEditor.editComment(fragmentCommentEdit = "This is a fragment comment edited.");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "This is static text.",
			key_fragmentClass = "static-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.viewComment(fragmentComment = "This is a fragment comment edited.");
	}

	@description = "This case ensures that multiple comments can be added, viewed and accessed in the fragment list."
	@priority = "4"
	test ViewMultipleCommentsList {
		property test.name.skip.portal.instance = "ContentPageReview#ViewMultipleCommentsList";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Static Text");

		for (var commentNumber : list "1,2,3") {
			PageEditor.addComment(
				content = "This is static text.",
				fragmentClass = "static-text",
				fragmentComment = "Static Text fragment comment ${commentNumber}",
				fragmentName = "Static Text",
				position = "1");

			PageEditor.gotoTab(tabName = "Comments");
		}

		PageEditor.gotoTab(tabName = "Comments");

		Click(
			key_content = "This is static text.",
			key_fragmentClass = "static-text",
			key_position = "1",
			locator1 = "Fragment#FRAGMENT");

		PageEditor.gotoCommentList();

		PageEditor.viewCommentList(
			commentCount = "3 Comments",
			fragmentName = "Static Text",
			openComment = "true");

		PageEditor.viewComment(fragmentComment = "Static Text fragment comment 1");
	}

	@description = "This case ensures that multiple replies can be added and viewed in a comment."
	@priority = "4"
	test ViewMultipleReplies {
		property test.name.skip.portal.instance = "ContentPageReview#ViewMultipleReplies";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Static Text");

		PageEditor.addComment(
			content = "This is static text.",
			fragmentClass = "static-text",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Static Text",
			position = "1");

		for (var commentReplyNumber : list "1,2,3,4,5") {
			PageEditor.replyToComment(commentReply = "Fragment Comment ${commentReplyNumber}");

			PageEditor.viewCommentReply(
				commentReply = "Fragment Comment ${commentReplyNumber}",
				user = "Test Test");
		}
	}

	@description = "This test ensures that set the value of Content Page Comments from system settings will act as the default value for a virtual instance."
	@priority = "4"
	test ViewVirtualInstanceCommentInheritsSystemConfiguration {
		property test.name.skip.portal.instance = "ContentPageReview#ViewVirtualInstanceCommentInheritsSystemConfiguration";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.openSpecificURL(url = "http://www.able.com:8080/group/guest/~/control_panel/manage/-/fragments");

		FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			panel = "Site Administration",
			portlet = "Pages");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Title");

		PageEditor.addComment(
			content = "Lorem ipsum dolor sit amet",
			fragmentClass = "header",
			fragmentComment = "This is a fragment comment.",
			fragmentName = "Title",
			position = "1");

		PageEditor.clickPublish();

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Pages",
			configurationName = "Content Page Editor",
			configurationScope = "Virtual Instance Scope");

		FormFields.disableCheckbox(fieldName = "Comments Enabled");

		SystemSettings.saveConfiguration();

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		AssertClick.assertPartialTextClickAt(
			key_pageName = "Test Content Page Name",
			locator1 = "Home#PAGE",
			value1 = "Test Content Page Name");

		ContentPages.clickPencil();

		AssertElementNotPresent(locator1 = "Fragment#FRAGMENT_COMMENT_ICON");

		AssertElementNotPresent(
			key_tabName = "Comments",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");

		AssertElementNotPresent(
			key_fragmentComment = "This is a fragment comment.",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY");
	}

}