@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.tearDownNonDefaultGroups();

			CommerceJSONChannelsAPI._deleteAllCommerceChannels();
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12579 | Test Summary: Can search for channels and sites on assigned property modal"
	@priority = 4
	test CanSearchForChannelsAndSitesOnAssignedPropertyModal {
		var foundChannelName = "Minium Demo Portal";
		var notFoundChannelName = "AC Search Channel";
		var foundSitesName = "Minium Demo";
		var notFoundSitesName = "Site Name";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = ${notFoundChannelName},
				channelType = "site",
				currencyCode = "USD");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Click on the Assign button") {
			Check.checkToggleSwitch(
				key_propertyName = ${assignedPropertyName},
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Search for a channel on channels list") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = ${foundChannelName});

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundChannelName});
		}

		task ("Check that unsearched channel names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundChannelName});
		}

		task ("Search by name of a channel that does not exist") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No channels were found.");
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Search for a site on sites list") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = ${foundSitesName});

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundSitesName});
		}

		task ("Check that unsearched sites names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundSitesName});
		}

		task ("Search by name of a site that does not exist") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No sites were found.");
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the people page in the sidebar") {
			ACDXPSettings.navToSyncedContactDataMenu();
		}

		task ("Click on the Assign button") {
			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Search for a channel on channels list") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = ${foundChannelName});

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundChannelName});
		}

		task ("Check that unsearched channel names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundChannelName});
		}

		task ("Search by name of a channel that does not exist") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No channels were found.");
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Search for a site on sites list") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = ${foundSitesName});

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundSitesName});
		}

		task ("Check that unsearched sites names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundSitesName});
		}

		task ("Search by name of a site that does not exist") {
			ACDXPSettings.searchACItemInAssignModal(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No sites were found.");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12578 | Test Summary: Check that the channel list cannot be edited if toggle is disabled"
	@priority = 5
	test CheckChannelListCannotEditedIfToggleDisabled {
		var channelNameList = "Minium Demo Portal,AC Channel Disabled";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "AC Channel Disabled",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = ${assignedPropertyName});
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = ${assignedPropertyName},
				siteName = "Minium Demo");
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = ${assignedPropertyName},
				syncedChannelsNumber = 1,
				syncedSitesNumber = 1);
		}

		task ("Toggle Commerce Off > Try to assign channels to the property") {
			Uncheck.uncheckToggleSwitch(
				key_propertyName = ${assignedPropertyName},
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Check that the channel list is disabled for editing") {
			for (var channelName : list ${channelNameList}) {
				AssertElementPresent(
					key_selectedName = ${channelName},
					locator1 = "ACDXPSettings#CHECKBOX_NOT_AVAILABLE_TO_SELECT");
			}
		}
	}

	@description = "Bug: LRAC-12938 | Automation ID: LRAC-13010 | Test Summary: Check that event not being sent when desynchronized sites"
	@priority = 4
	test CheckEventNotBeingSentWhenDesynchronizedSites {
		property proxy.server.enabled = "true";

		task ("Connect DXP to AC > Sync channel and the two sites > Sync contacts and accounts > Sync attributes > Finish") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Go to the sites and assert that the events are being sent") {
			for (var siteName : list "Site Name,Minium Demo") {
				task ("Go to the site page") {
					ApplicationsMenu.gotoSite(site = ${siteName});
				}

				task ("Start Har recording") {
					ProxyUtil.startHarRecording("pageEvents");
				}

				task ("Refresh the page") {
					Refresh();
				}

				task ("Wait for sending requests") {
					ACUtils.waitForSendingRequest();
				}

				task ("View the pageViewed event triggered") {
					ACUtils.assertEventPresent(
						applicationId = "Page",
						eventId = "pageViewed");
				}
			}
		}

		task ("Go to instance settings > Analytics Cloud > Properties") {
			ACDXPSettings.goToInstanceSettingsAC();

			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Deselect the sites that were selected before") {
			for (var site : list "Site Name,Minium Demo") {
				ACDXPSettings.syncSites(
					propertyName = ${assignedPropertyName},
					siteName = ${site});
			}
		}

		task ("Go to the sites and assert that the events are not being sent") {
			for (var siteName : list "Site Name,Minium Demo") {
				task ("Go to the site page") {
					ApplicationsMenu.gotoSite(site = ${siteName});
				}

				task ("Start Har recording") {
					ProxyUtil.startHarRecording("pageEvents");
				}

				task ("Refresh the page") {
					Refresh();
				}

				task ("Wait for sending requests") {
					ACUtils.waitForSendingRequest();
				}

				task ("View that the pageViewed event is not triggered") {
					ACUtils.assertEventNotPresent(
						applicationId = "Page",
						eventId = "pageViewed");
				}
			}
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12576 | Test Summary: Check that it is possible to enable toggle commerce for two different properties"
	@priority = 5
	test CheckIsPossibleEnableToggleCommerceForTwoDifferentProperties {
		var newPropertyName = "AC Channel Property";

		task ("Create a new channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "AC Channel 1",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = ${assignedPropertyName});
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = ${assignedPropertyName},
				siteName = "Minium Demo");
		}

		task ("Create new property and Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "AC Channel 1",
				newPropertyName = ${newPropertyName});
		}

		task ("Assign sites to the new property") {
			ACDXPSettings.syncSites(
				propertyName = ${newPropertyName},
				siteName = "Site Name");
		}

		task ("Check that the number of channels and sites matches the selected ones for the last property") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = ${newPropertyName},
				syncedChannelsNumber = 1,
				syncedSitesNumber = 1);
		}

		task ("Check that the number of channels and sites matches the selected ones for the first property") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = ${assignedPropertyName},
				syncedChannelsNumber = 1,
				syncedSitesNumber = 1);
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12577 | Test Summary: Check that a site and a channel can only be selected for a single property"
	@priority = 4
	test CheckSiteAndChannelOnlyBeSelectedForSingleProperty {
		var newPropertyName = "AC Single Property";
		var channelName = "Minium Demo Portal";
		var siteName = "Minium Demo";

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = ${channelName},
				propertyName = ${assignedPropertyName});
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(
				propertyName = ${assignedPropertyName},
				siteName = ${siteName});
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = ${assignedPropertyName},
				syncedChannelsNumber = 1,
				syncedSitesNumber = 1);
		}

		task ("Create new property") {
			ACDXPSettings.createNewProperty(newPropertyNameList = ${newPropertyName});
		}

		task ("Toggle Commerce On > Assign channels to the new property and check that channels already used in another property are not available") {
			Check.checkToggleSwitch(
				key_propertyName = ${newPropertyName},
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${newPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");

			ACDXPSettings.searchACItemInAssignModal(searchItem = ${channelName});

			AssertElementPresent(
				key_selectedName = ${channelName},
				locator1 = "ACDXPSettings#CHECKBOX_NOT_AVAILABLE_TO_SELECT");
		}

		task ("Assign sites to the new property and check that sites already used in another property are not available") {
			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${newPropertyName});

			ACDXPSettings.switchTab(tabName = "Sites");

			ACDXPSettings.searchACItemInAssignModal(searchItem = ${siteName});

			AssertElementPresent(
				key_selectedName = ${siteName},
				locator1 = "ACDXPSettings#CHECKBOX_NOT_AVAILABLE_TO_SELECT");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12580 | Test Summary: Check that it is possible to make pagination in the channels and sites tabs on assigned property modal"
	@priority = 3
	test MakePaginationInChannelsAndSitesTabsOnAssignedPropertyModal {
		var firstChannelsPageList = "AC Sort Channel 1,AC Sort Channel 2,AC Sort Channel 3,AC Sort Channel 4,AC Sort Channel 5";
		var secondChannelsPageList = "Minium Demo Portal";
		var firstSitesPageList = "AC Site 1,AC Site 2,AC Site 3,Liferay DXP,Minium Demo";
		var secondSitesPageList = "Site Name";

		task ("Create five new channels") {
			for (var channelName : list ${firstChannelsPageList}) {
				CommerceJSONChannelsAPI._addChannel(
					channelName = ${channelName},
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("Create four new sites") {
			for (var siteName : list "AC Site 1,AC Site 2,AC Site 3") {
				ACUtils.addSiteAndPage(siteName = ${siteName});
			}
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Click on the Assign button") {
			Check.checkToggleSwitch(
				key_propertyName = ${assignedPropertyName},
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Change the pagination to 5") {
			ACDXPSettings.changeAssignModalPagination(itemsPerPage = 5);

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}

		task ("Check that 5 channels appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstChannelsPageList});
		}

		task ("Click next page") {
			Click(locator1 = "ACDXPSettings#ASSIGN_MODAL_NEXT_PAGE");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 6 to 6 of 6 entries.");
		}

		task ("Check that 2 channels appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${secondChannelsPageList});
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Change the pagination to 5") {
			ACDXPSettings.changeAssignModalPagination(itemsPerPage = 5);

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}

		task ("Check that 5 sites appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstSitesPageList});
		}

		task ("Click next page") {
			Click(locator1 = "ACDXPSettings#ASSIGN_MODAL_NEXT_PAGE");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 6 to 6 of 6 entries.");
		}

		task ("Check that 2 sites appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${secondSitesPageList});
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Toggle Commerce On > Click on the Assign button") {
			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Change the pagination to 5") {
			ACDXPSettings.changeAssignModalPagination(itemsPerPage = 5);

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}

		task ("Check that 5 channels appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstChannelsPageList});
		}

		task ("Click next page") {
			Click(locator1 = "ACDXPSettings#ASSIGN_MODAL_NEXT_PAGE");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 6 to 6 of 6 entries.");
		}

		task ("Check that 2 channels appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${secondChannelsPageList});
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Change the pagination to 5") {
			ACDXPSettings.changeAssignModalPagination(itemsPerPage = 5);

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}

		task ("Check that 5 sites appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstSitesPageList});
		}

		task ("Click next page") {
			Click(locator1 = "ACDXPSettings#ASSIGN_MODAL_NEXT_PAGE");

			ACDXPSettings.viewAssignModalResultsMessage(results = "Showing 6 to 6 of 6 entries.");
		}

		task ("Check that 2 sites appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${secondSitesPageList});
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12575 | Test Summary: Assert number of sites counts match selected sites when the commerce toggle is disabled"
	@priority = 3
	test SelectedSiteNumberCorrectWhenCommerceToggleDisabled {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Assign sites to the property") {
			ACDXPSettings.syncSites(propertyName = ${assignedPropertyName});
		}

		task ("Check that the number of sites matches the selected ones and the number of channels is equal to -") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = ${assignedPropertyName},
				syncedChannelsNumber = "-",
				syncedSitesNumber = 3);
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12574 | Test Summary: Assert number of channels and sites counts match selected channels and sites"
	@priority = 5
	test SelectedSitesAndChannelsNumbersCorrectAfterSync {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Assign channels to the property") {
			ACDXPSettings.syncChannel(
				channelName = "Minium Demo Portal",
				propertyName = ${assignedPropertyName});
		}

		task ("Assign sites to the property") {
			for (var siteName : list "Site Name, Minium Demo") {
				ACDXPSettings.syncSites(
					propertyName = ${assignedPropertyName},
					siteName = ${siteName});
			}
		}

		task ("Check that the number of channels and sites matches the selected ones") {
			ACDXPSettings.viewSyncedChannelsAndSitesNumber(
				propertyName = ${assignedPropertyName},
				syncedChannelsNumber = 1,
				syncedSitesNumber = 2);
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12581 | Test Summary: Check that it is possible to sort by name in the channels and sites tab on assigned property modal"
	@priority = 3
	test SortInChannelsAndSitesTabOnAssignedPropertyModal {
		var channelsPageListUp = "AC Sort Channels,DXP Sort Channels,Minium Demo Portal";
		var channelsPageListDown = "Minium Demo Portal,DXP Sort Channels,AC Sort Channels";
		var sitesPageListUp = "Liferay DXP,Minium Demo,Site Name";
		var sitesPageListDown = "Site Name,Minium Demo,Liferay DXP";

		task ("Create two new channels") {
			for (var channelName : list "AC Sort Channels,DXP Sort Channels") {
				CommerceJSONChannelsAPI._addChannel(
					channelName = ${channelName},
					channelType = "site",
					currencyCode = "USD");
			}
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Toggle Commerce On > Click on the Assign button") {
			Check.checkToggleSwitch(
				key_propertyName = ${assignedPropertyName},
				locator1 = "ACDXPSettings#COMMERCE_PROPERTY_TOGGLE");

			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Sort the list by the Channel Name column (Ascending)") {
			ACDXPSettings.setFilterAndOrderInAssignModal(orderBy = "Channel Name");

			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${channelsPageListUp});
		}

		task ("Sort the list by the Channel Name column (Descending)") {
			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${channelsPageListDown});
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Sort the list by the Site Name column (Ascending)") {
			ACDXPSettings.setFilterAndOrderInAssignModal(orderBy = "Site Name");

			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListUp});
		}

		task ("Sort the list by the Site Name column (Descending)") {
			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListDown});
		}

		task ("Sort the list by the Friendly URL column (Ascending)") {
			ACDXPSettings.setFilterAndOrderInAssignModal(orderBy = "Friendly URL");

			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListUp});
		}

		task ("Sort the list by the Friendly URL column (Descending)") {
			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListDown});
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Click on the Assign button") {
			ACDXPSettings.clickToAssignSitesAndChannel(propertyName = ${assignedPropertyName});

			ACDXPSettings.switchTab(tabName = "Channel");
		}

		task ("Sort the list by the Channel Name column (Ascending)") {
			ACDXPSettings.setFilterAndOrderInAssignModal(orderBy = "Channel Name");

			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${channelsPageListUp});
		}

		task ("Sort the list by the Channel Name column (Descending)") {
			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${channelsPageListDown});
		}

		task ("Switch to Sites tab") {
			ACDXPSettings.switchTab(tabName = "Sites");
		}

		task ("Sort the list by the Site Name column (Ascending)") {
			ACDXPSettings.setFilterAndOrderInAssignModal(orderBy = "Site Name");

			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListUp});
		}

		task ("Sort the list by the Site Name column (Descending)") {
			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListDown});
		}

		task ("Sort the list by the Friendly URL column (Ascending)") {
			ACDXPSettings.setFilterAndOrderInAssignModal(orderBy = "Friendly URL");

			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListUp});
		}

		task ("Sort the list by the Friendly URL column (Descending)") {
			ACDXPSettings.setSortDirectionInAssignModal(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewAssignModalListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${sitesPageListDown});
		}
	}

}