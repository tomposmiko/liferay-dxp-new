@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();
	}

	tearDown {
		BlogPostingAPI.deleteAllBlogPostings();
	}

	@disable-webdriver = "true"
	@priority = "5"
	test CanCreateBaseCommentWithBatchPostCreateStrategyInsert {
		property portal.acceptance = "true";

		task ("Given a blogPosting created") {
			var blogPostingId = BlogPostingAPI.getIdOfCreatedBlogPosting(
				articleBody = "myArticleBody",
				headline = "headline of my blog posting");
		}

		task ("And Given I use POST headless-delivery/v1.0/blog-postings/{blogPostingId}/comments/batch?createStrategy=INSERT to create two base comments") {
			var importTaskId = CommentAPI.getIdOfCreateNCommentsInBlogPostingBatchEngineImportTask(
				blogPostingId = "${blogPostingId}",
				createStrategy = "INSERT",
				numberOfCommentsToCreate = "2");
		}

		task ("When I check the status of the task with its id in the batch engine") {
			var executeStatus = ImportTask.getStatusOfImportTaskById(importTaskId = "${importTaskId}");
		}

		task ("Then I receive executeStatus: completed") {
			TestUtils.assertEquals(
				actual = "${executeStatus}",
				expected = "COMPLETED");
		}

		task ("And Then the blog comments are created properly") {
			var blogCommentsText = CommentAPI.getBlogCommentsText(blogPostingId = "${blogPostingId}");

			TestUtils.assertEquals(
				actual = "${blogCommentsText}",
				expected = "<p>commentText1</p>,<p>commentText2</p>");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CannotCreateTwoSameBlogPostingsWithBatchPostCreateStrategyInsert {
		property portal.acceptance = "true";

		task ("Given I use POST with parameter createStrategy set to INSERT to create two blog posts") {
			BlogPostingAPI.getIdOfCreateNBlogPostingBatchEngineImportTask(
				createStrategy = "INSERT",
				numberOfBlogPostingsToCreate = "2");
		}

		task ("And Given I repeat the same request again changing the headline") {
			var importTaskId = BlogPostingAPI.getIdOfCreateNBlogPostingBatchEngineImportTask(
				createStrategy = "INSERT",
				hadline = "new headline",
				numberOfBlogPostingsToCreate = "2");
		}

		task ("When I check the status of the task with its id in batch engine") {
			var executeStatus = ImportTask.getStatusOfImportTaskById(importTaskId = "${importTaskId}");
		}

		task ("Then I receive executeStatus: FAILED") {
			TestUtils.assertEquals(
				actual = "${executeStatus}",
				expected = "FAILED");
		}
	}

	@disable-webdriver = "true"
	@priority = "4"
	test CannotCreateTwoSameBlogPostingsWithBatchPostCreateStrategyInsertWhenOneOfThemAlreadyExisting {
		property portal.acceptance = "true";

		task ("Given I use POST with parameter createStrategy set to INSERT to create two blog posts") {
			BlogPostingAPI.getIdOfCreateNBlogPostingBatchEngineImportTask(
				createStrategy = "INSERT",
				numberOfBlogPostingsToCreate = "2");
		}

		task ("And Given I repeat the same request again changing all the data of second comment") {
			var importTaskId = BlogPostingAPI.getIdOfCreateNBlogPostingBatchEngineImportTask(
				createStrategy = "INSERT",
				numberOfBlogPostingsToCreate = "2",
				testCase = "LPS-157601");
		}

		task ("When I check the status of the task with its id in batch engine") {
			var executeStatus = ImportTask.getStatusOfImportTaskById(importTaskId = "${importTaskId}");
		}

		task ("Then I receive executeStatus: FAILED") {
			TestUtils.assertEquals(
				actual = "${executeStatus}",
				expected = "FAILED");
		}
	}

}