@component-name = "portal-wcm"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Page Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});
	static var randomUserEmailAddress = StringUtil.randomString(8);
	var userFirstName = StringUtil.randomString(8);
	var userLastName = StringUtil.randomString(8);
	var userScreenName = StringUtil.randomString(8);
	static var randomRoleKey = StringUtil.randomString(8);

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"),
				userFirstName = ${userFirstName},
				userLastName = ${userLastName},
				userScreenName = StringUtil.toLowerCase(${userScreenName}));

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a new site role") {
			JSONRole.addSiteRole(
				roleKey = ${randomRoleKey},
				roleTitle = ${randomRoleKey});
		}

		task ("Define the permissions of new site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com.liferay.portal.kernel.model.Layout,UPDATE,UPDATE_LAYOUT_CONTENT,VIEW:com_liferay_layout_admin_web_portlet_GroupPagesPortlet,ACCESS_IN_CONTROL_PANEL,VIEW:com.liferay.layout.seo,VIEW:com.liferay.portal.kernel.model.Group,VIEW_SITE_ADMINISTRATION",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign site role to new user") {
			JSONGroup.assignGroupRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a content page with Heading fragment") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("Enable Single Approver for Content Page") {
			Workflow.openWorkflowAdmin(siteURLKey = StringUtil.toLowerCase(${randomSiteName}));

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Content Page");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Edit inline text of Heading fragment then submit for application") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "text",
				text = "New editable fragment text");

			PageEditor.submitForWorkflow();
		}

		task ("View pending status is shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");
		}
	}

	@description = "This is a test for LPS-98384. Assert the modification won't be shown in content page for guests until approve."
	@priority = 3
	test CannotViewModificationUntilApproveAsGuest {
		task ("View guests can not view modification before approve") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("Approve latest modification") {
			User.loginPG(userEmailAddress = "test@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			Workflow.assignToMeTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Review");

			Workflow.approveTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Review");
		}

		task ("View pending status is not shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			AssertElementNotPresent(
				index = 2,
				key_itemName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_PAGE_STATUS");
		}

		task ("View modification is shown to guest after approve") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "New editable fragment text");
		}
	}

	@description = "This is a test for LPS-98384. The page author can edit content page after reject or approve."
	@priority = 3
	test EditContentPageAfterRejectOrApproveAsPageAuthor {
		task ("Reviewer rejects the request of modification") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			Workflow.assignToMeTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Review");

			Workflow.rejectTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Review");
		}

		task ("View page author can edit page at view mode after rejected") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");
		}

		task ("View pending status is shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");
		}

		task ("View edit action is shown in Pages admin") {
			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewVisible(menuItem = "Edit");
		}

		task ("Edit Heading fragment") {
			MenuItem.click(menuItem = "Edit");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "text",
				text = "Modified text");
		}

		task ("View page author can preview the modification") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewVisible(menuItem = "Preview");

			MenuItem.click(menuItem = "Preview");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Modified text");
		}

		task ("Resubmit the request after modification") {
			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			Workflow.resubmitTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Update");
		}

		task ("View reviewer can preview the modification") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewVisible(menuItem = "Preview");

			MenuItem.click(menuItem = "Preview");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Modified text");
		}

		task ("Reviewer approve the request of modification") {
			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			Workflow.assignToMeTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Review");

			Workflow.approveTaskByActions(
				workflowAssetTitle = "Test Page Name",
				workflowAssetType = "Content Page",
				workflowTask = "Review");
		}

		task ("View peding status is not shown as page author") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			AssertElementNotPresent(
				index = 2,
				key_itemName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_PAGE_STATUS");
		}

		task ("View preview action is not shown and edit is shown in Pages Admin") {
			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewNotPresent(menuItem = "Preview");

			MenuItem.viewVisible(menuItem = "Edit");
		}

		task ("View page author can edit after approve") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");

			ContentPages.gotoPageEditor();

			PageEditor.viewFragmentEditableText(
				editableText = "Modified text",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "text",
				text = "New modified text");

			PageEditor.submitForWorkflow();
		}
	}

	@description = "This is a test for LPS-98384. The reviewer can edit the content page and preview the modification after submit."
	@priority = 5
	test PreviewModificationAndEditAfterSubmitAsReviewer {
		property portal.acceptance = "true";

		task ("View reviewer can preview modification of content page") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewVisible(menuItem = "Preview");

			MenuItem.click(menuItem = "Preview");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("View reviewer can edit after submit") {
			AssertVisible(locator1 = "Icon#EDIT_PENCIL");

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewVisible(menuItem = "Edit");

			MenuItem.click(menuItem = "Edit");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "text",
				text = "Modified text");

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.click(menuItem = "Preview");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Modified text");
		}
	}

	@description = "This is a test for LPS-98384. The page author can not edit again after submit but can preview the modification."
	@priority = 5
	test PreviewModificationButCannotEditAfterSubmitAsPageAuthor {
		property portal.acceptance = "true";

		task ("View the Heading fragment still displays original text for public") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("View page author can not edit again after submit") {
			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.viewPageStatus(
				index = 2,
				pageName = "Test Page Name",
				status = "Pending");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewNotPresent(menuItem = "Edit");
		}

		task ("View page author can preview modification of content page") {
			MenuItem.viewVisible(menuItem = "Preview");

			MenuItem.click(menuItem = "Preview");

			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "New editable fragment text");
		}
	}

}