@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.modules.includes = "frontend-taglib-clay-sample-web";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Clay";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given Clay Sample Portlet") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page",
				layoutTemplate = "1 Column");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page",
				widgetName = "Clay Sample");

			Navigator.gotoPage(pageName = "Clay Sample Test Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page");
		}
	}

	@description = "Verify alert contains all required attributes: icon, type text, and description"
	@priority = 5
	test CanDisplayAllAttributes {
		task ("When the alert contains all attributes") {
			VerifyElementPresent(
				key_alertType = "success",
				locator1 = "ClayAlert#ALERT_STATIC");
		}

		task ("Then the alert displays status icon") {
			AssertElementPresent(
				key_alertType = "success",
				key_icon = "check-circle-full",
				locator1 = "ClayAlert#ALERT_STATIC_ICON");
		}

		task ("And displays type text") {
			AssertElementPresent(
				key_alertBold = "Success",
				key_alertType = "success",
				locator1 = "ClayAlert#ALERT_STATIC_BOLD");
		}

		task ("And displays description text") {
			AssertTextEquals(
				key_alertType = "success",
				locator1 = "ClayAlert#ALERT_STATIC",
				value1 = "Success:This is a success message.");
		}
	}

	@description = "Verify the keyword is semi-bold when alert contains status icon and keyword"
	@priority = 4
	test KeywordCanDisplayInSemibold {
		task ("When alert contains status icon and keyword") {
			AssertTextEquals(
				key_alertType = "success",
				locator1 = "ClayAlert#ALERT_STATIC",
				value1 = "Success:This is a success message.");

			VerifyElementPresent(
				key_alertType = "success",
				key_icon = "check-circle-full",
				locator1 = "ClayAlert#ALERT_STATIC_ICON");
		}

		task ("Then keyword must be semi-bold") {
			AssertCssValue(
				key_alertType = "success",
				locator1 = "ClayAlert#ALERT_STATIC",
				locator2 = "font-weight",
				value1 = 400);
		}
	}

	@description = "Verify toast message popup can be closed manually"
	@priority = 3
	@refactordone
	test ToastMessageCanBeClosedManually {
		property test.name.skip.portal.instance = "ClayAlert#ToastMessageCanBeClosedManually";

		var portalURL = PropsUtil.get("portal.url");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Frontend SPA Infrastructure",
			configurationScope = "System Scope");

		SystemSettings.saveConfiguration();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");
	}

	@description = "Verify toast message popup will close automatically"
	@priority = 4
	@refactordone
	test ToastMessageCanCloseAutomatically {
		property test.name.skip.portal.instance = "ClayAlert#ToastMessageCanCloseAutomatically";

		var portalURL = PropsUtil.get("portal.url");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Frontend SPA Infrastructure",
			configurationScope = "System Scope");

		if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
		else {
			Button.clickUpdate();
		}

		VerifyElementPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		takeScreenshot();

		WaitForElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		takeScreenshot();

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");
	}

}