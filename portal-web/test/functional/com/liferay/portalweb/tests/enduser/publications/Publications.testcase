@component-name = "portal-publications"
definition {

	property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Settings");

		Publications.enablePublications();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ApplicationsMenu.gotoPortlet(
				category = "Publications",
				panel = "Applications",
				portlet = "Settings");

			Publications.disablePublications();
		}
	}

	@description = "Assert user can add/delete/publish publication with all permissions of Publications, can't add/publish a new publicaiton without add/publish publication permission."
	@priority = 5
	test AllowPublicationsPermissionUserToAddAndPublishPublications {

		// Wrokaround LPS-127348

		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";

		JSONRole.addRegularRole(
			roleKey = "Publications Role",
			roleTitle = "Publications Role");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com_liferay_change_tracking_web_portlet_PublicationsPortlet",
				roleTitle = "Publications Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = 90,
			roleTitle = "Publications Role");

		for (var resourceActionIndex : list "ADD_PUBLICATION,PERMISSIONS") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.change.tracking",
				roleTitle = "Publications Role");
		}

		for (var resourceActionIndex : list "DELETE,PERMISSIONS,PUBLISH,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.change.tracking.model.CTCollection",
				roleTitle = "Publications Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Publications Role",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		Publications.createNewPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Publications.gotoPublish(
			gotoManagePublications = "true",
			publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Publications.createNewPublication(
			gotoManagePublications = "true",
			publicationName = "Publication Name 2");

		AssertTextPresent(
			key_publicationName = "Publication Name 2",
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Publication Name 2");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Publications.deletePublication(publicationName = "Publication Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Permissions.removePermissionViaAPI(
			resourceAction = "ADD_PUBLICATION",
			resourceName = "com.liferay.change.tracking",
			roleTitle = "Publications Role");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		// Workaround LPS-130666

		/*Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

		AssertElementNotPresent(
			key_menuItem = "Create New Publication",
			locator1 = "MenuItem#ANY_MENU_ITEM");*/

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		AssertElementNotPresent(locator1 = "Button#PLUS");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Permissions.removePermissionViaAPI(
			resourceAction = "PUBLISH",
			resourceName = "com.liferay.change.tracking.model.CTCollection",
			roleTitle = "Publications Role");

		Publications.createNewPublication(publicationName = "Publication Name 3");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 3",
			groupName = "Guest",
			title = "WC WebContent Title 3");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Click(
			key_publicationName = "Publication Name 3",
			locator1 = "Publications#LIST_PUBLICATION_ELLIPSIS");

		AssertElementNotPresent(
			key_menuItem = "Publish",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		Publications.selectPublication(publicationName = "Publication Name 3");

		Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

		AssertElementNotPresent(
			key_menuItem = "Publish",
			locator1 = "MenuItem#ANY_MENU_ITEM");
	}

	@description = "Assert Non-privileged user cannot see Publications bar."
	@priority = 5
	test AssertNonPrivilegedUserCannotSeePublicationsBar {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Power User",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");
	}

	@description = "This is the use case for LPS-183473."
	@priority = 4
	test CannotEmptyRecycleBinWithinPublication {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

		LexiconTable.viewTableEntryTitle(tableEntry = "WC WebContent Title");

		LexiconTable.viewTableEntryText(
			tableEntry = "WC WebContent Title",
			tableEntryText = "Web Content Article");

		Click.waitForMenuToggleJSClick(
			key_tableEntry = "WC WebContent Title",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "Delete");
	}

	@priority = 5
	test ConflictingPublicationsAutomaticallyResolved {

		// Wrokaround LPS-127348

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content 1 Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title");

		Publications.createNewPublication(publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content 2 Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Navigator.gotoNavTab(navTab = "Ongoing");

		Publications.assertDiscardIsUnavailableForInactivePublication(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title",
			publicationName = "Publication Name");

		Publications.gotoPublish(publicationName = "Publication 2 Name");

		Publications.publishPublication(publicationName = "Publication 2 Name");

		Publications.selectPublication(publicationName = "Publication Name");

		Publications.gotoPublish(
			gotoManagePublications = "true",
			publicationName = "Publication Name");

		Publications.viewAutomaticallyResolved(
			entryTitle = "Test Test added a Web Content Article",
			successMessage = "The article version was updated to latest.");

		Publications.viewAutomaticallyResolved(
			entryTitle = "Test Test modified a Asset",
			successMessage = "The conflict was automatically resolved.");

		AssertElementNotPresent(locator1 = "Publications#NEEDS_MANUAL_RESOLUTION_TABLE");

		AssertElementNotPresent(
			key_warningMessage = "The conflict cannot be automatically resolved.",
			locator1 = "Message#WARNING_SPECIFIC");

		Publications.publishPublication(publicationName = "Publication Name");
	}

	@priority = 5
	test ConflictingPublicationsNeedManualResolution {

		// Wrokaround LPS-129546

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.acceptance = "true";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.deleteCP(
			siteURLKey = "Guest",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Publications.createNewPublication(publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content 2 Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title 2 Edit");

		Publications.selectPublication(
			gotoManagePublications = "true",
			publicationName = "Publication Name");

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title",
			changeType = "Deleted",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaContextStyle(
			changeCategory = "Web Content Article",
			changeDescription = "Test Test deleted a Web Content Article in Guest",
			changeTitle = "WC WebContent Title");

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Publications.selectPublication(
			gotoManagePublications = "true",
			publicationName = "Publication 2 Name");

		Navigator.gotoNavTab(navTab = "History");

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title",
			changeType = "Deleted",
			changeUser = "Test Test",
			publishedPublication = "true");

		Publications.gotoReviewChanges();

		PublicationsChanges.viewChangesViaChangesStyle(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title 2 Edit",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesViaContextStyle(
			changeCategory = "Web Content Article",
			changeDescription = "Test Test added a Web Content Article in Guest",
			changeTitle = "WC WebContent Title 2 Edit");

		Publications.gotoPublish(publicationName = "Publication 2 Name");

		Publications.viewNeedsManualResolution(
			entryTitle = "WC WebContent Title 2 Edit",
			warningMessage = "Modification conflicts with a deletion.");

		Publications.gotoViewDiffInConflictingPublications(entryTitle = "WC WebContent Title 2 Edit");

		Publications.viewPublicationsDiff(
			columnName = "Title",
			columnValueInPublication = "WC WebContent Title 2 Edit",
			entryTitle = "WC WebContent Title 2 Edit",
			publicationName = "Publication 2 Name");

		Publications.viewPublicationsDiff(
			columnName = "ct-collection-id",
			columnValueInPublication = 2,
			entryTitle = "WC WebContent Title 2 Edit",
			publicationName = "Publication 2 Name");

		IFrame.closeFrame();

		Pause(locator1 = 3000);

		Publications.discardChanges(
			changeCategory = "Asset",
			changeTitle = "WC WebContent Title 2 Edit",
			conflictingChanges = "true",
			entryTitle = "WC WebContent Title 2 Edit");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title 2 Edit");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title");

		Publications.gotoPublish(publicationName = "Publication 2 Name");

		Publications.publishPublication(publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@priority = 4
	test DiscardSubsetsofChangesInPublication {
		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		Publications.gotoReviewChanges();

		Publications.discardChanges(
			changeCategory = "Dynamic Data Mapping Structure",
			changeTitle = "WC Structure Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title 2 Edit");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		NavItem.gotoStructures();

		AssertElementNotPresent(
			key_ddlDataDefinitionName = "WC Structure Name",
			locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME");

		NavItem.gotoTemplates();

		AssertElementNotPresent(
			key_ddlTemplateName = "WC Template Name",
			locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_NAME");

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title 2 Edit");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		NavItem.gotoStructures();

		AssertElementNotPresent(
			key_ddlDataDefinitionName = "WC Structure Name",
			locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME");

		NavItem.gotoTemplates();

		AssertElementNotPresent(
			key_ddlTemplateName = "WC Template Name",
			locator1 = "DDMSelectTemplate#TEMPLATE_TABLE_NAME");
	}

	@priority = 5
	test PublishParallelPublications {

		// Wrokaround LPS-127348

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,solaris,suse,ubuntu,windows";
		property portal.acceptance = "true";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 1 Content",
			webContentTitle = "WC WebContent 1 Title");

		PortletEntry.publish();

		Publications.createNewPublication(publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 2 Content",
			webContentTitle = "WC WebContent 2 Title");

		PortletEntry.publish();

		Publications.gotoPublish(publicationName = "Publication 2 Name");

		Publications.publishPublication(publicationName = "Publication 2 Name");

		Publications.selectPublication(
			gotoManagePublications = "true",
			publicationName = "Publication Name");

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent 1 Title",
			locator1 = "WC#ENTRY_LIST_TITLE");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent 2 Title",
			locator1 = "WC#ENTRY_LIST_TITLE");
	}

	@priority = 5
	test RescheduleAndCancelScheduledPublication {

		// Wrokaround LPS-127348

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.acceptance = "true";

		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Publications.schedulePublication(publicationName = "Publication Name");

		Publications.schedulePublication(
			publicationName = "Publication Name",
			reschedule = "true");

		Publications.unschedulePublication(publicationName = "Publication Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No publication has been scheduled yet.");
	}

	@priority = 5
	test RevertPublicationAndPublishNow {

		// Wrokaround LPS-127348

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.acceptance = "true";

		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Publications.gotoPublish(publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		AssertTextPresent(
			key_publicationName = "Production",
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Production");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertElementPresent(
			key_webContentTitle = "Web Content Title",
			locator1 = "WC#ENTRY_LIST_TITLE");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Navigator.gotoNavTab(navTab = "History");

		Publications.revertPublication(
			publicationName = "Publication Name",
			publishNow = "true");

		Publications.publishPublication(publicationName = "Revert \"Publication Name\"");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@priority = 5
	test SchedulePublication {

		// Wrokaround LPS-127348

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";

		Publications.createNewPublication(publicationName = "Publication Name 1");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 1 Content",
			webContentTitle = "WC WebContent 1 Title");

		PortletEntry.publish();

		Publications.schedulePublication(publicationName = "Publication Name 1");

		Pause(locator1 = 240000);

		Publications.assertScheduledPublicationPublished(publicationName = "Publication Name 1");

		Publications.createNewPublication(publicationName = "Publication Name 2");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 2 Content",
			webContentTitle = "WC WebContent 2 Title");

		PortletEntry.publish();

		Publications.schedulePublication(
			gotoManagePublications = "true",
			publicationName = "Publication Name 2");

		Pause(locator1 = 240000);

		Publications.assertScheduledPublicationPublished(publicationName = "Publication Name 2");

		Publications.createNewPublication(publicationName = "Publication Name 3");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 3 Content",
			webContentTitle = "WC WebContent 3 Title");

		PortletEntry.publish();

		Publications.schedulePublication(
			gotoReviewChanges = "true",
			publicationName = "Publication Name 3");

		Pause(locator1 = 240000);

		Publications.assertScheduledPublicationPublished(publicationName = "Publication Name 3");
	}

	@priority = 5
	test SearchPublishedPublications {

		// Wrokaround LPS-127348

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";

		Publications.createNewPublication(publicationName = "Apple");

		Publications.createNewPublication(publicationName = "Banana");

		Publications.createNewPublication(publicationName = "Cherry");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Navigator.gotoNavTab(navTab = "Ongoing");

		for (var publicationName : list "Apple,Banana,Cherry") {
			Publications.search(publicationName = ${publicationName});
		}

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Cherry");

		Publications.gotoPublish(publicationName = "Cherry");

		Publications.publishPublication(publicationName = "Cherry");

		Publications.selectPublication(publicationName = "Banana");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Banana");

		Publications.gotoPublish(publicationName = "Banana");

		Publications.publishPublication(publicationName = "Banana");

		Publications.selectPublication(publicationName = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "Apple");

		Publications.gotoPublish(publicationName = "Apple");

		Publications.publishPublication(publicationName = "Apple");

		Navigator.gotoNavTab(navTab = "History");

		for (var publicationName : list "Apple,Banana,Cherry") {
			Publications.search(publicationName = ${publicationName});
		}
	}

	@description = "This is a test for LPS-148488. Can view Published Publications items pagination and order on History Tab."
	@priority = 4
	test ViewPublicationsHistoryItemsPaginationAndOrder {
		for (var count : list "1,2,3,4,5,6,7") {
			JSONPublications.addPublication(publicationName = "Publication Name ${count}");

			JSONPublications.selectPublication(publicationName = "Publication Name ${count}");

			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");

			JSONPublications.publishPublication(publicationName = "Publication Name ${count}");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Click(
			key_navBarTitle = "History",
			locator1 = "Publications#MANGE_PUBLICATIONS_NAVBAR_TITLE",
			value1 = "History");

		Publications.viewPublicationOrderInHistory(publicationList = "Publication Name 7,Publication Name 6,Publication Name 5,Publication Name 4,Publication Name 3,Publication Name 2,Publication Name 1");

		Pagination.viewResults(results = "Showing 1 to 7 of 7 entries.");

		Pagination.changePagination(itemsPerPage = 4);

		Pagination.viewResults(results = "Showing 1 to 4 of 7 entries.");

		Publications.viewPublicationOrderInHistory(
			paginationView = "true",
			publicationList = "Publication Name 7,Publication Name 6,Publication Name 5,Publication Name 4");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 5 to 7 of 7 entries.");

		Publications.viewPublicationOrderInHistory(
			paginationView = "true",
			publicationList = "Publication Name 3,Publication Name 2,Publication Name 1");
	}

}