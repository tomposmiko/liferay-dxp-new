@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Style Books";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is for LPS-116078. Can navigate to preview page via page preview info bar but not interact with preview page in style book editor."
	@priority = "4"
	test CanNavigateToPreviewPageViaPagePreviewInfoBarButNotAllowInteractWithPreviewPage {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");

			PageEditor.clickPublish();
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Add a Blogs portlet to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Blogs");
		}

		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Assert the content page is shown in preview iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(
				key_pageName = "Test Content Page Name",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_content = "Banner Title Example",
				key_element = "h1",
				key_id = "title",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT");
		}

		task ("Assert not allow interact with preview page") {
			AssertElementPresent(locator1 = "StyleBookEditor#CURSOR_NOT_ALLOWED");

			SelectFrameTop();
		}

		task ("Navigate to widget page via page preview info bar") {
			AssertTextEquals(
				locator1 = "StyleBookEditor#PAGE_PREVIEW_INFO_BAR_TOGGLE",
				value1 = "Test Content Page Name");

			StyleBooks.goToPageViaPagePreviewInfoBar(pageName = "Test Widget Page Name");

			Click(locator1 = "StyleBookEditor#PAGE_PREVIEW_INFO_BAR_TOGGLE");

			AssertTextEquals(
				locator1 = "StyleBookEditor#PAGE_PREVIEW_INFO_BAR_TOGGLE",
				value1 = "Test Widget Page Name");
		}

		task ("Assert the widget page is shown in preview iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");

			Portlet.viewTitle(portletName = "Blogs");
		}

		task ("Assert not allow interact with preview page") {
			AssertElementPresent(locator1 = "StyleBookEditor#CURSOR_NOT_ALLOWED");

			SelectFrameTop();
		}
	}

	@description = "This is for LPS-116078. Can not preview style book when there are no pages in site."
	@priority = "4"
	test CannotPreviewStyleBookWhenSiteWithoutPage {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Assert can not preview style book") {
			AssertElementNotPresent(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(locator1 = "StyleBookEditor#NO_PAGE_MESSAGE");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY");
		}
	}

	@description = "This is for LPS-121979 and LPS-120005. Change the configuration of page won't break the connection with its style book."
	@priority = "5"
	test ChangeConfigurationOfPageBasedOnStyleBook {
		property portal.acceptance = "true";

		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Edit the style book and Publish it") {
			StyleBooks.selectForm(formName = "Typography");

			StyleBooks.expandSection(sectionName = "Font Family");

			Type(
				key_fieldLabel = "Font Family Base",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "'Courier New'");

			StyleBooks.waitForAutoSave();

			StyleBooks.clickPublish();
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Change to the new style book via Page Design Options panel") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Navigator.gotoNavTab(navTab = "Style Book");

			AssertElementPresent(
				key_card = "Inherited from Master",
				locator1 = "Card#CARD_SELECTED");

			StyleBooks.selectStyleBookViaPageDesignOptions(styleBookName = "Test Style Book Name");

			var fontFamily = '''"Courier New"''';

			AssertCssValue(
				id = "element-text",
				key_fragmentName = "Paragraph",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "font-family",
				value1 = "${fontFamily}");

			PageEditor.clickPublish();
		}

		task ("Assert the style book applied to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				locator2 = "font-family",
				value1 = "${fontFamily}");
		}

		task ("Modify the page name") {
			Navigator.gotoEditPageViaControlMenu(pageName = "Test Page Name");

			Page.editName(pageNameEdit = "New Test Page Name");

			Alert.viewSuccessMessage();
		}

		task ("Assert the style book still applied to page in view mode") {
			Navigator.gotoBack();

			AssertCssValue(
				key_fragmentName = "paragraph",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				locator2 = "font-family",
				value1 = "${fontFamily}");
		}
	}

	@description = "This is for LPS-116106. Page Creator can change style book of content page via Look and Feel settings."
	@priority = "4"
	test ChangeStyleBookOfContentPageViaLookAndFeel {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Edit the style book and Publish it") {
			StyleBooks.selectForm(formName = "Buttons");

			StyleBooks.expandSection(sectionName = "Button Outline Secondary");

			Type(
				key_fieldLabel = "Color",
				key_groupLabel = "Button Outline Secondary",
				locator1 = "TextInput#GROUPED_TEXT_INPUT",
				value1 = "#00FF00");

			StyleBooks.waitForAutoSave();

			StyleBooks.selectForm(formName = "Typography");

			StyleBooks.expandSection(sectionName = "Headings");

			Type(
				key_fieldLabel = "Heading 5 Font Size",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "2rem");

			StyleBooks.waitForAutoSave();

			StyleBooks.clickPublish();
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Configure the Heading Level of Heading as H5") {
			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H5");

			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				headingLevel = "h5");
		}

		task ("Add a Button fragment below the Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Heading");
		}

		task ("Configure the Type of Heading as Button Outline Secondary") {
			PageEditor.gotoConfiguration(fragmentName = "Button");

			PageEditor.configureFragment(type = "Outline Secondary");

			PageEditor.viewFragmentStyle(
				fragmentName = "button",
				type = "outline-secondary");
		}

		task ("Change to the new style book via Look and Feel") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			AssertTextEquals(
				key_styleBookName = "Inherited",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Inherited");

			AssertClick(
				key_text = "Change Style Book",
				locator1 = "Button#ANY",
				value1 = "Change Style Book");

			StyleBooks.selectStyleBook(styleBookName = "Test Style Book Name");

			AssertTextEquals(
				key_styleBookName = "Test Style Book Name",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Test Style Book Name");

			Button.clickSave();

			Alert.viewSuccessMessage();

			Navigator.gotoBack();

			AssertCssValue(
				id = "link",
				key_fragmentName = "Button",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "color",
				value1 = "rgba(0, 255, 0, 1)");

			AssertCssValue(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "font-size",
				value1 = "32px");

			PageEditor.clickPublish();
		}

		task ("Assert the new style book is applied to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				key_content = "Go Somewhere",
				key_element = "a",
				key_id = "link",
				key_type = "link",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "color",
				value1 = "rgba(0, 255, 0, 1)");

			AssertCssValue(
				key_content = "Heading Example",
				key_element = "h5",
				key_id = "element-text",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "font-size",
				value1 = "32px");
		}

		task ("Change to default style book via Look and Feel") {
			ContentPages.clickPencil();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			AssertTextEquals(
				key_styleBookName = "Test Style Book Name",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Test Style Book Name");

			AssertClick(
				key_text = "Change Style Book",
				locator1 = "Button#ANY",
				value1 = "Change Style Book");

			StyleBooks.selectStyleBook(styleBookName = "Inherited from Master");

			AssertTextEquals(
				key_styleBookName = "Inherited from Master",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Inherited from Master");

			Button.clickSave();

			Alert.viewSuccessMessage();

			Navigator.gotoBack();

			AssertCssValue(
				id = "link",
				key_fragmentName = "Button",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "color",
				value1 = "rgba(107, 108, 126, 1)");

			AssertCssValue(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "font-size",
				value1 = "14px");

			PageEditor.clickPublish();
		}

		task ("Assert the default style book is applied to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				key_content = "Go Somewhere",
				key_element = "a",
				key_id = "link",
				key_type = "link",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "color",
				value1 = "rgba(107, 108, 126, 1)");

			AssertCssValue(
				key_content = "Heading Example",
				key_element = "h5",
				key_id = "element-text",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "font-size",
				value1 = "14px");
		}
	}

	@description = "This is for LPS-116106. Page Creator can change style book of widget page via Look and Feel settings."
	@priority = "4"
	test ChangeStyleBookOfWidgetPageViaLookAndFeel {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Edit the style book and Publish it") {
			StyleBooks.selectForm(formName = "Buttons");

			StyleBooks.expandSection(sectionName = "Button Primary");

			Type(
				key_fieldLabel = "Background Color",
				key_groupLabel = "Button Primary",
				locator1 = "TextInput#GROUPED_TEXT_INPUT",
				value1 = "#00FF00");

			StyleBooks.waitForAutoSave();

			Pause(locator1 = "3000");

			StyleBooks.expandSection(sectionName = "Button Secondary");

			Type(
				key_fieldLabel = "Color",
				key_groupLabel = "Button Secondary",
				locator1 = "TextInput#GROUPED_TEXT_INPUT",
				value1 = "#FF0000");

			StyleBooks.waitForAutoSave();

			StyleBooks.clickPublish();
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a Blogs portlet to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Blogs");
		}

		task ("Change to the new style book via Look and Feel") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(locator1 = "ControlMenu#EDIT_COG");

			Navigator.gotoNavTab(navTab = "Look and Feel");

			AssertTextEquals(
				key_styleBookName = "Inherited",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Inherited");

			AssertClick(
				key_text = "Change Style Book",
				locator1 = "Button#ANY",
				value1 = "Change Style Book");

			StyleBooks.selectStyleBook(styleBookName = "Test Style Book Name");

			AssertTextEquals(
				key_styleBookName = "Test Style Book Name",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Test Style Book Name");

			Button.clickSave();

			Alert.viewSuccessMessage();

			Navigator.gotoBack();

			AssertCssValue(
				key_text = "New Entry",
				locator1 = "Button#ANY",
				locator2 = "background-color",
				value1 = "rgba(0, 255, 0, 1)");

			AssertCssValue(
				key_text = "Subscribe",
				locator1 = "Button#ANY",
				locator2 = "color",
				value1 = "rgba(255, 0, 0, 1)");
		}

		task ("Change to default style book via Look and Feel") {
			Click(locator1 = "ControlMenu#EDIT_COG");

			Navigator.gotoNavTab(navTab = "Look and Feel");

			AssertTextEquals(
				key_styleBookName = "Test Style Book Name",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Test Style Book Name");

			AssertClick(
				key_text = "Change Style Book",
				locator1 = "Button#ANY",
				value1 = "Change Style Book");

			StyleBooks.selectStyleBook(styleBookName = "Inherited from Master");

			AssertTextEquals(
				key_styleBookName = "Inherited from Master",
				locator1 = "SitePagesEditPage#STYLE_BOOK_NAME",
				value1 = "Inherited from Master");

			Button.clickSave();

			Alert.viewSuccessMessage();

			Navigator.gotoBack();

			AssertCssValue(
				key_text = "New Entry",
				locator1 = "Button#ANY",
				locator2 = "background-color",
				value1 = "rgba(11, 95, 255, 1)");

			AssertCssValue(
				key_text = "Subscribe",
				locator1 = "Button#ANY",
				locator2 = "color",
				value1 = "rgba(107, 108, 126, 1)");
		}
	}

	@description = "This is for LPS-116078. Can preview the effect on page when edit the style book."
	@priority = "5"
	test PreviewTheEffectOnPageInStyleBookEditor {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");

			PageEditor.clickPublish();
		}

		task ("Add a style book") {
			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Style Books");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Assert the content page is shown in preview iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(
				key_pageName = "Test Page Name",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_content = "Banner Title Example",
				key_element = "h1",
				key_id = "title",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT");

			SelectFrameTop();
		}

		task ("Select Buttons in sidebar") {
			StyleBooks.selectForm(formName = "Buttons");
		}

		task ("Edit Background Color in Button Primary section") {
			StyleBooks.expandSection(sectionName = "Button Primary");

			Type(
				key_fieldLabel = "Background Color",
				key_groupLabel = "Button Primary",
				locator1 = "TextInput#GROUPED_TEXT_INPUT",
				value1 = "#FF0000");

			StyleBooks.waitForAutoSave();
		}

		task ("Select Typography in sidebar") {
			StyleBooks.selectForm(formName = "Typography");
		}

		task ("Edit Heading 1 Font Size in Headings section") {
			StyleBooks.expandSection(sectionName = "Headings");

			Type(
				key_fieldLabel = "Heading 1 Font Size",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "2rem");

			StyleBooks.waitForAutoSave();
		}

		task ("Preview the effect in page preivew iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertCssValue(
				key_content = "Go Somewhere",
				key_element = "a",
				key_id = "link",
				key_type = "link",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "background-color",
				value1 = "rgba(255, 0, 0, 1)");

			AssertCssValue(
				key_content = "Banner Title Example",
				key_element = "h1",
				key_id = "title",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "font-size",
				value1 = "32px");

			SelectFrameTop();

			StyleBooks.clickPublish();
		}

		task ("Assert the new style book in Style Books admin") {
			StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "Test Style Book Name");
		}
	}

}