@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "View web content is shown in Web Content Display after be added via content panel."
	@priority = 5
	test AddRecentContentViaContentPanel {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 1");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add the web content to page via Content tab of Add panel") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			WidgetPages.addRecentContent(assetTitle = "Web Content Title");
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Add a web content via content panel on a widget page."
	@priority = 4
	@uitest
	test AddWebContentViaContentPanel {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a web content via content panel") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WidgetPages.addNewContent(assetType = "Basic Web Content");

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View web content is shown in content panel") {
			WidgetPages.viewContentPanel(entryTitleList = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-173139. The page designer could see a tooltip for assets on the Content panel of widget page."
	@priority = 3
	test ViewAssetWithLongTitle {
		task ("Given a page deisgner displays a web content with long title") {
			HeadlessWebcontent.addBasicWebContent(
				content = "Lighthouse promises life coaching to help people realise their dreams. But an 18-month investigation by the BBC finds it takes over people'\''s lives, separates people from their loved ones and harasses its critics.",
				groupName = "Test Site Name",
				title = "Inside the life coaching cult that takes over lives");
		}

		task ("When the page designer navigates to the Content panel on the widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(locator1 = "ControlMenu#ADD");

			AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

			Navigator.gotoNavTab(navTab = "Content");
		}

		task ("Then the page designer could see the full title on the tooltip") {
			MouseOver.javaScriptFocus(
				key_entryTitle = "Inside the life coaching cult that takes over lives",
				locator1 = "ControlMenuAddPanel#ASSET_ENTRY");

			AssertVisible(
				key_content = "Inside the life coaching cult that takes over lives",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-142251. View widgets are rendered well after adding a web content via content panel."
	@priority = 4
	test ViewWidgetAfterAddWebContentViaContentPanel {
		task ("Add an IFrame and a Web Content Display to a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				column = 2,
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "IFrame");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a Home page as source URL in IFrame") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var baseURL = PropsUtil.get("portal.url");

			Portlet.gotoPortletOptions(
				portletName = "IFrame",
				portletOption = "Configuration");

			IFrame.addCP(sourceURL = ${baseURL});

			IFrame.closeFrame();
		}

		task ("Add the first web content via Web Content Display") {
			WebContentDisplayPortlet.add(
				webContentContent = "Web Content Content 1",
				webContentTitle = "Web Content Title 1");
		}

		task ("Add the second web content via content panel") {
			WidgetPages.addNewContent(assetType = "Basic Web Content");

			WebContent.addCP(
				webContentContent = "Web Content Content 2",
				webContentTitle = "Web Content Title 2");

			PortletEntry.publish();
		}

		task ("View the Home page shown in IFrame widget") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#IFRAME_PORTLET");

			Smoke.viewWelcomeContentPage();

			SelectFrameTop();
		}

		task ("View the first web content shown in Web Content Display widget") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content 1",
				webContentTitle = "Web Content Title 1");
		}
	}

}