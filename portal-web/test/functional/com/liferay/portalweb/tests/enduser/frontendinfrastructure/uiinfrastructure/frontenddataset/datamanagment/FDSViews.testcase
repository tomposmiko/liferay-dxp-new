@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Frontend Dataset";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given creating a Data Set via API") {
			FrontendDataSetAdmin.goToDatasetAdminPage();

			FrontendDataSetAdmin.createDatasetEntryViaAPI(
				datasetName = "Dataset Test",
				restApplication = "/c/fdsentries");

			Refresh();
		}

		task ("When go to the View page of the dataset created.") {
			FrontendDataSetAdmin.goToViews(dataSetName = "Dataset Test");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			FrontendDataSetAdmin.deleteAllDatasetEntries();
		}
	}

	@description = "LPS-181348. Confirm that a dataset view can be deleted"
	@priority = 5
	test AssertNumberOfCharactersExceededInNameField {
		task ("And Clicking add button") {
			LexiconEntry.gotoAdd();
		}

		task ("And a user types a name that is more than 280 characters") {
			Type(
				locator1 = "TextInput#NAME",
				value1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
		}

		task ("And Filling the description field with 'Test Description'") {
			Type(
				locator1 = "FrontendDataSetAdmin#NEW_DATA_SET_VIEW_DESCRIPTION",
				value1 = "Test Description");
		}

		task ("And Clicking Save button") {
			Button.clickSave();
		}

		task ("Then confirm the error alert is present") {
			Alert.viewErrorMessage(errorMessage = "Error:Your request failed to complete");
		}
	}

	@description = "LPS-181349. Confirm that description field is trunked if exceed 100 characters"
	@priority = 4
	test AssertNumberOfCharactersInDescriptionField {
		task ("When go to add View with name View Test and description with 150 characters") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor accumsan luctus. Praesent feugiat nibh a lectus hendrerit lobortis. Donec blandit.",
				key_name = "View Test");
		}

		task ("Then confirm the description value will be trunked") {
			FrontendDataSetAdmin.assertDataSetViewDescription(key_dataSetViewDescriptionList = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor accumsan luctus. Praesent feugiat nibh a lectus hendrerit lobortis. Donec blandit.");
		}
	}

	@description = "LPS-181347. Confirm that field is trunked if exceed 100 characters"
	@priority = 4
	test CanAssertNameFieldIsTrunkedIfExceedCharacters {
		task ("When Clicking add button, and a user types a name that is more than 100 characters until 280 characters, and Filling the description field with 'Test Description', and Clicking Save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_name = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer non tincidunt ipsum. Quisque in justo a nibh sagittis auctor non at quam. Nulla facilisi. Donec feugiat, sapien at cursus orci aliquam.");
		}

		task ("Then confirm the name value will be trunked") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer non tincidunt ipsum. Quisque in justo a nibh sagittis auctor non at quam. Nulla facilisi. Donec feugiat, sapien at cursus orci aliquam.");
		}
	}

	@description = "LPS-181340. Confirm that the name field is required for creating a view"
	@priority = 5
	test CanAssertNameIsRequired {
		task ("When Clicking add button") {
			LexiconEntry.gotoAdd();
		}

		task ("And Filling the description field with 'Test Description'") {
			Type(
				locator1 = "FrontendDataSetAdmin#NEW_DATA_SET_VIEW_DESCRIPTION",
				value1 = "Test Description");
		}

		task ("And When Click the Save button") {
			PortletEntry.save();
		}

		task ("Then Confirm that 'This field is required' alert messages are present in the provider field") {
			AssertTextPresent(
				locator1 = "Message#ERROR",
				value1 = "This field is required.");
		}
	}

	@description = "LPS-180899 Confirm that when adding several views, pagination is displayed correctly when placing as 4 items"
	@priority = 5
	test CanAssertPagination {
		task ("And Adding a 6 view called 'View Test 1', 'View Test 2'... and Filling the description field with 'Test Description'") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_dataSetViewNameList = "View Test 1,View Test 2,View Test 3,View Test 4,View Test 5,View Test 6");
		}

		task ("And Change the pagination to 4 items") {
			FrontendDataSetAdmin.changePagination(itemsPerPage = "4 Items");
		}

		task ("Then Confirm that 2 pages are shown") {
			AssertElementPresent(locator1 = "Pagination#NEXT_LINK");

			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test 1,View Test 2,View Test 3,View Test 4");

			Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
		}

		task ("When the user deletes two Views") {
			FrontendDataSetAdmin.deleteDataSetView(viewName = "View Test 1");

			FrontendDataSetAdmin.deleteDataSetView(viewName = "View Test 2");
		}

		task ("Then Confirm that only one page is displayed") {
			Pagination.viewResults(results = "Showing 1 to 4 of 4 entries.");
		}
	}

	@description = "LPS-181346. Confirm that pagination works right on views page"
	@priority = 3
	test CanAssertPaginationOnFDSViewsPage {
		task ("When Adding a 6 view called 'View Test 1', 'View Test 2'... and Filling the description field with 'Test Description'") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_dataSetViewNameList = "View Test 1,View Test 2,View Test 3,View Test 4,View Test 5,View Test 6");
		}

		task ("And changing the page to 4 entries.") {
			FrontendDataSetAdmin.changePagination(itemsPerPage = "4 Items");
		}

		task ("Then confirm that only 4 entries are displayed") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test 1,View Test 2,View Test 3,View Test 4");

			Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
		}

		task ("When to switch to page 2") {
			Click(locator1 = "Pagination#NEXT_LINK");
		}

		task ("Then 2 entries are displayed") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test 5,View Test 6");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
		}
	}

	@description = "LPS-180896 Confirm that the dataset view deletion is recoverable"
	@priority = 5
	test CanCancelDeletionOnCancelButton {
		task ("When Add a new view") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Description Test",
				key_name = "View Test");
		}

		task ("And select delete and in the modal, click the cancel button") {
			Click(
				key_name = "View Test",
				locator1 = "FrontendDataSetAdmin#DATA_SET_VIEW_ENTRY_KEBAB_MENU");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			Button.clickCancel();
		}

		task ("Then the dataset View is not deleted") {
			AssertElementPresent(
				key_itemName = "View Test",
				locator1 = "FrontendDataSetAdmin#NAME_OF_VIEWS");
		}
	}

	@description = "LPS-180898. Confirm that the user can cancel deletion when clicking close (X) button"
	@priority = 3
	test CanCancelDeletionOnCloseButton {
		task ("When Add a new view") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Description Test",
				key_name = "View Test");
		}

		task ("And The user tries to delete the view") {
			Click(
				key_name = "View Test",
				locator1 = "FrontendDataSetAdmin#DATA_SET_VIEW_ENTRY_KEBAB_MENU");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(
				key_modalText = "Deleting a dataset view is an action that cannot be reversed. The content will be deleted and some dataset fragments may not be displayed.",
				locator1 = "FrontendDataSetAdmin#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And When the user clicks on the 'X' button in the modal") {
			Click(
				key_modalTitle = "Delete Dataset View",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then The dataset is present in the data set Admin page") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test");
		}
	}

	@description = "LPS-181342. Confirm that the user can cancel a view criation by clicking on cancel button"
	@priority = 5
	test CanCancelViewCreationOnCancelButton {
		task ("When Add a view with the name 'View Test") {
			LexiconEntry.gotoAdd();

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Test Description");

			Type(
				locator1 = "FrontendDataSetAdmin#NEW_DATA_SET_VIEW_DESCRIPTION",
				value1 = "View Test");
		}

		task ("And Clicking Cancel button") {
			Button.clickCancel();
		}

		task ("Then Confirm that the View was not created") {
			AssertElementNotPresent(
				entryName = "View Test",
				locator1 = "FrontendDataSetAdmin#DATA_SET_VIEW_ENTRY_NAME");
		}
	}

	@description = "LPS-181354. Confirm that the user can create more than one view"
	@priority = 4
	test CanCreateMultipleViews {
		task ("When Adding a new view called "View Test" and the description field with "Test Description"") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_name = "View Test");
		}

		task ("And Adding a new view called "Bob Test" and the description field with "Bob Description"") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Bob Description",
				key_name = "Bob Test");
		}

		task ("Then Assert that the 2 views are created") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test");

			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "Bob Test");
		}
	}

	@description = "LPS-181339. Confirm that the user can create a view"
	@priority = 5
	test CanCreateView {
		task ("When Filling the name with 'View Test' And Clicking Save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_name = "View Test");
		}

		task ("Then Confirm the view name in View page as expected") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test");
		}

		task ("And Confirm the description is 'Test Description'") {
			FrontendDataSetAdmin.assertDataSetViewDescription(key_dataSetViewDescriptionList = "Test Description");
		}
	}

	@description = "LPS-181341. Confirm that The user can create a view with no description"
	@priority = 4
	test CanCreateViewWithNoDescription {
		task ("When Clicking add button, And Filling the name with 'View Test', And Clicking the Save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "",
				key_name = "View Test");
		}

		task ("Then Confirm Data set view was created") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test");
		}
	}

	@description = "LPS-180893. Confirm that a dataset view can be deleted"
	@priority = 5
	test CanDeleteView {
		task ("When Add a new view") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Description Test",
				key_name = "View Test");
		}

		task ("And the user deletes a View created") {
			FrontendDataSetAdmin.deleteDataSetView(viewName = "View Test");
		}

		task ("Then Confirm that the Success message should appear") {
			Alert.viewSuccessMessage();
		}

		task ("And The dataset View is not present in the data set View page") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "LPS-181344. Assert that the user can edit or delet view"
	@priority = 5
	test CanEditOrDeleteView {
		task ("When go to the View page of the dataset created, and click save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Description Test",
				key_name = "View Test");
		}

		task ("And Clicking the ellipsis button") {
			Click(
				key_name = "View Test",
				locator1 = "FrontendDataSetAdmin#DATA_SET_VIEW_ENTRY_KEBAB_MENU");
		}

		task ("Then confirm the options Edit and Delete are visible") {
			MenuItem.viewVisible(menuItem = "View");

			MenuItem.viewVisible(menuItem = "Delete");
		}
	}

	@description = "LPS-181343. Confirm that the user can edit a view"
	@priority = 5
	test CanEditView {
		task ("When go to the View page of the dataset created, and click save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Description Test",
				key_name = "View Test");
		}

		task ("When we edit the name and description of a view ") {
			FrontendDataSetAdmin.editView(
				key_newDescription = "Test Description edited",
				key_newName = "View Test edited",
				key_oldName = "View Test");
		}

		task ("Then The dataset is present in the data set Admin page") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View Test edited");

			FrontendDataSetAdmin.assertDataSetViewDescription(key_dataSetViewDescriptionList = "Test Description edited");
		}
	}

	@description = "LPS-181353. Confirm that the user can search a view by its description"
	@priority = 4
	test CanSearchViewByDescription {
		task ("When Adding a new view called 'View Test' and the description field with 'Test Description', And Clicking Save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_name = "View Test");
		}

		task ("And Adding a new view called 'Bob Test' and the description field with 'Bob Description'") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Bob Description",
				key_name = "Bob Test");
		}

		task ("And type 'Bob Description' in the search bar and click enter.") {
			Search.searchCP(searchTerm = "Bob Description");
		}

		task ("Then the corresponding view is displayed") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "Bob Test");
		}
	}

	@description = "LPS-181351. Confirm that the user can search a view by its name"
	@priority = 4
	test CanSearchViewByName {
		task ("When Adding a new view called 'View Test' and the description field with 'Test Description'") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_name = "View Test");
		}

		task ("And Adding a new view called 'Bob Test' and the description field with 'Bob Description'") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Bob Description",
				key_name = "Bob Test");
		}

		task ("And type 'View Test' in the search bar and click enter") {
			Search.searchCP(searchTerm = "View Test");
		}

		task ("Then the corresponding view is displayed") {
			AssertElementPresent(
				entryName = "View Test",
				locator1 = "FrontendDataSetAdmin#DATA_SET_VIEW_ENTRY_NAME");
		}
	}

	@description = "LPS-180895  Confirm that the view was really deleted"
	@priority = 5
	test CanUpdateNumberOfViews {
		task ("When Add a new view") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Description Test",
				key_name = "View Test");
		}

		task ("And back to the Datasets admin page") {
			Navigator.gotoBack();
		}

		task ("Then confirm that the views column shows 1 views") {
			AssertElementPresent(
				locator1 = "FrontendDataSetAdmin#NUMBER_OF_VIEWS",
				numberOfViews = 1);
		}

		task ("When go to View admin page") {
			Click(
				key_entry = "Test Dataset",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			Click(locator1 = "FrontendDataSetAdmin#VIEW_ENTRY_BUTTON");
		}

		task ("And the user deletes a View created") {
			FrontendDataSetAdmin.deleteDataSetView(viewName = "View Test");
		}

		task ("And back to the Datasets admin page") {
			Navigator.gotoBack();
		}

		task ("Then confirm that the views column shows 0 views") {
			AssertElementPresent(
				locator1 = "FrontendDataSetAdmin#NUMBER_OF_VIEWS",
				numberOfViews = 0);
		}
	}

	@description = "LPS-181350. Confirm that special characters are confirmed in the display name on the page "
	@priority = 4
	test CanUseSpecialCharactersInNameField {
		task ("When Clicking add button, and Filling the Name field with, and Clicking Save button") {
			FrontendDataSetAdmin.createDataSetView(
				description = "Test Description",
				key_name = "View ~!@#$%^&*(){}[],.<>/? name");
		}

		task ("And Confirm the view name in View page as expected") {
			FrontendDataSetAdmin.assertDataSetView(key_dataSetViewNameList = "View ~!@#$%^&*(){}[],.<>/? name");
		}

		task ("And Then Confirm the description is 'Test Description'") {
			FrontendDataSetAdmin.assertDataSetViewDescription(key_dataSetViewDescriptionList = "Test Description");
		}
	}

}