@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-75059. A user can add a link to a navigation menu."
	@priority = "4"
	test AddURLNavigationMenu {
		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			NavigationMenusAdmin.addMenu(menuName = "Test Navigation Menu Name");
		}

		task ("Add a URL item to the navigation menu") {
			NavigationMenusAdmin.addItem(
				item = "URL",
				url = "https://www.liferay.com/",
				urlName = "Liferay");
		}

		task ("Assert the URL item was added to the navigation menu") {
			NavigationMenusAdmin.viewItem(itemName = "Liferay");
		}

		task ("Navigate to the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Configure the Navigation Menu widget to use the navigation menu") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Test Navigation Menu Name");

			Portlet.saveAndCloseConfig();
		}

		task ("Assert the Navigation Menu widget has the URL item and the link works properly") {
			AssertClick(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE",
				value1 = "Liferay");

			AssertLocation(value1 = "https://www.liferay.com/");
		}
	}

	@description = "This is a test for LPS-76658. A user can edit the existing page items in a navigation menu."
	@priority = "5"
	test EditNavigationMenuPageItemName {
		property portal.acceptance = "true";

		task ("Add two pages to the site") {
			for (var index : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${index}");
			}
		}

		task ("Add a navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			NavigationMenusAdmin.addMenu(menuName = "Test Navigation Menu Name");
		}

		task ("Add the first page and second page to the navigation menu") {
			NavigationMenusAdmin.addItem(
				item = "Page",
				pageNames = "Test Page Name 1,Test Page Name 2");
		}

		task ("Navigate to navigation menus admin") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");
		}

		task ("Mark the navigation menu as Primary Navigation") {
			NavigationMenusAdmin.configureMenuType(
				menuType = "Primary Navigation",
				navigationMenu = "Test Navigation Menu Name");
		}

		task ("Navigate to edit the navigation menu") {
			LexiconEntry.gotoEntry(rowEntry = "Test Navigation Menu Name");
		}

		task ("Change the name of the second page in the navigation menu") {
			NavigationMenusAdmin.editItem(
				item = "Page",
				itemName = "Test Page Name 2",
				name = "Test Page Name 3");
		}

		task ("Assert the name of the second page was successfully changed") {
			NavigationMenusAdmin.viewItem(itemName = "Test Page Name 3");
		}

		task ("Navigate to the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");
		}

		task ("Configure the Navigation Menu widget to use Primary Navigation") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Primary Navigation");

			Portlet.saveAndCloseConfig();
		}

		task ("Assert the name of the second page was changed and clicking on the new page name navigates to the second page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 3",
				siteName = "Test Site Name");

			var portalURL = PropsUtil.get("portal.url");

			AssertLocation(value1 = "${portalURL}/web/test-site-name/test-page-name-2");
		}
	}

}