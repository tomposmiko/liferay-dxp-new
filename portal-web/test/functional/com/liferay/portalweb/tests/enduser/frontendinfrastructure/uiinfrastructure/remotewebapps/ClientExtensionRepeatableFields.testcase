definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Client Extensions";
	property testray.main.component.name = "Client Extensions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ClientExtensionGeneral.tearDown();

			Navigator.gotoPage(pageName = "Home");

			while (IsElementPresent(locator1 = "Navigation#ANY_SITE_NAV_BUT_HOME")) {
				var layoutName = selenium.getText("Navigation#ANY_SITE_NAV_BUT_HOME");

				JSONLayout.deletePublicLayout(
					groupName = "Guest",
					layoutName = ${layoutName});

				Navigator.gotoPage(pageName = "Home");

				PortalInstances.tearDownCP();
			}
		}
	}

	@description = "This is a test for LPS-164437. The JSON URL can be saved."
	@priority = 3
	test CanBeSaved {
		property portal.acceptance = "true";

		task ("Given Remote Application > Custom Elements create page") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();

			ClientExtensionGeneral.addType(type = "Custom Element");
		}

		task ("And Given required fields are filled out") {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Test App");

			Type(
				key_text = "HTML Element Name",
				locator1 = "TextInput#ANY",
				value1 = "html-element-name");
		}

		task ("When click repeatable button for JS URL and a new JS URL field is added") {
			ClientExtensionEntry.addURLRow();
		}

		task ("And When input valid value for JS URL 1 and JS URL 2") {
			Type(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 1,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
				value1 = "https://www.liferay.com/");

			Type(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 2,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
				value1 = "https://www.liferay.com/company/our-story");
		}

		task ("And When submit the remote app") {
			Button.clickPublish();
		}

		task ("Then the values for JS URLs are saved") {
			Click(locator1 = "//div[(@class='table-list-title')]");

			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 1,
				key_text = "https://www.liferay.com/",
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");

			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 2,
				key_text = "https://www.liferay.com/company/our-story",
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");
		}
	}

	@description = "This is a test for LPS-164436. The non-deleted field value can be retained."
	@priority = 3
	test CanRetainNonDeletedFieldValue {
		property portal.acceptance = "true";

		task ("Given Custom Element with two valid JS URLs") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();

			ClientExtensionGeneral.addType(type = "Custom Element");

			ClientExtensionEntry.addURLRow();

			Type(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 1,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
				value1 = "https://www.liferay.com/");

			Type(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 2,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
				value1 = "https://www.liferay.com/company/our-story");
		}

		task ("When delete first repeatable field") {
			ClientExtensionEntry.removeURLRow(key_index = 1);
		}

		task ("Then only 1 JS URL field is present") {
			AssertElementNotPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 2,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");

			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 1,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");
		}

		task ("And Then the JS URL value matches the 2nd JS URL value (prior to deletion)") {
			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 1,
				key_text = "https://www.liferay.com/company/our-story",
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");
		}

		task ("And Then repeatable button - (minus) is not present") {
			AssertNotVisible(
				key_index = 1,
				locator1 = "ClientExtensionEntry#REMOVE_URL_ROW");
		}
	}

	@description = "This is a test for LPS-164433. The JSON URL can be can be repeated."
	@priority = 3
	test CSSURLCanBeRepeated {
		property portal.acceptance = "true";

		task ("Given Remote Application > Custom Elements create page") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();

			ClientExtensionGeneral.addType(type = "Custom Element");
		}

		task ("When click repeatable button for CSS URL") {
			ClientExtensionEntry.addCSSURLRow();
		}

		task ("Then new CSS URL field is added") {
			AssertElementPresent(
				key_id = "cssURLs",
				key_index = 2,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");
		}

		task ("And Then repeatable button + and - are present for both CSS URL fields") {
			AssertElementPresent(
				key_fieldLabelName = "CSS URL",
				key_index = 1,
				locator1 = "ClientExtensionEntry#DELETE_ROW_FIELD_LABEL_NAME_INDEX");

			AssertElementPresent(
				key_fieldLabelName = "CSS URL",
				key_index = 1,
				locator1 = "ClientExtensionEntry#ADD_ROW_FIELD_LABEL_NAME_INDEX");

			AssertElementPresent(
				key_fieldLabelName = "CSS URL",
				key_index = 2,
				locator1 = "ClientExtensionEntry#DELETE_ROW_FIELD_LABEL_NAME_INDEX");

			AssertElementPresent(
				key_fieldLabelName = "CSS URL",
				key_index = 2,
				locator1 = "ClientExtensionEntry#ADD_ROW_FIELD_LABEL_NAME_INDEX");
		}
	}

	@description = "This is a test for LPS-164433. The JSON URL can be can be repeatably clicked."
	@priority = 3
	test JSURLCanBeRepeated {
		property portal.acceptance = "true";

		task ("Given Remote Application > Custom Elements create page") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();

			ClientExtensionGeneral.addType(type = "Custom Element");
		}

		task ("When click repeatable button for JS URL") {
			ClientExtensionEntry.addURLRow();
		}

		task ("Then new JS URL field is added") {
			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 2,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");
		}

		task ("And Then repeatable button + and - are present for both CSS URL fields") {
			AssertElementPresent(
				key_fieldLabelName = "JS URL",
				key_index = 1,
				locator1 = "ClientExtensionEntry#DELETE_ROW_FIELD_LABEL_NAME_INDEX");

			AssertElementPresent(
				key_fieldLabelName = "JS URL",
				key_index = 1,
				locator1 = "ClientExtensionEntry#ADD_ROW_FIELD_LABEL_NAME_INDEX");

			AssertElementPresent(
				key_fieldLabelName = "JS URL",
				key_index = 2,
				locator1 = "ClientExtensionEntry#DELETE_ROW_FIELD_LABEL_NAME_INDEX");

			AssertElementPresent(
				key_fieldLabelName = "JS URL",
				key_index = 2,
				locator1 = "ClientExtensionEntry#ADD_ROW_FIELD_LABEL_NAME_INDEX");
		}
	}

	@description = "This is a test for LPS-164435. The JSON URL can be can be repeatably clicked."
	@priority = 3
	test JSURLCanBeRepeatedMultipleTimes {
		property portal.acceptance = "true";

		task ("Given Remote Application > Custom Elements create page") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();

			ClientExtensionGeneral.addType(type = "Custom Element");
		}

		task ("When click repeatable button 3 times for JS URL") {
			ClientExtensionEntry.addURLRow();

			ClientExtensionEntry.addURLRow();

			ClientExtensionEntry.addURLRow();
		}

		task ("Then 3 new JS URL field are added") {
			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 2,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");

			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 3,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");

			AssertElementPresent(
				key_id = "ClientExtensionAdminPortlet_url",
				key_index = 4,
				locator1 = "ClientExtensionEntry#URL_ROW_INDEX");
		}
	}

}