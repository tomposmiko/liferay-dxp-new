@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "false";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create Blog to Add to Page") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8657 | Test Summary: Add a new breakdown by an attribute and assert that correct results appear"
	@priority = "5"
	test AddNewBreakdownByAttributeAndAssertCorrectResultsAppear {
		task ("View the blog page") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				emailList = "ac@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Individuals dashboard") {
			ACNavigation.goToIndividuals();
		}

		task ("Add a new breakdown") {
			ACSegments.addBreakdownByAttribute(
				attribute = "email",
				breakdownName = "Breakdown by Job Title");
		}

		task ("View the data in new breakdown") {
			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				tick = "ac@liferay.com");
		}

		task ("Remove the breakdown") {
			ACIndividualsDashboard.deleteBreakdown(breakdownName = "Breakdown by Email");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8997 | Test Summary: Distribution page can be filtered by a specific string"
	@priority = "5"
	test BreakdownByAttributeOnDistributionPage {
		task ("View the blog page") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				emailList = "ac@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Distribution tab of Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACNavigation.switchTab(tabName = "Distribution");
		}

		task ("Select the country in Breakdown by field") {
			ACSegments.selectDistributionByAttribute(attribute = "email");
		}

		task ("View the individual in chart") {
			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				tick = "ac@liferay.com- 100.0%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8658 | Test Summary: Delete a new breakdown"
	@priority = "5"
	test DeleteNewBreakdown {
		task ("View the blog page") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				emailList = "ac@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Data Source",
				sourceFileName = "jobTitle.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Navigate to the Individuals dashboard") {
			ACNavigation.goToIndividuals();
		}

		task ("Add a new breakdown") {
			ACSegments.addBreakdownByAttribute(
				attribute = "jobTitle",
				breakdownName = "Breakdown to Delete");
		}

		task ("Remove the new breakdown") {
			ACIndividualsDashboard.deleteBreakdown(breakdownName = "Breakdown to Delete");
		}

		task ("View the breakdown is deleted") {
			ACIndividualsDashboard.viewBreakdownNotPresent(breakdownName = "Breakdown to Delete");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9000 | Test Summary: As a Business User, I should be able to select different tabs in breakdown"
	@priority = "3"
	test SelectDifferentTabsInbreakdown {
		task ("View the blog page") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				emailList = "ac@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Individuals dashboard") {
			ACNavigation.goToIndividuals();
		}

		task ("Add the first breakdown") {
			ACSegments.addBreakdownByAttribute(
				attribute = "email",
				breakdownName = "Breakdown by Email");
		}

		task ("Add the second breakdown") {
			ACSegments.addBreakdownByAttribute(
				attribute = "familyName",
				breakdownName = "Breakdown by Family Name");
		}

		task ("Switch to the first breakdown") {
			ACIndividualsDashboard.clickBreakdownTab(breakdownName = "Breakdown by Email");

			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				tick = "ac@liferay.com");
		}

		task ("Switch to the second breakdown") {
			ACIndividualsDashboard.clickBreakdownTab(breakdownName = "Breakdown by Family Name");

			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				tick = "ac");
		}

		task ("Remove the breakdown") {
			ACIndividualsDashboard.deleteBreakdown(breakdownName = "Breakdown by Family Name");

			ACIndividualsDashboard.deleteBreakdown(breakdownName = "Breakdown by Email");
		}
	}

}