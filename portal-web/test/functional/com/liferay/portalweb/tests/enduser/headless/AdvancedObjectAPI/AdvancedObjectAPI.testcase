@component-name = "portal-headless-frontend-infrastructure"
@disable-webdriver = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		task ("Given active object definitions created") {
			var objectDefinitionId1 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Manager",
				en_US_plural_label = "Managers",
				name = "Manager",
				requiredStringFieldName = "firstname");
			var objectDefinitionId2 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Employee",
				en_US_plural_label = "Employees",
				name = "Employee",
				requiredStringFieldName = "firstname");
		}

		task ("Given a relationship between two object definitions created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "Supervisor",
				name = "supervisor",
				objectDefinitionId1 = "${objectDefinitionId1}",
				objectDefinitionId2 = "${objectDefinitionId2}",
				type = "oneToMany");
		}
	}

	tearDown {
		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteObjectViaAPI(objectName = "Manager");

			ObjectAdmin.deleteObjectViaAPI(objectName = "Employee");
		}
	}

	@description = "Aggregation Terms in oneToMany relationship"
	@priority = "5"
	test CanReturnAggregationTermsDetailsInOneToManyRelationship {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given three employee accounts created") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = "${managerId1}");
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = "${managerId2}");
			var employeeId3 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Justin",
				managerId = "${managerId2}");
		}

		task ("When calling for 'employees' with a 'managerId' as aggregationTerms parameter") {
			var getFacetsWithManagerId = ObjectDefinitionAPI.getObjectsWithAggregationTerms(
				aggregationTermsValue = "managerId",
				objects = "employees");
		}

		task ("Then receiving the managerId in facets with a correct number of ocurrences") {
			ObjectDefinitionAPI.assertInFacetsWithCorrectValue(
				expectedValue = "1",
				managerId = "${managerId1}",
				responseToParse = "${getFacetsWithManagerId}");

			ObjectDefinitionAPI.assertInFacetsWithCorrectValue(
				expectedValue = "2",
				managerId = "${managerId2}",
				responseToParse = "${getFacetsWithManagerId}");
		}
	}

	@description = "Aggregation Terms in oneToMany relationship after object deletion"
	@priority = "5"
	test CanReturnAggregationTermsDetailsInOneToManyRelationshipAfterObjectDeletion {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given three employee accounts created with two of them related with the same manager") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = "${managerId1}");
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = "${managerId2}");
			var employeeId3 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Justin",
				managerId = "${managerId2}");
		}

		task ("Given deleting one of the employees related with the same manager") {
			ObjectDefinitionAPI.deleteEmployee(employeeId = "${employeeId3}");
		}

		task ("When calling for 'employees' with a 'managerId' as aggregationTerms parameter") {
			var getFacetsWithManagerId = ObjectDefinitionAPI.getObjectsWithAggregationTerms(
				aggregationTermsValue = "managerId",
				objects = "employees");
		}

		task ("Then both managerId in facets have value 1 as the number of ocurrences") {
			ObjectDefinitionAPI.assertInFacetsWithCorrectValue(
				expectedValue = "1",
				managerId = "${managerId1}",
				responseToParse = "${getFacetsWithManagerId}");

			ObjectDefinitionAPI.assertInFacetsWithCorrectValue(
				expectedValue = "1",
				managerId = "${managerId2}",
				responseToParse = "${getFacetsWithManagerId}");
		}
	}

	@description = "Aggregation Terms in oneToMany updated relationship"
	@priority = "5"
	test CanReturnAggregationTermsDetailsInOneToManyUpdatedRelationship {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given three employee accounts created") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = "${managerId1}");
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = "${managerId2}");
			var employeeId3 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Justin",
				managerId = "${managerId2}");
		}

		task ("Given the third employee updated by relating with the same manager") {
			ObjectDefinitionAPI.updateEmployee(
				employeeFirstname = "Bruce",
				employeeId = "${employeeId1}",
				managerId = "${managerId2}");
		}

		task ("When calling for 'employees' with a 'managerId' as aggregationTerms parameter") {
			var getFacetsWithManagerId = ObjectDefinitionAPI.getObjectsWithAggregationTerms(
				aggregationTermsValue = "managerId",
				objects = "employees");
		}

		task ("Then receiving the managerId in facets with a correct number of ocurrences") {
			ObjectDefinitionAPI.assertInFacetsWithCorrectValue(
				expectedValue = "3",
				managerId = "${managerId2}",
				responseToParse = "${getFacetsWithManagerId}");
		}
	}

	@description = "Nested fields in oneToMany relationship"
	@priority = "5"
	test CanReturnNestedFieldsDetailsInOneToManyRelationship {
		property portal.acceptance = "true";

		task ("Given manager accounts created") {
			var managerId = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
		}

		task ("Given employee accounts created") {
			var employeeId = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = "${managerId}");
		}

		task ("When calling for 'employees' with a 'manager' as nestedFields parameter") {
			var getEmployeesWithManager = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "manager",
				objects = "employees");
		}

		task ("Then 'employee' information should be provided with 'manager' information nested as an object") {
			ObjectDefinitionAPI.assertEmployeeHasNestedFieldManager(
				expectedEmployeeFirstname = "Bruce",
				expectedManagerFirstname = "Courtney",
				expectedManagerId = "${managerId}",
				nestedField = "manager",
				objectId = "${employeeId}",
				relationshipName = "supervisor",
				responseToParse = "${getEmployeesWithManager}");
		}
	}

	@description = "Nested fields in oneToMany relationship after object deletion"
	@priority = "5"
	test CanReturnNestedFieldsDetailsInOneToManyRelationshipAfterObjectDeletion {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given two employee accounts created") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = "${managerId1}");
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = "${managerId2}");
		}

		task ("Given deleting one of the employees") {
			ObjectDefinitionAPI.deleteEmployee(employeeId = "${employeeId1}");
		}

		task ("When calling for 'employees' with a 'manager' as nestedFields parameter") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "manager",
				objects = "employees");
		}

		task ("Then 'employee' information should not include 'manager' information assigned to the deleted employee") {
			ObjectDefinitionAPI.assertResponseOnlyIncludesDetailsOfNotDeletedEmployee(
				employeeId1 = "${employeeId1}",
				employeeId2 = "${employeeId2}",
				managerId1 = "${managerId1}",
				managerId2 = "${managerId2}",
				responseToParse = "${responseToParse}");
		}
	}

	@description = "Nested fields in oneToMany Updated relationship"
	@priority = "5"
	test CanReturnNestedFieldsDetailsInOneToManyUpdatedRelationship {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given two employee accounts created") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = "${managerId1}");
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = "${managerId2}");
		}

		task ("Given the employee account updated by changing manager") {
			ObjectDefinitionAPI.updateEmployee(
				employeeFirstname = "Bruce",
				employeeId = "${employeeId1}",
				managerId = "${managerId2}");
		}

		task ("When calling for 'employees' with a 'manager' as nestedFields parameter") {
			var getEmployeesWithManager = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "manager",
				objects = "employees");
		}

		task ("Then 'employee' information should be provided with 'manager' information nested as an object") {
			ObjectDefinitionAPI.assertEmployeeHasNestedFieldManager(
				expectedEmployeeFirstname = "Bruce",
				expectedManagerFirstname = "Aaron",
				expectedManagerId = "${managerId2}",
				nestedField = "manager",
				objectId = "${employeeId1}",
				relationshipName = "supervisor",
				responseToParse = "${getEmployeesWithManager}");
		}
	}

}