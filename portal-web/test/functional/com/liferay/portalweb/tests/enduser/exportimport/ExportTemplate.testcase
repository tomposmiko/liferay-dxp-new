@component-name = "portal-staging"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		task ("Setup: Setup portal instance and login to portal") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("And: Open export portlet") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Export");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();
		}
	}

	@description = "Verify is possible delete an export template."
	@priority = "4"
	test DeleteExportTemplate {
		task ("Given: An export template is created") {
			LAR.addExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");

			LAR.saveExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");

			LAR.viewExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}

		task ("When: I delete and restore the export template") {
			LAR.moveToTheRecycleBinExportTemplate(exportTemplateName = "Export Template Name");

			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Recycle Bin",
				portlet = "Recycle Bin");

			RecycleBin.viewCP(
				assetName = "Export Template Name",
				assetType = "Export Import Template",
				deleteUser = "Test Test");

			RecycleBin.restoreCP(assetName = "Export Template Name");
		}

		task ("Then: Verify if it's possible see the template again") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Export");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

			LAR.viewExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}
	}

	@description = "Verify is possible relaunch the exported process."
	@priority = "3"
	test ExportWithRelaunchedProcess {
		task ("Given: An export template is created") {
			LAR.exportSiteCP(siteScopeName = "Guest");

			var key_larFileName = "${larFileName}";

			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful");

			var valueName = selenium.getText("//dl/dd/div/h2");

			echo("value name ${valueName}");

			var larFileName = RegexUtil.replace("${valueName}", "([a-zA-z0-9_.-]*)[(0-9KB)]*", "1");

			echo("lar file name ${larFileName}");
		}

		task ("When: I relaunch this template") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Relaunch",
				rowEntry = "${larFileName}");
		}

		task ("Then: I will see the successful process") {
			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful");
		}
	}

	@description = "Verify is possible search an export template."
	@priority = "4"
	test SearchExportTemplate {
		task ("Given: An export template is created") {
			LAR.addExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");

			LAR.saveExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}

		task ("When: I try to search for an export template") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Export");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");
		}

		task ("Then: I can see the export template in the results") {
			LAR.searchTemplate(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}
	}

}