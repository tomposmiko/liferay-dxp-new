@component-name = "portal-lima"
definition {

	property app.server.bundles.size = "1";
	property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
	property databases.size = "1";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging DM Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Staging.remoteStagingSetUpViaJson(
			groupName = "Site Name",
			remotePort = "9080");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONGroup.deleteGroupByName(groupName = "Remote Site");

			User.logoutPG();
		}
	}

	@description = "This test covers LPS-83426. It ensures repository actions are all available after enabling remote staging."
	@priority = "5"
	test AllActionsAreAvailableInRepository {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#AllActionsAreAvailableInRepository";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_3.txt",
			dmDocumentTitle = "Document_3.txt");

		DMDocument.viewStagingDetailsManagementBar(dmDocumentTitle = "Document_3.txt");
	}

	@description = "This test covers LPS-72443. It validates that a user can navigate to the remote site using the staging toolbar."
	@priority = "5"
	test CanNavigateToRemoteLiveViaToolbar {
		property test.name.skip.portal.instance = "DMRemoteStaging#CanNavigateToRemoteLiveViaToolbar";

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Navigator.gotoLiveView(remoteStaging = "true");

		AssertLocation.assertPartialLocation(value1 = "http://localhost:9080/group/remote-site");
	}

	@description = "This test covers LPS-154433. It ensures that an external video displays properly in the Media Gallery widget after the friendlyURL has been edited and published on a site."
	@priority = "4"
	test CanViewExternalVideoInMGAfterFriendlyURLIsUpdated {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewExternalVideoInMGAfterFriendlyURLIsUpdated";

		DMNavigator.openToAddEntry(
			documentTypeName = "External Video Shortcut",
			groupName = "Site Name",
			siteURLKey = "site-name");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Media Gallery");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Test YouTube Video",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "custom-url");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPGViaMG(
			mgDocumentTitle = "hqdefault.jpg",
			staging = "true");
	}

	@description = "This test covers LPS-154407. This ensures that a Media Gallery widget containing an external video with a custom friendlyURL can be published on a site."
	@priority = "4"
	test CanViewExternalVideoInMGAfterPublish {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewExternalVideoInMGAfterPublish";

		DMNavigator.openToAddEntry(
			documentTypeName = "External Video Shortcut",
			groupName = "Site Name",
			siteURLKey = "site-name");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Test YouTube Video",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(
			dmDocumentTitle = "Test YouTube Video",
			friendlyURLEdit = "custom-url");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Media Gallery");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.viewPGViaMG(
			mgDocumentTitle = "hqdefault.jpg",
			staging = "true");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPGViaMG(
			mgDocumentTitle = "hqdefault.jpg",
			staging = "true");
	}

	@description = "This test covers LPS-154408. It ensures that an external video with a custom friendlyURL added to the Web content field can be published on a site."
	@priority = "4"
	test CanViewExternalVideoInWCAfterPublish {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewExternalVideoInWCAfterPublish";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Test YouTube Video",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(
			dmDocumentTitle = "Test YouTube Video",
			friendlyURLEdit = "custom-url");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedVideo = "true",
			navTab = "Documents and Media",
			videoShortcutTitle = "Test YouTube Video",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		WebContentDisplayPortlet.viewContent(
			videoShortcutTitle = "YouTube",
			webContentTitle = "WC WEBCONTENT TITLE");
	}

	@description = "This test covers LPS-154435. It ensures that an external video with a custom friendlyURL added to the Web content field displays properly after its friendlyURL is edited and published on a site."
	@priority = "4"
	test CanViewExternalVideotInWCAfterFriendlyURLIsUpdated {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewExternalVideotInWCAfterFriendlyURLIsUpdated";

		DMNavigator.openToAddEntry(
			documentTypeName = "External Video Shortcut",
			groupName = "Site Name",
			siteURLKey = "site-name");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Web Content Display");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedVideo = "true",
			navTab = "Documents and Media",
			videoShortcutTitle = "Test YouTube Video",
			webContentContent = "Web Content Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Test YouTube Video",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "custom-url");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		WebContent.viewVideoPreview(service = "youtube");
	}

	@description = "This test covers LPS-154431. It ensures that an image with a custom friendlyURL added to a dynamic collection displayed in an Asset Publisher can be rendered properly on a site after its friendlyURL is edited and republished."
	@priority = "4"
	test CanViewImageInDynamicCollectionViaAPAfterFriendlyURLIsUpdated {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStagingDM#CanViewImageInDynamicCollectionViaAPAfterFriendlyURLIsUpdated";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Site Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			title = "Dynamic Collection");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Collection");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "custom-url");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document_1");
	}

	@description = "This test covers LPS-154405. It ensures that an image with a custom friendlyURL added to a dynamic collection rendered in an Asset Publisher can be published on a site."
	@priority = "4"
	test CanViewImageInDynamicCollectionViaAPAfterPublish {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewImageInDynamicCollectionViaAPAfterPublish";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(
			dmDocumentTitle = "DM Document Title",
			friendlyURLEdit = "custom-url");

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Site Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			title = "Dynamic Collection");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(assetListName = "Dynamic Collection");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "DM Document Title");
	}

	@description = "This test covers LPS-154430. It ensures that an image with a custom friendlyURL added to a manual collection displayed in an Asset Publisher can be rendered properly on a site after its friendlyURL is edited and republished."
	@priority = "4"
	test CanViewImageInManualCollectionViaAPAfterFriendlyURLIsUpdated {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewImageInManualCollectionViaAPAfterFriendlyURLIsUpdated";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Site Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			title = "Manual Collection");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "site-name");

		AssetListsAdmin.selectAsset(
			assetListName = "Manual Collection",
			assetName = "Document_1",
			assetType = "Basic Document");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(assetListName = "Manual Collection");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "custom-url");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document_1");
	}

	@description = "This test covers LPS-154404. It ensures that an image with a custom friendlyURL added to a manual collection rendered in an Asset Publisher can be published on a site."
	@priority = "4"
	test CanViewImageInManualCollectionViaAPAfterPublish {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewImageInManualCollectionViaAPAfterPublish";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		Depot.remoteStagingSetUpViaJson(
			groupName = "Test Depot Name",
			remotePort = "9080",
			site = "false");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		DMDocument.editFriendlyURL(
			dmDocumentTitle = "DM Document Title",
			friendlyURLEdit = "custom-url");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "DM Document Title",
			assetType = "Basic Document");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "DM Document Title");
	}

	@description = "This test covers LPS-154432. It ensures that an image displays properly in the Media Gallery widget after the friendlyURL has been edited and published on a site."
	@priority = "4"
	test CanViewImageInMGAfterFriendlyURLIsUpdated {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewImageInMGAfterFriendlyURLIsUpdated";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Media Gallery");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "custom-url");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPGViaMG(
			mgDocumentTitle = "Document_1",
			staging = "true");
	}

	@description = "This test covers LPS-154406. This ensures that a Media Gallery widget containing an image with a custom friendlyURL can be published on a site."
	@priority = "4"
	test CanViewImageInMGAfterPublish {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewImageInMGAfterPublish";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(
			dmDocumentTitle = "Test YouTube Video",
			friendlyURLEdit = "custom-url");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Media Gallery");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.viewPGViaMG(
			mgDocumentTitle = "Document_1",
			staging = "true");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPGViaMG(
			mgDocumentTitle = "Document_1",
			staging = "true");
	}

	@description = "This test covers LPS-154434. It ensures that an image with a custom friendlyURL added to the Web content field displays properly after its friendlyURL is edited and published on a site."
	@priority = "4"
	test CanViewImagetInWCAfterFriendlyURLIsUpdated {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#CanViewImagetInWCAfterFriendlyURLIsUpdated";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Web Content Display");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			embedImage = "true",
			imageFileName = "Document_1",
			siteName = "Site Name",
			webContentContent = "Web Content Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(friendlyURLEdit = "custom-url");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "custom-url",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that the document using custom document type can be deleted and republished."
	@priority = "5"
	@refactorneeded
	test DeleteDocumentWithCustomType {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#DeleteDocumentWithCustomType";

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "site-name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			navTab = "Documents and Media",
			textField = "Text");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document Title",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMDocument.viewDefault();
	}

	@description = "This test covers LPS-99853. It ensures that a user can republish a document that has been checked out again when enabling remote staging."
	@priority = "4"
	@refactorneeded
	test DocumentCanBeRepublishedAfterCheckout {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#DocumentCanBeRepublishedAfterCheckout";

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		SearchPortlets.configureEmbeddedSearchBar(destinationPage = "Staging DM Page");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Document_1.doc");

		DMDocument.checkoutPG(dmDocumentTitle = "Document_1.doc");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Administrator",
			userScreenName = "usersn");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		DMDocument.saveAndCheckinEditedDocumentPG(
			dmDocumentDescriptionEdit = "Edited DM Document Description",
			dmDocumentTitle = "Document_1.doc");

		DMDocument.checkoutPG(dmDocumentTitle = "Document_1.doc");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		AssertConsoleTextNotPresent(value1 = "NotSerializableException");
	}

	@description = "This ensures that the document using custom document type can be edited and republished."
	@priority = "5"
	@refactorneeded
	test EditDocumentWithCustomType {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#EditDocumentWithCustomType";

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "site-name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Image,Text",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document Title",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Document_1.jpg");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.editCP(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_2.jpg",
			dmDocumentFileNameEdit = "Image_2.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title Edit");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Image_2.jpg");
	}

	@description = "This test covers LPS-155795. It ensures that an image that was published on a site can still be accessed after remote staging is disabled."
	@priority = "5"
	test ImageIsStillAccessibleAfterDisablingStaging {
		property osgi.module.configuration.file.names = "com.liferay.document.library.configuration.FFFriendlyURLEntryFileEntryConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property test.name.skip.portal.instance = "DMRemoteStaging#ImageIsStillAccessibleAfterDisablingStaging";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_2",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.editFriendlyURL(
			dmDocumentTitle = "Document_2",
			friendlyURLEdit = "document_2_edit");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "Document_2",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		var latestVersionURL = DMDocument.getLatestVersionURL();

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.deactivateStagingCP(siteName = "Site Name");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSpecificURL(url = "${latestVersionURL}");

		AssertVisible(
			key_imageSourceURL = "document_2_edit",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This ensures that the custom document type being used by document can be edited and republished."
	@priority = "5"
	@refactorneeded
	test PublishEditsToDocumentType {
		property test.name.skip.portal.instance = "DMRemoteStaging#PublishEditsToDocumentType";

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "site-name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Image",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Image_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			imageField = "Document_1.jpg",
			navTab = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document Title",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		DMDocument.viewCP(
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Image_1.jpg");

		DMDocument.viewDocumentTypePG(imageName = "Document_1.jpg");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "site-name");

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Photo",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit",
			fieldFieldLabel = "Image",
			fieldFieldLabelEdit = "Photo");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.editCP(
			dmDocumentTitle = "DM Document Title",
			fieldFieldLabel = "Photo",
			imageFieldEdit = "Document_2.jpg",
			navTab = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document Title",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		DMDocument.viewCP(
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name Edit",
			previewImage = "Image_1.jpg");

		DMDocument.viewDocumentTypePG(
			fieldFieldLabel = "Photo",
			imageName = "Document_2.jpg");
	}

	@description = "This ensures that the document using custom document type and custom metadataset can be edited and republished."
	@priority = "5"
	@refactorneeded
	test PublishEditsToDocumentUsingCustomTypeAndSet {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#PublishEditsToDocumentUsingCustomTypeAndSet";

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "site-name");

		DMMetadataSet.addTitle(metadataSetName = "Document Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		DDLDataDefinition.save();

		DMNavigator.openToAddDocumentType(siteURLKey = "site-name");

		PortletEntry.inputName(name = "DM Document Type Name");

		DMDocumentType.gotoTab(tabName = "Builder");

		DMDocumentType.gotoTab(tabName = "Additional Metadata Fields");

		DMDocumentType.selectPGMetadataSet(key_metadataSetName = "Document Metadata Set Name");

		DDLDataDefinition.save();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document Title",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Document_1.jpg");

		DMNavigator.openDocumentTypesAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.editCP(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_2.jpg",
			dmDocumentFileNameEdit = "Image_2.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openToEntryInAdmin(
			baseURL = "http://localhost:9080",
			dmDocumentTitle = "DM Document Title Edit",
			groupName = "Remote Site",
			siteURLKey = "remote-site");

		DMDocument.viewCP(
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentType = "DM Document Type Name",
			previewImage = "Image_2.jpg");
	}

	@description = "This ensures that the custom metadataset used in custom document type can be edited and republished."
	@priority = "5"
	@refactorneeded
	test PublishEditsToMetadataSet {
		property test.name.skip.portal.instance = "DMRemoteStaging#PublishEditsToMetadataSet";

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "site-name");

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			numericField = "123",
			textField = "DM Document Text");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");

		DMDocument.viewDocumentTypePG(
			numericValue = "123",
			textContent = "DM Document Text");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "site-name");

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Company",
			dmDocumentTypeFieldRequiredEdit = "Company",
			dmDocumentTypeName = "DM Metadata Set Name",
			dmDocumentTypeNameEdit = "DM Metadata Set Name Edit",
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Company");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "DM Document Type Name");

		DMDocument.viewDocumentTypePG(
			numericValue = "123",
			textContent = "DM Document Text",
			textFieldLabel = "Company");
	}

	@description = "This ensures that the document info is displayed correctly after publishing and republishing."
	@priority = "5"
	@refactorneeded
	test ViewRepublishedDocumentInfo {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#ViewRepublishedDocumentInfo";

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		Tag.addCP(tagName = "tag1");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title",
			tagNameList = "tag1");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		var siteId = Site.getSiteId();

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPG(
			averageRatingStarCount = "0.0",
			dmDocumentDescription = "DM Document Description",
			dmDocumentExtension = "jpg",
			dmDocumentFileName = "Document_1.jpg",
			dmDocumentFileType = "Image",
			dmDocumentFileTypeInfo = "Image",
			dmDocumentSize = "13 KB",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "Basic Document",
			dmDocumentUploader = "Test Test",
			dmDocumentVersionNumber = "1.0",
			dmFolderName = "Home",
			locationFieldName = "true",
			tagNameList = "tag1");

		DMDocument.viewLatestVersionURL(
			dmDocumentFileName = "Document_1.jpg",
			remoteStaging = "true",
			siteId = "${siteId}");

		DMDocument.viewWebDAVURL(
			dmDocumentFileName = "Document_1.jpg",
			remoteStaging = "true",
			siteName = "remote-site");

		DMDocument.viewDocumentMetadataCP(
			metadataData = "image/jpeg",
			metadataLabel = "Content Type");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.editCP(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_3.png",
			dmDocumentFileNameEdit = "Document_3Edit.png",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		DMDocument.viewPG(
			averageRatingStarCount = "0.0",
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentExtension = "png",
			dmDocumentFileName = "Document_3Edit.png",
			dmDocumentFileType = "Image",
			dmDocumentFileTypeInfo = "Image",
			dmDocumentSize = "6 KB",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentType = "Basic Document",
			dmDocumentUploader = "Test Test",
			dmDocumentVersionNumber = "2.0",
			dmFolderName = "Home",
			locationFieldName = "true",
			tagNameList = "tag1");

		DMDocument.viewLatestVersionURL(
			dmDocumentFileName = "Document_3Edit.png",
			remoteStaging = "true",
			siteId = "${siteId}");

		DMDocument.viewWebDAVURL(
			dmDocumentFileName = "Document_3Edit.png",
			remoteStaging = "true",
			siteName = "remote-site");

		DMDocument.viewDocumentMetadataCP(
			metadataData = "image/png",
			metadataLabel = "Content Type");
	}

	@description = "This ensures that the image can be deleted and republished in web content."
	@priority = "4"
	@refactorneeded
	test ViewWebContentWithDeletedImage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#ViewWebContentWithDeletedImage";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Web Content Display");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected document?",
			entry = "Document_2.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			structureName = "WC Structure Name",
			webContentImage = "Document_2.jpg",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "Document_2.jpg",
			webContentTitle = "Web Content Title");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		AssertElementNotPresent(
			key_imageFileName = "Document_2.jpg",
			key_webContentTitle = "Web Content Title",
			locator1 = "WCD#WEB_CONTENT_IMAGE");
	}

	@description = "This ensures that the image can be edited and republished in web content."
	@priority = "4"
	@refactorneeded
	test ViewWebContentWithRepublishedImage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMRemoteStaging#ViewWebContentWithRepublishedImage";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging DM Page",
			widgetName = "Web Content Display");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected document?",
			entry = "Document_2.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			structureName = "WC Structure Name",
			webContentImage = "Document_2.jpg",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "Document_2.jpg",
			webContentTitle = "Web Content Title");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_3.jpg",
			dmDocumentFileNameEdit = "Document_3.jpg",
			dmDocumentTitle = "Document_2.jpg",
			dmDocumentTitleEdit = "Document_3.jpg");

		Navigator.gotoSitePage(
			pageName = "Staging DM Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging DM Page",
			siteName = "Remote Site");

		WebContentDisplayPortlet.viewContent(
			imageFileName = "Document_3.jpg",
			webContentTitle = "Web Content Title");
	}

}