@component-name = "portal-ab-test"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "A/B Test";

	setUp {
		task ("Open Analytics Cloud") {
			ACUtils.launchAC();
		}

		task ("Take token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP portal, login and create site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Navigator.openURL();

			HeadlessSite.addSite(siteName = "Test Site Name");
		}

		task ("Connect and synchronyze with Analytics Cloud") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Test Site Name");
		}

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		JSONRole.deleteTestRoles();
	}

	@description = "LPS-101341: Validate if the user has one experience with the AB test in a Running status, the experiences dropdown menu shows the AB test icon and one help hint"
	@priority = 5
	test ABTestIconInExperience {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");

			ABTest.openABTestPanel();
		}

		task ("Create AB test with a variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Assert the experiences dropdown menu shows the AB test icon and one help hint for that experience") {
			PageEditor.openExperienceMenu();

			AssertElementPresent(locator1 = "ABTest#AB_TEST_BUTTON");

			Click.clickNoMouseOver(locator1 = "PageEditor#EXPERIENCE_LOCKED_ICON");

			AssertVisible(
				key_content = "Edit is not allowed for this experience because there is an A/B test in progress.",
				locator1 = "Tooltip#POPOVER_BODY_CONTENT");
		}
	}

	@description = "LPS-97882: Validate if the A/B Test icon is not displayed in the control bar, when the user has not the page edit permission"
	@priority = 3
	test ABTestIconVisibleWithNoPermissions {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name Test",
				roleTitle = "Roles Regrole Name Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Regrole Name Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name Test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				password = "test",
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert AB Test icon is not present") {
			AssertElementNotPresent(locator1 = "ABTest#AB_TEST_BUTTON");
		}
	}

	@description = "LPS-97882: Validate if the A/B Test icon is displayed in the control bar, when the user has the page edit permission"
	@priority = 3
	test ABTestIconVisibleWithPermissions {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name Test",
				roleTitle = "Roles Regrole Name Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Regrole Name Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name Test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				password = "test",
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert AB Test icon is present") {
			AssertElementPresent(locator1 = "ABTest#AB_TEST_BUTTON");
		}
	}

	@description = "LPS-119475: When a user accesses the AB testing panel while a click goal test is running, the Change clickable element button don't show and the ID element box isn't enabled for edition, but the eye button will work normally"
	@priority = 3
	test AssertChangeClickableIDBoxNotEnabled {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take ID Element and assert the element ID appears in the ID box") {
			var idbutton = ABTest.takeElementID();

			ABTest.selectElementID();

			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}

		task ("Create variable and run test") {
			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Assert that Change clickable element button don't show and the ID element box isn't enabled for edition") {
			AssertElementNotPresent(
				key_text = "Change Clickable Element",
				locator1 = "Button#ANY_SECONDARY");

			AssertElementPresent(locator1 = "ABTest#ELEMENT_ID_INPUT_READONLY");
		}
	}

	@description = "LPS-97195: Validate if, in the list of the variant for A/B Test, the user have the options to edit the name and delete"
	@priority = 3
	test AssertEditDeleteVarianOptions {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Open the three dots menu for the variant and assert Edit and Delete appear") {
			Click(
				key_index = 1,
				locator1 = "ABTest#VARIANT_DROPDOWN");

			AssertVisible(
				key_menuItem = "Delete",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			AssertVisible(
				key_menuItem = "Edit",
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}
	}

	@description = "LPS-97194: Validate if the goal input test for the AB Test appears when the user tries to edit one AB Test"
	@priority = 3
	test AssertGoalInputWhenEdit {
		task ("Create AB test and add variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Edit test A/B and assert that user can edit the goal input") {
			ABTest.openEditABTest();

			AssertElementPresent(
				locator1 = "Modal#SELECT_WITH_LABEL",
				selectLabel = "Select Goal",
				value = "Bounce Rate");
		}
	}

	@description = "LPS-109345 Bug: On Page Structure, it is allowed to edit an element of a locked experience"
	@priority = 4
	test CanNotEditLockedExperience {
		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Name",
				text = "test@liferay.com");
		}

		task ("Add a Heading fragment to content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Name");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "New Experience");
		}

		task ("Create AB test with a variant and run") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Click on Edit icon of the page") {
			ContentPages.gotoPageEditor();

			PageEditor.gotoTab(tabName = "Browser");
		}

		task ("On the hierarchy tree, select any element of the page") {
			AssertVisible(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			AssertElementNotPresent(
				key_index = 1,
				key_nodeName = "Heading",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_VERTICAL_ELLIPSIS");
		}
	}

	@description = "LPS-97882: Validate if, when the user tries to edit an existing A/B Test, after edit the mandatory information, A/B Test sidebar appears with the A/B Testing configuration"
	@priority = 3
	test ChangesAppliedAfterEdit {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B, modify mandatory values and save") {
			ABTest.openEditABTest();

			ABTest.fillInput(
				key_testTitle = "AB test title 2",
				labelValue = "Test Name");

			ABTest.selectGoal(key_goal = "Click");

			Click(locator1 = "Modal#SAVE_BUTTON");
		}

		task ("Assert the changes have been applied") {
			AssertTextEquals(
				key_title = "AB test title 2",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title 2");

			AssertTextEquals(
				key_name = "Click",
				locator1 = "ABTest#AB_TEST_DETAILS_FIELD",
				value1 = "Click");
		}
	}

	@description = "LPS-97882: Validate if when the user is editing the A/B Testing, he can press the cancel button on the modal, and the changes in the A/B Testing is not saved"
	@priority = 4
	test ChangesNotAppliedAfterCancel {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B, modify mandatory values and Cancel") {
			ABTest.openEditABTest();

			ABTest.fillInput(
				key_testTitle = "AB test title 2",
				labelValue = "Test Name");

			ABTest.selectGoal(key_goal = "Click");

			Button.click(button = "Cancel");
		}

		task ("Assert the changes have not been applied") {
			AssertTextEquals(
				key_title = "AB test title",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title");

			AssertTextEquals(
				key_name = "Bounce Rate",
				locator1 = "ABTest#AB_TEST_DETAILS_FIELD",
				value1 = "Bounce Rate");
		}
	}

	@description = "LPS-97882: Validate if when the user is editing the A/B Testing, he can close the modal, and the changes in the A/B Testing is not saved"
	@priority = 3
	test ChangesNotAppliedAfterCloseModal {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B, modify mandatory values and close") {
			ABTest.openEditABTest();

			ABTest.fillInput(
				key_testTitle = "AB test title 2",
				labelValue = "Test Name");

			ABTest.selectGoal(key_goal = "Click");

			Click(locator1 = "Modal#CLOSE_BUTTON");
		}

		task ("Assert that changes have not been applied") {
			AssertTextEquals(
				key_title = "AB test title",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title");

			AssertTextEquals(
				key_name = "Bounce Rate",
				locator1 = "ABTest#AB_TEST_DETAILS_FIELD",
				value1 = "Bounce Rate");
		}
	}

	@description = "LPS-101055: Validate if the A/B test panel is shown in content pages when AC is configured"
	@priority = 3
	test CheckABTestPanelAtContentPages {
		task ("Click on the A/B Test icon and Assert the A/B Test panel is opened") {
			ABTest.openABTestPanel();
		}

		task ("Assert the A/B Test panel is opened") {
			AssertVisible(locator1 = "ABTest#AB_TEST_SIDE_BAR");
		}
	}

	@description = "LPS-101055: Validate if the A/B test panel is shown not shown in widget pages"
	@priority = 3
	test CheckABTestPanelAtWidgetPages {
		task ("Create Widget Page") {
			PagesAdmin.addPage(
				pageName = "Widget Page Name",
				sitePageType = "Widget Page");
		}

		task ("Go to widget pages crieted") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");
		}

		task ("Assert 'AB Test' icon is not present") {
			AssertElementNotPresent(locator1 = "ABTest#AB_TEST_BUTTON");
		}
	}

	@description = "LPS-108147: When user opens AB testing panel and AC is connected and synced, the AB testing panel display all its functionalities"
	@priority = 5
	test CheckABTestPanelInfo {
		property portal.acceptance = "true";

		task ("Open AB Test Panel") {
			ABTest.openABTestPanel();
		}

		task ("Assert that the message and the button for creating the AB Test are present") {
			AssertVisible(
				key_title = "No active tests were found for the selected experience.",
				locator1 = "Header#H4_TITLE");

			AssertVisible(
				key_message = "Create a new A/B test to optimize your page or experience.",
				locator1 = "ABTest#SIDEBAR_MESSAGE");

			AssertElementPresent(
				key_text = "Create Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-108147: When user opens AB testing panel and AC is connected but not synced, the AB testing panel displays instructions to sync to AC ('Don't show me this again' button and the message is not displayed)"
	@priority = 3
	test CheckABTestPanelInfoNotSyncAC {
		task ("Create a new Site and Page") {
			HeadlessSite.addSite(siteName = "Test Site Name 2");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 2",
				layoutName = "Content Page 2",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name 2",
				layoutName = "Content Page 2");
		}

		task ("Go to the content page created") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page 2",
				siteName = "Test Site Name 2");
		}

		task ("Open and assert that Ab Test Panel displays instructions to sync to AC and do not 'Don't show me this again' button and the message is not displayed") {
			ABTest.openABTestPanel();

			AssertVisible(locator1 = "ABTest#CONNECTED_NOT_SYNC_BUTTON");

			AssertVisible(
				key_message = "In order to perform an A/B test, your site has to be synced to Liferay Analytics Cloud.",
				locator1 = "ABTest#SIDEBAR_MESSAGE");

			AssertElementNotPresent(
				key_textValue = "Do not show me this again",
				locator1 = "Sidebar#LINK");

			AssertElementNotPresent(
				key_title = "Connect to Liferay Analytics Cloud",
				locator1 = "Header#H4_TITLE");
		}
	}

	@description = "LPS-100945: Validate if the Button components have the ID"
	@priority = 3
	test CheckButtonElementId {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take the ID Element") {
			var idbutton = ABTest.takeElementID();
		}

		task ("Select the button as click element") {
			ABTest.selectElementID();
		}

		task ("Assert the element ID appears in the ID box") {
			Click(
				key_text = "Change Clickable Element",
				locator1 = "Button#ANY_SECONDARY");

			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-96791: Validate if A tooltip Click Element to Set as Click Target for your Goal appears when the user clicks on Set Target Button"
	@priority = 3
	test CheckClickElementTooltip {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take the ID Element") {
			var idbutton = ABTest.takeElementID();
		}

		task ("Select element by click in on Select Clickable Element") {
			Click(
				key_text = "Select Clickable Element",
				locator1 = "Button#ANY_SECONDARY");

			Click(
				key_index = 1,
				locator1 = "ABTest#SELECT_CLICKABLE_ELEMENT");
		}

		task ("Assert that selected button is target") {
			AssertElementPresent(
				key_idElement = ${idbutton},
				locator1 = "ABTest#TARGET_ELEMENT_EDIT",
				value1 = ${idbutton});

			AssertElementPresent(
				key_text = "Select Clickable Element",
				locator1 = "Button#ANY_SECONDARY");
		}
	}

	@description = "LPS-109991 Bug: When a variant is edited, other variants lose modifications"
	@priority = 4
	test CheckContentPersistAfterEditVariant {
		property portal.acceptance = "false";

		task ("Create AB test and create first variant") {
			ABTest.openABTestPanel();

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant Name 1");
		}

		task ("Edit variant page and add some fragment to the page") {
			ABTest.editVariant(variantName = "Variant Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			ABTest.saveVariant();
		}

		task ("Create second variant and add some fragment to the page") {
			ABTest.createVariant(variantName = "Variant Name 2");

			ABTest.editVariant(variantName = "Variant Name 2");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			ABTest.saveVariant();
		}

		task ("Select to edit first variant") {
			ABTest.editVariant(variantName = "Variant Name 1");
		}

		task ("Remove fragment to the page and assert that the fragment has been removed") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			PageEditor.removeFragment(fragmentName = "Button");

			PageEditor.viewFragmentNotPresent(fragmentName = "Button");

			ABTest.saveVariant();
		}

		task ("Select to edit second variant and and assert that the fragment persists after editing the first variant") {
			ABTest.editVariant(variantName = "Variant Name 2");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}
	}

	@description = "LPS-152323 Bug: Element ID field gets empty after changing from variant"
	@priority = 3
	test CheckElementIdWithVariant {
		task ("Create a page with a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();
		}

		task ("Create a AB Test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Select the button as click goal ") {
			var idbutton = ABTest.takeElementID();

			ABTest.selectElementID();
		}

		task ("Create a variant ") {
			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Change to 'Control' variant") {
			ABTest.switchVariant(variantName = "Variant name");
		}

		task ("Assert that the Element ID still set") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-101167: Validate if the image for the empty state appears"
	@priority = 3
	test CheckEmptyStateImage {
		task ("Click on the A/B Test icon and Assert the A/B Test panel is opened") {
			ABTest.openABTestPanel();
		}

		task ("Assert 'empty state' image appears") {
			AssertVisible(locator1 = "ABTest#IMAGE_EMPTY_STATE");
		}
	}

	@description = "LPS-101167: Validate if the image for the running state appears"
	@priority = 3
	test CheckRunningStateImage {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Run test and Assert 'running state' image appears") {
			Button.click(button = "Review and Run Test");

			Click(
				key_name = "Run",
				locator1 = "Button#GENERAL_BUTTON_MODAL_FOOTER");

			AssertVisible(locator1 = "ABTest#IMAGE_SUCCESS");
		}
	}

	@description = "LPS-96781: Validate if, when the A/B Testing changes in the Liferay DXP, information about the Liferay DXP context, the changes are reflected in the test in Analytics Cloud"
	@priority = 4
	test CheckTestChangesInAC {
		property test.name.skip.portal.instance = "ABTesting#CheckTestChangesInAC";

		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.openABTestInAC();

			AssertTextEquals(
				locator1 = "ACTests#SUMMARY_CARD_TEXT",
				value1 = "Test Is Running");
		}
	}

	@description = "LPS-97195: Validate if the variant for A/B Test that was added on Liferay portal is visible in the Analytics Cloud"
	@priority = 5
	test CheckVariantAddedInAC {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Check the info is correct in Analytics Cloud and run the test") {
			ABTest.checkVariantAnalyticsCloud(variantNames = "Variant name");
		}
	}

	@description = "LPS-97195: Validate if the variant for A/B Test that was deleted on Liferay portal is visible in the Analytics Cloud"
	@priority = 4
	test CheckVariantDeletedInAC {
		property test.name.skip.portal.instance = "ABTesting#CheckVariantDeletedInAC";

		task ("Create AB test and create 2 variants") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Delete one variant and run AB Test") {
			ABTest.deleteVariant();

			ABTest.runTest();
		}

		task ("Check that exist only one variant in Analytics Cloud") {
			ABTest.viewDataInAnalyticsCloud();

			SelectWindow(locator1 = "name=undefined");

			if (IsElementPresent(locator1 = "AnalyticsCloudConnection#ANALYTICS_CLOUD_USER_LOGIN_FIELD")) {
				AnalyticsCloud.loginAnalyticsCloud(
					emailAddress = "test@liferay.com",
					password = "test");
			}

			AssertElementPresent(
				key_index = 2,
				locator1 = "ABTest#REVIEW_VARIANTS_ANALYTICS_CLOUD",
				name = "Variant name 2");

			AssertElementNotPresent(
				key_index = 3,
				locator1 = "ABTest#REVIEW_VARIANTS_ANALYTICS_CLOUD",
				name = "Variant name");
		}
	}

	@description = "LPS-97195: Validate if the variant for A/B Test that was edited on Liferay portal is visible in the Analytics Cloud"
	@priority = 4
	test CheckVariantEditedInAC {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Edit variant") {
			ABTest.editVariantName();

			ABTest.fillInput(
				key_testTitle = "Variant name 2",
				labelValue = "Name");

			Click(
				key_name = "Save",
				locator1 = "Button#GENERAL_BUTTON_MODAL_FOOTER");
		}

		task ("Assert that variant name is changed in DXP and run the test") {
			AssertVisible(
				key_variantName = "Variant name 2",
				locator1 = "ABTest#VARIANT_TITLE");
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkVariantAnalyticsCloud(variantNames = "Variant name 2");
		}
	}

	@description = "LPS-119475: When a user has selected an element and clicks on the x icon within the ID box, the ID box gets empty and the Change clickable element button changes into Select clickable element"
	@priority = 3
	test ClearIDBox {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take ID Element and assert the element ID appears in the ID box") {
			var idbutton = ABTest.takeElementID();

			ABTest.selectElementID();

			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}

		task ("Clear ID Box") {
			Click(locator1 = "ABTest#X_BUTTON_ID_BOX");
		}

		task ("Assert the ID box is empty") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "");
		}
	}

	@description = "Validate if the user can create an A/B Test by Bounce rate"
	@priority = 5
	@uitest
	test CreateABTestByBounceRate {
		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkAnalyticsCloudInfo(abTestTitle = "AB test title");
		}
	}

	@description = "LPS-119475 Validate if the user can create an A/B Test by Click"
	@priority = 5
	@uitest
	test CreateABTestByClick {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");

			ABTest.selectElementID();

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkAnalyticsCloudInfo(abTestTitle = "AB test title");
		}
	}

	@description = "LPS-119475 Validate if, in the AB Test by Click, the sidebar informs the user that the element id is mandatory"
	@priority = 3
	@uitest
	test CreateABTestByClickInvalidId {
		task ("Create AB test, write an invalid ID for the element and run the test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");

			ABTest.writeId(elementId = "invalidID");

			Button.click(button = "Review and Run Test");
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "Message#ERROR_FORM_FIELD_REQUIRED",
				value1 = "ID was not found.");
		}
	}

	@description = "LPS-86285 Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control if the user add variants and remove all variants"
	@priority = 4
	@uitest
	test CreateABTestRunWithDeletedVariants {
		task ("Create AB test, create variant, delete variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.deleteVariant();

			Button.click(button = "Review and Run Test");
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
				value1 = "A variant needs to be created.");
		}
	}

	@description = "LPS-86285 Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control"
	@priority = 5
	@uitest
	test CreateABTestRunWithNoVariants {
		task ("Create AB test and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			Button.click(button = "Review and Run Test");
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
				value1 = "A variant needs to be created.");
		}
	}

	@description = "LPS-97195: Validate if the user can create a variant for A/B Test with the same name that already exists with success"
	@priority = 4
	test CreateVariantSameName {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Create two variants whith the same name and view success message") {
			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name");

			Alert.viewSuccessMessage();
		}

		task ("Assert that variants where created") {
			AssertVisible(
				key_index = 1,
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE_INDEX");

			AssertVisible(
				key_index = 2,
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE_INDEX");
		}
	}

	@description = "LPS-99421: The test is removed when the delete action is clicked"
	@priority = 3
	test DeleteABTest {
		task ("Create AB test and a variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Delete AB Test") {
			ABTest.deleteABTest();
		}

		task ("Assert that does not exist ab test") {
			AssertElementPresent(
				key_text = "Create Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-99421: The test is not removed when the delete action is canceled"
	@priority = 3
	test DeleteABTestCancel {
		task ("Create AB test and a variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("try to Delete AB Test and click cancel button") {
			Click(locator1 = "ABTest#KEBAB_AB_TEST");

			MenuItem.clickNoError(menuItem = "Delete");

			Confirm.dismissAlert();
		}

		task ("Assert that the ABTest draft keeps appearing") {
			AssertTextEquals(
				key_title = "AB test title",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title");
		}
	}

	@description = "LPS-99421: The test deletion in AC is reflected on DXP"
	@priority = 4
	test DeleteABTestInACViewInDXP {
		property portal.acceptance = "true";

		task ("Create AB test and create variant.") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.openABTestInAC();

			AssertTextEquals(
				locator1 = "ACTests#SUMMARY_CARD_TEXT",
				value1 = "Test Is in Draft Mode");
		}

		task ("Delete AB Test at AC") {
			ABTest.deleteABTestInAC();
		}

		task ("Go back to DXP") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page",
				siteName = "Test Site Name");
		}

		task ("Assert that does not exist ab test") {
			ABTest.openABTestPanel();

			AssertElementPresent(
				key_text = "Create Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-99421: The test deletion in DXP is reflected on AC"
	@priority = 4
	test DeleteABTestInDXPViewInAC {
		property portal.acceptance = "true";

		task ("Create AB test and create variant.") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.openABTestInAC();

			AssertTextEquals(
				locator1 = "ACTests#SUMMARY_CARD_TEXT",
				value1 = "Test Is in Draft Mode");
		}

		task ("Go back to DXP") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page",
				siteName = "Test Site Name");
		}

		task ("Delete the AB test") {
			ABTest.openABTestPanel();

			ABTest.deleteABTest();
		}

		task ("Go to AC page and assert the ERROR page is open") {
			Navigator.selectSpecificWindow(windowTitle = "Tests - Analytics Cloud");

			Refresh();

			AssertTextPresent(value1 = "The page you are looking for does not exist.");
		}
	}

	@description = "LPS-99421: The delete action shows in the test action menu when the test status allows it"
	@priority = 3
	test DeleteButtonShows {
		task ("Create AB test and a variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Assert that the Delete button is present") {
			Click(locator1 = "ABTest#KEBAB_AB_TEST");

			MenuItem.viewVisible(menuItem = "Delete");
		}
	}

	@description = "LPS-145992 Bug: Run A/B Test with Click Goal of a deleted button"
	@priority = 4
	test DeleteButtonWarning {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page",
				siteName = "Test Site Name");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Select the button as clickable element") {
			ABTest.selectElementID();
		}

		task ("Go to edit page and remove the fragment created") {
			ContentPages.gotoPageEditor();

			PageEditor.removeFragment(fragmentName = "Button");

			Button.clickPublish();
		}

		task ("Assert the warning alert") {
			ABTest.openABTestPanel();

			AssertTextEquals(
				locator1 = "ABTest#ELEMENT_NEEDS_TO_BE_SELECTED_MESSAGE",
				value1 = "An element needs to be selected.");
		}
	}

	@description = "LPS-104203: Validate if in the AB Test, when the user delete the clickable element that was set, the warning alert appears"
	@priority = 4
	test DeleteClickableElementWarning {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Select the button as clickable element") {
			ABTest.selectElementID();
		}

		task ("Delete the button as clickable element") {
			Click(locator1 = "ABTest#TARGET_CLOSE_BUTTON");
		}

		task ("Assert the warning alert") {
			AssertTextEquals(
				locator1 = "ABTest#ELEMENT_NEEDS_TO_BE_SELECTED_MESSAGE",
				value1 = "An element needs to be selected.");
		}
	}

	@description = "LPS-98829: Validate if the ab test in History tab can be deleted"
	@priority = 3
	test DeleteHistoryTab {
		task ("Create AB test, create variant, run test and terminate test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Click history AB Test") {
			ABTest.openTab(tabValue = "History");
		}

		task ("Delete the History Tab and Assert is empty") {
			Click(
				key_index = 1,
				key_name = "AB test title",
				locator1 = "ABTest#VALUES_IN_LIST");

			ClickNoError(locator1 = "Icon#REMOVE");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();

			AssertTextEquals(
				locator1 = "ABTest#NO_HAVE_HISTORY_AB_TEST_MESSAGE",
				value1 = "There is no test history for this experience.");
		}
	}

	@description = "LPS-99225: Validate if the admin can delete a page with an A/B test in terminated status"
	@priority = 3
	test DeletePageABTestTerminated {
		task ("Create page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");
		}

		task ("Create AB test, create variant, run test and terminate test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Delete the page created") {
			JSONLayout.deletePublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2");
		}
	}

	@description = "LPS-99225: Validate if the admin can delete a segment in an experience with an A/B test in the draft status"
	@priority = 3
	test DeleteSegmentABTestDraft {
		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTestNewExp1");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience") {
			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.openABTestPanel();

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Assert not being able to delete the segment that was added in an experience") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			Segmentation.deleteSegment(entry = "SegmentForABTest");

			AssertElementPresent(locator1 = "ABTest#DELETE_SEGMENT_WITH_EXPERIENCE_MESSAGE");
		}
	}

	@description = "LPS-99225: Validate if the admin can delete a segment in an experience with an A/B test in terminated status"
	@priority = 3
	test DeleteSegmentABTestTerminated {
		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTestNewExp1");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience, run and terminate AB Test") {
			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Assert not being able to delete the segment that was added in an experience") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			Segmentation.deleteSegment(entry = "SegmentForABTest");

			AssertElementPresent(locator1 = "ABTest#DELETE_SEGMENT_WITH_EXPERIENCE_MESSAGE");
		}
	}

	@description = "LPS-97195: Validate if a message will appear asking if the user wants to delete a variant for A/B Test and he can delete with success"
	@priority = 4
	test DeleteVariant {
		property ci.retries.disabled = "true";

		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Delete variant") {
			ABTest.deleteVariant();
		}

		task ("Assert that there is no variant") {
			AssertTextEquals(
				locator1 = "ABTest#REVIEW_NO_HAVE_VARIANTS",
				value1 = "Create at least one variant to run the test.");
		}
	}

	@description = "LPS-97195: Validate if the user not will delete a variant for A/B Test, if when he will delete and he presses the cancel button"
	@priority = 4
	test DeleteVariantCancel {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Try to delete variant") {
			Click(
				key_index = 1,
				locator1 = "ABTest#VARIANT_DROPDOWN");

			MenuItem.clickNoError(menuItem = "Delete");

			Confirm.dismissAlert();
		}

		task ("Assert that variant is not deleted") {
			AssertVisible(
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE");
		}
	}

	@description = "LPS-101341: Validate if an alert appears when the user tries to delete an experience with an AB Test in a draft mode, the user should be able to delete the experience"
	@priority = 4
	test DeletExperienceWithDraftABTest {
		property ci.retries.disabled = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Create AB test with a variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Delete the created experience") {
			var key_experienceName = "NewAnyoneExperience";

			PageEditor.openExperienceMenu();

			ClickNoError(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON");

			AssertConfirm(value1 = "There is an existing test for this experience. When deleting the experience, all tests inside will be deleted too. Are you sure you want to delete this experience and associated tests?");

			Alert.viewSuccessMessage();
		}

		task ("Assert that experience was deleted") {
			PageEditor.openExperienceMenu();

			AssertElementNotPresent(
				key_experienceName = "NewAnyoneExperience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
		}
	}

	@description = "LPS-101341: Validate if an alert appears when the user tries to delete an experience with an AB Test in a draft mode, the user should be able to cancel the deletion of the experience"
	@priority = 3
	test DeletExperienceWithDraftABTestCancel {
		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Create AB test with a variant, run and terminate test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Delete the created experience") {
			var key_experienceName = "NewAnyoneExperience";

			PageEditor.openExperienceMenu();

			ClickNoError(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON");

			Confirm.dismissAlert();

			Alert.viewSuccessMessage();
		}

		task ("Assert that experience is not deleted") {
			AssertElementPresent(
				key_experienceName = "NewAnyoneExperience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");

			Click(locator1 = "PageEditor#EXPERIENCE_LABEL");
		}

		task ("Assert that the ABTest draft keeps appearing") {
			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");

			AssertTextEquals(
				key_title = "AB test title",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title");
		}
	}

	@description = "LPS-96791: Validate if the user can edit the target"
	@priority = 5
	test EditClickElementTarget {
		task ("Edit the Content page to add a button fragment and duplicate button") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.gotoDuplicate(fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Select the first button as click element") {
			ABTest.selectElementID();
		}

		task ("Select the second button as click element") {
			Click(
				key_text = "Change Clickable Element",
				locator1 = "Button#ANY_SECONDARY");

			Click(
				key_index = 1,
				locator1 = "ABTest#SELECT_CLICKABLE_ELEMENT");

			var idelement = selenium.getAttribute("//div[contains(@class,'text-truncate')]@title");

			var idelement = StringUtil.substring(${idelement}, 1, 19);

			Button.click(button = "Set Element as Click Target");

			Alert.viewSuccessMessage();

			AssertTextEquals(
				locator1 = "ABTest#TARGET_LABEL",
				value1 = "Target");
		}

		task ("Assert the button gets selected") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idelement});
		}
	}

	@description = "LPS-101341: Validate if when the user will edit some Experience with an AB Test in a Terminated status, the system not will show any information about AB Test"
	@priority = 4
	test EditExperienceAfterTerminatedABTest {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Create AB test with a variant, run and terminate test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Assert the experiences dropdown menu the AB test icon is not present and change experience") {
			PageEditor.openExperienceMenu();

			AssertElementNotPresent(locator1 = "ABTest#AB_TEST_BUTTON");

			Click(locator1 = "PageEditor#EXPERIENCE_LABEL");

			PageEditor.changeExperience(newExperience = "NewAnyoneExperience");
		}

		task ("Add some fragment to the experience and publish page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}
	}

	@description = "LPS-103334: Validate if the AB Test is in the status draft, the experience about the AB Test is active is in Edition Mode"
	@priority = 5
	test EditExperienceWithDraftABTest {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Create AB test with a variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Assert the experience can be edited") {
			PageEditor.openExperienceMenu();

			AssertElementPresent(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");
		}
	}

	@description = "LPS-97882: Validate if, when the user tries to edit an existing A/B Test, a modal is opened requiring some initial fields information"
	@priority = 3
	test EditRequiredInfo {
		property ci.retries.disabled = "true";

		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B and assert that user can edit the goal input") {
			ABTest.openEditABTest();

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Edit Test");

			AssertElementPresent(
				key_fieldLabel = "Test Name",
				locator1 = "Modal#INPUT_WITH_LABEL");

			AssertElementPresent(
				locator1 = "Modal#SELECT_WITH_LABEL",
				selectLabel = "Select Goal");
		}
	}

	@description = "LPS-97195: Validate if the user can edit a variant for A/B Test with success"
	@priority = 5
	test EditVariant {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Edit variant") {
			ABTest.editVariantName(key_index = 2);

			ABTest.fillInput(
				key_testTitle = "Variant name 3",
				labelValue = "Name");

			Click(
				key_name = "Save",
				locator1 = "Button#GENERAL_BUTTON_MODAL_FOOTER");
		}

		task ("Assert that variant name is changed") {
			AssertVisible(
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE");

			AssertVisible(
				key_variantName = "Variant name 3",
				locator1 = "ABTest#VARIANT_TITLE");
		}
	}

	@description = "LPS-97195: Validate if the user can cancel the creation of one variant for A/B Test, and the data that he inputs during the creation is discarded"
	@priority = 3
	test EditVariantCancel {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Try to create variant") {
			Button.click(button = "Create Variant");

			ABTest.fillInput(
				key_testTitle = "Variant name",
				labelValue = "Name");

			Button.click(button = "Cancel");
		}

		task ("Assert the variant has not been created") {
			AssertTextEquals(
				locator1 = "ABTest#REVIEW_NO_HAVE_VARIANTS",
				value1 = "Create at least one variant to run the test.");
		}
	}

	@description = "LPS-99349: Validate if the user can edit the variant for A/B Test content with success"
	@priority = 5
	test EditVariantContent {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Edit variant page and add some fragment to the page") {
			Click(locator1 = "ABTest#PENCIL_BUTTON");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Click(
				key_text = "Save Variant",
				locator1 = "Button#ANY");
		}

		task ("Select the variant view") {
			Click(
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE");
		}

		task ("Assert the modifications are shown when the variant is selected") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}
	}

	@description = "LPS-99349: Validate if the user can cancel the edition of one variant for A/B Test, and the data that he inputs during the creation is discarded"
	@priority = 4
	test EditVariantContentCancel {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Edit variant page and add some fragment to the page") {
			Click(locator1 = "ABTest#PENCIL_BUTTON");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			ClickNoError(
				key_text = "Discard Variant",
				locator1 = "Button#ANY_SECONDARY");

			AssertConfirm(value1 = "Are you sure you want to discard the current draft and apply the latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Select the variant view") {
			Click(
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE");
		}

		task ("Assert the modifications are shown when the variant is selected") {
			AssertElementNotPresent(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@description = "LPS-97195: Validate if the user can edit a variant for A/B Test with the same name that already exists with success"
	@priority = 3
	test EditVariantSameName {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Edit variant") {
			ABTest.editVariantName(key_index = 2);

			ABTest.fillInput(
				key_testTitle = "Variant name",
				labelValue = "Name");

			Click(
				key_name = "Save",
				locator1 = "Button#GENERAL_BUTTON_MODAL_FOOTER");
		}

		task ("Assert that variant name is changed") {
			AssertVisible(
				key_index = 1,
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE_INDEX");

			AssertVisible(
				key_index = 2,
				key_variantName = "Variant name",
				locator1 = "ABTest#VARIANT_TITLE_INDEX");
		}
	}

	@description = "LPS-146003 Bug: Can't edit variant using top toolbar edit button"
	@priority = 4
	test EditVariantWithToolbarButton {
		task ("Add a Heading fragment to content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			Button.clickPublish();
		}

		task ("Create a new A/B test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Create a Variant for AB Test") {
			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Open editor with upper pencil icon") {
			ContentPages.gotoPageEditor();

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New text");
		}
	}

	@description = "LPS-119475: When a user clicks on the "eye" button, by click or by ID, the page scrolls if needed and shows the selected element highlighted"
	@priority = 3
	test EyeButton {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take the ID Element") {
			var idbutton = ABTest.takeElementID();
		}

		task ("Select element by id ") {
			Click(locator1 = "ABTest#ELEMENT_ID_INPUT");

			Type(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});

			KeyPress(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "\ENTER");
		}

		task ("Assert that selected button is target") {
			AssertElementPresent(
				key_idElement = ${idbutton},
				locator1 = "ABTest#TARGET_ELEMENT",
				value1 = ${idbutton});
		}

		task ("Click wherever so the button highlight is taken out") {
			Click(locator1 = "ABTest#REVIEW_NO_HAVE_VARIANTS");

			AssertElementNotPresent(
				key_idElement = ${idbutton},
				locator1 = "ABTest#TARGET_ELEMENT",
				value1 = ${idbutton});
		}

		task ("Click on the eye button") {
			Click(locator1 = "Icon#EYE_PREVIEW");
		}

		task ("Assert that selected button is target") {
			AssertElementPresent(
				key_idElement = ${idbutton},
				locator1 = "ABTest#TARGET_ELEMENT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-98829: Validate if the History tab appears with the list ordered by modified date DESC"
	@priority = 3
	test HistoryTabListedDescModifiedDate {
		task ("Create AB test with a variant, run test and terminate test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Create AB test with two variants, run test and terminate test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title 2");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Click history AB Test") {
			ABTest.openTab(tabValue = "History");
		}

		task ("Assert the second AB test appears first in the History Tab") {
			AssertElementPresent(
				key_index = 1,
				key_name = "AB test title 2",
				locator1 = "ABTest#VALUES_IN_LIST");
		}
	}

	@description = "LPS-119475: When a user selects any highlighted element in the page, the ID of the selected element shows in the ID box"
	@priority = 3
	test IDShownInTheBox {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take ID Element and assert the element ID appears in the ID box") {
			var idbutton = ABTest.takeElementID();

			ABTest.selectElementID();

			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-96787: Validate if the Liferay NOT receives the notification when the test status is changed by the same user that created the test"
	@priority = 3
	test NoNotificationAfterChangesSameUser {
		task ("Create AB test with a variant and run test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Assert there are not notifications") {
			Notifications.viewNoNotifications(activePanel = "Notifications");
		}
	}

	@description = "LPS-96787: Validate if the Liferay receives the notification when the AB Test status is changes in Analytics Cloud"
	@priority = 3
	test NotificationAfterChangesInAC {
		task ("Create user and sync contact with AC") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			ACDXPSettings.syncNewContactData();
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name Test",
				roleTitle = "Roles Regrole Name Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Regrole Name Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name Test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create AB test with a variant and run test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Terminate AB Test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ABTest.terminateTest();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Go to notifications") {
			Notifications.gotoNotifications();
		}

		task ("Assert there's a notification about the change in the AB test") {
			Notifications.viewSpecificNotificationDetails(
				contentBody = "AB test title",
				notificationsTitle = "A/B test has changed to status terminated");
		}
	}

	@description = "LPS-96787: Validate if in the notification message has one link to the content page of the test, with the AB test panel open in that test"
	@priority = 3
	test NotificationLinkToContentPage {
		property ci.retries.disabled = "true";

		task ("Create user and sync contact with AC") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			ACDXPSettings.syncNewContactData();
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name Test",
				roleTitle = "Roles Regrole Name Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Regrole Name Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name Test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create AB test with a variant and run test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Terminate AB Test") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ABTest.terminateTest();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Go to notifications") {
			Notifications.gotoNotifications();
		}

		task ("Click on the title and assert the Content Page is displayed") {
			Notifications.viewSpecificNotificationDetails(
				contentBody = "AB test title",
				notificationsTitle = "A/B test has changed to status terminated");

			AssertClick(
				locator1 = "Notifications#NOTIFICATIONS_TITLE",
				value1 = "A/B test has changed to status terminated.");

			AssertTextEquals.assertPartialText(
				key_portletTitle = "Content Page",
				locator1 = "Home#SITE_ADMINISTRATION_PORTLET_TITLE",
				value1 = "Content Page");
		}
	}

	@description = "LPS-103334: Validate if the AB Test is in the status running, the experience about the AB Test is active is in Non-Edition Mode"
	@priority = 5
	test NotPossibleToEditExperienceWithRunningABTest {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Select the new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Create AB test with a variant and run test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Assert the experience cannot be edited") {
			PageEditor.openExperienceMenu();

			AssertElementNotPresent(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");
		}
	}

	@description = "LPS-97882: Validate if, when the A/B Test icon is pressed, it calls the function to open or close the A/B Test sidebar"
	@priority = 3
	test PanelOpenCloseAfterClickIcon {
		task ("Click on the A/B Test icon and Assert the A/B Test panel is opened") {
			ABTest.openABTestPanel();

			AssertVisible(locator1 = "ABTest#AB_TEST_SIDE_BAR");
		}

		task ("Click on the A/B Test icon and Assert the A/B Test panel is closed") {
			Click(locator1 = "ABTest#AB_TEST_BUTTON");

			AssertNotVisible(locator1 = "ABTest#AB_TEST_SIDE_BAR");
		}
	}

	@description = "LPS-99225: Validate if the admin can reassign a segment in an experience with an A/B test in the draft status"
	@priority = 3
	test ReassignSegmentABTestDraft {
		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTest");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience") {
			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Assert the experience can be edited") {
			PageEditor.openExperienceMenu();

			Click(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");

			Select(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();

			Button.clickPublish();
		}
	}

	@description = "LPS-99225: Validate if the admin cannot reassign a segment in an experience with an A/B test in running status"
	@priority = 4
	test ReassignSegmentABTestRunning {
		property portal.acceptance = "true";

		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTest");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience and run it") {
			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Go to edit the content page.") {
			ContentPages.gotoPageEditor();
		}

		task ("Assert the experience cannot be edited") {
			PageEditor.openExperienceMenu();

			AssertElementNotPresent(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");
		}
	}

	@description = "LPS-96791: Validate if the user can remove the target"
	@priority = 5
	test RemoveClickElementTarget {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.gotoDuplicate(fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Get the element ID from button 2") {
			var idbutton = ABTest.takeElementID(key_index = 2);
		}

		task ("Select the first button as click element") {
			ABTest.selectElementID();
		}

		task ("Change the ID Element") {
			Click(locator1 = "ABTest#X_BUTTON_ID_BOX");

			Type(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});

			KeyPress(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "\ENTER");
		}

		task ("Assert the button gets selected") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-99225: Validate if the admin can rename a segment in an experience with an A/B test in the draft status"
	@priority = 3
	test RenameSegmentABTestDraft {
		property ci.retries.disabled = "true";

		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTest");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience.") {
			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Go to Segments page and try to rename that segment") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			Segmentation.editSegment(entry = "SegmentForABTest");

			Segmentation.fillTitle(titleField = "SegmentForABTest 2");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}
	}

	@description = "LPS-99225: Validate if the admin cannot rename a segment in an experience with an A/B test in running status"
	@priority = 3
	test RenameSegmentABTestRunning {
		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTest");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience and run it") {
			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Go to Segments page and try to rename that segment") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			Segmentation.editSegment(entry = "SegmentForABTest");

			Segmentation.fillTitle(titleField = "SegmentForABTest 2");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}
	}

	@description = "LPS-99225: Validate if the admin can rename a segment in an experience with an A/B test in terminated status"
	@priority = 3
	test RenameSegmentABTestTerminated {
		task ("Create a segment and an Experience using the segment created") {
			ContentPages.gotoPageEditor();

			Segmentation.createExperienceWithSegment(
				newExperience = "NewExp1",
				newSegment = "SegmentForABTest");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience, run and terminate it") {
			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewExp1");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}

		task ("Go to Segments page and try to rename that segment") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			Segmentation.editSegment(entry = "SegmentForABTest");

			Segmentation.fillTitle(titleField = "SegmentForABTest 2");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}
	}

	@description = "LPS-97196: Validate if when the user is in the "Review and Start Test" screen, all data is discarded after the user clicks on cancel button"
	@priority = 4
	test ReviewAndStartCancel {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Click on Review and Start Test Button and click cancel button") {
			Button.click(button = "Review and Run Test");

			Button.click(button = "Cancel");
		}

		task ("Assert the test status is not running") {
			AssertVisible(
				key_text = "Review and Run Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-97196: Validate if when the user is in the "Review and Start Test" screen, all data is discarded after the user clicks in closed button"
	@priority = 3
	test ReviewAndStartClose {
		task ("Create AB test, create variant and delete variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Click on Review and Start Test Button and click close button") {
			Button.click(button = "Review and Run Test");

			Click(locator1 = "Modal#CLOSE_BUTTON");
		}

		task ("Assert the test status is not running") {
			AssertVisible(
				key_text = "Review and Run Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-97196: Validate if all the information configured in the "Review and Start Test" screen appears correctly after the user clicks on the Run button"
	@priority = 5
	test ReviewAndStartRunCheckInfo {
		task ("Create AB test, create two variants") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Click on Review and Start Test Button") {
			Button.click(button = "Review and Run Test");
		}

		task ("Assert itens at Review and Run Test page") {
			ABTest.viewInfoItems(values = "Control,Variant name,Variant name 2,Confidence Level Required");
		}

		task ("Assert percentage values and Estimated Time to Declare Winner at Review and Run Test page") {
			ABTest.viewInfoItems(values = "34,33,33,95");

			AssertElementPresent(
				key_name = "Estimated Time to Declare Winner",
				key_value = "N/A",
				locator1 = "ABTest#VIEW_ESTIMATED_TIME",
				value1 = "N/A");
		}
	}

	@description = "LPS-97196: Validate if when the user is in the "Review and Start Test" screen, the sum of all traffic split options should be 100%"
	@priority = 4
	test ReviewAndStartSum100 {
		task ("Create AB test, create two variants") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Click on Review and Start Test Button") {
			Button.click(button = "Review and Run Test");
		}

		task ("Assert the sum values should be 100") {
			ABTest.viewInfoItems(values = "34,33,33");
		}
	}

	@description = "LPS-119475: When a user has selected an element, the Select clickable element button changes into Change clickable element, and the elements are highlighted"
	@priority = 3
	test SelectButtonToChangeClickableElement {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Select the button as click element") {
			ABTest.selectElementID();
		}

		task ("Assert the button switches to Change clickable element button") {
			AssertTextEquals(
				key_text = "Change Clickable Element",
				locator1 = "Button#ANY_SECONDARY",
				value1 = "Change Clickable Element");
		}
	}

	@description = "LPS-119476: When the ID of a submit element accomplishes all the conditions, the element will be rightly measured in AC"
	@ignore = "true"
	@priority = 4
	test SubmitElementInAC {

		// TODO LPS-137499 SubmitElementInAC pending implementation

	}

	@description = "LPS-119476: When there's a submit element with no ID, the matching element doesn't show as selectable"
	@priority = 3
	test SubmitElementWithNoID {
		task ("Add a HTML fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");
		}

		task ("Edit the inline content of HTML fragment") {
			var htmlSnippet = '''
<input type="submit" />
		''';

			PageEditor.editFragmentHTML(
				content = ${htmlSnippet},
				fragmentName = "HTML",
				id = "element-html");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test and select clickable element") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Click on Select Clickable Element") {
			Click(
				key_text = "Select Clickable Element",
				locator1 = "Button#ANY_SECONDARY");
		}

		task ("Assert the button is dosen't highlighted") {
			AssertElementNotPresent(
				key_idElement = "customId",
				locator1 = "ABTest#TARGET_ELEMENT_EDIT",
				value1 = "customId");
		}
	}

	@description = "LPS-97882: Validate if each A/B Test is related for one experience, if the user changes between the experience, the context about the A/B Test changes too"
	@priority = 4
	test SwitchExperienceSelected {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Create a new A/B test for the Default experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Select the new experience") {
			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Assert ceate AB Test icon is present") {
			AssertElementPresent(
				key_text = "Create Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-97882: Validate if each A/B Test is related for one experience, if the user changes between the site pages, the context about the A/B Test changes too"
	@priority = 3
	test SwitchSitePage {
		property portal.acceptance = "true";

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");
		}

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");

			ABTest.openABTestPanel();

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Click on the A/B Test icon and Assert ceate AB Test icon is present") {
			ABTest.openABTestPanel();

			AssertElementPresent(
				key_text = "Create Test",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-119475: When a user has selected an element, s/he can enter a different ID in the Element ID box and press enter again, so the element is highlighted and gets selected"
	@priority = 3
	test TypeDifferentID {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.gotoDuplicate(fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Get the element ID from buttons") {
			var idbutton = ABTest.takeElementID();
			var idbutton2 = ABTest.takeElementID(key_index = 2);
		}

		task ("Select the first button as click element") {
			ABTest.selectElementID();
		}

		task ("Change the ID Element") {
			DoubleClick(locator1 = "ABTest#ELEMENT_ID_INPUT");

			KeyPress(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "\BACK_SPACE");

			Type(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton2});

			KeyPress(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "\ENTER");
		}

		task ("Assert the button gets selected") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-119475: When a user enters a valid ID and presses Enter or clicks anywhere outside the box, the element with that ID get highlighted and the element with the ID is selected"
	@priority = 3
	test TypeElementID {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Take the ID Element") {
			var idbutton = ABTest.takeElementID();
		}

		task ("Select element by id ") {
			Click(locator1 = "ABTest#ELEMENT_ID_INPUT");

			Type(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});

			KeyPress(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "\ENTER");
		}

		task ("Assert the button gets selected") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = ${idbutton});
		}
	}

	@description = "LPS-119476: When the user enters the ID of a submit element in the ID Element box and hits enter, the matching element gets highlighted and selected"
	@priority = 3
	test TypeSubmitElementID {
		task ("Add a HTML fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");
		}

		task ("Edit the inline content of HTML fragment") {
			var htmlSnippet = '''
<input type="submit" id="customId" />
		''';

			PageEditor.editFragmentHTML(
				content = ${htmlSnippet},
				fragmentName = "HTML",
				id = "element-html");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test and select clickable element") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Write ID Element") {
			ABTest.writeId(elementId = "customId");

			KeyPress(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "\ENTER");
		}

		task ("Assert the button is highlighted and selected.") {
			AssertTextEquals(
				locator1 = "ABTest#TARGET_LABEL",
				value1 = "Target");

			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "customId");
		}
	}

	@description = "LPS-119475: When a user clicks on the x icon of the selected element, the element gets unselected"
	@priority = 3
	test UnselectSelectedElement {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");
		}

		task ("Select the button as click element") {
			Click(
				key_text = "Select Clickable Element",
				locator1 = "Button#ANY_SECONDARY");

			Click(
				key_index = 1,
				locator1 = "ABTest#SELECT_CLICKABLE_ELEMENT");
		}

		task ("Click on the X icon within the selected element") {
			Click(locator1 = "ABTest#X_BUTTON_TARGET_ID_ELEMENT");
		}

		task ("Assert the ID box is empty") {
			AssertTextEquals.assertValue(
				locator1 = "ABTest#ELEMENT_ID_INPUT",
				value1 = "");
		}
	}

}