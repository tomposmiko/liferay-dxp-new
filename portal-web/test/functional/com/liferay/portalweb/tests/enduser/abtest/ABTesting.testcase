@component-name = "portal-ab-test"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "A/B Test";

	setUp {
		task ("Open Analytics Cloud") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			Navigator.openURL(baseURL = "${analyticsCloudURL}");
		}

		task ("Take token from Analytics Cloud") {
			AnalyticsCloud.loginAnalyticsCloud(
				emailAddress = "test@liferay.com",
				password = "test");

			AnalyticsCloud.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP portal, login and create site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Navigator.openURL();

			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Connect and synchronyze with Analytics Cloud") {
			AnalyticsCloud.syncAnalyticsCloud(siteName = "Test Site Name");
		}

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Navigator.openURL();

		AnalyticsCloud.teardownAnalyticsCloud();

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-101341: Validate if the user has one experience with the AB test in a Running status, the experiences dropdown menu shows the AB test icon and one help hint"
	@ignore = "true"
	@priority = "5"
	test ABTestIconInExperience {

		// TODO LPS-137497 ABTestIconInExperience pending implementation

	}

	@description = "LPS-97882: Validate if the A/B Test icon is not displayed in the control bar, when the user has not the page edit permission"
	@priority = "3"
	test ABTestIconVisibleWithNoPermissions {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Regrole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				password = "test",
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert AB Test icon is not present") {
			AssertElementNotPresent(locator1 = "ABTest#AB_TEST_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONRole.deleteRole(roleTitle = "Roles Regrole Name");
		}
	}

	@description = "LPS-97882: Validate if the A/B Test icon is displayed in the control bar, when the user has the page edit permission"
	@priority = "3"
	test ABTestIconVisibleWithPermissions {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Regrole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				password = "test",
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert AB Test icon is present") {
			AssertElementPresent(locator1 = "ABTest#AB_TEST_BUTTON");
		}

		task ("Login with Test user, to allow tearDown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONRole.deleteRole(roleTitle = "Roles Regrole Name");
		}
	}

	@description = "LPS-119475: When a user accesses the AB testing panel while a click goal test is running, the Change clickable element button don't show and the ID element box isn't enabled for edition, but the eye button will work normally"
	@ignore = "true"
	@priority = "3"
	test AssertChangeClickableIDBoxNotEnabled {

		// TODO LPS-137500 AssertChangeClickableIDBoxNotEnabled pending implementation

	}

	@description = "LPS-97195: Validate if, in the list of the variant for A/B Test, the user have the options to edit the name and delete"
	@priority = "3"
	test AssertEditDeleteVarianOptions {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Open the three dots menu for the variant and assert Edit and Delete appear") {
			Click(
				key_index = "1",
				locator1 = "ABTest#VARIANT_DROPDOWN");

			AssertElementPresent(locator1 = "ABTest#DELETE_VARIANT_BUTTON");

			AssertElementPresent(locator1 = "ABTest#EDIT_VARIANT_BUTTON");
		}

		task ("Run and terminate the AB test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-97194: Validate if the goal input test for the AB Test appears when the user tries to edit one AB Test"
	@priority = "3"
	test AssertGoalInputWhenEdit {
		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Edit test A/B and assert that user can edit the goal input") {
			ABTest.editOrDeleteABTest(value = "Edit");

			AssertElementPresent(
				locator1 = "ABTest#CHANGE_SELECT_GOAL",
				value = "Bounce Rate");

			Click(locator1 = "ABTest#SAVE_AB_TEST_BUTTON");

			Alert.viewSuccessMessage();

			ABTest.runTest();
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-97882: Validate if, when the user tries to edit an existing A/B Test, after edit the mandatory information, A/B Test sidebar appears with the A/B Testing configuration"
	@priority = "3"
	test ChangesAppliedAfterEdit {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B, modify mandatory values and save") {
			ABTest.editOrDeleteABTest(value = "Edit");

			Click(locator1 = "ABTest#AB_TEST_TITLE_FIELD");

			Type(
				locator1 = "ABTest#AB_TEST_TITLE_FIELD",
				value1 = "AB test title 2");

			Select(
				locator1 = "ABTest#CHANGE_SELECT_GOAL",
				value1 = "Click");

			Click(locator1 = "ABTest#SAVE_AB_TEST_BUTTON");
		}

		task ("Assert the changes have been applied") {
			AssertTextEquals(
				key_title = "AB test title 2",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title 2");

			AssertTextEquals(
				key_name = "Click",
				locator1 = "ABTest#AB_TEST_DETAILS_FIELD",
				value1 = "Click");
		}

		task ("Delete AB Test") {
			ABTest.editOrDeleteABTest(value = "Delete");
		}
	}

	@description = "LPS-97882: Validate if when the user is editing the A/B Testing, he can press the cancel button on the modal, and the changes in the A/B Testing is not saved"
	@priority = "4"
	test ChangesNotAppliedAfterCancel {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B, modify mandatory values and Cancel") {
			ABTest.editOrDeleteABTest(value = "Edit");

			Click(locator1 = "ABTest#AB_TEST_TITLE_FIELD");

			Type(
				locator1 = "ABTest#AB_TEST_TITLE_FIELD",
				value1 = "AB test title 2");

			Select(
				locator1 = "ABTest#CHANGE_SELECT_GOAL",
				value1 = "Click");

			Click(locator1 = "ABTest#CANCEL_VARIANT_NAME_BUTTON");
		}

		task ("Assert the changes have not been applied") {
			AssertTextEquals(
				key_title = "AB test title",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title");

			AssertTextEquals(
				key_name = "Bounce Rate",
				locator1 = "ABTest#AB_TEST_DETAILS_FIELD",
				value1 = "Bounce Rate");
		}

		task ("Delete AB Test") {
			ABTest.editOrDeleteABTest(value = "Delete");
		}
	}

	@description = "LPS-97882: Validate if when the user is editing the A/B Testing, he can close the modal, and the changes in the A/B Testing is not saved"
	@priority = "3"
	test ChangesNotAppliedAfterCloseModal {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B, modify mandatory values and close") {
			ABTest.editOrDeleteABTest(value = "Edit");

			Click(locator1 = "ABTest#AB_TEST_TITLE_FIELD");

			Type(
				locator1 = "ABTest#AB_TEST_TITLE_FIELD",
				value1 = "AB test title 2");

			Select(
				locator1 = "ABTest#CHANGE_SELECT_GOAL",
				value1 = "Click");

			Click(locator1 = "ABTest#CLOSE_BUTTON");
		}

		task ("Assert that changes have not been applied") {
			AssertTextEquals(
				key_title = "AB test title",
				locator1 = "ABTest#AB_TEST_TITLE_DXP",
				value1 = "AB test title");

			AssertTextEquals(
				key_name = "Bounce Rate",
				locator1 = "ABTest#AB_TEST_DETAILS_FIELD",
				value1 = "Bounce Rate");
		}

		task ("Delete AB Test") {
			ABTest.editOrDeleteABTest(value = "Delete");
		}
	}

	@description = "LPS-101055: Validate if the A/B test Icon appears in the Liferay DXP bundle"
	@ignore = "true"
	@priority = "3"
	test CheckABTestIconDXP {

		// TODO LPS-137490 CheckABTestIconDXP pending implementation

	}

	@description = "LPS-101055: Validate if the A/B test panel is shown in content pages when AC is configured"
	@ignore = "true"
	@priority = "3"
	test CheckABTestPanelAtContentPages {

		// TODO LPS-137490 CheckABTestPanelAtContentPages pending implementation

	}

	@description = "LPS-101055: Validate if the A/B test panel is shown not shown in widget pages"
	@ignore = "true"
	@priority = "3"
	test CheckABTestPanelAtWidgetPages {

		// TODO LPS-137490 CheckABTestPanelAtWidgetPages pending implementation

	}

	@description = "LPS-100945: Validate if the Button components have the ID"
	@ignore = "true"
	@priority = "3"
	test CheckButtonElementId {

		// TODO LPS-137487 CheckButtonElementId pending implementation

	}

	@description = "LPS-96791: Validate if A tooltip Click Element to Set as Click Target for your Goal appears when the user clicks on Set Target Button"
	@ignore = "true"
	@priority = "3"
	test CheckClickElementTooltip {

		// TODO LPS-137486 CheckClickElementTooltip pending implementation

	}

	@description = "LPS-101167: Validate if the image for the empty state appears"
	@ignore = "true"
	@priority = "3"
	test CheckEmptyStateImage {

		// TODO LPS-137493 CheckEmptyStateImage pending implementation

	}

	@description = "LPS-101055: Validate if the A/B test panel is hidden when the user clicks the "Hide A/B Test Panel" button"
	@ignore = "true"
	@priority = "4"
	test CheckHiddenABTestPanel {

		// TODO LPS-137490 CheckHiddenABTestPanel pending implementation

	}

	@description = "LPS-101167: Validate if the image for the running state appears"
	@ignore = "true"
	@priority = "3"
	test CheckRunningStateImage {

		// TODO LPS-137493 CheckRunningStateImage pending implementation

	}

	@description = "LPS-96781: Validate if, when the A/B Testing changes in the Liferay DXP, information about the Liferay DXP context, the changes are reflected in the test in Analytics Cloud"
	@priority = "4"
	test CheckTestChangesInAC {
		property test.name.skip.portal.instance = "ABTesting#CheckTestChangesInAC";

		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.openABTestInAC();

			ABTest.statusABTestInAC(status = "Test Is Running");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-97195: Validate if the variant for A/B Test that was added on Liferay portal is visible in the Analytics Cloud"
	@priority = "5"
	test CheckVariantAddedInAC {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Check the info is correct in Analytics Cloud and run the test") {
			ABTest.checkVariantAnalyticsCloud(variantNames = "Variant name");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-97195: Validate if the variant for A/B Test that was deleted on Liferay portal is visible in the Analytics Cloud"
	@priority = "4"
	test CheckVariantDeletedInAC {
		property test.name.skip.portal.instance = "ABTesting#CheckVariantDeletedInAC";

		task ("Create AB test and create 2 variants") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Delete one variant and run AB Test") {
			ABTest.deleteVariant();

			ABTest.runTest();
		}

		task ("Check that exist only one variant in Analytics Cloud") {
			Click(locator1 = "ABTest#VIEW_DATA_ANALYTICS_CLOUD_BUTTON");

			SelectWindow(locator1 = "name=undefined");

			if (IsElementPresent(locator1 = "AnalyticsCloudConnection#ANALYTICS_CLOUD_USER_LOGIN_FIELD")) {
				AnalyticsCloud.loginAnalyticsCloud(
					emailAddress = "test@liferay.com",
					password = "test");
			}

			AssertElementPresent(
				key_index = "2",
				locator1 = "ABTest#REVIEW_VARIANTS_ANALYTICS_CLOUD",
				name = "Variant name 2");

			AssertElementNotPresent(
				key_index = "3",
				locator1 = "ABTest#REVIEW_VARIANTS_ANALYTICS_CLOUD",
				name = "Variant name");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-97195: Validate if the variant for A/B Test that was edited on Liferay portal is visible in the Analytics Cloud"
	@priority = "4"
	test CheckVariantEditedInAC {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Edit variant") {
			ABTest.editVariantName();

			Click(locator1 = "ABTest#VARIANT_NAME_FIELD");

			Type(
				locator1 = "ABTest#VARIANT_NAME_FIELD",
				value1 = "Variant name 2");

			Click(locator1 = "ABTest#SAVE_VARIANT_NAME_BUTTON");
		}

		task ("Assert that variant name is changed in DXP and run the test") {
			ABTest.viewVariantName(variantNames = "Variant name 2");
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkVariantAnalyticsCloud(variantNames = "Variant name 2");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475: When a user has selected an element and clicks on the x icon within the ID box, the ID box gets empty and the Change clickable element button changes into Select clickable element"
	@ignore = "true"
	@priority = "3"
	test ClearIDBox {

		// TODO LPS-137500 ClearIDBox pending implementation

	}

	@description = "Validate if the user can create an A/B Test by Bounce rate"
	@priority = "5"
	@uitest
	test CreateABTestByBounceRate {
		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkAnalyticsCloudInfo(ABtestTitle = "AB test title");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475 Validate if the user can create an A/B Test by Click"
	@priority = "5"
	@uitest
	test CreateABTestByClick {
		task ("Edit the Content page to add a button fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create AB test, create variant and run the test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");

			ABTest.selectElementID();

			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();
		}

		task ("Check the info is correct in Analytics Cloud") {
			ABTest.checkAnalyticsCloudInfo(ABtestTitle = "AB test title");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Terminate the AB test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475 Validate if, in the AB Test by Click, the sidebar informs the user that the element id is mandatory"
	@priority = "3"
	@uitest
	test CreateABTestByClickInvalidId {
		task ("Create AB test, write an invalid ID for the element and run the test") {
			ABTest.createABTest(
				goal = "Click",
				testTitle = "AB test title");

			ABTest.writeId(elementId = "invalidID");

			ABTest.runTest();
		}

		task ("Assert an error message is displayed") {
			AssertElementPresent(locator1 = "ABTest#INVALID_ID_MESSAGE");
		}
	}

	@description = "LPS-86285 Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control if the user add variants and remove all variants"
	@priority = "4"
	@uitest
	test CreateABTestRunWithDeletedVariants {
		task ("Create AB test, create variant, delete variant and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.deleteVariant();

			ABTest.runTest();
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
				value1 = "A variant needs to be created.");
		}
	}

	@description = "LPS-86285 Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control"
	@priority = "5"
	@uitest
	test CreateABTestRunWithNoVariants {
		task ("Create AB test and run the test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.runTest();
		}

		task ("Assert an error message is displayed") {
			AssertTextEquals(
				locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
				value1 = "A variant needs to be created.");
		}
	}

	@description = "LPS-97195: Validate if the user can create a variant for A/B Test with the same name that already exists with success"
	@priority = "4"
	test CreateVariantSameName {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Create two variants whith the same name and view success message") {
			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name");

			Alert.viewSuccessMessage();
		}

		task ("Assert that variants where created") {
			ABTest.viewVariantName(variantNames = "Variant name,Variant name");
		}

		task ("Run and terminate the AB test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-104203: Validate if in the AB Test, when the user delete the clickable element that was set, the warning alert appears"
	@ignore = "true"
	@priority = "4"
	test DeleteClickableElementWarning {

		// TODO LPS-137498 DeleteClickableElementWarning pending implementation

	}

	@description = "LPS-98829: Validate if the ab test in History tab can be deleted"
	@ignore = "true"
	@priority = "3"
	test DeleteHistoryTab {

		// TODO LPS-137495 DeleteHistoryTab pending implementation

	}

	@description = "LPS-99225: Validate if the admin can delete a page with an A/B test in terminated status"
	@ignore = "true"
	@priority = "3"
	test DeletePageABTestTerminated {

		// TODO LPS-137491 DeletePageABTestTerminated pending implementation

	}

	@description = "LPS-99225: Validate if the admin can delete a segment in an experience with an A/B test in the draft status"
	@ignore = "true"
	@priority = "3"
	test DeleteSegmentABTestDraft {

		// TODO LPS-137491 DeleteSegmentABTestDraft pending implementation

	}

	@description = "LPS-99225: Validate if the admin can delete a segment in an experience with an A/B test in terminated status"
	@ignore = "true"
	@priority = "3"
	test DeleteSegmentABTestTerminated {

		// TODO LPS-137491 DeleteSegmentABTestTerminated pending implementation

	}

	@description = "LPS-97195: Validate if a message will appear asking if the user wants to delete a variant for A/B Test and he can delete with success"
	@priority = "4"
	test DeleteVariant {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Delete variant") {
			ABTest.deleteVariant();
		}

		task ("Assert that there is no variant") {
			AssertTextEquals(
				locator1 = "ABTest#REVIEW_NO_HAVE_VARIANTS",
				value1 = "Create at least one variant to run the test.");
		}

		task ("Run and terminate AB Test") {
			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-97195: Validate if the user not will delete a variant for A/B Test, if when he will delete and he presses the cancel button"
	@priority = "4"
	test DeleteVariantCancel {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Try to delete variant") {
			Click(
				key_index = "1",
				locator1 = "ABTest#VARIANT_DROPDOWN");

			ClickNoError(locator1 = "ABTest#DELETE_VARIANT_BUTTON");

			Confirm.dismissAlert();
		}

		task ("Assert that variant is not deleted") {
			ABTest.viewVariantName(variantNames = "Variant name");
		}

		task ("Run and terminate the AB test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-101341: Validate if an alert appears when the user tries to delete an experience with an AB Test in a draft mode, the user should be able to delete the experience"
	@ignore = "true"
	@priority = "4"
	test DeletExperienceWithDraftABTest {

		// TODO LPS-137497 DeletExperienceWithDraftABTest pending implementation

	}

	@description = "LPS-101341: Validate if an alert appears when the user tries to delete an experience with an AB Test in a draft mode, the user should be able to cancel the deletion of the experience"
	@ignore = "true"
	@priority = "3"
	test DeletExperienceWithDraftABTestCancel {

		// TODO LPS-137497 DeletExperienceWithDraftABTestCancel pending implementation

	}

	@description = "LPS-96791: Validate if the user can edit the target"
	@ignore = "true"
	@priority = "5"
	test EditClickElementTarget {

		// TODO LPS-137486 EditClickElementTarget pending implementation

	}

	@description = "LPS-101341: Validate if when the user will edit some Experience with an AB Test in a Terminated status, the system not will show any information about AB Test"
	@ignore = "true"
	@priority = "4"
	test EditExperienceAfterTerminatedABTest {

		// TODO LPS-137497 EditExperienceAfterTerminatedABTest pending implementation

	}

	@description = "LPS-103334: Validate if the AB Test is in the status draft, the experience about the AB Test is active is in Edition Mode"
	@ignore = "true"
	@priority = "5"
	test EditExperienceWithDraftABTest {

		// TODO LPS-137496 EditExperienceWithDraftABTest pending implementation

	}

	@description = "LPS-97882: Validate if, when the user tries to edit an existing A/B Test, a modal is opened requiring some initial fields information"
	@priority = "3"
	test EditRequiredInfo {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Open modal Edit test A/B and assert that user can edit the goal input") {
			ABTest.editOrDeleteABTest(value = "Edit");

			AssertElementPresent(locator1 = "ABTest#EDIT_AB_TEST_MODAL");

			AssertElementPresent(locator1 = "ABTest#AB_TEST_TITLE_FIELD");

			AssertElementPresent(locator1 = "ABTest#CHANGE_SELECT_GOAL");

			Click(locator1 = "ABTest#SAVE_AB_TEST_BUTTON");
		}

		task ("Delete AB Test") {
			ABTest.editOrDeleteABTest(value = "Delete");
		}
	}

	@description = "LPS-97195: Validate if the user can edit a variant for A/B Test with success"
	@priority = "5"
	test EditVariant {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Edit variant") {
			ABTest.viewVariantName(variantNames = "Variant name,Variant name 2");

			ABTest.editVariantName(key_index = "2");

			Click(locator1 = "ABTest#VARIANT_NAME_FIELD");

			Type(
				locator1 = "ABTest#VARIANT_NAME_FIELD",
				value1 = "Variant name 3");

			Click(locator1 = "ABTest#SAVE_VARIANT_NAME_BUTTON");
		}

		task ("Assert that variant name is changed") {
			ABTest.viewVariantName(variantNames = "Variant name,Variant name 3");
		}

		task ("Run and terminate AB Test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-97195: Validate if the user can cancel the creation of one variant for A/B Test, and the data that he inputs during the creation is discarded"
	@priority = "3"
	test EditVariantCancel {
		task ("Create AB test") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Try to create variant") {
			Click(locator1 = "ABTest#CREATE_VARIANT_BUTTON");

			Click(locator1 = "ABTest#VARIANT_NAME_FIELD");

			Type(
				locator1 = "ABTest#VARIANT_NAME_FIELD",
				value1 = "Variant name");

			Click(locator1 = "ABTest#CANCEL_VARIANT_NAME_BUTTON");
		}

		task ("Assert the variant has not been created") {
			AssertTextEquals(
				locator1 = "ABTest#REVIEW_NO_HAVE_VARIANTS",
				value1 = "Create at least one variant to run the test.");
		}

		task ("Run and terminate AB Test") {
			ABTest.createVariant(variantName = "Variant name");

			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-99349: Validate if the user can edit the variant for A/B Test content with success"
	@ignore = "true"
	@priority = "5"
	test EditVariantContent {

		// TODO LPS-137481 EditVariantContent pending implementation

	}

	@description = "LPS-99349: Validate if the user can cancel the edition of one variant for A/B Test, and the data that he inputs during the creation is discarded"
	@ignore = "true"
	@priority = "4"
	test EditVariantContentCancel {

		// TODO LPS-137481 EditVariantContentCancel pending implementation

	}

	@description = "LPS-97195: Validate if the user can edit a variant for A/B Test with the same name that already exists with success"
	@priority = "3"
	test EditVariantSameName {
		task ("Create AB test and create variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Edit variant") {
			ABTest.viewVariantName(variantNames = "Variant name,Variant name 2");

			ABTest.editVariantName(key_index = "2");

			Click(locator1 = "ABTest#VARIANT_NAME_FIELD");

			Type(
				locator1 = "ABTest#VARIANT_NAME_FIELD",
				value1 = "Variant name");

			Click(locator1 = "ABTest#SAVE_VARIANT_NAME_BUTTON");
		}

		task ("Assert that variant name is changed") {
			ABTest.viewVariantName(variantNames = "Variant name,Variant name");
		}

		task ("Run and terminate AB Test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475: When a user clicks on the "eye" button, by click or by ID, the page scrolls if needed and shows the selected element highlighted"
	@ignore = "true"
	@priority = "3"
	test EyeButton {

		// TODO LPS-137500 EyeButton pending implementation

	}

	@description = "LPS-101055: Validate if the "Hide A/B Test Panel" button is displayed when AC is not connected"
	@ignore = "true"
	@priority = "3"
	test HideABTestPanel {

		// TODO LPS-137490 HideABTestPanel pending implementation

	}

	@description = "LPS-98829: Validate if the History tab appears with the list ordered by modified date DESC"
	@ignore = "true"
	@priority = "3"
	test HistoryTabListedDescModifiedDate {

		// TODO LPS-137495 HistoryTabListedDescModifiedDate pending implementation

	}

	@description = "LPS-119475: When a user selects any highlighted element in the page, the ID of the selected element shows in the ID box"
	@ignore = "true"
	@priority = "3"
	test IDShownInTheBox {

		// TODO LPS-137500 IDShownInTheBox pending implementation

	}

	@description = "LPS-96787: Validate if the Liferay NOT receives the notification when the test status is changed by the same user that created the test"
	@ignore = "true"
	@priority = "3"
	test NoNotificationAfterChangesSameUser {

		// TODO LPS-137489 NoNotificationAfterChangesSameUser pending implementation

	}

	@description = "LPS-96787: Validate if the Liferay receives the notification when the AB Test status is changes in Analytics Cloud"
	@ignore = "true"
	@priority = "3"
	test NotificationAfterChangesInAC {

		// TODO LPS-137489 NotificationAfterChangesInAC pending implementation

	}

	@description = "LPS-96787: Validate if in the notification message has one link to the content page of the test, with the AB test panel open in that test"
	@ignore = "true"
	@priority = "3"
	test NotificationLinkToContentPage {

		// TODO LPS-137489 NotificationLinkToContentPage pending implementation

	}

	@description = "LPS-103334: Validate if the AB Test is in the status running, the experience about the AB Test is active is in Non-Edition Mode"
	@ignore = "true"
	@priority = "5"
	test NotPossibleToEditExperienceWithRunningABTest {

		// TODO LPS-137496 NotPossibleToEditExperienceWithRunningABTest pending implementation

	}

	@description = "LPS-97882: Validate if, when the A/B Test icon is pressed, it calls the function to open or close the A/B Test sidebar"
	@priority = "3"
	test PanelOpenCloseAfterClickIcon {
		task ("Click on the A/B Test icon and Assert the A/B Test panel is opened") {
			if (IsElementPresent(locator1 = "ABTest#AB_TEST_SIDE_BAR")) {
				Click(locator1 = "ABTest#AB_TEST_BUTTON");
			}
			Click(locator1 = "ABTest#AB_TEST_BUTTON");

			AssertElementPresent(locator1 = "ABTest#AB_TEST_SIDE_BAR");
		}

		task ("Click on the A/B Test icon and Assert the A/B Test panel is closed") {
			Click(locator1 = "ABTest#AB_TEST_BUTTON");

			AssertNotVisible(locator1 = "ABTest#AB_TEST_SIDE_BAR");
		}
	}

	@description = "LPS-99225: Validate if the admin can reassign a segment in an experience with an A/B test in the draft status"
	@ignore = "true"
	@priority = "3"
	test ReassignSegmentABTestDraft {

		// TODO LPS-137491 ReassignSegmentABTestDraft pending implementation

	}

	@description = "LPS-99225: Validate if the admin cannot reassign a segment in an experience with an A/B test in running status"
	@ignore = "true"
	@priority = "4"
	test ReassignSegmentABTestRunning {

		// TODO LPS-137491 ReassignSegmentABTestRunning pending implementation

	}

	@description = "LPS-99225: Validate if the admin can rename a segment in an experience with an A/B test in the draft status"
	@ignore = "true"
	@priority = "3"
	test RemaneSegmentABTestDraft {

		// TODO LPS-137491 RemaneSegmentABTestDraft pending implementation

	}

	@description = "LPS-96791: Validate if the user can remove the target"
	@ignore = "true"
	@priority = "5"
	test RemoveClickElementTarget {

		// TODO LPS-137486 RemoveClickElementTarget pending implementation

	}

	@description = "LPS-99225: Validate if the admin cannot rename a segment in an experience with an A/B test in running status"
	@ignore = "true"
	@priority = "3"
	test RenameSegmentABTestRunning {

		// TODO LPS-137491 RenameSegmentABTestRunning pending implementation

	}

	@description = "LPS-99225: Validate if the admin can rename a segment in an experience with an A/B test in terminated status"
	@ignore = "true"
	@priority = "3"
	test RenameSegmentABTestTerminated {

		// TODO LPS-137491 RenameSegmentABTestTerminated pending implementation

	}

	@description = "LPS-97196: Validate if when the user is in the "Review and Start Test" screen, all data is discarded after the user clicks on cancel button"
	@priority = "4"
	test ReviewAndStartCancel {
		task ("Create AB test, create variant and delete variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Click on Review and Start Test Button and click cancel button") {
			Click(locator1 = "ABTest#REVIEW_AND_RUN_TEST_BUTTON");

			Click(locator1 = "ABTest#CANCEL_VARIANT_NAME_BUTTON");
		}

		task ("Assert the test status is not running") {
			AssertTextEquals(
				locator1 = "ABTest#REVIEW_AND_RUN_TEST_BUTTON",
				value1 = "Review and Run Test");
		}

		task ("Run and terminate AB Test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-97196: Validate if when the user is in the "Review and Start Test" screen, all data is discarded after the user clicks in closed button"
	@priority = "3"
	test ReviewAndStartClose {
		task ("Create AB test, create variant and delete variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");
		}

		task ("Click on Review and Start Test Button and click close button") {
			Click(locator1 = "ABTest#REVIEW_AND_RUN_TEST_BUTTON");

			Click(locator1 = "ABTest#CLOSE_BUTTON");
		}

		task ("Assert the test status is not running") {
			AssertTextEquals(
				locator1 = "ABTest#REVIEW_AND_RUN_TEST_BUTTON",
				value1 = "Review and Run Test");
		}

		task ("Run and terminate AB Test") {
			ABTest.runTest();

			ABTest.terminateTest();
		}
	}

	@description = "LPS-97196: Validate if all the information configured in the "Review and Start Test" screen appears correctly after the user clicks on the Run button"
	@priority = "5"
	test ReviewAndStartRunCheckInfo {
		task ("Create AB test, create variant and delete variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Click on Review and Start Test Button") {
			Click(locator1 = "ABTest#REVIEW_AND_RUN_TEST_BUTTON");
		}

		task ("Assert itens at Review and Run Test page") {
			ABTest.viewInfoItems(values = "Control,Variant name,Variant name 2,Confidence Level Required");
		}

		task ("Assert percentage values and Estimated Time to Declare Winner at Review and Run Test page") {
			ABTest.viewInfoItems(values = "34,33,33,95");

			AssertElementPresent(
				key_name = "Estimated Time to Declare Winner",
				key_value = "N/A",
				locator1 = "ABTest#VIEW_ESTIMATED_TIME",
				value1 = "N/A");
		}

		task ("Terminate AB Test") {
			Click(locator1 = "ABTest#RUN_TEST_BUTTON");

			ABTest.terminateTest();
		}
	}

	@description = "LPS-97196: Validate if when the user is in the "Review and Start Test" screen, the sum of all traffic split options should be 100%"
	@priority = "4"
	test ReviewAndStartSum100 {
		task ("Create AB test, create variant and delete variant") {
			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");

			ABTest.createVariant(variantName = "Variant name");

			ABTest.createVariant(variantName = "Variant name 2");
		}

		task ("Click on Review and Start Test Button") {
			Click(locator1 = "ABTest#REVIEW_AND_RUN_TEST_BUTTON");
		}

		task ("Assert the sum values should be 100") {
			ABTest.viewInfoItems(values = "34,33,33");

			Click(locator1 = "ABTest#RUN_TEST_BUTTON");
		}

		task ("Terminate AB Test") {
			ABTest.terminateTest();
		}
	}

	@description = "LPS-119475: When a user has selected an element, the Select clickable element button changes into Change clickable element, and the elements are highlighted"
	@ignore = "true"
	@priority = "3"
	test SelectButtonToChangeClickableElement {

		// TODO LPS-137500 SelectButtonToChangeClickableElement pending implementation

	}

	@description = "LPS-119476: When the ID of a submit element accomplishes all the conditions, the element will be rightly measured in AC"
	@ignore = "true"
	@priority = "4"
	test SubmitElementInAC {

		// TODO LPS-137499 SubmitElementInAC pending implementation

	}

	@description = "LPS-119476: When there's a submit element with no ID, the matching element doesn't show as selectable"
	@ignore = "true"
	@priority = "3"
	test SubmitElementWithNoID {

		// TODO LPS-137499 SubmitElementWithNoID pending implementation

	}

	@description = "LPS-97882: Validate if each A/B Test is related for one experience, if the user changes between the experience, the context about the A/B Test changes too"
	@priority = "4"
	test SwitchExperienceSelected {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Create a new A/B test for the Default experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Select the new experience") {
			ABTest.changeExperienceABTest(experience = "NewAnyoneExperience");
		}

		task ("Assert ceate AB Test icon is present") {
			AssertElementPresent(locator1 = "ABTest#CREATE_TEST_BUTTON");
		}
	}

	@description = "LPS-97882: Validate if each A/B Test is related for one experience, if the user changes between the site pages, the context about the A/B Test changes too"
	@priority = "3"
	test SwitchSitePage {
		property portal.acceptance = "true";

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");
		}

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			Button.clickPublish();
		}

		task ("Create a new A/B test with a new experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");

			if (IsVisible(locator1 = "ABTest#AB_TEST_SIDE_BAR")) {
				Click(locator1 = "ABTest#AB_TEST_BUTTON");
			}
			Click(locator1 = "ABTest#AB_TEST_BUTTON");

			ABTest.changeExperienceABTest(experience = "NewAnyoneExperience");

			ABTest.createABTest(
				goal = "Bounce Rate",
				testTitle = "AB test title");
		}

		task ("Go back to DXP") {
			Navigator.openURL();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Click on the A/B Test icon and Assert ceate AB Test icon is present") {
			if (IsVisible(locator1 = "ABTest#AB_TEST_SIDE_BAR")) {
				Click(locator1 = "ABTest#AB_TEST_BUTTON");
			}
			Click(locator1 = "ABTest#AB_TEST_BUTTON");

			AssertElementPresent(locator1 = "ABTest#CREATE_TEST_BUTTON");
		}
	}

	@description = "LPS-119475: When a user has selected an element, s/he can enter a different ID in the Element ID box and press enter again, so the element is highlighted and gets selected"
	@ignore = "true"
	@priority = "3"
	test TypeDifferentID {

		// TODO LPS-137500 TypeDifferentID pending implementation

	}

	@description = "LPS-119475: When a user enters a valid ID and presses Enter or clicks anywhere outside the box, the element with that ID get highlighted and the element with the ID is selected"
	@ignore = "true"
	@priority = "3"
	test TypeElementID {

		// TODO LPS-137500 TypeElementID pending implementation

	}

	@description = "LPS-119476: When the user enters the ID of a submit element in the ID Element box and hits enter, the matching element gets highlighted and selected"
	@ignore = "true"
	@priority = "3"
	test TypeSubmitElementID {

		// TODO LPS-137499 TypeSubmitElementID pending implementation

	}

	@description = "LPS-119475: When a user clicks on the x icon of the selected element, the element gets unselected"
	@ignore = "true"
	@priority = "3"
	test UnselectSelectedElement {

		// TODO LPS-137500 UnselectSelectedElement pending implementation

	}

}