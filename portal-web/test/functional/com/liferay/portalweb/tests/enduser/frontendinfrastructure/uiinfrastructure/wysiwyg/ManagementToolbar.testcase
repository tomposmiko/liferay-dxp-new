@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.module.configuration.file.names = "com.liferay.document.library.web.internal.configuration.FFManagementToolbarConfiguration.config:com.liferay.frontend.taglib.clay.internal.configuration.FFManagementToolbarConfiguration.config";
	property osgi.module.configurations = "enableDesignImprovements=&quot;true&quot;:showDesignImprovements=&quot;true&quot;";
	property osgi.modules.includes = "frontend-taglib-clay-sample-web";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Management Toolbar";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Add Clay Sample Portlet") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page",
				widgetName = "Clay Sample");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page",
				layoutTemplate = "1 Column");

			Navigator.gotoPage(pageName = "Clay Sample Test Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page");
		}
	}

	@description = "LPS-147404. Assert the more actions button is displayed"
	@priority = "5"
	test MoreActionsButtonCanRender {
		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Assert the 'more actions' button is displayed") {
			AssertElementPresent(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Assert all the actions are displayed as icon and text buttons") {
			AssertElementPresent(
				key_action = "Download",
				key_icon = "download",
				locator1 = "ManagementBar#ICON_AND_TEXT_ACTION_BUTTON");

			AssertElementPresent(
				key_action = "Delete",
				key_icon = "trash",
				locator1 = "ManagementBar#ICON_AND_TEXT_ACTION_BUTTON");
		}
	}

	@description = "LPS-147832. Assert the more actions button can display quick actions"
	@priority = "5"
	test MoreActionsButtonRenderQuickActions {
		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Click on 'more actions' button") {
			Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Assert quick actions are displayed") {
			AssertElementPresent(
				key_action = "Edit",
				locator1 = "ManagementBar#QUICK_ACTION_DROPDOWN_ITEM");

			AssertElementPresent(
				key_action = "Download",
				locator1 = "ManagementBar#QUICK_ACTION_DROPDOWN_ITEM");

			AssertElementPresent(
				key_action = "Delete",
				locator1 = "ManagementBar#QUICK_ACTION_DROPDOWN_ITEM");
		}
	}

	@description = "LPS-147864. Assert the New button is displayed as a text button"
	@priority = "5"
	test NewButtonRender {
		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Assert the new button is displayed as a text button") {
			AssertTextEquals(
				locator1 = "ManagementBar#NEW_BUTTON",
				value1 = "New");
		}
	}

	@description = "LPS-147865. Assert the new button is displayed as an icon button in responsive mode"
	@priority = "5"
	test ResponsiveModeNewButtonAsIconButton {
		task ("Set window size to phone size") {
			SetWindowSize(value1 = "360,720");
		}

		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Assert the new button is displayed as an icon button") {
			ScrollWebElementIntoView(locator1 = "ManagementBar#NEW_BUTTON_MOBILE");

			Pause(locator1 = "3000");

			AssertElementPresent(locator1 = "ManagementBar#NEW_BUTTON_MOBILE");

			AssertTextNotEquals(
				locator1 = "ManagementBar#NEW_BUTTON",
				value1 = "New");
		}
	}

	@description = "LPS-147866. Assert the tooltip message is displayed when hovered over the new button in responsive mode"
	@priority = "3"
	test ResponsiveModeNewButtonTooltip {
		task ("Set window size to phone size") {
			SetWindowSize(value1 = "360,720");
		}

		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Hover over the new button") {
			ScrollWebElementIntoView(locator1 = "ManagementBar#NEW_BUTTON_MOBILE");

			Pause(locator1 = "3000");

			MouseOver(locator1 = "ManagementBar#NEW_BUTTON_MOBILE");
		}

		task ("Assert tooltip message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#TOOLTIP",
				value1 = "New");
		}
	}

	@description = "LPS-147844. Assert the tooltip message is displayed when hovered over the view button"
	@priority = "3"
	test ViewButtonCanDisplayTooltip {
		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Hover over the view button") {
			MouseOver(
				key_text = "caret-double",
				locator1 = "ManagementBar#VIEW_BUTTON");
		}

		task ("Assert tooltip message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#TOOLTIP",
				value1 = "Show View Options");
		}
	}

	@description = "LPS-147839. Assert the view button displays a double caret icon"
	@priority = "5"
	test ViewButtonCanRenderDoubleCaret {
		task ("Navigate to Management Toolbars tab") {
			Navigator.gotoNavTab(navTab = "Management Toolbars");
		}

		task ("Assert the view button also has a double caret icon") {
			AssertElementPresent(
				key_text = "cards",
				locator1 = "ManagementBar#VIEW_BUTTON");

			AssertElementPresent(
				key_text = "caret-double",
				locator1 = "ManagementBar#VIEW_BUTTON");
		}
	}

}