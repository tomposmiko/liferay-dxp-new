@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12141 | Test Summary: Request search keywords using all parameters"
	@priority = "3"
	test RequestKeywordsUsingAllParameters {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingAllParameters";

		var groupId = JSONGroupSetter.setGroupId(groupName = "Guest");
		var keyword = "all parameters";
		var parameters = "size=10&displayLanguageId=en-US&page=0&groupId=${groupId}&sort=counts,desc,lastModifiedDate,desc";

		task ("Go to Server Administration") {
			ServerAdministration.openServerAdmin();
		}

		task ("Get Faro Backend URL") {
			var faroBackendURL = ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendURL");
		}

		task ("Get OSB-Asah-Faro-Backend-Security-Signature") {
			var osbAsahFaroBackendSS = ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendSecuritySignature");
		}

		task ("Get OSB-Asah-Project-Id") {
			var osbAsahProjectId = ACApi.getSearchHeaderValues(header = "liferayAnalyticsProjectId");
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			SearchPortlets.searchEmbedded(searchTerm = "${keyword}");
		}

		task ("Run curl command to get keyword results") {
			ACApi.getSearchKeywords(
				faroBackendURL = "${faroBackendURL}",
				osbAsahFaroBackendSS = "${osbAsahFaroBackendSS}",
				osbAsahProjectId = "${osbAsahProjectId}",
				parameters = "${parameters}");
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = "${keyword}");
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12142 | Test Summary: Fetch keywords without optional parameters"
	@priority = "3"
	test RequestKeywordsUsingNoParameters {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingNoParameters";

		var keyword1 = "without optional parameters 1";
		var keyword2 = "without optional parameters 2";

		task ("Go to Server Administration") {
			ServerAdministration.openServerAdmin();
		}

		task ("Get Faro Backend URL") {
			var faroBackendURL = ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendURL");
		}

		task ("Get OSB-Asah-Faro-Backend-Security-Signature") {
			var osbAsahFaroBackendSS = ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendSecuritySignature");
		}

		task ("Get OSB-Asah-Project-Id") {
			var osbAsahProjectId = ACApi.getSearchHeaderValues(header = "liferayAnalyticsProjectId");
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			for (var keyword : list "${keyword1},${keyword2}") {
				SearchPortlets.searchEmbedded(searchTerm = "${keyword}");
			}
		}

		task ("Run curl command without optional parameters to get keyword results") {
			ACApi.getSearchKeywords(
				faroBackendURL = "${faroBackendURL}",
				osbAsahFaroBackendSS = "${osbAsahFaroBackendSS}",
				osbAsahProjectId = "${osbAsahProjectId}");
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = "${keyword1}");
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(
				expected = "${keyword2}",
				keywordPosition = "1");
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12146 | Test Summary: Fetch keywords with size parameter "
	@priority = "3"
	test RequestKeywordsUsingSize {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingSize";

		var keyword1 = "with size parameters 1";
		var keyword2 = "with size parameters 2";
		var keyword3 = "with size parameters 3";
		var parameters = "size=2&sort=lastModifiedDate,desc";
		var size = "2";

		task ("Go to Server Administration") {
			ServerAdministration.openServerAdmin();
		}

		task ("Get Faro Backend URL") {
			var faroBackendURL = ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendURL");
		}

		task ("Get OSB-Asah-Faro-Backend-Security-Signature") {
			var osbAsahFaroBackendSS = ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendSecuritySignature");
		}

		task ("Get OSB-Asah-Project-Id") {
			var osbAsahProjectId = ACApi.getSearchHeaderValues(header = "liferayAnalyticsProjectId");
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			for (var keyword : list "${keyword1},${keyword2},${keyword3}") {
				SearchPortlets.searchEmbedded(searchTerm = "${keyword}");
			}
		}

		task ("Run curl command to get keyword results") {
			ACApi.getSearchKeywords(
				faroBackendURL = "${faroBackendURL}",
				osbAsahFaroBackendSS = "${osbAsahFaroBackendSS}",
				osbAsahProjectId = "${osbAsahProjectId}",
				parameters = "${parameters}");
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = "${keyword3}");
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(
				expected = "${keyword2}",
				keywordPosition = "1");
		}

		task ("Assert response does not return keyword") {
			ACApi.assertSearchKeywordNotPresent(
				expected = "${keyword1}",
				keywordPosition = "2");
		}
	}

}