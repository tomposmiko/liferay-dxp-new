@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12141 | Test Summary: Request search keywords using all parameters"
	@priority = 3
	test RequestKeywordsUsingAllParameters {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingAllParameters";

		var groupId = JSONGroupSetter.setGroupId(groupName = "Guest");
		var keyword = "all parameters";
		var parameters = "size=10\&displayLanguageId=en-US\&page=0\&groupId=${groupId}\&sort=counts,desc,lastModifiedDate,desc";

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			SearchPortlets.searchEmbedded(searchTerm = ${keyword});
		}

		task ("Run curl command to get keyword results") {
			ACApi.getSearchKeywords(parameters = ${parameters});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = ${keyword});
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12143 | Test Summary: Fetch keywords with displayLanguageId parameter"
	@priority = 3
	test RequestKeywordsUsingDisplayLanguageId {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingDisplayLanguageId";

		var parametersDisplay1 = "size=10\&displayLanguageId=${displayLanguageId1}\&page=0\&sort=counts,desc,lastModifiedDate,desc";
		var parametersDisplay2 = "size=10\&displayLanguageId=${displayLanguageId2}\&page=0\&sort=counts,desc,lastModifiedDate,desc";
		var displayLanguageId1 = "en-US";
		var displayLanguageId2 = "pt-BR";
		var keyword = "cloud";

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Go to the search bar and search for a keyword") {
			SearchPortlets.searchEmbedded(searchTerm = ${keyword});
		}

		task ("Run curl command to get keyword results using languageId = en-US") {
			ACApi.getSearchKeywords(parameters = ${parametersDisplay1});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = ${keyword});
		}

		task ("Assert response returns en-US") {
			ACApi.assertGenericJSONPathResponse(
				apiPath = "search-keywords[0].displayLanguageId",
				expected = ${displayLanguageId1});
		}

		task ("Run curl command to get keyword results using languageId = pt-BR") {
			ACApi.getSearchKeywords(parameters = ${parametersDisplay2});
		}

		task ("Assert response returns empty") {
			ACApi.assertSearchResponse(expected = "");
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12144 | Test Summary: Request search keywords using groupID"
	@priority = 3
	test RequestKeywordsUsingGroupID {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingGroupID";

		HeadlessSite.addSite(siteName = "Site Name");

		var groupId1 = JSONGroupSetter.setGroupId(groupName = "Guest");
		var groupId2 = JSONGroupSetter.setGroupId(groupName = "Site Name");
		var keyword = "general groupid";
		var parametersGroup1 = "groupId=${groupId1}\&sort=counts,desc,lastModifiedDate,desc";
		var parametersGroup2 = "groupId=${groupId2}\&sort=counts,desc,lastModifiedDate,desc";

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Go to the search bar and search for a keyword") {
			SearchPortlets.searchEmbedded(searchTerm = ${keyword});
		}

		task ("Run curl command to get keyword results using group Guest") {
			ACApi.getSearchKeywords(parameters = ${parametersGroup1});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = ${keyword});
		}

		task ("Assert response returns result from group Guest") {
			ACApi.assertGenericJSONPathResponse(
				apiPath = "search-keywords[0].groupId",
				expected = ${groupId1});
		}

		task ("Run curl command to get keyword results using group Site Name") {
			ACApi.getSearchKeywords(parameters = ${parametersGroup2});
		}

		task ("Assert response returns empty") {
			ACApi.assertSearchResponse(expected = "");
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12142 | Test Summary: Fetch keywords without optional parameters"
	@priority = 3
	test RequestKeywordsUsingNoParameters {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingNoParameters";

		var keyword1 = "without optional parameters 1";
		var keyword2 = "without optional parameters 2";

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			for (var keyword : list "${keyword1},${keyword2}") {
				SearchPortlets.searchEmbedded(searchTerm = ${keyword});
			}
		}

		task ("Run curl command without optional parameters to get keyword results") {
			ACApi.getSearchKeywords();
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = ${keyword1});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(
				expected = ${keyword2},
				keywordPosition = 1);
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12145 | Test Summary: Fetch keywords with page parameter"
	@priority = 3
	test RequestKeywordsUsingPage {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingPage";

		var parametersFirstPage = "size=${size}\&page=${firstPage}\&sort=counts,desc,lastModifiedDate,desc";
		var parametersSecondPage = "size=${size}\&page=${secondPage}\&sort=counts,desc,lastModifiedDate,desc";
		var firstKeyword = "workspace";
		var secondKeyword = "analytics";
		var size = 1;
		var firstPage = 0;
		var secondPage = 1;

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Go to the search bar and search for a keyword") {
			for (var keyword : list "${firstKeyword},${secondKeyword}") {
				SearchPortlets.searchEmbedded(searchTerm = ${keyword});
			}
		}

		task ("Run curl command to get keyword results using page = 0") {
			ACApi.getSearchKeywords(parameters = ${parametersFirstPage});
		}

		task ("Assert response returns 0 for page") {
			ACApi.assertGenericJSONPathResponse(
				apiPath = "page.number",
				expected = ${firstPage});
		}

		task ("Assert response returns the second keyword") {
			ACApi.assertSearchResponse(expected = ${secondKeyword});
		}

		task ("Assert response do not return the first keyword") {
			ACApi.assertSearchKeywordNotPresent(
				expected = ${firstKeyword},
				keywordPosition = 1);
		}

		task ("Run curl command to get keyword results using page = 1") {
			ACApi.getSearchKeywords(parameters = ${parametersSecondPage});
		}

		task ("Assert response returns 1 for page") {
			ACApi.assertGenericJSONPathResponse(
				apiPath = "page.number",
				expected = ${secondPage});
		}

		task ("Assert response returns first keyword") {
			ACApi.assertSearchResponse(expected = ${firstKeyword});
		}

		task ("Assert response do not return the second keyword") {
			ACApi.assertSearchKeywordNotPresent(
				expected = ${secondKeyword},
				keywordPosition = 1);
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12146 | Test Summary: Fetch keywords with size parameter "
	@priority = 3
	test RequestKeywordsUsingSize {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingSize";

		var keyword1 = "with size parameters 1";
		var keyword2 = "with size parameters 2";
		var keyword3 = "with size parameters 3";
		var parameters = "size=2\&sort=lastModifiedDate,desc";
		var size = 2;

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			for (var keyword : list "${keyword1},${keyword2},${keyword3}") {
				SearchPortlets.searchEmbedded(searchTerm = ${keyword});
			}
		}

		task ("Run curl command to get keyword results") {
			ACApi.getSearchKeywords(parameters = ${parameters});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = ${keyword3});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(
				expected = ${keyword2},
				keywordPosition = 1);
		}

		task ("Assert response does not return keyword") {
			ACApi.assertSearchKeywordNotPresent(
				expected = ${keyword1},
				keywordPosition = 2);
		}
	}

	@description = "Feature ID: LRAC-12058 | Automation ID: LRAC-12147 | Test Summary: Request search keywords using sort"
	@priority = 3
	test RequestKeywordsUsingSort {
		property test.name.skip.portal.instance = "SearchAPI#RequestKeywordsUsingSort";

		var keyword1 = "first key word";
		var keyword2 = "second key word";
		var parametersLastModifiedDate = "sort=counts,desc,lastModifiedDate,desc";

		task ("Go to DXP and get analytics configuration") {
			ACApi.getAnalyticsConfiguration();
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				pageName = "Home",
				siteName = "guest");
		}

		task ("Type keyword in search bar") {
			for (var keyword : list "${keyword1},${keyword1},${keyword2}") {
				SearchPortlets.searchEmbedded(searchTerm = ${keyword});
			}
		}

		task ("Run curl command to get keyword results") {
			ACApi.getSearchKeywords(parameters = ${parametersLastModifiedDate});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(expected = ${keyword1});
		}

		task ("Assert response returns keyword") {
			ACApi.assertSearchResponse(
				expected = ${keyword2},
				keywordPosition = 1);
		}
	}

}