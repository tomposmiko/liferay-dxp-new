@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name"
			);
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Fragment Name"
			);
		}

		task ("Navigate to fragments admin") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Fragments can be deleted."
	@priority = "5"
	test DeleteFragment {
		property portal.acceptance = "true";

		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Delete the section fragment") {
			FragmentsAdmin.deleteFragment(
				fragmentName = "Fragment Name"
			);
		}

		task ("Navigate to fragments admin") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Assert the section fragment is not present") {
			LexiconEntry.viewNoEntry(rowEntry = "Fragment Name");
		}
	}

	@description = "Fragment collections can be deleted."
	@priority = "5"
	test DeleteFragmentCollection {
		property portal.acceptance = "true";

		task ("Delete the fragment collection") {
			Collection.deleteCollection(collectionName = "Collection Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Assert the fragment collection is not present") {
			Collection.viewNotPresent(collectionName = "Collection Name");
		}
	}

	@description = "Fragments can be renamed."
	@priority = "4"
	test RenameFragment {
		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Rename the section fragment") {
			FragmentsAdmin.gotoFragmentEllipsisItem(
				fragmentName = "Fragment Name",
				item = "Rename"
			);

			PortletEntry.inputName(name = "Rename Fragment");

			Modal.save();
		}

		task ("Navigate to fragments admin") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Assert the section fragment has the new name") {
			LexiconEntry.viewEntryName(rowEntry = "Rename Fragment");
		}
	}

	@description = "Fragments that are being used cannot be deleted."
	@priority = "5"
	test ViewCannotDeleteFragmentInUse {
		task ("Navigate to page templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a page template collection") {
			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");
		}

		task ("Add a page template to the page template collection") {
			PageTemplatesAdmin.add(pageTemplateName = "Page Template Name");
		}

		task ("Add the section fragment to the page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name"
			);

			PageEditor.viewAutoSaveMessage();
		}

		task ("Navigate to fragments admin") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Assert the section fragment cannot be deleted because it is being used by the page template") {
			LexiconEntry.delete(
				failure = "Error:The fragment entry cannot be deleted because it is required by one or more page templates.",
				rowEntry = "Fragment Name"
			);
		}
	}

	@description = "Once fragments are published, they can no longer be saved as draft."
	@priority = "4"
	test ViewOnlyDraftFragmentsCanBeSaved {
		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Add a second section fragment") {
			FragmentsAdmin.addSection(fragmentName = "Fragment Name 2");

			SiteAdmin.viewPortletTitle(portletTitle = "Fragment Name 2 (Draft)");
		}

		task ("Save the second section fragment as draft") {
			PortletEntry.saveAsDraft();
		}

		task ("Navigate to fragments admin") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate to the fragment collection") {
			Navigator.gotoNavNested(navNested = "Collection Name");
		}

		task ("Assert the second section fragment is in draft status") {
			FragmentsAdmin.viewFragmentWorkflowStatus(
				fragmentName = "Fragment Name 2",
				workflowStatus = "Draft"
			);
		}

		task ("Edit the second section fragment") {
			FragmentsAdmin.gotoFragment(
				fragmentName = "Fragment Name 2"
			);

			var htmlSnippet = '''
<html>${line.separator}
<div>${line.separator}
<span class="test">This is a test.</span>${line.separator}
</div>${line.separator}
</html>''';

			Type.typeAceEditorNoError(
				locator1 = "FragmentEditor#HTML_EDITOR",
				value1 = "${htmlSnippet}"
			);
		}

		task ("Publish the second section fragment") {
			PortletEntry.publish();
		}

		task ("Assert the second section fragment can no longer be saved as draft") {
			AssertElementNotPresent(locator1 = "Button#SAVE_AS_DRAFT");
		}
	}
}