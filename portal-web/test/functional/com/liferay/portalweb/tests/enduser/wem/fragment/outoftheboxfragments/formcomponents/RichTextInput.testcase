@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-161631=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a company Object with a Rich Text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "RichText",
				fieldLabelName = "Description",
				fieldName = "description",
				fieldType = "Clob",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	@description = "This is a test for LPS-170205. The page designer can map Rich Text Input fragment to Rich Text field."
	@priority = 5
	test MapRichTextInputFragmentToRichTextField {
		task ("Given a pages designer has a Form Container on content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");
		}

		task ("When the pages designer maps the Form Container to object") {
			PageEditor.editFormContainer(
				contentType = "Purchase Order",
				panel = "General");
		}

		task ("Then the pages designer sees the Rich Text Input fragment mapped to Rich Text field") {
			PageEditor.viewInputStyle(
				label = "Description",
				showLabel = "true",
				type = "rich-text-input");
		}

		task ("When the page designer enables the Show Help Text") {
			PageEditor.editInput(
				fragmentName = "Rich Text Input",
				hideHelpText = "false");
		}

		task ("Then the pages designer sees the Help Text on Rich Text Input fragment") {
			PageEditor.viewInputStyle(
				helpText = "Add your help text here.",
				showHelpText = "true",
				type = "rich-text-input");
		}

		task ("When the pages designer types a new label") {
			PageEditor.editInput(
				fragmentName = "Rich Text Input",
				label = "Details");
		}

		task ("Then the pages designer sees the new label on Rich Text Input fragment") {
			PageEditor.viewInputStyle(
				label = "Details",
				showLabel = "true",
				type = "rich-text-input");

			AssertElementNotPresent(
				key_text = "Placeholder",
				locator1 = "TextInput#ANY");
		}
	}

}