@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdmin.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(
				collectionZipFile = "fragment-collection.zip"
			);
		}

		task ("Add a display page") {
			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPagesAdmin.addDisplayPage(displayPageName = "Display Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "User can add a display page."
	@priority = "3"
	test AddBlankDisplayPage {
		task ("Publish the display page") {
			Button.clickPublish();

			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("View the display page") {
			DisplayPagesAdmin.viewDisplayPagePresent(
				displayPageName = "Display Page Name"
			);
		}
	}

	@description = "User can add a display page with fragments."
	@priority = "5"
	test AddDisplayPage {
		property portal.acceptance = "true";

		task ("Add a fragment") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);

			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1"
			);
		}

		task ("Assert the display page autosaves") {
			PageEditor.viewAutoSaveMessage();
		}

		task ("Publish the display page") {
			Button.clickPublish();

			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Assert the fragment was added to the display page") {
			DisplayPagesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Edit"
			);

			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1"
			);
		}
	}

	@description = "User can only map a display page to an asset type once."
	@priority = "4"
	test AssertAssetTypeOnlySelectableOnce {
		task ("Map the display page to Basic Web Content") {
			PageEditorMapping.selectAssetType(
				assetType = "Web Content Article",
				subType = "Basic Web Content"
			);
		}

		task ("Assert the select button to select asset type no longer appears") {
			PageEditorMapping.assertAssetTypeUnselectable();
		}
	}

	@description = "In the display page editor, user can add and remove fragments, user can remove sections, and user can edit text in fragment editable fields."
	@priority = "5"
	test AssertDisplayPageEditorFunctionality {
		task ("Add the Title, Rich Text, Button, and Content fragments") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content"
			);
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "Editing Finished"
			);
		}

		task ("Remove the Button fragment") {
			PageEditor.removeFragment(fragmentName = "Button");
		}

		task ("Assert the Rich Text fragment's editable text shows the new value") {
			PageEditor.viewFragmentEditableText(
				editableText = "Editing Finished",
				fragmentName = "Rich Text",
				id = "rich-text"
			);
		}

		task ("Assert the Button fragment was removed, but all other fragments and the empty section where the Button fragment used to be are present") {
			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Editing Finished",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			AssertVisible(locator1 = "PageEditor#SECTION", key_position = "3");

			AssertElementNotPresent(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Submit",
				key_fragmentClass = "footer",
				key_position = "3"
			);

			Button.viewNotPresent(button = "Submit");

			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "4"
			);
		}

		task ("Remove the empty section where the Button fragment used to be") {
			PageEditor.removeSection(position = "3");
		}

		task ("Assert the empty section was removed") {
			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3"
			);
		}
	}

	@description = "This is a test for LPS-86191. User can configure display page settings for any created display page, even if the display page is in draft status."
	@priority = "5"
	test ConfigureDraftStatusDisplayPage {
		task ("Navigate back to Display Pages Admin without publishing") {
			DisplayPagesAdmin.openDisplayPagesAdmin(
				siteURLKey = "test-site-name"
			);
		}

		task ("Configure the draft status display page") {
			DisplayPagesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Configure"
			);

			Navigator.gotoNavTab(navTab = "Look and Feel");

			Click(locator1 = "Radio#SPECIFIC_LOOK");

			Uncheck.uncheckToggleSwitch(
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
				key_toggleSwitchLabel = "Show Footer"
			);

			Button.clickSave();
		}

		task ("Assert the configuration saved properly") {
			DisplayPagesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Configure"
			);

			Navigator.gotoNavTab(navTab = "Look and Feel");

			AssertNotChecked.assertNotCheckedNotVisible(
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
				key_toggleSwitchLabel = "Show Footer"
			);
		}
	}

	@description = "User can delete display pages."
	@priority = "5"
	test DeleteDisplayPage {
		property portal.acceptance = "true";

		task ("Delete the display page") {
			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPagesAdmin.deleteDisplayPage(
				displayPageName = "Display Page Name"
			);
		}

		task ("Assert the display page was deleted") {
			DisplayPagesAdmin.viewDisplayPageNotPresent(
				displayPageName = "DisplayPage Name"
			);
		}
	}

	@description = "User can edit a display page. This includes adding and removing fragments and includes editing text in fragment editable fields."
	@priority = "5"
	test EditDisplayPage {
		task ("Add the Title, Rich Text, and Button fragments") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text"
			);

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button"
			);
		}

		task ("Publish the display page") {
			Button.clickPublish();

			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate back to the display page") {
			DisplayPagesAdmin.gotoDisplayPage(
				displayPageName = "Display Page Name"
			);
		}

		task ("Add a Content fragment") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content"
			);
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "Editing Finished"
			);
		}

		task ("Remove the Button fragment") {
			PageEditor.removeFragment(fragmentName = "Button");
		}

		task ("Publish the display page with the new edits") {
			Button.clickPublish();

			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Navigate back to the display page") {
			DisplayPagesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Edit"
			);
		}

		task ("Assert the Rich Text fragment's new editable text displays") {
			PageEditor.viewFragmentEditableText(
				editableText = "Editing Finished",
				fragmentName = "Rich Text",
				id = "rich-text"
			);
		}

		task ("Assert the Button fragment was removed, but all other fragments and the empty section where the Button fragment used to be are present") {
			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1"
			);

			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Editing Finished",
				key_fragmentClass = "rich-text",
				key_position = "2"
			);

			AssertVisible(locator1 = "PageEditor#SECTION", key_position = "3");

			AssertElementNotPresent(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Submit",
				key_fragmentClass = "footer",
				key_position = "3"
			);

			Button.viewNotPresent(button = "Submit");

			AssertVisible(
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT",
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "4"
			);
		}
	}

	@description = "User can rename display pages."
	@priority = "4"
	test RenameDisplayPage {
		task ("Rename the display page") {
			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPagesAdmin.renameDisplayPage(
				displayPageName = "Display Page Name",
				newDisplayPageName = "Display Page Name New"
			);
		}

		task ("Assert the display page was renamed") {
			DisplayPagesAdmin.viewDisplayPagePresent(
				displayPageName = "Display Page Name New"
			);
		}
	}

	@description = "User cannot delete a display page that is in use by an asset."
	@priority = "4"
	test ViewCannotDeleteActiveDisplayPage {
		task ("Map the display page to Basic Web Content") {
			PageEditorMapping.selectAssetType(
				assetType = "Web Content Article",
				subType = "Basic Web Content"
			);
		}

		task ("Publish the display page") {
			Button.clickPublish();

			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a web content article that uses the display page") {
			WebContent.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.addArticleCP(
				webContentContent = "Webcontent Content",
				webContentTitle = "Webcontent Title"
			);

			WebContentNavigator.gotoEditCP(webContentTitle = "Webcontent Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Pages"
			);
		}

		task ("Assert the display page cannot be deleted") {
			DisplayPagesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPagesAdmin.deleteDisplayPage(
				displayPageName = "Display Page Name"
			);

			AssertTextEquals(
				locator1 = "Message#ERROR",
				value1 = "Error:One or more entries could not be deleted."
			);

			AssertTextEquals(
				locator1 = "Message#ERROR_2",
				value1 = "Error:You cannot delete asset display pages that are used by one or more assets."
			);

			DisplayPagesAdmin.viewDisplayPagePresent(
				displayPageName = "Display Page Name"
			);
		}
	}
}