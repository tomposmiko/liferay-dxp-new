@component-name = "portal-segmentation"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		Navigator.openURL();

		Segmentation.disableSegmentationAtInstanceSettings();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Segmentation.resetSegmentationAtInstanceSettings();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "LPS-153084 Given the 'Enable Assign Roles by Segment' is disable at Instance Settings And enabled at System Settings
    When user navigates to Regular Roles > Assignees > Segments
    Then the warning alert explains how to re-enable it"
	@priority = "3"
	test CheckRoleDisabledAlertAtInstanceSettings {
		property test.name.skip.portal.instance = "SegmentationDisabled#CheckRoleDisabledAlertAtInstanceSettings";

		task ("Disable asssigning role by segment at Instance Settings") {
			Segmentation.disableSegmentationAtSystemSettings();
		}

		task ("Create a Role") {
			JSONRole.addRegularRole(
				roleKey = "Test Role",
				roleTitle = "Test Role");
		}

		task ("Navigate to Role>Assignee>Segments") {
			Segmentation.gotoRoleAssigneeSegments(roleName = "Test Role");
		}

		task ("Check alert message") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Assigning roles by segment is disabled. To enable, go to Instance Settings.");
		}

		task ("Reset System Settings configuration") {
			Segmentation.resetSegmentationAtSystemSettings();
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user navigates to Experiences menu
	Then alert is shown including breadcrumb link to segments service"
	@priority = "3"
	test ClickToReEnableAlertLinkAtAtExperiencesMenu {
		task ("Open the Experience menu") {
			Navigator.openURL();

			ContentPages.gotoPageEditor();

			PageEditor.openExperienceMenu();
		}

		task ("Click at warning with link and confirm Instance Settings is open") {
			Segmentation.clickToReEnableSegmentsWarningLink();

			AssertVisible(
				key_configurationName = "Segments Service",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user clicks at breadcrumb's link at Dynamic Collection editor
	Then should be forwarded to Segments Service at Instance Settings "
	@priority = "3"
	test ClickToReEnableAlertLinkAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Click at warning with link and confirm Instance Settings is open") {
			Segmentation.clickToReEnableSegmentsWarningLink();

			AssertVisible(
				key_configurationName = "Segments Service",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user clicks at breadcrumb's link at Manual Collection editor
	Then should be forwarded to Segments Service at Instance Settings "
	@priority = "3"
	test ClickToReEnableAlertLinkAtManualCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Manual Collection Editor") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Click at warning with link and confirm Instance Settings is open") {
			Segmentation.clickToReEnableSegmentsWarningLink();

			AssertVisible(
				key_configurationName = "Segments Service",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user clicks at breadcrumb's link at Segments Admin
	Then should be forwarded to Segments Service at Instance Settings "
	@priority = "4"
	test ClickToReEnableAlertLinkAtSegmentsList {
		task ("Open the Segments List, click at warning with link and confirm Instance Settings is open") {
			Segmentation.openSegmentsAdmin(siteURLKey = "guest");

			Segmentation.clickToReEnableSegmentsWarningLink();

			AssertVisible(
				key_configurationName = "Segments Service",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled And there's a warning alert at Dynamic Collection Editor page
    When user clicks at Close button
    Then the alert disappears from page"
	@priority = "4"
	test CloseDisabledSegmentationAlertAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();

			AssertElementNotPresent(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled And there's a warning alert at Experience page
    When user clicks at Close button
    Then the alert disappears from page"
	@priority = "4"
	test CloseDisabledSegmentationAlertAtExperiencesMenu {
		task ("Create and navigate to the page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Open Experiences menu") {
			PageEditor.openExperienceMenu();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();

			AssertTextNotEquals.assertNotPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled And there's a warning alert at Manual Collection Editor page
    When user clicks at Close button
    Then the alert disappears from page"
	@priority = "4"
	test CloseDisabledSegmentationAlertAtManualCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Manual Collection Editor") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();

			AssertElementNotPresent(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled And there's a warning alert at Segments page
    When user clicks at Close button
    Then the alert disappears from page"
	@priority = "4"
	test CloseDisabledSegmentationAlertAtSegments {
		task ("Navigate to Segments Admin") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Go to segments editor") {
			LexiconEntry.gotoAdd();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();

			AssertElementNotPresent(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled And there's a warning alert at Simulation page
    When user clicks at Close button
    Then the alert disappears from page"
	@priority = "4"
	test CloseDisabledSegmentationAlertAtSimulationPanel {
		task ("Create a layout page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");
		}

		task ("Create a segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "First Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User3",
				text = "userfn3");
		}

		task ("Navigate o simulation panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();

			AssertElementNotPresent(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Dynamic Collection Editor Page And the page is reloaded
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterRefreshAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Refresh and check if warning reappears") {
			Refresh();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Segments Page And the page is reloaded
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterRefreshAtExperiences {
		task ("Navigate to Segments Admin") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Refresh and check if warning reappears") {
			Refresh();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}

		task ("Go to segments editor") {
			LexiconEntry.gotoAdd();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Refresh and check if warning reappears") {
			Refresh();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Experience menu And the page is reloaded
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterRefreshAtExperiencesMenu {
		task ("Create and navigate to the page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Open Experiences menu") {
			PageEditor.openExperienceMenu();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Refresh and check if warning reappears") {
			Refresh();

			PageEditor.openExperienceMenu();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Manual Collection Editor Page And the page is reloaded
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterRefreshAtManualCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Refresh and check if warning reappears") {
			Refresh();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Simulation panel And the page is reloaded
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterRefreshAtSimulationPanel {
		task ("Create a layout page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");
		}

		task ("Create a segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "First Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User3",
				text = "userfn3");
		}

		task ("Navigate o simulation panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Refresh and check if warning reappears") {
			Refresh();

			MobileDevice.previewPG();

			SelectFrameTop();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Dynamic Collection Editor Page And user leaves and returns to page
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterReturnsAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Leave then return to page and check if warning reappears") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Segments Page And user leaves and returns to page
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterReturnsAtExperiences {
		task ("Navigate to Segments Admin") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Leave then return to page and check if warning reappears") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}

		task ("Go to segments editor") {
			LexiconEntry.gotoAdd();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Leave then return to page and check if warning reappears") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Experience menu And user leaves and returns to page
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterReturnsAtExperiencesMenu {
		task ("Create and navigate to the page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Open Experiences menu") {
			PageEditor.openExperienceMenu();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Leave then return to page and check if warning reappears") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.openExperienceMenu();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Manual Collection Editor Page And user leaves and returns to page
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterReturnsAtManualCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Leave then return to page and check if warning reappears") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-154019: Given the 'Enable Segmentation' is disabled
    When user clicks at Close button at Simulation panel And user leaves and returns to page
    Then the alert reappears"
	@priority = "3"
	test DisabledAlertAfterReturnsAtSimulationPanel {
		task ("Create a layout page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");
		}

		task ("Create a segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "First Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User3",
				text = "userfn3");
		}

		task ("Navigate o simulation panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Close warning message") {
			Segmentation.closeSegmentationDisabledWarning();
		}

		task ("Leave then return to page and check if warning reappears") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			MobileDevice.previewPG();

			SelectFrameTop();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-151362: Given the 'Enable Segmentation'
	When the 'Enable Segmentation' is disabled
	Then segmentation is disabled for Experiences"
	@priority = "5"
	test ViewDisabledAlertAtExperiencesMenu {
		task ("Open the Experience menu and check if warning appears") {
			Navigator.openURL();

			ContentPages.gotoPageEditor();

			PageEditor.openExperienceMenu();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-151362: Given the 'Enable Segmentation'
    When the 'Enable Segmentation' is disabled
    Then segmentation is disabled for Collections"
	@priority = "4"
	test ViewDisabledSegmentationAlertAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Check if warning appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "Segmentation is disabled");
		}
	}

	@description = "LPS-151362: Given segmentation is disabled at Instance Settings
	When user navigates to Dynamic Collection editor
	Then the warning alert explains how to re-enable it"
	@priority = "3"
	test ViewReEnableAlertAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Check if warning appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-151362: Given segmentation is disabled at Instance Settings
	When user navigates to Manual Collection editor
	Then the warning alert explains how to re-enable it"
	@priority = "3"
	test ViewReEnableAlertAtManualCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Manual Collection Editor") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Check if warning appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-151362: Given segmentation is disabled at Instance Settings
	When user navigates to Segments page
	Then the warning alert explains how to re-enable it"
	@priority = "4"
	test ViewReEnableAlertAtSegmentsList {
		task ("Open the Segments List and check if warning appears") {
			Segmentation.openSegmentsAdmin(siteURLKey = "guest");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user navigates to Dynamic Collection editor
	Then alert is shown including breadcrumb link to segments service"
	@priority = "3"
	test ViewReEnableAlertLinkAtDynamicCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Check if warning appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user navigates to Manual Collection editor
	Then alert is shown including breadcrumb link to segments service"
	@priority = "3"
	test ViewReEnableAlertLinkAtManualCollectionEditor {
		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Manual Collection Editor") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Check if warning with link appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user navigates to Segments Admin
	Then alert is shown including breadcrumb link to segments service"
	@priority = "4"
	test ViewReEnableAlertLinkAtSegmentsList {
		task ("Open the Segments List and check if warning with link appears") {
			Segmentation.openSegmentsAdmin(siteURLKey = "guest");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-151362: Given segmentation is disabled at Instance Settings
	When user navigates to Experience simulation sidepanel
	Then the warning alert explains how to re-enable it"
	@priority = "3"
	test ViewReEnabledAlertAtExperienceSimulationSidepanel {
		task ("Create a layout page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Experience Content Page",
				type = "content");
		}

		task ("Create a segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "First Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User3",
				text = "userfn3");
		}

		task ("Navigate o simulation panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Check if warning appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-151362: Given segmentation is disabled at Instance Settings
	When user navigates to Experience menu
	Then the warning alert explains how to re-enable it"
	@priority = "3"
	test ViewReEnabledAlertAtExperiencesMenu {
		task ("Open the Experience menu and check if warning appears") {
			Navigator.openURL();

			ContentPages.gotoPageEditor();

			PageEditor.openExperienceMenu();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user has permissions to Instance Settings
	When user navigates to Experiences menu
	Then alert is shown including breadcrumb link to segments service"
	@priority = "3"
	test ViewReEnabledAlertLinkAtExperiencesMenu {
		task ("Open the Experience menu and check if warning with link appears") {
			Navigator.openURL();

			ContentPages.gotoPageEditor();

			PageEditor.openExperienceMenu();

			AssertClick.assertPartialTextClickAt(
				locator1 = "Message#ERROR_3",
				value1 = "To enable, go to Instance Settings.");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user does not have permissions to Instance Settings
	When user navigates to Dynamic Collection editor
	Then alert is shown informing to contact system administrator"
	@priority = "3"
	test ViewSegmentationDisabledWarningUserWithoutPermissionAtDynamicCollectionEditor {
		task ("Create an User") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create a Role and Set permissions for this role") {
			JSONRole.addRegularRole(
				roleKey = "Dynamic Collection Test Role",
				roleTitle = "Dynamic Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_asset_list_web_portlet_AssetListPortlet",
				roleTitle = "Dynamic Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Dynamic Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Dynamic Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.asset.list.model.AssetListEntry",
				roleTitle = "Dynamic Collection Test Role");

			JSONRole.assignRoleToUser(
				roleTitle = "Dynamic Collection Test Role",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection Test");
		}

		task ("Navigate to Collection Admin") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");
		}

		task ("Check if warning is shown informing to contact system administrator appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "administrator to enable it.");
		}

		task ("Login with the user admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user does not have permissions to Instance Settings
	When user navigates to Experiences menu
	Then alert is shown informing to contact system administrator"
	@priority = "3"
	test ViewSegmentationDisabledWarningUserWithoutPermissionAtExperienceMenu {
		task ("Create an User") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create a Role and Set permissions for this role") {
			JSONRole.addRegularRole(
				roleKey = "Experiences Test Role",
				roleTitle = "Experiences Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Experiences Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_SEGMENTS_ENTRIES",
				resourceName = "com.liferay.segments",
				roleTitle = "Experiences Test Role");

			JSONRole.assignRoleToUser(
				roleTitle = "Experiences Test Role",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open the Experiences menu and check if warning is shown informing to contact system administrator appears") {
			Navigator.openURL();

			ContentPages.gotoPageEditor();

			PageEditor.openExperienceMenu();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "administrator to enable it.");
		}

		task ("Login with the user admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user does not have permissions to Instance Settings
	When user navigates to Manual Collection editor
	Then alert is shown informing to contact system administrator"
	@priority = "3"
	test ViewSegmentationDisabledWarningUserWithoutPermissionAtManualCollectionEditor {
		task ("Create an User") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create a Role and Set permissions for this role") {
			JSONRole.addRegularRole(
				roleKey = "Manual Collection Test Role",
				roleTitle = "Manual Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_asset_list_web_portlet_AssetListPortlet",
				roleTitle = "Manual Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Manual Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Manual Collection Test Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.asset.list.model.AssetListEntry",
				roleTitle = "Manual Collection Test Role");

			JSONRole.assignRoleToUser(
				roleTitle = "Manual Collection Test Role",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Create a Collection via JSONWS") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection Test");
		}

		task ("Navigate to Manual Collection Editor") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection Test");
		}

		task ("Czheck if warning is shown informing to contact system administrator appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "administrator to enable it.");
		}

		task ("Login with the user admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

	@description = "LPS-152539: Given segmentation is disabled at Instance Settings
	And user does not have permissions to Instance Settings
	When user navigates to Segments Admin
	Then alert is shown informing to contact system administrator"
	@priority = "3"
	test ViewSegmentationDisabledWarningUserWithoutPermissionAtSegmentsList {
		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add role and assign it to the user") {
			JSONRole.addRegularRole(
				roleKey = "Segmentation Permissions",
				roleTitle = "Segmentation Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.segments",
				roleTitle = "Segmentation Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Segmentation Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_segments_web_internal_portlet_SegmentsPortlet",
				roleTitle = "Segmentation Permissions");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Segmentation Permissions");

			JSONRole.assignRoleToUser(
				roleTitle = "Segmentation Permissions",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with the new user") {
			Navigator.openURL();

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open the Segments List and check if warning is shown informing to contact system administrator appears") {
			Segmentation.openSegmentsAdmin(siteURLKey = "guest");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "administrator to enable it.");
		}

		task ("Login with the user admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}
	}

}