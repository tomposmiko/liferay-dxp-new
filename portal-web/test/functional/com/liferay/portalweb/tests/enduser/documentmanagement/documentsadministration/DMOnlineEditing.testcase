@component-name = "portal-document-management"
definition {
	property portal.release = "false";
	property portal.upstream = "true";
	property custom.properties = "default.layout.template.id=1_column";
	property testray.main.component.name = "Online Editing";
	var pageName = "Documents and Media Page";
	var portletName = "Documents and Media";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "Google Drive",
			configurationScope = "Virtual Instance Scope"
		);

		var googleClientID = PropsUtil.get("google.client.id.2");

		Type(
			locator1 = "TextArea#ANY",
			value1 = "${googleClientID}",
			key_text = "clientId"
		);

		var googleClientSecret = PropsUtil.get("google.client.secret.2");

		Type(
			locator1 = "TextArea#ANY",
			value1 = "${googleClientSecret}",
			key_text = "clientSecret"
		);

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		AssertClick(locator1 = "Button#SAVE", value1 = "Save");

		AssertElementPresent(locator1 = "Message#SUCCESS");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(
			pageName = "Documents and Media Page",
			sitePageType = "Widget Page"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Documents and Media Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");
	}

	@description = "This test ensures no document is generated if a user cancels creating a Google Doc."
	@priority = "5"
	test CancelGoogleDocCreation {
		property test.name.skip.portal.instance = "DMOnlineEditing#CancelGoogleDocCreation";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Docs");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.discardChanges();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");
	}

	@description = "This test ensures the title of a document is not changed if a user cancels editing a Google Doc."
	@priority = "5"
	test CancelGoogleDocEdit {
		property test.name.skip.portal.instance = "DMOnlineEditing#CancelGoogleDocEdit";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Docs");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Docs");

		GoogleDoc.editTitleInGoogleDoc(
			dmDocumentTitle = "This title should not be saved"
		);

		GoogleDoc.discardChanges();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled"
		);
	}

	@description = "This test ensures no document is generated if a user cancels creating a Google Doc."
	@priority = "5"
	test CancelGoogleSheetCreation {
		property test.name.skip.portal.instance = "DMOnlineEditing#CancelGoogleSheetCreation";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Sheets");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.discardChanges();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");
	}

	@description = "This test ensures the title of a document is not changed if a user cancels editing a Google Sheet."
	@priority = "5"
	test CancelGoogleSheetEdit {
		property test.name.skip.portal.instance = "DMOnlineEditing#CancelGoogleSheetEdit";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Sheets");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Sheets");

		GoogleDoc.editTitleInGoogleDoc(
			dmDocumentTitle = "This title should not be saved"
		);

		GoogleDoc.discardChanges();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled"
		);
	}

	@description = "This test ensures no document is generated if a user cancels creating a Google Doc."
	@priority = "5"
	test CancelGoogleSlideCreation {
		property test.name.skip.portal.instance = "DMOnlineEditing#CancelGoogleSlideCreation";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Slides");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.discardChanges();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");
	}

	@description = "This test ensures the title of a document is not changed if a user cancels editing a Google Slide."
	@priority = "5"
	test CancelGoogleSlideEdit {
		property test.name.skip.portal.instance = "DMOnlineEditing#CancelGoogleSlideEdit";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Slides");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Slides");

		GoogleDoc.editTitleInGoogleDoc(
			dmDocumentTitle = "This title should not be saved"
		);

		GoogleDoc.discardChanges();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled"
		);
	}

	@description = "This test ensures a Google Doc title can be changed through the editor"
	@priority = "4"
	test EditGoogleDoc {
		property test.name.skip.portal.instance = "DMOnlineEditing#EditGoogleDoc";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Docs");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Docs");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Document");

		GoogleDoc.saveAndExit();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Document"
		);
	}

	@description = "This test ensures that special characters  can be saved through the Google Doc editor"
	@priority = "4"
	test EditGoogleDocWithSpecialCharacters {
		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Docs");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Docs");

		var dmDocumentTitle = '''Special Characters Title 12345`~!@#$%^&*(){}[],.<>/?|''';

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "${dmDocumentTitle}");

		GoogleDoc.saveAndExit();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}"
		);
	}

	@description = "This test ensures a Google Sheet title can be changed through the editor"
	@priority = "4"
	test EditGoogleSheet {
		property test.name.skip.portal.instance = "DMOnlineEditing#EditGoogleSheet";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Sheets");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Sheets");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Sheet");

		GoogleDoc.saveAndExit();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Sheet"
		);
	}

	@description = "This test ensures a Google Slide title can be changed through the editor"
	@priority = "4"
	test EditGoogleSlide {
		property test.name.skip.portal.instance = "DMOnlineEditing#EditGoogleSlide";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Slides");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(dmDocumentTitle = "Untitled", dmGoogleApp = "Google Slides");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Slide");

		GoogleDoc.saveAndExit();

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Slide"
		);
	}

	@description = "This test ensures that a document is checked out when the Google Doc editor is being used"
	@priority = "5"
	test GoogleDocSmoke {
		property test.name.skip.portal.instance = "DMOnlineEditing#GoogleDocSmoke";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Docs");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(dmDocumentTitle = "Untitled", status = "Draft");
	}

	@description = "This test ensures that a document is checked out when the Google Sheet editor is being used"
	@priority = "5"
	test GoogleSheetSmoke {
		property test.name.skip.portal.instance = "DMOnlineEditing#GoogleSheetSmoke";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Sheets");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(dmDocumentTitle = "Untitled", status = "Draft");
	}

	@description = "This test ensures that a document is checked out when the Google Slide editor is being used"
	@priority = "5"
	test GoogleSlideSmoke {
		property test.name.skip.portal.instance = "DMOnlineEditing#GoogleSlideSmoke";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addGoogleApp(dmGoogleApp = "Google Slides");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay"
		);

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(dmDocumentTitle = "Untitled", status = "Draft");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			DMDocumentType.tearDownCP();

			Page.tearDownCP();
		}
	}
}