@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a fragment collection") {
			FragmentsAdmin.addCollection(collectionName = "Collection Name");
		}

		task ("Navigate to the fragment collection") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Add a section fragment that uses the Button fragment code") {
			FragmentsAdmin.addSection(fragmentName = "Fragment Name");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.css");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.js");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a fragment in the UI and then assert that it displays properly when added to a content page."
	@priority = "5"
	test AddFragmentToContentPage {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		task ("Publish the section fragment") {
			Button.clickPublish();
		}

		task ("Assert the fragment appears in Fragments Admin") {
			FragmentsAdmin.viewEntryPresent(entry = "Fragment Name");
		}

		task ("Navigate to pages admin") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add a content page") {
			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add the section fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the section fragment is present by asserting the elements from the Button fragment") {
			AssertVisible(
				key_content = "Submit",
				key_fragmentClass = "footer",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Cancel",
				key_fragmentClass = "footer",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");

			AssertElementPresent(locator1 = "Button#SUBMIT");

			AssertElementPresent(locator1 = "Button#CANCEL");
		}
	}

	@description = "Edit a fragment and assert the edits persist."
	@priority = "5"
	test EditFragment {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Publish the section fragment") {
			PortletEntry.publish();
		}

		task ("Edit the section fragment to have the Title fragment code") {
			FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			FragmentsEditor.assertFragmentPreview(
				fragmentLocator = "//div[@class='fragment-header']/h1[@class='title']",
				text = "LOREM IPSUM DOLOR SIT AMET");

			PortletEntry.publish();
		}

		task ("Navigate to the section fragment") {
			FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");
		}

		task ("Assert the edits to the section fragment persist by asserting that the preview displays the Title fragment") {
			FragmentsEditor.assertFragmentPreview(
				fragmentLocator = "//div[@class='fragment-header']/h1[@class='title']",
				text = "LOREM IPSUM DOLOR SIT AMET");
		}
	}

	@description = "This is a test for LPS-89251. When creating fragments there should be a visible reference to the Liferay Fragments Toolkit."
	@priority = "4"
	test ViewReferenceToFragmentsToolkit {
		task ("Click on the Fragments Toolkit link") {
			Click(locator1 = "FragmentEditor#FRAGMENTS_TOOLKIT_LINK");
		}

		task ("Assert user is taken to the the Liferay Fragments Toolkit documentation page") {
			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation(value1 = "https://github.com/liferay/generator-liferay-fragments#liferay-fragments-cli");
		}
	}

}