@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Story: LRAC-12019 | Automation ID: LRAC-12584 | Test Summary: Can paginate the list of properties"
	@priority = 3
	test CanPaginatePropertyListInDXP {
		var firstPageList = "AC Property Pagination 2,AC Property Pagination 3,AC Property Pagination 4,AC Property Pagination 5,AC Property Pagination 6";
		var secondPageList = "AC Property Pagination 1";

		task ("Connect DXP to AC and get the first property name from the list") {
			ACDXPSettings.connectAnalyticsCloud();

			var autoGeneratePropertyName = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Create 6 new properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "${secondPageList},${firstPageList}");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = 5);

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 7 entries.");
		}

		task ("Check that 5 properties appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstPageList});
		}

		task ("Click next page") {
			Click(locator1 = "Pagination#NEXT_LINK");

			ACUtils.viewResultsMessage(results = "Showing 6 to 7 of 7 entries.");
		}

		task ("Check that 2 property appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${secondPageList},${autoGeneratePropertyName}");
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = 5);

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 7 entries.");
		}

		task ("Check that 5 properties appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstPageList});
		}

		task ("Click next page") {
			Click(locator1 = "Pagination#NEXT_LINK");

			ACUtils.viewResultsMessage(results = "Showing 6 to 7 of 7 entries.");
		}

		task ("Check that 2 property appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = "${secondPageList},${autoGeneratePropertyName}");
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12571 | Test Summary: Check that the user can put any name in the property"
	@priority = 5
	test CanPutAnyNameInNewProperty {
		task ("Connect DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Create a new property from the list of available properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "AC Property");
		}

		task ("Check that the new property appears in the list") {
			ACDXPSettings.viewGenericListItem(itemValueList = "AC Property");
		}

		task ("Create a new property from the list of available properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "DXP");
		}

		task ("Check that the new property appears in the list") {
			ACDXPSettings.viewGenericListItem(itemValueList = "DXP");
		}

		task ("Try to create a property with less than 3 letters (limit)") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "AC");
		}

		task ("Check that an error alert appears in the modal") {
			ACUtils.viewGenericText(textValueList = "Property name does not meet minimum length required.");
		}

		task ("Check that the property creation button is disabled") {
			AssertElementPresent(locator1 = "ACDXPSettings#CONNECT_BUTTON_DISABLED");
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Create a new property from the list of available properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "LXC");
		}

		task ("Check that the new property appears in the list") {
			ACDXPSettings.viewGenericListItem(itemValueList = "LXC");
		}

		task ("Try to create a property with less than 3 letters (limit)") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "AC");
		}

		task ("Check that an error alert appears in the modal") {
			ACUtils.viewGenericText(textValueList = "Property name does not meet minimum length required.");
		}

		task ("Check that the property creation button is disabled") {
			AssertElementPresent(locator1 = "ACDXPSettings#CONNECT_BUTTON_DISABLED");
		}
	}

	@description = "Story: LRAC-12019 | Automation ID: LRAC-12585 | Test Summary: Check that it is possible to search for properties"
	@priority = 3
	test CanSearchForPropertiesInDXP {
		var foundPropertyName = "AC Search Property 1";
		var notFoundPropertiesName = "AC Search Property 2,AC Search Property 3";

		task ("Connect DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Create 3 new properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "${foundPropertyName},${notFoundPropertiesName}");
		}

		task ("Search by property name") {
			ACUtils.searchBar(searchItem = ${foundPropertyName});

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundPropertyName});
		}

		task ("Check that unsearched property names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundPropertiesName});
		}

		task ("Search by name of a property that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No properties were found.");
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Search by property name") {
			ACUtils.searchBar(searchItem = ${foundPropertyName});

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundPropertyName});
		}

		task ("Check that unsearched property names do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundPropertiesName});
		}

		task ("Search by name of a property that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No properties were found.");
		}
	}

	@description = "Story: LRAC-12019 | Automation ID: LRAC-12586 | Test Summary: Can sort the list of properties"
	@priority = 3
	test CanSortPropertyListInDXP {
		var propertyNameListByCreateDateUp = "AC Sort Property,LXC Sort Property,DXP Sort Property";
		var propertyNameListByCreateDateDown = "DXP Sort Property,LXC Sort Property,AC Sort Property";
		var propertyNameListByAvailablePropertiesUp = "AC Sort Property,DXP Sort Property,LXC Sort Property";
		var propertyNameListByAvailablePropertiesDown = "LXC Sort Property,DXP Sort Property,AC Sort Property";

		task ("Connect DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Create 3 new properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = ${propertyNameListByCreateDateUp});
		}

		task ("Search for a common term in property names so only manually created properties appear") {
			ACUtils.searchBar(searchItem = "Sort");
		}

		task ("Sort the list by the Create Date column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Create Date");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByCreateDateUp});
		}

		task ("Sort the list by the Create Date column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByCreateDateDown});
		}

		task ("Sort the list by the Available Properties column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Available Properties");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByAvailablePropertiesUp});
		}

		task ("Sort the list by the Available Properties column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByAvailablePropertiesDown});
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Search for a common term in property names so only manually created properties appear") {
			ACUtils.searchBar(searchItem = "Sort");
		}

		task ("Sort the list by the Create Date column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Create Date");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByCreateDateUp});
		}

		task ("Sort the list by the Create Date column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByCreateDateDown});
		}

		task ("Sort the list by the Available Properties column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Available Properties");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByAvailablePropertiesUp});
		}

		task ("Sort the list by the Available Properties column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = "1,2,3",
				itemValueList = ${propertyNameListByAvailablePropertiesDown});
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12572 | Test Summary: Check that a deleted property in AC will not appear in the DXP"
	@ignore = "true"
	@priority = 3
	test CheckDeletedPropertyInACSideNotAppearInDXP {

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		var propertyName = "AC Deleted Property";

		task ("Connect DXP to AC and get the first property name from the list") {
			ACDXPSettings.connectAnalyticsCloud();

			var autoGeneratePropertyName = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Create a new property from the list of available properties") {
			ACDXPSettings.createNewProperty(newPropertyNameList = ${propertyName});
		}

		task ("Go to AC > Go to Settings > Go to Properties") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Check that the new properties are created in the properties list") {
			ACUtils.viewNameList(nameList = "${propertyName},${autoGeneratePropertyName}");
		}

		task ("Delete one property") {
			ACUtils.searchBar(searchItem = ${autoGeneratePropertyName});

			//ACSettings.deletePropertyByCheckbox(propertyName = ${autoGeneratePropertyName});

		}

		task ("Go to DXP > Instance Settings > Analytics Cloud") {
			ACUtils.launchDXP();

			ACDXPSettings.goToInstanceSettingsAC();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Check that the not deleted property is present in the list") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${propertyName});
		}

		task ("Check that the deleted property is not present in the list") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${autoGeneratePropertyName});
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12570 | Test Summary: Check that a property is created automatically after connection"
	@priority = 5
	test CheckIfPropertyCreatedAutomaticallyAfterConnection {
		task ("Connect DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			var propertyName1 = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Copy the token from AC again") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP") {
			ACUtils.launchDXP();
		}

		task ("Connect DXP to AC again to create a new property automatically") {
			ACDXPSettings.connectAnalyticsCloud();

			var propertyName2 = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Check that other property was automatically created at the top of the list") {
			TestUtils.assertNotEquals(
				actual = ${propertyName2},
				expected = ${propertyName1});
		}
	}

	@description = "Story: LRAC-10858 | Automation ID: LRAC-12569 | Test Summary: Assert Empty State upon property creation"
	@ignore = "true"
	@priority = 2
	test CheckPropertyListEmptyStateMessage {

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		task ("Create a new workspace") {
			ACUtils.launchAC(
				emailList = "acworkspace@liferay.com",
				workspaceName = "New AC Property List Empty State Workspace");
		}

		task ("Copy the token from AC") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP > Connect the DXP to AC") {
			ACUtils.launchDXP();

			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Go to AC > Go to Settings > Go to Properties") {
			ACUtils.launchAC(workspaceName = "New AC Property List Empty State Workspace");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		//task ("Delete all the properties in the list") {
		//	ACSettings.deleteAllProperties();
		//}

		task ("Go to Instance Settings > Analytics Cloud") {
			ACUtils.launchDXP();

			ACDXPSettings.goToInstanceSettingsAC();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Assert Empty state message when there is no property available") {
			ACUtils.viewGenericText(textValueList = "Create a New Property,Create a property to add sites and channels.");

			AssertElementPresent(
				key_text = "New Property",
				locator1 = "Button#ANY");
		}
	}

	@description = "Story: LRAC-12019 | Automation ID: LRAC-12583 | Test Summary: Check that the property list is sorted by creation date by default"
	@priority = 3
	test CheckPropertyListSortedByCreationDateByDefault {
		task ("Connect DXP to AC") {
			ACDXPSettings.connectAnalyticsCloud();

			var autoGeneratePropertyName = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Create a new property from the list of available properties and get the first property name from the list") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "AC Property Sort Default 1");

			var propertyName1 = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Check that the property appears at the top of the list") {
			TestUtils.assertNotEquals(
				actual = ${propertyName1},
				expected = ${autoGeneratePropertyName});
		}

		task ("Create a new property from the list of available properties and get the first property name from the list") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "AC Property Sort Default 2");

			var propertyName2 = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Check that the property appears at the top of the list") {
			TestUtils.assertNotEquals(
				actual = ${propertyName2},
				expected = ${propertyName1});
		}

		task ("Complete the wizard configuration") {
			ACDXPSettings.completeWizardConfiguration();
		}

		task ("Go to the properties page in the sidebar") {
			ACDXPSettings.navToSyncedSitesMenu();
		}

		task ("Create a new property from the list of available properties and get the first property name from the list") {
			ACDXPSettings.createNewProperty(newPropertyNameList = "AC Property Sort Default 3");

			var propertyName3 = ACDXPSettings.getAssignedPropertyName();
		}

		task ("Check that the property appears at the top of the list") {
			TestUtils.assertNotEquals(
				actual = ${propertyName3},
				expected = ${propertyName2});
		}
	}

	@description = "Bug: LRAC-11142 | Automation ID: LRAC-11162 | Test Summary: New property created when reconnect and old property remains"
	@priority = 4
	test OnlyAvailablePropertiesAppearInDXP {
		task ("Go to AC > Go to properties page and add 2 new properties") {
			var propertyList = "Property OnlyAvailablePropertiesAppearInDXP 1,Property OnlyAvailablePropertiesAppearInDXP 2";

			ACUtils.launchAC();

			ACNavigation.goToSettings();

			for (var propertyName : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${propertyName});
			}
		}

		task ("Copy the token from AC") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.goToInstanceSettingsAC();

			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.viewGenericListItem(itemValueList = "Property OnlyAvailablePropertiesAppearInDXP 1");

			ACDXPSettings.viewGenericListItem(itemValueList = "Property OnlyAvailablePropertiesAppearInDXP 2");

			ACDXPSettings.syncSites(
				propertyName = "Property OnlyAvailablePropertiesAppearInDXP 1",
				siteName = "Site Name");
		}

		task ("Disconnect DXP from AC") {
			ACDXPSettings.disconnectDXPFromAnalyticsCloud();
		}

		task ("Launch AC and Connect new data source") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Connect DXP to AC") {
			ACUtils.launchDXP();

			ACDXPSettings.goToInstanceSettingsAC();

			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Assert a new property is created along with old property") {
			ACDXPSettings.viewGenericListItem(itemValueList = "Property OnlyAvailablePropertiesAppearInDXP 1");

			ACDXPSettings.viewGenericListItem(itemValueList = "Property OnlyAvailablePropertiesAppearInDXP 2");
		}
	}

}