@component-name = "portal-segmentation"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONStaging.enableLocalStaging(
			branchingPrivate = "false",
			branchingPublic = "false",
			groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-112994. Assert the Collections administration is written accessible on the staging site while read-only accessible on live site."
	@priority = "5"
	test AssertCollectionsAdminInStagingAndLiveSite {
		property portal.acceptance = "true";

		task ("Navigate to Collections administration in the staging site") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");
		}

		task ("Assert Collections admin is written accessible") {
			AssertVisible(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

			AssertVisible(locator1 = "Button#PLUS");
		}

		task ("Navigate to Collections administration in the live site") {
			ProductMenu.gotoLiveSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Collections");
		}

		task ("Assert Collections admin is read-only accessible") {
			AssertElementNotPresent(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "This is a test for LPS-166045. The site designer could see the usages of Collections from staging and live site."
	@priority = "4"
	test ViewUsagesOfCollection {
		task ("Given the site designer has a collection") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name (Staging)",
				itemType = "All Types",
				site = "false",
				title = "Dynamic Collection");
		}

		task ("When the site designer select the dynamic collection on a Collection Display in staging site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			PageEditor.publish();
		}

		task ("Then the site designer could directly see usages on the dynamic collection in staging site") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");

			LexiconTable.viewTableEntryInfo(
				columnName = "usages",
				tableEntry = "Dynamic Collection",
				tableEntryInfo = "2");

			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			LexiconList.viewListEntrySubtitle(
				listEntry = "Dynamic Collection",
				listEntrySubtitle = "2 Usages");
		}

		task ("When the site designer publishes to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Then the site designer could directly see usages on the dynamic collection in live site") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			LexiconList.viewListEntrySubtitle(
				listEntry = "Dynamic Collection",
				listEntrySubtitle = "2 Usages");

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			LexiconTable.viewTableEntryInfo(
				columnName = "usages",
				tableEntry = "Dynamic Collection",
				tableEntryInfo = "2");
		}
	}

}