@component-name = "portal-collaboration"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Staging Blogs Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
			JSONGroup.deleteGroupByName(groupName = "Remote Site");
		}
	}

	@description = "This is a use case for LPS-72461."
	@priority = "5"
	test StagingRemoteLiveBlogsPG {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveBlogsPG";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Site Name");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Pause(locator1 = "5000");

		AssertConsoleTextNotPresent(value1 = "RuntimeException");

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Remote Site");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@description = "This is a use case for LPS-74206."
	@priority = "5"
	test StagingRemoteLiveBlogsWithWorkflow {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveBlogsWithWorkflow";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Workflow",
			panel = "Control Panel",
			portlet = "Process Builder"
		);

		NavItem.gotoConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry"
		);

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Site Name");

		Blogs.addWithWorkflow(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Site Name");

		Click(locator1 = "Notifications#USER_BAR_BADGE_COUNT");

		Click(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT");

		AssertClick(
			locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
			value1 = "Test Test sent you a Blogs Entry for review in the workflow."
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.approveTaskByActions(
			workflowActivityComment = "Process is approved",
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review"
		);

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Pause(locator1 = "5000");

		AssertConsoleTextNotPresent(value1 = "RuntimeException");

		Navigator.gotoSitePage(pageName = "Staging Blogs Page", siteName = "Remote Site");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}
}