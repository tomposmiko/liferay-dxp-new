@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98303 and LPS-98327. Assert convert a widget page with Asset Publisher to content page and the content page keeps the same plid identifier before conversion."
	@priority = "5"
	test ConvertBasicWidgetPageToContentPage {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		var plid1 = Page.getPlidFromHtmlSource();

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.clickPublish();

		AssertElementPresent(
			key_pageName = "Test Page Name",
			key_pageType = "Content Page",
			locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Pause(locator1 = "1000");

		var plid2 = Page.getPlidFromHtmlSource();

		TestUtils.assertEquals(
			actual = "${plid2}",
			expected = "${plid1}");

		ContentPages.gotoPageEditor();

		AssertElementPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
	}

	@description = "This is a test for LPS-98325. Assert that multiple pages with several widget pages(that can be converted) and an api to convert bulk widget pages to content pages is executed, if convertLayouts and getConvertibleLayoutPlid is invoked, an array with the plids of the widget pages that are convertible to content pages is returned and all convertibles widget pages in the site are converted to content pages."
	@priority = "5"
	test ConvertMultipleWidgetPagesToContentPagesViaAPI {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertMultipleWidgetPagesToContentPagesViaAPI";

		for (var i : list "1,2,3,4,5,6,7,8,9,10") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name ${i}");
		}

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 1",
			layoutTemplate = "1 Column");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 2",
			layoutTemplate = "2 Columns (50/50)");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 4",
			layoutTemplate = "2 Columns (70/30)");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 5",
			layoutTemplate = "3 Columns");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 6",
			layoutTemplate = "1-2 Columns (30/70)");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 7",
			layoutTemplate = "1-2 Columns (70/30)");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 8",
			layoutTemplate = "1-2-1 Columns (50/50)");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 9",
			layoutTemplate = "1-3-1 Columns");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 10",
			layoutTemplate = "1-2-1 Columns (70/30)");

		for (var i : list "1,2,3,4,5,6,7,8,9,10") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name ${i}",
				widgetName = "Asset Publisher");
		}

		task ("Get plids of widget pages before conversion") {
			var list = ListUtil.newList();

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name");

				var plidBeforeConversion = Page.getPlidFromHtmlSource();

				if ("${i}" == "1") {
					ListUtil.add("${list}","${plidBeforeConversion}");
				}
				else {
					ListUtil.add("${list}"," ${plidBeforeConversion}");
				}
			}

			var plidsBeforeConversion = ListUtil.toString("${list}");

			echo("${plidsBeforeConversion}");
		}

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		ServerAdministration.openServerAdmin();

		var script = TestCase.getFileContent(
			fileName = "convertWidgetPages.groovy",
			filePath = "enduser/wem/layout/pagesadmin");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		task ("Assert output content") {
			var output = selenium.getText("ServerAdministrationScript#OUTPUT_FIELD");

			echo("${output}");

			if (contains("${output}", "Convertible layouts before conversion:[${plidsBeforeConversion}]")) {
				echo("Returned convertible layouts plids array is correct");
			}
			else {
				fail("Returned convertible layout plids array is wrong");
			}

			if (contains("${output}", "Convertible layouts after conversion: []")) {
				echo("No convertiable layouts left");
			}
			else {
				fail("There are convertiable layouts left");
			}
		}

		task ("Get plids of converted pages") {
			var list = ListUtil.newList();

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				ContentPagesNavigator.openViewContentPage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name");

				Pause(locator1 = "1000");

				var plidAfterConversion = Page.getPlidFromHtmlSource();

				if ("${i}" == "1") {
					ListUtil.add("${list}","${plidAfterConversion}");
				}
				else {
					ListUtil.add("${list}"," ${plidAfterConversion}");
				}
			}

			var plidsAfterConversion = ListUtil.toString("${list}");

			echo("${plidsAfterConversion}");
		}

		task ("Assert output content") {
			if (contains("${output}", "Converted layouts:[${plidsAfterConversion}]")) {
				echo("Returned converted layouts plids array is correct");
			}
			else {
				fail("Returned converted layout plids array is wrong");
			}
		}

		task ("Assert plids of before conversion are the same with converted") {
			TestUtils.assertEquals(
				actual = "${plidsAfterConversion}",
				expected = "${plidsBeforeConversion}");
		}

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		for (var i : list "1,2,3,4,5,6,7,8,9,10") {
			AssertElementPresent(
				key_pageName = "Test Page Name ${i}",
				key_pageType = "Content Page",
				locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");
		}

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Page Name 1",
			siteName = "Test Site Name");

		AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Page Name 1",
			siteName = "Test Site Name");

		PageEditor.viewFragment(fragmentName = "Asset Publisher");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading",
			targetFragmentName = "Asset Publisher");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Page Name 1",
			siteName = "Test Site Name");

		AssertElementPresent(locator1 = "//h1[contains(.,'Heading Example')]");
	}

	@description = "This is a test for LPS-98325. If there is a site with several widget pages(that can be converted) and some content pages and an api to convert bulk widget pages to content pages is executed, you should be able to convert the widget pages."
	@priority = "2"
	test ConvertMultipleWidgetPagesWithContentPagesViaAPI {
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertMultipleWidgetPagesWithContentPagesViaAPI";

		task ("Add 10 widget pages") {
			for (var n : list "1,2,3,4,5,6,7,8,9,10") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Widget Page Name ${n}");
			}
		}

		task ("Change layout of each page") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 1",
				layoutTemplate = "1 Column");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 2",
				layoutTemplate = "2 Columns (50/50)");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 4",
				layoutTemplate = "2 Columns (70/30)");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 5",
				layoutTemplate = "3 Columns");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 6",
				layoutTemplate = "1-2 Columns (30/70)");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 7",
				layoutTemplate = "1-2 Columns (70/30)");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 8",
				layoutTemplate = "1-2-1 Columns (50/50)");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 9",
				layoutTemplate = "1-3-1 Columns");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name 10",
				layoutTemplate = "1-2-1 Columns (70/30)");
		}

		task ("Add an Asset Publisher to each widget page") {
			for (var n : list "1,2,3,4,5,6,7,8,9,10") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Widget Page Name ${n}",
					widgetName = "Asset Publisher");
			}
		}

		task ("Add 4 content pages with Heading fragment") {
			for (var n : list "1,2,3,4") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Content Page Name ${n}",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name ${n}",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Heading");

				PageEditor.clickPublish();
			}
		}

		task ("Execute grooy script to bulk convert all widget pages") {
			ServerAdministration.openServerAdmin();

			var script = TestCase.getFileContent(
				fileName = "convertWidgetPages.groovy",
				filePath = "enduser/wem/layout/pagesadmin");

			ServerAdministration.executeScript(
				language = "Groovy",
				script = "${script}");

			AssertTextEquals.assertPartialText(
				locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
				value1 = "Convertible layouts after conversion: []");
		}

		task ("Assert all widget pages are converted to content page") {
			SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

			for (var n : list "1,2,3,4,5,6,7,8,9,10") {
				AssertVisible(
					key_pageName = "Test Widget Page Name ${n}",
					key_pageType = "Content Page",
					locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");
			}
		}
	}

	@description = "This is a test for LPS-98589. Multiple widgets with different application decorators survive content page conversion."
	@priority = "5"
	test ConvertWidgetPageDecoratorsToContentPage {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Wiki");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Asset Publisher",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectApplicationDecorator(decorator = "Borderless");

		PortletEntry.save();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Wiki",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectApplicationDecorator(decorator = "Barebone");

		PortletEntry.save();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Documents and Media",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectApplicationDecorator(decorator = "Decorate");

		PortletEntry.save();

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		Pause(locator1 = "3000");

		Button.clickPublish();

		AssertElementPresent(
			key_pageName = "Test Page Name",
			key_pageType = "Content Page",
			locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.viewApplicationDecorator(
			decorator = "Borderless",
			portletName = "Asset Publisher");

		Portlet.viewApplicationDecorator(
			decorator = "Barebone",
			portletName = "Wiki");

		Portlet.viewApplicationDecorator(
			decorator = "Decorate",
			portletName = "Documents and Media");
	}

	@description = "This is a test for LPS-98325. Assert that widget pages with nested application and customization setting can be converted to content pages via API."
	@priority = "5"
	test ConvertWidgetPagesWithNestedApplicationAndCustomizationSettingToContentPagesViaAPI {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPagesWithNestedApplicationAndCustomizationSettingToContentPagesViaAPI";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 1");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 1",
			widgetName = "Asset Publisher");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 2");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		PageCustomizations.enableSectionCustomizableCP(
			columnId = "1",
			pageName = "Test Page Name 2");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 3");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name 3",
			widgetName = "Nested Applications");

		ServerAdministration.openServerAdmin();

		var script = TestCase.getFileContent(
			fileName = "convertWidgetPages.groovy",
			filePath = "enduser/wem/layout/pagesadmin");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		AssertTextEquals.assertPartialText(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Convertible layouts before conversion");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		for (var i : list "1,2,3") {
			AssertElementPresent(
				key_pageName = "Test Page Name ${i}",
				key_pageType = "Content Page",
				locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");
		}
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Customizable column, there will be a warning message shown in conversion review"
	@priority = "5"
	test ConvertWidgetPageWithCustomizableColumnContainingWidgets {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			layoutTemplate = "1 Column");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		PageCustomizations.enableSectionCustomizableCP(
			columnId = "1",
			pageName = "Test Page Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		PageCustomizations.viewCustomizablePagePG();

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.viewPG(portletName = "Asset Publisher");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		AssertVisible(
			key_alertMessage = "This page has customizable columns. This capability is not supported for content pages and will be lost if the conversion draft is published.",
			key_type = "warning",
			locator1 = "Message#CONVERSION_ALERT_MESSAGE");

		AssertElementNotPresent(
			key_portletName = "Asset Publisher",
			locator1 = "Portlet#TITLE");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");

		AssertElementNotPresent(
			key_portletName = "Asset Publisher",
			locator1 = "Portlet#TITLE");
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Nested Applications widget containing widgets, there will be a warning message shown in conversion preview"
	@priority = "5"
	test ConvertWidgetPageWithNestedApplicationsContainingWidgets {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Nested Applications");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		NestedPortlets.viewConfigurationDefaultLayoutTemplate(
			defaultColumnName = "2 Columns (50/50)",
			portletName = "Nested Applications");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		WaitForElementNotPresent(locator1 = "IFrame#MODAL_BODY");

		DragAndDrop.dragAndDropPortletToPortlet(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_1_PORTLET_HEADER",
			locator2 = "Home#PORTLET_COLUMN_1",
			value1 = "Asset Publisher");

		Portlet.viewPG(portletName = "Nested Applications");

		AssertTextEquals(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Home#PORTLET_COLUMN_1_NESTED_PORTLET_TITLE",
			value1 = "Asset Publisher");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		AssertVisible(
			key_alertMessage = "This page uses nested applications widgets. All widgets that were inside a nested application widget have been placed in a single column and may require manual reorganization.",
			key_type = "warning",
			locator1 = "Message#CONVERSION_ALERT_MESSAGE");

		Portlet.viewPG(portletName = "Asset Publisher");

		AssertElementNotPresent(
			key_portletName = "Nested Applications",
			locator1 = "Portlet#TITLE");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");

		Portlet.viewPG(portletName = "Asset Publisher");

		AssertElementNotPresent(
			key_portletName = "Nested Applications",
			locator1 = "Portlet#TITLE");
	}

	@description = "This is a test for LPS-105943. When convert a widget page with a non-standard layout, there will be a warning message shown in conversion preview"
	@priority = "5"
	test ConvertWidgetPageWithNonStandardLayout {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPageWithNonStandardLayout";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.uploadApp(
			appName = "custom-layout-layouttpl",
			warFileName = "custom-layout-layouttpl.war",
			warFilePath = "enduser/wem/layout/pagesadmin");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		SitePages.configurePage(
			columnName = "Custom Layout",
			pageName = "Test Page Name",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Profile");

		Portlet.dragAndDropPortletToColumnPG(
			columnNumberFrom = "1",
			columnNumberTo = "2",
			portletName = "Profile");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssertTextEquals(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_1_PORTLET_TITLE",
			value1 = "Asset Publisher");

		AssertTextEquals(
			key_portletTitleName = "Profile",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_2_PORTLET_TITLE",
			value1 = "Profile");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		AssertVisible(
			key_alertMessage = "This page uses a custom page layout. A best-effort conversion has been performed. Verify the conversion draft before publishing it.",
			key_type = "warning",
			locator1 = "Message#CONVERSION_ALERT_MESSAGE");

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementPresent(
			key_columnNumber = "2",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Profile')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		Button.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementPresent(
			key_columnNumber = "2",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Profile')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Customizable column and a non-standard layout, there will be two warning messages shown in conversion preview"
	@priority = "3"
	test ConvertWidgetPageWithNonStandardLayoutAndCustomizableColumns {
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPageWithNonStandardLayoutAndCustomizableColumns";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.uploadApp(
			appName = "custom-layout-layouttpl",
			warFileName = "custom-layout-layouttpl.war",
			warFilePath = "enduser/wem/layout/pagesadmin");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		SitePages.configurePage(
			columnName = "Custom Layout",
			pageName = "Test Page Name",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		PageCustomizations.enableSectionCustomizableCP(
			columnIdList = "1,2",
			pageName = "Test Page Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		PageCustomizations.viewCustomizablePagePG();

		Portlet.addPG(portletName = "Profile");

		Portlet.dragAndDropPortletToColumnPG(
			columnNumberFrom = "1",
			columnNumberTo = "2",
			portletName = "Profile");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertTextEquals(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_1_PORTLET_TITLE",
			value1 = "Asset Publisher");

		AssertTextEquals(
			key_portletTitleName = "Profile",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_2_PORTLET_TITLE",
			value1 = "Profile");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		AssertTextEquals(
			locator1 = "Message#ERROR_3",
			value1 = "This page has customizable columns. This capability is not supported for content pages and will be lost if the conversion draft is published. This page uses a custom page layout. A best-effort conversion has been performed. Verify the conversion draft before publishing it.");

		AssertElementNotPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementNotPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Profile')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		Button.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertElementNotPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementNotPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Profile')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Nested Applications widget containing widgets and a non-standard layout, there will be two warning messages shown in conversion preview"
	@priority = "3"
	test ConvertWidgetPageWithNonStandardLayoutAndNestedApplicationsContainingWidgets {
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPageWithNonStandardLayoutAndNestedApplicationsContainingWidgets";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.uploadApp(
			appName = "custom-layout-layouttpl",
			warFileName = "custom-layout-layouttpl.war",
			warFilePath = "enduser/wem/layout/pagesadmin");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		SitePages.configurePage(
			columnName = "Custom Layout",
			pageName = "Test Page Name",
			privacy = "Public Pages",
			sitePageType = "Widget Page");

		for (var portletName : list "Profile,Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "${portletName}");

			Portlet.dragAndDropPortletToColumnPG(
				columnNumberFrom = "1",
				columnNumberTo = "2",
				portletName = "${portletName}");
		}

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Nested Applications");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		ProductMenuHelper.closeProductMenu();

		AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

		Navigator.gotoNavTab(navTab = "Asset Selection");

		Click(locator1 = "APConfiguration#ASSET_SELECTION_MANUAL");

		PortletEntry.save();

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		WaitForElementNotPresent(locator1 = "IFrame#MODAL_BODY");

		DragAndDrop.dragAndDropPortletToPortlet(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_2_PORTLET_HEADER",
			locator2 = "Home#PORTLET_COLUMN_1",
			value1 = "Asset Publisher");

		AssertTextEquals(
			key_portletTitleName = "Nested Applications",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_1_PORTLET_TITLE",
			value1 = "Nested Applications");

		AssertTextEquals(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Home#PORTLET_COLUMN_1_NESTED_PORTLET_TITLE",
			value1 = "Asset Publisher");

		AssertTextEquals(
			key_portletTitleName = "Profile",
			locator1 = "Home#PAGE_COLUMN_PORTLET_COLUMN_2_PORTLET_TITLE",
			value1 = "Profile");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		AssertTextEquals(
			locator1 = "Message#ERROR_3",
			value1 = "This page uses nested applications widgets. All widgets that were inside a nested application widget have been placed in a single column and may require manual reorganization. This page uses a custom page layout. A best-effort conversion has been performed. Verify the conversion draft before publishing it.");

		AssertElementNotPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Nested Applications')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementPresent(
			key_columnNumber = "2",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Profile')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		Button.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertElementNotPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Nested Applications')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Asset Publisher')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

		AssertElementPresent(
			key_columnNumber = "2",
			key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Profile')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@description = "This is a test for LPS-125933. Convert widget page to content page with a WCD and an Asset Publisher where web contents are displayed."
	@priority = "3"
	test ConvertWidgetPageWithWebContentsToContentPage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Change layout to 1 column") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				layoutTemplate = "1 Column");
		}

		task ("Add an Asset Publisher and a Web Content Display to page") {
			for (var widgetName : list "Asset Publisher,Web Content Display") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("Add two web contents based on Basic Web Content") {
			for (var n : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("Assert the web contents are shown in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}
		}

		task ("Display the Web Content Title 1 in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 1");

			IFrame.closeFrame();

			WebContent.viewPGViaWCD(webContentContent = "Web Content Content 1");
		}

		task ("Convert the widget page to content page") {
			SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

			SitePages.gotoPageMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}

			WebContent.viewPGViaWCD(webContentContent = "Web Content Content 1");

			PageEditor.clickPublish();
		}

		task ("Assert the widget page is converted to content page") {
			SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

			AssertElementPresent(
				key_pageName = "Test Page Name",
				key_pageType = "Content Page",
				locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");
		}

		task ("Assert the web contents are shown in Asset Publisher and Web Content Display") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}

			WebContent.viewPGViaWCD(webContentContent = "Web Content Content 1");
		}
	}

	@description = "This is a test for LPS-98589. Can edit the title of the widgets with "borderless" and "decorate" decorators in content page with correct permissions."
	@priority = "5"
	test EditConvertedContentPageWithDecorator {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Asset Publisher",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectApplicationDecorator(decorator = "Borderless");

		PortletEntry.save();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Documents and Media",
			portletOption = "Look and Feel Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectApplicationDecorator(decorator = "Decorate");

		PortletEntry.save();

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		WaitForElementPresent(locator1 = "//script[contains(@src,'FragmentsSidebar.js')]");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.viewApplicationDecorator(
			decorator = "Borderless",
			portletName = "Asset Publisher");

		Portlet.viewApplicationDecorator(
			decorator = "Decorate",
			portletName = "Documents and Media");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		JSONUser.addUser(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "Userfn1",
			userLastName = "Userln1",
			userScreenName = "usersn1");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea1@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea1@liferay.com");

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea1@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea1@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Click(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Portlet#SPECIFIC_TITLE",
			value1 = "Asset Publisher");

		AssertElementNotPresent(locator1 = "Icon#OK");

		Click(
			key_portletTitleName = "Asset Publisher",
			locator1 = "Portlet#SPECIFIC_TITLE",
			value1 = "Documents and Media");

		AssertElementNotPresent(locator1 = "Icon#OK");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "MANAGE_LAYOUTS",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.configureCustomTitlePG(portletTitleName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.viewSpecificPG(portletName = "Asset Publisher Custom");

		Portlet.configureCustomTitlePG(portletTitleName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		Portlet.viewSpecificPG(portletName = "Documents and Media Custom");
	}

	@description = "This is a test for LPS-106198. check the status for convension draft page and can edit widget page to content page conversion in draft form."
	@priority = "5"
	test ViewAndEditConversionDraftPage {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			widgetName = "Asset Publisher");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Convert to content page...",
			pageName = "Test Page Name");

		AssertVisible(
			key_alertMessage = "The page conversion is shown in the preview below. Make modifications needed before publishing the conversion, or discard the draft to leave the widget page in its original state.",
			key_type = "info",
			locator1 = "Message#CONVERSION_ALERT_MESSAGE");

		PageEditor.clickBack();

		AssertTextEquals.assertPartialText(
			key_itemName = "Test Page Name",
			locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_INFO",
			value1 = "Conversion Draft");

		Click.waitForMenuToggleJSClick(
			key_pageName = "Test Page Name",
			locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		MenuItem.viewPresent(menuItem = "Discard Conversion Draft");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertElementNotPresent(locator1 = "Button#EDIT_PENCIL");

		AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Edit Conversion Draft",
			pageName = "Test Page Name");

		PageEditor.addWidget(
			portletName = "Web Content Display",
			targetFragmentName = "Asset Publisher");

		PageEditor.removeFragment(fragmentName = "Asset Publisher");

		Portlet.viewNoSpecificPG(portletName = "Asset Publisher");

		SitePages.openPagesAdmin(siteURLKey = "Test Site Name");

		SitePages.gotoPageMenuItem(
			menuItem = "Edit Conversion Draft",
			pageName = "Test Page Name");

		PageEditor.viewFragment(fragmentName = "Web Content Display");

		PageEditor.viewNoFragment(fragmentName = "Asset Publisher");
	}

}