@component-name = "portal-knowledge-base"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Knowledge Base";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		Refresh();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			KBArticle.tearDownCP();
		}
	}

	@priority = 4
	@refactordone
	test CanAddMultipleArticles {
		property custom.properties = "feature.flag.LPS-156421=true";

		for (var kbCount : list "1,2,3") {
			JSONKnowledgeBase.addkBArticle(
				groupName = "Guest",
				kbArticleContent = "Knowledge Base Article Content ${kbCount}",
				kbArticleTitle = "Knowledge Base Article Title ${kbCount}");
		}

		for (var kbCount : list "1,2,3") {
			KBAdmin.openKBAdmin(siteURLKey = "guest");

			KBArticle.viewCP(
				highlight = "true",
				kbArticleContent = "Knowledge Base Article Content ${kbCount}",
				kbArticleTitle = "Knowledge Base Article Title ${kbCount}");
		}
	}

	@priority = 5
	@refactordone
	test CanDeleteArticle {
		property portal.acceptance = "true";

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.selectArticleCP(kbArticleTitle = "Knowledge Base Article Title");

		KBArticle.deleteCP();

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.viewDefaultCP();
	}

	@priority = 4
	@refactordone
	test CanEditArticleAndAddAttachment {
		property portal.acceptance = "true";

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content",
			kbArticleTitle = "Knowledge Base Article Title");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.editCP(
			kbArticleAttachment = "Document_1.txt",
			kbArticleContentEdit = "Knowledge Base Article Content Edit",
			kbArticleTitle = "Knowledge Base Article Title",
			kbArticleTitleEdit = "Knowledge Base Article Title Edit");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.viewKBArticleWithAttachmentCP(
			kbArticleAttachment = "Document_1.txt (259 B) Delete",
			kbArticleContent = "Knowledge Base Article Content Edit",
			kbArticleTitle = "Knowledge Base Article Title Edit");
	}

	@description = "This test covers LPS-171314. It ensures that the expiration label for Knowledge Base article works."
	@priority = 4
	test CanEnableArticleExpirationLabel {
		property custom.properties = "company.default.time.zone=America/Los_Angeles${line.separator}feature.flag.LPS-165476=true";
		property test.name.skip.portal.instance = "KBAdmin#CanEnableArticleExpirationLabel";

		task ("Given the Notification Date is changed to 2 weeks") {
			KBNavigator.openToConfigInSystemSettings(portlet = "System Service");

			AssertTextEquals(
				key_sectionTitle = "Article Expiration Date Notification",
				locator1 = "PagesAdmin#SECTION_SUBTITLE",
				value1 = "Define the timeline (in weeks) in which the user will receive a notification informing of an article expiration date. Articles within the specified expiration date will display the label \"Expiring Soon\" in the knowledge base management screen.");

			Type(
				key_text = "Notification Date (Weeks)",
				locator1 = "TextInput#ANY",
				value1 = 2);

			Button.clickSave();
		}

		task ("When a Knowledge Base article is created that has expired and another that has not") {
			KBAdmin.openKBAdmin(siteURLKey = "guest");

			KBArticle.addCP(
				enableExpirationDate = "true",
				kbArticleContent = "Knowledge Base Article Content",
				kbArticleTitle = "Knowledge Base Article Title",
				notificationDate = 7);

			KBArticle.addCP(
				enableExpirationDate = "true",
				kbArticleContent = "Knowledge Base Article Content",
				kbArticleTitle = "Knowledge Base Article Title 2",
				notificationDate = 15);
		}

		task ("Then the first Knowledge Base article has the expiration label and the second does not") {
			KBArticle.viewExpirationStatus(
				kbArticleTitle = "Knowledge Base Article Title",
				kbExpirationStatus = "Expiring Soon");

			KBArticle.viewNoExpirationStatus(kbArticleTitle = "Knowledge Base Article Title 2");
		}
	}

	@priority = 4
	@refactordone
	test CanRemoveParentArticle {
		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Parent",
			kbArticleTitle = "Knowledge Base Article Title Parent");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content Child",
			kbArticleTitle = "Knowledge Base Article Title Child");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.moveArticleCP(
			kbArticleCurrentParent = "Home",
			kbArticleTitle = "Knowledge Base Article Title Child");

		KBArticle.selectParentArticleCP(kbArticleTitle = "Knowledge Base Article Title Parent");

		KBArticle.gotoViaKBAdminCP(
			hasChildArticle = "true",
			kbArticleTitle = "Knowledge Base Article Title Parent");

		KBArticle.viewChildArticleCP(
			kbChildArticleContent = "Knowledge Base Article Content Child",
			kbChildArticleTitle = "Knowledge Base Article Title Child");

		KBArticle.moveArticleCP(
			kbArticleCurrentParent = "Knowledge Base Article Title Parent",
			kbArticleTitle = "Knowledge Base Article Title Child");

		KBFolder.selectParentCP(kbFolderName = "Home");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.viewCP(
			kbArticleContent = "Knowledge Base Article Content Child",
			kbArticleTitle = "Knowledge Base Article Title Child");
	}

	@priority = 4
	@refactordone
	test CanSelectParentArticle {
		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content Parent",
			kbArticleTitle = "Knowledge Base Article Title Parent");

		JSONKnowledgeBase.addkBArticle(
			groupName = "Guest",
			kbArticleContent = "Knowledge Base Article Content Child",
			kbArticleTitle = "Knowledge Base Article Title Child");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.moveArticleCP(
			kbArticleCurrentParent = "Home",
			kbArticleTitle = "Knowledge Base Article Title Child");

		KBArticle.selectParentArticleCP(kbArticleTitle = "Knowledge Base Article Title Parent");

		KBArticle.gotoViaKBAdminCP(
			hasChildArticle = "true",
			kbArticleTitle = "Knowledge Base Article Title Parent");

		KBArticle.viewChildArticleCP(
			kbChildArticleContent = "Knowledge Base Article Content Child",
			kbChildArticleTitle = "Knowledge Base Article Title Child");
	}

	@description = "This test covers LPS-171314. It ensures that the expiration label is displayed when the Notification Date is reached."
	@priority = 4
	test ExpirationNotificationShowsWhenNotificationDateIsReached {
		property custom.properties = "company.default.time.zone=America/Los_Angeles${line.separator}feature.flag.LPS-165476=true";

		task ("Given the Knowledge Base article is created with the expiration date of 1 week and 2 minutes in the future") {
			KBAdmin.openKBAdmin(siteURLKey = "guest");

			KBArticle.addCP(
				enableExpirationDate = "true",
				extendedMinutes = 2,
				getExpirationDateByPortal = "true",
				kbArticleContent = "Knowledge Base Article Content",
				kbArticleTitle = "Knowledge Base Article Title",
				notificationDate = 7);

			KBArticle.viewNoExpirationStatus(kbArticleTitle = "Knowledge Base Article Title");
		}

		task ("When waiting 2 minutes and refreshing the page") {

			// This pause is required to wait for the Knowledge Base Article to expire according to the steps in LPS-171314.

			Pause(locator1 = 120000);

			Refresh();
		}

		task ("Then the expiration label of the Knowledge Base article is displayed") {
			KBArticle.viewExpirationStatus(
				kbArticleTitle = "Knowledge Base Article Title",
				kbExpirationStatus = "Expiring Soon");
		}
	}

}