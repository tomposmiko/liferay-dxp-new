@component-name = "portal-categories"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Dashboard";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}

		for (var vocabulary : list "Topic,Audience,Stage") {
			JSONCategory.tearDownCategories(
				groupName = "Global",
				vocabularyName = ${vocabulary});
		}
	}

	@description = ""
	@priority = 5
	test AddCategoriesToBlogs {
		property portal.acceptance = "true";

		task ("Add a global category") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");

			JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Go to Blogs Admin and click to edit") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");
		}

		task ("Add categories from Audience and Stage Vocabularies") {
			Panel.expandPanel(panel = "Categorization");

			Click(
				key_fieldName = "Audience",
				locator1 = "Button#SELECT_BUTTON");

			AssetCategorization.selectCategories(categoryNameList = "Audience 1");

			Click(
				key_fieldName = "Stage",
				locator1 = "Button#SELECT_BUTTON");

			AssetCategorization.selectCategories(categoryNameList = "Stage 1");

			AssertTextEquals(
				key_categoryName = "Audience 1",
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "Audience 1");

			AssertTextEquals(
				key_categoryName = "Stage 1",
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "Stage 1");
		}
	}

	@description = ""
	@priority = 4
	test AddCategoryFromDMWithoutPermission {
		task ("Create new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role, its permissions and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentCreatorRole",
				roleTitle = "DocumentCreatorRole");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_DOCUMENT",
				resourceName = "com.liferay.document.library",
				roleTitle = "DocumentCreatorRole");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
				roleTitle = "DocumentCreatorRole");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentCreatorRole",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login in new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Go to add Basic Document page in Global") {
			DMNavigator.openToAddEntry(
				groupName = "Global",
				siteURLKey = "global");
		}

		task ("Assert if not possible to ADD cateory") {
			AssetCategorization.viewNoAddPermissions(vocabularyName = "Topic");
		}
	}

	@description = ""
	@priority = 4
	test AddCategoryFromDMWithPermission {
		task ("Go to add Basic Document page in Global") {
			DMNavigator.openToAddEntry(
				groupName = "Global",
				siteURLKey = "global");
		}

		task ("Add category via DM page") {
			AssetCategorization.addCategoryViaSelect(
				categoryName = "New Category",
				vocabularyName = "Topic");
		}
	}

	@description = "When the user clicks on Save and Add a new one, the category is saved"
	@priority = 5
	@uitest
	test AddCategoryViaSaveAndAddButton {
		property portal.acceptance = "true";

		task ("Add a global category via Save And Add button") {
			Category.openCategoriesAdmin(siteURLKey = "global");

			Category.addCategoryWithSaveAndAddButton(
				categoryName = "Category Name",
				vocabularyName = "Topic");
		}

		task ("View the global category is created successfully") {
			Category.viewCP(
				categoryName = "Category Name",
				vocabularyName = "Topic");
		}

		task ("Delete the global category") {
			JSONCategory.deleteCategory(
				categoryName = "Category Name",
				groupName = "Global",
				vocabularyName = "Topic");
		}
	}

	@description = "When the site administrator (not Global) accesses to the Categories administration application, the existing Global vocabularies appear as locked and it's not possible to edit them"
	@priority = 5
	@uitest
	test CannotEditGlobalCategoryInNormalSite {
		property portal.acceptance = "true";

		task ("Add a global category") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "Category Name",
				vocabularyName = "Topic");
		}

		task ("Cannot edit the global category in normal site") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.viewCP(
				categoryName = "Category Name",
				vocabularyName = "Topic");

			AssertElementNotPresent(locator1 = "Categories#ADD_CATEGORY_BUTTON");

			AssertVisible(
				key_vocabularyName = "Topic",
				locator1 = "Categories#LOCKED_VOCABULARY");
		}

		task ("Delete the global category") {
			JSONCategory.deleteCategory(
				categoryName = "Category Name",
				groupName = "Global",
				vocabularyName = "Topic");
		}
	}

	@description = "When Edit the Audience or Stage, default values are For internal use only ON , Allow user to select multiple categories ON, will be associated with web content, won't be required"
	@priority = 5
	test CheckAudienceStageDefaultSettings {
		task ("Go to Global Vocabularies") {
			Category.openCategoriesAdmin(siteURLKey = "global");
		}

		task ("Assert if Vocabulary is for internal use only") {
			AssertElementPresent(
				key_vocabularyName = "Audience",
				locator1 = "Categories#VOCABULARY_ICON_INTERNAL_USE");

			AssertElementPresent(
				key_vocabularyName = "Stage",
				locator1 = "Categories#VOCABULARY_ICON_INTERNAL_USE");
		}

		task ("Assert if Vocabulary allow multiple categories") {
			Vocabulary.viewVocabularyAllowMultipleCAtegories(
				label = "Allow Multiple Categories",
				vocabularyName = "Audience");

			Vocabulary.viewVocabularyAllowMultipleCAtegories(
				label = "Allow Multiple Categories",
				vocabularyName = "Stage");
		}

		task ("Assert if Asset Type is not requried") {
			Vocabulary.viewVocabularyAssociatedAssetTypesRequirement(
				label = "Required",
				vocabularyName = "Audience");

			Vocabulary.viewVocabularyAssociatedAssetTypesRequirement(
				label = "Required",
				vocabularyName = "Stage");
		}
	}

	@description = ""
	@priority = 4
	test CheckBlogCategoriesColumnAtContentDashboard {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Go to Content Dashboard and check the asset's categories under the respective column") {
			ContentDashboard.goToContentDashboard();

			AssertElementPresent(
				key_tableHeader = "Audience",
				locator1 = "LexiconTable#TABLE_HEADER");

			AssertElementPresent(
				key_tableHeader = "Stage",
				locator1 = "LexiconTable#TABLE_HEADER");
		}
	}

	@description = ""
	@priority = 4
	test CheckBlogCategoriesGraphAtContentDashboard {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Go to Content Dashboard and check the asset is being counted at graph") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ContentDashboard.goToContentDashboard();

			AssertTextPresent(
				locator1 = "ContentDashboard#X_AXIS_CATEGORIES_NAME",
				value1 = "Audience 1",
				xAxisCategoryName = "Audience 1");

			ContentDashboard.moveVocabularyDisplayConfiguration(vocabularyName = "Audience");

			AssertTextPresent(
				locator1 = "ContentDashboard#X_AXIS_CATEGORIES_NAME",
				value1 = "Stage 1",
				xAxisCategoryName = "Stage 1");
		}
	}

	@description = ""
	@priority = 4
	test CheckBlogFilterByCategory {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Go to Content Dashboard and check the asset is being counted at graph") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ContentDashboard.goToContentDashboard();

			ContentDashboard.filterByCategory(
				categoryNameList = "Audience 1,Stage 1",
				filterOption = "Categories");

			AssertTextEquals(
				key_tableEntry = "Blogs Entry Title",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE",
				value1 = "Blogs Entry Title");
		}
	}

	@description = ""
	@priority = 4
	test CheckBlogFilterByCategoryAtAssetPublisher {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Create a Dynamic Collection") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Blogs Entry",
				title = "Dynamic Collection Test");
		}

		task ("Filter blogs entry by category") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");

			AssetListsAdmin.addCategoriesFilter(
				categoryNameList = "Audience 1,Stage 1",
				queryAndOperator = "All",
				queryContains = "Contains");
		}

		task ("Add a Collection Display to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");

			Button.clickPublish();
		}

		task ("Assert the correct asset is shown") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-page-name");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Blogs Entry Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Blogs Entry Title");

			AssertTextEquals.assertPartialText(
				key_assetContent = "Blogs Entry Content",
				locator1 = "APAsset#ASSET_CONTENT",
				value1 = "Blogs Entry Content");
		}
	}

	@description = ""
	@priority = 3
	test CheckBlogFilterByCategoryAtCollection {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Create a Dynamic Collection") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Blogs Entry",
				title = "Dynamic Collection Test");
		}

		task ("Create a first variation for the collection and filter web contents by category") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");

			AssetListsAdmin.addCategoriesFilter(
				categoryNameList = "Audience 1,Stage 1",
				queryAndOperator = "All",
				queryContains = "Contains");
		}

		task ("Go to Content Dashboard and check the asset is being counted at graph") {
			LexiconEntry.gotoVerticalEllipsisMenuItemNoError(menuItem = "View Items");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals(
				key_tableEntry = "Blogs Entry Title",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE",
				value1 = "Blogs Entry Title");
		}
	}

	@description = ""
	@priority = 4
	test CheckBlogFilterByCategoryAtCollectionWithFragment {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Create a Dynamic Collection") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Blogs Entry",
				title = "Dynamic Collection Test");
		}

		task ("Filter blogs entry by category") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection Test");

			AssetListsAdmin.addCategoriesFilter(
				categoryNameList = "Audience 1,Stage 1",
				queryAndOperator = "All",
				queryContains = "Contains");
		}

		task ("Add a Collection Display to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in the Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection Test",
				fragmentName = "Collection Display",
				styleDisplay = "Bulleted List");

			Button.clickPublish();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-page-name");
		}

		task ("Assert the correct asset is shown") {
			AssertTextEquals.assertPartialText(
				locator1 = "Fragment#CONTENT_DISPLAY_ASSET_BULLET_LIST_TEXT",
				value1 = "Blogs Entry");
		}
	}

	@description = ""
	@priority = 4
	test CheckBlogFilterByCategoryBar {
		property portal.acceptance = "true";

		task ("Add a global category") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");
			var categoryId2 = JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId1},${categoryId2}",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Go to Content Dashboard and check the asset is being counted at graph") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ContentDashboard.goToContentDashboard();

			ContentDashboard.clickOnFirstBar();

			WaitForPageLoad();

			AssertTextPresent(
				locator1 = "ContentDashboard#FIRST_ELEMENT_LISTED",
				value1 = "Blogs Entry Title");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckBlogsCategoriesMoreThanOneSite {
		property portal.acceptance = "true";

		task ("Add the second site") {
			HeadlessSite.addSite(siteName = "Test Site Name 2");
		}

		task ("Add a global category") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience 1",
				vocabularyName = "Audience");

			JSONCategory.addCategory(
				groupName = "Global",
				title = "Stage 1",
				vocabularyName = "Stage");
		}

		task ("Create two blogs") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content 1",
				groupName = "Test Site Name",
				title = "Blogs Entry Title 1");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content 2",
				groupName = "Test Site Name 2",
				title = "Blogs Entry Title 2");
		}

		task ("Go to Blogs Admin and click to edit the first blog") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title 1");
		}

		task ("Add categories from Audience and Stage Vocabularies") {
			Panel.expandPanel(panel = "Categorization");

			Click(
				key_fieldName = "Audience",
				locator1 = "Button#SELECT_BUTTON");

			AssetCategorization.selectCategories(categoryNameList = "Audience 1");

			Click(
				key_fieldName = "Stage",
				locator1 = "Button#SELECT_BUTTON");

			AssetCategorization.selectCategories(categoryNameList = "Stage 1");

			AssertTextEquals(
				key_categoryName = "Audience 1",
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "Audience 1");

			AssertTextEquals(
				key_categoryName = "Stage 1",
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "Stage 1");
		}

		task ("Go to Blogs Admin and click to edit the second blog") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name-2");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title 2");
		}

		task ("Add categories from Audience and Stage Vocabularies") {
			Panel.expandPanel(panel = "Categorization");

			Click(
				key_fieldName = "Audience",
				locator1 = "Button#SELECT_BUTTON");

			AssetCategorization.selectCategories(categoryNameList = "Audience 1");

			Click(
				key_fieldName = "Stage",
				locator1 = "Button#SELECT_BUTTON");

			AssetCategorization.selectCategories(categoryNameList = "Stage 1");

			AssertTextEquals(
				key_categoryName = "Audience 1",
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "Audience 1");

			AssertTextEquals(
				key_categoryName = "Stage 1",
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "Stage 1");
		}
	}

	@description = ""
	@priority = 5
	test CheckCategoriesAtBlogs {
		property portal.acceptance = "true";

		task ("Create a blog") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Go to Blogs Admin and click to edit") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");
		}

		task ("Click to see categorization, assert if Audience and Stage are visible") {
			Panel.expandPanel(panel = "Categorization");

			AssertElementPresent(
				key_categoryName = "Audience",
				locator1 = "Categories#VOCABULARY_CATEGORY");

			AssertElementPresent(
				key_categoryName = "Stage",
				locator1 = "Categories#VOCABULARY_CATEGORY");
		}
	}

	@description = ""
	@priority = 4
	test CheckDMVocabularyAssetSubtypeBasicDocument {
		property osgi.app.includes = "document-library-google-docs";

		task ("Create a vocabulary with Associated Asset Type of Document > Basic Document") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetSubtype = "Basic Document",
				assetType = "Document",
				vocabularyName = "Basic Document Vocabulary");
		}

		task ("Check avaliable vocabularies to Basic Document") {
			DMNavigator.openToAddEntry(
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			for (var vocabulary : list "Basic Document Vocabulary,Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}

		task ("Check avaliable vocabularies to External Video Shortcut") {
			DMNavigator.openToAddEntry(
				documentTypeName = "External Video Shortcut",
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(
				key_vocabularyName = "Basic Document Vocabulary",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");

			for (var vocabulary : list "Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}

		task ("Check avaliable vocabularies to Google Drive Shortcut") {
			DMNavigator.openToAddEntry(
				documentTypeName = "Google Drive Shortcut",
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(
				key_vocabularyName = "Basic Document Vocabulary",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");

			for (var vocabulary : list "Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}
	}

	@description = ""
	@priority = 4
	test CheckDMVocabularyAssetSubtypeExternalVideoShortcut {
		property osgi.app.includes = "document-library-google-docs";

		task ("Create a vocabulary with Associated Asset Type of Document > External Video Shortcut") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetSubtype = "External Video Shortcut",
				assetType = "Document",
				vocabularyName = "External Video Shortcut Vocabulary");
		}

		task ("Check avaliable vocabularies to External Video Shortcut") {
			DMNavigator.openToAddEntry(
				documentTypeName = "External Video Shortcut",
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			for (var vocabulary : list "External Video Shortcut Vocabulary,Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}

		task ("Check avaliable vocabularies to Basic Documents") {
			DMNavigator.openToAddEntry(
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(
				key_vocabularyName = "External Video Shortcut Vocabulary",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");

			for (var vocabulary : list "Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}

		task ("Check avaliable vocabularies to Google Drive Shortcut") {
			DMNavigator.openToAddEntry(
				documentTypeName = "Google Drive Shortcut",
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(
				key_vocabularyName = "External Video Shortcut Vocabulary",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");

			for (var vocabulary : list "Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}
	}

	@description = ""
	@priority = 4
	test CheckDMVocabularyAssetSubtypeGoogleDriveShortcut {
		property osgi.app.includes = "document-library-google-docs";

		task ("Create a vocabulary with Associated Asset Type of Document > Google Drive Shortcut") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetSubtype = "Google Drive Shortcut",
				assetType = "Document",
				vocabularyName = "Google Drive Shortcut Vocabulary");
		}

		task ("Check avaliable vocabularies to Google Drive Shortcut") {
			DMNavigator.openToAddEntry(
				documentTypeName = "Google Drive Shortcut",
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			for (var vocabulary : list "Google Drive Shortcut Vocabulary,Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}

		task ("Check avaliable vocabularies to Basic Documents") {
			DMNavigator.openToAddEntry(
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(
				key_vocabularyName = "Google Drive Shortcut Vocabulary",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");

			for (var vocabulary : list "Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}

		task ("Check avaliable vocabularies to External Video Shortcut") {
			DMNavigator.openToAddEntry(
				documentTypeName = "External Video Shortcut",
				groupName = "Test Site Name",
				siteURLKey = "test-site-name");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(
				key_vocabularyName = "Google Drive Shortcut Vocabulary",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");

			for (var vocabulary : list "Topic,Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabulary},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}
	}

	@description = "LPS-134875 Internal categories are not shown in facets and result in a public context."
	@priority = 5
	test CheckInternalCategoriesInFacets {
		property portal.acceptance = "true";

		task ("Create internal categories") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Global",
				title = "Internal Category",
				vocabularyName = "Audience");
		}

		task ("Add WC with internal category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = ${categoryId},
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Search for Web Content and Assert") {
			Navigator.openURL();

			SearchPortlets.searchEmbedded(searchTerm = "Internal Category");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "Internal Category");
		}
	}

	@description = "LPS-134682 If categories are marked as internal, won't show in Categories Navigation widget."
	@priority = 3
	test CheckInternalCategoriesWidgetAssetsCategorization {
		task ("Add a global category to each Topic (public) and Audience (private)") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "Topic Category",
				vocabularyName = "Topic");

			JSONCategory.addCategory(
				groupName = "Global",
				title = "Audience Category",
				vocabularyName = "Audience");
		}

		task ("Add a Categories Navigation to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Category Filter");
		}

		task ("Check if only Topic Categories are shown") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			CategoriesNavigationPortlet.selectCategoryPG(categoryName = "Topic Category");

			AssertElementNotPresent(
				key_nodeName = "Audience Category",
				locator1 = "Treeview#NODE_UNSELECTED",
				value1 = "Audience Category");
		}
	}

	@description = "LPS-134875 Public categories are shown in facets and result in a public context."
	@priority = 4
	test CheckPublicCategoriesInFacets {
		property portal.acceptance = "true";

		task ("Create public categories") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Global",
				title = "Public Category",
				vocabularyName = "Topic");
		}

		task ("Add WC with public category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = ${categoryId},
				content = "Web Content Content With Category",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Search for Web Content and Assert") {
			Navigator.openURL();

			SearchPortlets.searchEmbedded(searchTerm = "Internal Category");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Web Content Title",
				searchAssetType = "Web Content Article");
		}
	}

	@description = "LPS-134875 Visibility is not editable for vocabularies"
	@priority = 4
	test CheckVocabularyVisibilityNotEditable {
		task ("Add a vocabulary disallow multiple categories") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addCP(vocabularyName = "Vocabulary Name");
		}

		task ("Assert if vocabulary visibility can not be changed") {
			Vocabulary.assertVocabularyVisibilityNonEditable(
				visibilityType = "Public",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "LPS-134875 Categories can only be moved to vocabularies with the same visibility"
	@priority = 4
	test MoveCategoryBetweenDifferentVisibility {
		task ("Create categories in public and internal vocabularies") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "Public Category",
				vocabularyName = "Topic");

			JSONCategory.addCategory(
				groupName = "Global",
				title = "Internal Category",
				vocabularyName = "Audience");
		}

		task ("Try to move category between vocabularies with differente visibility") {
			Category.openCategoriesAdmin(siteURLKey = "global");

			Category.assertMoveDifferentVisibilityVocabulary(
				categoryName = "Public Category",
				vocabularyName = "Topic",
				vocabularyName2 = "Audience");

			Category.assertMoveDifferentVisibilityVocabulary(
				categoryName = "Internal Category",
				vocabularyName = "Audience",
				vocabularyName2 = "Topic");
		}
	}

	@description = "When the user clicks on the link to documentation, the documentation link is opened"
	@priority = 3
	test OpenLiferayLearnCategoriesVocabulariesPage {
		task ("Click on the Documentation link") {
			Category.openCategoriesAdmin(siteURLKey = "global");

			Click(locator1 = "Categories#VOCABULARY_LINK_DOCUMENTATION");
		}

		task ("Assert user is taken to the the Liferay Learn page") {
			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "tags-and-categories/defining-categories-and-vocabularies-for-content");
		}
	}

	@description = "LPS-134466 When 'Categorization' in web content editor, vocabularies management application or content dashboard when empty graph, the message Learn how with a link to the documentation"
	@priority = 3
	test OpenLiferayLearnCategoriesVocabulariesPageFromContentDashboard {
		task ("Go to content dashboard") {
			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");
		}

		task ("Click on Learn How and Assert if user is taken to the the Liferay Learn page") {
			Category.assertLearnHowLink();
		}
	}

	@description = "LPS-134466 When 'Categorization' in web content editor, vocabularies management application or content dashboard when empty graph, the message Learn how with a link to the documentation"
	@priority = 3
	test OpenLiferayLearnCategoriesVocabulariesPageFromWCEditor {
		task ("Go to web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			Panel.expandPanel(panel = "Categorization");
		}

		task ("Click on Learn How and Assert if user is taken to the the Liferay Learn page") {
			Category.assertLearnHowLink();
		}
	}

	@description = "When a change in Global Vocabularies is made, the Global vocabularies section in a site's Categories administration application updates accordingly"
	@priority = 5
	test PropagateChangesOfGlobalCategoryToNormalSite {
		property portal.acceptance = "true";

		task ("Add a global category") {
			JSONCategory.addCategory(
				groupName = "Global",
				title = "Category Name",
				vocabularyName = "Topic");
		}

		task ("View the global category in normal site") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.viewCP(
				categoryName = "Category Name",
				vocabularyName = "Topic");
		}

		task ("Edit the global category") {
			JSONCategory.updateCategoryName(
				categoryName = "Category Name",
				groupName = "Global",
				title = "Category Name Edit",
				vocabularyName = "Topic");
		}

		task ("View the edited global category in normal site") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.viewCP(
				categoryName = "Category Name Edit",
				vocabularyName = "Topic");
		}

		task ("Delete the global category") {
			JSONCategory.deleteCategory(
				categoryName = "Category Name Edit",
				groupName = "Global",
				vocabularyName = "Topic");
		}
	}

	@description = "When the user opens the "Categorization" section and there's a vocabulary marked as internal, that vocabulary is shown in the Internal categories section"
	@priority = 5
	test ViewInternalVocabularyInWebContentEditor {
		property portal.acceptance = "true";

		task ("Add a web content based on Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();
		}

		task ("View internal vocabularies in sidebar panel") {
			Panel.expandPanel(panel = "Categorization");

			AssertVisible(
				key_text = "Internal Categories",
				locator1 = "Sidebar#SUBTITLE");

			for (var vocabularyName : list "Audience,Stage") {
				AssertVisible(
					key_vocabularyName = ${vocabularyName},
					locator1 = "AssetCategorization#CATEGORIES_FIELD");
			}
		}
	}

	@description = "When the user opens the "Categorization" section and there's a vocabulary not marked as internal, that vocabulary is shown in the Public categories section"
	@priority = 5
	test ViewPublicVocabularyInWebContentEditor {
		property portal.acceptance = "true";

		task ("Add a web content based on Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();
		}

		task ("View internal vocabularies in sidebar panel") {
			Panel.expandPanel(panel = "Categorization");

			AssertVisible(
				key_text = "Public Categories",
				locator1 = "Sidebar#SUBTITLE");

			AssertVisible(
				key_vocabularyName = "Topic",
				locator1 = "AssetCategorization#CATEGORIES_FIELD");
		}
	}

}