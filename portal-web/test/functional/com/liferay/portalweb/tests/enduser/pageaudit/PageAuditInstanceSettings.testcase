@component-name = "portal-page-audit"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Audit";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		TestUtils.hardRefresh();

		PageAudit.tearDownInstanceSettingsConfigurations();

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = ""
	@priority = 3
	test DefaultStrategyAtInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#DefaultStrategyAtInstanceSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaInstanceSettings(preferredStrategy = "Choose an Option");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 5
	test InstanceSettingsHierarchy {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#InstanceSettingsHierarchy";

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaInstanceSettings(preferredStrategy = "Mobile");
		}

		task ("Go to Site Settings") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");
		}

		task ("Check if values are the same as Instance Settings") {
			AssertTextEquals(
				locator1 = "PageAudit#API_FIELD",
				value1 = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");

			AssertTextEquals(
				locator1 = "Dropdown#SELECTED_VALUE",
				value1 = "Mobile");
		}
	}

	@description = ""
	@priority = 4
	test MobileStrategyAtInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#MobileStrategyAtInstanceSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaInstanceSettings(preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 5
	test SiteSettingsHierarchyOverInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#SiteSettingsHierarchyOverInstanceSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API by System Settings") {
			PageAudit.setAPIViaInstanceSettings(preferredStrategy = "Desktop");
		}

		task ("Set Google PageSpeed API by Site Settings and selecting a different strategy") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Assert if mobile failures are checked") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 3
	test UncheckedInstanceSettingsSiteScopeThenUncheckedAtSiteSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsSiteScopeThenUncheckedAtSiteSettings";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings(scope = "Site Scope");
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Enable",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = ""
	@ignore = "true"
	@priority = 3
	test UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteScope {
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteScope";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings();
		}

		task ("Then the 'Google PageSpeed Insights' tab won't be visible in the 'SITE SCOPE' section") {
			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = ""
	@priority = 3
	test UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteSettings";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings();
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			Click(
				key_itemName = "Pages",
				locator1 = "ListGroupItem#ITEM_TEXT");

			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = ""
	@priority = 3
	test UncheckedInstanceSettingsVirtualInstanceThenNotVisiblePageAuditIcon {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsVirtualInstanceThenNotVisiblePageAuditIcon";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings();
		}

		task ("Navigate to Site and check if icon is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

}