@component-name = "portal-staging"
definition {

	property app.server.bundles.size = "1";
	property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
	property databases.size = "1";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Staging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		Staging.remoteStagingSetUpViaJson(
			branchingPrivate = "true",
			branchingPublic = "true",
			groupName = "Site Name",
			remotePort = "9080");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This is a use case for LPS-128736. Check Asset Publisher can't publish the displayed content to live by default."
	@priority = "4"
	test AssertContentNotBePublishedByDefault {
		property test.name.skip.portal.instance = "RemoteStagingWithVersioning#AssertContentNotBePublishedByDefault";

		task ("Given: Keep 'Enable Dynamic Export' checkbox unchecked") {
			APNavigator.openToConfigInSystemSettings(portlet = "Asset Publisher");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_settingFieldName = "Enable Dynamic Export",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}

		task ("When: Add a web content entry and place an asset publisher widget to page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();

			Navigator.openSiteURL(siteName = "Site Name");

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("And: Publish to remote live site without web content entry") {
			Navigator.openSiteURL(siteName = "Site Name");

			Staging.gotoPublishToLive();

			Staging.configurePublishToLive(uncheckContentNameList = "Web Content");

			Staging.publishToLive(remoteStaging = "true");
		}

		task ("Then: Verify the page is published to remote live and web content is not published") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://localhost:9080",
				userEmailAddress = "test@liferay.com");

			Navigator.gotoSitePage(
				baseURL = "http://localhost:9080",
				pageName = "Staging Test Page",
				siteName = "Remote Site");

			AssetPublisherPortlet.configureDynamicAssetSelectionPG(portletName = "Asset Publisher");

			Refresh();

			Alert.viewInfoMessageSpecific(infoMessage = "There are no results.");
		}
	}

	@description = "Able to publish web content via remote staging."
	@priority = "3"
	test PublishWCViaRemoteStaging {
		property test.name.skip.portal.instance = "RemoteStagingWithVersioning#PublishWCViaRemoteStaging";

		task ("Given: Add web content display on page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page",
				widgetName = "Web Content Display");
		}

		task ("When: Add a web content entry to web content display and publish to remote live") {
			Navigator.gotoSitePage(
				pageName = "Staging Test Page",
				siteName = "Site Name");

			WebContentDisplayPortlet.add(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			Staging.gotoPublishToLive();

			Staging.publishToLive(remoteStaging = "true");
		}

		task ("Then: Verify web content entry is published to remote live and user cannot edit web content entry on remote site") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://localhost:9080",
				userEmailAddress = "test@liferay.com");

			Navigator.gotoSitePage(
				baseURL = "http://localhost:9080",
				pageName = "Staging Test Page",
				siteName = "Remote Site");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContentDisplayPortlet.viewCannotEditWC(webContentTitle = "Web Content Title");
		}
	}

}