@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}

		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Fragment Name");
		}

		task ("Navigate to fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-76817. Can namespace the CSS of a Web Fragment to avoid affecting the rest of the page."
	@priority = 3
	test CanCheckTheNamespaceOfCSSInFragments {
		task ("Edit this fragment with the following codes") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Fragment Name",
				item = "Edit");

			var htmlSnippet = '''
<div class="test">
CSS
</div>
<div>
NO CSS
</div>
		''';
			var cssSnippet = '''
.test
{ font-size: 40px; }
		''';

			FragmentsEditor.typeHtmlEditor(content = ${htmlSnippet});

			FragmentsEditor.typeCssEditor(content = ${cssSnippet});

			FragmentsEditor.waitForAutoSave();
		}

		task ("Assert CSS only applies to CSS and not NO CSS in Fragment preview") {
			FragmentsEditor.assertFragmentPreview(
				fragmentLocator = "//div[@class='test']",
				text = "CSS");

			FragmentsEditor.assertFragmentPreview(fragmentLocator = "//div[@class='test']/parent::div/following-sibling::style");
		}

		task ("Assert Success Message") {
			PortletEntry.publish();
		}
	}

	@description = "This is a test for LPS-108376. Can check Cacheable for fragments when create them in portal and they are non-Cachable by default."
	@priority = 5
	@uitest
	test MarkFragmentCreatedInPortalAsCacheable {
		property portal.acceptance = "true";

		task ("Mark the fragment as cacheable") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Fragment Name",
				item = "Mark as Cacheable");

			AssertConfirm(value1 = "Only check when developing a static fragment that does not use request handling, the CMS query API, or other dynamic features. Referencing taglibs can also warrant unchecking this feature, since they could modify content outside the template engine's generated cache.");

			Alert.viewSuccessMessage();

			LexiconCard.viewCardLabel(
				card = "Fragment Name",
				cardLabel = "Cached",
				index = 2);
		}
	}

	@description = "This is a test for LPS-108376. Can check Cacheable for fragments without Read-Only label imported to portal and they are non-Cachable by default."
	@priority = 4
	test MarkFragmentWithoutReadOnlyImportedToPortalAsCacheable {
		task ("Import a fragment collection without Read-Only") {
			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Mark the imported fragment as cacheable") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Content",
				item = "Mark as Cacheable");

			AssertConfirm(value1 = "Only check when developing a static fragment that does not use request handling, the CMS query API, or other dynamic features. Referencing taglibs can also warrant unchecking this feature, since they could modify content outside the template engine's generated cache.");

			Alert.viewSuccessMessage();

			LexiconCard.viewCardLabel(
				card = "Content",
				cardLabel = "Cached",
				index = 2);
		}

		task ("View the imported fragment without Read-Only label") {
			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Content",
				item = "Edit");

			AssertElementNotPresent(locator1 = "FragmentEditor#READ_ONLY_VIEW");
		}
	}

	@description = "This is a test for LPS-111657. Can save Container and nested elements as a new composition when the Container is inside a column of Row."
	@priority = 5
	@uitest
	test SaveContainerAsCompositionInModuleOfGrid {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Add a Grid to page") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Container to the first module of grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = 1,
				fragmentName = "Container",
				navTab = "Fragments");
		}

		task ("Add an Image to the Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Image",
				navTab = "Fragments");
		}

		task ("Add an Asset Publisher below Image inside the Container") {
			PageEditor.addElementToContainer(
				navTab = "Widgets",
				portletName = "Asset Publisher",
				targetElementName = "Image");

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Asset Publisher']",
				key_position = 1,
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			PageEditor.waitForAutoSave();

			PageEditor.gotoTab(tabName = "Browser");

			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("Assert save Container and nested elements as composition") {
			PageEditor.gotoSaveAsFragment(fragmentName = "Container");

			PageEditorComposition.saveAsFragment(fragmentName = "New Fragment Name");
		}

		task ("Add new composition to below Grid to page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				composition = "true",
				fragmentName = "New Fragment Name",
				targetFragmentName = "Grid");

			for (var elementName : list "Image,Asset Publisher") {
				AssertElementPresent(
					key_elementHeader = "//div[@aria-label='${elementName}']",
					key_position = 2,
					locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
			}
		}
	}

}