@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-165776. The page creator could add elements into the Container via keyboard."
	@priority = 5
	test AddElementsIntoContainer {
		property portal.acceptance = "true";

		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator adds a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragmentViaKeyboard(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Then the page creator could add elements into Container via keyboard") {
			PageEditor.addFragmentViaKeyboard(
				collectionName = "Basic Components",
				fragmentName = "Button",
				upCount = 1);

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Button']",
				key_elementType = "Container",
				key_position = 1,
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			PageEditor.addWidgetViaKeyboard(
				categoryName = "Content Management",
				upCount = 1,
				widgetName = "Web Content Display");

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Web Content Display']",
				key_elementType = "Container",
				key_position = 1,
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-165776. The page creator could add elements into the Grid via keyboard."
	@priority = 5
	test AddElementsIntoGrid {
		property portal.acceptance = "true";

		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator adds a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragmentViaKeyboard(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Then the page creator could add elements into Grid via keyboard") {
			PageEditor.addFragmentViaKeyboard(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				upCount = 1);

			AssertElementPresent(
				key_columnNumber = 3,
				key_elementHeader = "//div[@aria-label='Heading']",
				key_position = 1,
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			PageEditor.addWidgetViaKeyboard(
				categoryName = "Content Management",
				upCount = 4,
				widgetName = "Asset Publisher");

			AssertElementPresent(
				key_columnNumber = 1,
				key_elementHeader = "//div[@aria-label='Asset Publisher']",
				key_position = 1,
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			PageEditor.addFragmentViaKeyboard(
				collectionName = "Basic Components",
				fragmentName = "Button",
				upCount = 6);

			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = 1);

			PageEditor.viewFragmentOrder(
				fragmentName = "Grid",
				position = 2);
		}
	}

	@description = "This is a test for LPS-165776. The page creator could add fragments to page via keyboard."
	@priority = 5
	test AddFragmentsToPage {
		property portal.acceptance = "true";

		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page creator could add fragments to page via keyboard") {
			PageEditor.addFragmentViaKeyboard(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.viewFragment(fragmentName = "Heading");

			PageEditor.addFragmentViaKeyboard(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.viewFragment(fragmentName = "Button");
		}
	}

	@description = "This is a test for LPS-165776. The page creator could add widgets to page via keyboard."
	@priority = 5
	test AddWidgetsToPage {
		property portal.acceptance = "true";

		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page creator could add fragments to page via keyboard") {
			PageEditor.addWidgetViaKeyboard(
				categoryName = "Collaboration",
				widgetName = "Blogs");

			PageEditor.viewFragment(fragmentName = "Blogs");

			PageEditor.addWidgetViaKeyboard(
				categoryName = "Content Management",
				widgetName = "Asset Publisher");

			PageEditor.viewFragment(fragmentName = "Asset Publisher");
		}
	}

	@description = "This is a test for LPS-167457. The page creator shouldn't be able to add multiple Blogs widget to page via keyboard."
	@priority = 3
	test CannotAddMultipleBlogsWidgetToPageViaKeyboard {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator adds a Blogs widget to page via keyboard") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Navigator.gotoNavTab(navTab = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = "Blogs");

			KeyPress(
				ariaLabel = "Add Blogs",
				key_collectionName = "Collaboration",
				key_fragmentName = "Blogs",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
				value1 = "\ENTER");

			KeyPress(
				ariaLabel = "Add Blogs",
				key_collectionName = "Collaboration",
				key_fragmentName = "Blogs",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
				value1 = "\ENTER");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator should not see the plus icon on Blogs widget") {
			AssertElementNotPresent(
				ariaLabel = "Add Blogs",
				key_collectionName = "Collaboration",
				key_fragmentName = "Blogs",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

			PageEditor.viewFragment(fragmentName = "Blogs");
		}
	}

	@description = "This is a test for LPS-165776. The page creator could reorder fragments on page editor via Browser panel with keyboard."
	@priority = 5
	test ReorderElements {
		property portal.acceptance = "true";

		task ("Given a page creator has fragments on content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Image",
				navTab = "Fragments");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Container");

			PageEditor.addWidget(
				portletName = "Documents and Media",
				targetFragmentName = "Heading");
		}

		task ("When the page creator accesses to the Browser panel") {
			PageEditor.gotoTab(tabName = "Browser");
		}

		task ("Then the page creator could reorder elements via keyboard") {
			PageEditor.reorderElementViaKeyboard(
				elementName = "Documents and Media",
				upCount = 4);

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Documents and Media']",
				key_elementType = "Container",
				key_position = 1,
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			PageEditor.viewFragmentOrder(
				fragmentName = "Container",
				position = 1);

			PageEditor.viewFragmentOrder(
				fragmentName = "Documents and Media",
				position = 2);

			PageEditor.viewFragmentOrder(
				fragmentName = "Image",
				position = 3);

			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = 4);

			PageEditor.reorderElementViaKeyboard(
				downCount = 3,
				elementName = "Image");

			PageEditor.viewFragmentOrder(
				fragmentName = "Container",
				position = 1);

			PageEditor.viewFragmentOrder(
				fragmentName = "Documents and Media",
				position = 2);

			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = 3);

			PageEditor.viewFragmentOrder(
				fragmentName = "Image",
				position = 4);
		}
	}

}