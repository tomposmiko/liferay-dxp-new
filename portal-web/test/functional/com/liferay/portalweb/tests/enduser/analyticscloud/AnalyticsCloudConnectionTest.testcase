@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Automation ID: LRAC-8832 | Test Summary: Add DXP data source and configure only one site"
	@priority = 3
	test AddDataSourceForOneSite {
		property portal.release = "true";

		task ("Add site and page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Open site Liferay DXP and close all sessions") {
			Navigator.openURL();

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC, go to sites overview and change sites activities to the last 24 hours") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});

			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("View the number of Unique Visitors in the sites activities") {
			ACCards.viewMetricValue(
				cardTitle = "${propertyName} Activities",
				metricName = "Unique Visitors",
				metricValue = 0);
		}

		task ("Launch DXP and go to site") {
			ACUtils.launchDXP();

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Launch AC and go to sites overview and change sites activities to the last 24 hours") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});

			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("View if the number of Unique Visitors in the sites activities has changed, this secure the connection ") {
			ACCards.viewMetricValue(
				cardTitle = "${propertyName} Activities",
				metricName = "Unique Visitors",
				metricValue = 1,
				timeFilter = "Last 24 hours");
		}
	}

	@description = "Automation ID: LRAC-8108 | Test Summary: Add date source page that allows user to choose type of data source"
	@ignore = "true"
	@priority = 5
	test AddDataSourcePageAllowsUserToChooseWhatKind {

		// Salesforce and CSV are hidden due to LRAC-11651 and LRAC-11571

		task ("Go to data sources and enter in each one to assert that the user can choose any of them") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToDataSources();

			ACSettings.clickGenericAddOrConfirmationButton();

			ACSettings.assertCanChooseDataSourceOptions();
		}
	}

	@description = "Automation ID: LRAC-8836 | Test Summary: Cancel Creating a DXP Data Source"
	@priority = 3
	test CancelCreatingDxpDataSource {
		property test.name.skip.portal.instance = "AnalyticsCloudConnectionTest#CancelCreatingDxpDataSource";

		task ("Create a new workspace") {
			ACUtils.launchAC(
				emailList = "acworkspace@liferay.com",
				workspaceName = "New AC Workspace");
		}

		task ("Access the data sources, select Liferay DXP and click the cancel button") {
			ACNavigation.goToSettings();

			ACSettings.goToDataSources();

			if (IsElementPresent(key_textValue = "Welcome to Analytics Cloud", locator1 = "ACUtils#GENERIC_TEXT")) {
				ACUtils.closeModal();
			}

			ACSettings.clickGenericAddOrConfirmationButton();

			Click(locator1 = "AnalyticsCloudConnection#LIFERAY_DXP_SOURCE");

			ACNavigation.clickCancelButton();
		}

		task ("Assert the data source list if a new data source has not been created") {
			ACSettings.goToDataSources();

			if (IsElementPresent(key_textValue = "Welcome to Analytics Cloud", locator1 = "ACUtils#GENERIC_TEXT")) {
				ACUtils.closeModal();
			}

			ACUtils.viewGenericText(textValueList = "No Data Sources Connected,Add a data source to get started.,Access our documentation to learn more.");
		}
	}

	@description = "Automation ID: LRAC-8107 | Test Summary: Navigates to data source page"
	@priority = 5
	test CanNavigatesToDataSourcePage {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		var dataSource = StringUtil.replace(${propertyName}, " Combined Property", "");

		ACDXPSettings.syncNewContactData();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = ${propertyName});

		ACNavigation.goToSettings();

		ACUtils.assertItemsName(itemList = ${dataSource});

		ACUtils.assertPageTitle(pageTitle = "Data Sources");
	}

	@description = "Bug: LRAC-11423 | Automation ID: LRAC-11475 | Test Summary: Check if it is possible to connect AC with DXP using an existing data source"
	@priority = 4
	test CheckIfIsPossibleToReconnectACWithDXP {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Disconnect the DXP to AC") {
			ACDXPSettings.disconnectDXPFromAnalyticsCloud();
		}

		task ("Launch AC and copy the token from an existing data source") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromExistingDataSource(dataSourceName = ${assignedPropertyName});
		}

		task ("Reconnect AC with DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}
	}

	@description = "Automation ID: LRAC-8821 | Test Summary: Data Source list is searchable"
	@priority = 5
	test DataSourceListIsSearchable {
		task ("Create data sources") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

			var dataSource = StringUtil.replace(${propertyName}, " Combined Property", "");

			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACUtils.assertDataSourceName(dataSourceName = ${dataSource});
		}

		task ("Assert that a data source is searchable and found") {
			ACUtils.searchBar(searchItem = ${dataSource});

			ACUtils.assertDataSourceName(dataSourceName = ${dataSource});
		}

		task ("Assert that a data source that doesn't exist is not found") {
			ACUtils.searchBar(searchItem = "Analytics Cloud");

			ACUtils.viewGenericText(textValueList = "There are no results found.,Please try a different search term.");
		}
	}

}