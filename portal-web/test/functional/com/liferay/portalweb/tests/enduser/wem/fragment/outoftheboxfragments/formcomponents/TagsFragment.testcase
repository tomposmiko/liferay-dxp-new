@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-169877. 10 instances of Tags fragment can be added into the same form container"
	@priority = 3
	test CanAdd10TagsFragmentsToPage {
		task ("Given an object with scope to a site") {
			for (var i : list "1,2") {
				JSONAssettag.addTag(
					groupName = "Global",
					tagName = "global tag ${i}");
			}

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "local tag");

			ObjectAdmin.addObjectViaAPI(
				labelName = "MyObject",
				objectName = "MyObject",
				pluralLabelName = "MyObject",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "MyObject");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "MyObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "MyObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Site Administration > Categorization");

			Button.clickSave();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Name",
				tabName = "Field Tab");

			// Need to rewrite when LPS-182835 get fixed

			ObjectAdmin.addCategorizationOnLayoutTab();

			Button.clickSave();
		}

		task ("When go to edit the content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Then can add tags as input") {
			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "MyObject");

			PageEditor.viewInputStyle(
				label = "Name",
				showLabel = "true",
				type = "text-input");

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Tags",
					targetFragmentName = "Text Input");
			}

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1",
				tagRow = 1);

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 2",
				tagRow = 4);

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 2,local tag",
				tagRow = 6);

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2,local tag",
				tagRow = 7);

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ProductMenu.gotoPortlet(
				category = "Categorization",
				portlet = "MyObject");

			ObjectPortlet.viewEntryDetails(entry = "Test Name");

			// Need to rewrite when LPS-182835 get fixed

			for (var tagName : list "global tag 1,global tag 2,local tag") {
				AssetCategorization.viewTag(tagName = ${tagName});
			}
		}
	}

	@description = "This is a test for LPS-169877. The tags fragment can be used in a master page"
	@priority = 3
	test CanUseTagsInMasterPage {
		task ("Given a master page with the tags fragment") {
			for (var i : list "1,2") {
				JSONAssettag.addTag(
					groupName = "Global",
					tagName = "global tag ${i}");
			}

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "local tag");

			ObjectAdmin.addObjectViaAPI(
				labelName = "MyObject",
				objectName = "MyObject",
				pluralLabelName = "MyObject",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "MyObject");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "MyObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "MyObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Site Administration > Categorization");

			Button.clickSave();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Name",
				tabName = "Field Tab");

			ObjectAdmin.addCategorizationOnLayoutTab();

			Button.clickSave();

			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Master Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Master Page Template");

			PageEditor.addFragment(
				collectionName = "Form Components",
				dropTarget = "Header",
				fragmentName = "Form Container",
				scope = "Master");

			PageEditor.mapFormContainerToObject(contentType = "MyObject");

			PageEditor.viewInputStyle(
				label = "Name",
				showLabel = "true",
				type = "text-input");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Text Input");

			MastersPageTemplates.publishMaster();
		}

		task ("When we create a page with the created master page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Master Page Template",
				pageName = "Test Page Name");

			PageEditor.publish();
		}

		task ("Then it is possible to send tags as entries") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2,local tag");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ProductMenu.gotoPortlet(
				category = "Categorization",
				portlet = "MyObject");

			ObjectPortlet.viewEntryDetails(entry = "Test Name");

			for (var tagName : list "global tag 1,global tag 2,local tag") {
				AssetCategorization.viewTag(tagName = ${tagName});
			}
		}
	}

	@description = "This is a test for LPS-169877. The tag field can be used in a page template"
	@priority = 5
	test CanUseTagsInPageTemplate {
		task ("Given a page template with the tags fragment") {
			for (var i : list "1,2") {
				JSONAssettag.addTag(
					groupName = "Global",
					tagName = "global tag ${i}");
			}

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "local tag");

			ObjectAdmin.addObjectViaAPI(
				labelName = "MyObject",
				objectName = "MyObject",
				pluralLabelName = "MyObject",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "MyObject");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "MyObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "MyObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Site Administration > Categorization");

			Button.clickSave();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Name",
				tabName = "Field Tab");

			ObjectAdmin.addCategorizationOnLayoutTab();

			Button.clickSave();

			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "MyObject");

			PageEditor.viewInputStyle(
				label = "Name",
				showLabel = "true",
				type = "text-input");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Text Input");

			PageEditor.publish();
		}

		task ("When we create a page with the created template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");

			PageEditor.publish();
		}

		task ("Then it is possible to send tags as entries") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2,local tag");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ProductMenu.gotoPortlet(
				category = "Categorization",
				portlet = "MyObject");

			ObjectPortlet.viewEntryDetails(entry = "Test Name");

			for (var tagName : list "global tag 1,global tag 2,local tag") {
				AssetCategorization.viewTag(tagName = ${tagName});
			}
		}
	}

	@description = "This is a test for LPS-169877. Both site and global tags are shown when the object scope is set to the site"
	@priority = 5
	test ViewAllTagsShownInObjectSiteScoped {
		task ("Given an object with scope to a site") {
			for (var i : list "1,2") {
				JSONAssettag.addTag(
					groupName = "Global",
					tagName = "global tag ${i}");
			}

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "local tag");

			ObjectAdmin.addObjectViaAPI(
				labelName = "MyObject",
				objectName = "MyObject",
				pluralLabelName = "MyObject",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "MyObject");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "MyObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "MyObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Site Administration > Categorization");

			Button.clickSave();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Name",
				tabName = "Field Tab");

			ObjectAdmin.addCategorizationOnLayoutTab();

			Button.clickSave();

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Form Container");

			Alert.viewErrorMessage(errorMessage = "Fragments cannot be placed inside an unmapped form container.");

			PageEditor.mapFormContainerToObject(contentType = "MyObject");

			PageEditor.viewInputStyle(
				label = "Name",
				showLabel = "true",
				type = "text-input");

			PageEditor.viewFragmentNotPresent(fragmentName = "Tags");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Text Input");

			PageEditor.publish();
		}

		task ("When we add tags as input") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2,local tag");
		}

		task ("Then both site and global tags are shown") {
			for (var i : list "1,2") {
				AssertTextEquals(
					key_tagName = "global tag ${i}",
					locator1 = "AssetCategorization#TAG",
					value1 = "global tag ${i}");
			}

			AssertTextEquals(
				key_tagName = "local tag",
				locator1 = "AssetCategorization#TAG",
				value1 = "local tag");

			AssetCategorization.removeTag(tagName = "local tag");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "local tag");

			for (var i : list "1,2") {
				AssetCategorization.removeTag(tagName = "global tag ${i}");
			}

			AssetCategorization.removeTag(tagName = "local tag");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2,local tag");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ProductMenu.gotoPortlet(
				category = "Categorization",
				portlet = "MyObject");

			ObjectPortlet.viewEntryDetails(entry = "Test Name");

			for (var tagName : list "global tag 1,global tag 2,local tag") {
				AssetCategorization.viewTag(tagName = ${tagName});
			}

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name No Tag");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ProductMenu.gotoPortlet(
				category = "Categorization",
				portlet = "MyObject");

			ObjectPortlet.viewEntry(entry = "Test Name No Tag");
		}
	}

	@description = "This is a test for LPS-169877. Only global tags are shown when the object scope is set to an instance"
	@priority = 5
	test ViewOnlyGlobalTagsShownInObjectInstanceScope {
		task ("Given an object with scope to an instance") {
			for (var i : list "1,2") {
				JSONAssettag.addTag(
					groupName = "Global",
					tagName = "global tag ${i}");
			}

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "local tag");

			ObjectAdmin.addObjectViaAPI(
				labelName = "MyObject",
				objectName = "MyObject",
				pluralLabelName = "MyObject");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "MyObject");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "MyObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "MyObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

			Button.clickSave();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldLabelName = "Name",
				tabName = "Field Tab");

			ObjectAdmin.addCategorizationOnLayoutTab();

			Button.clickSave();

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Form Container");

			Alert.viewErrorMessage(errorMessage = "Fragments cannot be placed inside an unmapped form container.");

			PageEditor.mapFormContainerToObject(contentType = "MyObject");

			PageEditor.viewInputStyle(
				label = "Name",
				showLabel = "true",
				type = "text-input");

			PageEditor.viewFragmentNotPresent(fragmentName = "Tags");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Text Input");

			PageEditor.publish();
		}

		task ("When we add tags as input") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name");

			Click(
				key_fieldLabel = "Tags",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");
		}

		task ("Then only global tags are shown") {
			IFrame.selectTagFrame();

			AssertElementNotPresent(
				key_rowEntry = "local tag",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

			SelectFrameTop();

			Click(locator1 = "Modal#CLOSE_BUTTON");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2");

			for (var i : list "1,2") {
				AssertTextEquals(
					key_tagName = "global tag ${i}",
					locator1 = "AssetCategorization#TAG",
					value1 = "global tag ${i}");
			}

			AssetCategorization.removeTag(tagName = "global tag 1");

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1");

			for (var i : list "1,2") {
				AssetCategorization.removeTag(tagName = "global tag ${i}");
			}

			AssetCategorization.selectTag(
				skipSelectFrame = "true",
				tagNameList = "global tag 1,global tag 2");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "MyObject");

			ObjectPortlet.viewEntryDetails(entry = "Test Name");

			for (var i : list "1,2") {
				AssetCategorization.viewTag(tagName = "global tag ${i}");
			}

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			FormViewBuilder.editText(
				fieldName = "Name",
				fieldValue = "Test Name No Tag");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "MyObject");

			ObjectPortlet.viewEntry(entry = "Test Name No Tag");
		}
	}

	@description = "This is a test for LPS-169877. A warning message is shown if the object does not have categorization enabled and we try to use tags"
	@priority = 4
	test ViewWarningMessageWithCategorizationDisabled {
		task ("Given an object with categorization disabled") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "MyObject",
				objectName = "MyObject",
				pluralLabelName = "MyObject",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "MyObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "MyObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "MyObject");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Site Administration > Categorization");

			Uncheck.uncheckToggleSwitch(locator1 = "ObjectPortlet#ENABLE_CATEGORIZATION_BUTTON");

			Button.clickSave();
		}

		task ("When we try to use tags fragment") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "MyObject");

			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Tags",
				targetFragmentName = "Text Input");
		}

		task ("Then a warning message is shown") {
			Alert.viewInfoMessageSpecific(infoMessage = "Categorization is disabled for the selected content. To show categories in this fragment, categorization must be enabled.");
		}
	}

}