@component-name = "portal-wcm"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-147787. The designer has full access permissions when given Update permission in Page section."
	@priority = "5"
	test EditContentPageAsUserWithUpdatePermission {
		task ("Given a page designer has a content page") {
			JSONRole.addSiteRole(
				roleKey = "Page Designer",
				roleTitle = "Page Designer");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Page Designer",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page designer has the Update permission in Page section") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Page Designer",
				roleType = "site");
		}

		task ("Then the page designer has full access in page editor") {
			task ("Add a Container to a content page") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "userea@liferay.com",
					userLoginFullName = "userfn userln");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Access to the General panel of Container") {
				PageEditor.editLayoutContainer(
					containerWidth = "Fixed Width",
					height = "600px",
					panel = "General");

				PageEditor.viewContainerStyle(
					containerWidth = "Fixed Width",
					height = "600px");
			}

			task ("Access to the Styles panel of Container") {
				PageEditor.editLayoutContainer(
					backgroundColor = "Success",
					borderWidth = "5",
					panel = "Styles");

				PageEditor.viewContainerStyle(
					backgroundColor = "success",
					borderWidth = "5px");

				PageEditor.detachToken(fieldLabel = "Background Color");

				Type(
					key_text = "Background Color",
					locator1 = "TextInput#ANY",
					value1 = "#334455");

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.viewContainerStyle(backgroundColor = "rgb(51, 68, 85)");
			}

			task ("Access to the Advanced panel of Container") {
				PageEditor.editLayoutContainer(
					htmlTag = "section",
					panel = "Advanced");

				AssertVisible(
					key_position = "1",
					key_type = "section",
					locator1 = "PageEditor#CONTAINER_CONTAINER_TYPE");
			}

			task ("Delete the site role") {
				JSONRole.deleteRole(roleTitle = "Page Designer");
			}
		}
	}

	@description = "This is a test for LPS-147787. The page builder has limited access permissions when given Update - Limited permission in Page section."
	@priority = "5"
	test EditFragmentStylesAsUserWithUpdateLimitedPermission {
		task ("Given a page builder has a content page") {
			JSONRole.addSiteRole(
				roleKey = "Page Builder",
				roleTitle = "Page Builder");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Page Builder",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page builder has the Update - Limited permission in Page section") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE_LAYOUT_LIMITED",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Page Builder",
				roleType = "site");
		}

		task ("Then the page builder has limited access to styles edition") {
			task ("Add a Container to a content page") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "userea@liferay.com",
					userLoginFullName = "userfn userln");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Access to the General panel of Container") {
				PageEditor.gotoConfiguration(fragmentName = "Container");

				for (var fieldLabel : list "Width,Height,Min Width,Max Width,Min Height,Max Height") {
					AssertVisible(
						key_borderBottom = "Frame",
						key_fieldLabel = "${fieldLabel}",
						locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD");
				}

				AssertSelectedLabel(
					key_fieldLabel = "Overflow",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Default");

				AssertElementPresent(
					checkboxName = "Hide Fragment",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Access to the Styles panel of Container") {
				PageEditor.editLayoutContainer(
					backgroundColor = "Success",
					borderWidth = "5",
					panel = "Styles");

				PageEditor.viewContainerStyle(
					backgroundColor = "success",
					borderWidth = "5px");

				AssertElementNotPresent(
					key_fieldLabel = "Background Color",
					key_text = "chain-broken",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			task ("View the Advanced panel of Container unavailable") {
				AssertElementNotPresent(
					key_tab = "Advanced",
					locator1 = "NavTab#TAB_LINK");
			}

			task ("Add a Heading fragment into Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Heading",
					navTab = "Fragments");
			}

			task ("Access to the General panel of Heading") {
				PageEditor.gotoConfiguration(fragmentName = "Heading");

				for (var fieldLabel : list "Width,Height,Min Width,Max Width,Min Height,Max Height") {
					AssertElementNotPresent(
						key_borderBottom = "Frame",
						key_fieldLabel = "${fieldLabel}",
						locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD");
				}

				AssertSelectedLabel(
					key_fieldLabel = "Overflow",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Default");

				AssertElementPresent(
					checkboxName = "Hide Fragment",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Access to the Styles panel of Heading") {
				PageEditor.gotoStyle(fragmentName = "Heading");

				PageEditor.configureFragment(
					opacity = "50",
					textColor = "Success");

				PageEditor.viewFragmentStyle(
					fragmentName = "Heading",
					opacity = "0.5",
					textColor = "success");

				AssertElementNotPresent(
					key_fieldLabel = "Text Color",
					key_text = "chain-broken",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			task ("View the Advanced panel of Heading unavailable") {
				AssertElementNotPresent(
					key_tab = "Advanced",
					locator1 = "NavTab#TAB_LINK");
			}

			task ("Delete the site role") {
				JSONRole.deleteRole(roleTitle = "Page Builder");
			}
		}
	}

	@description = "This is a test for LPS-147787. The marketer has Basic permissions and view Advanced tab when given Update - Basic and Update - Advanced options permission in Page Section."
	@priority = "5"
	test EditPageLayoutAsUserWithUpdateBasicAndAdvancedPermissions {
		task ("Given a marketer has a content page") {
			JSONRole.addSiteRole(
				roleKey = "Marketer",
				roleTitle = "Marketer");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Marketer",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the marketer has the Update - Basic and Update - Advanced permissions in Page section") {
			for (var resourceActionIndex : list "UPDATE_LAYOUT_BASIC,UPDATE_LAYOUT_ADVANCED_OPTIONS") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = "Marketer",
					roleType = "site");
			}
		}

		task ("Then the marketer has limited access to styles edition") {
			task ("Add a Container to a content page") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "userea@liferay.com",
					userLoginFullName = "userfn userln");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Access to the General panel of Container") {
				PageEditor.gotoConfiguration(fragmentName = "Container");

				for (var fieldLabel : list "Width,Height,Min Width,Max Width,Min Height,Max Height") {
					AssertVisible(
						key_borderBottom = "Frame",
						key_fieldLabel = "${fieldLabel}",
						locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD");
				}

				AssertSelectedLabel(
					key_fieldLabel = "Overflow",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Default");

				AssertElementPresent(
					checkboxName = "Hide Fragment",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Access to the Styles panel of Container") {
				PageEditor.editLayoutContainer(
					marginBottom = "4",
					paddingTop = "4",
					panel = "Styles");

				PageEditor.viewContainerStyle(
					marginBottom = "4",
					paddingTop = "4");

				for (var fieldSetLabel : list "Text,Background,Borders,Effects") {
					AssertElementNotPresent(
						key_fieldSetLabel = "${fieldSetLabel}",
						locator1 = "PageEditor#COMMON_STYLES_FIELDSET_LABEL");
				}
			}

			task ("Access to the Advanced panel of Container") {
				Navigator.gotoNavTab(navTab = "Advanced");

				AssertSelectedLabel(
					key_fieldLabel = "HTML Tag",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "div");

				AssertElementPresent(
					checkboxName = "Hide from Site Search Results",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Add a Heading fragment into Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Heading",
					navTab = "Fragments");
			}

			task ("Access to the General panel of Heading") {
				PageEditor.gotoConfiguration(fragmentName = "Heading");

				for (var fieldLabel : list "Width,Height,Min Width,Max Width,Min Height,Max Height") {
					AssertElementNotPresent(
						key_borderBottom = "Frame",
						key_fieldLabel = "${fieldLabel}",
						locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD");
				}

				AssertSelectedLabel(
					key_fieldLabel = "Overflow",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Default");

				AssertElementPresent(
					checkboxName = "Hide Fragment",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("View the Styles panel of Heading unavailable") {
				AssertElementNotPresent(
					key_tab = "Styles",
					locator1 = "NavTab#TAB_LINK");
			}

			task ("Access to the Advanced panel of Heading") {
				Navigator.gotoNavTab(navTab = "Advanced");

				AssertElementPresent(
					checkboxName = "Hide from Site Search Results",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Delete the site role") {
				JSONRole.deleteRole(roleTitle = "Marketer");
			}
		}
	}

	@description = "This is a test for LPS-147787. The site designer has full access permissions when given Update permission in Page section and other permissions."
	@priority = "3"
	test ViewFullAccessAsUserWithUpdateAndOtherPermissions {
		task ("Given a site designer has a content page") {
			JSONRole.addRegularRole(
				roleKey = "Site Designer",
				roleTitle = "Site Designer");

			JSONRole.assignRoleToUser(
				roleTitle = "Site Designer",
				userEmailAddress = "userea@liferay.com");

			JSONRole.addSiteRole(
				roleKey = "Page Designer",
				roleTitle = "Page Designer");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Page Designer",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the site designer has Update permission in Page section and other permissions") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Page Designer",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Site Designer");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_site_admin_web_portlet_SiteAdminPortlet",
				roleTitle = "Site Designer");
		}

		task ("Then the page designer has full access in page editor") {
			task ("Add a Container to a content page") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "userea@liferay.com",
					userLoginFullName = "userfn userln");

				ApplicationsMenu.gotoSite(site = "Test Site Name");

				ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name *");

				ContentPages.gotoPageEditor();

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Access to the General panel of Container") {
				PageEditor.editLayoutContainer(
					containerWidth = "Fixed Width",
					height = "600px",
					panel = "General");

				PageEditor.viewContainerStyle(
					containerWidth = "Fixed Width",
					height = "600px");
			}

			task ("Access to the Styles panel of Container") {
				PageEditor.editLayoutContainer(
					backgroundColor = "Success",
					borderWidth = "5",
					panel = "Styles");

				PageEditor.viewContainerStyle(
					backgroundColor = "success",
					borderWidth = "5px");

				PageEditor.detachToken(fieldLabel = "Background Color");

				Type(
					key_text = "Background Color",
					locator1 = "TextInput#ANY",
					value1 = "#334455");

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.viewContainerStyle(backgroundColor = "rgb(51, 68, 85)");
			}

			task ("Access to the Advanced panel of Container") {
				PageEditor.editLayoutContainer(
					htmlTag = "section",
					panel = "Advanced");

				AssertVisible(
					key_position = "1",
					key_type = "section",
					locator1 = "PageEditor#CONTAINER_CONTAINER_TYPE");
			}

			task ("Delete the new roles") {
				for (var roleTitle : list "Site Designer,Page Designer") {
					JSONRole.deleteRole(roleTitle = "${roleTitle}");
				}
			}
		}
	}

	@description = "This is a test for LPS-147787. The user don't have full access permissions when not given Update permission in Page section."
	@priority = "4"
	test ViewLimitedAccessAsUserWithoutUpdatePermission {
		task ("Given a page builder has a content page") {
			JSONRole.addSiteRole(
				roleKey = "Page Builder",
				roleTitle = "Page Builder");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Page Builder",
				userEmailAddress = "userea@liferay.com");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page builder has all permissions except Update permission in Page section") {
			Role.openRolesAdmin();

			RoleNavigator.gotoDefineRolePermissions(
				permissionNavigationKey = "SITE_ADMIN_PAGES_SITE_PAGES",
				portlet = "Pages",
				roleTitle = "Page Builder",
				roleType = "Site");

			Check(
				locator1 = "Permissions#SELECT_ALL",
				title = "Page");

			PortletEntry.save();

			Permissions.removePermissionViaAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Page Builder",
				roleType = "site");
		}

		task ("Then the page builder has limited access in page editor") {
			task ("Add a Container to a content page") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "userea@liferay.com",
					userLoginFullName = "userfn userln");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Access to the General panel of Container") {
				PageEditor.gotoConfiguration(fragmentName = "Container");

				for (var fieldLabel : list "Width,Height,Min Width,Max Width,Min Height,Max Height") {
					AssertVisible(
						key_borderBottom = "Frame",
						key_fieldLabel = "${fieldLabel}",
						locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD");
				}

				AssertSelectedLabel(
					key_fieldLabel = "Overflow",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Default");

				AssertElementPresent(
					checkboxName = "Hide Fragment",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Access to the Styles panel of Container") {
				PageEditor.editLayoutContainer(
					backgroundColor = "Success",
					borderWidth = "5",
					panel = "Styles");

				PageEditor.viewContainerStyle(
					backgroundColor = "success",
					borderWidth = "5px");

				AssertElementNotPresent(
					key_fieldLabel = "Background Color",
					key_text = "chain-broken",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			task ("Access to the Advanced panel of Container") {
				Navigator.gotoNavTab(navTab = "Advanced");

				AssertSelectedLabel(
					key_fieldLabel = "HTML Tag",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "div");

				AssertElementPresent(
					checkboxName = "Hide from Site Search Results",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Add a Heading fragment into Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Heading",
					navTab = "Fragments");
			}

			task ("Access to the General panel of Heading") {
				PageEditor.gotoConfiguration(fragmentName = "Heading");

				for (var fieldLabel : list "Width,Height,Min Width,Max Width,Min Height,Max Height") {
					AssertElementNotPresent(
						key_borderBottom = "Frame",
						key_fieldLabel = "${fieldLabel}",
						locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD");
				}

				AssertSelectedLabel(
					key_fieldLabel = "Overflow",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Default");

				AssertElementPresent(
					checkboxName = "Hide Fragment",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Access to the Styles panel of Heading") {
				PageEditor.gotoStyle(fragmentName = "Heading");

				PageEditor.configureFragment(
					opacity = "50",
					textColor = "Success");

				PageEditor.viewFragmentStyle(
					fragmentName = "Heading",
					opacity = "0.5",
					textColor = "success");

				AssertElementNotPresent(
					key_fieldLabel = "Text Color",
					key_text = "chain-broken",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			task ("Access to the Advanced panel of Heading") {
				Navigator.gotoNavTab(navTab = "Advanced");

				AssertElementPresent(
					checkboxName = "Hide from Site Search Results",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("Delete the site role") {
				JSONRole.deleteRole(roleTitle = "Page Builder");
			}
		}
	}

}