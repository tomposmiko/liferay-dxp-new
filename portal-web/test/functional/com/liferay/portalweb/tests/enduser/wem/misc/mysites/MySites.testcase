@component-name = "portal-wcm"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Home Site");

		JSONLayout.addPublicLayout(groupName = "Home Site", layoutName = "Site Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.tearDownCP();

			JSONGroup.deleteGroupByName(groupName = "Home Site");
		}
	}

	@description = "Assert that pagination is working for the MySites widget"
	@priority = "3"
	test DisplayMySitesPagination {
		property testray.component.names = "Site Administration";

		// Add enough sites to allow pagination to occur

		for (var index : list "01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23") {
			JSONGroup.addGroup(groupName = "Site Name ${index}");
		}

		// Add MySites Widget to page

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		// View pagination

		Pagination.viewResults(results = "Showing 1 to 20 of 25 entries.");

		Pagination.changePagination(itemsPerPage = "5");

		Pagination.viewResults(results = "Showing 1 to 5 of 25 entries.");
	}

	@description = "Assert a default user can join a normal open site"
	@priority = "4"
	test JoinSiteOpen {
		property testray.component.names = "Site Administration,Users and Organizations";

		// Create an open site

		JSONGroup.addGroup(groupName = "Site Name");

		// Create a user and set its password

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		// Login with the new user and join the open site

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoDashboard();

		Site.joinViaMySitesPG(siteName = "Site Name");

		// Relog in to superadmin

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@description = "Assert a default user cannot join a normal private site"
	@priority = "5"
	test JoinSitePrivateNo {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		// Create a private site

		Site.openSitesAdmin();

		Site.addBlankCP(membershipType = "Private", siteName = "Site Name");

		// Create a user and set its password

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		// Login with the new user and attempt to join the private site

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoDashboard();

		Site.joinViaMySitesPG(membershipType = "Private", siteName = "Site Name");

		// Relog in to superadmin

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@description = "Assert joining a restricted site requires admin approval"
	@priority = "5"
	test JoinSiteRestricted {
		property testray.component.names = "Site Administration,Users and Organizations";

		// Create a restricted site

		Site.openSitesAdmin();

		Site.addBlankCP(membershipType = "Restricted", siteName = "Site Name");

		// Create a user and set its password

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		// Login with the new user and request to join the restricted site

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoDashboard();

		Site.joinViaMySitesPG(membershipType = "Restricted", siteName = "Site Name");

		// View that the user's membership request is sent

		UserBar.gotoDashboard();

		NavItem.gotoAvailableSites();

		MySites.viewMembershipRequested(siteName = "Site Name");

		// Approve user's membership request with superadmin

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");

		Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

		Site.approveJoinSiteRestrictedViaMySitesPG(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		// View that the user's membership request is approved

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoDashboard();

		Site.viewMySitesViaMySitesPG(memberCount = "2", siteName = "Site Name");

		// Relog in to superadmin

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@description = "Assert a default user can leave a site"
	@priority = "5"
	test LeaveSite {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		// Create a generic site

		JSONGroup.addGroup(groupName = "Site Name");

		// Create a user and set its password

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		// Log in with new user and join site

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "userea@liferay.com");

		UserBar.gotoDashboard();

		Site.joinViaMySitesPG(siteName = "Site Name");

		// Leave site

		UserBar.gotoDashboard();

		Site.leaveViaMySitesPG(siteName = "Site Name");

		// Relog in to superadmin

		User.logoutPG();

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");
	}

	@description = "Search for a site using MySites widget"
	@priority = "4"
	test SearchSite {
		property testray.component.names = "Site Administration";

		// Create a site

		JSONGroup.addGroup(groupName = "Site Name");

		// Add MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// Search for new site in MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Search.searchPG(portletName = "My Sites", searchTerm = "Site Name");

		Site.viewMySitesViaMySitesPG(memberCount = "1", siteName = "Site Name");
	}

	@description = "Asssign site membership to a user in multiple ways via CP"
	@priority = "3"
	test ViewMembershipAssignViaSiteCP {
		property testray.component.names = "Site Administration,Users and Organizations";

		// Create a user and set its password

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		// Make user a member of home site via Site Settings CP

		Site.openSiteMembershipsAdmin(siteURLKey = "home-site");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		// Assign user Power User role

		JSONRole.assignRoleToUser(
			roleTitle = "Power User",
			userEmailAddress = "userea@liferay.com"
		);

		// Create another new site

		JSONGroup.addGroup(groupName = "Site Name");

		// Make user a member of new site via User Admin CP

		User.openUsersAdmin();

		Site.assignUserSitesCP(siteName = "Site Name", userScreenName = "usersn");

		// Add MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// Relog into portal as user

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		// Assert user is a member of both sites

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Site.viewMySitesViaMySitesPG(memberCount = "2", siteName = "Site Name");
	}

	@description = "Assert inactive sites are not searchable"
	@priority = "3"
	test ViewNoInactiveSite {
		property testray.component.names = "Site Administration";

		// Create a new site

		JSONGroup.addGroup(groupName = "Site Name");

		// Deactivate the new site

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		Site.inactivateCP(siteName = "Site Name");

		// Create a MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// Assert deactivated site is not searchable

		Search.searchCP(searchTerm = "Site Name");

		Site.viewNoMySitesViaMySitesPG(memberCount = "1", siteName = "Site Name");
	}

	@description = "Assert a user cannot join a site with manual membership management disabled"
	@priority = "3"
	test ViewNoJoinOption {
		property testray.component.names = "Site Administration,Users and Organizations";

		// Create a new user

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		// Give user administrative role for home site

		Site.openSiteMembershipsAdmin(siteURLKey = "home-site");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com"
		);

		// Add new site with manual membership disabled

		JSONGroup.addGroup(groupName = "Site Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		Site.manageMembershipOptions(allowManualMembershipManagement = "false");

		// Add MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// Assert user cannot join a site with disabled membership maanagement

		User.firstLoginPG(password = "test", userEmailAddress = "userea@liferay.com");

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		MySites.viewNoOptions(navItem = "Available Sites", siteName = "Site Name");
	}

	@description = "Assert a user cannot leave a site with manual membership management disabled"
	@priority = "3"
	test ViewNoLeaveOption {
		property testray.component.names = "Site Administration";

		// Add new site with manual membership disabled

		JSONGroup.addGroup(groupName = "Site Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		Site.manageMembershipOptions(allowManualMembershipManagement = "false");

		// Add MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// Assert superadmin cannot leave site

		Search.searchPG(portletName = "My Sites", searchTerm = "Site Name");

		MySites.viewNoOptions(navItem = "Available Sites", siteName = "Site Name");
	}

	@description = "Assert a user can navigate to a Site's public or private pages via MySites widget"
	@priority = "3"
	test ViewSitePages {
		property testray.component.names = "Site Administration";

		// Add a site with a public and private page

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(groupName = "Site Name", layoutName = "Public Page");

		JSONLayout.addPrivateLayout(
			groupName = "Site Name",
			layoutName = "Private Page"
		);

		// Add MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// Go to public and private pages via MySites widget

		MySites.gotoPagesPG(
			menuItem = "Go to Public Pages",
			pageName = "Public Page",
			siteName = "Site Name"
		);

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		MySites.gotoPagesPG(
			menuItem = "Go to Private Pages",
			pageName = "Private Page",
			siteName = "Site Name"
		);
	}

	@description = "Assert that site tags appear in MySites widget"
	@priority = "4"
	test ViewSiteWithTags {
		property testray.component.names = "Site Administration,Tags";

		// Create a new site with tags

		JSONGroup.addGroup(groupName = "Site Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		for (var tagName : list "apple,banana,mango") {
			Tag.addViaSiteCP(tagName = "${tagName}");
		}

		// Add MySites widget

		Navigator.gotoSitePage(pageName = "Site Page", siteName = "Home Site");

		Portlet.addPG(portletName = "My Sites");

		// View Site tags via MySites widget

		Site.viewMySitesViaMySitesPG(memberCount = "1", siteName = "Site Name");

		for (var tagName : list "apple,banana,mango") {
			MySites.viewTags(tagName = "${tagName}");
		}
	}
}