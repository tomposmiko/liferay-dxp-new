@component-name = "portal-page-audit"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Audit";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		TestUtils.hardRefresh();

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = ""
	@priority = 3
	test AccessibilityFailures {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Check if proper failures are displayed at Accessibility section") {
			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Low Contrast Ratio",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Missing Img ALT Attributes",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Missing Input ALT Attributes",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = ""
	@priority = 3
	test AssertPageAuditLocale {
		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Configure canonical URL") {
			PageAudit.configureLocalizedURL();
		}

		task ("Add a translation for that page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Content Page");

			PagesAdmin.addLocalizedFriendlyURL(
				friendlyURLLocalizedList = "fr-FR",
				localizedFriendlyURLList = "",
				localizedNameList = "Principal");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPageAuditSidebar();

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_PAGE_TITLE",
				value1 = "Content Page");
		}

		task ("Change language") {
			PageAudit.changeLocale(locale = "French");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_PAGE_TITLE",
				value1 = "Principal");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/fr/");
		}
	}

	@description = ""
	@priority = 4
	test AssertPageAuditLocaleInContentPage {
		property portal.acceptance = "true";

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Configure canonical URL") {
			PageAudit.configureLocalizedURL();
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPageAuditSidebar();

			PageAudit.changeLocale(locale = "Finnish");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/fi/");
		}
	}

	@description = ""
	@priority = 4
	test AssertPageAuditLocaleInDisplayPage {
		property portal.acceptance = "true";

		task ("Create a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2");
		}

		task ("Add an Asset Publisher widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2",
				widgetName = "Asset Publisher");
		}

		task ("Add a Web Content vis JSONWS") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Create a default Display Page Template") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				statusKey = "APPROVED",
				subType = "Basic Web Content");

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Test Site Name",
				layoutPageTemplateEntryName = "Display Page Name",
				type = "Display Page Template");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Configure canonical URL") {
			PageAudit.configureLocalizedURL();
		}

		task ("Go to display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");
		}

		task ("Open Page Audit panel and change locale/language") {
			PageAudit.openPageAuditSidebar();

			PageAudit.changeLocale(locale = "Portuguese");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/pt/");
		}
	}

	@description = ""
	@priority = 4
	test AssertPageAuditLocaleInWidgetPage {
		property portal.acceptance = "true";

		task ("Create Widget Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			PagesAdmin.addPage(
				pageName = "Widget Page Name",
				sitePageType = "Widget Page");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Configure canonical URL") {
			PageAudit.configureLocalizedURL();
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.openPageAuditSidebar();

			PageAudit.changeLocale(locale = "Hungarian");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/hu/");
		}
	}

	@description = ""
	@priority = 3
	test CachedDataAlert {
		task ("Create second content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Second Page",
				type = "content");
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Navigate to second page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/second-page");
		}

		task ("Navigate back to audited page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Assert if warning is displayed") {
			PageAudit.openPageAuditSidebar();

			var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy");

			AssertTextEquals.assertPartialText(
				locator1 = "PageAudit#CACHE_ALERT",
				value1 = "Showing data from ");

			AssertTextEquals.assertPartialText(
				locator1 = "PageAudit#CACHE_ALERT",
				value1 = "Relaunch to update data.");
		}
	}

	@description = ""
	@priority = 4
	test CanonicalUrlLocaleInContentPage {
		property portal.acceptance = "true";

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(
				canonicalLocale = "fr-FR",
				url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPageAuditSidebar();

			PageAudit.changeLocale(locale = "French");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/page-audit-test");
		}

		task ("Run Page Audit") {
			PageAudit.runPageAudit();
		}

		task ("Check if Page Audit returned expected failures") {
			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Low Contrast Ratio",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = ""
	@priority = 4
	test CanonicalUrlLocaleInWidgetPage {
		property portal.acceptance = "true";

		task ("Create Widget Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			PagesAdmin.addPage(
				pageName = "Widget Page Name",
				sitePageType = "Widget Page");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(
				canonicalLocale = "nl-NL",
				pageName = "Widget Page Name",
				url = "https://liferay-tango.github.io/liferay-portal/page-audit-test",
				urlAppend = "web/test-site-name/3");
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.openPageAuditSidebar();

			PageAudit.changeLocale(locale = "Dutch");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/page-audit-test");
		}

		task ("Run Page Audit") {
			PageAudit.runPageAudit();
		}

		task ("Check if Page Audit returned expected failures") {
			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Low Contrast Ratio",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckIllegibleFontSizes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Illegible Font Sizes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Illegible Font Sizes");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckIncorrectImageAspectRatio {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIncorrectImageAspectRatio";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Incorrect Image Aspect Ratios");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Incorrect Image Aspect Ratios");

			AssertElementPresent(
				failingText = "Source File",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Displayed Aspect Ratio",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Actual Aspect Ratio",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckLinksCrawlable {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLinksCrawlable";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Not All Links Are Crawlable");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Not All Links Are Crawlable");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "crawlable-anchors");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckLowContrastRatio {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLowContrastRatio";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "color-contrast");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckMissingImgALTAttributes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingImgALTAttributes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Missing Img ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Img ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "img");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckMissingInputALTAttributes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingInputALTAttributes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Missing Input ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Input ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "input");
		}
	}

	@description = ""
	@priority = 3
	test CheckNotVisibleReloadbButtonInPrivatePage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a Private Page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Private Page Name");
		}

		task ("Go to Private Page") {
			Navigator.gotoPrivateSitePage(
				pageName = "Private Page Name",
				siteName = "Test Site Name");
		}

		task ("Open Page Audit tab and Assert reload button id not present") {
			PageAudit.openPageAuditSidebar();

			AssertElementNotPresent(
				key_title = "Relaunch",
				locator1 = "Button#ANY_TITLE");
		}
	}

	@description = ""
	@priority = 3
	test CheckPageAuditClosedAfterLogout {
		task ("Open Content Performance panel") {
			PageAudit.openPageAuditSidebar();

			AssertVisible(locator1 = "PageAudit#SIDEBAR");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Check if panel is closed") {
			AssertNotVisible(locator1 = "PageAudit#SIDEBAR");
		}
	}

	@description = ""
	@priority = 3
	test CheckPageAuditOpenAfterNavigation {
		task ("Open Content Performance panel") {
			PageAudit.openPageAuditSidebar();

			PageAudit.connectToGooglePageAudit();
		}

		task ("Logout and login") {
			Click(locator1 = "Icon#BACK");
		}

		task ("Check if panel is closed") {
			AssertElementPresent(locator1 = "PageAudit#CONNECT_TO_GOOGLE_PAGESPEED_BUTTON");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test CheckSmallTapTargets {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckSmallTapTargets";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Small Tap Targets");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Small Tap Targets");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "a");
		}
	}

	@description = ""
	@priority = 3
	test DefaultStrategyAtSiteSettings {
		property portal.acceptance = "true";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(preferredStrategy = "Choose an Option");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 4
	test DesktopStrategyAtSiteSettings {
		property portal.acceptance = "true";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(preferredStrategy = "Desktop");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Assert if mobile failure are shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 3
	test DisplayMoreErrors {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test-10-more-issues.html");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Check the number of failures and view more fails") {
			PageAudit.goToDetailView(failingCheckName = "Illegible Font Sizes");

			AssertElementPresent(
				badgeValue = 12,
				locator1 = "PageAudit#BADGE_NUMBER");

			PageAudit.assertFailingElementCount(expectedLabels = 10);

			Button.click(button = "View More");

			PageAudit.assertFailingElementCount(expectedLabels = 12);
		}
	}

	@description = ""
	@priority = 3
	test InvalidAPIKeyErrorIsRecovered {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#InvalidAPIKeyErrorIsRecovered";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "InvalidAPI");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			AssertVisible(
				errorTitle = "The API key is invalid.",
				locator1 = "PageAudit#ERROR_WARNING_TITLE");
		}

		task ("Navigate to Site Settings") {
			Button.click(button = "Set API Key");

			AssertVisible(
				key_breadcrumbName = "Site Settings",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY");

			AssertVisible(
				key_menuBar = "Google PageSpeed Insights",
				locator1 = "MenuBar#ACTIVE_NAV_LINK");
		}
	}

	@description = ""
	@priority = 3
	test LanguageCacheData {
		property portal.acceptance = "true";

		task ("Create second content page") {
			task ("Create content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Second Page",
					type = "content");
			}
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Navigate to second page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/second-page");
		}

		task ("Navigate back to audited page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Assert if cached data is displayed") {
			PageAudit.openPageAuditSidebar();

			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 4
	test LaunchPageAudit {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Check that data is retrieved") {
			AssertVisible(
				failureType = "Accessibility",
				locator1 = "PageAudit#FAILURE_TYPE");

			AssertVisible(
				failureType = "SEO",
				locator1 = "PageAudit#FAILURE_TYPE");
		}
	}

	@description = ""
	@priority = 4
	test MobileStrategyAtSiteSettings {
		property portal.acceptance = "true";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Assert if mobile failure are shown") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = ""
	@priority = 4
	@uitest
	test NavigateToSecondLevel {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#NavigateToSecondLevel";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();

			PageAudit.goToDetailView(failingCheckName = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_TITLE",
				value1 = "DESCRIPTION");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_TITLE",
				value1 = "TIPS");

			AssertElementPresent(
				badgeValue = 1,
				locator1 = "PageAudit#BADGE_NUMBER");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "color-contrast");
		}
	}

	@description = ""
	@priority = 4
	test NavigateToSiteSettingsWhenApiKeyNotConfigured {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#NavigateToSiteSettingsWhenApiKeyNotConfigured";

		task ("Open Page Audit panel") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPageAuditSidebar();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Site settings > Pages throught the 'Configure' button in panel and Assert page") {
			PageAudit.connectToGooglePageAudit();

			AssertElementPresent(
				key_breadcrumbName = "Site Settings",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_LINK");

			AssertTextPresent(
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_ACTIVE_ENTRY",
				value1 = "Pages");

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = ""
	@priority = 4
	test OtherLanguageCacheData {
		property portal.acceptance = "true";

		task ("Create second content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Second Page",
				type = "content");
		}

		task ("Set a custom page as canonical URL for first language") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set a custom page as canonical URL for second language") {
			PageAudit.setSEOcanonicalURL(
				canonicalLocale = "pt-BR",
				url = "https://liferay-tango.github.io/liferay-portal/page-audit-test-no-issues");
		}

		task ("Set Google PageSpeed API to first page") {
			PageAudit.setAPIViaSiteSettings();
		}

		task ("Run Page Audit for first language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Navigate to second page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/second-page");
		}

		task ("Navigate back to audited page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Check that language has cache data") {
			PageAudit.openPageAuditSidebar();

			AssertVisible(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Change page audit for second language") {
			PageAudit.changeLocale(locale = "Portuguese");
		}

		task ("Check that language has no cache data") {
			AssertVisible(
				key_title = "Relaunch",
				locator1 = "Button#ANY_TITLE");
		}
	}

	@description = "LPS-119068: When the user, after s/he has clicked on the Connect with Page Speed (button) and being led to Site Settings > Pages > Google PageSpeed, clicks on Back button, s/he is led to the page view again"
	@priority = 3
	test PageAuditBackButton {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditBackButton";

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPageAuditSidebar();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}

		task ("Go back to the panel throught the back button") {
			PageAudit.backToPageBackButton();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}
	}

	@description = "LPS-119068: When the user, after s/he has clicked on the Connect with Page Speed (button) and being led to Site Settings > Pages > Google PageSpeed, clicks on Cancel button, s/he is led to the page view again"
	@priority = 3
	test PageAuditCancelButton {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditCancelButton";

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPageAuditSidebar();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}

		task ("Go back to the panel throught the cancel button") {
			PageAudit.backToPageCancelButton();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}
	}

	@description = ""
	@priority = 3
	test PageAuditIconInvisible {
		task ("Check that Page Audit icon is visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeedViaSiteSettings();
		}

		task ("Go to site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Check that Page Audit icon is not visible") {
			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = ""
	@priority = 5
	@uitest
	test PanelInfo {
		property portal.acceptance = "true";

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Open Page Audit sidebar") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPageAuditSidebar();
		}

		task ("Check that sidebar has an image, a help texts and a button") {
			AssertVisible(locator1 = "PageAudit#IMAGE_DEFAULT");

			AssertTextEquals(
				locator1 = "PageAudit#HELP_TEXT",
				value1 = "Launch a page audit to check issues that impact on your page's accessibility and SEO.");

			AssertVisible(
				key_title = "Relaunch",
				locator1 = "Button#ANY_TITLE");
		}
	}

	@description = ""
	@priority = 3
	test SEOFailures {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings();
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.runPageAudit();
		}

		task ("Check if proper failures are displayed at Accessibility section") {
			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Not All Links Are Crawlable",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Invalid Hreflang",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Incorrect Image Aspect Ratios",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Missing Meta Description",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Missing <title> Element",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

}