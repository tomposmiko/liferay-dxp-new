@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "false";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Story: LRAC-11664 | Automation ID: LRAC-11844 | Test Summary: Check that cancel button does not enable email report"
	@priority = "3"
	test CanCancelChangesToEmailReport {
		task ("Sign in AC as Test Test user") {
			ACUtils.launchAC();
		}

		task ("Go to property and Select the property you are using") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Configure Email Report then cancel") {
			ACEmailReport.accessEmailReportSettings();

			ACEmailReport.enableEmailReportToggle();

			ACUtils.selectGenericOption(optionValue = "Daily");

			ACNavigation.clickCancelButton();
		}

		task ("Check that email report has been disabled") {
			ACUtils.viewGenericText(textValueList = "Email Reports: Disabled");
		}
	}

	@description = "Story: LRAC-11664 | Automation ID: LRAC-11841 | Test Summary: Can change email report frequency to daily, weekly or monthly"
	@priority = "3"
	test CanChangeEmailReportFrequency {
		var frequencyList = "Daily,Weekly,Monthly";

		task ("Go to AC > Go to Settings > Go to Properties > Open the new property") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Click on the email report widget and enable it and then save the report to: daily, weekly and monthly") {
			for (var frequencyOption : list "${frequencyList}") {
				ACEmailReport.enableEmailReport(frequency = "${frequencyOption}");

				ACUtils.viewGenericText(textValueList = "Email Reports: Enabled");

				Alert.viewSuccessMessageText(successMessage = "Changes to email reports saved.");

				ACEmailReport.disableEmailReport();
			}
		}
	}

	@description = "Story: LRAC-11664 | Automation ID: LRAC-11846 | Test Summary: Disable email report after enabling"
	@priority = "3"
	test CanDisableEmailReportAfterEnabling {
		task ("Go to AC > Go to Settings > Go to Properties > Open the new property") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Enable the email report") {
			ACEmailReport.enableEmailReport(frequency = "Daily");
		}

		task ("See in the property that the email report has the status of enabled and the success alert appears") {
			ACUtils.viewGenericText(textValueList = "Email Reports: Enabled");

			Alert.viewSuccessMessageText(successMessage = "Changes to email reports saved.");
		}

		task ("Click the widget next to email reports and then disable it") {
			ACEmailReport.disableEmailReport();
		}

		task ("See in the property that the email report has the status of disabled and the success alert appears") {
			ACUtils.viewGenericText(textValueList = "Email Reports: Disabled");

			Alert.viewSuccessMessageText(successMessage = "Changes to email reports saved.");
		}
	}

	@description = "Story: LRAC-11664 | Automation ID: LRAC-11845 | Test Summary: Check email report edit disabled"
	@priority = "3"
	test CheckEmailReportEditDisabled {
		task ("Sign in AC as Test Test user") {
			ACUtils.launchAC();
		}

		task ("Go to property and Select the property you are using") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Access email report") {
			ACEmailReport.accessEmailReportSettings();

			task ("Check that the Email Reports does not allow edit when toggle is disabled") {
				AssertElementPresent(
					locator1 = "ACUtils#TOGGLE_ICON",
					value = "false");

				AssertVisible(
					key_text = "Save",
					locator1 = "Button#ANY_DISABLED");

				AssertElementPresent(locator1 = "ACEmailReport#EMAIL_REPORT_FREQUENCY_DISABLED");
			}
		}
	}

	@description = "Story: LRAC-11663 | Automation ID: LRAC-11835 | Test Summary: Check that the Email Reports widget appears on the property settings page for all users"
	@priority = "2"
	test CheckEmailReportsAppearsForAllUsers {
		var emailAddressList = "bryan.cheung@faro.io,michelle.hoshi@faro.io,corbin.murakami@faro.io";

		task ("Sign in AC as Test Test user") {
			ACUtils.launchAC();
		}

		for (var emailAddress : list "${emailAddressList}") {
			task ("Sign in AC") {
				ACWorkspace.signOut();

				ACLogin.loginAs(emailAddress = "${emailAddress}");

				ACWorkspace.openWorkspace();
			}

			task ("Go to property and Select the property you are using") {
				ACNavigation.goToSettings();

				ACSettings.goToProperties();

				ACNavigation.openItem(itemName = "${assignedPropertyName}");
			}

			task ("Check that email report is disabled") {
				ACUtils.viewGenericText(textValueList = "Email Reports: Disabled");
			}

			task ("Enable and configure email report frequency") {
				ACEmailReport.enableEmailReport(frequency = "Daily");
			}

			task ("Check that email report has been enabled") {
				ACUtils.viewGenericText(textValueList = "Email Reports: Enabled");
			}
		}
	}

	@description = "Story: LRAC-11664 | Automation ID: LRAC-11847 | Test Summary: Check that change the email report settings on one account will not affect the other accounts"
	@priority = "4"
	test CheckEmailReportSettingsDifferentUsers {
		task ("Go to AC > Go to Settings > Go to Properties > Open the new property") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Enable email reports with the daily option and then see in the property that the email report has the status of enabled") {
			ACEmailReport.enableEmailReport(frequency = "Daily");

			ACUtils.viewGenericText(textValueList = "Email Reports: Enabled");
		}

		task ("Login AC with a different user then go to Settings > Go to Properties > Open the new property") {
			ACWorkspace.signOut();

			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("See that the changes made in another account did not affect the actual account") {
			ACUtils.viewGenericText(textValueList = "Email Reports: Disabled");
		}

		task ("Enable the email reports with the monthly option and then see in the property that the email report has the status of enabled") {
			ACEmailReport.enableEmailReport(frequency = "Monthly");

			ACUtils.viewGenericText(textValueList = "Email Reports: Enabled");
		}

		task ("Login with the Test Test account and then go to Settings > Go to Properties > Open the new property") {
			ACWorkspace.signOut();

			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Click on the email reports widget and see if the frequency is still Daily") {
			ACEmailReport.accessEmailReportSettings();

			AssertTextEquals.assertPartialText(
				locator1 = "Select#SELECT",
				value1 = "Daily");
		}

		task ("Disable email reports and then see in the property that the email report has the status of disabled") {
			ACEmailReport.disableEmailReportToggle();

			Button.clickSave();

			ACUtils.viewGenericText(textValueList = "Email Reports: Disabled");
		}

		task ("Login with Corbin then go to Settings > Go to Properties > Open the new property") {
			ACWorkspace.signOut();

			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Observe that the change made to another account did not affect the current account") {
			ACUtils.viewGenericText(textValueList = "Email Reports: Enabled");

			ACEmailReport.accessEmailReportSettings();

			AssertTextEquals.assertPartialText(
				locator1 = "Select#SELECT",
				value1 = "Monthly");
		}
	}

	@description = "Story: LRAC-11663 | Automation ID: LRAC-11836 | Test Summary: Check that the Email Reports widget does not appear on the property settings page when the property is not synced with any site"
	@priority = "2"
	test CheckEmailReportWidgetDisabledWhenPropertyNotSyncedWithSite {
		var propertyName = "Email Report Test";

		task ("Sign in AC") {
			ACUtils.launchAC();
		}

		task ("Go to property and add new property") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = "${propertyName}");
		}

		task ("Check that the Email Reports field appears and has the status disabled") {
			ACUtils.viewGenericText(textValueList = "Email Reports: Disabled");
		}

		task ("Check that the Email Reports widget icon is disabled if the property is not synced") {
			AssertVisible(
				key_text = "",
				locator1 = "Button#ANY_DISABLED");
		}
	}

}