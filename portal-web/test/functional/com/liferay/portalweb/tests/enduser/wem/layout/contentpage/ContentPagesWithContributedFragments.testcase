@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-112249. The Content Flags, Content Ratings and Content Display are compatible and consistent in the same cell of Collection Display."
	@priority = "4"
	test AddAllThreeContentFragmentsInCollectionDisplayOneCell {
		property osgi.app.includes = "bookmarks,document-library-google-docs";

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${i}",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "WC WebContent Title 3",
			fragmentName = "Content Flags");

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			fragmentName = "Content Ratings",
			targetFragmentName = "Content Flags");

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			fragmentName = "Content Display",
			targetFragmentName = "Content Ratings");

		for (var i : list "1,2,3") {
			AssertVisible(
				key_colPosition = "1",
				key_rowPosition = "${i}",
				locator1 = "PageEditor#COLLECTION_ITEM_RATING_STAR_EMPTY");

			AssertVisible(
				key_colPosition = "1",
				key_rowPosition = "${i}",
				locator1 = "PageEditor#COLLECTION_ITEM_AVERAGE_STAR");

			AssertTextEquals(
				key_rowPosition = "${i}",
				locator1 = "Fragment#CONTENT_FRAGMENT_BODY",
				value1 = "Report");
		}

		var n = "1";

		for (var content : list "WC WebContent Content 3,WC WebContent Content 2,WC WebContent Content 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${content}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

			var n = ${n} + 1;
		}

		PageEditor.gotoContentConfiguration(
			colPosition = "1",
			entryContent = "Report",
			fragmentName = "Content Flags",
			rowPosition = "1");

		AssertTextEquals(
			key_text = "Content",
			locator1 = "TextInput#ANY",
			value1 = "WC WebContent Title 3");

		PageEditor.gotoContentConfiguration(
			colPosition = "1",
			entryContent = "0.0",
			fragmentName = "Content Ratings",
			rowPosition = "1");

		AssertTextEquals(
			key_text = "Content",
			locator1 = "TextInput#ANY",
			value1 = "WC WebContent Title 3");

		PageEditor.gotoContentConfiguration(
			colPosition = "1",
			entryContent = "WC WebContent Content 3",
			fragmentName = "Content Display",
			rowPosition = "1");

		AssertTextEquals(
			key_text = "Content",
			locator1 = "TextInput#ANY",
			value1 = "WC WebContent Title 3");
	}

	@description = "This is a use case for LPS-109298. Each tab of Tabs fragment is able to contain any elements in content page."
	@priority = "5"
	test AddFragmentToIndividualTabOfTabsFragment {
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		PageEditor.addElementToTab(
			collectionName = "Layout Elements",
			fragmentName = "Container",
			index = "2",
			navItem = "Tab 1",
			navTab = "Fragments",
			position = "1");

		var n = "2";

		for (var fragmentName : list "Heading,Tabs") {
			var index = ${n} + 1;

			PageEditor.addElementToTab(
				collectionName = "Basic Components",
				fragmentName = "${fragmentName}",
				index = "${index}",
				navItem = "Tab ${n}",
				navTab = "Fragments",
				position = "1");

			var n = ${n} + 1;
		}

		PageEditor.addElementToTab(
			index = "9",
			navItem = "Tab 4",
			navTab = "Widgets",
			portletName = "Asset Publisher",
			position = "5");

		PageEditor.clickPublish();
	}

	@description = "This is a use case for LPS-86141. The fragment should be added to all cells of the Collection Display when add it to one cell."
	@priority = "5"
	test AddFragmentToOneCellOfCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Button fragment to the first cell") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Third Web Content",
				fragmentName = "Button");
		}

		task ("Assert the Button fragment is also added to other cells") {
			for (var n : list "1,2,3") {
				AssertElementPresent(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor')]//li[contains(.,'Button')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");
			}
		}
	}

	@description = "This is a use case for LPS-109298. Can add elements above and below Tabs fragment to page."
	@priority = "4"
	test AddFragmentWithTabsFragmentInTheMiddle {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		DragAndDrop.javaScriptDragAndDropToUp(
			key_collectionName = "Basic Components",
			key_fragmentName = "Button",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "//*[contains(@class,'component-tabs')]",
			value1 = "");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading",
			targetFragmentName = "Tabs");

		PageEditor.viewFragmentOrder(
			fragmentName = "Button",
			position = "1");

		PageEditor.viewFragmentOrder(
			fragmentName = "Tabs",
			position = "2");

		PageEditor.viewFragmentOrder(
			fragmentName = "Heading",
			position = "3");
	}

	@description = "This is a use case for LPS-109298. Can add Tabs fragment to container of Layout elements."
	@priority = "3"
	test AddTabsFragmentToLayoutElements {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid",
			targetFragmentName = "Container");

		PageEditor.addElementToContainer(
			collectionName = "Basic Components",
			fragmentName = "Tabs",
			navTab = "Fragments");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_collectionName = "Basic Components",
			key_columnNumber = "1",
			key_fragmentName = "Tabs",
			key_position = "1",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "PageEditor#GRID_COLUMN",
			value1 = "");

		PageEditor.waitForAutoSave();

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "/div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Tabs')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@description = "This is a use case for LPS-111274. The selected Tabs fragment should always stay selected when click on the tabs of it."
	@priority = "5"
	test ClickTabsFragmentTabAndViewHeader {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		AssertElementPresent(
			key_fragmentName = "Tabs",
			locator1 = "Fragment#FRAGMENT_HEADER");

		for (var navItem : list "Tab 2,Tab 3,Tab 4") {
			PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

			AssertVisible(
				key_fragmentName = "Tabs",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

	@description = "This is a use case for LPS-111274. The light blue frame is shown when hover on unmapped editable field of selected fragments but the dark blue frame is shown when click on unmapped editable field of selected fragments."
	@priority = "5"
	test ClickUnmappedEditableFieldAndMouseOver {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.clickEditableField(
			contributed = "true",
			fragmentName = "Heading",
			id = "element-text");

		Pause(locator1 = "1000");

		AssertCssValue(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			locator2 = "boxShadow",
			value1 = "rgb(11, 95, 255) 0px 0px 0px 1px inset");

		Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

		Click.clickNoWaitForVisible(
			key_fragmentName = "Heading",
			locator1 = "Fragment#FRAGMENT_HEADER");

		MouseOver.mouseOverNotVisible(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD");

		Pause(locator1 = "1000");

		AssertCssValue(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			locator2 = "boxShadow",
			value1 = "rgb(128, 172, 255) 0px 0px 0px 1px inset");
	}

	@description = "Given a content page with a configured Content fragment, when the content is deleted the fragment should not be visible in view mode and a message should be shown in page editor."
	@priority = "4"
	test DeletedContentInContentDisplayFragmentIsNotVisible {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			fragmentName = "Content Display",
			webcontent = "true",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WebContent Title");

		PageEditor.clickPublish();

		JSONWebcontent.deleteWebContent(
			groupName = "Test Site Name",
			title = "WebContent Title");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the fragment is not visible in the site page") {
			AssertElementNotPresent(
				key_pageName = "Content Page Name",
				locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT");
		}

		ContentPages.clickPencil();

		task ("Assert there is a message in page editor informing the page author that the content is no longer available") {
			AssertVisible(
				key_fragmentName = "Content Display",
				key_messageIfo = "The selected content is no longer available. Please select another.",
				locator1 = "Fragment#MESSAGE_INFO");
		}
	}

	@description = "This is a use case for LPS-112360. The asset entries should be ordered by ratings from high to low in Collection Display when select Highest Rated Assets as Collection Provider."
	@priority = "5"
	test DisplayHighestRatedAssetsInCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a Collection Display to page and Select Highest Rated Assets Collection Providers") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "First Web Content",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of collection items are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Ratings to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				fragmentName = "Content Ratings",
				targetFragmentName = "Heading");

			for (var i : list "1,2,3") {
				AssertVisible(
					key_colPosition = "1",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_RATING_STAR_EMPTY");

				AssertVisible(
					key_colPosition = "1",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_AVERAGE_STAR");
			}
		}

		task ("Rate Third Web Content as 1, Second Web Content as 3, First Web Content as 5") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			Ratings.rateStarCollectionItem(
				colPosition = "1",
				ratingStarCount = "1 star",
				rowPosition = "1");

			Ratings.rateStarCollectionItem(
				colPosition = "1",
				ratingStarCount = "3 stars",
				rowPosition = "2");

			Ratings.rateStarCollectionItem(
				colPosition = "1",
				ratingStarCount = "5 stars",
				rowPosition = "3");
		}

		task ("Assert the display order of collection items") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "First Web Content,Second Web Content,Third Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert ratings of collection items") {
			var n = "1";

			for (var ratingStarCount : list "5 stars,3 stars,1 star") {
				AssertElementPresent(
					key_colPosition = "1",
					key_ratingStarCount = "${ratingStarCount}",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_YOUR_RATING_STAR_RESULT");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var averageStarCount : list "5.0,3.0,1.0") {
				AssertTextEquals.assertPartialText(
					key_colPosition = "1",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_AVERAGE_STAR_RESULT",
					value1 = "${averageStarCount}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-112360. The asset entries should be ordered by view count from high to low in Collection Display when select Most Viewed Assets as Collection Provider."
	@priority = "5"
	test DisplayMostViewedAssetsInCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add a Web Content Article, a Blogs Entry and a Document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Row element to page and configure it to 2 columns") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");

			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display fragment to column 1") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select Most Viewed Assets Collection Providers in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Most Viewed Assets");
		}

		task ("Add an Asset Publisher widget to column 2") {
			PageEditor.addElementToColumn(
				columnNumber = "2",
				navTab = "Widgets",
				portletName = "Asset Publisher");
		}

		task ("Enable View Count Increment in Asset Publisher") {
			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "View Count Increment");

			Click(locator1 = "Icon#CLOSE");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of collection items are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Paragraph below Heading in Collection Display and Map View Count of collection items to editable field") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToBottom(
				key_collectionName = "Basic Components",
				key_fragmentName = "Paragraph",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Heading')]//following-sibling::div[contains(@class,'page-editor__topper__content')]",
				value1 = "");

			PageEditor.waitForAutoSave();

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "View Count",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("Assert the view count of collection items are respectively shown in each cell") {
			var n = "1";

			for (var count : list "0,0,0") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//*[contains(@class,'paragraph') and contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${count}");

				var n = ${n} + 1;
			}
		}

		task ("View Web Content Article one time via Asset Publisher") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetDetailsPG(
				assetContent = "Web Content Content",
				assetTitle = "Web Content Title");

			Navigator.gotoBack();
		}

		task ("Assert the display order of collection items") {
			var n = "1";

			for (var title : list "Web Content Title,Document Title,Blogs Entry Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the view count of collection items") {
			var n = "1";

			for (var count : list "1,0,0") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${count}");

				var n = ${n} + 1;
			}
		}

		task ("View Blogs Entry twice via Asset Publisher") {
			var count = "0";

			while ("${count}" != "2") {
				AssetPublisherPortlet.viewAssetDetailsPG(
					assetContent = "Blogs Entry Content",
					assetTitle = "Blogs Entry Title");

				Navigator.gotoBack();

				var count = ${count} + 1;
			}
		}

		task ("Assert the display order of collection items") {
			var n = "1";

			for (var title : list "Blogs Entry Title,Web Content Title,Document Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the view count of collection items") {
			var n = "1";

			for (var count : list "2,1,0") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${count}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-112360. The asset entries should be ordered by modified time from recent to past in Collection Display when select Recent Content as Collection Provider."
	@priority = "5"
	test DisplayRecentContentInCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Get modified date of Web Content Articles") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "First Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var firstModifiedDate = selenium.getAttribute("//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Second Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var secondModifiedDate = selenium.getAttribute("//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Third Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var thirdModifiedDate = selenium.getAttribute("//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");
		}

		task ("Add a Collection Display to page and Select Recent Content Collection Providers") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Recent Content");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "First Web Content",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of collection items are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Paragraph to Collection Display and Map Modified Date of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Modified Date",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("Assert modified date of collection items are shown in Paragraph") {
			var n = "1";

			for (var modifiedDate : list "${thirdModifiedDate},${secondModifiedDate},${firstModifiedDate}") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//*[contains(@class,'paragraph') and contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${modifiedDate}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the display order of collection items") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert modified date of collection items are shown in Paragraph") {
			var n = "1";

			for (var modifiedDate : list "${thirdModifiedDate},${secondModifiedDate},${firstModifiedDate}") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${modifiedDate}");

				var n = ${n} + 1;
			}
		}

		task ("Modify the First Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "First Web Content");

			WebContent.editCP(
				webContentContentEdit = "New Web Content Content",
				webContentTitle = "First Web Content",
				webContentTitleEdit = "First Web Content");
		}

		task ("Get modified date of the First Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "First Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var firstModifiedDate = selenium.getAttribute("//tr[2]//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");
		}

		task ("Assert the display order of collection items") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "First Web Content,Third Web Content,Second Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert modified date of collection items are shown in Paragraph") {
			var n = "1";

			for (var modifiedDate : list "${firstModifiedDate},${thirdModifiedDate},${secondModifiedDate}") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${modifiedDate}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-114770. The Collection Display can select a dynamic collection with Any asset types."
	@priority = "5"
	test DynamicCollectionWithAnyAssetTypeIsAvailableInCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic Collection and select Any as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection");

			AssetListsAdmin.configureAssetEntryType(selectedAsset = "All Types");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets are available to Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-114770. The Collection Display can select a dynamic collection with Select More Than One asset type."
	@priority = "4"
	test DynamicCollectionWithMoreThanOneAssetTypeIsAvailableInCollectionDisplay {
		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic Collection and select Select More Than One... as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection");

			AssetListsAdmin.configureAssetEntryType(selectedAsset = "Select Types...");

			for (var key_type : list "Web Content Article,Blogs Entry,Document") {
				AssertVisible(locator1 = "AssetLists#ASSET_LIST_ENTRY_TYPE_SELECTED");
			}
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets are available to Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-114770. The Collection Display can select a manual collection with multiple asset types."
	@priority = "5"
	test ManualCollectionWithAssetTypesIsAvailableToCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a manual Collection and select the Web Content Article,Blogs Entry and document") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Web Content Title",
				assetType = "Basic Web Content",
				itemType = "All Types");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Document Title",
				assetType = "Basic Document");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert manual collection is unavailable to Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var title : list "Web Content Title,Blogs Entry Title,Document Title") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This case ensures that a user can map a blogs content field to a fragment via the content display."
	@priority = "5"
	test MapBlogContentViaContentDisplay {
		property portal.acceptance = "true";
		property testray.component.names = "Content Pages,Item Selector";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "This content maps from blog content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			blogs = "true",
			entryContent = "This content maps from blog content",
			entryTitle = "Blogs Entry Title",
			fragmentName = "Content Display");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "PageEditor#CONTENT_PAGE_IMAGE_CONTENT");

		AssertTextEquals(
			locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT",
			value1 = "This content maps from blog content");
	}

	@description = "This is a use case for LPS-86141. The mapped content of asset entries in selected collection should be respectively shown in each cell of the Collection Display when map content to editable field of one fragment in one cell."
	@priority = "4"
	test MapContentToEditableFieldOfFragmentInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment to the first cell") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Third Web Content",
				fragmentName = "Heading");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of three Web Content Articles are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-120309. Assert the mapped image to Image fragment in collection display is shown in view mode."
	@priority = "4"
	test MapImageToImageTypeEditableFieldInCollectionDisplay {
		task ("Add a custom structure with image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DynamicDataMapping.addField(
				field = "Image",
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content article based on new structure and select an image") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				webContentImage = "Document_1.jpg",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a dynamic collection with Web Content Article and new structure") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Collection");

			AssetListsAdmin.configureAssetEntryType(selectedAsset = "Web Content Article");

			AssetListsAdmin.configureAssetEntrySubtype(selectedSubtype = "WC Structure Name");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add an Image fragment to the cell of Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Image");
		}

		task ("Map image field of web content article to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Image");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the image is shown in collection display") {
			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "Responsive Image",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}

		task ("Assert the image is shown in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "Responsive Image",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}
	}

	@description = "This case ensures that a user can map an image to a fragment via the content display."
	@priority = "5"
	test MapImageViaContentDisplay {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			documentandmedia = "true",
			fragmentName = "Content Display",
			imageFileName = "Document Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		AssertVisible(
			key_imageFileName = "Document+Title",
			locator1 = "PageEditor#CONTENT_PAGE_IMAGE_CONTENT");
	}

	@description = "This case ensures that a user can map the content field from web content to a fragment via the content display."
	@priority = "5"
	test MapWebContentContentViaContentDisplay {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "This content maps from web content",
			groupName = "Test Site Name",
			title = "Webcontent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			fragmentName = "Content Display",
			webcontent = "true",
			webContentContent = "This content maps from web content",
			webContentTitle = "Webcontent Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "This content maps from web content");
	}

	@description = "This is a test for LPS-101249. Can only select Documents and Media when set itemType to FileEntry."
	@priority = "3"
	test OnlySelectDocumentsAndMediaViaFragmentWhenItemTypeIsFileEntry {
		task ("Add a WC based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Description",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blog") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document with an image") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "display-collection-name.zip");
		}

		task ("Add new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "imported",
				fragmentName = "Documents and Media");
		}

		task ("Open select popup") {
			PageEditor.gotoSelectPanel(fragmentName = "Documents and Media");
		}

		task ("Assert only Documents and Media entry shown") {
			AssertElementPresent(
				key_card = "Document Title",
				locator1 = "Card#CARD");

			AssertElementNotPresent(
				key_navItem = "Web Content",
				locator1 = "NavBar#NAV_ITEM_LINK");

			AssertElementNotPresent(
				key_navItem = "Blogs",
				locator1 = "NavBar#NAV_ITEM_LINK");
		}

		task ("Assert fragment display correctly") {
			LexiconCard.clickCard(card = "Document Title");

			AssertTextEquals(
				locator1 = "//div[contains(@class,'fragment_dm')]",
				value1 = "Document Title");
		}
	}

	@description = "This is a test for LPS-101249. Can only select web content articles created with a specific structure when set itemSubtype."
	@priority = "3"
	test OnlySelectWebContentBasedOnCustomStructureViaFragmentWhenSetItemSubtype {
		property test.name.skip.portal.instance = "ContentPagesWithContributedFragments#OnlySelectWebContentBasedOnCustomStructureViaFragmentWhenSetItemSubtype";

		task ("Add a WC based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Description",
				groupName = "Test Site Name",
				title = "Basic Web Content Title");
		}

		task ("Disable autogenerate structure key") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Administration",
				configurationScope = "System Scope");

			FormFields.disableCheckbox(fieldName = "Autogenerate Structure Key");

			PortletEntry.save();
		}

		task ("Add a structure with Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureKey = "STRUCTURE-TEXT",
				structureName = "WC Structure Name");

			DynamicDataMapping.addField(
				field = "Text",
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a WC based on structure with Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				description = "Web Content Description",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content With Text Title");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "Web Content With Text Title");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "display-collection-name.zip");
		}

		task ("Add new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "imported",
				fragmentName = "Web Content With Text");
		}

		task ("Open select popup") {
			PageEditor.gotoSelectPanel(fragmentName = "Web Content With Text");
		}

		task ("Assert only WC with text field shown in popup") {
			AssertElementNotPresent(
				key_listEntry = "Basic Web Content Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");

			AssertElementPresent(
				key_listEntry = "Web Content With Text Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");
		}

		task ("Assert fragment display correctly") {
			AssertClick(
				key_listEntry = "Web Content With Text Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE",
				value1 = "Web Content With Text Title");

			AssertTextEquals(
				locator1 = "//div[contains(@class,'fragment_wctext')]",
				value1 = "Web Content With Text Title Web Content Description Web Content Text");
		}
	}

	@description = "This is a test for LPS-101249. Can only select web content articles when set itemType to JournalArticle"
	@priority = "5"
	test OnlySelectWebContentViaFragmentWhenItemTypeIsJournalArticle {
		property portal.acceptance = "true";

		task ("Add a WC based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Description",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blog") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "display-collection-name.zip");
		}

		task ("Add new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "imported",
				fragmentName = "Web Content");
		}

		task ("Open select popup") {
			PageEditor.gotoSelectPanel(fragmentName = "Web Content");
		}

		task ("Assert only Web Content entry shown") {
			AssertElementPresent(
				key_listEntry = "Web Content Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");

			AssertElementNotPresent(
				key_navItem = "Documents and Media",
				locator1 = "NavBar#NAV_ITEM_LINK");

			AssertElementNotPresent(
				key_navItem = "Blogs",
				locator1 = "NavBar#NAV_ITEM_LINK");
		}

		task ("Assert fragment display correctly") {
			AssertClick(
				key_listEntry = "Web Content Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE",
				value1 = "Web Content Title");

			AssertTextEquals(
				locator1 = "//div[contains(@class,'fragment_wc')]",
				value1 = "Web Content Title Web Content Description Web Content Content");
		}
	}

	@description = "This is a use case for LPS-86141. The changes will be propagated to others cells when edit inline content of fragment in one cell."
	@priority = "4"
	test PropagateChangesOfInlineContentToOtherCellsOfCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";

		task ("Add three documents") {
			for (var entryTitle : list "First Document,Second Document,Third Document") {
				JSONDocument.addFile(
					dmDocumentDescription = "DM Description",
					dmDocumentTitle = "${entryTitle}",
					groupName = "Test Site Name");
			}
		}

		task ("Add a dynamic Collections and select Document as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Document",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection and 3 Columns") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display",
				layout = "3 Columns");
		}

		task ("Add a Heading fragment to the first cell") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Third Document",
				fragmentName = "Heading");
		}

		task ("Edit inline Content of Heading in the first column") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			Click.clickNoWaitForVisible(
				key_colPosition = "1",
				key_element = "//div[contains(@class,'page-editor')]//li[contains(.,'Heading')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Click(
				key_colPosition = "1",
				key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			DoubleClick(
				key_colPosition = "1",
				key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Type(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_CK_EDITOR",
				value1 = "Modified Text");

			PageEditor.clickManagementBar();

			PageEditor.waitForAutoSave();
		}

		task ("Assert propagate changes of inline content to other cells") {
			for (var n : list "1,2,3") {
				AssertTextEquals(
					key_colPosition = "${n}",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "1",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "Modified Text");
			}
		}
	}

	@description = "This is a use case for LPS-116989. Can resize the item configuration panel."
	@priority = "4"
	test ResizeConfigurationPanelAndCheckRestore {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.resizeConfigurationPanel(
			fragmentName = "Button",
			position = "0,-100");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		PageEditor.gotoTab(tabName = "Selection");

		AssertElementPresent(locator1 = "PageEditor#CONFIGURATION_PANEL_HANDLE");

		AssertElementNotPresent(locator1 = "PageEditor#CONFIGURATION_PANEL_RESIZE");
	}

	@description = "This is a test for LPS-101248. Can select any custom web content template as a "Template" for web content selected in content fragment."
	@priority = "5"
	test SelectCustomWebContentTemplateViaContentDisplay {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "This content maps from web content",
			groupName = "Test Site Name",
			title = "Webcontent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			generalVariables = "Site ID",
			structureName = "Basic Web Content",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		var siteID = Site.getSiteId();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			customWebcontenttemplate = "WC Template Name",
			fragmentName = "Content Display",
			webcontent = "true",
			webContentContent = "${siteID}",
			webContentTitle = "Webcontent Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "${siteID}");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "This content maps from web content");
	}

	@description = "This is a use case for LPS-86141. The title of asset entries in selected collection should be shown as a list in the Collection Display."
	@priority = "5"
	test ShowTitleOfCollectionItemsInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add three Blogs entries") {
			for (var entryTitle : list "First Blogs Entry,Second Blogs Entry,Third Blogs Entry") {
				JSONBlog.addEntry(
					entryContent = "Blogs Entry Content",
					entryTitle = "${entryTitle}",
					groupName = "Test Site Name");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a manual Collections and select three Blogs entries") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Test Site Name",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetType = "Blogs Entry",
				entryList = "First Blogs Entry,Second Blogs Entry,Third Blogs Entry",
				itemType = "Blogs Entry");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Assert the title of three Web Content Articles are shown as a list in Collection Display") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}

		task ("Select the manual collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("Assert the title of three Blogs Entry are shown as a list in Collection Display") {
			var n = "1";

			for (var title : list "First Blogs Entry,Second Blogs Entry,Third Blogs Entry") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "Given a published content page with an unconfigured Content fragment, when the page is viewed the fragment should not be visible."
	@priority = "4"
	test UnconfiguredContentDisplayFragmentIsNotVisible {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the fragment is not visible in the site page") {
			AssertElementNotPresent(
				key_pageName = "Content Page Name",
				locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT");
		}
	}

	@description = "This is a use case for LPS-114727. The Content Display fragment can display abstract of asset entries in Collection Display."
	@priority = "5"
	test ViewAbstractInContentDisplayWithCollectionProvider {
		property portal.acceptance = "true";

		task ("Add a Web Content Article, a document and a Blogs Entry") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Discription",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			Blogs.addWithCustomAbstract(
				entryAbstractDescription = "Blogs Entry Custom Abstract",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets' title are displayed in Collection Display with Content Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Recent Content");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Content Display");

			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				inCollectionDisplay = "true",
				templateOption = "Abstract");

			var n = "1";

			for (var description : list "Blogs Entry Custom Abstract,DM Document Description,Web Content Discription") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "${description}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

				var n = ${n} + 1;
			}
		}

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		var n = "1";

		for (var description : list "Blogs Entry Custom Abstract,DM Document Description,Web Content Discription") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${description}",
				key_rowPosition = "${n}",
				locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_CONTENT");

			var n = ${n} + 1;
		}
	}

	@description = "This is a test for LPS-112094. TThe abstract of asset entries should be shown when select Abstract as List Item Style for different List styles."
	@priority = "5"
	test ViewAbstractListItemStyleInDifferentListStyles {
		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "This is a description for web content article",
				groupName = "Test Site Name",
				title = "Web Content Title");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			Blogs.addEntryWithUploadedCoverImage(
				coverImageName = "Document_1",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				navTab = "Blog Images",
				uploadFileName = "Document_1.jpg");

			Pause(locator1 = "3000");

			Panel.expandPanel(panel = "Configuration");

			BlogsEntry.addCustomAbstract(entryAbstractDescription = "This is a description for blogs entry");

			Pause(locator1 = "3000");

			PortletEntry.publish();

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "This is a description for document",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection, Bordered List as List Style and Abstract as List Item Style") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets",
				listItemStyle = "Abstract",
				listStyle = "Bordered List");
		}

		task ("Assert the Abstract of collection items are shown in Bordered List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Bordered List at view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Bulleted List as List Style and Abstract as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				listStyle = "Bulleted List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Abstract of collection items are shown in Bulleted List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Bulleted List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Inline List as List Style and Abstract as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				listStyle = "Inline List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Abstract of collection items are shown in Inline List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Inline List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");
		}

		task ("Select the Numbered List as List Style and Abstract as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				listStyle = "Numbered List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Abstract of collection items are shown in Numbered List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Numbered List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Unstyled List as List Style and Abstract as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				listStyle = "Unstyled List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Abstract of collection items are shown in Unstyled List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Unstyled List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a use case for LPS-114727. The Content Display fragment can display title of asset entries in Collection Provider."
	@priority = "5"
	test ViewAssetTitleInContentDisplayWithCollectionProvider {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets' title are displayed in Collection Display with Content Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Content Display");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

				var n = ${n} + 1;
			}
		}

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		var n = "1";

		for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${title}",
				key_rowPosition = "${n}",
				locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_CONTENT");

			var n = ${n} + 1;
		}
	}

	@description = "This is a test for LPS-112093. The Blogs Entries of collection are displayed using Full Content when add a Content Display to Collection Display."
	@priority = "4"
	test ViewBlogEntryViaContentInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";

		for (var i : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content ${i}",
				entryTitle = "Blogs Entry Title ${i}",
				groupName = "Test Site Name");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Blogs Entry",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "Blogs Entry Title 3,Blogs Entry Title 2,Blogs Entry Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "Blogs Entry Title 3",
			fragmentName = "Content Display");

		var n = "1";

		for (var content : list "Blogs Entry Content 3,Blogs Entry Content 2,Blogs Entry Content 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${content}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

			var n = ${n} + 1;
		}

		PageEditor.waitForAutoSave();

		PageEditor.clickConfigurableField(fragmentName = "Content Display");

		PageEditor.gotoTab(tabName = "Selection");

		AssertClick(
			key_navItem = "General",
			locator1 = "PageEditor#NAV_ITEM_BUTTON",
			value1 = "General");

		AssertSelectedLabel(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Full Content");
	}

	@description = "This is a test for LPS-112093. The documents of collection are displayed using Abstract when add a Content Display to Collection Display."
	@priority = "4"
	test ViewDocumentViaContentInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";

		for (var i : list "1,2,3") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title ${i}",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_${i}.jpg");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Document",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "Document Title 3,Document Title 2,Document Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "Document Title 3",
			fragmentName = "Content Display");

		var n = "1";

		for (var image : list "Document+Title+3.jpg,Document+Title+2.jpg,Document+Title+1.jpg") {
			AssertVisible(
				key_colPosition = "1",
				key_entryImage = "${image}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_IMAGE");

			var n = ${n} + 1;
		}

		PageEditor.waitForAutoSave();

		PageEditor.clickConfigurableField(fragmentName = "Content Display");

		PageEditor.gotoTab(tabName = "Selection");

		AssertClick(
			key_navItem = "General",
			locator1 = "PageEditor#NAV_ITEM_BUTTON",
			value1 = "General");

		AssertSelectedLabel(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Abstract");
	}

	@description = "This is a test for LPS-112249. The flags of each collection item are shown when add a Content Flags fragment to Collection Display."
	@priority = "5"
	test ViewFlagsViaContentFlagsInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${i}",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "WC WebContent Title 3",
			fragmentName = "Content Flags");

		for (var i : list "1,2,3") {
			AssertTextEquals(
				key_rowPosition = "${i}",
				locator1 = "Fragment#CONTENT_FRAGMENT_BODY",
				value1 = "Report");
		}

		PageEditor.waitForAutoSave();

		PageEditor.gotoContentConfiguration(
			fragmentName = "Content Ratings",
			rowPosition = "1");

		AssertTextEquals(
			key_text = "Content",
			locator1 = "TextInput#ANY",
			value1 = "WC WebContent Title 3");

		PageEditor.gotoContentConfiguration(
			fragmentName = "Content Ratings",
			rowPosition = "2");

		AssertTextEquals(
			key_text = "Content",
			locator1 = "TextInput#ANY",
			value1 = "WC WebContent Title 2");

		PageEditor.gotoContentConfiguration(
			fragmentName = "Content Ratings",
			rowPosition = "3");

		AssertTextEquals(
			key_text = "Content",
			locator1 = "TextInput#ANY",
			value1 = "WC WebContent Title 1");
	}

	@description = "This is a use case for LPS-114727. The Content Display fragment can display full content of asset entries in Collection Display."
	@priority = "5"
	test ViewFullContentInContentDisplayWithCollectionProvider {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets' title are displayed in Collection Display with Content Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Most Viewed Asset");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Content Display");

			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				inCollectionDisplay = "true",
				templateOption = "Full Content");

			AssertVisible(
				key_colPosition = "1",
				key_element = "//img[contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "${content}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

				var n = ${n} + 1;
			}
		}

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		AssertVisible(
			key_colPosition = "1",
			key_image = "Document+Title.jpg",
			key_rowPosition = "1",
			locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_IMAGE");

		var n = "2";

		for (var content : list "Blogs Entry Content,Web Content Content") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${content}",
				key_rowPosition = "${n}",
				locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_CONTENT");

			var n = ${n} + 1;
		}
	}

	@description = "This is a test for LPS-112094. The full content of asset entries should be shown when select Full Content as List Item Style for different List styles."
	@priority = "5"
	test ViewFullContentListItemStyleInDifferentListStyles {
		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			Blogs.addEntryWithUploadedCoverImage(
				coverImageName = "Document_1",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				navTab = "Blog Images",
				uploadFileName = "Document_1.jpg");

			Pause(locator1 = "3000");

			PortletEntry.publish();

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection, Bordered List as List Style and Full Content as List Item Style") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets",
				listItemStyle = "Full Content",
				listStyle = "Bordered List");
		}

		task ("Assert the Full Content of collection items are shown in Bordered List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Bordered List at view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Bulleted List as List Style and Full Content as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				listStyle = "Bulleted List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Full Content of collection items are shown in Bulleted List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Bulleted List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Inline List as List Style and Full Content as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				listStyle = "Inline List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Full Content of collection items are shown in Inline List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Inline List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");
		}

		task ("Select the Numbered List as List Style and Full Content as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				listStyle = "Numbered List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Full Content of collection items are shown in Numbered List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Numbered List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Unstyled List as List Style and Full Content as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				listStyle = "Unstyled List",
				selectedName = "Highest Rated Assets");
		}

		task ("Assert the Full Content of collection items are shown in Unstyled List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Unstyled List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document+Title.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-121223. View nested content when increase number of tabs."
	@priority = "4"
	test ViewNestedContentWhenIncreaseNumberOfTabs {
		task ("Add a Tabs fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("Edit text in editable field of nav buttons") {
			for (var n : list "1,2,3,4") {
				PageEditor.editFragmentText(
					fragmentName = "Tabs",
					id = "title${n}",
					text = "My Tab ${n}");
			}
		}

		task ("Add fragments to drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				var index = ${n} + 1;

				PageEditor.addElementToTab(
					collectionName = "Basic Components",
					fragmentName = "${fragmentName}",
					index = "${index}",
					navItem = "My Tab ${n}",
					navTab = "Fragments",
					position = "1");

				var n = ${n} + 1;
			}
		}

		task ("Increase number of tabs") {
			PageEditor.gotoStyle(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "6");
		}

		task ("View nested content in drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "My Tab ${n}");

				AssertElementPresent(
					key_fragmentName = "${fragmentName}",
					key_inFragmentName = "Tabs",
					locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

				var n = ${n} + 1;
			}

			var position = "1";

			for (var n : list "5,6") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "Tab ${n}");

				AssertVisible(
					key_content = "Place fragments here.",
					key_fragmentClass = "content",
					key_position = "${position}",
					locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");

				var position = ${position} + 1;
			}
		}
	}

	@description = "This is a test for LPS-112249. The ratings of each collection item are shown when add a Content Ratings fragment to Collection Display."
	@priority = "5"
	test ViewRatingsViaContentRatingsInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${i}",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "WC WebContent Title 3",
			fragmentName = "Content Ratings");

		for (var i : list "1,2,3") {
			AssertVisible(
				key_colPosition = "1",
				key_rowPosition = "${i}",
				locator1 = "PageEditor#COLLECTION_ITEM_RATING_STAR_EMPTY");

			AssertVisible(
				key_colPosition = "1",
				key_rowPosition = "${i}",
				locator1 = "PageEditor#COLLECTION_ITEM_AVERAGE_STAR");
		}

		PageEditor.waitForAutoSave();

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			PageEditor.gotoContentConfiguration(
				fragmentName = "Content Ratings",
				rowPosition = "${n}");

			AssertTextEquals(
				key_text = "Content",
				locator1 = "TextInput#ANY",
				value1 = "${title}");

			var n = ${n} + 1;
		}
	}

	@description = "This is a test for LPS-112094. The title of asset entries should be shown when select Title as List Item Style for different List styles."
	@priority = "5"
	test ViewTitleListItemStyleInDifferentListStyles {
		property environment.acceptance = "true";
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection, Bordered List as List Style and Title as List Item Style") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				listStyle = "Bordered List");
		}

		task ("Assert the Title of collection items are shown in Bordered List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Bordered List at view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Bulleted List as List Style and Title as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				listStyle = "Bulleted List",
				selectedName = "Dynamic Collection");
		}

		task ("Assert the Title of collection items are shown in Bulleted List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Bulleted List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Inline List as List Style and Title as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				listStyle = "Inline List",
				selectedName = "Dynamic Collection");
		}

		task ("Assert the Title of collection items are shown in Inline List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Inline List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Numbered List as List Style and Title as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				listStyle = "Numbered List",
				selectedName = "Dynamic Collection");
		}

		task ("Assert the Title of collection items are shown in Numbered List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Numbered List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Unstyled List as List Style and Title as List Item Style") {
			ContentPages.clickPencil();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				listStyle = "Unstyled List",
				selectedName = "Dynamic Collection");
		}

		task ("Assert the Title of collection items are shown in Unstyled List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Unstyled List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-112093. The Web Content Articles of collection are displayed using Default Template when add a Content Display to Collection Display."
	@priority = "5"
	test ViewWebContentViaContentInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${i}",
				groupName = "Test Site Name",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "WC WebContent Title 3",
			fragmentName = "Content Display");

		var n = "1";

		for (var content : list "WC WebContent Content 3,WC WebContent Content 2,WC WebContent Content 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${content}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

			var n = ${n} + 1;
		}

		PageEditor.waitForAutoSave();

		PageEditor.clickConfigurableField(fragmentName = "Content Display");

		PageEditor.gotoTab(tabName = "Selection");

		AssertClick(
			key_navItem = "General",
			locator1 = "PageEditor#NAV_ITEM_BUTTON",
			value1 = "General");

		AssertSelectedLabel(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Default Template");
	}

	@description = "This is a test for LPS-112093. Can display Web Content Articles of collection using custom template when add a Content Display to Collection Display."
	@priority = "5"
	test ViewWebContentWithCustomTemplateViaContentDisplayInCollectionDisplay {
		property osgi.app.includes = "bookmarks,document-library-google-docs";
		property portal.acceptance = "true";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		var templateScript = '''${Text.getData()}<hr>${Text.getName()}''';

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name",
			templateScript = "${templateScript}");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		for (var i : list "1,2,3") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				webContentText = "WC WebContent Text ${i}",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Site Name",
			itemType = "Web Content Article",
			title = "Dynamic Asset List Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			assetListName = "Dynamic Asset List Test",
			fragmentName = "Collection Display");

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "${title}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			var n = ${n} + 1;
		}

		PageEditor.addFragmentToCollectionDisplay(
			collectionName = "Content Display",
			entryTitle = "WC WebContent Title 3",
			fragmentName = "Content Display");

		for (var i : list "1,2,3") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "Text",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${i}",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");
		}

		var n = "1";

		for (var content : list "WC WebContent Text 3,WC WebContent Text 2,WC WebContent Text 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${content}",
				key_fragmentName = "Collection Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

			var n = ${n} + 1;
		}

		PageEditor.waitForAutoSave();

		PageEditor.clickConfigurableField(fragmentName = "Content Display");

		PageEditor.gotoTab(tabName = "Selection");

		AssertClick(
			key_navItem = "General",
			locator1 = "PageEditor#NAV_ITEM_BUTTON",
			value1 = "General");

		AssertSelectedLabel(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Default Template");

		Select(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		AssertSelectedLabel(
			key_fieldLabel = "Template",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Title");

		var n = "1";

		for (var title : list "WC WebContent Title 3,WC WebContent Title 2,WC WebContent Title 1") {
			AssertVisible(
				key_colPosition = "1",
				key_entryContent = "${title}",
				key_fragmentName = "Content Display",
				key_rowPosition = "${n}",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT");

			var n = ${n} + 1;
		}
	}

}