@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Bug: LRAC-11360 | Automation ID: LRAC-11361 | Test Summary: Paginate property list"
	@priority = 4
	test CanPaginatePropertyList {
		var propertyList = "Property Name 1,Property Name 2,Property Name 3,Property Name 4,Property Name 5,Property Name 6";

		task ("go to property and add 6 properties") {
			ACNavigation.goToSettings();

			for (var n : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${n});
			}
		}

		task ("Change the pagination to 5") {
			ACSettings.goToProperties();

			ACUtils.changePagination(itemsPerPage = 5);
		}

		task ("Check first 5 properties appear on first page") {
			var propertyList1 = "Property Name 2,Property Name 3,Property Name 4,Property Name 5,Property Name 6";

			ACUtils.assertItemsName(itemList = ${propertyList1});
		}

		task ("Click next page") {
			ACUtils.checkPreviousNextButton(nextButton = "true");
		}

		task ("Check last property appear on second page") {
			ACUtils.assertItemsName(itemList = "Property Name 1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9119 | Test Summary: Property list loading a lot of values"
	@ignore = "true"
	@priority = 2
	test CanPropertyListLoadingALotOfValues {

		// TODO LRAC-9119 CanPropertyListLoadingALotOfValues pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9121 | Test Summary: Settings page properties list is searchable"
	@priority = 3
	test CanSearchForPagePropertiesList {
		var propertyList = "Property CanSearchForPagePropertiesList 1,Property CanSearchForPagePropertiesList 2,Property CanSearchForPagePropertiesList 3,Property CanSearchForPagePropertiesList 4";

		task ("go to property and add new properties") {
			ACNavigation.goToSettings();

			for (var n : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${n});
			}
		}

		task ("search the properties") {
			ACSettings.goToProperties();

			for (var n : list ${propertyList}) {
				ACUtils.searchBar(searchItem = ${n});

				ACSettings.viewPropertyEntryName(propertyName = ${n});
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9122 | Test Summary: Search for a property"
	@priority = 5
	test CanSearchForProperty {
		var propertyList = "Property CanSearchForProperty 1,Property CanSearchForProperty 2,Property CanSearchForProperty 3,Property CanSearchForProperty 4";

		task ("go to property and add new properties") {
			ACNavigation.goToSettings();

			for (var n : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${n});
			}
		}

		task ("search for a property") {
			ACNavigation.exitSettings();

			for (var n : list ${propertyList}) {
				ACProperties.switchProperty(propertyName = ${n});
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9117 | Test Summary: User selecting a property from the drop down by 1st time"
	@priority = 3
	test CanUserSelectPropertyFromTheDropDownByFirstTime {
		var propertyName = "Property CanUserSelectPropertyFromTheDropDownByFirstTime 1";

		task ("go to properties and add a new property") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = ${propertyName});
		}

		task ("select new property") {
			ACNavigation.exitSettings();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}
	}

	@description = "Bug: LRAC-10602 | Automation ID: LRAC-11055 | Test Summary: Deleted properties don't appear as an option to sync sites"
	@ignore = "true"
	@priority = 2
	test DeletedPropertiesNotAppearAsOptionInSyncSites {

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		task ("Go to properties page and add 2 new properties") {
			var propertyList = "Property DeletedPropertiesNotAppearAsOptionInSyncSites 1,Property DeletedPropertiesNotAppearAsOptionInSyncSites 2";

			ACNavigation.goToSettings();

			for (var propertyName : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${propertyName});
			}
		}

		task ("Delete a property") {
			ACSettings.goToProperties();

			//ACSettings.deletePropertyByCheckbox(propertyName = "Property DeletedPropertiesNotAppearAsOptionInSyncSites 2");

		}

		task ("Copy the token from AC") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.goToInstanceSettingsAC();

			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Check that the existing properties in the AC appear in the list") {
			ACUtils.assertItemsName(itemList = "Property DeletedPropertiesNotAppearAsOptionInSyncSites 1");
		}

		task ("Check that the deleted AC properties do not appear in the list") {
			ACUtils.assertItemsNameNotPresent(itemList = "Property DeletedPropertiesNotAppearAsOptionInSyncSites 2");
		}

		task ("Disconnect the DXP to AC") {
			ACDXPSettings.disconnectDXPFromAnalyticsCloud();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9120 | Test Summary: Property field is displayed in empty state when no property is available"
	@ignore = "true"
	@priority = 3
	test ViewPropertyListDefault {

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		task ("Go to properties") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Assert empty state on properties page") {

			//if (IsElementNotPresent(key_textValue = "No Properties Found", locator1 = "ACUtils#GENERIC_TEXT")) {
			//	ACSettings.deleteAllProperties();
			//}

			ACProperties.assertNoProperties();
		}

		task ("Assert that there are no more properties on the sites page") {
			Navigator.gotoBack();

			AssertElementPresent(locator1 = "ACSidebar#PROPERTY_MENU_NO_PROPERTIES");

			AssertElementPresent(locator1 = "TextInput#NO_PROPERTIES_AVAILABLE_TEXT");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9118 | Test Summary: The setting info (from AC configuration menu) are global and don't depend of property"
	@priority = 3
	test ViewSettingInfoAreGlobalAndDontDependOfProperty {
		task ("go to properties and add 2 new properties") {
			ACNavigation.goToSettings();

			var propertyList = "Property ViewSettingInfoAreGlobalAndDontDependOfProperty 1,Property ViewSettingInfoAreGlobalAndDontDependOfProperty 2";

			for (var n : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${n});
			}
		}

		task ("switch between properties and assert the workspace settings is the same for those properties") {
			for (var n : list ${propertyList}) {
				ACNavigation.exitSettings();

				ACProperties.switchProperty(propertyName = ${n});

				ACNavigation.goToSettings();

				ACSettings.goToWorkspace();

				ACWorkspace.viewWorkspaceSettings(
					timezone = "UTC",
					timezoneId = "UTC Coordinated Universal Time (UTC)",
					workspaceName = "FARO-DEV-liferay");
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9116 | Test Summary: Dropdown transiction between no properties or no site and one or more properties available"
	@priority = 3
	test ViewTheDropdownTransition {
		task ("go to properties page and add 2 new properties") {
			var propertyList = "Property ViewTheDropdownTransition 1,Property ViewTheDropdownTransition 2";

			ACNavigation.goToSettings();

			for (var n : list ${propertyList}) {
				ACSettings.goToProperties();

				ACProperties.addNewProperty(propertyName = ${n});
			}
		}

		task ("assert transition when switching between properties") {
			ACNavigation.exitSettings();

			for (var n : list ${propertyList}) {
				ACProperties.switchProperty(propertyName = ${n});

				ACProperties.assertPropertyHeader(propertyName = ${n});

				ACProperties.assertSitesOverviewPropertyHeader(propertyName = ${n});

				ACProperties.assertCurrentActiveProperty(propertyName = ${n});
			}
		}
	}

}