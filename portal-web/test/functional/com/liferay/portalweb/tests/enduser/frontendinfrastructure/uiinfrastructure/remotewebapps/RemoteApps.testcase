definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Remote Apps";
	property testray.main.component.name = "Remote Apps";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			RemoteApps.tearDown();

			Navigator.gotoPage(pageName = "Home");

			while (IsElementPresent(locator1 = "Navigation#ANY_SITE_NAV_BUT_HOME")) {
				var layoutName = selenium.getText("Navigation#ANY_SITE_NAV_BUT_HOME");

				JSONLayout.deletePublicLayout(
					groupName = "Guest",
					layoutName = "${layoutName}");

				Navigator.gotoPage(pageName = "Home");

				PortalInstances.tearDownCP();
			}
		}
	}

	@description = "LPS-141236. Verify remote app can be displayed under a portlet category"
	@priority = "3"
	test CanBeAssignedAPortletCategory {
		property portal.acceptance = "true";

		task ("Create remote app entry with portlet category") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addEntryWithPortletCategory();
		}

		task ("Add a public widget page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page");

			Navigator.openURL();

			Navigator.gotoPage(pageName = "Test Page");
		}

		task ("Assert remote app is categorized under correct portlet category") {
			Click(locator1 = "ControlMenu#ADD");

			AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

			Navigator.gotoNavTab(navTab = "Widgets");

			WaitForElementPresent(locator1 = "NavBar#APPLICATION_SEARCH_FIELD");

			Type(
				locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
				value1 = "Test Remote App");

			AssertElementPresent(
				key_category = "Collaboration",
				locator1 = "ControlMenuAddPanel#WIDGET_CATEGORY");
		}
	}

	@description = "Verify remote app can be deleted"
	@priority = "5"
	@refactordone
	test CanBeDeleted {
		property portal.acceptance = "true";
		property testray.component.names = "Frontend Dataset,Remote Apps";

		var remoteAppName = "My New Remote App To Delete";

		JSONRemoteApp.addIFrameRemoteAppEntry(
			iFrameURL = "http://www.liferay.com/my_new_remote_app",
			name = "${remoteAppName}");

		RemoteApps.goToRemoteAppsPortlet();

		RemoteApps.deleteRemoteApp(tableEntry = "${remoteAppName}");

		RemoteApps.viewEmptyRemoteTable();
	}

	@description = "This is a test for LPS-162031. The site administrator could add a CSS remote app."
	@priority = "3"
	test CSSCanBeCreated {
		task ("Given a site administrator accesses to the Remote Apps admin") {
			JSONGroup.addGroup(groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Font Family",
				groupName = "Test Site Name",
				mimeType = "text/css",
				sourceFileName = "font_family.css");

			var url = JSONDocument.getLatestVersionURL(
				dmDocumentTitle = "Font Family",
				groupName = "Test Site Name");

			RemoteApps.goToRemoteAppsPortlet();
		}

		task ("When the site administrator creates a CSS remote app") {
			RemoteApps.addType(type = "Add CSS");

			RemoteApps.addApp(
				entryName = "Font Family",
				entryURL = "${url}");
		}

		task ("Then the site administrator sees the created CSS remote app") {
			RemoteApps.viewTableEntryName(entryName = "Font Family");

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Verify that remote app of type Custom Element can be created"
	@priority = "5"
	test CustomElementCanBeCreated {
		property app.server.types = "tomcat";
		property database.types = "mysql";
		property environment.acceptance = "true";
		property portal.acceptance = "true";
		property testray.component.names = "Frontend Dataset,Remote Apps";

		task ("Create Vanilla Counter as a Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addCustomElementAllFields(
				entryCssurl = "https://liferay.github.io/liferay-frontend-projects/index.css",
				entryHtmlName = "vanilla-counter",
				entryName = "Vanilla Counter",
				entryProperties = "test-data-user=QAuser",
				entryURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}

		task ("Assert that the Vanilla Counter is listed") {
			RemoteApps.viewTableEntries(
				entryName = "Vanilla Counter",
				entryType = "Custom Element");
		}

		task ("Assert that the Vanilla Counter fields have been saved correctly") {
			Click(
				key_tableEntryName = "Vanilla Counter",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			RemoteApps.assertCustomElementFields(
				entryCssurl = "https://liferay.github.io/liferay-frontend-projects/index.css",
				entryHtmlName = "vanilla-counter",
				entryName = "Vanilla Counter",
				entryProperties = "test-data-user=QAuser",
				entryURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}
	}

	@description = "LPS-158083 Remote App using non-root portal context"
	@priority = "4"
	test CustomElementCanBeCreatedInNonRootContext {
		property app.server.types = "tomcat";
		property database.types = "mysql";
		property portal.acceptance = "true";
		property portal.context = "liferay";
		property skip.clean-app-server-deploy-dir = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "RemoteApps#CustomElementCanBeCreatedInNonRootContext";
		property testray.component.names = "Frontend Dataset,Remote Apps";

		task ("Given a non-root portal context") {
			var portalURL = JSONCompany.getPortalURL();

			var portalContextIsCorrect = StringUtil.extractLast("${portalURL}", "/");

			TestUtils.assertEquals(
				actual = "${portalContextIsCorrect}",
				expected = "liferay");
		}

		task ("Given a Custom Element with relative path URLs") {
			task ("create es-element files in Documents") {
				JSONDocument.addFileWithUploadedFile(
					dmDocumentTitle = "index",
					groupName = "Guest",
					mimeType = "text/javascript",
					sourceFileName = "index.js");

				JSONDocument.addFileWithUploadedFile(
					dmDocumentTitle = "main",
					groupName = "Guest",
					mimeType = "text/css",
					sourceFileName = "main.css");
			}

			task ("create custom element") {
				JSONRemoteApp.addCustomElementRemoteAppEntry(
					customElementCssurl = "/documents/d/guest/main",
					customElementHtmlName = "es-element",
					customElementName = "ES Element",
					customElementProperties = "test-data-user=QAuser",
					customElementURL = "/documents/d/guest/index",
					customElementUseESM = "true");
			}
		}

		task ("When ES Element is added to widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "My Widget Page");

			Navigator.gotoPage(pageName = "My Widget Page");

			Click(locator1 = "ControlMenu#ADD");

			Type(
				locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
				value1 = "ES Element");

			Portlet._clickAddPortlet(portletName = "ES Element");

			Refresh();
		}

		task ("Then remote app src is rendered with non-root context") {
			AssertAttributeValue(
				attribute1 = "src",
				locator1 = "RemoteAppsEntry#CUSTOM_ELEMENT_MODULE_SCRIPT",
				value1 = "${portalURL}/documents/d/guest/index");
		}
	}

	@description = "Verify that remote app of type Custom Element can be deleted"
	@priority = "4"
	test CustomElementCanBeDeleted {
		property portal.acceptance = "true";

		task ("Create Vanilla Counter as a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHtmlName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}

		task ("Delete Vanilla Counter") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.deleteRemoteApp(tableEntry = "${customElementName}");
		}

		task ("Assert that Vanilla Counter has been deleted") {
			RemoteApps.assertTableEntryNameNotPresent(entryName = "${customElementName}");
		}
	}

	@description = "Verify that remote app of type Custom Element can be displayed by portlet"
	@priority = "5"
	test CustomElementCanBeDisplayedByPortlet {
		property portal.acceptance = "true";

		var customElementName = "Vanilla Counter";
		var customElementHtmlName = "vanilla-counter";
		var customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js";

		task ("Add a public page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				type = "content");
		}

		task ("Create Vanilla Counter as a Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addCustomElement(
				entryHtmlName = "${customElementHtmlName}",
				entryName = "${customElementName}",
				entryURL = "${customElementURL}");
		}

		task ("Add Vanilla Counter to Test Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page",
				siteName = "Guest");

			PageEditor.addWidget(portletName = "Vanilla Counter");

			PageEditor.publish();
		}

		task ("Assert Vanilla Counter is displayed") {
			Navigator.gotoPage(pageName = "Test Page");

			AssertElementPresent(locator1 = "RemoteApps#VANILLA_COUNTER_REMOTE_APP");
		}
	}

	@description = "Verify that remote app of type Custom Element can be edited"
	@priority = "4"
	test CustomElementCanBeEdited {
		property portal.acceptance = "true";

		var remoteAppName = "New Counter";

		task ("Create a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHtmlName = "new-counter",
				customElementName = "New Counter",
				customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}

		task ("Edit the fields of the Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			Click(
				key_tableEntryName = "${remoteAppName}",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			RemoteApps.editCustomElement(
				entryCssurl = "https://liferay.github.io/liferay-frontend-projects/index.css",
				entryHtmlName = "vanilla-counter-edited",
				entryName = "Vanilla Counter Edited",
				entryProperties = "test-data-user=QAuser");
		}

		task ("Assert that the Custom Element is listed") {
			RemoteApps.viewTableEntryName(entryName = "Vanilla Counter Edited");
		}

		task ("Assert that the fields have been updated") {
			Click(
				key_tableEntryName = "Vanilla Counter Edited",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			RemoteApps.assertCustomElementFields(
				entryCssurl = "https://liferay.github.io/liferay-frontend-projects/index.css",
				entryHtmlName = "vanilla-counter-edited",
				entryName = "Vanilla Counter Edited",
				entryProperties = "test-data-user=QAuser",
				entryURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}
	}

	@description = "Verify that remote app of type Custom Element can be instanceable in a Content Page"
	@priority = "3"
	test CustomElementCanBeInstanceable {
		property portal.acceptance = "true";

		task ("Add a public page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Guest",
				layoutName = "Test Page");
		}

		task ("Create Vanilla Counter as a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHtmlName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panelList = "General");
		}

		task ("Add Vanilla Counter in each module") {
			for (var n : list "1,2") {
				PageEditor.addElementToColumn(
					columnNumber = "${n}",
					navTab = "Widgets",
					portletName = "Vanilla Counter");
			}

			PageEditor.publish();
		}

		task ("Assert Vanilla Counter is instanceable") {
			Navigator.gotoPage(pageName = "Test Page");

			for (var n : list "1,2") {
				AssertElementPresent(
					column_number = "${n}",
					locator1 = "RemoteApps#VANILLA_COUNTER_PAGE_COLUMN_N");
			}
		}
	}

	@description = "Verify remote app can be configured one its portlet name has been changed"
	@priority = "3"
	test CustomElementCanConfigurePortletName {
		property portal.acceptance = "true";

		task ("Add a public page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page");
		}

		task ("Create Vanilla Counter as a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHtmlName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}

		task ("Obtain Vanilla Counter's remoteAppEntryId") {
			var remoteAppEntryId = RemoteApps.getRemoteAppEntryId();

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				remoteAppEntryId = "${remoteAppEntryId}",
				widgetName = "Vanilla Counter");
		}

		task ("Change Vanilla Counter portlet name") {
			RemoteApps.goToRemoteAppsPortlet();

			Click(
				key_tableEntryName = "Vanilla Counter",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Vanilla Counter Modified");

			PortletEntry.publish();
		}

		task ("Assert that Vanilla Counter name has been changed in Widget Page Editor") {
			Navigator.gotoPage(pageName = "Test Page");

			Click(locator1 = "ControlMenu#ADD");

			AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

			Navigator.gotoNavTab(navTab = "Widgets");

			WaitForElementPresent(locator1 = "NavBar#APPLICATION_SEARCH_FIELD");

			Type(
				locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
				value1 = "Vanilla Counter Modified");

			AssertElementPresent(
				key_remoteAppName = "Vanilla Counter Modified",
				locator1 = "RemoteApps#APPLICATION_SEARCH_FIELD_WIDGET_SEARCH_REMOTE_APP");
		}

		task ("Assert Vanilla Counter continues displayed") {
			Navigator.gotoPage(pageName = "Test Page");

			AssertElementPresent(locator1 = "RemoteApps#VANILLA_COUNTER_REMOTE_APP");
		}
	}

	@description = "Verify that remote app of type Custom Element can displayed properties in HTML"
	@priority = "3"
	test CustomElementCanInjectHTMLProperties {
		property portal.acceptance = "true";

		task ("Add a public page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page");
		}

		task ("Create Vanilla Counter as a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementCssurl = "http://remote-component-test.wincent.com/index.css",
				customElementHtmlName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementProperties = "test-data-user=QAuser",
				customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}

		task ("Add Vanilla Counter to Test Page") {
			var remoteAppEntryId = RemoteApps.getRemoteAppEntryId();

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				remoteAppEntryId = "${remoteAppEntryId}",
				widgetName = "Vanilla Counter");
		}

		task ("Assert Vanilla Counter's property is present") {
			Navigator.gotoPage(pageName = "Test Page");

			AssertElementPresent(
				key_customElementHtmlName = "vanilla-counter",
				key_customElementProperty = "QAuser",
				locator1 = "RemoteApps#REMOTE_APP_PROPERTY_HTML");
		}
	}

	@description = "Verify that remote app of type Custom Element can save multiple URLs"
	@priority = "4"
	test CustomElementCanSaveMultipleURLs {
		property portal.acceptance = "true";

		task ("Create Vanilla Counter as a Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addCustomElementMultipleURLs();
		}

		task ("Go to edit entry") {
			Click(
				key_tableEntryName = "Vanilla Counter",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");
		}

		task ("Assert multiple URL fields are saved") {
			RemoteApps.assertCustomElementMultipleURLFields();
		}
	}

	@description = "LPS-159013 ES module custom element portlets render incorrect script node when dragged in the UI"
	@priority = "4"
	test CustomElementRendersCorrectlyWhenPlacedOnWidgetPage {
		property portal.acceptance = "true";
		property testray.component.names = "Remote Apps";

		task ("Given a custom element with "Use ES Modules" option created") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementCssurl = "https://liferay.github.io/liferay-frontend-projects/index.css",
				customElementHtmlName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementProperties = "test-data-user=QAuser",
				customElementURL = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js",
				customElementUseESM = "true");
		}

		task ("And Given a widget page created") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "My Widget Page");
		}

		task ("When adding the app portlet to the page") {
			Navigator.gotoPage(pageName = "My Widget Page");

			Click(locator1 = "ControlMenu#ADD");

			Type(
				locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
				value1 = "Vanilla Counter");

			Portlet._clickAddPortlet(portletName = "Vanilla Counter");

			WaitForElementPresent(locator1 = "Message#SUCCESS");
		}

		task ("Then the custom element renders correctly") {
			AssertElementPresent(locator1 = "//vanilla-counter[@test-data-user='QAuser']");

			Refresh();

			AssertAttributeValue(
				attribute1 = "src",
				locator1 = "RemoteAppsEntry#CUSTOM_ELEMENT_MODULE_SCRIPT",
				value1 = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js");
		}
	}

	@description = "LPS-165425. Validate that HTML eror is thrown if left empty."
	@priority = "3"
	test ErrorAppearsWhenHTMLBlank {
		task ("Given Add Custom Element Remote Apps admin page") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addType(type = "Custom Element");
		}

		task ("When required fields Name, HTML Element Name, and JS URL are blank and When attempt to save remote app") {
			Button.clickPublish();
		}

		task ("Then error message 'HTML element name is empty'") {
			AssertElementPresent(
				locator1 = "RemoteAppsEntry#REMOTE_APPS_ERROR_WITH_MESSAGE",
				text = "HTML element name is empty.");
		}

		task ("And Then Remote App is not added") {
			Navigator.gotoBack();

			AssertElementPresent(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "LPS-163525. Validate Remote Apps UI has an understandable error message when user inputs an invalid URL."
	@priority = "4"
	test HasAnUnderstandableErrorMessageWhenURLInvalid {
		task ("Given Add IFrame Remote Apps") {
			ApplicationsMenu.gotoPortlet(
				category = "Custom Apps",
				panel = "Applications",
				portlet = "Remote Apps");

			RemoteApps.addType(type = "IFrame");
		}

		task ("When type testurl in URL field and a valid name is entered") {
			RemoteApps.addApp(
				entryName = "Test Name",
				entryURL = "$testurl");
		}

		task ("And When attempt to save the remote app") {
			Button.clickPublish();
		}

		task ("Then error message 'Please enter a valid URL' appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_ENTER_A_VALID_URL",
				value1 = "Please enter a valid URL.");
		}
	}

	@description = "LPS-163525. Validate Remote apps UI has a clear error message when all the mandatory fields are empty."
	@priority = "4"
	test HasMandatoryFieldErrorMessagesWhenEmpty {
		task ("Given Add IFrame Remote Apps admin page") {
			ApplicationsMenu.gotoPortlet(
				category = "Custom Apps",
				panel = "Applications",
				portlet = "Remote Apps");

			RemoteApps.addType(type = "IFrame");
		}

		task ("When attempt to save remote app") {
			Button.clickPublish();
		}

		task ("Then an error message 'field is required' appears under URL") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "This field is required.");
		}

		task ("And then Remote App is not added") {
			Navigator.gotoBack();

			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "LPS-165745. Error thrown when HTML Element contains empty/white space."
	@priority = "3"
	test HTMLElementConatinsInvlaidCharacters {
		task ("Given Add Custom Element Remote Apps") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addType(type = "Custom Element");
		}

		task ("When type 'vanilla counter' in HTML Element field") {
			Type(
				key_text = "HTML Element Name",
				locator1 = "TextInput#ANY",
				value1 = "vanilla counter");
		}

		task ("When attempt to save the remote app") {
			Button.clickPublish();
		}

		task ("Then error message 'HTML Element name contains invalid character' with empty/white space appears under HTML Element field") {
			AssertElementPresent(
				locator1 = "RemoteAppsEntry#REMOTE_APPS_ERROR_WITH_MESSAGE",
				text = "HTML element name contains invalid character");
		}
	}

	@description = "LPS-165835. Error thrown when HTML Element doesn't have at least one hyphen."
	@priority = "3"
	test HTMLElementMustHaveOneHyphen {
		task ("Given Add Custom Element Remote Apps") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addType(type = "Custom Element");
		}

		task ("When type 'vanilla.counter' in HTML Element Name field") {
			Type(
				key_text = "HTML Element Name",
				locator1 = "TextInput#ANY",
				value1 = "vanilla.counter");
		}

		task ("And When attempt to save the remote app") {
			Button.clickPublish();
		}

		task ("Then error message 'HTML element name must contain at least one hyphen' appears under HTML Element field") {
			AssertElementPresent(
				locator1 = "RemoteAppsEntry#REMOTE_APPS_ERROR_WITH_MESSAGE",
				text = "HTML element name must contain at least one hyphen");
		}
	}

	@description = "LPS-165834. Error thrown when HTML Element doesn't start with a lowercase letter."
	@priority = "3"
	test HTMLElementMustStartWithLowercase {
		task ("Given Add Custom Element Remote Apps") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addType(type = "Custom Element");
		}

		task ("When type 'Vanilla counter' in HTML Element Name field") {
			Type(
				key_text = "HTML Element Name",
				locator1 = "TextInput#ANY",
				value1 = "Vanilla counter");

			Button.clickPublish();
		}

		task ("And When attempt to save the remote app") {
			Button.clickPublish();
		}

		task ("Then error message 'HTML element name must start with a lowercase letter' appears under HTML Element field") {
			AssertElementPresent(
				locator1 = "RemoteAppsEntry#REMOTE_APPS_ERROR_WITH_MESSAGE",
				text = "HTML element name must start with a lowercase letter");
		}
	}

	@description = "Verify an iframe remote app can be created"
	@priority = "5"
	test IFrameCanBeCreated {
		property portal.acceptance = "true";
		property testray.component.names = "Frontend Dataset,Remote Apps";

		RemoteApps.goToRemoteAppsPortlet();

		RemoteApps.addType(type = "IFrame");

		RemoteApps.addApp(
			entryName = "Test Remote App",
			entryURL = "http://www.liferay.com");

		RemoteApps.viewTableEntryName(entryName = "Test Remote App");
	}

	@description = "Verify that remote app type IFrame can display property fields"
	@priority = "4"
	test IframeTypeCanDisplayProperFields {
		property portal.acceptance = "true";

		RemoteApps.goToRemoteAppsPortlet();

		RemoteApps.addType(type = "Custom Element");

		AssertVisible(
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY");

		AssertVisible(
			key_text = "CSS URL",
			locator1 = "TextInput#ANY");

		Click(locator1 = "Button#BACK");

		RemoteApps.addType(type = "IFrame");

		AssertElementNotPresent(
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY");

		AssertElementNotPresent(
			key_text = "CSS URL",
			locator1 = "TextInput#ANY");
	}

}