@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a display page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Display Page Name",
				subType = "Basic Web Content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-108463. Assert no Section fragment is outside when add a Row fragment to display page template."
	@priority = 4
	test AddRowWithoutSection {
		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid");

		AssertElementNotPresent(
			key_elementType = "Container",
			key_position = 1,
			locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");
	}

	@description = "This is a use case for LPS-112360. The related assets should be in Collection Display when select Related Assets as Collection Provider."
	@priority = 5
	test DisplayRelatedAssetsInCollectionDisplay {
		property portal.acceptance = "true";

		task ("Add a Collection Display to display page template and Select Related Assets Collection Providers") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Related Assets");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Title",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Add a Web Content Article, a Blogs Entry and a Document") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Web Content Article, Select display page template and Select related assets") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Blogs Entry Title",
				locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TITLE",
				value1 = "Blogs Entry Title");

			RelatedAssets.selectAsset(
				assetTitle = "Document Title",
				assetType = "Basic Document");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Blogs Entry Title",
				locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TITLE",
				value1 = "Blogs Entry Title");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Document Title",
				locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TITLE",
				value1 = "Document Title");

			PortletEntry.publish();
		}

		task ("Add a widget page and Add an Asset Publisher to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Assert related assets displayed in display page template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			var n = 1;

			for (var title : list "Document Title,Blogs Entry Title") {
				AssertTextEquals(
					key_colPosition = 1,
					key_fragmentName = "heading",
					key_rowPosition = ${n},
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = ${title});

				var n = ${n} + 1;
			}
		}
	}

	@description = "This case ensures that a user can select content via content display in display page template editor."
	@priority = 4
	test SelectWebContentViaContentDisplay {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WebContent Title");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			fragmentName = "Content Display",
			webcontent = "true",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WebContent Title");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Name",
			item = "Edit");

		task ("Assert correct content is visible") {
			AssertTextEquals.assertPartialTextAceEditor(
				locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
				value1 = "WC WebContent Content");
		}
	}

}