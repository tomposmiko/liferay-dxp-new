@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a display page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(displayPageName = "Display Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This case ensures that a user can select content via content display in display page template editor."
	@priority = "4"
	test SelectWebContentViaContentDisplay {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WebContent Title");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			webcontent = "true",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WebContent Title");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Name",
			item = "Edit");

		task ("Assert correct content is visible") {
			AssertTextEquals.assertPartialTextAceEditor(
				locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT",
				value1 = "WC WebContent Content");
		}
	}

}