@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-96797."
	@priority = "5"
	test CreateContentWithExistingStructureViaInlineFieldWithoutMappingRequiredField {
		property osgi.module.configuration.file.names = "com.liferay.layout.content.page.editor.web.internal.configuration.ContentCreationContentPageEditorConfiguration.config";
		property osgi.module.configurations = "contentCreationEnabled=&quot;true&quot;";
		property portal.acceptance = "true";

		task ("Create a web content structure with a required text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DynamicDataMapping.addField(
				field = "Text",
				fieldFieldLabel = "Text",
				fieldName = "Text");

			DynamicDataMapping.editFieldRequired(fieldFieldLabel = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Create a template for created structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a basic component to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Edit the editable field.") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "text",
				text = "New editable fragment text");
		}

		task ("Go to editable field toolbar map.") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");
		}

		task ("Create new content via inline field") {
			PageEditorMapping.createNewContent(
				contentName = "WC WebContent Title",
				contentValue = "New editable fragment text",
				structureField = "Unmapped",
				structureName = "WC Structure Name (1 Fields)",
				structureType = "Existing Structure");
		}

		task ("Assert the alert error message") {
			Alert.viewErrorMessage(errorMessage = "The web content article could not be created.");
		}
	}

	@description = "This is a test for LPS-98031."
	@priority = "5"
	test MapManualURLToLinkFragment {
		property portal.acceptance = "false";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.updateURL(url = "https://liferay.com");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert editable has the specified URL mapped correctly") {
			Click(locator1 = "//a[contains(@class,'btn')][contains(@href,'https://liferay.com')]");
		}
	}

	@description = "This is a test for LPS-96794. Mapped Web Content will appear in the sidebar in a Page Editor's edit mode."
	@priority = "5"
	test MapWebContentURLToLinkFragment {
		property portal.acceptance = "false";

		JSONWebcontent.addWebContent(
			content = "Test Content",
			groupName = "Test Site Name",
			title = "liferay.com");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.mapURLToAsset(
			entryTitle = "liferay.com",
			field = "Title",
			navItem = "Web Content");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert editable has the specified URL mapped correctly") {
			AssertElementPresent(locator1 = "//a[contains(@class,'btn')][contains(@href,'liferay.com')]");
		}
	}

}