@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.component.names = "Item Selector";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Content Page Name",
				type = "content");
		}
	}

	@description = "This is a use case for LPS-116975. Map all categories from asset entry to editable field."
	@priority = 4
	test MapAllCategoriesFromAssetToEditableField {
		task ("Add three vocabularies") {
			for (var n : list "1,2,3") {
				JSONCategory.addVocabulary(
					groupName = ${randomSiteName},
					title = "Vocabulary Name ${n}");
			}
		}

		task ("Add a category in the first vocabulary") {
			var categoryId1 = JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name 1",
				vocabularyName = "Vocabulary Name 1");
		}

		task ("Add a category in the second vocabulary") {
			JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name 2",
				vocabularyName = "Vocabulary Name 2");
		}

		task ("Add a subcategory in category") {
			var categoryId2 = JSONCategory.addSubcategory(
				groupName = ${randomSiteName},
				parentCategoryName = "Category Name 2",
				title = "Subcategory Name 2",
				vocabularyName = "Vocabulary Name 2");
		}

		task ("Add three categories in the third vocabulary") {
			var categoryId3 = JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name 3-1",
				vocabularyName = "Vocabulary Name 3");
			var categoryId4 = JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name 3-2",
				vocabularyName = "Vocabulary Name 3");
			var categoryId5 = JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name 3-3",
				vocabularyName = "Vocabulary Name 3");
		}

		task ("Add a web content with categories") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId1},${categoryId2},${categoryId3},${categoryId4},${categoryId5}",
				content = "WC WebContent Content",
				groupName = ${randomSiteName},
				title = "WC WebContent Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the All Categories field to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "All Categories");

			PageEditor.waitForAutoSave();
		}

		task ("View mapped content") {
			PageEditor.viewFragment(fragmentName = "Heading");

			AssertTextEquals.assertPartialText(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "Category Name 3-1, Category Name 3-2, Category Name 3-3");

			AssertTextEquals.assertPartialText(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "Subcategory Name 2");

			AssertTextEquals.assertPartialText(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "Category Name 1");
		}
	}

	@description = "This is a test for LPS-99686. The user can map the content of link editable to a field of a Blog and the editable link display text will update to the published Blog field content."
	@priority = 5
	test MapBlogsContentToLinkFragment {
		property portal.acceptance = "true";

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map the Content field of blogs entry to link editable field of Button") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Blogs Entry Title",
				navItem = "Blogs");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Content");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Blogs Entry Content",
				fragmentName = "Button",
				id = "link");

			PageEditor.publish();
		}

		task ("Assert the mapped content of blogs entry is shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[contains(@data-lfr-editable-id,'link')]/p[normalize-space(text())='Blogs Entry Content']",
				key_url = "",
				locator1 = "Fragment#FRAGMENT_LINK");
		}
	}

	@description = "This is a test for LPS-116034. The custom ddmfields of content are available for mapping in editable field."
	@priority = 4
	test MapCustomDDMFieldToFragment {
		task ("Add a custom Web Content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				webContentText = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentTypesAdmin(siteURLKey = ${siteURLKey});

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a document based on new document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = ${siteURLKey});

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				textField = "DM Document Text");
		}

		task ("Map custom ddmfield of web content structure to Heading fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Text");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Content",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Map custom ddmfield of document type to Paragraph fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "DM Document Title",
				navItem = "Documents and Media");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Text");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "DM Document Text",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("Assert mapped content in view mode") {
			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Content");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "DM Document Text");
		}
	}

	@description = "This is a test for LPS-99686. The user can map the content of link editable to a field of a document and the editable link display text will update to the published document field content"
	@priority = 3
	test MapDocumentTitleToLinkFragment {
		task ("Add a document based on Basic Document") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = ${randomSiteName},
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map the Title field of document to link editable field of Banner Center") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Document Title",
				navItem = "Documents and Media");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Document Title",
				fragmentName = "Button",
				id = "link");

			PageEditor.publish();
		}

		task ("Assert the mapped title of document is shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[contains(@data-lfr-editable-id,'link')][normalize-space(text())='Document Title']",
				key_url = "",
				locator1 = "Fragment#FRAGMENT_LINK");
		}
	}

	@description = "This is a test for LPS-120094. Map manual URL to Image fragment."
	@priority = 5
	test MapManualURLToImageFragment {
		property ci.retries.disabled = "true";
		property portal.acceptance = "true";

		task ("Add a Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map manual URL to editable field of Image") {
			PageEditor.editFragmentImage(
				fileName = "Document_1.jpg",
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.updateURL(url = "https://liferay.com");

			AssertVisible(
				key_append = "/img[contains(@src,'document_1-jpg')]",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "//img[contains(@src,'document_1-jpg')]",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "//img[contains(@src,'document_1-jpg')]",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031 and LPS-120348. Map Manual URL to Link fragment and select blank as target."
	@priority = 5
	test MapManualURLToLinkFragment {
		property portal.acceptance = "true";

		task ("Add a Banner Center fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map manual URL to link editable field of Banner Center") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.updateURL(
				target = "Blank",
				url = "https://liferay.com");

			AssertVisible(
				key_append = "[contains(@target,'blank')][normalize-space(text())='Go Somewhere']",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert editable has the specified URL mapped correctly") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[contains(@target,'blank')][normalize-space(text())='Go Somewhere']",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Assert mapped URL work in view mode") {
			Click(
				key_append = "[contains(@target,'blank')][normalize-space(text())='Go Somewhere']",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-117818. Map manual URL to text fragment."
	@priority = 5
	test MapManualURLToTextFragment {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map manual URL to editable field of Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.updateURL(url = "https://liferay.com");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a use case for LPS-120198. Link public and private pages to fragments."
	@priority = 4
	test MapPageToImageFragment {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a public widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Public Page Name");
		}

		task ("Add a private widget page") {
			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Private Page Name");
		}

		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map the public widget page to editable field of Image") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Image",
				id = "image-square",
				navItem = "Public Pages",
				pageName = "Test Public Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Public Page Name");
		}

		task ("View selected page is linked to Button fragment") {
			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/web/${siteURLKey}/test-public-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert redirect to public widget page") {
			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/web/${siteURLKey}/test-public-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Public Page Name");

			AssertLocation.assertPartialLocation(value1 = "web/${siteURLKey}/test-public-page-name");
		}

		task ("Navigate to content page in edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Map the private widget page to editable field of Image") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Image",
				id = "image-square",
				navItem = "Private Pages",
				pageName = "Test Private Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Private Page Name");
		}

		task ("View selected page is linked to Image fragment") {
			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/group/${siteURLKey}/test-private-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert redirect to private widget page") {
			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/group/${siteURLKey}/test-private-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Private Page Name");

			AssertLocation.assertPartialLocation(value1 = "group/${siteURLKey}/test-private-page-name");
		}
	}

	@description = "This is a use case for LPS-118276. Map single vocabulary with single category from asset entry to editable field."
	@priority = 5
	test MapSingleCategoryFromAssetToEditableField {
		property portal.acceptance = "true";

		task ("Add a new vocabulary") {
			JSONCategory.addVocabulary(
				groupName = ${randomSiteName},
				title = "Vocabulary Name");

			JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content article based on Basic Web Content with the new category") {
			var categoryId = JSONCategory.getCategoryId(
				categoryName = "Category Name",
				groupName = ${randomSiteName},
				vocabularyName = "Vocabulary Name");

			JSONWebcontent.addWebContent(
				assetCategoryIds = ${categoryId},
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("Add a blogs entry with the new category") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = ${categoryId},
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");
		}

		task ("Add a document based on Basic Document with the new category") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = ${categoryId},
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = ${randomSiteName},
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the new category from web content article to editable field of Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Vocabulary Name");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Category Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Map the new category from blogs entry to editable field of Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Blogs Entry Title",
				navItem = "Blogs");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Vocabulary Name");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Category Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Map the new category from document to editable field of Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Document Title",
				navItem = "Documents and Media");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Vocabulary Name");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "Category Name",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-116975. Map single tag from asset entry to editable field."
	@priority = 5
	test MapTagFromAssetToEditableField {
		property portal.acceptance = "true";

		task ("Add a blogs entry with a tag") {
			HeadlessBlog.addBlogEntry(
				assetTagNames = "tagname1",
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Tags field to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Blogs Entry Title",
				navItem = "Blogs");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Tags");

			PageEditor.waitForAutoSave();
		}

		task ("View mapped content") {
			PageEditor.viewFragmentEditableText(
				editableText = "tagname1",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-116975. Map multiple tags from asset entry to editable field."
	@priority = 5
	test MapTagsFromAssetToEditableField {
		property portal.acceptance = "true";

		task ("Add a web content with three tags") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tagname1,tagname2,tagname3",
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Map the Tags field to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Tags");

			PageEditor.waitForAutoSave();
		}

		task ("View mapped content") {
			PageEditor.viewFragmentEditableText(
				editableText = "tagname1, tagname2, tagname3",
				fragmentName = "Paragraph",
				id = "element-text");
		}
	}

	@description = "This is a test for LPS-123118. The page creator can map a fragment to web content template with portlet request model."
	@priority = 4
	test MapTemplateWithPortletRequestModelToFragment {
		property custom.properties = "configuration.override.com.liferay.portal.template.freemarker.configuration.FreeMarkerEngineConfiguration_restrictedVariables=[\"httpUtilUnsafe\",\"staticFieldGetter\",\"staticUtil\",\"serviceLocator\",]${line.separator}configuration.override.com.liferay.portal.template.freemarker.configuration.FreeMarkerEngineConfiguration_restrictedClasses=[\"org.glassfish.*\",\"org.jboss.*\",\"org.springframework.*\",\"org.wildfly.*\",\"weblogic.*\",]";

		task ("Given a page creator has a web content template with portlet request model") {
			task ("Add a web content template for Basic Web Content structure") {
				WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = ${siteURLKey});

				WebContentTemplates.addCP(
					structureName = "Basic Web Content",
					templateDescription = "WC Template Description",
					templateName = "WC Template Name",
					templateScript = "<#assign portletRequestModel = objectUtil(\"com.liferay.portal.kernel.portlet.PortletRequestModel\", request.getAttribute(\"javax.portlet.request\"), request.getAttribute(\"javax.portlet.response\")) />");
			}

			task ("Add a web content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = ${randomSiteName},
					title = "Web Content Title");
			}

			task ("Add a Paragraph fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Paragraph");
			}
		}

		task ("When the page creator maps the Paragraph fragment to web content template") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "WC Template Name");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator should not see an error at edit mode") {
			AssertTextNotPresent(value1 = "An error occurred while processing the template.");
		}

		task ("When the page creator accesses published content page at view mode") {
			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Then the page creator should not see an error at view mode") {
			AssertTextNotPresent(value1 = "An error occurred while processing the template.");
		}
	}

	@description = "This is a test for LPS-99686. Map web content fields to link editable field"
	@priority = 2
	test MapWebContentFieldsToLinkFragment {
		task ("Add a web content structure with multiple fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			for (var fieldName : list "Text,Rich Text,Date") {
				DataEngine.addField(
					fieldFieldLabel = ${fieldName},
					fieldName = ${fieldName});
			}

			DataEngine.addField(
				fieldFieldLabel = "Text Box",
				fieldName = "Text",
				fieldType = "Multiple Lines");

			DataEngine.addField(
				fieldFieldLabel = "Integer",
				fieldName = "Numeric");

			DataEngine.addField(
				fieldFieldLabel = "Decimal",
				fieldName = "Numeric",
				numericType = "Decimal");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentDate = "10/10/2020",
				webContentNumeric = 9,
				webContentNumericFieldLabel = "Integer",
				webContentRichText = "This is a Rich Text field",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title");

			WebContent.addWithStructureCP(
				fieldType = "Multiple Lines",
				numericType = "Decimal",
				webContentNumeric = "0.5",
				webContentNumericFieldLabel = "Decimal",
				webContentText = "This is a Text Box field",
				webContentTextFieldLabel = "Text Box");

			WebContent.addWithStructureCP(
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Assert map the fields of web content to link fragment") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Text");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "This is a Text field",
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Text Box");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "This is a Text Box field",
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Rich Text");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "This is a Rich Text field",
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Date");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "10/10/20",
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Integer");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = 9,
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Decimal");

			PageEditor.waitForAutoSave();

			PageEditor.viewFragmentEditableText(
				editableText = "0.5",
				fragmentName = "Button",
				id = "link");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to image editable field."
	@priority = 4
	test MapWebContentFieldWithURLToImageFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map Text field with URL to Image") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to link editable field."
	@priority = 4
	test MapWebContentFieldWithURLToLinkFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map Text field with URL to Button") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to text editable field."
	@priority = 4
	test MapWebContentFieldWithURLToTextFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map Text field with URL to Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This case ensures a user can map an image to the editable background image of a fragment."
	@priority = 5
	test MapWebContentImageToBackgroundImageOfBannerCenter {
		property portal.acceptance = "true";

		task ("Add a web content structure with an Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Image",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();
		}

		task ("Add a Banner Center fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map the Image field to the background image field") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				entryTitle = "WC WebContent Title",
				fieldName = "Image",
				navItem = "Web Content",
				panel = "Styles");

			PageEditor.publish();
		}

		task ("View the mapped image") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentBackgroundImage(image = "Document_2.jpeg");
		}
	}

	@description = "This is a test for LPS-99686. Map web content title to link type fragment."
	@priority = 5
	test MapWebContentTitleToLinkFragment {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Test Content",
				groupName = ${randomSiteName},
				title = "liferay.com");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map the Title field of web content to link type editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "liferay.com",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("View mapped content is shown in link editable field") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[contains(@data-lfr-editable-id,'link')][normalize-space(text())='liferay.com']",
				key_url = "",
				locator1 = "Fragment#FRAGMENT_LINK");
		}
	}

	@description = "This is a test for LPS-125933. Preview a Content Page with a Fragment Mapped to WC, a WCD, and an Assert Publisher."
	@priority = 3
	test PreviewContentPageWithMappedAndInlineContent {
		task ("Add two web contents based on Basic Web Content") {
			for (var n : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = ${randomSiteName},
					title = "Web Content Title ${n}");
			}
		}

		task ("Add an Asset Publisher and an Web Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");

			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Asset Publisher");
		}

		task ("Display the Web Content Title 1 in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 1");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(webContentContent = "Web Content Content 1");
		}

		task ("Add a Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments",
				targetFragmentName = "Web Content Display");
		}

		task ("Map Title field of web content to Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title 1",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Open the Preview modal") {
			PageEditor.previewInANewTab();
		}

		task ("Assert the web content in Preview Modal") {
			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Title 1");

			AssertVisible(
				key_content = "[contains(.,'Web Content Content 1')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}
		}
	}

	@description = "This is a use case for LPS-171383. View documentation link in date field."
	@priority = 4
	test ViewDocumentationLinkInDateField {
		task ("Given a page has a fragment with mapped date") {
			JSONFragment.addFragmentCollection(
				groupName = ${randomSiteName},
				name = "Collection Name");

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = ${siteURLKey});

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			var htmlSnippet = '''
<div class="fragment-name">
	<div data-lfr-editable-type="date-time" data-lfr-editable-id="date-time">
	</div>
</div>''';

			FragmentsEditor.typeHtmlEditor(content = ${htmlSnippet});

			FragmentsEditor.waitForAutoSave();

			FragmentsEditor.publish();

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Fragment Name",
				id = "date-time");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Display Date");

			PageEditor.waitForAutoSave();
		}

		task ("When selecting Custom Date Format") {
			Select(
				key_fieldLabel = "Date Format",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Custom");

			PageEditor.waitForAutoSave();
		}

		task ("Then assert there's a documentation link in date field") {
			AssertVisible(
				key_href = "https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html",
				key_text = "Learn more about date formats.",
				locator1 = "Link#ANY_HREF");
		}
	}

	@description = "This is a test for LPS-110462. The value of editable field should be reset when the mapped content is missing"
	@priority = 3
	test ViewEditableFieldValueWhenMappedContentMissing {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Map Title field of web content to Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the title of web content is shown in Heading") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Move the web content to the Recycle Bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContent.moveToRecycleBinCP(webContentTitle = "Web Content Title");
		}

		task ("Assert the default value is shown in Heading") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-120198. The link information is still kept when the linked page is deleted."
	@priority = 4
	test ViewMapInformationAfterDeleteMappedPage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Widget Page Name");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map the widget page to editable field of Button") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Button",
				id = "link",
				pageName = "Test Widget Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Widget Page Name");
		}

		task ("View selected page is linked to Button fragment") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "/web/${siteURLKey}/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Delete the widget page") {
			JSONLayout.deletePublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Widget Page Name");
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("View selected page is changed to #") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "#",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Assert no redirection") {
			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "#",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Content Page Name");
		}

		task ("Navigate to the content page in edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("View # is linked to Button fragment") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "#",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("View the selected page is still shown in Page field") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Widget Page Name");
		}

		task ("Publish to content page") {
			PageEditor.publish();
		}

		task ("Assert no redirection") {
			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "#",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Content Page Name");
		}
	}

	@description = "This is a test for LPS-118979 and LPS-106776. The mappable fields are grouped by fieldset in content page."
	@priority = 5
	test ViewMappableFieldsAreGroupedByFieldset {
		property portal.acceptance = "true";

		task ("Add a web content article based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentTypesAdmin(siteURLKey = ${siteURLKey});

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a document based on new document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = ${siteURLKey});

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				textField = "DM Document Text");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the web content article to editable field of Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			for (var field : list "Title,Description,Publish Date,Author Name,Last Editor Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Content (Basic Web Content)",
				key_value = "Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Templates",
				key_value = "Basic Web Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Display Page",
				key_value = "Display Page URL",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Display Date,Expiration Date") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Schedule",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}

		task ("Map the blogs entry to editable field of Heading") {
			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Blogs Entry Title",
				navItem = "Blogs");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			for (var field : list "Title,Author Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Subtitle,Cover Image Caption,Content") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Content",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Display Page URL,Description,Display Date") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Configuration",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}

		task ("Map the document to editable field of Heading") {
			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "DM Document Title",
				navItem = "Documents and Media");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			for (var field : list "Title,Description,Version,Publish Date,Author Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "File Name,Download URL,MIME Type,Size") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "File Information",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "DM Document Type Name",
				key_value = "Text",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = ${field},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}
	}

	@description = "This is a test for LPS-164269. The page creator could view a tooltip with the page URL when mapping a fragment on sites and libraries."
	@priority = 4
	test ViewPageURLOnTooltipWhenSelectPageItem {
		task ("Given a page creator opens the link to page modal") {
			task ("Get the guest site name") {
				Navigator.openURL();

				var defaultSiteName = selenium.getText("Home#SITE_NAME");
			}

			task ("Publish content page") {
				JSONLayout.publishLayout(
					groupName = ${randomSiteName},
					layoutName = "Content Page Name");
			}

			task ("Add a Button fragment to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Button");
			}

			task ("Map Link field with to Page") {
				PageEditorEditableLink.gotoEditableFieldLink(
					fragmentName = "Button",
					id = "link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Page");
			}

			task ("Open the Select modal of Page Link") {
				Click(
					key_fieldLabel = "Page",
					key_text = "plus",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Portlet.expandTree();
			}
		}

		task ("When the page creator hovers on the content page item") {
			MouseOver(
				key_nodeName = "Content Page Name",
				locator1 = "Treeview#NODE_ITEM");
		}

		task ("Then the page creator could view a tooltip with the page url") {
			AssertVisible(
				key_content = "/web/${siteURLKey}/content-page-name",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("When the page creator hovers on the content page item from another site on Sites and Libraries") {
			Click(
				key_breadcrumbName = "Sites and Libraries",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY");

			LexiconCard.clickCardTitle(card = ${defaultSiteName});

			Portlet.expandTree();

			MouseOver(
				key_nodeName = "Home",
				locator1 = "Treeview#NODE_ITEM");
		}

		task ("Then the page creator could view a tooltip with the page url") {
			AssertVisible(
				key_content = "/home",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-146373. New prefixes for email,phone and none options can be used on Content Pages."
	@priority = 4
	test ViewPrefixesForEmailAndPhoneAndNoneOptionsOnContentPage {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Given a site created from Welcome site template") {
			HeadlessSite.addSite(
				siteName = ${siteName},
				templateName = "Welcome",
				templateType = "Site Initializer");
		}

		task ("When adding a web content with email and telephone") {
			task ("Create a web content structure") {
				WebContentStructures.openWebContentStructuresAdmin(siteURLKey = ${siteURLKey});

				WebContentStructures.addCP(structureName = "Contact Information");

				for (var fieldFieldLabel : list "Name,Email,Phone,Personal Web") {
					DataEngine.addField(
						fieldFieldLabel = ${fieldFieldLabel},
						fieldName = "Text");
				}

				WebContentStructures.saveCP();
			}

			task ("Create a Web Content from Contact Information") {
				NavItem.gotoWebContent();

				WebContentNavigator.gotoAddWithStructureCP(structureName = "Contact Information");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "John Smith",
					webContentTextFieldLabel = "Name",
					webContentTitle = "Web Content Title");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "john.smith@liferay.com",
					webContentTextFieldLabel = "Email");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = 1112223333,
					webContentTextFieldLabel = "Phone");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "https://www.liferay.com",
					webContentTextFieldLabel = "Personal Web");

				PortletEntry.publish();
			}

			task ("Create a content page") {
				JSONLayout.addPublicLayout(
					groupName = ${siteName},
					layoutName = "Contact",
					type = "content");
			}

			task ("Add a Container to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Contact",
					siteName = ${siteName});

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Add a Heading fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Heading",
					navTab = "Fragments");
			}

			task ("Map Email field of web content to Heading") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Heading",
					id = "element-text");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Email");

				PageEditor.waitForAutoSave();

				Select(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Email");

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Email");
			}

			task ("Add an Image fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Image",
					navTab = "Fragments",
					targetElementName = "Heading");
			}

			task ("Map Phone field of web content to Image") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Image",
					id = "image-square");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Phone");

				PageEditor.waitForAutoSave();

				Select(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Phone");

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Phone");
			}

			task ("Add a Button fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Button",
					height = "Tall",
					navTab = "Fragments",
					ratio = "9 / 8",
					targetElementName = "Image");
			}

			task ("Map Personal Web field of web content to Button") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Button",
					id = "link");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Personal Web");

				PageEditor.waitForAutoSave();
			}
		}

		task ("Then user is able to view email and telephone on content page") {
			task ("Open Preview Draft") {
				PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "Preview Draft",
					pageName = "Contact");
			}

			task ("View editable fields' link") {
				SelectWindow.selectPopUp(locator1 = "null");

				AssertVisible(
					key_append = "[normalize-space(text())='Heading Example']",
					key_url = "mailto:john.smith@liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "/*[contains(@data-lfr-editable-id,'image')]",
					key_url = "tel:1112223333",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "[contains(@class,'btn')]",
					key_url = "https://www.liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				Navigator.closeWindow();
			}

			task ("Publish the page and view it") {
				JSONLayout.publishLayout(
					groupName = ${siteName},
					layoutName = "Contact");

				ContentPagesNavigator.openViewContentPage(
					pageName = "Contact",
					siteName = ${siteName});
			}

			task ("View editable fields' link") {
				AssertVisible(
					key_append = "[normalize-space(text())='Heading Example']",
					key_url = "mailto:john.smith@liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "/*[contains(@data-lfr-editable-id,'image')]",
					key_url = "tel:1112223333",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "[contains(@class,'btn')]",
					key_url = "https://www.liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");
			}
		}
	}

	@description = "This is a test for LPS-146373. New prefixes for email,phone and none options can be used can be used on a copied Content Page."
	@priority = 4
	test ViewPrefixesForEmailAndPhoneAndNoneOptionsOnCopiedContentPage {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Given a site created from Welcome site template") {
			HeadlessSite.addSite(
				siteName = ${siteName},
				templateName = "Welcome",
				templateType = "Site Initializer");
		}

		task ("When adding a web content with email and telephone") {
			task ("Create a web content structure") {
				WebContentStructures.openWebContentStructuresAdmin(siteURLKey = ${siteURLKey});

				WebContentStructures.addCP(structureName = "Contact Information");

				for (var fieldFieldLabel : list "Name,Email,Phone,Personal Web") {
					DataEngine.addField(
						fieldFieldLabel = ${fieldFieldLabel},
						fieldName = "Text");
				}

				WebContentStructures.saveCP();
			}

			task ("Create a Web Content from Contact Information") {
				NavItem.gotoWebContent();

				WebContentNavigator.gotoAddWithStructureCP(structureName = "Contact Information");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "John Smith",
					webContentTextFieldLabel = "Name",
					webContentTitle = "Web Content Title");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "john.smith@liferay.com",
					webContentTextFieldLabel = "Email");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = 1112223333,
					webContentTextFieldLabel = "Phone");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "https://www.liferay.com",
					webContentTextFieldLabel = "Personal Web");

				PortletEntry.publish();
			}

			task ("Create a content page") {
				JSONLayout.addPublicLayout(
					groupName = ${siteName},
					layoutName = "Contact",
					type = "content");
			}

			task ("Add a Container to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Contact",
					siteName = ${siteName});

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Add a Heading fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Heading",
					navTab = "Fragments");
			}

			task ("Map Email field of web content to Heading") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Heading",
					id = "element-text");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Email");

				PageEditor.waitForAutoSave();

				Select(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Email");

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Email");
			}

			task ("Add an Image fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Image",
					navTab = "Fragments",
					targetElementName = "Heading");
			}

			task ("Map Phone field of web content to Image") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Image",
					id = "image-square");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Phone");

				PageEditor.waitForAutoSave();

				Select(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Phone");

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Phone");
			}

			task ("Add a Button fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Button",
					height = "Tall",
					navTab = "Fragments",
					ratio = "9 / 8",
					targetElementName = "Image");
			}

			task ("Map Personal Web field of web content to Button") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Button",
					id = "link");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Personal Web");

				PageEditor.waitForAutoSave();
			}
		}

		task ("Then user is able to view email and telephone on copied content page") {
			task ("Publish the page") {
				JSONLayout.publishLayout(
					groupName = ${siteName},
					layoutName = "Contact");
			}

			task ("Copy the page and view it") {
				PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "Copy Page",
					pageName = "Contact");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				PortletEntry.inputName(name = "Copied Contact");

				Button.clickAdd();

				JSONLayout.publishLayout(
					groupName = ${siteName},
					layoutName = "Copied Contact");

				ContentPagesNavigator.openViewContentPage(
					pageName = "Copied Contact",
					siteName = ${siteName});
			}

			task ("View editable fields' link") {
				AssertVisible(
					key_append = "[normalize-space(text())='Heading Example']",
					key_url = "mailto:john.smith@liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "/*[contains(@data-lfr-editable-id,'image')]",
					key_url = "tel:1112223333",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "[contains(@class,'btn')]",
					key_url = "https://www.liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");
			}
		}
	}

}