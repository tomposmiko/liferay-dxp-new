definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Bug: LRAC-8038 | Automation ID: LRAC-11520 | Test Summary: Assert client does not send duplicated requests when the identity is the same (lowercase email string before hash)"
	@priority = "4"
	test CheckIdentityEventNotResendWhenEmailIsTheSame {
		property proxy.server.enabled = "true";

		task ("Connect AC to DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Navigate to the connected site") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Send the JavaScript with the e-mail in the browser console and get the userId") {
			ACUtils.executeJSInBrowserConsole(javaScriptCode = "Analytics.setIdentity({email: 'test@test.com'});");

			ACUtils.waitForSendingRequest();

			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Send the JavaScript with the same e-mail but in uppercase and get the userId") {
			ACUtils.executeJSInBrowserConsole(javaScriptCode = "Analytics.setIdentity({email: 'TEST@TEST.com'});");

			ACUtils.waitForSendingRequest();

			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare the two values") {
			TestUtils.assertEquals(
				actual = "${localStorageItem1}",
				expected = "${localStorageItem2}");
		}
	}

}