@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-96391."
	@priority = "5"
	test ExportImportSiteWithEmbeddedWCDInFragment {
		property portal.acceptance = "true";
		property testray.component.names = "Content Pages,Site Administration";

		JSONFragment.addFragmentCollection(
			groupName = "Test Site Name",
			name = "Collection Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		var fragmentHTML = '''<lfr-widget-web-content>''';

		var htmlSnippet = '''<lfr-''';

		FragmentsEditor.autocompleteFragmentHTML(
			autocompleteField = "lfr-widget-web-content",
			fragmentHTML = "${fragmentHTML}",
			htmlSnippet = "${htmlSnippet}");

		PortletEntry.publish();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Fragment Name");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		LAR.exportSiteCP(siteScopeName = "Test Site Name");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "New Site");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "New Site");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent New Content",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent New Title");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent New Content");

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "New Site");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@description = "This is a test for LPS-122296. Can export and import a site containing a content page with a mapped image."
	@priority = "5"
	test ExportImportSiteWithMappedImage {
		task ("Add a page based on Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map the image of Basic Document to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Document_1.jpg",
				navItem = "Documents and Media",
				uploadFileName = "Document_1.jpg");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Preview Image");

			PageEditor.waitForAutoSave();

			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "Document_1.jpg",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");

			PageEditor.clickPublish();
		}

		task ("Export the site") {
			LAR.openExportAdmin(siteScopeName = "test-site-name");

			LexiconEntry.gotoAdd();

			LAR.exportWithAssertionOnSuccess();

			LAR.downloadLar();
		}

		task ("Add a new site based on Blank Site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Import the lar into the new site") {
			var larFileName = LAR.getLarFileName();

			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Site Name");
		}

		task ("Assert the mapped image is shown in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "Document_1.jpg",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}
	}

}