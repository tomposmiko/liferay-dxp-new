@component-name = "portal-staging"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Staging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Staging Test Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@priority = "5"
	test ActivateStagingPageVersioningWithCustomDefaultLanguage {
		property test.name.skip.portal.instance = "Staging#ActivateStagingPageVersioningWithCustomDefaultLanguage";

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPrivatePage(pageName = "Private Staging Page");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.configureCurrentLanguagesCP(
			currentSiteLanguages = "English (United States)",
			defaultSiteLanguage = "English (United States)",
			displaySettings = "Display Settings"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);
	}

	@priority = "4"
	test DeletePublishTemplate {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings"
		);

		Site.disableRecycleBinCP();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.addPublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "Publish Template Name"
		);

		Staging.savePublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "Publish Template Name"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deletePublishTemplate(publishTemplateName = "Publish Template Name");
	}

	@priority = "3"
	test ModifyInitalPageVariationSetup {
		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.modifyVariation(enableOnPublicPages = "true");
	}

	@priority = "5"
	test NotStagedAssets {
		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(noContent = "true", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Staging.viewNotStagedAssetMessageOnStaging();

		Staging.viewAddButtonExists();

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		Staging.viewAddButtonExists();
	}

	@description = "This is a use case for LPS-82674."
	@priority = "4"
	test PublishDeleteWCFolderWithArticleViaAP {
		Navigator.openSiteURL(siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name"
		);

		WebContent.addArticleCP(
			webContentContent = "Webcontent Content",
			webContentTitle = "Webcontent Title"
		);

		WebContent.moveArticlesToFolderCP(
			folderName = "WC Folder Name",
			webContentArticlesList = "Webcontent Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Alert.viewInfoMessageSpecific(infoMessage = "There are no results.");

		Navigator.openSiteURL(siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "WC Folder Description",
			assetTitle = "WC Folder Name"
		);

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Webcontent Content",
			assetTitle = "Webcontent Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSiteURL(siteName = "Site Name");

		Alert.viewInfoMessageSpecific(infoMessage = "There are no results.");
	}

	@description = "This is a use case for LPS-80492."
	@priority = "4"
	test PublishRenamedTags {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "WebContent Content");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		WebContentNavigator.gotoEditPGViaWCD(
			menuItem = "Edit Web Content",
			webContentTitle = "WebContent Title"
		);

		WebContent.addTagPGViaWCD(tagName = "tag name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Categorization",
			panel = "Site Administration",
			portlet = "Tags"
		);

		Tag.viewCP(tagName = "tag name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Categorization",
			panel = "Site Administration",
			portlet = "Tags"
		);

		LexiconEntry.gotoEntryMenuItem(menuItem = "Edit", rowEntry = "tag name");

		PortletEntry.inputName(name = "tag name edit");

		PortletEntry.save();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			panel = "Site Administration",
			portlet = "Tags"
		);

		Tag.viewCP(tagName = "tag name edit");

		LexiconEntry.viewNoEntryMenu(rowEntry = "tag name edit");
	}

	@priority = "4"
	test PublishTemplateWithPages {
		SitePages.addPrivatePage(pageName = "Private Staging Page");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Staging.addPublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "Publish Template Name"
		);

		Staging.configurePublishToLive(checkPrivatePages = "Private Staging Page");

		Staging.configurePublishToLive(checkPublicPages = "Staging Test Page");
	}

	@priority = "4"
	test RemoveTagsFromPublishBlogAndDM {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Blogs");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		Panel.expandPanel(panel = "Categorization");

		BlogsEntry.addTag(tagName = "stagingtag");

		PortletEntry.publish();

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewTagPG(entryTitle = "Blogs Entry Title", tagName = "stagingtag");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.addPG(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			tagNameList = "stagingtag"
		);

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "DM Document Title");

		DMDocument.viewTag(tagName = "stagingtag");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite();

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewTagPG(entryTitle = "Blogs Entry Title", tagName = "stagingtag");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "DM Document Title");

		DMDocument.viewTag(tagName = "stagingtag");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Tag.tearDownCP(stagingSite = "true");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite();

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewNoTag(entryTitle = "Blogs Entry Title", tagName = "stagingtag");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "DM Document Title");

		DMDocument.viewNoTag(tagName = "stagingtag");
	}

	@priority = "3"
	test StagingAssetPublisher {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCommunityCP(
			siteName = "Community Site Name",
			uncheckPropagation = "true"
		);

		Navigator.gotoSitePage(pageName = "Home", siteName = "Community Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.openSiteURL(siteName = "Community Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Community Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Home",
			siteName = "Community Site Name"
		);

		Portlet.gotoPortletOptions(
			portletName = "Asset Publisher",
			portletOption = "Configuration"
		);

		AssetPublisherPortlet.viewAssetTypeNotAvailable(assetType = "Page Revision");

		Navigator.openSiteURL(siteName = "Community Site Name");

		Navigator.gotoStagedView();

		Pause(locator1 = "30000");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.deactivateStagingCP(siteName = "Community Site Name");

		Navigator.gotoSitePage(pageName = "Home", siteName = "Community Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Asset Publisher",
			portletOption = "Configuration"
		);

		AssetPublisherPortlet.viewAssetTypeNotAvailable(assetType = "Page Revision");
	}

	@priority = "4"
	test StagingCopyFromLive {
		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.viewSitePagesVariationPG(sitePagesVariationName = "Main Variation");

		Portlet.addPG(portletName = "Blogs");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Bodzavirágból, bodzavirágból hullik a, hullik a sárga virágpor.",
			entrySubtitle = "Nemes Nagy Ágnes",
			entryTitle = "Tavaszi felhők"
		);

		Pause(locator1 = "1000");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.markAsReadyForPublication();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Blogs.editEntryPG(
			entryContent = "Bodzavirágból, bodzavirágból hullik a, hullik a sárga virágpor.",
			entryContentEdit = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
			entrySubtitle = "Nemes Nagy Ágnes",
			entrySubtitleEdit = "Nemes Nagy Ágnes",
			entryTitle = "Tavaszi felhők",
			entryTitleEdit = "Tavaszi felhők"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.copyFromLive(portletName = "Blogs", portletOption = "Staging");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		BlogsEntry.viewEntry(
			entryContent = "Bodzavirágból, bodzavirágból hullik a, hullik a sárga virágpor.",
			entryTitle = "Tavaszi felhők"
		);
	}

	@priority = "5"
	test StagingDemoDocumentsAndMedia {
		property custom.properties = "default.layout.template.id=1_column";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Staging#StagingDemoDocumentsAndMedia";
		property testray.component.names = "Training";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "Service",
			configurationScope = "System Scope"
		);

		Type(
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "30000000",
			key_fieldLabel = "Maximum File Size"
		);

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		PortletEntry.save();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMFolder.addPG(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name"
		);

		DMFolder.addPG(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name Empty"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.add(
			dmMetadataSetFieldNames = "Text,Number",
			metadataSetName = "DM Metadata Set Name"
		);

		DDLDataDefinition.save();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Boolean",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMFolder.viewCP(dmFolderName = "DM Folder Name Empty");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMDocument.addDocumentTypePG(
			booleanField = "Boolean Field",
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.mp3",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			numberField = "1234",
			textField = "Text"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "DM Document Title");

		DMDocument.viewDocumentTypePG(booleanValue = "Yes");

		DMDocument.viewDocumentTypePG(numberValue = "1234");

		DMDocument.viewDocumentTypePG(textContent = "Text");
	}

	@description = "This is a use case for LPS-82431."
	@priority = "5"
	test StagingEditWebContents {
		Navigator.openSiteURL(siteName = "Site Name");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			ProductMenu.gotoPortlet(
				category = "Content",
				panel = "Site Administration",
				portlet = "Web Content"
			);

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "${webContentTitle}"
			);

			PortletEntry.publish();

			ProductMenu.gotoPortlet(
				category = "Content",
				panel = "Site Administration",
				portlet = "Web Content"
			);

			WebContent.viewTitle(webContentTitle = "${webContentTitle}");
		}

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			ProductMenu.gotoPortlet(
				category = "Content",
				panel = "Site Administration",
				portlet = "Web Content"
			);

			WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

			WebContent.editCP(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "${webContentTitle}",
				webContentTitleEdit = "${webContentTitle} Edit"
			);
		}
	}

	@priority = "3"
	test StagingKaleoPageRevision {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites"
		);

		Site.addCommunityCP(
			siteName = "Community Site Name",
			uncheckPropagation = "true"
		);

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name 1");

		Navigator.gotoSitePage(
			pageName = "Test Page Name 1",
			siteName = "Community Site Name"
		);

		Portlet.addPG(portletName = "Message Boards");

		ProductMenu.gotoSite(site = "Community Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name 2");

		Navigator.gotoSitePage(
			pageName = "Test Page Name 2",
			siteName = "Community Site Name"
		);

		Portlet.addPG(portletName = "Wiki");

		ProductMenu.gotoSite(site = "Community Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name 3");

		Navigator.gotoSitePage(
			pageName = "Test Page Name 3",
			siteName = "Community Site Name"
		);

		Portlet.addPG(portletName = "Language Selector");

		ProductMenu.gotoSite(site = "Community Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow"
		);

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Page Revision"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.viewDefaultMyWorkflowTasksCP();

		Navigator.openSiteURL(siteName = "Community Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Community Site Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.viewDefaultMyWorkflowTasksCP();

		Navigator.gotoSitePage(
			pageName = "Test Page Name 1",
			siteName = "Community Site Name"
		);

		Page.viewSpecificPG(
			pageNameList = "Test Page Name 1,Test Page Name 2,Test Page Name 3"
		);
	}

	@priority = "3"
	test StagingKaleoWebContentLinkingUnapprovedContent {
		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow"
		);

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Page Revision"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		Workflow.configureWorkflowViaFolderInfo(workflowDefinition = "Single Approver");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addWithWorkflowPGViaWCD(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		Staging.submitForPublicationPageRevision();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.viewAssignedToMyRolesTasksCP(
			workflowAssetTitle = "Web Content Title",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review"
		);

		Workflow.viewAssignedToMyRolesTasksCP(
			workflowAssetTitle = "Staging Test Page",
			workflowAssetType = "Page Revision",
			workflowTask = "Review"
		);

		User.logoutUserPG();

		Navigator.openSiteURL(siteName = "Organization Name");

		var key_portletTitleName = "Web Content Display";

		AssertElementNotPresent(locator1 = "Portlet#SPECIFIC_TITLE");

		User.loginPG(password = "test", userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		var key_portletTitleName = "Web Content Display";

		AssertElementNotPresent(locator1 = "Portlet#SPECIFIC_TITLE");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		AssertTextEquals(
			locator1 = "Message#WORKFLOW_UNAPPROVED",
			value1 = "Web Content Title is not approved."
		);
	}

	@priority = "5"
	test StagingMultipleDM {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.configurePage(
			columnName = "1 Column",
			pageName = "Staging Test Page",
			privacy = "Public Pages",
			sitePageType = "Widget Page"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMDocument.addMultiplePG(
			dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		for (var dmDocumentTitle : list "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt") {
			Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

			DMDocument.viewPG(dmDocumentTitle = "${dmDocumentTitle}");
		}

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		DMDocument.viewStagingDetailsPG();
	}

	@priority = "5"
	test StagingOnlyApprovedPublishToLive {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Staging Test Page 2");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		Navigator.gotoSitePage(pageName = "Staging Test Page 2", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		Workflow.configureWorkflowViaFolderInfo(workflowDefinition = "Single Approver");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		WebContent.addWithWorkflowPGViaWCD(
			webContentContent = "Web Content Content 1",
			webContentTitle = "Web Content Title 1"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page 2",
			siteName = "Site Name"
		);

		WebContent.addWithWorkflowPGViaWCD(
			webContentContent = "Web Content Content 2",
			webContentTitle = "Web Content Title 2"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Web Content Title 1",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review"
		);

		Workflow.approveTaskByActions(
			workflowAssetTitle = "Web Content Title 1",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		AssertTextEquals(
			locator1 = "WCD#WEB_CONTENT_CONTENT",
			value1 = "Web Content Content 1"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page 2",
			siteName = "Site Name"
		);

		AssertTextEquals(
			locator1 = "Message#ERROR_3",
			value1 = "Web Content Title 2 is not approved."
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.markAsReadyForPublication();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page 2",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		AssertTextEquals(
			locator1 = "WCD#WEB_CONTENT_CONTENT",
			value1 = "Web Content Content 1"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page 2", siteName = "Site Name");

		if (IsElementPresent(locator1 = "WCD#WEB_CONTENT_CONTENT")) {
			AssertTextNotEquals(
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Title 2"
			);
		}
		else {
			AssertElementNotPresent(locator1 = "WCD#WEB_CONTENT_CONTENT");
		}

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Web Content Title 2",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review"
		);

		Workflow.approveTaskByActions(
			workflowAssetTitle = "Web Content Title 2",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page 2",
			siteName = "Site Name"
		);

		Staging.markAsReadyForPublication();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page 2", siteName = "Site Name");

		AssertTextEquals(
			locator1 = "WCD#WEB_CONTENT_CONTENT",
			value1 = "Web Content Content 2"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoStagingSite();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "Web Content Title 2"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page 2",
			siteName = "Site Name"
		);

		WebContentDisplayPortlet.viewRecycleBinMessage(
			webContentTitle = "Web Content Title 2"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page 2", siteName = "Site Name");

		WebContentDisplayPortlet.viewRecycleBinMessage(
			webContentTitle = "Web Content Title 2"
		);
	}

	@description = "This is a use case for LPS-80494."
	@priority = "3"
	test StagingRemoteDMDocumentType {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteDMDocumentType";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Link to Page",
			dmDocumentTypeName = "DM Document Type Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Type Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Type Title",
			dmDocumentTypeName = "DM Document Type Name"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Type Title");
	}

	@priority = "3"
	test StagingRemoteDocumentSubtypeViaAP {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteDocumentSubtypeViaAP";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addDMMarketingBannerCP(
			bannerDescription = "Banner Description",
			bannerName = "Banner Name",
			businessGoal = "Customer Service",
			campaignTheme = "Making a Difference",
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			legalReview = "YES",
			marketingSelect = "Company Philosophy"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		AssetPublisherPortlet.configureAssetTypePG(
			assetSubtype = "Marketing Banner",
			selectedAsset = "Document"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "DM Document Title"
		);

		DMDocument.viewDMMarketingBannerPG(
			assetTitle = "DM Document Title",
			bannerDescription = "Banner Description",
			bannerName = "Banner Name",
			campaignTheme = "Making a Difference",
			legalReview = "Yes",
			marketingSelect = "Company Philosophy"
		);
	}

	@description = "This is a use case for LPS-72461."
	@priority = "5"
	test StagingRemoteLiveBlogsPG {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveBlogsPG";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Pause(locator1 = "5000");

		AssertConsoleTextNotPresent(value1 = "RuntimeException");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@description = "This is a use case for LPS-74206."
	@priority = "5"
	test StagingRemoteLiveBlogsWithWorkflow {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveBlogsWithWorkflow";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Workflow"
		);

		NavItem.gotoSchemes();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Blogs.addWithWorkflow(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs"
		);

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Click(locator1 = "Notifications#USER_BAR_BADGE_COUNT");

		Click(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT");

		AssertClick(
			locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
			value1 = "Test Test sent you a Blogs Entry for review in the workflow."
		);

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "My Workflow Tasks"
		);

		Workflow.approveTaskByActions(
			workflowActivityComment = "Process is approved",
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Pause(locator1 = "5000");

		AssertConsoleTextNotPresent(value1 = "RuntimeException");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);
	}

	@description = "This is a use case for LPS-72478."
	@priority = "5"
	test StagingRemoteLivePolls {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLivePolls";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Polls Display");

		Polls.addPollPG(
			pollsQuestion = "Test Remote Staging Poll Display",
			pollsQuestionChoiceA = "Yes",
			pollsQuestionChoiceB = "No",
			pollsQuestionTitle = "Remote Staging Polls Name"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Polls.selectPollPG(pollsQuestionTitle = "Remote Staging Polls Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Polls.viewPollPG(
			pollsQuestion = "Test Remote Staging Poll Display",
			pollsQuestionChoiceList = "Yes,No"
		);

		Polls.votePollPG(pollsQuestionChoice = "Yes");

		Polls.viewVotedPollPG(
			pollsQuestionChoice = "Yes",
			pollsQuestionTotalVotes = "1",
			pollsQuestionVoteCount = "1",
			pollsQuestionVotePercent = "100%"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		Polls.viewVotedPollPG(
			pollsQuestionChoice = "Yes",
			pollsQuestionTotalVotes = "1",
			pollsQuestionVoteCount = "1",
			pollsQuestionVotePercent = "100%"
		);
	}

	@priority = "4"
	test StagingRemoteLiveWebContent {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveWebContent";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Structure Description",
			structureName = "Structure Name"
		);

		for (var structureFieldName : list "Text,Text Box") {
			DynamicDataMapping.addField(
				field = "${structureFieldName}",
				fieldFieldLabel = "${structureFieldName}",
				fieldName = StringUtil.replace("${structureFieldName}", " ", "")
			);
		}

		WebContentStructures.saveCP(structureName = "Structure Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "Structure Name",
			templateDescription = "Template Description",
			templateFieldNames = "Text,Text Box",
			templateName = "Template Name"
		);

		Navigator.openURL();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Structure Name");

		WebContent.addWithStructureCP(
			structureName = "Structure Name",
			templateName = "Template Name",
			webContentText = "Staging Web Content Text",
			webContentTextBox = "Staging Web Content Body",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		var dateRangeEndDate = '''1/2''';

		var dateRangeStartDate = '''1/1''';

		Staging.setContentDateRange(
			dateRangeEndDate = "${dateRangeEndDate}",
			dateRangeStartDate = "${dateRangeStartDate}"
		);

		var key_contentName = "Web Content";

		AssertElementNotPresent(
			locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX"
		);

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		ProductMenu.gotoStagingSite();

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(contentDateRange = "All");

		Staging.publishToLive();

		ProductMenu.gotoSite(site = "Remote Site");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		var key_webContentTitle = "Web Content Title";

		AssertTextEquals.assertPartialText(
			locator1 = "WC#ENTRY_LIST_TITLE_ON_LIVE",
			value1 = "Web Content Title"
		);

		NavItem.gotoStructures();

		WebContentStructures.viewCP(
			structureDescription = "Structure Description",
			structureName = "Structure Name"
		);
	}

	@description = "This is a use case for LPS-82839."
	@priority = "5"
	test StagingRemoteLiveWebContentViaPortletCP {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveWebContentCP";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		Staging.publishToLiveNowViaPortletCP();

		ProductMenu.gotoSite(site = "Remote Site");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.viewTitle(onLive = "true", webContentTitle = "Web Content Title");
	}

	@description = "This is a use case for LPS-81950."
	@priority = "5"
	test StagingRemoteLiveWebContentViaPortletPG {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveWebContentViaPortletPG";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Web Content Staging Page");

		Navigator.gotoSitePage(
			pageName = "Web Content Staging Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Web Content Display");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Staging"
		);

		IFrame.selectConfigurationFrame();

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#STAGING_PUBLISH_PAGE_FIRST_MESSAGE",
			value1 = "This widget is placed in a page that does not exist in the live site. Publish the page first."
		);

		AssertElementNotPresent(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");

		Navigator.gotoSitePage(
			pageName = "Web Content Staging Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Web Content Staging Page",
			siteName = "Site Name"
		);

		WebContent.addPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title"
		);

		Navigator.gotoSitePage(
			pageName = "Web Content Staging Page",
			siteName = "Site Name"
		);

		Staging.publishToLiveNowViaPortletPG();

		Navigator.gotoSitePage(
			pageName = "Web Content Staging Page",
			siteName = "Remote Site"
		);

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");
	}

	@description = "This is a use case for LPS-81953"
	@priority = "3"
	test StagingRemoteLiveWebContentWithManualChosenID {
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property test.name.skip.portal.instance = "Staging#StagingRemoteLiveWebContentWithManualChosenID";

		Staging.remoteStagingSetUp(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Administration",
			configurationScope = "System Scope"
		);

		FormFields.disableCheckbox(fieldName = "journalArticleForceAutogenerateId");

		SystemSettings.saveConfiguration();

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentId = "12345",
			webContentTitle = "WC WebContent Title"
		);

		PortletEntry.publish();

		ProductMenu.gotoSite(site = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Remote Site");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		AssertTextEquals(
			locator1 = "WC#ENTRY_TABLE_ID",
			value1 = "12345",
			key_webContentTitle = "WC WebContent Title"
		);
	}

	@priority = "4"
	test StagingWithPublishTemplate {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page 1");

		SitePages.addPublicPage(pageName = "Test Page 2");

		SitePages.addPublicPage(pageName = "Test Page 3");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(pageName = "Test Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title"
		);

		Navigator.gotoStagedSitePage(pageName = "Test Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.gotoStagedSitePage(pageName = "Test Page 1", siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		Navigator.gotoStagedSitePage(pageName = "Test Page 2", siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoStagedSitePage(pageName = "Test Page 3", siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoStagedSitePage(pageName = "Test Page 1", siteName = "Site Name");

		WebContent.addPGViaWCD(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		ProductMenu.gotoSite(site = "Site Name");

		Navigator.gotoStagedView();

		Pause(locator1 = "30000");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.addPublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "Publish Template Name"
		);

		Staging.configurePublishToLive(
			applicationName = "Documents and Media",
			checkPageName = "Test Page 1,Test Page 2",
			uncheckContentNameList = "Blogs"
		);

		Staging.savePublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "Publish Template Name"
		);

		Navigator.gotoStagedSitePage(pageName = "Test Page 1", siteName = "Site Name");

		ProductMenu.gotoSite(site = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLivePublishTemplate(
			publishTemplateName = "Publish Template Name",
			siteName = "Site Name"
		);

		Navigator.gotoSitePage(pageName = "Test Page 1", siteName = "Site Name");

		Page.viewSpecificPG(pageNameList = "Test Page 1,Test Page 2");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		Portlet.viewSpecificPG(portletName = "Blogs");

		Navigator.gotoSitePage(pageName = "Test Page 2", siteName = "Site Name");

		WebContent.viewPGViaAP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		Navigator.gotoSitePage(pageName = "Test Page 2", siteName = "Site Name");

		DMDocument.viewPGViaAP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title"
		);
	}

	@priority = "4"
	test ViewHistoryVersionWithDeletedUser {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			password = "password",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Members",
			panel = "Site Administration",
			portlet = "Site Memberships"
		);

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.assignSiteRoleCP(
			siteRoleName = "Site Administrator",
			userScreenName = "usersn"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name"
		);

		Staging.addPageVariationPG(pageVariationName = "Test Page Variation Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name"
		);

		Click(locator1 = "Icon#HISTORY_VERTICAL_ELLIPSIS");

		Click(locator1 = "Staging#HISTORY_BUTTON");

		SelectFrame(locator1 = "IFrame#METADATA_SETS_IFRAME");

		var historyVersion = selenium.getText("Staging#HISTORY_VERSION");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.deactivateCP(userFirstName = "userfn");

		User.deleteCP();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name"
		);

		Staging.changePageVariationInHistory(
			pageVariationName = "Main Variation",
			pageVariationNameMenulistName = "Test Page Variation Name"
		);

		Staging.viewHistoryVersionPG(historyVersion = "${historyVersion}");
	}

	@priority = "4"
	test ViewPageOrderWithStaging {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test Page 1");

		SitePages.addPublicPage(pageName = "Test Page 2");

		Page.viewPagesOrder(
			pageName1 = "Staging Test Page",
			pageName2 = "Test Page 1",
			pageName3 = "Test Page 2"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		Page.viewPagesOrder(
			pageName1 = "Staging Test Page",
			pageName2 = "Test Page 1",
			pageName3 = "Test Page 2"
		);
	}

	@description = "This is a use case for LPS-82355."
	@priority = "5"
	test ViewPublishDocumentTypeWithConfiguredAssetType {
		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		DMDocument.viewPGViaAP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name"
		);

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		AssetPublisherPortlet.configureAssetTypePG(
			assetSubtype = "DM Document Type Name",
			selectedAsset = "Document"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentType();

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		AssertConsoleTextNotPresent(
			value1 = "com.liferay.exportimport.kernel.exception.MissingReferenceException"
		);
	}

	@priority = "4"
	test ViewPublishedContentAfterStagingUndo {
		property portal.release = "false";

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(
			pageVersioningEnabled = "true",
			siteName = "Site Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Portlet.addPG(portletName = "Calendar");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Portlet.addPG(portletName = "Wiki");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Portlet.addPG(portletName = "Documents and Media");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Portlet.addPG(portletName = "Bookmarks");

		Staging.undoStagingPageVersioningPG();

		Portlet.viewNoSpecificPG(portletName = "Bookmarks");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		for (var publishedPortlet : list "Calendar,Wiki,Documents and Media") {
			Portlet.viewPG(portletName = "${publishedPortlet}");
		}
	}

	@description = "This is a use case for LPS-82688."
	@priority = "3"
	test ViewPublishWCWithConfiguredCategoriesFilter {
		Navigator.openSiteURL(siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.addArticleCP(
			webContentContent = "Web Content Without Category",
			webContentTitle = "Web Content Title 1"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content Without Category",
			assetTitle = "Web Content Title 1"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Categorization",
			panel = "Site Administration",
			portlet = "Categories"
		);

		Vocabulary.addCP(vocabularyName = "Vocabulary Name");

		Category.addCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.addArticleCP(
			webContentContent = "Web Content With Category",
			webContentTitle = "Web Content Title 2"
		);

		WebContent.viewVersion(version = "1.0", webContentTitle = "Web Content Title 2");

		WebContent.addWithCategoryCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name",
			webContentContent = "Web Content With Category",
			webContentTitle = "Web Content Title 2"
		);

		WebContent.viewVersion(version = "1.1", webContentTitle = "Web Content Title 2");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		AssetPublisherPortlet.configureCategoriesFilterPG(
			categoryName = "Category Name",
			queryAndOperator = "Any"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		AssetPublisherPortlet.viewAssetNotPresentPG(
			assetContent = "Web Content Without Category",
			assetTitle = "Web Content Title 1"
		);

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content With Category",
			assetTitle = "Web Content Title 2"
		);

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(pageName = "Staging Test Page", siteName = "Site Name");

		AssetPublisherPortlet.viewAssetNotPresentPG(
			assetContent = "Web Content Without Category",
			assetTitle = "Web Content Title 1"
		);

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "Web Content With Category",
			assetTitle = "Web Content Title 2"
		);
	}

	@description = "This is a use case for LPS-77935."
	@priority = "4"
	test ViewSimplePublicationAfterDeleteDocumentInGlobal {
		ProductMenu.gotoSite(site = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.jpg",
			dmDocumentTitle = "Document_2.jpg"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addWithDocumentCP(
			dmDocumentTitle = "Document_2.jpg",
			siteName = "Global",
			webContentTitle = "Document_2.jpg"
		);

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		ProductMenu.gotoSite(site = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		Staging.gotoPublishToLive();

		AssertElementNotPresent(
			locator1 = "StagingPublishToLive#SIMPLE_PUBLICATION_DELETION",
			key_itemName = "Documents and Media"
		);
	}

	@description = "This is a use case for LPS-76633."
	@priority = "5"
	test ViewSingleAssetPublication {
		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging"
		);

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoStagingSite();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title"
		);

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Bookmarks"
		);

		Bookmark.addCP(
			bookmarkDescription = "This is a test bookmark!",
			bookmarkName = "Test Bookmark",
			bookmarkURL = "https://www.liferay.com"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoStagingSite();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title"
		);

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		Staging.publishViaSAP(
			assetTitle = "Web Content Title",
			confirmMessage = "Are you sure you want to publish the selected web content?"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Bookmarks"
		);

		Staging.publishViaSAP(
			assetTitle = "Test Bookmark",
			confirmMessage = "Are you sure you want to publish to live?"
		);

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		Staging.publishViaSAP(
			assetTitle = "DM Document Title",
			confirmMessage = "Are you sure you want to publish the selected document?"
		);

		ProductMenu.gotoSite(site = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content"
		);

		WebContent.viewTitle(onLive = "true", webContentTitle = "Web Content Title");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Bookmarks"
		);

		Bookmark.viewBookmark(
			bookmarkName = "Test Bookmark",
			bookmarkURL = "https://www.liferay.com"
		);

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media"
		);

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");
	}
}