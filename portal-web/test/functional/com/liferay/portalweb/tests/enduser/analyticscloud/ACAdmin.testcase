@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Launch AC") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			Open(locator1 = "${analyticsCloudURL}");

			ACLogin.loginAs(emailAddress = "test@liferay.com");

			TestCase.setUpPortalInstance();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Bug: LRAC-10001 | Automation ID: LRAC-10738 | Test Summary: Make sure the AC user account name is correct after creation in the admin part of the AC"
	@priority = "3"
	test CheckUserAccountNameWithSpecialChars {
		var userFirstName = "acção";
		var userLastName = "acé";
		var userScreenName = "ac.ac";
		var userEmailAddress = "ac@liferay.com";

		task ("Get the URL link") {
			var currentURL = Navigator.getCurrentURL();
		}

		task ("Navigate to the AC Admin page") {
			Navigator.openSpecificURL(url = "${currentURL}admin");
		}

		task ("Navigate to users page") {
			ProductMenuHelper.expandPanel(panel = "control panel");

			ProductMenuHelper.expandCategory(category = "Users");

			ProductMenuHelper.gotoPortlet(portlet = "Users and Organizations");
		}

		task ("Create a new user with special chars") {
			LexiconEntry.gotoAdd();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
				value1 = "${userScreenName}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
				value1 = "${userEmailAddress}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "${userFirstName}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
				value1 = "${userLastName}");

			AssertClick(
				locator1 = "Button#SUBMIT",
				value1 = "Save");
		}

		task ("Go to user data page") {
			UserNavigator.gotoUser(userScreenName = "${userScreenName}");
		}

		task ("Check that the page title is correct with the username with special chars") {
			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Edit User ${userFirstName} ${userLastName}");
		}
	}

	@description = "Bug: LRAC-11339 | Automation ID: LRAC-11364 | Test Summary: A new user created in the admin page can not access that page but the user Test Test can"
	@priority = "5"
	test NewUserCanNotAccessAdminPage {
		var userFirstName = "ac";
		var userLastName = "ac";
		var userScreenName = "acnonadmin";
		var userEmailAddress = "acnonadmin@liferay.com";

		task ("Get the URL link") {
			var currentURL = Navigator.getCurrentURL();
		}

		task ("Navigate to the AC Admin page") {
			Navigator.openSpecificURL(url = "${currentURL}admin");
		}

		task ("Go to control panel > Users > Users and Organizations") {
			ProductMenuHelper.expandPanel(panel = "control panel");

			ProductMenuHelper.expandCategory(category = "Users");

			ProductMenuHelper.gotoPortlet(portlet = "Users and Organizations");
		}

		task ("Create a new user") {
			LexiconEntry.gotoAdd();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
				value1 = "${userScreenName}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
				value1 = "${userEmailAddress}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "${userFirstName}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
				value1 = "${userLastName}");

			AssertClick(
				locator1 = "Button#SUBMIT",
				value1 = "Save");

			UserNavigator.gotoUser(userScreenName = "${userScreenName}");

			UserNavigator.gotoPassword();

			User.resetPassword();
		}

		task ("Log out the current user and login with the new user") {
			ProductMenuHelper.expandPanel(panel = "user");

			Click(locator1 = "ProductMenu#USER_SIGNOUT");

			Navigator.openSpecificURL(url = "${currentURL}admin");

			ACLogin.loginAs(
				emailAddress = "${userEmailAddress}",
				password = "test");

			Navigator.openSpecificURL(url = "${currentURL}admin");
		}

		task ("Redefine the password of the new user") {
			User.resetPassword(newPassword = "test1");
		}

		task ("Assert that the user does not have permission to access the admin page") {
			AssertTextEquals(
				locator1 = "Portlet#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "Bug: LRAC-11339 | Automation ID: LRAC-11365 | Test Summary: A new user created in the admin page can be invited to the workspace and see the data, the same user, now with admin permission, also can see the data"
	@priority = "5"
	test NewUserIndependentOfRoleCanSeeDataInTheWorkspace {
		var userFirstName = "ac";
		var userLastName = "ac";
		var userScreenName = "acworkspace";
		var userEmailAddress = "acworkspace@liferay.com";
		var currentURL = Navigator.getCurrentURL();

		task ("Connect AC and DXP and generate some events") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			ACUtils.createFormAndAddToPage();

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.navigateToSitePage(
				actionType = "Submit Form",
				pageName = "AC Page",
				siteName = "Site Name",
				submitText = "Testing");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Navigate to the AC Admin page") {
			ACUtils.launchAC();

			Navigator.openSpecificURL(url = "${currentURL}admin");
		}

		task ("Go to control panel > Users > Users and Organizations") {
			ProductMenuHelper.expandPanel(panel = "control panel");

			ProductMenuHelper.expandCategory(category = "Users");

			ProductMenuHelper.gotoPortlet(portlet = "Users and Organizations");
		}

		task ("Create a new user") {
			LexiconEntry.gotoAdd();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
				value1 = "${userScreenName}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
				value1 = "${userEmailAddress}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "${userFirstName}");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
				value1 = "${userLastName}");

			AssertClick(
				locator1 = "Button#SUBMIT",
				value1 = "Save");

			UserNavigator.gotoUser(userScreenName = "${userScreenName}");

			UserNavigator.gotoPassword();

			User.resetPassword();
		}

		task ("Go to AC with Test Test > Settings > User Management > Invite the new user to the workspace") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();

			ACSettings.addUser(userInvite = "${userEmailAddress}");
		}

		task ("Go to AC with the new user and assert that the user can see the data") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "${userEmailAddress}",
				password = "test");

			Navigator.openSpecificURL(url = "${currentURL}");

			ACWorkspace.openWorkspace();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToSites();

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Unique Visitors",
				metricValue = "1");
		}

		task ("Go to admin with Test Test and give administrator permission to the new user") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "test@liferay.com",
				password = "test");

			Navigator.openSpecificURL(url = "${currentURL}admin");

			ProductMenuHelper.expandPanel(panel = "control panel");

			ProductMenuHelper.expandCategory(category = "Users");

			ProductMenuHelper.gotoPortlet(portlet = "Users and Organizations");

			User.assignRegularRoleCP(
				roleTitle = "Administrator",
				userScreenName = "${userScreenName}");
		}

		task ("Go to AC with the new user and assert that user can see the data") {
			ProductMenuHelper.expandPanel(panel = "user");

			Click(locator1 = "ProductMenu#USER_SIGNOUT");

			ACLogin.loginAs(
				emailAddress = "${userEmailAddress}",
				password = "test");

			Navigator.openSpecificURL(url = "${currentURL}");

			ACWorkspace.openWorkspace();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToSites();

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Unique Visitors",
				metricValue = "1");
		}
	}

}