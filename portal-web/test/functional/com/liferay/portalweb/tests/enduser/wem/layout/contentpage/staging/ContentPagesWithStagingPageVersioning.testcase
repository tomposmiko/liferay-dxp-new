@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Activate local live staging with page versioning enabled") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name");

			Staging.activateStagingCP(
				pageVersioningEnabled = "true",
				siteName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name-staging");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name-staging");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "With page versioning enabled, content pages only appear in live view after being published and should appear properly."
	@priority = "5"
	test PublishContentPage {
		task ("Navigate to the content page in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging/test-content-page-name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the URL of what the content page should be in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the content page does not yet exist in the live site") {
			AssertTextPresent(value1 = "The requested resource could not be found.");
		}

		task ("Publish the content page to live") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging/test-content-page-name");

			Staging.markAsReadyForPublication();

			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("Navigate to the content page in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}
	}

}