@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@description = "Get structured content folder with erc of parent folder in an asset library"
	@priority = "5"
	test CanGetParentStructuredContentFolderInAssetLibraryByErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("Given a subfolder with another custom erc is create with a POST request") {
			var folderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = "${response}");

			HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				externalReferenceCode = "subfolder-erc",
				name = "Sub Folder",
				parentStructuredContentFolderId = "${folderId}");
		}

		task ("When I make a GET request by the erc of the parent structured content folder") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc");
		}

		task ("Then I receive a correct body response with numberOfStructuredContentFolders is 1") {
			HeadlessWebcontentFolderAPI.assetProperNumberOfStructuredContentFolders(
				expectedNumbers = "1",
				responseToParse = "${response}");
		}
	}

	@description = "Get structured content folder in asset library by existing custom erc"
	@priority = "5"
	test CanGetStructuredContentFolderInAssetLibraryByExistingCustomErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When I make a GET request by assetLibraryId and erc") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc");
		}

		task ("Then I receive a correct body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "erc",
				responseToParse = "${response}");
		}
	}

	@description = "Get structured content folder in asset library by existing uuid as erc"
	@priority = "5"
	test CanGetStructuredContentFolderInAssetLibraryByExistingDefaultErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder without a custom erc is created with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				name = "Test Folder");
		}

		task ("WWhen I make a GET request by erc and set erc value to the uuid of previous created structured content folder") {
			var structuredContentId = HeadlessWebcontentFolderAPI.getUuidOfCreatedStructuredContentFolder(responseToParse = "${response}");

			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "${structuredContentId}");
		}

		task ("Then I receive a correct body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "${structuredContentId}",
				responseToParse = "${response}");
		}
	}

	@description = "Get subfolder of structured content folder with erc in an asset library"
	@priority = "5"
	test CanGetSubStructuredContentFolderInAssetLibraryWithErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with a POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("Given a subfolder with another custom erc is create with a POST request") {
			var folderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = "${response}");

			HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				externalReferenceCode = "subfolder-erc",
				name = "Sub Folder",
				parentStructuredContentFolderId = "${folderId}");
		}

		task ("When I make a GET request by the erc of subfolder") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "subfolder-erc");
		}

		task ("Then I receive a correct body response with id of parent structured content folder") {
			var parentFolderIdInResponse = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.parentStructuredContentFolderId",
				responseToParse = "${response}");

			TestUtils.assertEquals(
				actual = "${parentFolderIdInResponse}",
				expected = "${folderId}");
		}

		task ("And Then numberOfStructuredContentFolders in body response is 0") {
			HeadlessWebcontentFolderAPI.assetProperNumberOfStructuredContentFolders(
				expectedNumbers = "0",
				responseToParse = "${response}");
		}
	}

	@description = "Structured content folder is not able to create with existing erc in asset library"
	@priority = "5"
	test CannotCreateStructuredContentFolderInAssetLibraryWithExistingErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with POST request I create a structured content folder with an already existing custom erc") {
			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Second Folder");
		}

		task ("Then I receive an error code response about duplicate folder erc") {
			TestUtils.assertPartialEquals(
				actual = "${response}",
				expected = "Duplicate journal folder external reference code erc");
		}

		task ("And Then another folder with same erc is not being created") {
			HeadlessWebcontentFolderAPI.assertProperTotalCountOfStructuredContentFoldersInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				expectedStructuredContentFolderTotalCount = "0",
				filterValue = "name%20eq%20%27Second%20Folder%27");
		}
	}

	@description = "Unable to get structured content folder by nonexistent assetLibraryId"
	@priority = "4"
	test CanReturnErrorWithGetStructuredContentFolderInAssetLibraryByNonexistentAssetLibraryId {
		property portal.acceptance = "true";

		task ("When I make a GET request by non-existent assetLibraryID and a erc") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "nonexistentId",
				externalReferenceCode = "erc");
		}

		task ("Then I receive not found error response") {
			TestUtils.assertPartialEquals(
				actual = "${response}",
				expected = "NOT_FOUND");
		}

		task ("And Then I receive error message in server console") {
			AssertConsoleTextPresent(value1 = "Unable to get a valid asset library with ID nonexistentId");
		}
	}

	@description = "Unable to get structured content folder by nonexistent erc"
	@priority = "4"
	test CanReturnErrorWithGetStructuredContentFolderInAssetLibraryByNonexistentErc {
		property portal.acceptance = "true";

		task ("When I make a GET request by assetLibraryID and non-existent erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "nonexistent-erc");
		}

		task ("Then I receive error message in response") {
			TestUtils.assertPartialEquals(
				actual = "${response}",
				expected = "No JournalFolder exists with the key");
		}
	}

	@description = "Structured content folder is created with custom erc in an asset library"
	@priority = "5"
	test StructuredContentFolderIsCreatedInAssetLibraryWithCustomErc {
		property portal.acceptance = "true";

		task ("When with POST request I create a structured content folder without a custom erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("Then a new folder is being created with the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "erc",
				responseToParse = "${response}");
		}
	}

	@description = "Structured content folder is created in an asset library with erc equals to uuid by default"
	@priority = "5"
	test StructuredContentFolderIsCreatedInAssetLibraryWithErcByDefault {
		property portal.acceptance = "true";

		task ("When with POST request I create a structured content folder without a custom erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				name = "Test Folder");
		}

		task ("Then a new folder is being created with the erc value equals to the uuid in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(responseToParse = "${response}");
		}
	}

	@description = "Sub folder is created with a custom erc in structured content folder in asset library"
	@priority = "5"
	test SubfolderIsCreatedInStructuredContentFolderInAssetLibraryWithCustomErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with POST request I create a child folder with another custom erc") {
			var folderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = "${response}");

			var response = HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				externalReferenceCode = "subfolder-erc",
				name = "Sub Folder",
				parentStructuredContentFolderId = "${folderId}");
		}

		task ("Then I can see the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "subfolder-erc",
				responseToParse = "${response}");
		}

		task ("And Then a child folder is being created properly") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc");

			HeadlessWebcontentFolderAPI.assetProperNumberOfStructuredContentFolders(
				expectedNumbers = "1",
				responseToParse = "${response}");
		}
	}

	@description = "Sub folder is created with erc equals to uuid by default in structured content folder in asset library"
	@priority = "5"
	test SubfolderIsCreatedInStructuredContentInAssetLibraryWithErcByDefault {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with POST request I create a child folder without custom erc") {
			var folderId = HeadlessWebcontentFolderAPI.getElementOfCreatedStructuredContentFolder(
				element = "$.id",
				responseToParse = "${response}");

			var response = HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				name = "Sub Folder",
				parentStructuredContentFolderId = "${folderId}");
		}

		task ("Then I can see the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(responseToParse = "${response}");
		}

		task ("And Then a child folder is being created properly") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc");

			HeadlessWebcontentFolderAPI.assetProperNumberOfStructuredContentFolders(
				expectedNumbers = "1",
				responseToParse = "${response}");
		}
	}

}