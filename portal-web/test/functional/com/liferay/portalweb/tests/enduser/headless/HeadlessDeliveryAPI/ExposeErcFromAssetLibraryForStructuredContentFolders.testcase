@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@description = "Structured content folder is created with custom erc in an asset library"
	@priority = "5"
	test StructuredContentFolderIsCreatedInAssetLibraryWithCustomErc {
		property portal.acceptance = "true";

		task ("When with POST request I create a structured content folder without a custom erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("Then a new folder is being created with the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "erc",
				responseToParse = "${response}");
		}
	}

	@description = "Structured content folder is created in an asset library with erc equals to uuid by default"
	@priority = "5"
	test StructuredContentFolderIsCreatedInAssetLibraryWithErcByDefault {
		property portal.acceptance = "true";

		task ("When with POST request I create a structured content folder without a custom erc") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				name = "Test Folder");
		}

		task ("Then a new folder is being created with the erc value equals to the uuid in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(responseToParse = "${response}");
		}
	}

	@description = "Sub folder is created with a custom erc in structured content folder in asset library"
	@priority = "5"
	test SubfolderIsCreatedInStructuredContentFolderInAssetLibraryWithCustomErc {
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with POST request I create a child folder with another custom erc") {
			var folderId = HeadlessWebcontentFolderAPI.getIdOfCreateStructuredContentFolder(responseToParse = "${response}");

			var response = HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				externalReferenceCode = "subfolder-erc",
				name = "Sub Folder",
				parentStructuredContentFolderId = "${folderId}");
		}

		task ("Then I can see the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedExternalReferenceCodeValue = "subfolder-erc",
				responseToParse = "${response}");
		}

		task ("And Then a child folder is being created properly") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc");

			HeadlessWebcontentFolderAPI.assetProperNumberOfStructuredContentFolders(
				expectedNumbers = "1",
				responseToParse = "${response}");
		}
	}

	@description = "Sub folder is created with erc equals to uuid by default in structured content folder in asset library"
	@priority = "5"
	test SubfolderIsCreatedInStructuredContentInAssetLibraryWithErcByDefault {
		property database.types = "mysql";
		property portal.acceptance = "true";

		task ("Given a structured content folder with a custom erc is created with POST request") {
			var assetLibraryId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var response = HeadlessWebcontentFolderAPI.createStructuredContentFolderInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc",
				name = "Test Folder");
		}

		task ("When with POST request I create a child folder without custom erc") {
			var folderId = HeadlessWebcontentFolderAPI.getIdOfCreateStructuredContentFolder(responseToParse = "${response}");

			var response = HeadlessWebcontentFolderAPI.createSubfolderInStructuredContentFolder(
				name = "Sub Folder",
				parentStructuredContentFolderId = "${folderId}");
		}

		task ("Then I can see the custom erc in the body response") {
			HeadlessWebcontentFolderAPI.assertExternalReferenceCodeWithCorrectValue(responseToParse = "${response}");
		}

		task ("And Then a child folder is being created properly") {
			var response = HeadlessWebcontentFolderAPI.getStructuredContentFoldersByErcInAssetLibrary(
				assetLibraryId = "${assetLibraryId}",
				externalReferenceCode = "erc");

			HeadlessWebcontentFolderAPI.assetProperNumberOfStructuredContentFolders(
				expectedNumbers = "1",
				responseToParse = "${response}");
		}
	}

}