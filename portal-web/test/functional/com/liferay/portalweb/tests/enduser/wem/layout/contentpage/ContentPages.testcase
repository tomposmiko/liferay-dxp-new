@component-name = "portal-wcm"
definition {

	property osgi.module.configuration.file.names = "com.liferay.layout.content.page.editor.web.internal.configuration.ContentsContentPageEditorSidebarPanelConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a content page with fragments."
	@priority = "5"
	test AddContentPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Button fragment is present") {
			AssertVisible(
				key_content = "Submit",
				key_fragmentClass = "footer",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Cancel",
				key_fragmentClass = "footer",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Submit and Cancel buttons in the Button fragment is present") {
			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}
		}
	}

	@description = "Create a content page from a page template with fragments."
	@priority = "5"
	test AddContentPageFromPageTemplate {
		property portal.acceptance = "true";

		task ("Add a page template collection") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");
		}

		task ("Add a page template with a Button fragment") {
			PageTemplatesAdmin.addPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button");

			Button.clickPublish();
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Content Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the Button fragment is present and the buttons work") {
			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}

			Button.clickNoError(button = "Submit");

			AssertConfirm(value1 = "Form submitted");
		}
	}

	@description = "This is a test for LPS-95042. Liferay should come out of the box with fragments."
	@priority = "5"
	test AddContentPageWithOOTBFragment {
		property portal.acceptance = "true";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the Banner Center fragment is on the page") {
			AssertVisible(locator1 = "//section//div[contains(@class,'banner')]");
		}
	}

	@description = "This is a test for LPS-102887. A user can access content in a web content display widget through content panel"
	@priority = "5"
	test CanAccessContentPanel {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title");

		Refresh();

		PageEditor.gotoTab(tabName = "Contents");

		LexiconEntry.gotoFragmentEllipsisMenuItem(menuItem = "Edit");

		AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");
	}

	@description = "Users can only edit content pages in edit mode."
	@priority = "5"
	test CannotEditInViewMode {
		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the page cannot be edited in 'View Mode' by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Assert the content page can be edited in 'Edit Mode' by asserting the fragments side bar is present") {
			AssertVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
		}

		task ("Navigate back to the content page") {
			PageEditor.clickBack();
		}

		task ("Assert the page cannot be edited by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
		}
	}

	@description = "This is a test for LPS-91000 and LPS-95002. User can edit number of columns a section has as well as padding options."
	@priority = "5"
	test ChangeLayoutSectionProperties {
		property portal.acceptance = "true";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a 2 column layout") {
			PageEditor.addLayoutSection(columnCount = "2");
		}

		task ("Assert the layout has exactly 2 columns") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link-list')]//div[contains(@class,'col-md-6')][1]");
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link-list')]//div[contains(@class,'col-md-6')][2]");
			AssertElementNotPresent(locator1 = "//section[contains(@class,'fragment-entry-link-list')]//div[contains(@class,'col-md-6')][3]");
		}

		task ("Assert the layout by default has padding x1") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link')]//div[contains(@class,'container py-3')]");
		}

		task ("Assert the layout by default has space between columns") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link')]//div[contains(@class,'row')][not(contains(@class,'no-gutters'))]");
		}

		task ("Edit the layout's spacing properties") {
			PageEditor.editLayoutSectionSpacing(
				numberOfColumns = "3",
				paddingH = "10",
				paddingV = "4",
				spaceBetweenColumns = "false");
		}

		task ("Assert the layout now has exactly 2 columns") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link-list')]//div[contains(@class,'col-md-4')][1]");
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link-list')]//div[contains(@class,'col-md-4')][2]");
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link-list')]//div[contains(@class,'col-md-4')][3]");
			AssertElementNotPresent(locator1 = "//section[contains(@class,'fragment-entry-link')]//div[contains(@class,'col-md-4')][4]");
		}

		task ("Assert the layout now has vertical padding x4") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link')]//div[contains(@class,'py-5')]");
		}

		task ("Assert the layout now has horizontal padding x10") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link')]//div[contains(@class,'px-8')]");
		}

		task ("Assert the layout now has no space between columns") {
			AssertVisible(locator1 = "//section[contains(@class,'fragment-entry-link')]//div[contains(@class,'row')][contains(@class,'no-gutters')]");
		}
	}

	@description = "This is a test for LPS-78726. Discarding a draft will revert a content page back to its most recent published version."
	@priority = "5"
	test DiscardContentPageDraft {
		property portal.acceptance = "true";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Assert the Discard Draft button starts off disabled but Publish button starts off enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Discard the draft") {
			PageEditor.clickDiscardDraft();
		}

		task ("Assert the Title fragment is no longer present") {
			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Discard Draft button is now disabled but Publish button still is enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Assert the Discard Draft and Publish buttons are now enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_ENABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Assert the Discard Draft button is disabled but Publish button is enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Edit the Title fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Title",
				id = "title",
				text = "New editable fragment text");
		}

		task ("Assert the Discard Draft and Publish buttons are now enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_ENABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Discard the draft") {
			PageEditor.clickDiscardDraft();
		}

		task ("Assert the Title fragment's text has reverted back to what it was before") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Discard Draft button is now disabled but Publish button still is enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");
		}

		task ("Assert the Discard Draft and Publish buttons are now enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_ENABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}

		task ("Discard the draft") {
			PageEditor.clickDiscardDraft();
		}

		task ("Assert the Rich Text fragment has been removed") {
			AssertElementNotPresent(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Discard Draft button is now disabled but Publish button still is enabled") {
			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");
		}
	}

	@description = "Edit an existing content page that has fragments. This testcase covers the bug found in LPS-85872. This test has been extended to cover LPS-78726. Changes to content pages only appear after they are published."
	@priority = "5"
	test EditContentPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the Title fragment is not present because it has not been published yet") {
			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is not present because it has not been published yet") {
			AssertElementNotPresent(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Add a Content fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content");
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment text");
		}

		task ("View the content page") {
			PageEditor.clickBack();
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is still has its original text because the edit has not been published yet") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is not present because the adding of the fragment has not been published yet") {
			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page's edit mode") {
			ContentPages.clickPencil();
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Title Fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				key_position = "1",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment with updated editable text is present") {
			AssertVisible(
				key_content = "New editable fragment text",
				key_fragmentClass = "rich-text",
				key_position = "2",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				key_position = "3",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-102887. A user can edit content in a web content display widget through content panel"
	@priority = "4"
	test EditWecContentInAPViaContentPanel {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addWidget(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content",
			contentPage = "true");

		Refresh();

		WebContent.editViaContentPanel(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		PageEditor.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		WebContent.viewPGViaAP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a test for LPS-102887. A user can edit content in a web content display widget through content panel"
	@priority = "4"
	test EditWecContentInWCDViaContentPanel {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title");

		Refresh();

		WebContent.editViaContentPanel(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		PageEditor.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		AssertElementPresent(
			key_portletName = "WC WebContent Content Edit",
			locator1 = "Portlet#BODY");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a test for LPS-81870. In edit mode the page should still show the elements of the page that are not from the page itself, like the header, footer, or elements defined by the theme."
	@priority = "5"
	test ViewEditModeHeaderFooterTheme {
		property test.name.skip.portal.instance = "ContentPages#ViewEditModeHeaderFooterTheme";

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Assert the header and footer are disabled") {
			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");
		}

		task ("Assert the header and footer contain the elements that are part of the header and footer") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = "Test Site Name");

			AssertVisible(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertVisible(locator1 = "UserBar#USER_AVATAR_IMAGE");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER",
				value1 = "Powered By Liferay");
		}

		task ("Assert the navigation menu widget with the previously created widget page also displays in the disabled part of the header") {
			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");
		}

		task ("Assert clicking on the disabled header will cause a popover message explaining that the header is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. To change theme settings go to the Look and Feel configuration in the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the header") {
			Click(locator1 = "PageEditor#EMPTY_MESSAGE");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}

		task ("Assert clicking on the disabled footer will cause a popover message explaining that the footer is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. To change theme settings go to the Look and Feel configuration in the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the footer") {
			Click(locator1 = "PageEditor#EMPTY_MESSAGE");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}
	}

	@description = "This is a test for LPS-101328. Editable image name should be visible in the floating toolbar."
	@priority = "5"
	test ViewSelectedImageName {

		// Ignore test from acceptance until LRQA-52823 resolved

		property portal.acceptance = "false";

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			fileName = "Document_1.png",
			fragmentName = "Image",
			id = "image");

		task ("Assert the image field contains the image name.") {
			Click(locator1 = "PageEditor#EDITABLE_FIELD_TOOLBAR_IMAGE_PROPERTIES_BUTTON");

			AssertVisible(locator1 = "//input[@value='Document_1.png']");
		}
	}

}