@component-name = "portal-wcm"
definition {

	property osgi.module.configuration.file.names = "com.liferay.layout.content.page.editor.web.internal.configuration.ContentsContentPageEditorSidebarPanelConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-108339. Add a content page with fragments. Can add fragments directly without Section to page."
	@priority = "5"
	test AddContentPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a Title fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Assert Title fragment is not nested inside Section element") {
			AssertElementNotPresent(
				key_elementType = "Container",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button",
				targetFragmentName = "Rich Text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Button fragment is present") {
			AssertVisible(
				key_content = "Submit",
				key_fragmentClass = "footer",
				locator1 = "Fragment#FRAGMENT");

			AssertVisible(
				key_content = "Cancel",
				key_fragmentClass = "footer",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Submit and Cancel buttons in the Button fragment is present") {
			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}
		}
	}

	@description = "Create a content page from a page template with fragments."
	@priority = "5"
	test AddContentPageFromPageTemplate {
		property portal.acceptance = "true";

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a page template with a Button fragment") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button");

			PageEditor.clickPublish();
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Button fragment is present and the buttons work") {
			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}

			Button.clickNoError(button = "Submit");

			AssertConfirm(value1 = "Form submitted");
		}
	}

	@description = "This is a test for LPS-95042. Liferay should come out of the box with fragments."
	@priority = "5"
	test AddContentPageWithOOTBFragment {
		property portal.acceptance = "true";

		task ("Add a Title fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				fragmentName = "Banner Center");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Banner Center fragment is on the page") {
			AssertVisible(locator1 = "//section//div[contains(@class,'banner')]");
		}
	}

	@description = "This is a test for LPS-109590. Assert no Container element is outside when add a Grid element to content page. Can nest a Grid fragment or multiple Grid inside one module of another one."
	@priority = "5"
	test AddGridToColumnOfAnotherGrid {
		task ("Assert add Grid without Container") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");

			AssertElementNotPresent(
				key_elementType = "Container",
				key_position = "1",
				locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");
		}

		task ("Assert add the second Grid in module 1 of the first Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Assert add the third Grid in module 1 of the first Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Grid",
				height = "Tall",
				navTab = "Fragments",
				targetFragmentName = "Grid");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "/div[contains(@class,'page-editor__topper')][2]/div[contains(.,'Grid')]//li[contains(@class,'title')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-110708 and LPS-121112. Can add Grid element into a custom module of anthor one. Assert the height of empty row is greater than 20px after adding element to the resized module of another row."
	@priority = "4"
	test AddGridToCustomModuleOfAnotherGrid {
		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Move the third module to the second row") {
			Click.clickNoWaitForVisible(
				key_fragmentName = "Grid",
				locator1 = "Fragment#FRAGMENT_HEADER");

			DragAndDrop.dragAndDrop(
				key_position = "3",
				locator1 = "PageEditor#GRID_COLUMN_RESIZER",
				value1 = "530,0");

			PageEditor.waitForAutoSave();

			AssertVisible(locator1 = "PageEditor#GRID_COLUMN_FIRST_RESIZER");
		}

		task ("Add a Grid to the third module") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "3",
				fragmentName = "Grid",
				navTab = "Fragments");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "3",
				key_elementHeader = "//div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Grid')]//li[contains(@class,'title')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Assert the height of the first module is greater than 20px") {
			var moduleHeight = selenium.getElementHeight("//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')]");

			var moduleHeight = StringUtil.replace("${moduleHeight}", "px", "");

			TestUtils.isGreaterThan(
				actual = "${moduleHeight}",
				expected = "20");
		}
	}

	@description = "This is a test for LPS-102887. A user can access content in a web content display widget through content panel"
	@priority = "5"
	test CanAccessContentPanel {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Refresh();

		PageEditor.gotoTab(tabName = "Contents");

		LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
			menuItem = "Edit",
			rowEntry = "WC WebContent Title");

		AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");
	}

	@description = "This is a test for LPS-107285. Can not duplicate Layout Elements with a widget that only allowed appear once in the page, there should be an error message shown."
	@priority = "4"
	test CannotDuplicateSectionWithOnlyAllowedAppearOnceWidget {
		task ("Add a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Add a Container to page") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add the Language Selector into Container") {
			PageEditor.addElementToContainer(
				navTab = "Widgets",
				portletName = "Language Selector");
		}

		task ("Assert alert message when duplicate Section") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "The layout could not be duplicated because it contains a widget (Language Selector) that can only appear once in the page.");

			Pause(locator1 = "3000");
		}
	}

	@description = "Users can only edit content pages in edit mode."
	@priority = "5"
	test CannotEditInViewMode {
		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the page cannot be edited in 'View Mode' by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Assert the content page can be edited in 'Edit Mode' by asserting the fragments side bar is present") {
			AssertVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Navigate back to the content page") {
			PageEditor.clickBack();
		}

		task ("Assert the page cannot be edited by asserting the fragments side bar is not present") {
			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}
	}

	@description = "This is a test for LPS-91000, LPS-95002 and LPS-115224. User can edit number of columns a section has as well as padding options. The Fixed Width of Container should work in view mode."
	@priority = "5"
	test ChangeLayoutElementProperties {
		property portal.acceptance = "true";

		task ("Add a 2 column row layout") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");

			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General",
				spaceBetweenColumns = "true");
		}

		task ("Assert the Row has space between columns and 2 columns") {
			PageEditor.viewGridStyle(
				columnCount = "3",
				position = "1",
				spaceBetweenColumns = "true");
		}

		task ("Add a Container layout") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container",
				targetFragmentName = "Grid");
		}

		task ("Assert the Container has Fluid, padding bottom 0, padding left 0, padding right 0 and padding top 0") {
			PageEditor.viewContainerStyle(
				containerWidth = "Fluid",
				paddingBottom = "0",
				paddingLeft = "0",
				paddingRight = "0",
				paddingTop = "0",
				position = "1");
		}

		task ("Edit the row's properties") {
			PageEditor.editLayoutGrid(
				columnCount = "3",
				panel = "General",
				spaceBetweenColumns = "false");
		}

		task ("Assert the Row has exactly 3 columns and no space between columns") {
			PageEditor.viewGridStyle(
				columnCount = "3",
				position = "1",
				spaceBetweenColumns = "false");
		}

		task ("Edit the Container's properties") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Success",
				containerWidth = "Fixed Width",
				paddingBottom = "4",
				paddingTop = "2",
				panel = "Styles");
		}

		task ("Assert the Margin Left and Margin Right fields are disabled") {
			AssertNotEditable(
				key_borderBottom = "Margin",
				key_fieldLabel = "Left",
				locator1 = "Select#BORDER_BOTTOM_SELECT_FIELD");

			AssertNotEditable(
				key_borderBottom = "Margin",
				key_fieldLabel = "Right",
				locator1 = "Select#BORDER_BOTTOM_SELECT_FIELD");
		}

		task ("Assert the Container has Fixed Width, padding bottom 4 and padding top 2") {
			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				containerWidth = "Fixed Width",
				paddingBottom = "4",
				paddingTop = "2",
				position = "1");
		}

		task ("Assert Fixed Width of Container works in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			var screenWidth = selenium.getElementWidth("//body");
			var containerWidth = selenium.getElementWidth("//div[contains(@class,'container')][contains(@class,'pb-4 pt-2')]");

			TestUtils.assertNotEquals(
				actual = "${containerWidth}",
				expected = "${screenWidth}");

			AssertVisible(locator1 = "//div[contains(@class,'container')][contains(@class,'pb-4 pt-2')]");

			AssertCssValue(
				locator1 = "//div[contains(@class,'container')][contains(@class,'pb-4 pt-2')]",
				locator2 = "background-color",
				value1 = "rgba(40, 125, 60, 1)");

			AssertCssValue(
				locator1 = "//div[contains(@class,'container')][contains(@class,'pb-4 pt-2')]",
				locator2 = "max-width",
				value1 = "${containerWidth}px");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'container')][contains(@class,'ml-0')]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'container')][contains(@class,'mr-0')]");
		}
	}

	@description = "This is a test for LPS-78726. Discarding a draft will revert a content page back to its most recent published version."
	@priority = "5"
	test DiscardContentPageDraft {
		property portal.acceptance = "true";

		task ("Assert the Discard Draft button starts off not shown but Publish button starts off enabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Title fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Discard the draft") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			PageEditor.clickDiscardDraft(pageName = "Test Content Page Name");
		}

		task ("Assert the Title fragment is no longer present") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Title fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Publish the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Discard Draft button is not shown but Publish button is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Edit the Title fragment's editable text") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Title",
				id = "title",
				text = "New editable fragment text");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Discard the draft") {
			MenuItem.clickNoError(menuItem = "Discard Draft");

			AssertConfirm(value1 = "Are you sure you want to discard current draft and apply latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Assert the Title fragment's text has reverted back to what it was before") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("Add a Rich Text fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");
		}

		task ("Assert the Discard Draft is shown and Publish button is now enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Draft");
		}

		task ("Discard the draft") {
			MenuItem.clickNoError(menuItem = "Discard Draft");

			AssertConfirm(value1 = "Are you sure you want to discard current draft and apply latest published changes?");

			Alert.viewSuccessMessage();
		}

		task ("Assert the Rich Text fragment has been removed") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Discard Draft button is not shown but Publish button still is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(
				key_pageName = "Test Content Page Name",
				locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}
	}

	@description = "This is a test for LPS-101258. Can create a fragment with a Drop Zone area."
	@priority = "5"
	test DropButtonFragmentToFrgamentWithOneDropZone {
		property portal.acceptance = "true";

		JSONFragment.addFragmentCollection(
			groupName = "Test Site Name",
			name = "Collection Name 2");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name 2");

		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		FragmentsEditor.typeHtmlEditor(content = '''<lfr-drop-zone id="drop-zone"></lfr-drop-zone>''');

		PortletEntry.publish();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name 2",
			fragmentName = "Fragment Name");

		AssertVisible(
			key_content = "Place fragments here.",
			key_fragmentClass = "content",
			key_position = "1",
			locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");

		PageEditor.expandFragmentCollection(collectionName = "Basic Components");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_collectionName = "Basic Components",
			key_fragmentName = "Button",
			key_index = "2",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
			value1 = "");

		AssertElementPresent(
			key_fragmentName = "Button",
			key_inFragmentName = "Fragment Name",
			locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");
	}

	@description = "This is a test for LPS-107285. Can duplicate the Row fragment in one Section fragment."
	@priority = "5"
	test DuplicateRowInSection {
		property portal.acceptance = "true";

		task ("Add a Section to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Row into Section") {
			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Assert duplicate Row in the Section") {
			PageEditor.gotoDuplicate(fragmentName = "Grid");

			PageEditor.viewDuplicateFragment(fragmentName = "Grid");

			AssertElementPresent(
				key_elementHeader = "/div[contains(@class,'page-editor__topper')][2]/div[contains(.,'Grid')]//li[contains(@class,'title')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-107285. When the Row fragment is duplicated, the components in each of columns should also be duplicated."
	@priority = "4"
	test DuplicateRowWithElements {
		task ("Add a Row to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Web Content Display widget to column 1") {
			PageEditor.gotoTab(tabName = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#WIDGETS_APPLICATION_SEARCH_FIELD",
				value1 = "Web Content Display");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_columnNumber = "1",
				key_portletName = "Web Content Display",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "Web Content Display");

			Pause(locator1 = "5000");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Web Content Display')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			PageEditor.gotoTab(tabName = "Contents");
		}

		task ("Add a Heading fragment to column 2") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_columnNumber = "2",
				key_fragmentName = "Heading",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Heading')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Add a Button fragment to column 3") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_columnNumber = "3",
				key_fragmentName = "Button",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "3",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Button')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Assert nested elements duplicated with Row") {
			PageEditor.gotoDuplicate(fragmentName = "Grid");

			PageEditor.viewDuplicateFragment(fragmentName = "Grid");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Web Content Display')]",
				key_position = "2",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Heading')]",
				key_position = "2",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			AssertElementPresent(
				key_columnNumber = "3",
				key_elementHeader = "//div[contains(@class,'page-editor')]//li[contains(.,'Button')]",
				key_position = "2",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-107285. When duplicate the Section fragment with the Row fragment, the Row fragment should also be duplicated."
	@priority = "5"
	test DuplicateSectionWithRow {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Row into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Assert the nested Row is also duplicated with Container") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewDuplicateFragment(fragmentName = "Container");

			AssertElementPresent(
				key_elementHeader = "/div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Grid')]//li[contains(@class,'title')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "Edit an existing content page that has fragments. This testcase covers the bug found in LPS-85872. This test has been extended to cover LPS-78726. Changes to content pages only appear after they are published. LPS-76741 - Validate content page can be edited by Edit/View mode."
	@priority = "5"
	test EditContentPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a Title fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");
		}

		task ("Navigate to the content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the Title fragment is not present because it has not been published yet") {
			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is not present because it has not been published yet") {
			AssertElementNotPresent(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is present") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.clickPencil();
		}

		task ("Add a Content fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content",
				targetFragmentName = "Rich Text");
		}

		task ("Edit the Rich Text fragment's editable text") {
			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment text");
		}

		task ("View the content page") {
			PageEditor.clickBack();
		}

		task ("Assert the Title fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment is still has its original text because the edit has not been published yet") {
			AssertVisible(
				key_content = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is not present because the adding of the fragment has not been published yet") {
			AssertElementNotPresent(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the content page's edit mode") {
			ContentPages.clickPencil();
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Title Fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet",
				key_fragmentClass = "header",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Rich Text fragment with updated editable text is present") {
			AssertVisible(
				key_content = "New editable fragment text",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Assert the Content fragment is present") {
			AssertVisible(
				key_content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempus eleifend lacus nec porttitor. Vestibulum pharetra ullamcorper felis volutpat commodo. Nam id ipsum placerat, hendrerit orci eu, congue nisi. Proin.",
				key_fragmentClass = "body",
				locator1 = "Fragment#FRAGMENT");
		}

		task ("Navigate to the Pages admin in new site") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Access to content page at edit mode") {
			SitePages.gotoPageMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Navigate Back to Site Pages") {
			Navigator.gotoBack();
		}

		task ("Access to content page can be edited at view mode") {
			SitePages.gotoPageMenuItem(
				menuItem = "View",
				pageName = "Test Content Page Name");

			ContentPages.clickPencil();
		}
	}

	@description = "This is a test for LPS-102887. A user can edit content in a web content display widget through content panel"
	@priority = "4"
	test EditWebContentInAPViaContentPanel {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content");

		Refresh();

		WebContent.editViaContentPanel(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		AssertTextEquals(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title Edit");

		AssertTextEquals.assertPartialText(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "WC WebContent Content Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a test for LPS-102887. A user can edit content in a web content display widget through content panel"
	@priority = "4"
	test EditWebContentInWCDViaContentPanel {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		Refresh();

		WebContent.editViaContentPanel(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		AssertElementPresent(
			key_portletName = "WC WebContent Content Edit",
			locator1 = "Portlet#BODY");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This is a test for LPS-109169. Topper only visible when the element is selected but not hover."
	@priority = "5"
	test HeaderOnlyShownWhenElementSelected {
		property portal.acceptance = "true";

		task ("Add a Heading fragment and an Asset Publisher portlet to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Heading");
		}

		task ("Assert only header of Heading shown when Heading selected") {
			if (IsNotVisible(key_fragmentName = "Heading", locator1 = "Fragment#FRAGMENT_HEADER")) {
				Click.clickNoWaitForVisible(
					key_fragmentName = "Heading",
					locator1 = "Fragment#FRAGMENT_HEADER");
			}

			AssertVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			MouseOver.mouseOverInvisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}

		task ("Assert only header of Asset Publisher shown when Asset Publisher selected") {
			Click.clickNoWaitForVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertVisible(
				key_fragmentName = "Asset Publisher",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			MouseOver.mouseOverInvisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertNotVisible(
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

	@description = "This is a test for LPS-106778. Add a content page with fragments. Can reorganize them."
	@priority = "5"
	test ReorganizeFragmentsInContentPage {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View Heading frgament is on top of Button fragment") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = "1");

			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = "2");
		}

		task ("Move the fragment") {
			PageEditor.clickConfigurableField(fragmentName = "Button");

			DragAndDrop.javaScriptDragAndDropToUp(
				id = "element-text",
				key_dragFragmentName = "Button",
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
				locator2 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				value1 = "");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the Button fragment is on top of Heading frgament") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = "1");

			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = "2");
		}
	}

	@description = "This is a test for LPS-121078. Resize module of Grid."
	@priority = "4"
	test ResizeModuleOfGrid {
		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Heading fragment to the second module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = "2",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Configure the Heading's style") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(
				alignment = "Center",
				textColor = "Success");

			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H2");
		}

		task ("View the Heading's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "success");
		}

		task ("Add a Button fragment above the Grid") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			Navigator.gotoNavTab(navTab = "Fragments");

			DragAndDrop.javaScriptDragAndDropToUp(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				key_targetFragmentName = "Grid",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET",
				value1 = "");

			PageEditor.waitForAutoSave();
		}

		task ("Configure the Button's style") {
			PageEditor.gotoConfiguration(fragmentName = "Button");

			PageEditor.configureFragment(type = "Link");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(
				alignment = "Center",
				size = "Large");
		}

		task ("View the Button's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				size = "lg",
				type = "link");
		}

		task ("Resize the modules") {
			Click.clickNoWaitForVisible(
				key_fragmentName = "Grid",
				locator1 = "Fragment#FRAGMENT_HEADER");

			DragAndDrop.dragAndDrop(
				key_position = "3",
				locator1 = "PageEditor#GRID_COLUMN_RESIZER",
				value1 = "100,0");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the width of modules") {
			PageEditor.viewGridStyle(
				columnCount = "3",
				position = "1");

			AssertElementPresent(locator1 = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')][1]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')][2]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Grid')]//following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')][3]");

			var thirdModuleWidth = selenium.getElementWidth("xpath=(//div[contains(@class,'page-editor__col__border')])[3]");

			TestUtils.assertNotEquals(
				actual = "${thirdModuleWidth}",
				expected = "0");
		}

		task ("View the Heading's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "success");
		}

		task ("View the Button's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				size = "lg",
				type = "link");
		}

		task ("Assert the width of modules in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			for (var n : list "1,2,3") {
				AssertElementPresent(locator1 = "//div[contains(@class,'container-fluid')]/div[contains(@class,'row')]//div[contains(@class,'col')][${n}]");
			}

			AssertElementPresent(locator1 = "//div[contains(@class,'col-md-4')][1]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'col-md-4')][2]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'col-md-4')][3]");

			var thirdModuleWidth = selenium.getElementWidth("//div[contains(@class,'container-fluid')]/div[contains(@class,'row')]//div[contains(@class,'col')][3]");

			TestUtils.assertNotEquals(
				actual = "${thirdModuleWidth}",
				expected = "0");
		}

		task ("View the Heading's style in view mode") {
			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				headingLevel = "h2");

			AssertElementPresent(
				key_fragmentName = "heading",
				key_textColor = "var(--success)",
				locator1 = "Fragment#FRAGMENT_CONFIGURATION_TEXT_COLOR_IN_VIEW_MODE");

			AssertElementPresent(
				key_alignment = "center",
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_CONFIGURATION_ALIGNMENT_IN_VIEW_MODE");
		}

		task ("View the Button's style in view mode") {
			PageEditor.viewFragmentStyle(
				fragmentName = "button",
				size = "lg",
				type = "link");

			AssertElementPresent(
				key_alignment = "center",
				key_fragmentName = "button",
				locator1 = "Fragment#FRAGMENT_CONFIGURATION_ALIGNMENT_IN_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-107285. When the Container fragment is duplicated, the configuration of it and its components should also be duplicated."
	@priority = "4"
	test ViewConfigurationDuplicatedWhenDuplicateSectionWithHeading {
		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Configure the Container") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Success",
				panel = "Styles");

			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				position = "1");
		}

		task ("Configure the Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "White");

			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				textColor = "white");
		}

		task ("Assert configuration duplicated with Container and Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				position = "2");

			AssertElementPresent(
				key_elementHeader = "//div[contains(@class,'page-editor__topper__bar') and contains(.,'Heading')]/following-sibling::div[contains(@class,'page-editor__topper__content')]//div[contains(@style,'color: var(--white)')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-107285. When the Container fragment with Heading fragment is duplicated, the edited inline content should also be duplicated."
	@priority = "4"
	test ViewEditedInlineContentDuplicatedWhenDuplicateSectionWithHeading {
		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Edit inline content of Heading") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Assert edited inline content duplicated with nested Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewDuplicateFragment(fragmentName = "Container");

			AssertVisible(
				key_elementHeader = "//div[contains(.,'New editable fragment text') and contains(@id,'fragment-')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-81870. In edit mode the page should still show the elements of the page that are not from the page itself, like the header, footer, or elements defined by the theme."
	@priority = "5"
	test ViewEditModeHeaderFooterTheme {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPages#ViewEditModeHeaderFooterTheme";

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Assert the header and footer are disabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");
		}

		task ("Assert the header and footer contain the elements that are part of the header and footer") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = "Test Site Name");

			AssertVisible(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertVisible(locator1 = "UserBar#USER_AVATAR_IMAGE");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER",
				value1 = "Powered By Liferay");
		}

		task ("Assert the navigation menu widget with the previously created widget page also displays in the disabled part of the header") {
			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");
		}

		task ("Assert clicking on the disabled header will cause a popover message explaining that the header is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the header") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}

		task ("Assert clicking on the disabled footer will cause a popover message explaining that the footer is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the footer") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}
	}

	@description = "This is a test for LPS-104629. The header of fragment selected can reach the border of the management toolbar."
	@priority = "5"
	test ViewHeaderOfFragmentMoveInsideBodyWhenReachTheManagementToolbar {
		property portal.acceptance = "true";

		task ("Add Image, Slider, Card and HTML fragments to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Slider",
				targetFragmentName = "Card");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Slider");
		}

		task ("Assert Header of Card is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementNotPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Card moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Image",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is a test for LPS-104629. The header of widget selected can reach the border of the management toolbar."
	@priority = "4"
	test ViewHeaderOfWidgetMoveInsideBodyWhenReachTheManagementToolbar {
		task ("Add My Sites, Documents and Media, Blogs and Asset Publisher widgets to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");

			Refresh();

			PageEditor.addWidget(
				portletName = "Blogs",
				targetFragmentName = "Asset Publisher");

			Refresh();

			PageEditor.addWidget(
				portletName = "Documents and Media",
				targetFragmentName = "Blogs");

			Refresh();

			PageEditor.addWidget(
				portletName = "My Sites",
				targetFragmentName = "Documents and Media");
		}

		task ("Assert Header of Blogs is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER");

			Click.clickNoWaitForVisible(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementNotPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Blogs moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				key_fragmentName = "My Sites",
				locator1 = "Fragment#FRAGMENT_HEADER");

			AssertElementPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is a test for LPS-107285. When the Section fragment with Heading fragment is duplicated, the mapped content should also be duplicated."
	@priority = "4"
	test ViewMappedContentDuplicatedWhenDuplicateSectionWithHeading {
		task ("Add a Web Content Article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a Section to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Section") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Map content of Web Content to Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Basic Web Content");

			SelectFrame(value1 = "relative=top");

			PageEditor.waitForAutoSave();

			AssertVisible(
				key_text = "WC WebContent Content",
				locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
		}

		task ("Assert mapped content duplicated with nested Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Container");

			PageEditor.viewDuplicateFragment(fragmentName = "Container");

			AssertVisible(
				key_elementHeader = "//div[contains(.,'WC WebContent Content') and contains(@id,'fragment-')]",
				key_position = "2",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-101255. The saved composition entry is available in Page Fragments admin with specific actions."
	@priority = "5"
	test ViewSavedCompositionMenuItem {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Site Name");
		}

		task ("Add a Container to page") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		PageEditor.gotoSaveAsFragment(fragmentName = "Container");

		PageEditorComposition.saveAsFragment(fragmentName = "New Fragment Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Saved Fragments");

		LexiconEntry.openEntryMenu(rowEntry = "New Fragment Name");

		for (var menuItem : list "Rename,Move,Change Thumbnail,Export,Delete") {
			MenuItem.viewPresent(menuItem = "${menuItem}");
		}
	}

	@description = "This is a test for LPS-101328. Editable image name should be visible in the floating toolbar."
	@priority = "5"
	test ViewSelectedImageName {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			fileName = "Document_1.png",
			fragmentName = "Image",
			id = "image");

		task ("Assert the image field contains the image name.") {
			AssertVisible(locator1 = "//input[@value='Document_1.png']");
		}
	}

}