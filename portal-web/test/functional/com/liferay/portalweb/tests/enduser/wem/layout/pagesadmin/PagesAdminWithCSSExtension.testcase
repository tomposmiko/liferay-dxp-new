@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}

		task ("Upload two CSS extension files to Documents and Media") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Font Family",
				groupName = "Test Site Name",
				mimeType = "text/css",
				sourceFileName = "font_family.css");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Background Color",
				groupName = "Test Site Name",
				mimeType = "text/css",
				sourceFileName = "background_color.css");
		}

		task ("Get the latest version URL of two documents") {
			var firstURL = JSONDocument.getLatestVersionURL(
				dmDocumentTitle = "Font Family",
				groupName = "Test Site Name");
			var secondURL = JSONDocument.getLatestVersionURL(
				dmDocumentTitle = "Background Color",
				groupName = "Test Site Name");
		}

		task ("Add two remote apps for CSS extension") {
			JSONClientExtension.addRemoteAppEntry(
				name = "FontFamily",
				type = "globalCSS",
				url = ${firstURL});

			JSONClientExtension.addRemoteAppEntry(
				name = "BackgroundColor",
				type = "globalCSS",
				url = ${secondURL});
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ClientExtensionGeneral.tearDown();
		}
	}

	@description = "This is a test for LPS-153656. The site designer could add CSS extension to page, page template, and group of pages."
	@priority = 5
	test AddCSSExtension {
		property portal.acceptance = "true";

		task ("Given a site designer has a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("When the site designer accesses to Look and Feel settings of widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name");

			Navigator.gotoNavTab(navTab = "Design");

			Navigator.gotoNavTab(navTab = "Look and Feel");

			AssertTextEquals(
				key_sectionTitle = "CSS Client Extensions",
				locator1 = "PagesAdmin#SECTION_SUBTITLE",
				value1 = "No CSS Client extensions were loaded.");
		}

		task ("Then the site designer could add a CSS Extension to widget page") {
			PagesAdmin.addCSSExtensions(extensionNameList = "FontFamily");

			AssertVisible(
				key_tableEntry = "FontFamily",
				locator1 = "LexiconTable#TABLE_ENTRY");

			PortletEntry.save();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");
		}

		task ("Given a site designer has a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Page Template Name",
				pageTemplateType = "Content Page Template");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("When the site designer accesses to Look and Feel settings of content page template") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			AssertTextEquals(
				key_sectionTitle = "CSS Client Extensions",
				locator1 = "PagesAdmin#SECTION_SUBTITLE",
				value1 = "No CSS Client extensions were loaded.");
		}

		task ("Then the site designer could add a CSS Extension to widget page") {
			PagesAdmin.addCSSExtensions(extensionNameList = "FontFamily");

			AssertVisible(
				key_tableEntry = "FontFamily",
				locator1 = "LexiconTable#TABLE_ENTRY");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");
		}

		task ("When the site designer accesses to Look and Feel settings of Pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			AssertTextEquals(
				key_sectionTitle = "CSS Client Extensions",
				locator1 = "PagesAdmin#SECTION_SUBTITLE",
				value1 = "No CSS Client extensions were loaded.");
		}

		task ("Then the site designer could add a CSS Extension to Pages") {
			PagesAdmin.addCSSExtensions(extensionNameList = "BackgroundColor");

			AssertVisible(
				key_tableEntry = "BackgroundColor",
				locator1 = "LexiconTable#TABLE_ENTRY");

			PortletEntry.save();

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "background-color",
				value1 = "rgba(128, 128, 0, 1)");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "background-color",
				value1 = "rgba(128, 128, 0, 1)");
		}
	}

	@description = "This is a test for LPS-153656. The site designer could change CSS extension selection to an inheritor page from page template."
	@priority = 5
	test ChangeCSSExtensionOfInheritorPage {
		property portal.acceptance = "true";

		task ("Given a site designer has a content page template with a CSS extension") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Content Page Template",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			PagesAdmin.addCSSExtensions(extensionNameList = "FontFamily");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("When the site designer adds a content page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Content Page Template");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");
		}

		task ("Then the site designer could change the CSS extension of content page") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			PagesAdmin.addCSSExtensions(extensionNameList = "BackgroundColor");

			AssertVisible(
				key_tableEntry = "BackgroundColor",
				locator1 = "LexiconTable#TABLE_ENTRY");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertCssValue(
				locator1 = "//body",
				locator2 = "background-color",
				value1 = "rgba(128, 128, 0, 1)");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			for (var extensionName : list "BackgroundColor,FontFamily") {
				Click(
					key_tableEntry = ${extensionName},
					locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

				DropdownMenuItem.click(menuItem = "Delete");
			}

			AssertTextEquals(
				key_sectionTitle = "CSS Client Extensions",
				locator1 = "PagesAdmin#SECTION_SUBTITLE",
				value1 = "No CSS Client extensions were loaded.");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "background-color",
				value1 = "rgba(255, 255, 255, 1)");
		}
	}

	@description = "This is a test for LPS-153656. The site designer could delete the CSS extenion selection."
	@priority = 4
	test ClearCSSExtensionSelection {
		task ("Given a site designer has a content page with a CSS extension") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			PagesAdmin.addCSSExtensions(extensionNameList = "FontFamily");

			AssertVisible(
				key_tableEntry = "FontFamily",
				locator1 = "LexiconTable#TABLE_ENTRY");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("When the site designer accesses to the Look and Feel settings") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();
		}

		task ("Then the site designer could clear the CSS extension selection") {
			Navigator.gotoNavTab(navTab = "Look and Feel");

			Click(
				key_tableEntry = "FontFamily",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Delete");

			AssertTextEquals(
				key_sectionTitle = "CSS Client Extensions",
				locator1 = "PagesAdmin#SECTION_SUBTITLE",
				value1 = "No CSS Client extensions were loaded.");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"");
		}
	}

	@description = "This is a test for LPS-153658. The inherited CSS extensions from master or Pages should be read-only mode."
	@priority = 4
	test ViewInheritedCSSExtensionFromMasterPageOrPages {
		task ("Given a site designer has a master page with a CSS extension") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Master Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Master Page Template");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			PagesAdmin.addCSSExtensions(extensionNameList = "BackgroundColor");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			MastersPageTemplates.publishMaster();
		}

		task ("When the site designer adds a content page based on master page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Master Page Template",
				pageName = "Test Page Name 1");
		}

		task ("Then the site designer could see the inherited CSS extension") {
			AssertCssValue(
				locator1 = "//body",
				locator2 = "background-color",
				value1 = "rgba(128, 128, 0, 1)");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			LexiconTable.viewTableEntryInfo(
				index = 3,
				tableEntry = "BackgroundColor",
				tableEntryInfo = "From Master");

			AssertElementNotPresent(
				key_tableEntry = "BackgroundColor",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");
		}

		task ("Given a site designer has the Pages with a CSS extension") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Design");

			Panel.expandPanel(panel = "Look and Feel");

			PagesAdmin.addCSSExtensions(extensionNameList = "BackgroundColor");

			PortletEntry.save();
		}

		task ("When the site designer adds a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2");
		}

		task ("Then the site designer could see the inherited CSS extension") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name 2");

			Navigator.gotoNavTab(navTab = "Design");

			Navigator.gotoNavTab(navTab = "Look and Feel");

			LexiconTable.viewTableEntryInfo(
				index = 3,
				tableEntry = "BackgroundColor",
				tableEntryInfo = "From Pages");

			AssertElementNotPresent(
				key_tableEntry = "BackgroundColor",
				locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");
		}
	}

	@description = "This is a test for LPS-153656. Page should inherit the CSS extension from page template."
	@priority = 5
	test ViewInheritedCSSExtensionFromPageTemplate {
		property portal.acceptance = "true";

		task ("Given a site designer has a content page template with a CSS extension") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Content Page Template",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			PagesAdmin.addCSSExtensions(extensionNameList = "FontFamily");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("When the site designer adds a content page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Content Page Template");
		}

		task ("Then the site designer could see the inherited CSS extension") {
			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			AssertVisible(
				key_tableEntry = "FontFamily",
				locator1 = "LexiconTable#TABLE_ENTRY");
		}
	}

	@description = "This is a test for LPS-153656. The order of CSS extensions loading on page are same with the order of addition."
	@priority = 4
	test ViewOrderOfCSSExtensionLoading {
		task ("Given a site designer has a content page with two CSS extensions") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			Navigator.gotoNavTab(navTab = "Look and Feel");

			PagesAdmin.addCSSExtensions(extensionNameList = "FontFamily,BackgroundColor");

			AssertVisible(
				index = 1,
				key_tableEntry = "FontFamily",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");

			AssertVisible(
				index = 2,
				key_tableEntry = "BackgroundColor",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");

			PortletEntry.save();
		}

		task ("When the site designer backs to the page editor") {
			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Then the order of CSS extension loading should be same with the order of addition") {
			AssertCssValue(
				locator1 = "//body",
				locator2 = "font-family",
				value1 = "\"Times New Roman\"");

			AssertCssValue(
				locator1 = "//body",
				locator2 = "background-color",
				value1 = "rgba(128, 128, 0, 1)");

			AssertElementPresent(locator1 = "xpath=(//link[contains(@href,'documents')])[1][contains(@href,'font-family')]");

			AssertElementPresent(locator1 = "xpath=(//link[contains(@href,'documents')])[2][contains(@href,'background-color')]");
		}
	}

}