@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given a content structure created") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "5"
	test StructuredContentDraftByVersionContainsSetPriority {
		property portal.acceptance = "true";

		task ("Given in Headless Admin Content I create a structuredContent draft with a priority field set") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1",
				title = "Title");
		}

		task ("When returning only web content with version 1.0") {
			var response = HeadlessWebcontentAPI.versionStructureContent(
				responseToParse = "${responseToParse}",
				versionvalue = "1.0");
		}

		task ("Then the response body includes the set priority") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "1.0",
				responseToParse = "${response}");
		}
	}

	@priority = "5"
	test StructuredContentDraftContainsModifiedPriorityValue {
		property portal.acceptance = "true";

		task ("Given in Headless Admin Content I create a structuredContent draft with a priority field set") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1",
				title = "Title");
		}

		task ("When a structured content draft priority is modified") {
			var editStructuredContentId = HeadlessWebcontentAPI.editStructuredContent(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "3.0",
				responseToParse = "${responseToParse}",
				title = "Title");
		}

		task ("When web contents are filtered with 3.0 priority") {
			var response = HeadlessWebcontentAPI.filterStructuredContent(filtervalue = "priority%20eq%203.0");
		}

		task ("Then I should see in response content1 with the updated priority value") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "3.0",
				responseToParse = "${response}");
		}
	}

	@priority = "5"
	test StructuredContentDraftContainsPriorityField {
		property portal.acceptance = "true";

		task ("When in Headless Admin Content I create a structuredContent draft without setting the priority") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				title = "Title");
		}

		task ("Then the response body includes the default priority field") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "0.0",
				responseToParse = "${responseToParse}");
		}
	}

	@priority = "5"
	test StructuredContentDraftContainsSetPriorityValue {
		property portal.acceptance = "true";

		task ("When in Headless Admin Content I create a structuredContent draft with a priority field set") {
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var responseToParse = HeadlessWebcontentAPI.createStructuredContentDraft(
				data = "Text",
				ddmStructureId = "${ddmStructureId}",
				label = "Text",
				name = "Text",
				priority = "1",
				title = "Title");
		}

		task ("Then the response body includes the set priority") {
			HeadlessWebcontentAPI.assertPriorityFieldWithCorrectValue(
				expectedPriorityValue = "1.0",
				responseToParse = "${responseToParse}");
		}
	}

}