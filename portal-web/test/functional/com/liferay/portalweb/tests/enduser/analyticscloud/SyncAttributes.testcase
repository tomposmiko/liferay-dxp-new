@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Create DXP Site with Commerce") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium Demo");
		}

		task ("Connect Commerce and AC") {
			ACDXPSettings.connectAnalyticsCloud();
		}

		task ("Get the property name to enable commerce on the right one") {
			var channelName = "Minium Demo Portal";
			var siteName = "Minium Demo";

			ACDXPSettings.getAssignedPropertyName();
		}

		task ("Enable commerce and sync the commerce channel and the related site") {
			ACDXPSettings.syncChannel(
				channelName = ${channelName},
				propertyName = ${assignedPropertyName});

			ACDXPSettings.syncSites(
				propertyName = ${assignedPropertyName},
				siteName = ${siteName});
		}

		task ("Go to the next page to configure people data") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("Click on sync all contacts and accounts") {
			ACDXPSettings.syncContactsAndAccountstData();
		}

		task ("Go to the next page to configure attributes") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.tearDownNonDefaultGroups();

			ACUtils.tearDownCommerce();
		}
	}

	@description = "Story: LRAC-10867 | Automation ID: LRAC-12909 | Test Summary: Check that all attributes for Orders are marked as required"
	@priority = 5
	test AllOrderAttributesRequired {
		task ("Click to configure Orders attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Order");
		}

		task ("See that the all the attributes are checked") {
			ACUtils.changePagination(itemsPerPage = 50);

			AssertElementNotPresent(locator1 = "ACDXPSettings#REQUIRED_ATTRIBUTES");
		}
	}

	@description = "Story: LRAC-10866 | Automation ID: LRAC-12901 | Test Summary: Check that all attributes for Products are marked as required"
	@priority = 5
	test AllProductAttributesRequired {
		task ("Click to configure products attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Products");
		}

		task ("See that the all the attributes are checked") {
			ACUtils.changePagination(itemsPerPage = 50);

			AssertElementNotPresent(locator1 = "ACDXPSettings#REQUIRED_ATTRIBUTES");
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12838 | Test Summary: Deselect non-required Attributes for Account"
	@priority = 5
	test CanDeselectNonRequiredAccountAttributes {
		var nonRequiredAttributesName = '''companyId,createDate,defaultCPaymentMethodKey,description,
        domains,logoId,modifiedDate,parentAccountEntryId,restrictMembership,status,taxExemptionCode,
        taxIdNumber,type_''';

		task ("Get the number of attributes currently synced") {
			var syncAccountNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "Account");
		}

		task ("Deselect the non required attributes for Account") {
			ACDXPSettings.desyncAttributes(
				attributeCategory = "Account",
				attributeNameList = ${nonRequiredAttributesName});
		}

		task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "Account",
				currentAttributeNumber = ${syncAccountNumberStart},
				decreaseAttributeNumber = 13);
		}

		task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

		task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

		task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "Account",
				currentAttributeNumber = ${syncAccountNumberStart},
				decreaseAttributeNumber = 13);
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12780 | Test Summary: Deselect non-required Attributes for People"
	@priority = 5
	test CanDeselectNoRequiredAttributesForPeople {
		task ("Get the number of attributes currently synced") {
			var syncPeopleNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "People");
		}

		task ("Deselect two attributes for People") {
			ACDXPSettings.desyncAttributes(
				attributeCategory = "People",
				attributeNameList = "birthday,male");
		}

		task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = ${syncPeopleNumberStart},
				decreaseAttributeNumber = 2);
		}

		task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

		task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

		task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = ${syncPeopleNumberStart},
				decreaseAttributeNumber = 2);
		}
	}

	@description = "Story: LRAC-10867 | Automation ID: LRAC-12913 | Test Summary: Check that it is possible to make pagination in the Attribute for Order list"
	@priority = 3
	test CanPaginateInOrdersAttributeList {
		var firstPageList = "orderItems,total,subscription,accountId,channelId";
		var secondPageList = "id,orderStatus,orderTypeId,paymentStatus,status";

		task ("Click to select attribute for Orders") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Order");
		}

		task ("Change filter to Data type") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = 5);

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 35 entries.");
		}

		task ("Check that 5 attributes for Orders appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstPageList});
		}

		task ("Check that the attributes for Orders on the second page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${secondPageList});
		}

		task ("Click to navigate for the second page") {
			ACUtils.checkAnyPage(pageNumber = 2);

			ACUtils.viewResultsMessage(results = "Showing 6 to 10 of 35 entries.");
		}

		task ("Check that 2 attributes for Order appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${secondPageList});
		}

		task ("Check that the attributes for Order on the first page does not appear on the second page") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${firstPageList});
		}
	}

	@description = "Story: LRAC-10866 | Automation ID: LRAC-12904 | Test Summary: Check that it is possible to make pagination in the Attribute for Product list"
	@priority = 3
	test CanPaginateInProductAttributeList {
		var firstPageList = "catalogId,categoryIds,createDate,currencyCode,customFields";
		var lastPageList = "tags,type,urls,vocabulary";

		task ("Click to select attribute for products") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Products");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = 5);

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 34 entries.");
		}

		task ("Check that 5 attributes for products appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstPageList});
		}

		task ("Check that the attributes for products on the last page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${lastPageList});
		}

		task ("Click to navigate for the last page") {
			ACUtils.checkAnyPage(pageNumber = 7);

			ACUtils.viewResultsMessage(results = "Showing 31 to 34 of 34 entries.");
		}

		task ("Check that 2 attributes for products appear on the last page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${lastPageList});
		}

		task ("Check that the attributes for products on the first page does not appear on the last") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${firstPageList});
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12843 | Test Summary: Check that it is possible to make pagination in the Attribute for Account list"
	@priority = 3
	test CanPaginationAttributeForAccountList {
		var firstPageList = "accountEntryId,companyId,createDate,defaultCPaymentMethodKey,description";
		var secondPageList = "domains,emailAddress,externalReferenceCode,logoId,modifiedDate";

		task ("Click to select attribute for Account") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = 5);

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 18 entries.");
		}

		task ("Check that 5 attributes for Account appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstPageList});
		}

		task ("Check that the attributes for Account on the second page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${secondPageList});
		}

		task ("Click to navigate for the second page") {
			ACUtils.checkAnyPage(pageNumber = 2);

			ACUtils.viewResultsMessage(results = "Showing 6 to 10 of 18 entries.");
		}

		task ("Check that 2 attributes for Account appear on the second page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${secondPageList});
		}

		task ("Check that the attributes for Account on the first page does not appear on the second page") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${firstPageList});
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12782 | Test Summary: Check that it is possible to make pagination in the Attribute for People list"
	@priority = 3
	test CanPaginationAttributeForPeopleList {
		var firstPageList = "agreedToTermsOfUse,birthday,classNameId,classPK,comments";
		var lastPageList = "userName,uuid";

		task ("Click to select attribute for people") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = 5);

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 52 entries.");
		}

		task ("Check that 5 attributes for people appear on the first page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${firstPageList});
		}

		task ("Check that the attributes for people on the last page does not appear on the first") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${lastPageList});
		}

		task ("Click to navigate for the last page") {
			ACUtils.checkAnyPage(pageNumber = 11);

			ACUtils.viewResultsMessage(results = "Showing 51 to 52 of 52 entries.");
		}

		task ("Check that 2 attributes for people appear on the last page") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${lastPageList});
		}

		task ("Check that the attributes for people on the first page does not appear on the last") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${firstPageList});
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12842 | Test Summary: Check that it is possible to search the Attribute for Account list"
	@priority = 4
	test CanSearchAttributeForAccountList {
		var searchedAccountAttribute = "companyId";
		var unsearchedAccountAttribute = "domains";

		task ("Click to select attribute for account") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("Search for account attributes") {
			ACUtils.searchBar(searchItem = ${searchedAccountAttribute});

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${searchedAccountAttribute});
		}

		task ("Check that unsearched account attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${unsearchedAccountAttribute});
		}

		task ("Search by name of a account attributes that does not exist") {
			ACUtils.searchBar(searchItem = "gold");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12781 | Test Summary: Check that it is possible to search the Attribute for People list"
	@priority = 4
	test CanSearchAttributeForPeopleList {
		var foundPeopleAttribute = "birthday";
		var notFoundPeopleAttribute = "createDate,firstName";

		task ("Click to select attribute for people") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("Search for people attributes") {
			ACUtils.searchBar(searchItem = ${foundPeopleAttribute});

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundPeopleAttribute});
		}

		task ("Check that unsearched people attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundPeopleAttribute});
		}

		task ("Search by name of a people attributes that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

	@description = "Story: LRAC-10867 | Automation ID: LRAC-12911 | Test Summary: Check that it is possible to search the Attribute for Orders list"
	@priority = 4
	test CanSearchAttributeInOrdersList {
		var searchedOrdersAttribute = "orderId";
		var unsearchedOrdersAttribute = "currencyCode,orderDate";

		task ("Click to select attribute for orders") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Order");
		}

		task ("Search for orders attributes") {
			ACUtils.searchBar(searchItem = ${searchedOrdersAttribute});

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${searchedOrdersAttribute});
		}

		task ("Check that unsearched orders attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${unsearchedOrdersAttribute});
		}

		task ("Search by name of an order attributes that does not exist") {
			ACUtils.searchBar(searchItem = "accountEntryId");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

	@description = "Story: LRAC-10866 | Automation ID: LRAC-12903 | Test Summary: Check that it is possible to search the Attribute for Product list"
	@priority = 4
	test CanSearchAttributeInProductList {
		var foundProductsAttribute = "currencyCode";
		var notFoundProductsAttribute = "name,description";

		task ("Click to select attribute for products") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Products");
		}

		task ("Search for products attributes") {
			ACUtils.searchBar(searchItem = ${foundProductsAttribute});

			ACUtils.viewResultsMessage(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("Check that a search result is found") {
			ACDXPSettings.viewGenericListItem(itemValueList = ${foundProductsAttribute});
		}

		task ("Check that unsearched products attributes do not appear in the search result") {
			ACDXPSettings.viewGenericListItemNotPresent(itemValueList = ${notFoundProductsAttribute});
		}

		task ("Search by name of a products attributes that does not exist") {
			ACUtils.searchBar(searchItem = "ACQA");
		}

		task ("Check that no result is found for the search") {
			ACUtils.viewGenericText(textValueList = "No attributes were found.");
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12835 | Test Summary: Select Attributes for Account"
	@priority = 5
	test CanSelectAccountAttributes {
		task ("Get the number of attributes currently synced") {
			var syncAccountNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "Account");
		}

		task ("Enable two attributes for Account") {
			ACDXPSettings.syncAttributes(
				attributeCategory = "Account",
				attributeNameList = "externalReferenceCode,uuid_");
		}

		task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "Account",
				currentAttributeNumber = ${syncAccountNumberStart},
				increaseAttributeNumber = 2);
		}

		task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

		task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

		task ("Check selecteded number of account attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "Account",
				currentAttributeNumber = ${syncAccountNumberStart},
				increaseAttributeNumber = 2);
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12777 | Test Summary: Select Attributes for People"
	@priority = 5
	test CanSelectAttributesForPeople {
		task ("Get the number of attributes currently synced") {
			var syncPeopleNumberStart = ACDXPSettings.getSyncNumberPreview(attributeCategory = "People");
		}

		task ("Enable two attributes for People") {
			ACDXPSettings.syncAttributes(
				attributeCategory = "People",
				attributeNameList = "comments,externalReferenceCode");
		}

		task ("Check that the number of synchronized attributes has increased by 2 attributes") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = ${syncPeopleNumberStart},
				increaseAttributeNumber = 2);
		}

		task ("Save and Finish the wizard") {
			Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
		}

		task ("Go to the attributes page in the sidebar") {
			ACDXPSettings.navToSyncedAttributes();
		}

		task ("Check selected account group number") {
			ACDXPSettings.viewIncreaseOrDecreaseSyncNumber(
				attributeCategory = "People",
				currentAttributeNumber = ${syncPeopleNumberStart},
				increaseAttributeNumber = 2);
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12844 | Test Summary: Check that it is possible to sort the Attribute for Account list by attribute and data type"
	@priority = 3
	test CanSortAttributeForAccountList {
		var indexList = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18";
		var attributesAscendingOrder = '''
			accountEntryId,companyId,createDate,defaultCPaymentMethodKey,description,domains,
			emailAddress,externalReferenceCode,logoId,modifiedDate,name,parentAccountEntryId,
			restrictMembership,status,taxExemptionCode,taxIdNumber,type_,uuid_
		''';
		var attributesDescendingOrder = '''
			uuid_,type_,taxIdNumber,taxExemptionCode,status,restrictMembership,parentAccountEntryId,name,
			modifiedDate,logoId,externalReferenceCode,emailAddress,domains,description,defaultCPaymentMethodKey,
			createDate,companyId,accountEntryId
		''';
		var attributesDataTypeAscending = '''
			restrictMembership,status,accountEntryId,companyId,logoId,parentAccountEntryId,defaultCPaymentMethodKey,
			description,domains,emailAddress,externalReferenceCode,name,taxExemptionCode,taxIdNumber,type_,
			uuid_,createDate,modifiedDate
		''';
		var attributesDataTypeDescending = '''
			createDate,modifiedDate,defaultCPaymentMethodKey,description,domains,emailAddress,externalReferenceCode,name,
			taxExemptionCode,taxIdNumber,type_,uuid_,accountEntryId,companyId,logoId,parentAccountEntryId,
			status,restrictMembership
		''';

		task ("Click to configure Account attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("See that the list is sorted by attributes in the ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesAscendingOrder});
		}

		task ("See that the list is sorted by attributes in the descending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDescendingOrder});
		}

		task ("See that the list is sorted by the data type of the attributes in ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDataTypeAscending});
		}

		task ("See that the list is sorted by the data type of the attributes in descending order") {
			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDataTypeDescending});
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12783 | Test Summary: Check that it is possible to sort the Attribute for People list by attribute and data type"
	@priority = 3
	test CanSortAttributeForPeopleList {
		var indexList1 = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50";
		var indexList2 = "1,2";
		var attributesAscendingOrder1 = '''
			agreedToTermsOfUse,birthday,classNameId,classPK,
			comments,companyId,companyId,contactId,contactId,createDate,createDate,defaultUser,emailAddress,
			emailAddress,emailAddressVerified,employeeNumber,employeeStatusId,externalReferenceCode,
			facebookId,facebookSn,firstName,firstName,googleUserId,greeting,hoursOfOperation,jabberSn,jobClass,
			jobTitle,languageId,lastName,lastName,ldapServerId,male,middleName,middleName,modifiedDate,modifiedDate,openId,
			parentContactId,portraitId,prefixListTypeId,screenName,skypeSn,smsSn,status,suffixListTypeId,
			timeZoneId,twitterSn,userId
		''';
		var attributesAscendingOrder2 = "userName,uuid";
		var attributesDescendingOrder1 = '''
			uuid,userName,userId,twitterSn,timeZoneId,
			suffixListTypeId,status,smsSn,skypeSn,screenName,prefixListTypeId,portraitId,
			parentContactId,openId,modifiedDate,modifiedDate,middleName,middleName,male,ldapServerId,
			lastName,lastName,languageId,jobTitle,jobClass,jabberSn,hoursOfOperation,greeting,googleUserId,
			firstName,firstName,facebookSn,facebookId,externalReferenceCode,employeeStatusId,employeeNumber,
			emailAddressVerified,emailAddress,emailAddress,defaultUser,createDate,createDate,contactId,
			contactId,companyId,companyId,comments,classPK,classNameId
		''';
		var attributesDescendingOrder2 = "birthday,agreedToTermsOfUse";
		var attributesDataTypeAscending1 = '''
			male,agreedToTermsOfUse,defaultUser,emailAddressVerified,
			birthday,createDate,modifiedDate,createDate,modifiedDate,status,classNameId,classPK,companyId,contactId,
			employeeStatusId,parentContactId,prefixListTypeId,suffixListTypeId,companyId,contactId,facebookId,
			ldapServerId,portraitId,timeZoneId,userId,emailAddress,employeeNumber,facebookSn,firstName,hoursOfOperation,
			jabberSn,jobClass,jobTitle,lastName,middleName,skypeSn,smsSn,twitterSn,userName,comments,emailAddress,externalReferenceCode,
			firstName,googleUserId,greeting,jobTitle,languageId,lastName,middleName,openId
		''';
		var attributesDataTypeAscending2 = "screenName,uuid";
		var attributesDataTypeDescending1 = '''
			emailAddress,employeeNumber,facebookSn,firstName,hoursOfOperation,
			jabberSn,jobClass,jobTitle,lastName,middleName,skypeSn,smsSn,twitterSn,userName,comments,emailAddress,externalReferenceCode,
			firstName,googleUserId,greeting,jobTitle,languageId,lastName,middleName,openId,screenName,uuid,
			classNameId,classPK,companyId,contactId,employeeStatusId,parentContactId,prefixListTypeId,suffixListTypeId,
			companyId,contactId,facebookId,ldapServerId,portraitId,timeZoneId,userId,status,birthday,createDate,
			modifiedDate,createDate,modifiedDate,male,agreedToTermsOfUse
		''';
		var attributesDataTypeDescending2 = "defaultUser,emailAddressVerified";

		task ("Click to configure people attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");

			ACUtils.changePagination(itemsPerPage = 50);
		}

		task ("See that the list is sorted by attributes in the ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList1},
				itemValueList = ${attributesAscendingOrder1});

			ACUtils.checkAnyPage(pageNumber = 2);

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList2},
				itemValueList = ${attributesAscendingOrder2});

			ACUtils.checkAnyPage(pageNumber = 1);
		}

		task ("See that the list is sorted by attributes in the descending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList1},
				itemValueList = ${attributesDescendingOrder1});

			ACUtils.checkAnyPage(pageNumber = 2);

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList2},
				itemValueList = ${attributesDescendingOrder2});

			ACUtils.checkAnyPage(pageNumber = 1);
		}

		task ("See that the list is sorted by the data type of the attributes in ascending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");

			ACDXPSettings.setSortDirection(sortDirection = "up");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList1},
				itemValueList = ${attributesDataTypeAscending1});

			ACUtils.checkAnyPage(pageNumber = 2);

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList2},
				itemValueList = ${attributesDataTypeAscending2});

			ACUtils.checkAnyPage(pageNumber = 1);
		}

		task ("See that the list is sorted by the data type of the attributes in descending order") {
			ACDXPSettings.setSortDirection(sortDirection = "down");

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList1},
				itemValueList = ${attributesDataTypeDescending1});

			ACUtils.checkAnyPage(pageNumber = 2);

			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList2},
				itemValueList = ${attributesDataTypeDescending2});
		}
	}

	@description = "Story: LRAC-10867 | Automation ID: LRAC-12914 | Test Summary: Check that it is possible to sort the Attribute for Order list by Attribute Name and Data Type"
	@priority = 3
	test CanSortOrdersListByAttribute {
		var indexList = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35";
		var attributesAscendingOrder = '''
			accountId,channelId,cpDefinitionId,createDate,createDate,currencyCode,
			customFields,customFields,externalReferenceCode,externalReferenceCode,
			finalPrice,id,id,modifiedDate,modifiedDate,name,options,orderDate,orderId,
			orderItems,orderStatus,orderTypeExternalReferenceCode,orderTypeId,
			parentOrderItemId,paymentMethod,paymentStatus,quantity,sku,status,subscription,
			total,unitOfMeasure,unitPrice,userId,userId
		''';
		var attributesDescendingOrder = '''
			userId,userId,unitPrice,unitOfMeasure,total,subscription,status,sku,quantity,
			paymentStatus,paymentMethod,parentOrderItemId,orderTypeId,orderTypeExternalReferenceCode,
			orderStatus,orderItems,orderId,orderDate,options,name,modifiedDate,modifiedDate,
			id,id,finalPrice,externalReferenceCode,externalReferenceCode,customFields,customFields,
			currencyCode,createDate,createDate,cpDefinitionId,channelId,accountId
		''';
		var attributesDataTypeAscending = '''
			orderItems,total,subscription,accountId,channelId,id,orderStatus,orderTypeId,
			paymentStatus,status,userId,cpDefinitionId,id,orderId,parentOrderItemId,quantity,
			userId,finalPrice,unitPrice,customFields,customFields,name,createDate,currencyCode,
			externalReferenceCode,modifiedDate,orderDate,orderTypeExternalReferenceCode,
			paymentMethod,createDate,externalReferenceCode,modifiedDate,options,sku,unitOfMeasure
		''';
		var attributesDataTypeDescending = '''
			createDate,currencyCode,externalReferenceCode,modifiedDate,orderDate,orderTypeExternalReferenceCode,
			paymentMethod,createDate,externalReferenceCode,modifiedDate,options,sku,unitOfMeasure,customFields,
			customFields,name,finalPrice,unitPrice,accountId,channelId,id,orderStatus,
			orderTypeId,paymentStatus,status,userId,cpDefinitionId,id,orderId,parentOrderItemId,
			quantity,userId,subscription,total,orderItems
		''';

		task ("Click to configure Orders attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Order");

			ACUtils.changePagination(itemsPerPage = 50);
		}

		task ("Sort the list by the Attribute Name column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesAscendingOrder});
		}

		task ("Sort the list by the Attribute Name column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDescendingOrder});
		}

		task ("Sort the list by the Data Type column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDataTypeAscending});
		}

		task ("Sort the list by the Data Type column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDataTypeDescending});
		}
	}

	@description = "Story: LRAC-10866 | Automation ID: LRAC-12905 | Test Summary: Check that it is possible to sort the Attribute for Product list by Attribute Name and Data Type"
	@priority = 3
	test CanSortProductListByAttribute {
		var indexList = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34";
		var attributesAscendingProduct = '''
			catalogId,categoryIds,createDate,currencyCode,customFields,description,displayDate,expirationDate,
			externalReferenceCode,externalReferenceCode,externalReferenceCode,id,id,id,metaDescription,
			metaKeyword,metaTitle,modifiedDate,name,name,name,productChannelIds,productId,productOptions,
			productSpecifications,productType,siteId,skus,status,subscriptionEnabled,tags,type,urls,vocabulary
		''';
		var attributesDescendingProduct = '''
			vocabulary,urls,type,tags,subscriptionEnabled,status,skus,siteId,productType,productSpecifications,
			productOptions,productId,productChannelIds,name,name,name,modifiedDate,metaTitle,metaKeyword,
			metaDescription,id,id,id,externalReferenceCode,externalReferenceCode,externalReferenceCode,
			expirationDate,displayDate,description,customFields,currencyCode,createDate,categoryIds,catalogId
		''';
		var attributesDataTypeAscending = '''
			categoryIds,productChannelIds,productOptions,productSpecifications,skus,tags,id,siteId,catalogId,id,
			productId,status,id,customFields,description,metaDescription,metaKeyword,metaTitle,name,urls,
			externalReferenceCode,name,vocabulary,createDate,displayDate,expirationDate,externalReferenceCode,
			modifiedDate,productType,currencyCode,externalReferenceCode,name,type,subscriptionEnabled
		''';
		var attributesDataTypeDescending = '''
			subscriptionEnabled,externalReferenceCode,name,vocabulary,createDate,displayDate,expirationDate,
			externalReferenceCode,modifiedDate,productType,currencyCode,externalReferenceCode,name,type,
			customFields,description,metaDescription,metaKeyword,metaTitle,name,urls,id,siteId,catalogId,
			id,productId,status,id,categoryIds,productChannelIds,productOptions,productSpecifications,
			skus,tags
		''';

		task ("Click to configure products attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Products");

			ACUtils.changePagination(itemsPerPage = 50);
		}

		task ("Sort the list by the Attribute Name column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Attribute");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesAscendingProduct});
		}

		task ("Sort the list by the Attribute Name column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDescendingProduct});
		}

		task ("Sort the list by the Data Type column (Ascending)") {
			ManagementBar.setFilterAndOrder(orderBy = "Data Type");

			ACDXPSettings.setSortDirection(sortDirection = "up");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDataTypeAscending});
		}

		task ("Sort the list by the Data Type column (Descending)") {
			ACDXPSettings.setSortDirection(sortDirection = "down");
		}

		task ("Check that the list is sorted correctly") {
			ACDXPSettings.viewGenericListItemInOrder(
				indexList = ${indexList},
				itemValueList = ${attributesDataTypeDescending});
		}
	}

	@description = "Story: LRAC-10865 | Automation ID: LRAC-12841 | Test Summary: Check that all defaults attributes are being checked for Account"
	@priority = 4
	test CheckAllDefaultsAttributesAreBeingCheckedForAccounts {
		var defaultAttributesName = '''
            companyId,createDate,defaultCPaymentMethodKey,description,
            domains,logoId,modifiedDate,parentAccountEntryId,restrictMembership,
			status,taxExemptionCode,taxIdNumber,type_
        ''';

		task ("Click to configure account attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("See that the all the default attributes are checked") {
			for (var attribute : list ${defaultAttributesName}) {
				AssertElementPresent(
					key_attributeName = ${attribute},
					locator1 = "ACDXPSettings#CHECK_SELECT_ATTRIBUTES_ENABLE");
			}
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12779 | Test Summary: Check that all defaults attributes are being checked for Attribute for People"
	@priority = 4
	test CheckAllDefaultsAttributesAreCheckedForPeopleAttribute {
		var defaultAttributes = "birthday,firstName,firstName,jobTitle,jobTitle,lastName,lastName,timeZoneId";

		task ("Click to configure people attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("See that the all the default attributes are checked") {
			ACUtils.changePagination(itemsPerPage = 50);

			for (var attribute : list ${defaultAttributes}) {
				AssertElementPresent(
					key_attributeName = ${attribute},
					locator1 = "ACDXPSettings#CHECK_SELECT_ATTRIBUTES_ENABLE");
			}
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12837 | Test Summary: Cannot deselect required Attributes for Account"
	@priority = 5
	test CheckNotPossibleDeselectRequiredAttributesForAccounts {
		var requiredAttributes = "accountEntryId,emailAddress,name";

		task ("Click to configure account attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Account");
		}

		task ("See that the required attributes can not be deselected (the input is disabled)") {
			for (var attribute : list ${requiredAttributes}) {
				AssertElementPresent(
					key_requiredAttribute = ${attribute},
					locator1 = "ACDXPSettings#ATTRIBUTES_CHECKBOX_DISABLED");
			}
		}
	}

	@description = "Story: LRAC-10867 | Automation ID: LRAC-12910 | Test Summary: Cannot deselect required Attributes for Orders"
	@priority = 5
	test CheckNotPossibleToDeselectRequiredAttributesForOrders {
		var requiredAttributes = '''
			accountId,channelId,cpDefinitionId,createDate,currencyCode,customFields,externalReferenceCode,
			finalPrice,id,modifiedDate,name,options,orderDate,orderId,orderItems,orderStatus,
			orderTypeExternalReferenceCode,orderTypeId,parentOrderItemId,paymentMethod,paymentStatus,
			quantity,sku,status,subscription,total,unitOfMeasure,unitPrice,userId
			''';

		task ("Click to configure orders attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "Order");
		}

		task ("See that the required attributes can not be deselected") {
			ACUtils.changePagination(itemsPerPage = 50);

			for (var attribute : list ${requiredAttributes}) {
				AssertElementPresent(
					key_requiredAttribute = ${attribute},
					locator1 = "ACDXPSettings#ATTRIBUTES_CHECKBOX_DISABLED");
			}
		}
	}

	@description = "Story: LRAC-10860 | Automation ID: LRAC-12778 | Test Summary: Cannot deselect required Attributes for People"
	@priority = 5
	test CheckNotPossibleToDeselectRequiredAttributesForPeople {
		var requiredAttributes = '''
			classPK,contactId,createDate,createDate,
			emailAddress,emailAddress,modifiedDate,modifiedDate,userId
		''';
		var requiredAttribute = "uuid";

		task ("Click to configure people attributes") {
			ACDXPSettings.clickToSelectAttributes(attributeCategory = "People");
		}

		task ("See that the required attributes can not be deselected (the input is disabled)") {
			ACUtils.changePagination(itemsPerPage = 50);

			for (var attribute : list ${requiredAttributes}) {
				AssertElementPresent(
					key_requiredAttribute = ${attribute},
					locator1 = "ACDXPSettings#ATTRIBUTES_CHECKBOX_DISABLED");
			}

			ACUtils.checkAnyPage(pageNumber = 2);

			AssertElementPresent(
				key_requiredAttribute = ${requiredAttribute},
				locator1 = "ACDXPSettings#ATTRIBUTES_CHECKBOX_DISABLED");
		}
	}

}