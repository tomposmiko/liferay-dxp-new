@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.tearDownCP();

			UserGroup.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "The Navigation Menu widget display style can be changed through setting portal-ext properties."
	@priority = "3"
	test AutomaticChangesToDisplayStyle {
		property custom.properties = "display.style.options=from-level-1-to-all-sublevels${line.separator}navigation.display.style[from-level-1-with-title]=root-layout,absolute,1,auto,true${line.separator}display.style.default=";
		property testray.component.names = "Navigation";

		task ("Add a page to the site") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				panel = "Site Administration",
				portlet = "Pages");

			SitePages.addPublicPage(pageName = "Navigation Display Test Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Add a Navigation Nenu widget") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Assert the page displays in the breadcrumb") {
			var key_pageName = "Navigation Display Test Page";

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}
	}

	@description = "This is a use case for LPS-67191. After configuring the Navigation Menu widget to use the 'Split Button Dropdowns' display template, various actions should still be working. A user should still be able to 1) select different display templates, 2) add new pages, 3) edit page names, 4) add widgets to a page, 5) configure widget look and feel, 6) see pages in the Navigation Menu widget, 7) sign in after signing out, and 8) reorder pages."
	@priority = "5"
	test NavigationMenuConfigureDisplayTemplate {
		task ("Add a page to the site") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				panel = "Site Administration",
				portlet = "Pages");

			SitePages.addPublicPage(pageName = "Navigation Test Page1");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Test Page1");
		}

		task ("Add a Navigation Menu widget to the page") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Configure the Navigation Menu widget to use the 'Split Button Dropdowns display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation",
				templateName = "Split Button Dropdowns");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Test Page1");
		}

		task ("Assert user can choose a different display template by configuring the Navigation Menu widget to use the 'Bar minimally styled' display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation",
				templateName = "Bar minimally styled");
		}

		task ("Navigate to pages admin") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				panel = "Site Administration",
				portlet = "Pages");
		}

		task ("Assert user can add new pages to the site by adding a second page to the site") {
			SitePages.addPublicPage(pageName = "Navigation Test Page2");
		}

		task ("Assert user can edit the name of a page by editing the name of the second page") {
			Navigator.gotoPage(pageName = "Navigation Test Page2");

			Navigator.gotoEditPageViaControlMenu(pageName = "Navigation Test Page2");

			Page.editName(pageNameEdit = "Navigation Test Page2 Edit");

			Page.view(
				pageName = "Navigation Test Page2 Edit",
				privacy = "Public Pages");
		}

		task ("Assert user can add new widgets to a page by adding the Blogs widget to the second page") {
			Navigator.gotoPage(pageName = "Navigation Test Page2 Edit");

			Portlet.addPG(portletName = "Blogs");
		}

		task ("Assert user can configure 'Look and Feel' for a widget by configuring the Blogs widget 'Look and Feel'") {
			Portlet.gotoPortletOptions(portletOption = "Look and Feel Configuration");

			Portlet.configureCustomTitleViaLookandfeelPG(portletName = "Blogs");
		}

		task ("Assert pages are visible in the Navigation Menu widget") {
			Navigator.gotoPage(pageName = "Navigation Test Page1");

			AssertClick(
				key_pageName = "Navigation Test Page2 Edit",
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Test Page2 Edit");

			AssertVisible(
				key_pageName = "Navigation Test Page2 Edit",
				locator1 = "Home#PAGE_ACTIVE");
		}

		task ("Assert user can sign in after signing out") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Assert user can reorder pages in the Navigation Menu widget") {
			DragAndDrop.dragAndDropToObject(
				locator1 = "Home#PAGE_1",
				locator2 = "Home#PAGE_2",
				value1 = "Home");
		}
	}

	@description = "Navigation Menu widget should continue to work when reselecting the default display template"
	@priority = "3"
	test ValidateReturnToDefaultStyle {
		property custom.properties = "display.style.default=from-level-1-with-title${line.separator}navigation.display.style[from-level-1-with-title]=root-layout,absolute,1,auto,true";
		property testray.component.names = "Navigation";

		task ("Add a page to the site") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				panel = "Site Administration",
				portlet = "Pages");

			SitePages.addPublicPage(pageName = "Navigation Display Test Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Add a Navigation Menu widget to the page") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Assert the Navigation Menu widget has the page") {
			var key_pageName = "Navigation Display Test Page";

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}

		task ("Configure Navigation Menu widget to use the default 'Bar minimally styled' display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation Menu",
				templateName = "Bar minimally styled");
		}

		task ("Assert the Navigation Menu widget has the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}
	}

	@priority = "4"
	test ViewNoAddPagePermissionsPG {
		property testray.component.names = "Navigation,Permissions";

		task ("Add a page to the site") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				panel = "Site Administration",
				portlet = "Pages");

			SitePages.addPublicPage(pageName = "Navigation Page");
		}

		task ("Configure the page so the Power User has all permissions for that page") {
			PermissionsInline.gotoPagePG(pageName = "Navigation Page");

			Role.definePermissionPG(
				permissionsList = "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_CONFIGURE_APPLICATIONS_CHECKBOX,CONTENT_PERMISSIONS_CUSTOMIZE_CHECKBOX,CONTENT_PERMISSIONS_DELETE_CHECKBOX,CONTENT_PERMISSIONS_DELETE_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Power User");

			IFrame.selectTopFrame();
		}

		task ("Add a user with the Power User role") {
			Navigator.gotoPage(pageName = "Navigation Page");

			ProductMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.addCP(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			ProductMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editPasswordCP(
				userEmailAddress = "userea@liferay.com",
				userScreenName = "usersn");

			ProductMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.assignRegRoleCP(
				roleTitle = "Power User",
				userScreenName = "usersn");
		}

		task ("Sign in as the created user") {
			User.logoutPG();

			User.loginUserPG(userEmailAddress = "userea@liferay.com");
		}

		task ("Assert the user can add widgets to the page") {
			Navigator.gotoPage(pageName = "Navigation Page");

			Dockbar.viewAddTabsWithNoAddPagePermission();
		}

		task ("Sign back in as the default admin user") {
			User.logoutPG();

			User.loginUserPG();
		}
	}

}