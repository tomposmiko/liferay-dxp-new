@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-150277=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a company Object with a Text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");
		}

		task ("Enable Inputs Fragment collection in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			task ("Disable Inputs Fragment collection in Gogo Shell") {
				GogoShell.openGogoShellAdmin();

				GogoShell.executeCommand(commandName = "scr:disable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

				GogoShell.viewOutput(outputContent = "true");
			}

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	@description = "This is a test for LPS-151754. The page designer can configure and map the Submit Button on content page."
	@priority = "4"
	test ConfigureSubmitButtonOnContentPage {
		property test.name.skip.portal.instance = "SubmitButton#ConfigureSubmitButtonOnContentPage";

		task ("Given a page designer has a Form Container mapped to an entity with text field") {
			task ("Add a web content") {
				JSONWebcontent.addWebContent(
					content = "Continue",
					groupName = "Test Site Name",
					title = "Web Content Title");
			}

			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}
		}

		task ("When the page designer adds a Submit Button fragment into the Form Container") {
			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Submit Button");
		}

		task ("Then the page designer could configure the Submit Button fragment") {
			task ("Change the Type of Submit Button to Secondary") {
				PageEditor.gotoConfiguration(fragmentName = "Submit Button");

				PageEditor.configureFragment(type = "Secondary");

				PageEditor.viewFragmentStyle(
					fragmentName = "Button",
					type = "secondary");
			}

			task ("Change the Size of Submit Button to Small") {
				PageEditor.configureFragment(size = "Small");

				PageEditor.viewFragmentStyle(
					fragmentName = "Button",
					size = "sm");
			}

			task ("Edit the inline text of Submit Button") {
				PageEditor.editFragmentText(
					className = "button",
					fragmentName = "Submit Button",
					id = "text",
					text = "Invoke");

				PageEditor.viewFragmentEditableText(
					className = "button",
					editableText = "Invoke",
					fragmentName = "Submit Button",
					id = "text");
			}

			task ("Map the Submit Button to the Content field") {
				PageEditorMapping.gotoEditableFieldMapping(
					className = "button",
					fragmentName = "Submit Button",
					id = "text");

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Content");

				PageEditor.viewFragmentEditableText(
					className = "button",
					editableText = "Continue",
					fragmentName = "Submit Button",
					id = "text");
			}
		}
	}

	@description = "This is a test for LPS-151754. The page designer can configure and map the Submit Button on display page template."
	@priority = "4"
	test ConfigureSubmitButtonOnDisplayPageTemplate {
		property test.name.skip.portal.instance = "SubmitButton#ConfigureSubmitButtonOnDisplayPageTemplate";
		property testray.component.names = "Display Pages,Fragments";

		task ("Given a page designer has a Form Container mapped to an entity with text field") {
			task ("Add a web content") {
				JSONWebcontent.addWebContent(
					content = "Continue",
					groupName = "Test Site Name",
					title = "Web Content Title");
			}

			task ("Add a Form Container framgment to display page template for Web Content Article and Basic Web Content") {
				JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
					contentType = "Web Content Article",
					displayPageTemplateEntryName = "Display Page Name",
					groupName = "Test Site Name",
					subType = "Basic Web Content");

				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}
		}

		task ("When the page designer adds a Submit Button fragment into the Form Container") {
			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Submit Button");
		}

		task ("Then the page designer could configure the Submit Button fragment") {
			task ("Change the Type of Submit Button to Secondary") {
				PageEditor.gotoConfiguration(fragmentName = "Submit Button");

				PageEditor.configureFragment(type = "Secondary");

				PageEditor.viewFragmentStyle(
					fragmentName = "Button",
					type = "secondary");
			}

			task ("Change the Size of Submit Button to Small") {
				PageEditor.configureFragment(size = "Small");

				PageEditor.viewFragmentStyle(
					fragmentName = "Button",
					size = "sm");
			}

			task ("Edit the inline text of Submit Button") {
				PageEditor.editFragmentText(
					className = "button",
					fragmentName = "Submit Button",
					id = "text",
					text = "Invoke");

				PageEditor.viewFragmentEditableText(
					className = "button",
					editableText = "Invoke",
					fragmentName = "Submit Button",
					id = "text");
			}

			task ("Map the Submit Button to the Content field") {
				PageEditorMapping.mapEditableTextToField(
					className = "button",
					field = "Content",
					fragmentName = "Submit Button",
					id = "text");

				PageEditor.publish();

				DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				WebContentNavigator.gotoEntryMenuItem(
					entry = "Web Content Title",
					menuItem = "View Content");

				ContentPages.viewFragmentText(
					fragmentName = "button",
					id = "text",
					text = "Continue");
			}
		}
	}

	@description = "This is a test for LPS-151754. View warning message when publish content page with hidden Submit Button."
	@priority = "4"
	test ViewWarningMessageWhenPublishContentPageWithHiddenSubmitButton {
		property test.name.skip.portal.instance = "SubmitButton#ViewWarningMessageWhenPublishContentPageWithHiddenSubmitButton";

		task ("Given a page designer has a Form Container with hidden Submit Button") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");

				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}

			task ("Add a Submit Button fragment inside Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Submit Button");
			}

			task ("Hide the Submit Button") {
				PageEditor.hideFragmentViaPageStyles(fragmentName = "Submit Button");

				PageEditor.viewFragmentNotPresent(fragmentName = "Submit Button");
			}
		}

		task ("When the page designer publishes the page") {
			Button.click(button = "Publish");
		}

		task ("Then the page designer sees warning message") {
			Modal.publish(warningMessage = "This page contains one or several forms with missing or hidden form components. Are you sure you want to publish it?");
		}

		task ("When the page designer accesses to content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page designer cannot see the Submit Button") {
			AssertNotVisible(
				fragmentName = "button",
				id = "text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}

		task ("When the page designer publishes the page after unhiding the Submit Button") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Browser");

			Click(
				key_nodeName = "Form Container",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_COLLAPSED");

			Click(
				key_nodeName = "Submit Button",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE");

			PageEditor.configureFragment(hideFragment = "false");

			PageEditor.viewFragmentEditableText(
				className = "button",
				editableText = "Submit",
				fragmentName = "Submit Button",
				id = "text");

			Button.click(button = "Publish");
		}

		task ("Then the page designer cannot see warning message") {
			AssertElementNotPresent(locator1 = "Modal#BODY");

			Alert.viewSuccessMessage();
		}

		task ("When the page designer accesses to content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page designer sees the Submit Button") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "text",
				text = "Submit");
		}

		task ("When the page designer deletes the Submit Button in page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Submit Button");
		}

		task ("Then the page designer sees the Form Container is empty") {
			AssertVisible(
				key_fragmentName = "Form Container",
				key_messageInfo = "Place fragments here.",
				key_position = "1",
				locator1 = "Fragment#NO_FRAGMENTS_MESSAGE");
		}
	}

}