@component-name = "portal-publications"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-163875. It shouldn't be possible to enable Publications is a remote live site."
	@priority = 4
	test CannotEnablePublicationsInRemoteLiveSite {
		property app.server.bundles.size = "1";
		property app.server.types = "tomcat";
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property database.types = "mysql";
		property databases.size = "1";
		property minimum.slave.ram = "24";
		property test.name.skip.portal.instance = "Publications#CanEnablePublicationsInRemoteLiveSite";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		Staging.remoteStagingSetUpViaJson(
			groupName = "Site Name",
			remotePort = 9080);

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Check.checkToggleSwitch(locator1 = "Publications#ENABLE_PUBLICATIONS_TOGGLE_SWITCH");

		Click(locator1 = "Button#SUBMIT");

		Alert.viewErrorMessage(errorMessage = "Staging is enabled for at least one site or asset library in the current virtual instance. Publications and staging cannot be used together.");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Check.checkToggleSwitch(locator1 = "Publications#ENABLE_PUBLICATIONS_TOGGLE_SWITCH");

		Click(locator1 = "Button#SUBMIT");

		Alert.viewErrorMessage(errorMessage = "Staging is enabled for at least one site or asset library in the current virtual instance. Publications and staging cannot be used together.");
	}

	@priority = 5
	test CannotEnablePublicationsWhenStagingIsTurnedOn {
		var siteName = TestCase.getSiteName(siteName = ${siteName});

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging",
			site = "Guest");

		Staging.activateStagingCP(siteName = ${siteName});

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Check.checkToggleSwitch(locator1 = "Publications#ENABLE_PUBLICATIONS_TOGGLE_SWITCH");

		Click(locator1 = "Button#SUBMIT");

		Alert.viewErrorMessage(errorMessage = "Staging is enabled for at least one site or asset library in the current virtual instance. Publications and staging cannot be used together.");
	}

	@description = "Publications test in a non-root portal context."
	@priority = 4
	test CreatePublicationsInNonRootContext {
		property app.server.types = "tomcat";
		property database.types = "mysql";
		property portal.context = "liferay";
		property skip.clean-app-server-deploy-dir = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "PublicationsConfiguration#CreatePublicationsInNonRootContext";

		Publications.enablePublications();

		AssertTextEquals(
			locator1 = "Publications#MANAGE_PUBLICATIONS_PAGE_TITLE",
			value1 = "Publications");

		AssertTextPresent(
			key_publicationName = "Production",
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Production");

		Publications.createNewPublication(
			gotoPublicationsAdmin = "true",
			publicationDescription = "Publication Description",
			publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");
	}

	@priority = 5
	test EnableDisablePublicationsAndSandboxViaInstanceSettings {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Publications User",
			userEmailAddress = "userea@liferay.com");

		Publications.enablePublications(
			enableSandboxOnly = "true",
			gotoInstancesettings = "true");

		Publications.createNewPublication(publicationName = "Publication Name");

		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		var sandboxedPublicationName = Publications.generateSandboxedPublicationName(userScreenName = "usersn");

		Publications.viewSandboxedPublication(
			sandboxedPublicationName = ${sandboxedPublicationName},
			sandboxedUser = "true");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		Publications.disablePublications(gotoInstancesettings = "true");

		FormFields.viewCheckboxNotChecked(fieldName = "Enabled");

		FormFields.viewCheckboxNotChecked(fieldName = "Sandbox Enabled");

		AssertElementNotPresent(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");
	}

	@priority = 5
	test EnableDisablePublicationsViaPublicationsAdmin {
		property portal.acceptance = "true";

		JSONGroup.addGroup(groupName = "Site Name");

		Publications.enablePublications();

		Publications.createNewPublication(publicationName = "Publication Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		Publications.disablePublications();

		AssertElementNotPresent(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.viewDefault();
	}

	@priority = 5
	test EnablePublicationsAndGoToOverview {
		Publications.enablePublications();

		AssertTextEquals(
			locator1 = "Publications#MANAGE_PUBLICATIONS_PAGE_TITLE",
			value1 = "Publications");

		AssertTextPresent(
			key_publicationName = "Production",
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Production");

		Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

		for (var menuItem : list "Select a Publication,Create New Publication") {
			MenuItem.viewPresent(menuItem = ${menuItem});
		}

		for (var menuItem : list "Review Changes,Schedule,Publish") {
			MenuItem.viewNotPresent(menuItem = ${menuItem});
		}

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Publishing");

		AssertElementNotPresent(
			key_portlet = "Staging",
			locator1 = "ProductMenu#PORTLET");
	}

}