@component-name = "portal-segmentation"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
	property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Navigator.openURL();

		task ("Create an user using JSONWS") {
			JSONUser.addUser(
				jobTitle = "Test Engineer1",
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");
		}

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Experience Content Page",
			type = "content");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		JSONRole.deleteTestRoles();

		JSONOrganization.tearDownOrganizations();
	}

	@description = "LPS-103102 Bug: Segmentation is not working after remove the user section"
	@priority = 4
	test AddExperienceAfterRemovingCriteria {
		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add Segment with user and organization criteria") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			Segmentation.fillTitle(titleField = "Segment Name");

			Segmentation.addProperties(propertyOption = "First Name");

			Segmentation.fillProperty(criterionValue = "Test");

			Segmentation.gotoSidebar(fieldType = "Organization");

			Segmentation.addSecondProperty(propertyOption = "Hierarchy Path");

			Segmentation.fillProperty(
				criterionValue = "Organization Name",
				indexNumber = 2);

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Change conjuntion to OR") {
			Segmentation.editSegment(entry = "Segment Name");

			Segmentation.changeCriterionConjunction(criterionConjunctionItem = "Or");
		}

		task ("Delete the user criteria") {
			Segmentation.deleteProperty();

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Create an experience for each segment in the Content Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default Heading");

			PageEditor.addExperience(
				experienceName = "Experience Name",
				segmentName = "Segment Name");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Experience Heading");

			PageEditor.prioritizeExperience(experienceName = "Experience Name");

			PageEditor.publish();
		}

		task ("Check heading for experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Experience Heading");
		}

		task ("Check heading for default experience") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Default Heading");
		}
	}

	@description = "LPS-147302 Given there are several users segmented, one per segment And there experiences created in a content page, one per user/segment And the experiences are all over the default experience When each user visits the content page Then the user will see the correct experience"
	@priority = 4
	test AddExperienceForDifferentUsers {
		property portal.acceptance = "true";

		task ("Create 2 more users") {
			for (var userNumb : list "2,3") {
				JSONUser.addUser(
					userEmailAddress = "userea${userNumb}@liferay.com",
					userFirstName = "userfn${userNumb}",
					userLastName = "userln${userNumb}",
					userScreenName = "usersn${userNumb}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "userea${userNumb}@liferay.com");
			}
		}

		task ("Create a segment for each user") {
			for (var sgementNumb : list "1,2,3") {
				JSONSegmentsentry.addSegment(
					fieldName = "First Name",
					groupName = "Test Site Name",
					operator = "equals",
					segmentName = "Segment With User${sgementNumb}",
					text = "userfn${sgementNumb}");
			}
		}

		task ("Edit the default experience") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");
		}

		task ("Create and edit the first experience") {
			PageEditor.addExperience(
				experienceName = "Experience User 1",
				segmentName = "Segment With User1");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "User 1");

			PageEditor.prioritizeExperience(experienceName = "Experience User 1");
		}

		task ("Create and edit the second experience") {
			PageEditor.addExperience(
				experienceName = "Experience User 2",
				segmentName = "Segment With User2");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "User 2");

			PageEditor.prioritizeExperience(experienceName = "Experience User 2");
		}

		task ("Create and edit the third experience") {
			PageEditor.addExperience(
				experienceName = "Experience User 3",
				segmentName = "Segment With User3");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "User 3");

			PageEditor.prioritizeExperience(experienceName = "Experience User 3");

			PageEditor.publish();
		}

		task ("Login with each user and check the correct experiece is shown") {
			for (var userNumb : list "1,2,3") {
				User.logoutAndLoginPG(
					freeLogin = "true",
					userLoginEmailAddress = "userea${userNumb}@liferay.com",
					userLoginFullName = "userfn${userNumb} userln${userNumb}");

				Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

				AssertTextEquals(
					locator1 = "Experience#FRAGMENT_HEADING",
					value1 = "User ${userNumb}");
			}
		}
	}

	@description = "This is a use case for LPS-106776. When the user creates a new experience, it is always placed in the last position of the list, always below the default experience and always set as non-active"
	@priority = 5
	test AddNewAnyoneExperience {
		property portal.acceptance = "true";

		task ("Edit page to add heading fragment") {
			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.viewFragmentStyle(
				fragmentName = "Heading",
				headingLevel = "h1");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");
		}

		task ("Add an Experience for that page") {
			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");
		}

		task ("Edit the experience created") {
			PageEditor.viewFragmentStyle(
				fragmentName = "Heading",
				headingLevel = "h1");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Anyone1");

			PageEditor.publish();
		}

		task ("Logout and assert the default experience is displayed") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Default");
		}
	}

	@description = "The Add new experience modals appears after click on cancel in the Edit experience modal"
	@priority = 5
	test AddNewExperienceAfterCancelEdit {
		property portal.acceptance = "true";

		task ("Add an Experience for that page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewExp1",
				segmentName = "Anyone");
		}

		task ("Open edit modal and cancel") {
			PageEditor.openExperienceMenu();

			Click(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");

			AssertClick(
				locator1 = "Button#CANCEL",
				value1 = "Cancel");
		}

		task ("Open new experience modal") {
			PageEditor.openExperienceMenu();

			Click(
				key_text = "New Experience",
				locator1 = "Button#ANY");

			SelectFrame(value1 = "relative=top");
		}

		task ("Check values displayed at modal ") {
			AssertTextEquals(
				locator1 = "PageEditor#EXPERIENCE_NEW_EXPERIENCE_MODAL_TITLE",
				value1 = "New Experience");

			AssertTextEquals(
				locator1 = "PageEditor#EXPERIENCE_NAME",
				value1 = "");
		}
	}

	@description = "LPS-130344: Segment member preview count shows the correct number of users when segments are combined"
	@priority = 5
	test AddNewExperienceBasedOtherSegmentsSegment {
		property portal.acceptance = "true";

		task ("Add user via JSONWS") {
			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Add two segments via JSONWS") {
			var segmentId1 = JSONSegmentsentry.addSegment(
				fieldName = "Last Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User1",
				text = "userln1");
			var segmentId2 = JSONSegmentsentry.addSegment(
				fieldName = "Last Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User2",
				text = "userln2");
		}

		task ("Add a segment with two conditions via JSONWS") {
			JSONSegmentsentry.addSegment(
				conditionType = "Segments",
				fieldName = "Segment",
				firstSegmentId = ${segmentId1},
				groupName = "Test Site Name",
				operator = "Or",
				secondSegmentId = ${segmentId2},
				segmentName = "Segment Title");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a experience to page") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "User1 and User2 will see this heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Log in with both users and check the experience dispalyed") {
			for (var num : list "1,2") {
				User.logoutAndLoginPG(
					freeLogin = "true",
					userLoginEmailAddress = "userea${num}@liferay.com",
					userLoginFullName = "userfn${num} userln${num}");

				Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

				AssertTextEquals(
					locator1 = "Experience#FRAGMENT_HEADING",
					value1 = "User1 and User2 will see this heading");
			}
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Country criteria"
	@priority = 5
	test AddNewExperienceOrganizationCountrySegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(
				organizationCountry = "China",
				organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Create a segment with a country criteria") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Country",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Org with Country",
				text = "china");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a experience to page") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Country",
				segmentName = "Org with Country");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Country");

			PageEditor.publish();
		}

		task ("Login with userea1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check that correct experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Date modified criteria"
	@priority = 5
	test AddNewExperienceOrganizationDateModifiedSegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			var todayUTCtime = DateUtil.getFormattedCurrentDate("yyyy-MM-dd'T'HH:mm:ss.mmm'Z'");

			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				date = ${todayUTCtime},
				fieldName = "Date Modified",
				groupName = "Test Site Name",
				operator = "not equals",
				segmentName = "Org with Date Modified");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Modified Date",
				segmentName = "Org with Date Modified");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Modified Date");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Hierarchy path criteria"
	@priority = 5
	test AddNewExperienceOrganizationHierarchyPathSegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Hierarchy Path",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Org with Hierarchy Path",
				text = "organization Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Hierarchy Path",
				segmentName = "Org with Hierarchy Path");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Hierarchy Path");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Name criteria"
	@priority = 5
	test AddNewExperienceOrganizationNameSegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Org with Name",
				text = "organization Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Name",
				segmentName = "Org with Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Name");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Organization criteria"
	@priority = 5
	test AddNewExperienceOrganizationOrganizationSegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Organization",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Users In A Specific Org",
				selectedOption = "organization Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Users In A Specific Org",
				segmentName = "Users In A Specific Org");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Users In A Specific Org");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Parent Organization criteria"
	@priority = 5
	test AddNewExperienceOrganizationParentOrganizationSegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add a child Organization via JSONWS") {
			JSONOrganization.addOrganization(
				organizationName = "Suborganization Name",
				parentOrganizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "Suborganization Name",
				parentOrganizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Parent Organization",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Org with Parent",
				selectedOption = "organization Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Parent Organization",
				segmentName = "Org with Parent");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Parent Organization");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Region criteria"
	@priority = 5
	test AddNewExperienceOrganizationRegionSegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#AddNewExperienceOrganizationRegionSegment";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(
				organizationCountry = "United States",
				organizationName = "organization Name",
				organizationRegion = "Utah");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Region",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Org with Region",
				text = "utah");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Region",
				segmentName = "Org with Region");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Modify the experience created") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Region");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Org users will see this heading");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Tag criteria"
	@priority = 5
	test AddNewExperienceOrganizationTagSegment {
		property portal.acceptance = "true";

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(organizationName = "organization Name");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "organization Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add a tag for created organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "organization Name");

			AssetCategorization.addTag(tagName = "tagName");

			PortletEntry.save();
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Tag",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Org with Tag",
				selectedOption = "tagname");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Tag",
				segmentName = "Org with Tag");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Tag");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130266: Validate if it's posible to create a experience using a segment based on Organization > Type criteria"
	@priority = 5
	test AddNewExperienceOrganizationTypeSegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#AddNewExperienceOrganizationTypeSegment";

		task ("Configure organization type") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Users",
				configurationName = "Organization Type",
				configurationScope = "System Scope");

			Button.clickAdd();

			for (var settingName : list "Name,Children Types") {
				SystemSettings.editTextAreaSetting(
					settingName = ${settingName},
					settingValue = "Location");
			}

			for (var fieldName : list "countryEnabled,rootable") {
				FormFields.enableCheckbox(fieldName = ${fieldName});
			}

			SystemSettings.saveConfiguration();
		}

		task ("Add a Organization via JSONWS") {
			JSONOrganization.addOrganization(
				organizationName = "United States",
				organizationType = "Location");
		}

		task ("Assign user to organization created") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "United States",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an organization Segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Organization",
				fieldName = "Type",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Org with Type",
				text = "t");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "Experience For Org with Type",
				segmentName = "Org with Type");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Org users will see this heading");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "Experience For Org with Type");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Org users will see this heading");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Browser criteria"
	@priority = 5
	test AddNewExperienceSessionBrowserSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Browser",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Session Browser Segment",
				text = "Chrome");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");

			Button.clickPublish();
		}

		task ("Add a experience to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "NewBrowserExperience",
				segmentName = "Session Browser Segment");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Chrome Browser Heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "NewBrowserExperience");

			Button.clickPublish();
		}

		task ("Check that correct experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			Navigator.gotoSitePage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			var browserType = PropsUtil.get("browser.type");

			if (${browserType} == "chrome") {
				AssertTextEquals(
					locator1 = "Experience#FRAGMENT_HEADING",
					value1 = "Chrome Browser Heading");
			}
			else {
				AssertTextEquals(
					locator1 = "Experience#FRAGMENT_HEADING",
					value1 = "Default");
			}
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Cookies criteria"
	@priority = 5
	test AddNewExperienceSessionCookiesSegment {
		property portal.acceptance = "true";

		task ("Add an User via JSONWS") {
			JSONUser.addUser(
				preferredLocale = "zh_CN",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Cookies",
				groupName = "Test Site Name",
				key = "GUEST_LANGUAGE_ID",
				operator = "equals",
				segmentName = "SessionCookiesSegment Name",
				value = "zh_CN");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionCookiesSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Device brand criteria"
	@priority = 5
	test AddNewExperienceSessionDeviceBrandSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Device Brand",
				groupName = "Test Site Name",
				operator = "not equals",
				segmentName = "SessionDeviceBrandSegment Name",
				text = "Apple");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionDeviceBrandSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Device model criteria"
	@priority = 5
	test AddNewExperienceSessionDeviceModelSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Device Model",
				groupName = "Test Site Name",
				operator = "not equals",
				segmentName = "SessionDeviceModelSegment Name",
				text = "ios");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionDeviceModelSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Device screen resolution height criteria"
	@priority = 5
	test AddNewExperienceSessionDeviceScreenResolutionHeightSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Device Screen Resolution Height",
				groupName = "Test Site Name",
				operator = "not equals",
				segmentName = "SessionDeviceScreenResolutionHeightSegment Name",
				value = "480.00");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionDeviceScreenResolutionHeightSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Device screen resolution width criteria"
	@priority = 5
	test AddNewExperienceSessionDeviceScreenResolutionWidthSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Device Screen Resolution Width",
				groupName = "Test Site Name",
				operator = "not equals",
				segmentName = "SessionDeviceScreenResolutionWidthSegment Name",
				value = "320.00");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionDeviceScreenResolutionWidthSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Hostname criteria"
	@priority = 5
	test AddNewExperienceSessionHostnameSegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#AddNewExperienceSessionHostnameSegment";

		task ("Create a new Portal Instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			Navigator.openSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Login in new instance") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");
		}

		task ("Create a new content page for instance") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			ContentPages.addPage(pageName = "Experience Content Page");

			PageEditor.publish();
		}

		task ("Create a session segment at new instance") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Segments");

			LexiconEntry.gotoAdd();

			Segmentation.gotoSidebar(fieldType = "Session");

			Segmentation.addProperties(propertyOption = "Hostname");

			Segmentation.fillTitle(titleField = "HostnameSegment Name");

			Segmentation.changeCriterionInput(criterionInputOption = "Contains");

			Segmentation.fillProperty(criterionValue = "www.able.com");

			Button.clickSave();
		}

		task ("Navigate to edit page") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Navigator._gotoPage(pageName = "Experience Content Page");

			ContentPages.gotoPageEditor();
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "HostnameSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Create a userea user") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/group/control_panel/manage?p_p_id=com_liferay_users_admin_web_portlet_UsersAdminPortlet");

			User.addCP(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			User.editPassword(newPassword = "test");
		}

		task ("Login with userea user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com",
				virtualHostsURL = "http://www.able.com:8080");
		}

		task ("Check is the experience is displayed") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Navigator._gotoPage(pageName = "Experience Content Page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-163095 Bug: SegmentRequestContentContributor are not propertly registered"
	@priority = 4
	test AddNewExperienceSessionIPGeocoderCountry {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#AddNewExperienceSessionIPGeocoderCountry";

		task ("Add a session IP Geocoder Country segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "IP Geocoder Country",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "IP Geocoder Country Segment",
				selectedOption = "Spain");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");

			Button.clickPublish();
		}

		task ("Add a experience to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "IP Geocoder Country Experience",
				segmentName = "IP Geocoder Country Segment");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Spanish Segment Heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "IP Geocoder Country Experience");

			Button.clickPublish();
		}

		task ("Check that correct experience is displayed using an spanish IP address") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page?mockIPGeocoderRemoteAddr=57.78.128.0");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Spanish Segment Heading");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Last sign in date criteria"
	@priority = 5
	test AddNewExperienceSessionLastSignInDateSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			var todayUTCtime = DateUtil.getFormattedCurrentDate("yyyy-MM-dd'T'HH:mm:ss.mmm'Z'");

			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				date = ${todayUTCtime},
				fieldName = "Last Sign In Date",
				groupName = "Test Site Name",
				operator = "greater than",
				segmentName = "LastSignInDateSegment Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "LastSignInDateSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Local date criteria"
	@priority = 5
	test AddNewExperienceSessionLocalDateSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			var todayDate = DateUtil.getFormattedCurrentDate("yyyy-MM-dd");

			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				date = ${todayDate},
				fieldName = "Local Date",
				groupName = "Test Site Name",
				operator = "greater than or equals",
				segmentName = "LocalDateSegment Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "LocalDateSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Referrer URL criteria"
	@priority = 5
	test AddNewExperienceSessionReferrerURLSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Referrer URL",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "ReferrerURLSegment Name",
				text = 8080);
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "ReferrerURLSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			// Navigating to content page is a workaroud for LPS-132766, remove this when LPS-132766 get resolved

			AssertClick.assertPartialTextClickAt(
				key_pageName = "Experience Content Page",
				locator1 = "Home#PAGE",
				value1 = "Experience Content Page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Request Parameters criteria"
	@priority = 5
	test AddNewExperienceSessionRequestParametersSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Request Parameters",
				groupName = "Test Site Name",
				key = "languageId",
				operator = "contains",
				segmentName = "SessionRequestParametersSegment Name",
				value = "zh_CN");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionRequestParametersSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page?languageId=zh_CN");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > Signed In criteria"
	@priority = 5
	test AddNewExperienceSessionSignedInSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "Signed In",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Session Signed In Segment",
				value = "false");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");

			Button.clickPublish();
		}

		task ("Add a experience to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "NewSignedInExperience",
				segmentName = "Session Signed In Segment");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "No Signed In Heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "NewSignedInExperience");

			Button.clickPublish();
		}

		task ("Logout of Test user") {
			User.logoutPG();
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "No Signed In Heading");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > URL criteria"
	@priority = 5
	test AddNewExperienceSessionURLSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "URL",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "SessionURLSegment Name",
				text = "test-site-name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionURLSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130265: Validate if it's posible to create a experience using a segment based on Session > User Agent criteria"
	@priority = 5
	test AddNewExperienceSessionUserAgentSegment {
		property portal.acceptance = "true";

		task ("Add a session segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "User Agent",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "SessionUserAgentSegment Name",
				text = "Chrome");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "SessionUserAgentSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Date modified criteria"
	@priority = 5
	test AddNewExperienceUserDateModifiedSegment {
		property portal.acceptance = "true";

		task ("Create a segment with date modified criteria") {
			var todayUTCtime = DateUtil.getFormattedCurrentDate("yyyy-MM-dd'T'HH:mm:ss.mmm'Z'");

			JSONSegmentsentry.addSegment(
				date = ${todayUTCtime},
				fieldName = "Date Modified",
				groupName = "Test Site Name",
				operator = "not equals",
				segmentName = "Segment Title");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a experience to page") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is heading for the new experience");
		}

		task ("Prioritize experience created") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userfn1") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check the correct experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is heading for the new experience");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Date of birth criteria"
	@priority = 5
	test AddNewExperienceUserDateOfBirthSegment {
		property portal.acceptance = "true";

		task ("Create a segment with date modified criteria") {
			var todayDate = DateUtil.getFormattedCurrentDate("yyyy-MM-dd");

			JSONSegmentsentry.addSegment(
				date = ${todayDate},
				fieldName = "Date of Birth",
				groupName = "Test Site Name",
				operator = "less than",
				segmentName = "Segment Title");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a experience to page") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is heading for the new experience");
		}

		task ("Prioritize experience created") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userfn1") {
			User.logoutAndLoginPG(
				freeLogin = "true",
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check the correct experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is heading for the new experience");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Email address criteria"
	@priority = 5
	test AddNewExperienceUserEmailAddressSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				text = "userea1@liferay.com");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > First Name criteria"
	@priority = 5
	test AddNewExperienceUserFirstNameSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "First Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				text = "userfn1");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Job Title criteria"
	@priority = 5
	test AddNewExperienceUserJobTitleSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Job Title",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				text = "Test Engineer1");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Last name criteria"
	@priority = 5
	test AddNewExperienceUserLastNameSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Last Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				text = "userln1");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Name criteria"
	@priority = 5
	test AddNewExperienceUserNameSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "User Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				text = "userfn1 userln1");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Role criteria"
	@priority = 5
	test AddNewExperienceUserRoleSegment {
		property portal.acceptance = "true";

		task ("Assign role to user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Regular Role",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				selectedOption = "Power User");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Screen Name criteria"
	@priority = 5
	test AddNewExperienceUserScreenNameSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Title",
				text = "usersn1");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Site and Organization Role criteria"
	@priority = 5
	test AddNewExperienceUserSiteOrganizationRoleSegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#AddNewExperienceUserSiteOrganizationRoleSegment";

		task ("Assign userea1 to Test Site group") {
			JSONGroup.assignUserToGroup(
				groupName = "Test Site Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Create and assign site role") {
			JSONRole.addSiteRole(
				roleKey = "Site Role Name Test",
				roleTitle = "Site Role Name Test");

			JSONGroup.assignGroupRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Site Role Name Test",
				userEmailAddress = "userea1@liferay.com");

			SearchAdministration.executeReindex();
		}

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Site and Organization Role",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "UserSiteOrganizationRoleSegment Name",
				selectedOption = "Site Role Name Test");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "UserSiteOrganizationRoleSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Site criteria"
	@priority = 5
	test AddNewExperienceUserSiteSegment {
		property portal.acceptance = "true";

		task ("Assign user to Test Site Name group") {
			JSONGroup.assignUserToGroup(
				groupName = "Test Site Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Site",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "UserSiteSegment Name",
				selectedOption = "Test Site Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "UserSiteSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Tag criteria"
	@priority = 5
	test AddNewExperienceUserTagSegment {
		property portal.acceptance = "true";

		task ("Add an user with a tag via JSONWS") {
			JSONUser.addUser(
				assetTagNames = "tagname",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Create an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Tag",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "UserTagSegment Name",
				selectedOption = "tagname");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "UserTagSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > Team criteria"
	@priority = 5
	test AddNewExperienceUserTeamSegment {
		property portal.acceptance = "true";

		task ("Assign user to Test Site Name group") {
			JSONGroup.assignUserToGroup(
				groupName = "Test Site Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add team and assign to the user") {
			JSONTeam.addTeam(
				siteName = "Test Site Name",
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			JSONTeam.addUserToTeam(
				siteName = "Test Site Name",
				teamName = "Site Team Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Create an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Team",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "UserTeamSegment Name",
				selectedOption = "Site Team Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "UserTeamSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > User Group criteria"
	@priority = 5
	test AddNewExperienceUserUserGroupSegment {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#AddNewExperienceUserUserGroupSegment";

		task ("Create an user group via JSONWS") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "UG UserGroup Name Description",
				userGroupName = "UG UserGroup Name");
		}

		task ("Assign user to user group via JSONWS") {
			JSONUser.addUserToUserGroup(
				userEmailAddress = "userea1@liferay.com",
				userGroupName = "UG UserGroup Name");

			SearchAdministration.executeReindex();
		}

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "User Group",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "UserUserGroupSegment Name",
				selectedOption = "UG UserGroup Name");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "UserUserGroupSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-130268: Validate if it's posible to create a experience using a segment based on User > User criteria"
	@priority = 5
	test AddNewExperienceUserUserSegment {
		property portal.acceptance = "true";

		task ("Add an user segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "User",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "UserUserSegment Name",
				selectedOption = "userea1@liferay.com");
		}

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "UserUserSegment Name");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new experience for you");
		}

		task ("Prioritize the experience") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Login with userae1 user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Check is the experience is displayed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new experience for you");
		}
	}

	@description = "LPS-96828 Bug: In different experiences, the same non-instantiable widget can't be added."
	@priority = 4
	test AddNonInstantiableWidget {
		property portal.acceptance = "true";

		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "First Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Name",
				text = "Test");
		}

		task ("Add an Experience") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "Experience Name",
				segmentName = "Segment Name");
		}

		task ("Add an non-instantiable widget to default experience") {
			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.addWidget(portletName = "Sign In");
		}

		task ("Add the same widget to the created experience") {
			PageEditor.changeExperience(newExperience = "Experience Name");

			PageEditor.addWidget(portletName = "Sign In");

			Button.clickPublish();
		}

		task ("Check that widget is present at both experiences") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals.assertPartialText(
				locator1 = "SignIn#PORTLET_TITLE",
				value1 = "You are signed in as");

			ContentPages.changeExperience(experienceName = "Experience Name");

			AssertTextEquals.assertPartialText(
				locator1 = "SignIn#PORTLET_TITLE",
				value1 = "You are signed in as");
		}
	}

	@description = "LPS-125710 When a user, that Belongs To two or more different segments with experiences for them and these experiences are below of any other Anyone-targeted experience, lands on the page, the Anyone-targeted experience labeled as active will be shown"
	@priority = 3
	@uitest
	test AddTwoExperiencesBelowDefault {
		property portal.acceptance = "true";

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Screen Name",
				text = "usersn1");
		}

		task ("Add another segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Email Address",
				text = "userea1@liferay.com");
		}

		task ("Go to the Content Page and add a new experience for the first segment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "Screen Name Experience",
				segmentName = "Segment Screen Name");
		}

		task ("Edit the experience created and leave it below the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Screen Name experience for you");
		}

		task ("Go to the Content Page and add a new experience for the second segment") {
			PageEditor.addExperience(
				experienceName = "Email Address Experience",
				segmentName = "Segment Email Address");
		}

		task ("Edit the experience created and leave it below the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Email Address Experience for you");

			PageEditor.publish();
		}

		task ("Login with the user and check that the correct experience is shown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Heading Example");
		}
	}

	@description = "LPS-125710 When a user, that Belongs To two or more different segments with experiences for them and these experiences are above the all other Anyone-targeted experiences, lands on the page, the experience with the higher position will be shown"
	@priority = 3
	@uitest
	test AddTwoExperiencesOverDefault {
		property portal.acceptance = "true";

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Screen Name",
				text = "usersn1");
		}

		task ("Add another segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Email Address",
				text = "userea1@liferay.com");
		}

		task ("Go to the Content Page and add a new experience for the first segment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "Screen Name Experience",
				segmentName = "Segment Screen Name");
		}

		task ("Edit the experience created and prioritize it over the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Screen Name experience for you");

			PageEditor.prioritizeExperience(experienceName = "Screen Name Experience");
		}

		task ("Go to the Content Page and add a new experience for the second segment") {
			PageEditor.addExperience(
				experienceName = "Email Address Experience",
				segmentName = "Segment Email Address");
		}

		task ("Edit the experience created and prioritize it over the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Email Address Experience for you");

			PageEditor.prioritizeExperience(experienceName = "Email Address Experience");

			PageEditor.publish();
		}

		task ("Login with the user and check that the correct experience is shown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new Screen Name experience for you");
		}
	}

	@description = "LPS-90586: Validate if the user can cancel the confirmation from delete alert and your experience is not deleted"
	@priority = 3
	test CancelDeletingExperience {
		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Click at delete button and cancel at confirmation") {
			PageEditor.deleteExperienceCancel();
		}

		task ("Check if experience still present") {
			AssertElementPresent(
				key_experienceName = "Segment Name Experience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can change the background color of some section in the experiences that can be different from other experiences (already published)"
	@priority = 3
	test ChangingBackgroundColor {
		task ("Add a Fragment to default page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.editLayoutContainer(
				backgroundColor = "Danger",
				panel = "Styles");

			PageEditor.publish();
		}

		task ("Create an experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Change the background color of the default experience") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Success",
				panel = "Styles");

			PageEditor.publish();
		}

		task ("Check if any experience has its own container with its own background color") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewContainerStyle(
				backgroundColor = "success",
				position = 1);

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.viewContainerStyle(
				backgroundColor = "danger",
				position = 1);
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can change the background image of some section in the experiences that can be different from other experiences (already published)"
	@priority = 3
	test ChangingBackgroundImage {
		task ("Go to Experience Content Page and create a container") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Create an experience and add a background image to the container") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.editLayoutContainer(
				backgroundImage = "Direct",
				panel = "Styles",
				uploadFileName = "high_resolution_photo.jpg");

			PageEditor.publish();
		}

		task ("Change the background image in the default experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.editLayoutContainer(
				backgroundImage = "Direct",
				panel = "Styles",
				uploadFileName = "Document_4.jpg");

			PageEditor.publish();
		}

		task ("Check if any experience has his own background image") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewContainerStyle(backgroundImage = "document_4-jpg");

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.viewContainerStyle(backgroundImage = "high_resolution_photo-jpg");
		}
	}

	@description = "LPS-90586: Validate if all experiences were deleted, only the Default experience will appear"
	@priority = 5
	test CheckDefaultAfterDeletingExperiences {
		property portal.acceptance = "true";

		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Create Email Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Email Address",
				text = "test@liferay.com");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Create an experience with Segment Email") {
			PageEditor.addExperience(
				experienceName = "Segment Email Experience",
				segmentName = "Segment Email Address");
		}

		task ("Delete all experiences") {
			PageEditor.deleteAllExperiences();

			AssertElementNotPresent(
				key_experienceName = "Segment Name Experience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");

			AssertElementNotPresent(
				key_experienceName = "Segment Email Experience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
		}

		task ("Assert that Experience Default button is present") {
			AssertElementPresent(locator1 = "PageEditor#EXPERIENCE_DEFAULT_BUTTON_NAME");
		}
	}

	@description = "LPS-90586: Validate if the Default experience doesn't offer a delete button"
	@priority = 3
	test CheckDefaultDeleteButton {
		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "Name Experience",
				segmentName = "Anyone");
		}

		task ("Assert that 'Default' can not be deleted") {
			PageEditor.deleteExperience(experienceName = "Name Experience");

			AssertElementNotPresent(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can create the content in the experiences that can be different from others experiences"
	@priority = 3
	test CreatingContentInDifferentExperiences {
		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title 1");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Go to edit Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Create an Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Add content to both experiences") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC Title 1",
				assetType = "Basic Web Content");

			IFrame.closeFrame();

			PageEditor.changeExperience(newExperience = "New Experience");

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			IFrame.closeFrame();

			PageEditor.publish();
		}

		task ("Check if the content is present only in the New Experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				key_assetTitle = "WC Title 1",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "WC Title 1");

			PageEditor.changeExperience(newExperience = "New Experience");

			AssertTextEquals(
				key_assetTitle = "Blogs Entry Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Blogs Entry Title");
		}
	}

	@description = "LPS-90585: Validate in the list of Experiences if the decrease priority button working properly"
	@priority = 4
	test DecreaseExperiencePriority {
		property portal.acceptance = "true";

		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Add an element to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Priorize experience") {
			PageEditor.prioritizeExperience(experienceName = "Segment Name Experience");
		}

		task ("Assert the experience is 'Active'") {
			PageEditor.viewExperienceActiveInEditMode(experienceName = "Segment Name Experience");
		}

		task ("Depriorize experience") {
			PageEditor.deprioritizeExperience(experienceName = "Segment Name Experience");
		}

		task ("Assert the experience is not 'Active'") {
			PageEditor.viewExperienceNotActiveInEditMode(experienceName = "Segment Name Experience");
		}
	}

	@description = "LPS-90585: Validate if the Default segment doesn't offer any option to be prioritized"
	@priority = 3
	test DefaultExperienceCantBePrioritized {
		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Add an element to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Priorize experience") {
			PageEditor.prioritizeExperience(experienceName = "Segment Name Experience");
		}

		task ("Assert Default segment buttons is not present") {
			AssertElementNotPresent(
				key_index = 2,
				locator1 = "PageEditor#EXPERIENCE_PRIORITIZE_BUTTON");
		}
	}

	@description = "LPS-90585: Validate in the list of Experiences if the default option is always the last option"
	@priority = 3
	test DefaultExperienceLastOption {
		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Create Email Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Email Address",
				text = "test@liferay.com");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Create an experience with Segment Email") {
			PageEditor.addExperience(
				experienceName = "Segment Email Experience",
				segmentName = "Segment Email Address");
		}

		task ("Priorize experiences") {
			PageEditor.prioritizeExperience(experienceName = "Segment Name Experience");

			PageEditor.prioritizeExperience(experienceName = "Segment Email Experience");
		}

		task ("Assert that Default Segment is active and at the bottom") {
			PageEditor.viewExperienceActiveInEditMode(experienceName = "Default");

			PageEditor.openExperienceMenu();

			AssertTextEquals(
				index = 1,
				locator1 = "PageEditor#EXPERIENCE_TITLE_INDEX",
				value1 = "Segment Name Experience");

			AssertTextEquals(
				index = 2,
				locator1 = "PageEditor#EXPERIENCE_TITLE_INDEX",
				value1 = "Segment Email Experience");

			AssertTextEquals(
				index = 3,
				locator1 = "PageEditor#EXPERIENCE_TITLE_INDEX",
				value1 = "Default");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can discard the section when he is editing the experiences (not published)	"
	@priority = 3
	test DiscardingASectionOfAnUnpublishedExperience {
		task ("Create an experience, add a component and make changes without publish it") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.publish();

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Go to the pages menu and discard changes") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.discardDraft(pageName = "Experience Content Page");
		}

		task ("Go to Experience Content Page and check the Experience is not present") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragment(fragmentName = "Container");

			PageEditor.openExperienceMenu();

			AssertElementNotPresent(
				key_experienceName = "New Experience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can discard the changes when he is editing the experiences (not published)"
	@priority = 3
	test DiscardingChangesFromUnpublishedExperiences {
		task ("Create a component and add a component without publishing them") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Edit the the component without publishing the changes") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Go to the pages menu and discard changes") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.discardDraft(pageName = "Experience Content Page");
		}

		task ("Go to Experience Content Page and the Experience is not present") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragment(fragmentName = "Heading");

			PageEditor.openExperienceMenu();

			AssertElementNotPresent(
				key_experienceName = "New Experience",
				locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can discard the changes when he is editing the experiences (already published)"
	@priority = 4
	test DiscardingChangesStillInTheEdition {
		property portal.acceptance = "true";

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience with a component and publish it") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Edit the fragment recently added without publishing the changes") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Go to the pages menu and discard changes") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.discardDraft(pageName = "Experience Content Page");
		}

		task ("Go to Experience Content Page and check if the changes are discarded") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			PageEditor.changeExperience(newExperience = "New Experience");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can discard the section when he is editing the experiences (already published)"
	@priority = 3
	test DiscardingSection {
		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience, add a component and make changes without publish it") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Go to the pages menu and discard changes") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.discardDraft(pageName = "Experience Content Page");
		}

		task ("Go to Experience Content Page and check the discarted changes") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Container");

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.viewFragmentNotPresent(fragmentName = "Container");
		}
	}

	@description = "LPS-121405: When the user clicks on the Duplicate option of an experience, a new experience with [the same name] + Copy and the same audience (Segment) appears in the last position of the list, always below the default experience"
	@priority = 5
	test DuplicateExperience {
		property portal.acceptance = "true";

		task ("Naviagte to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Edit the heading segment") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");

			Button.clickPublish();
		}

		task ("Add a first experience to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "NewExp1",
				segmentName = "Anyone");
		}

		task ("Modify the first experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Exp1");
		}

		task ("Priotitize the first experience created") {
			PageEditor.prioritizeExperience(experienceName = "NewExp1");
		}

		task ("Duplicate the first experience") {
			PageEditor.duplicateExperience(experienceName = "NewExp1");

			Button.clickPublish();
		}

		task ("Modify the second experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.changeExperience(newExperience = "Copy of NewExp1");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Exp1");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Exp1 Copy");
		}

		task ("Check the heading fragment of first experience") {
			PageEditor.changeExperience(newExperience = "NewExp1");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Exp1");

			PageEditor.publish();
		}

		task ("Check that the duplicated experience is bellow default experience") {
			PageEditor.openExperienceMenu();

			AssertTextEquals(
				index = 2,
				locator1 = "PageEditor#EXPERIENCE_TITLE_INDEX",
				value1 = "Default");

			AssertTextEquals(
				index = 3,
				locator1 = "PageEditor#EXPERIENCE_TITLE_INDEX",
				value1 = "Copy of NewExp1");
		}
	}

	@description = "Validate experience edition and deletion"
	@priority = 5
	test EditAndDeleteExperience {
		property portal.acceptance = "true";

		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Add an experience to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "exp1",
				segmentName = "Anyone");
		}

		task ("Check that is possible to edit exprience") {
			PageEditor.editExperience(newExperience = "exp1_edited");
		}

		task ("Check that is possible to delete experience") {
			PageEditor.deleteExperience(experienceName = "exp1_edited");
		}
	}

	@description = "LPS-91876: Validate if when the user tries to edit the name of some Experience can be edited with success"
	@priority = 5
	test EditExperienceName {
		property portal.acceptance = "true";

		task ("Create an experience and add on content page") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");
		}

		task ("Change experience's name") {
			PageEditor.editExperience(new_experienceName = "NewAnyoneExperience edited");
		}

		task ("Assert that experience's name is changed") {
			PageEditor.viewExperienceValues(
				experienceName = "NewAnyoneExperience edited",
				segmentName = "Anyone");
		}
	}

	@description = "LPS-91876: Validate if when the user tries to edit the segment associated of some Experience can be changed with success"
	@priority = 3
	test EditExperienceSegment {
		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Anyone");
		}

		task ("Change experience's segment") {
			PageEditor.editExperience(new_segmentName = "Name Segment");
		}

		task ("Assert that experience's segment is changed") {
			PageEditor.viewExperienceValues(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}
	}

	@description = "LPS-90588: Validate the interaction with how the user interacts with the Experiences Dropdown, when the user has permissions and segments are available and interact with the New Segment by New Experience"
	@priority = 3
	test ExperienceDropdownAddNewSegment {
		task ("Create a Role") {
			JSONRole.addRegularRole(
				roleKey = "Experiences Test Role Test",
				roleTitle = "Experiences Test Role Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Experiences Test Role Test",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Set permissions for this role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Experiences Test Role Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_SEGMENTS_ENTRIES",
				resourceName = "com.liferay.segments",
				roleTitle = "Experiences Test Role Test");
		}

		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Experiences Test Segment",
				text = "Test");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Go to Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Go to New Experience Editor") {
			PageEditor.openNewExperienceEditor();

			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertVisible(locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT");
		}

		task ("Check that default experiende is preselected and other experience is available") {
			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");

			AssertElementPresent(
				key_segmentName = "Experiences Test Segment",
				locator1 = "PageEditor#EXPERIENCE_AUDIENCE_OPTION");
		}

		task ("Create a new segment") {
			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			Segmentation.addProperties(propertyOption = "First Name");

			Segmentation.fillTitle(titleField = "Segment First Name Test");

			Segmentation.fillProperty(propertyField = "userfn");

			Button.clickSave();
		}

		task ("Check segment is preselected") {
			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Segment First Name Test");
		}
	}

	@description = "LPS-90588: Validate the interaction with how the user interacts with the Experiences Dropdown, when the user has permissions but no segments are available and interact with the New Segment by New Experience"
	@priority = 3
	test ExperienceDropdownAddNewSegmentButton {
		task ("Create a Role") {
			JSONRole.addRegularRole(
				roleKey = "Experiences Test Role Test",
				roleTitle = "Experiences Test Role Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Experiences Test Role Test",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Set permissions for this role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Experiences Test Role Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_SEGMENTS_ENTRIES",
				resourceName = "com.liferay.segments",
				roleTitle = "Experiences Test Role Test");
		}

		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Experiences Test Segment",
				text = "Test");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");
		}

		task ("Go to Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Go to New Experience Editor") {
			PageEditor.openNewExperienceEditor();
		}

		task ("Assert name input is empty and audience selector offers the available segments") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");

			AssertElementPresent(
				key_segmentName = "Experiences Test Segment",
				locator1 = "PageEditor#EXPERIENCE_AUDIENCE_OPTION");
		}

		task ("Go to Segment Editor") {
			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			AssertVisible(locator1 = "Segmentation#PROPERTIES_SEARCH");
		}
	}

	@description = "LPS-90588: Validate the interaction with once the user is creating the new Segment, when the user saves the segment	"
	@priority = 5
	test ExperienceDropdownAddNewSegmentCancel {
		property portal.acceptance = "true";

		task ("Go to New Experience Editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.openNewExperienceEditor();
		}

		task ("Start to create segment and cancel it") {
			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			Segmentation.addProperties(propertyOption = "First Name");

			Segmentation.fillTitle(titleField = "Segment First Name Test");

			Segmentation.fillProperty(propertyField = "userfn");

			Button.clickNoError(button = "Cancel");

			AssertConfirm.waitForConfirmation(value1 = "There are unsaved changes. Are you sure you want to exit?");
		}

		task ("Check that user back at the Segment editor") {
			AssertElementPresent(locator1 = "PageEditor#EXPERIENCE_MODAL");
		}
	}

	@description = "LPS-90588: Validate the interaction with once the user is creating the new Segment, when the user closes segments edition"
	@priority = 3
	test ExperienceDropdownAddNewSegmentCancelInputs {
		task ("Go to New Experience Editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.openNewExperienceEditor();
		}

		task ("Check that values are default") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");
		}

		task ("Start to create segment and cancel it") {
			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			Segmentation.addProperties(propertyOption = "First Name");

			Segmentation.fillTitle(titleField = "Segment First Name Test");

			Segmentation.fillProperty(propertyField = "userfn");

			Button.clickNoError(button = "Cancel");

			AssertConfirm.waitForConfirmation(value1 = "There are unsaved changes. Are you sure you want to exit?");
		}

		task ("Check that Experience editor still has same data") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");
		}
	}

	@description = "Validate the interaction with how the user interacts with the Experiences Dropdown, when no segments available and the user has no permissions"
	@ignore = "true"
	@priority = 3
	test ExperienceDropdownWithNoSegmentsUserWithNoPermisisons {
		task ("Create a Role") {
			JSONRole.addRegularRole(
				roleKey = "Experiences Test Role Test",
				roleTitle = "Experiences Test Role Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Experiences Test Role Test",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Set permissions for this role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Experiences Test Role Test");
		}

		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Experiences Test Segment",
				text = "Test");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Go to Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Go to New Experience Editor") {
			PageEditor.openNewExperienceEditor();
		}

		task ("Assert name input is empty and audience selector offers the available segments") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");
		}

		task ("Assert 'Create New Segment' button is not present") {
			AssertElementNotPresent(
				key_text = "New Segment",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-90588: Validate the interaction with how the user interacts with the Experiences Dropdown, when the user has permissions but no segments are available and interact with the New Experience button"
	@priority = 3
	test ExperienceDropdownWithNoSegmentsUserWithPermisisons {
		task ("Create a Role") {
			JSONRole.addRegularRole(
				roleKey = "Experiences Test Role Test",
				roleTitle = "Experiences Test Role Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Experiences Test Role Test",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Set permissions for this role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Experiences Test Role Test");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_SEGMENTS_ENTRIES",
				resourceName = "com.liferay.segments",
				roleTitle = "Experiences Test Role Test");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Go to Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Go to New Experience Editor") {
			PageEditor.openNewExperienceEditor();
		}

		task ("Assert name input is empty and audience selector offers the default segment") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");
		}

		task ("Go to Segment Editor") {
			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			AssertVisible(locator1 = "Segmentation#PROPERTIES_SEARCH");
		}
	}

	@description = "LPS-90588: Validate the interaction with how the user interacts with the Experiences Dropdown, when segments available but the user has no permissions"
	@priority = 3
	test ExperienceDropdownWithSegmentsUserWithNoPermisisons {
		task ("Create a Role") {
			JSONRole.addRegularRole(
				roleKey = "Experiences Test Role Test",
				roleTitle = "Experiences Test Role Test");

			JSONRole.assignRoleToUser(
				roleTitle = "Experiences Test Role Test",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Set permissions for this role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Experiences Test Role Test");
		}

		task ("Create a Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Experiences Test Segment",
				text = "Test");
		}

		task ("Login with user created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Go to Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Go to New Experience Editor") {
			PageEditor.openNewExperienceEditor();
		}

		task ("Assert name input is empty and audience selector offers the available segments") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");

			AssertElementPresent(
				key_segmentName = "Experiences Test Segment",
				locator1 = "PageEditor#EXPERIENCE_AUDIENCE_OPTION");
		}

		task ("Assert 'Create New Segment' button is not present") {
			AssertElementNotPresent(
				key_text = "New Segment",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-113248: When there are more than one experience(not default experience) with fragments mapped to different web contents, each experience will maintain its own mapping, even if the mapping is modified in any experience"
	@priority = 5
	test MapFragmentMultipleExperiences {
		property portal.acceptance = "true";

		task ("Create two Web Contents") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "WC Title 1");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "WC Title 2");
		}

		task ("Go to Page Editor and map a fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Create a new Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience Name",
				segmentName = "Anyone");
		}

		task ("Map fragment to new experience") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Title 2",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("Chech the mapped value at first experience") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			ContentPages.changeExperience(experienceName = "Default");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "WC Title 1");
		}

		task ("Chech the mapped value at second experience") {
			ContentPages.changeExperience(experienceName = "New Experience Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "WC Title 2");
		}
	}

	@description = "LPS-113248: When there is more than one fragment mapped to a web content in a experience(not default experience), each fragment will display the field mapped to it"
	@priority = 5
	test MapMultipleFragmentsBetweenExperiences {
		property portal.acceptance = "true";

		task ("Create two Web Contents") {
			JSONWebcontent.addWebContent(
				content = "WC Content 1",
				groupName = "Test Site Name",
				title = "WC Title 1");

			JSONWebcontent.addWebContent(
				content = "WC Content 2",
				groupName = "Test Site Name",
				title = "WC Title 2");
		}

		task ("Add two fragments to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Map Heading fragment to web content") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Map Paragraph fragment to web content") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");

			PageEditor.waitForAutoSave();
		}

		task ("Create a new Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience Name",
				segmentName = "Anyone");
		}

		task ("Map fragments to new experience") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Title 2",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Title 2",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("Chech the mapped value at first experience") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			ContentPages.changeExperience(experienceName = "Default");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "WC Title 1");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "WC Content 1");
		}

		task ("Chech the mapped value at second experience") {
			ContentPages.changeExperience(experienceName = "New Experience Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "WC Title 2");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "WC Content 2");
		}
	}

	@description = "LPS-86292 Create a segment, Create an experience based on that segment, Validate that in the simulation mode the default experience is shown when no segment is selected"
	@priority = 4
	test PreviewDefaultExperience {
		property portal.acceptance = "true";

		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Add an element to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			Button.clickPublish();
		}

		task ("Go to simulation mode") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Select the segment on Simulation panel") {
			Check.checkNotVisible(
				checkboxName = "Name Segment",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Assert that element is present not present in Default experience") {
			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@description = "LPS-86292 Create a segment, Create an experience based on that segment, Validate that in the simulation mode the experience is shown for that segment"
	@priority = 5
	test PreviewExperience {
		property portal.acceptance = "true";

		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Add an element to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Priorize experience and publish page") {
			PageEditor.openExperienceMenu();

			PageEditor.prioritizeExperience(experienceName = "Segment Name Experience");

			Button.clickPublish();
		}

		task ("Go to simulation mode") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Select the segment on Simulation panel") {
			Check.checkNotVisible(
				checkboxName = "Name Segment",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Assert that element is present at page") {
			AssertElementPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@description = "LPS-86292 Create a segment, Create an experience based on that segment, Validate that in the simulation mode its possible to navigate insided the page"
	@priority = 3
	test PreviewExperienceNavigation {
		task ("Create Name Segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Name Segment",
				text = "Test");
		}

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Home");
		}

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience and add on content page") {
			PageEditor.addExperience(
				experienceName = "Segment Name Experience",
				segmentName = "Name Segment");
		}

		task ("Add an element to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Priorize experience and publish page") {
			PageEditor.openExperienceMenu();

			PageEditor.prioritizeExperience(experienceName = "Segment Name Experience");

			Button.clickPublish();
		}

		task ("Go to simulation mode") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			MobileDevice.previewPG();

			SelectFrameTop();
		}

		task ("Select the segment on Simulation panel") {
			Check.checkNotVisible(
				checkboxName = "Name Segment",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Assert that element is present") {
			AssertElementPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}

		task ("Navigate to another page via Navigation Menu widget and assert that element is not present") {
			Navigator._gotoPage(pageName = "Home");

			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can publish the content in the experiences that can be different from others experiences"
	@priority = 5
	test PublishContentInDifferentExperiences {
		property portal.acceptance = "true";

		task ("Create a Web Content and add it to the page") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title 1");
		}

		task ("Create an experience and add the Content on it") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.addWidget(portletName = "Asset Publisher");

			PageEditor.publish();
		}

		task ("Check if the content is present only in the New Experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Asset Publisher");

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.viewFragment(fragmentName = "Asset Publisher");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can remove a section in the experiences that can be different from others experiences (already published)"
	@priority = 5
	test RemoveDifferentSections {
		property portal.acceptance = "true";

		task ("Add an element to page, create an experience and publish it") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Remove the fragment from the Default Experience and check that is not present") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Grid");

			PageEditor.publish();
		}

		task ("Check the fragment is present in the Default experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Grid");

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.viewFragment(fragmentName = "Grid");
		}
	}

	@description = "LPS-132573: Assert no error occurs after switching back to default experience with fragment removed."
	@priority = 4
	test RemoveFragmentAndChangeBackToDefaultExperience {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExperienceCreateExperience#RemoveFragmentAndChangeBackToDefaultExperience";

		task ("Add a Web Content via JSONWS") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Open page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a mapped heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Create a new experience") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.addExperience(
				experienceName = "NewExperienceName",
				segmentName = "Anyone");
		}

		task ("Remove heading from default experience") {
			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.removeFragment(fragmentName = "Heading");
		}

		task ("Check that exception is not present at console") {
			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}

		task ("Check that element is no longer present") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Heading");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can remove a section in the experiences that can be different from others experiences (not published)"
	@priority = 3
	test RemovingASectionOfDifferentAndUnpublishedExperiences {
		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create an experience, add a component and make changes without publish it") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Go to the pages menu and discard changes") {
			PageEditor.removeFragment(fragmentName = "Container");
		}

		task ("Go to Experience Content Page and the Experience is not present") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Container");

			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.viewFragment(fragmentName = "Container");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can remove fragment in the experiences that can be different from others experiences (already published)"
	@priority = 4
	test RemovingFragmentInDifferentExperiences {
		property portal.acceptance = "true";

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Create an experience and add a fragment on both experiences") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Remove the fragment created from the default experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("Check if the fragment is only present in the new experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Heading");

			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.viewFragment(fragmentName = "Heading");
		}
	}

	@description = "LPS-86285: Validate in the content page if, the user can remove fragment in the experiences that can be different from others experiences (not published)"
	@priority = 3
	test RemovingFragmentOfUnpublishedExperiences {
		task ("Go to Experience Content Page, add an experience and a fragment without publishing them") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Remove the fragment created from the experience") {
			PageEditor.removeFragment(fragmentName = "Heading");
		}

		task ("Check if the fragment is present") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Heading");

			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.viewFragment(fragmentName = "Heading");
		}
	}

	@description = "LPS-91946 Given in the Site Editor => Page => Content Editor; Having at least on Segment created When trying to create a new experience without filling the Experience Name input Then the modal does not hides away and the Experience Name input reports an error"
	@priority = 4
	test RequiredExperienceNameField {
		property portal.acceptance = "true";

		task ("Try to create new experience without name") {
			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "",
				failureText = "An experience name is required.",
				segmentName = "Anyone");
		}

		task ("Check if the warning message appears") {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "An experience name is required.");
		}
	}

	@description = "LPS-139951 Bug: Some fragments break the page editor when added to experiences"
	@priority = 4
	test UseBannerFragmentWithExperience {
		property portal.acceptance = "true";

		task ("Go to Experience Content Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Create a new Experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Add a Banner Center to default experience") {
			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Add a Banner Center to created experience") {
			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Title of Banner");

			PageEditor.publish();
		}

		task ("Check that Banner fragment was properly added") {
			PageEditor.viewFragment(fragmentName = "Button");

			PageEditor.viewFragment(fragmentName = "Heading");
		}
	}

}