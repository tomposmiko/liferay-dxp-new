@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			UserGroup.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "The Navigation Menu widget display style can be changed through setting portal-ext properties."
	@priority = 3
	test AutomaticChangesToDisplayStyle {
		property custom.properties = "display.style.options=from-level-1-to-all-sublevels${line.separator}navigation.display.style[from-level-1-with-title]=root-layout,absolute,1,auto,true${line.separator}display.style.default=";
		property testray.component.names = "Navigation";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Display Test Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Add a Navigation Nenu widget") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Assert the page displays in the breadcrumb") {
			var key_pageName = "Navigation Display Test Page";

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}
	}

	@description = "This is a use case for LPS-67191. After configuring the Navigation Menu widget to use the 'Split Button Dropdowns' display template, various actions should still be working. A user should still be able to 1) select different display templates, 2) add new pages, 3) edit page names, 4) add widgets to a page, 5) configure widget look and feel, 6) see pages in the Navigation Menu widget."
	@priority = 5
	test NavigationMenuConfigureDisplayTemplate {
		property portal.acceptance = "true";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Test Page1");
		}

		task ("Add a Navigation Menu widget to the page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Test Page1",
				widgetName = "Navigation Menu");

			Navigator.gotoPage(pageName = "Navigation Test Page1");
		}

		task ("Configure the Navigation Menu widget to use the 'Split Button Dropdowns display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation",
				templateName = "Split Button Dropdowns");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Test Page1");
		}

		task ("Assert user can choose a different display template by configuring the Navigation Menu widget to use the 'Bar minimally styled' display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation",
				templateName = "Bar minimally styled");
		}

		task ("Navigate to pages admin") {
			SitePages.openPagesAdmin(siteURLKey = "Guest");
		}

		task ("Assert user can add new pages to the site by adding a second page to the site") {
			SitePages.addPublicPage(pageName = "Navigation Test Page2");
		}

		task ("Assert user can edit the name of a page by editing the name of the second page") {
			Navigator.gotoPage(pageName = "Navigation Test Page2");

			Navigator.gotoEditPageViaControlMenu(pageName = "Navigation Test Page2");

			Page.editName(pageNameEdit = "Navigation Test Page2 Edit");

			Page.view(
				pageName = "Navigation Test Page2 Edit",
				privacy = "Public Pages");
		}

		task ("Assert user can add new widgets to a page by adding the Blogs widget to the second page") {
			Navigator.gotoPage(pageName = "Navigation Test Page2 Edit");

			Portlet.addPG(portletName = "Blogs");
		}

		task ("Assert user can configure 'Look and Feel' for a widget by configuring the Blogs widget 'Look and Feel'") {
			Portlet.gotoPortletOptions(portletOption = "Look and Feel Configuration");

			Portlet.configureCustomTitleViaLookandfeelPG(portletName = "Blogs");
		}

		task ("Assert pages are visible in the Navigation Menu widget") {
			Navigator.gotoPage(pageName = "Navigation Test Page1");

			AssertClick(
				key_pageName = "Navigation Test Page2 Edit",
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Test Page2 Edit");

			AssertVisible(
				key_pageName = "Navigation Test Page2 Edit",
				locator1 = "Home#PAGE_ACTIVE");
		}
	}

	@description = "This is a use case for LPS-113994. The Naviation Menu is able to display the page hierarchy with more than two sublevels when choose a custom menu."
	@priority = 4
	test ShowMoreThanTwoSublevelsWhenSelectCustomMenuAndBarMinimallyStyled {
		task ("Add 3 pages in the same level with Home") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name 1");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name 2");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name 3");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Guest",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Navigate to the navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntry(rowEntry = "Navigation Menu Name");
		}

		task ("Add page items") {
			NavigationMenusAdmin.addItem(
				item = "Page",
				pageNames = "Home,Test Page Name 1,Test Page Name 2,Test Page Name 3");

			for (var pageName : list "Home,Test Page Name 1,Test Page Name 2,Test Page Name 3") {
				NavigationMenusAdmin.viewItem(itemName = ${pageName});
			}
		}

		task ("Make a page hierarchy") {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_itemName = "Test Page Name 1",
				key_sourceItemName = "Test Page Name 1",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				locator2 = "SiteNavigationMenu#ITEM_ENTRY");

			Pause(locator1 = 5000);

			NavigationMenusAdmin.viewItemNested(
				groupName = "Guest",
				itemName = "Test Page Name 1",
				parentItemName = "Home",
				siteNavigationMenuName = "Navigation Menu Name");

			var i = 0;

			while (${i} != 2) {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_itemName = "Test Page Name 2",
					key_sourceItemName = "Test Page Name 2",
					locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
					locator2 = "SiteNavigationMenu#ITEM_ENTRY");

				Pause(locator1 = 1000);

				var i = ${i} + 1;
			}

			Pause(locator1 = 5000);

			NavigationMenusAdmin.viewItemNested(
				groupName = "Guest",
				itemName = "Test Page Name 2",
				parentItemName = "Test Page Name 1",
				siteNavigationMenuName = "Navigation Menu Name");

			var i = 0;

			while (${i} != 3) {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_itemName = "Test Page Name 3",
					key_sourceItemName = "Test Page Name 3",
					locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
					locator2 = "SiteNavigationMenu#ITEM_ENTRY");

				Pause(locator1 = 1000);

				var i = ${i} + 1;
			}

			Pause(locator1 = 5000);

			NavigationMenusAdmin.viewItemNested(
				groupName = "Guest",
				itemName = "Test Page Name 3",
				parentItemName = "Test Page Name 2",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Navigate to Home") {
			Navigator.gotoPage(pageName = "Home");
		}

		task ("Assert Select custom menu and Bar minimally styled") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			Pause(locator1 = 3000);

			NavigationMenusWidget.selectDisplayTemplate(templateName = "Bar minimally styled");

			Pause(locator1 = 3000);

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to Test Page Name 1 via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Test Page Name 1",
				pageName = "Home",
				type = "Drop Down");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Page Name 1");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Test Page Name 2",
				pageName = "Home",
				type = "Drop Down");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Page Name 2");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Test Page Name 3",
				pageName = "Home",
				type = "Drop Down");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Page Name 3");
		}
	}

	@description = "This is a use case for LPS-113994. The Naviation Menu is able to display the page hierarchy with more than two sublevels when use the Bar minimally styled by default."
	@priority = 5
	test ShowMoreThanTwoSublevelsWhenSelectPublicPagesHierarchyAndBarMinimallyStyled {
		property portal.acceptance = "true";

		task ("Add 3 sublevels pages under Home") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Page",
				parentLayoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Child Page",
				parentLayoutName = "Child Page");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Child Child Page",
				parentLayoutName = "Child Child Page");
		}

		task ("Navigate to Home") {
			Navigator.gotoPage(pageName = "Home");
		}

		task ("Assert Select Public Pages Hierarchy and Bar minimally styled") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Public Pages Hierarchy");

			Pause(locator1 = 3000);

			NavigationMenusWidget.selectDisplayTemplate(templateName = "Bar minimally styled");

			Pause(locator1 = 3000);

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Page",
				pageName = "Home",
				type = "Drop Down");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Child Page");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Child Page",
				pageName = "Home",
				type = "Drop Down");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Child Child Page");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Child Child Page",
				pageName = "Home",
				type = "Drop Down");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Child Child Child Page");
		}
	}

	@description = "This is a use case for LPS-113994. The Naviation Menu is able to display the page hierarchy with more than two sublevels when use the List Menu."
	@priority = 4
	test ShowMoreThanTwoSublevelsWhenSelectPublicPagesHierarchyAndListMenu {
		task ("Add 3 sublevels pages under Home") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Page",
				parentLayoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Child Page",
				parentLayoutName = "Child Page");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Child Child Page",
				parentLayoutName = "Child Child Page");
		}

		task ("Navigate to Home") {
			Navigator.gotoPage(pageName = "Home");
		}

		task ("Assert Select Public Pages Hierarchy and Bar minimally styled") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Public Pages Hierarchy");

			Pause(locator1 = 3000);

			NavigationMenusWidget.selectDisplayTemplate(templateName = "List Menu");

			Pause(locator1 = 3000);

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Page",
				pageName = "Home",
				type = "List");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Child Page");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Child Page",
				pageName = "Home",
				type = "List");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Child Child Page");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Child Child Page",
				pageName = "Home",
				type = "List");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Child Child Child Page");
		}
	}

	@description = "This is a use case for LPS-113994. The Navigation Menu should show the same amount of levels with the number of Levels to Display."
	@priority = 5
	test ShowTheSameAmountOfLevelsWithTheNumberOfLevelsToDisplay {
		property portal.acceptance = "true";

		task ("Add 3 sublevels pages under Home") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Page",
				parentLayoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Child Page",
				parentLayoutName = "Child Page");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Child Child Child Page",
				parentLayoutName = "Child Child Page");
		}

		task ("Navigate to Home") {
			Navigator.gotoPage(pageName = "Home");
		}

		task ("Select 2 in Levels to Display") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectLevelsToDisplay(levels = 2);

			Pause(locator1 = 3000);

			Portlet.saveAndCloseConfig();
		}

		task ("Assert only 2 levels shown in Navigation Menu") {
			MouseOver.javaScriptMouseOver(
				key_pageName = "Home",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_itemName = "Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_itemName = "Child Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_itemName = "Child Child Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");
		}

		task ("Select 3 in Levels to Display") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectLevelsToDisplay(levels = 3);

			Pause(locator1 = 3000);

			Portlet.saveAndCloseConfig();
		}

		task ("Assert only 2 levels shown in Navigation Menu") {
			MouseOver.javaScriptMouseOver(
				key_pageName = "Home",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_itemName = "Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertVisible(
				key_itemName = "Child Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_itemName = "Child Child Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");
		}
	}

	@description = "Navigation Menu widget should continue to work when reselecting the default display template"
	@priority = 3
	test ValidateReturnToDefaultStyle {
		property custom.properties = "display.style.default=from-level-1-with-title${line.separator}navigation.display.style[from-level-1-with-title]=root-layout,absolute,1,auto,true";
		property testray.component.names = "Navigation";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Display Test Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Add a Navigation Menu widget to the page") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Assert the Navigation Menu widget has the page") {
			var key_pageName = "Navigation Display Test Page";

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}

		task ("Configure Navigation Menu widget to use the default 'Bar minimally styled' display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation Menu",
				templateName = "Bar minimally styled");
		}

		task ("Assert the Navigation Menu widget has the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}
	}

	@priority = 4
	test ViewNoAddPagePermissionsPG {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Navigation,Permissions";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Page");
		}

		task ("Configure the page so the Power User has all permissions for that page") {
			PermissionsInline.gotoPagePG(
				pageName = "Navigation Page",
				site = "Guest");

			Role.definePermissionPG(
				permissionsList = "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_CONFIGURE_APPLICATIONS_CHECKBOX,CONTENT_PERMISSIONS_CUSTOMIZE_CHECKBOX,CONTENT_PERMISSIONS_DELETE_CHECKBOX,CONTENT_PERMISSIONS_DELETE_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Power User");

			IFrame.selectTopFrame();
		}

		task ("Add a user with the Power User role") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as the created user") {
			User.logoutPG();

			User.loginUserPG(userEmailAddress = "userea@liferay.com");
		}

		task ("Assert the user can add widgets to the page") {
			Navigator.gotoPage(pageName = "Navigation Page");

			Dockbar.viewAddTabsWithNoAddPagePermission();
		}

		task ("Sign back in as the default admin user") {
			User.logoutPG();

			User.loginUserPG();
		}
	}

}