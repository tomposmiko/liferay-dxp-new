@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Page Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Activate local live staging") {
			JSONStaging.enableLocalStaging(
				branchingPrivate = "false",
				branchingPublic = "false",
				groupName = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-114527. Can move multiple pages via dragging in Pages admin of Staging site but cannot in Live site."
	@priority = 3
	test CanMoveMultiplePagesInStagingSiteButCannotInLiveSite {
		task ("Add 2 widget pages and 1 content page in the same level") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "${randomSiteName} (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}

			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name 3",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 3",
				siteName = "${randomSiteName} Staging");

			PageEditor.publish();
		}

		task ("Publish to Live site") {
			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			Staging.publishCustomPublication();
		}

		task ("View pages order in Staging site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			PagesAdmin.viewPagesOrder(
				depth = 1,
				pageNameList = "Test Page Name 1,Test Page Name 2,Test Page Name 3");
		}

		task ("Move Test Page Name 2 and 3 to top of Test Page Name 1 in Staging site") {
			for (var n : list "2,3") {
				PagesAdmin.selectPageItem(pageName = "Test Page Name ${n}");
			}

			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2",
				pageNameTo = "Test Page Name 1");
		}

		task ("View Test Page Name 2 and 3 are moved to top of Test Page Name 1 in Staging site") {
			PagesAdmin.viewPagesOrder(
				depth = 1,
				pageNameList = "Test Page Name 2,Test Page Name 3,Test Page Name 1");
		}

		task ("View pages order in Live site") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.viewPagesOrder(
				depth = 1,
				pageNameList = "Test Page Name 1,Test Page Name 2,Test Page Name 3");
		}

		task ("View cannot move Test Page Name 2 and 3 to top of Test Page Name 1 in Live site") {
			for (var n : list "2,3") {
				PagesAdmin.selectPageItem(pageName = "Test Page Name ${n}");
			}

			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2",
				pageNameTo = "Test Page Name 1");

			Alert.viewErrorMessage(errorMessage = "You do not have the required permissions.");

			Alert.closeMessage(messageType = "ERROR");

			PagesAdmin.viewPagesOrder(
				depth = 1,
				pageNameList = "Test Page Name 1,Test Page Name 2,Test Page Name 3");
		}
	}

	@description = "This is a test for LPS-152446. When a user with edit permissions clicks a content page in page administration of staging site, the page editor is opened with the selected page ready to be edited."
	@priority = 4
	test NavigateToPageEditorWhenClickOnContentPageItemInStagingSite {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${randomSiteName} Staging");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			Staging.publishCustomPublication();
		}

		task ("When the page creator clicks on the content page item in Pages admin of staging site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			Click(
				key_pageName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ENTRY_TITLE_LINK");
		}

		task ("Then the page creator accesses to the page editor") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a test for LPS-152446. When a user with edit permissions clicks a content page in page administration of live site, the page is opened in view mode."
	@priority = 4
	test NavigateToViewModeWhenClickOnContentPageItemInLiveSite {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${randomSiteName} Staging");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			Staging.publishCustomPublication();
		}

		task ("When the page creator clicks on the content page item in Pages admin of live site") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			Click(
				key_pageName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ENTRY_TITLE_LINK");
		}

		task ("Then the page creator accesses to the content page at view mode") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");
		}
	}

	@description = "This is a test for LPS-152446. When a user without edit permissions clicks a content page in page administration of live site, the page is opened in view mode."
	@priority = 3
	test NavigateToViewModeWhenClickOnContentPageItemInLiveSiteAsUserWithoutEditPermission {
		var userEmailAddress = StringUtil.randomString(8);
		var userFirstName = StringUtil.randomString(8);
		var userLastName = StringUtil.randomString(8);
		var userScreenName = StringUtil.randomString(8);
		var roleKey = StringUtil.randomString(8);

		task ("Given a marketer without edit permission has a content page") {
			JSONUser.addUser(
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"),
				userFirstName = ${userFirstName},
				userLastName = ${userLastName},
				userScreenName = StringUtil.toLowerCase(${userScreenName}));

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			JSONUser.addUserToSite(
				groupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			JSONRole.addSiteRole(
				roleKey = ${roleKey},
				roleTitle = ${roleKey});

			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,ACCESS_IN_CONTROL_PANEL:com.liferay.portal.kernel.model.Group,VIEW_SITE_ADMINISTRATION:com.liferay.depot.model.DepotEntry,VIEW_SITE_ADMINISTRATION:com.liferay.portal.kernel.model.Layout,VIEW:com.liferay.layout.seo,VIEW",
				roleTitle = ${roleKey},
				roleType = "site");

			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${roleKey},
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${randomSiteName} Staging");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			Staging.publishCustomPublication();
		}

		task ("When the marketer clicks on the content page item in Pages admin of live site") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			Click(
				key_pageName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ENTRY_TITLE_LINK");
		}

		task ("Then the marketer accesses to the content page at view mode") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");
		}
	}

	@description = "This is a test for LPS-152446. When a user without edit permissions clicks a content page in page administration of staging site, the page is opened in view mode."
	@priority = 3
	test NavigateToViewModeWhenClickOnContentPageItemInStagingSiteAsUserWithoutEditPermission {
		var userEmailAddress = StringUtil.randomString(8);
		var userFirstName = StringUtil.randomString(8);
		var userLastName = StringUtil.randomString(8);
		var userScreenName = StringUtil.randomString(8);
		var roleKey = StringUtil.randomString(8);

		task ("Given a marketer without edit permission has a content page") {
			JSONUser.addUser(
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"),
				userFirstName = ${userFirstName},
				userLastName = ${userLastName},
				userScreenName = StringUtil.toLowerCase(${userScreenName}));

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			JSONUser.addUserToSite(
				groupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			JSONRole.addSiteRole(
				roleKey = ${roleKey},
				roleTitle = ${roleKey});

			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,ACCESS_IN_CONTROL_PANEL:com.liferay.portal.kernel.model.Group,VIEW_SITE_ADMINISTRATION,VIEW_STAGING:com.liferay.depot.model.DepotEntry,VIEW_SITE_ADMINISTRATION:com.liferay.portal.kernel.model.Layout,VIEW:com.liferay.layout.seo,VIEW",
				roleTitle = ${roleKey},
				roleType = "site");

			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${roleKey},
				userEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${randomSiteName} Staging");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			Staging.publishCustomPublication();
		}

		task ("When the marketer clicks on the content page item in Pages admin of staging site") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${userEmailAddress}@liferay.com"));

			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			Click(
				key_pageName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ENTRY_TITLE_LINK");
		}

		task ("Then the marketer accesses to the content page at view mode") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");
		}
	}

	@description = "This is a test for LPS-110183. Can view information about collection items of collection page when enable Live."
	@priority = 3
	test ViewCollectionItemInformationInStaging {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "${randomSiteName} (Staging)",
				site = "false",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "${randomSiteName} (Staging)",
				site = "false",
				title = "Blogs Entry Title");
		}

		task ("Add a document") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "${randomSiteName}-staging",
				mimeType = "image/jpeg",
				site = "false",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "${randomSiteName} (Staging)",
				itemType = "All Types",
				site = "false",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Dynamic Collection Page Name",
				tabName = "Collections");

			PageEditor.publish();
		}

		task ("View header table are shown in collection items via page tree in staging site") {
			ProductMenu.gotoHomePage();

			PagesFinder.goToPagesFinder();

			PagesFinder.viewPageNameInPagesFinder(pageName = "Dynamic Collection Page Name");

			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesFinder.gotoPageEllipsisItem(
				item = "View Collection Items",
				pageName = "Dynamic Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var tableHeader : list "Title,Type,Author,Modified Date,Create Date") {
				AssertElementPresent(
					key_tableHeader = ${tableHeader},
					locator1 = "LexiconTable#TABLE_HEADER");
			}
		}

		task ("View assets are shown in collection items via page tree in staging site") {
			var n = 1;

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				Page.viewCollectionItem(
					itemName = ${title},
					key_rowNumber = ${n});

				var n = ${n} + 1;
			}
		}

		task ("View header table are shown in collection items via Pages admin in staging site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View Collection Items",
				pageName = "Dynamic Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var tableHeader : list "Title,Type,Author,Modified Date,Create Date") {
				AssertElementPresent(
					key_tableHeader = ${tableHeader},
					locator1 = "LexiconTable#TABLE_HEADER");
			}
		}

		task ("View assets are shown in collection items via Pages admin in staging site") {
			var n = 1;

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				Page.viewCollectionItem(
					itemName = ${title},
					key_rowNumber = ${n});

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-159631. Page opens in new tab when selecting New Tab in advanced tab on staging."
	@priority = 3
	test ViewLinkToURLTypePageWhichSelectingNewTabInAdvancedTab {
		task ("Given a page creator has a widget page in staging") {
			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name",
				site = "false");
		}

		task ("When adding a Link to URL type page and selecting New Tab in advanced tab") {
			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			PagesAdmin.addPage(
				pageName = "Test Link to URL Page Name",
				pageTypeURL = "https://www.google.com",
				sitePageType = "Link to URL",
				targetType = "New Tab");
		}

		task ("Then viewing the linked URL page opens in new tab in staging site and live site") {
			Navigator.gotoStagedSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			AssertClick.assertPartialTextClickAt(
				key_pageName = "Test Link to URL Page Name",
				locator1 = "Home#PAGE",
				value1 = "Test Link to URL Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.google.com");

			Navigator.closeWindow();

			ProductMenu.gotoStagingSite(site = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			Click(
				key_pageName = "Test Link to URL Page Name",
				locator1 = "PagesFinder#PAGE_NAME",
				value1 = ${pageName});

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.google.com");

			Navigator.closeWindow();

			PagesAdmin.openPagesAdmin(siteURLKey = "${siteURLKey}-staging");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Test Link to URL Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.google.com");

			Navigator.closeWindow();

			ProductMenuHelper.closeProductMenu();

			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			Staging.publishCustomPublication();

			Navigator.openSiteURL(siteName = ${randomSiteName});

			Navigator.gotoLiveView();

			AssertClick.assertPartialTextClickAt(
				key_pageName = "Test Link to URL Page Name",
				locator1 = "Home#PAGE",
				value1 = "Test Link to URL Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.google.com");

			Navigator.closeWindow();

			Navigator.openSiteURL(siteName = ${randomSiteName});

			Navigator.gotoLiveView();

			PagesFinder.goToPagesFinder();

			Click(
				key_pageName = "Test Link to URL Page Name",
				locator1 = "PagesFinder#PAGE_NAME",
				value1 = ${pageName});

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.google.com");

			Navigator.closeWindow();

			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Test Link to URL Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://www.google.com");

			Navigator.closeWindow();
		}
	}

	@description = "This is a use case for LPS-140253. View no private page in staging."
	@priority = 4
	test ViewNoPrivatePageInStaging {
		task ("Go to Publishing > Staging, enable page versioning, assert no public and private page inside to select") {
			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging Configuration");

			Check.checkToggleSwitch(locator1 = "Checkbox#ENABLED_ON_PUBLIC_PAGES");

			AssertElementNotPresent(locator1 = "Checkbox#ENABLED_ON_PRIVATE_PAGES");

			Button.clickSave();
		}

		task ("Add 2 content pages") {
			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name 1",
				site = "false",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Test Page Name 2",
				site = "false",
				type = "content");
		}

		task ("Publish to live from Publishing > Staging, assert no Pages > Public Pages displayed, only Pages displayed") {
			Staging.openStagingAdmin(siteURLKey = "${siteURLKey}-staging");

			LexiconEntry.gotoAdd();

			AssertElementNotPresent(locator1 = "PagesConfiguration#PAGES_ALL_PUBLIC_PAGES_CHECKBOX");

			Check.checkNotVisible(
				key_pageName = "Pages",
				locator1 = "PagesConfiguration#PAGES_SPECIFIC_PAGE_NAME");
		}

		task ("Go to page versioning, assert no private page settings") {
			AssertElementNotPresent(
				key_text = "Change to Private Pages",
				locator1 = "Button#ANY_SECONDARY");
		}
	}

}