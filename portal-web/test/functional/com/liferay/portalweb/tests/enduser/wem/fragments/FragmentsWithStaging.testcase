@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Staging Test Page");
		}

		task ("Activate local live staging") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name");

			Staging.activateStagingCP(siteName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Fragments are published automatically on any publishing process."
	@priority = "5"
	test AssertFragmentsAlwaysPublished {
		task ("Add a fragment collection to the staging site via JSON") {
			JSONFragment.addFragmentCollection(
				groupKey = "Test Site Name-staging",
				name = "Collection Name",
				site = "false");
		}

		task ("Add a section fragment to the staging site via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupKey = "Test Site Name-staging",
				name = "Fragment Name",
				site = "false");
		}

		task ("Assert the fragment collection is not present in the live site via JSON)") {
			JSONFragment.assertFragmentCollectionNotInGroup(
				collectionName = "Collection Name",
				groupName = "Test Site Name");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Assert the fragment collection is present in the live site via JSON") {
			JSONFragment.assertFragmentCollectionInGroup(
				collectionName = "Collection Name",
				groupName = "Test Site Name");
		}

		task ("Assert the section fragment is present in the live site via JSON") {
			JSONFragment.assertFragmentInGroup(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name",
				groupName = "Test Site Name");
		}
	}

	@description = "Page Fragments administration is only be accessible in staging view."
	@priority = "5"
	test AssertFragmentsAreOnlyEditableInStagingView {
		task ("Assert fragments admin is accessible in the staging site") {
			ProductMenuHelper.expandPanel(panel = "Site Administration");

			ProductMenuHelper.expandCategory(category = "Site Builder");

			AssertVisible(
				key_portlet = "Page Fragments",
				locator1 = "ProductMenu#PORTLET");
		}

		task ("Navigate to the live site") {
			ProductMenu.gotoLiveSite(site = "Site Name");
		}

		task ("Assert fragments admin is not accessible in the live site") {
			ProductMenuHelper.expandPanel(panel = "Site Administration");

			ProductMenuHelper.expandCategory(category = "Site Builder");

			AssertElementNotPresent(
				key_portlet = "Page Fragments",
				locator1 = "ProductMenu#PORTLET");
		}
	}

}