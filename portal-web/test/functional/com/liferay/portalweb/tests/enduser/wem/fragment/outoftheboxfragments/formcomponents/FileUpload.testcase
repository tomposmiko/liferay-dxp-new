@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-150277=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site and page in it") {
			JSONGroup.addGroup(groupName = "Test Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a company Object with attachment fields") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Upload Object",
				objectName = "UploadObject",
				pluralLabelName = "Upload Object");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "From Computer And Show Files In DM",
				fieldName = "fromComputerAndShowFilesInDM",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "UploadObject",
				showFilesInDocumentsAndMedia = "true");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Custom Attachment From Computer",
				fieldName = "customAttachmentFromComputer",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "UploadObject");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Custom Attachment From DM",
				fieldName = "customAttachmentFromDM",
				fieldType = "Long",
				fileSource = "documentsAndMedia",
				isRequired = "false",
				objectName = "UploadObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "UploadObject");
		}

		task ("Enable Inputs Fragment collection in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			task ("Disable Inputs Fragment collection in Gogo Shell") {
				GogoShell.openGogoShellAdmin();

				GogoShell.executeCommand(commandName = "scr:disable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

				GogoShell.viewOutput(outputContent = "true");
			}

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteObjectViaAPI(objectName = "UploadObject");
		}
	}

	@description = "This is a test for LPS-155170. File Upload fragment could add file from computer."
	@priority = "3"
	test AddFileFromComputerDiectly {
		property test.name.skip.portal.instance = "FileUpload#AddFileFromComputerDiectly";

		task ("Given a page creator has a File Upload fragment") {
			task ("Add a File Upload fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");

				PageEditor.editFormContainer(
					contentType = "Upload Object",
					panel = "General");

				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "File Upload");
			}
		}

		task ("When uploading file from computer") {
			task ("Publish page and go to view mode") {
				PageEditor.publish();

				ContentPagesNavigator.openViewContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");
			}
		}

		task ("Then the file from computer is added") {
			task ("Add file from computer") {
				UploadDependencyFile.uploadFile(fileName = "Document_1.jpg");
			}

			task ("Assert upload is successful") {
				AssertTextEquals.assertPartialText(
					locator1 = "TextInput#FILE_PRESENT",
					value1 = "Document_1.jpg");
			}
		}
	}

	@description = "This is a test for LPS-155170. File Upload fragment could map to attachment type object."
	@priority = "5"
	test CanAddFileFromComputerAndDMInMappedObject {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "FileUpload#CanAddFileFromComputerAndDMInMappedObject";

		task ("Given a content page has a File Upload fragment mapped to Attachment field") {
			task ("Add a Form Container framgment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");

				PageEditor.editFormContainer(
					contentType = "Upload Object",
					panel = "General");
			}

			task ("Add a File Upload fragment to Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "File Upload");
			}
		}

		task ("When map the File Upload fragment to Attachment field with file source from computer") {
			PageEditor.editInput(
				field = "Custom Attachment From Computer",
				fragmentName = "File Upload");

			PageEditor.publish();
		}

		task ("Then the files from computer are added in object") {
			task ("Assert could add file from computer") {
				ContentPagesNavigator.openViewContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				UploadDependencyFile.uploadFile(fileName = "Document_1.jpg");

				AssertTextEquals.assertPartialText(
					locator1 = "TextInput#FILE_PRESENT",
					value1 = "Document_1.jpg");
			}

			task ("Assert "Show Supported File Info" toggle displayed and is set to "ON" by default") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.gotoConfiguration(fragmentName = "File Upload");

				AssertChecked.assertCheckedNotVisible(
					key_toggleSwitchLabel = "Show Supported File Info",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}

			task ("Assert "Label" and "Show Help Text" toggles and configs displayed") {
				AssertElementPresent(
					key_toggleSwitchLabel = "Show Label",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

				AssertElementPresent(
					key_toggleSwitchLabel = "Show Help Text",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

				AssertTextEquals(
					key_text = "Help Text",
					locator1 = "TextInput#ANY",
					value1 = "Add your help text here.");
			}

			task ("Assert there's a help text displayed") {
				PageEditor.viewInputStyle(
					helpText = "Upload a .jpeg,.jpg,.pdf,.png no larger than 100 MB.",
					type = "file-upload");
			}
		}

		task ("When map the File Upload fragment to Attachment field with file source from DM") {
			task ("Select the second field from the object") {
				PageEditor.editInput(
					field = "Custom Attachment From DM",
					fragmentName = "File Upload");

				PageEditor.publish();
			}
		}

		task ("Then the files from DM are added in object") {
			task ("Assert could add file from Documents and Media") {
				ContentPagesNavigator.openViewContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				Click(locator1 = "Button#SELECT_FILE");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				UploadDependencyFile.uploadFile(fileName = "Document_2.jpg");

				WaitForVisible(
					key_text = "Add",
					locator1 = "Button#ANY");

				Button.clickAdd();

				SelectFrameTop(value1 = "relative=top");

				AssertTextEquals.assertPartialText(
					locator1 = "TextInput#FILE_PRESENT",
					value1 = "Document_2.jpg");
			}

			task ("Assert "Show Supported File Info" toggle displayed and is set to "ON" by default") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.gotoConfiguration(fragmentName = "File Upload");

				AssertChecked.assertCheckedNotVisible(
					key_toggleSwitchLabel = "Show Supported File Info",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}

			task ("Assert "Label" and "Show Help Text" toggles and configs displayed") {
				AssertElementPresent(
					key_toggleSwitchLabel = "Show Label",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

				AssertElementPresent(
					key_toggleSwitchLabel = "Show Help Text",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

				AssertTextEquals(
					key_text = "Help Text",
					locator1 = "TextInput#ANY",
					value1 = "Add your help text here.");
			}

			task ("Assert there's a help text displayed") {
				PageEditor.viewInputStyle(
					helpText = "Upload a .jpeg,.jpg,.pdf,.png no larger than 100 MB.",
					type = "file-upload");
			}
		}
	}

	@description = "This is a test for LPS-155170. File Upload fragment could add file from computer to DM when enable Show Files in Documents and Media."
	@priority = "3"
	test CanAddFileFromComputerToDMWhenEnableShowFilesInDocumentsAndMedia {
		property test.name.skip.portal.instance = "FileUpload#CanAddFileFromComputerToDMWhenEnableShowFilesInDocumentsAndMedia";

		task ("Given a content page has a File Upload fragment mapped to Attachment field with Show Files in Documents and Media") {
			task ("Add a Form Container framgment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");

				PageEditor.editFormContainer(
					contentType = "Upload Object",
					panel = "General");
			}

			task ("Add a File Upload fragment and Submit Button fragment into Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "File Upload");

				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Submit Button",
					targetFragmentName = "File Upload");
			}

			task ("Map the File Upload fragment to Attachment field and publish") {
				PageEditor.editInput(
					field = "From Computer And Show Files In DM",
					fragmentName = "File Upload");

				PageEditor.publish();
			}
		}

		task ("When upload file to File Upload on content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			UploadDependencyFile.uploadFile(fileName = "Document_1.jpg");

			AssertTextEquals.assertPartialText(
				locator1 = "TextInput#FILE_PRESENT",
				value1 = "Document_1.jpg");

			Button.clickSubmitButton();
		}

		task ("Then the file from computer is added to DM") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoFolder(dmFolderName = "UploadObject");

			DMDocument.viewPG(dmDocumentTitle = "Document_1");
		}
	}

	@description = "This is a test for LPS-151402. The user could see error message when submit a form with attached file size larger than allowed maximum upload size."
	@priority = "4"
	test ViewErrorMessageWhenSubmitFormWithAttachedFileSizeLargerThanAllowedMaximumUploadSize {
		property test.name.skip.portal.instance = "FileUpload#ViewErrorMessageWhenSubmitFormWithAttachedFileSizeLargerThanAllowedMaximumUploadSize";

		task ("Given a user has a content page where a File Upload and Submit Button fragments are inside a Form Container") {
			task ("Change the Maximum File Size to 2 MB") {
				ObjectAdmin.openObjectAdmin();

				ObjectPortlet.selectCustomObject(label = "Upload Object");

				ObjectAdmin.goToFieldsTab();

				ObjectAdmin.goToFieldsDetails(label = "Custom Attachment From Computer");

				Type(
					key_text = "Maximum File Size",
					locator1 = "TextInput#ANY",
					value1 = "2");

				ObjectField.save();
			}

			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");

				PageEditor.editFormContainer(
					contentType = "Upload Object",
					panel = "General");
			}

			task ("Add a File Upload and Submit Button fragment into Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "File Upload");

				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Submit Button",
					targetFragmentName = "File Upload");
			}

			task ("Map the File Upload fragment to an Attachment field") {
				PageEditor.editInput(
					field = "Custom Attachment From Computer",
					fragmentName = "File Upload");

				PageEditor.publish();
			}
		}

		task ("When the user submits form with attached file size larger than allowed maximum upload size") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			UploadDependencyFile.uploadFile(fileName = "high_resolution_photo.jpg");

			Button.clickSubmitButton();
		}

		task ("Then the user should see an error message") {
			Alert.viewErrorMessage(errorMessage = "File size is larger than the allowed maximum upload size (2 MB).");
		}
	}

	@description = "This is a test for LPS-151402. The user could see error message when submit a form with invalid extension of attached file."
	@priority = "4"
	test ViewErrorMessageWhenSubmitFormWithInvalidExtensionOfAttachedFile {
		property test.name.skip.portal.instance = "FileUpload#ViewErrorMessageWhenSubmitFormWithInvalidExtensionOfAttachedFile";

		task ("Given a user has a content page where a File Upload and Submit Button fragments are inside a Form Container") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");

				PageEditor.editFormContainer(
					contentType = "Upload Object",
					panel = "General");
			}

			task ("Add a File Upload and Submit Button fragment into Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "File Upload");

				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Submit Button",
					targetFragmentName = "File Upload");
			}

			task ("Map the File Upload fragment to an Attachment field") {
				PageEditor.editInput(
					field = "Custom Attachment From Computer",
					fragmentName = "File Upload");

				PageEditor.publish();
			}
		}

		task ("When the user submits form with invalid extension of attached file") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			UploadDependencyFile.uploadFile(fileName = "Document_1.doc");

			Button.clickSubmitButton();
		}

		task ("Then the user should see an error message") {
			Alert.viewErrorMessage(errorMessage = "Please enter a file with a valid extension (jpeg, jpg, pdf, png).");
		}
	}

}