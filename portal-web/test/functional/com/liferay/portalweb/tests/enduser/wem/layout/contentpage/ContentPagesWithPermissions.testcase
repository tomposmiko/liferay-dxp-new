@component-name = "portal-wcm"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});
	static var randomUserEmailAddress = StringUtil.randomString(8);
	var userFirstName = StringUtil.randomString(8);
	var userLastName = StringUtil.randomString(8);
	var userScreenName = StringUtil.randomString(8);
	static var randomRoleKey = StringUtil.randomString(8);

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Content Page Name",
				type = "content");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"),
				userFirstName = ${userFirstName},
				userLastName = ${userLastName},
				userScreenName = StringUtil.toLowerCase(${userScreenName}));

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a new site role") {
			JSONRole.addSiteRole(
				roleKey = ${randomRoleKey},
				roleTitle = ${randomRoleKey});
		}
	}

	@description = "This is a test for LPS-161974. The user with Update permission should be able to add custom value to margin and padding."
	@priority = 4
	test AddCustomValuesToSpacingWithUpdatePermission {
		task ("Given a new user with update permission has a Heading fragment on content page") {
			task ("Define the permission of new role") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "UPDATE",
					resourceName = "com.liferay.portal.kernel.model.Layout",
					roleTitle = ${randomRoleKey},
					roleType = "site");
			}

			task ("Assign the site role to new user") {
				JSONRole.assignSiteRoleToUser(
					groupName = ${randomSiteName},
					roleTitle = ${randomRoleKey},
					userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
			}

			task ("Sign in as new user") {
				User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
			}

			task ("Add a Heading fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Heading");
			}
		}

		task ("When the new user adds a custom value on Spacing") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			Click(
				ariaLabel = "Padding Right",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			PageEditor.configureFragment(
				fieldLabel = "Padding Right",
				unit = "%");

			Type(
				ariaLabel = "Padding Right",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL",
				value1 = 20);

			Click(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Padding Right");

			PageEditor.waitForAutoSave();
		}

		task ("Then the new user could view the custom value of Spacing") {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Heading",
				index = 1,
				styleName = "paddingRight",
				styleValue = "20%");
		}
	}

	@description = "This is a test for LPS-161974. The user with Update-limited or basic permission should not be able to add custom value to margin and padding."
	@priority = 4
	test CannotAddCustomValuesToSpacingWithLimitedPermission {
		task ("Given a new user with update-limited and basic permission has a Heading fragment on content page") {
			task ("Define the permissions of site role") {
				Permissions.definePermissionsViaJSONAPI(
					resourceNameActionList = "com.liferay.portal.kernel.model.Layout,UPDATE_LAYOUT_BASIC,UPDATE_LAYOUT_LIMITED",
					roleTitle = ${randomRoleKey},
					roleType = "site");
			}

			task ("Assign the site role to new user") {
				JSONRole.assignSiteRoleToUser(
					groupName = ${randomSiteName},
					roleTitle = ${randomRoleKey},
					userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
			}

			task ("Sign in as new user") {
				User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
			}

			task ("Add a Heading fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Heading");
			}
		}

		task ("When the new user opens the dropdown menu of Spacing") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			Click(
				ariaLabel = "Padding Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		task ("Then the new user should not see the input field for custom values") {
			AssertElementNotPresent(
				ariaLabel = "Padding Top",
				locator1 = "TextInput#ANY_WITH_AIRA_LABEL");

			AssertElementNotPresent(
				key_fieldLabel = "Padding Top",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL");
		}

		task ("When the new user selects an existing token on Padding Top of Spacing") {
			DropdownMenuItem.click(menuItem = "Spacer 3");
		}

		task ("Then the new user could view the custom value of Spacing") {
			PageEditor.viewFragmentStyle(
				fragmentName = "Heading",
				paddingTop = 3);
		}
	}

	@description = "This is a test for LPS-96795. If not giving the individual content's update permission, content author with Update Page Content permission could only go to the edit mode."
	@priority = 2
	test CannotEditAssetWithoutAssetUpdatePermission {
		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,VIEW:com.liferay.portal.kernel.model.Layout,UPDATE_LAYOUT_CONTENT,VIEW:com.liferay.journal,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add three web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = ${randomSiteName},
					title = ${webContentTitle});
			}
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title field of first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display to page") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

			IFrame.closeFrame();
		}

		task ("Add an Asset Publisher to page") {
			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the third web content in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title 3",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Open the Contents panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.gotoTab(tabName = "Page Content");
		}

		task ("Assert cannot access to web content editor via Contents panel") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				Click.clickAtNotVisible(
					key_rowEntry = ${webContentTitle},
					locator1 = "Icon#FRAGMENT_PAGE_CONTENT_VERTICAL_ELLIPSIS");

				AssertElementNotPresent(
					key_menuItem = "Edit",
					locator1 = "MenuItem#ANY_MENU_ITEM");
			}
		}

		task ("Assert cannot access to web content editor via Asset Publisher and Web Content Display in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			AssertElementNotPresent(
				key_webContentTitle = "WC WebContent Title 2",
				locator1 = "WCD#ARTICLE_BAREBONE_ELLIPSIS_ICON");

			AssertElementNotPresent(
				key_assetTitle = "WC WebContent Title 3",
				locator1 = "AP#SPECIFIC_ASSET_EDIT");
		}
	}

	@description = "This is a test for LPS-140136. As a page viewer with only page view permission, the draft actions are invisible."
	@priority = 4
	test CannotPreviewAndDiscardDraftAsUserWithoutUpdatePermission {
		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,ACCESS_IN_CONTROL_PANEL,VIEW:com.liferay.depot.model.DepotEntry,ACCESS_IN_CONTROL_PANEL,VIEW:com.liferay.layout.seo,VIEW:com.liferay.portal.kernel.model.Group,ADD_LAYOUT,VIEW_SITE_ADMINISTRATION:com.liferay.portal.kernel.model.Layout,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.publish();
		}

		task ("Add a Heading fragment below the Button") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("View the Preview and Discard Draft actions are invisible in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Content Page Name");

			for (var itemName : list "Preview Draft,Discard Draft") {
				MenuItem.viewNotPresent(menuItem = ${itemName});
			}
		}

		task ("View only the Button fragment shown in page") {
			MenuItem.click(menuItem = "View");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}

		task ("View the Preview Draft action is invisible in Page Tree") {
			PagesFinder.goToPagesFinder();

			MouseOver(
				key_pageName = "Test Content Page Name",
				locator1 = "PagesFinder#PAGE_NAME");

			Click.clickNoMouseOver(
				key_pageName = "Test Content Page Name",
				locator1 = "PagesFinder#PAGE_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Preview Draft");
		}
	}

	@description = "This is a test for LPS-103454. Content author having permission to update blog entry could see edit icon in the content page displaying the blog and could edit blog in editmode. "
	@priority = 4
	test EditBlogsEntryWithBlogEntryUpdatePermission {
		task ("Define the permissions of new role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");
		}

		task ("Add an Asset Publisher to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Select the blogs entry in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Open the Contents panel") {
			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.gotoTab(tabName = "Page Content");
		}

		task ("View access to blogs entry editor via Contents panel") {
			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = "Blogs Entry Title");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Blogs Entry Title");
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to create and update web content could see edit icon in the content page displaying the web contents and could edit web content in edit mode."
	@priority = 5
	test EditContentWithCreateAndUpdateWebContentPermissions {
		property portal.acceptance = "true";

		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,VIEW:com.liferay.portal.kernel.model.Layout,VIEW,UPDATE_LAYOUT_CONTENT:com_liferay_journal_web_portlet_JournalPortlet,ACCESS_IN_CONTROL_PANEL,VIEW:com.liferay.portal.kernel.model.Group,VIEW_SITE_ADMINISTRATION:com.liferay.journal,ADD_ARTICLE,VIEW:com.liferay.journal.model.JournalArticle,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Edit the web contents via Contents panel") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

				LexiconEntry.gotoAdd();

				WebContent.addCP(
					webContentContent = "WC WebContent Content",
					webContentTitle = ${webContentTitle});

				PortletEntry.publish();
			}
		}

		task ("Sign in as Test Test") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");
		}

		task ("Add an Asset Publisher below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the third web content in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title 3",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Edit the web contents via Contents panel") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				PageEditor.gotoTab(tabName = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = ${webContentTitle});

				AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

				Navigator.gotoBack();
			}
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to update web content and Update Page Content could see edit icon in the content page displaying the web contents and could edit web content in editmode."
	@priority = 5
	test EditContentWithUpdateWebContentAndUpdatePageContentPermissions {
		property portal.acceptance = "true";

		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,VIEW:com.liferay.portal.kernel.model.Layout,UPDATE_LAYOUT_CONTENT,VIEW:com.liferay.journal,VIEW:com.liferay.journal.model.JournalArticle,UPDATE",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add three web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = ${randomSiteName},
					title = ${webContentTitle});
			}
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of the first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");
		}

		task ("Add an Asset Publisher below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the third web content in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title 3",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assert can access to web content editor via Asset Publisher in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			MouseOver(
				key_assetTitle = "WC WebContent Title 3",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			Click.clickNoMouseOver(
				key_assetTitle = "WC WebContent Title 3",
				locator1 = "AP#SPECIFIC_ASSET_EDIT");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Icon#ANGLE_LEFT_BACK");
		}

		task ("Assert can access to web content editor via Contents panel in edit mode") {
			ContentPages.gotoPageEditor();

			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				PageEditor.gotoTab(tabName = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = ${webContentTitle});

				AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

				Click(locator1 = "Icon#ANGLE_LEFT_BACK");
			}
		}
	}

	@description = "This is a test for LPS-103454. Content author having permission to update web content could see edit icon in the content page displaying the web contents and could edit web content in editmode, but could not edit editable field "
	@priority = 5
	test EditContentWithWebContentArticleUpdatePermission {
		property portal.acceptance = "true";

		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add two web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = ${randomSiteName},
					title = ${webContentTitle});
			}
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of the first web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title 1",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the second web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");
		}

		task ("Add a Paragraph fragment below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Web Content Display");

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Edit the web contents via Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2") {
				PageEditor.gotoTab(tabName = "Page Content");

				LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
					menuItem = "Edit",
					rowEntry = ${webContentTitle});

				AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

				Click(locator1 = "Icon#ANGLE_LEFT_BACK");
			}
		}

		task ("Assert the Paragraph is invisible to new user") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Paragraph");
		}
	}

	@description = "This is a test for LPS-105109. Content author having permissions to update page content can introduce new inline content after clicking edit icon in content page."
	@priority = 5
	test EditInlineContentWithUpdatePageContentPermission {
		property portal.acceptance = "true";

		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,VIEW:com.liferay.portal.kernel.model.Layout,UPDATE_LAYOUT_CONTENT,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Edit the inline content of Paragraph") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.viewFragmentNotPresent(fragmentName = "Paragraph");

			Click(
				fragmentName = "paragraph",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			DoubleClick(
				fragmentName = "paragraph",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			Type(
				locator1 = "//*[contains(@class,'component-paragraph') and contains(@data-lfr-editable-id,'element-text')]/div[contains(@class,'cke_editable_inline')]",
				value1 = "New editable fragment text");

			PageEditor.clickManagementBar();

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("View the edited inline content in view mode") {
			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "New editable fragment text");
		}
	}

	@description = "This is a test for LPS-125388. The new user can edit specific content page as site member with update permission."
	@priority = 4
	test EditSpecificContentPageAsSiteMemberWithUpdatePermission {
		task ("Grant Update permission of specific content page to Site Member") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Content Page Name");

			IFrame.selectPermissionsFrame();

			Check.checkNotVisible(
				key_actionName = "UPDATE",
				key_roleTitle = "site-member",
				locator1 = "Permissions#PERMISSIONS_MODAL_CHECKBOX");

			PortletEntry.save();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a Paragraph fragment to content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Publish the content page") {
			PageEditor.publish();
		}

		task ("View the Paragraph shown on content page at view mode") {
			WaitForVisible(locator1 = "Icon#EDIT_PENCIL");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}
	}

	@description = "This is a test for LPS-105109. Content author having permissions to update page content can introduce new inline content after clicking edit icon in content page."
	@priority = 5
	test MapContentWithUpdatePageContentPermission {
		property portal.acceptance = "true";

		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,VIEW:com.liferay.portal.kernel.model.Layout,UPDATE_LAYOUT_CONTENT,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC Webcontent Content",
				groupName = ${randomSiteName},
				title = "WC Webcontent Title");
		}

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Map the Title of web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC Webcontent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Map the Content of web content to editable field") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.viewFragmentNotPresent(fragmentName = "Paragraph");

			Click(
				fragmentName = "paragraph",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("View mapped content in view mode") {
			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "WC WebContent Content");
		}
	}

	@description = "This is a test for LPS-126159. The user can publish a content page without permissions for custom fields."
	@priority = 4
	test PublishContentPageWithoutCustomFieldsPermission {
		property test.name.skip.portal.instance = "ContentPagesWithPermissions#PublishContentPageWithoutCustomFieldsPermission";

		task ("Add a custom field for Page") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.addCP(
				customFieldName = "Text Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				resourceName = "Page");
		}

		task ("Define the permissions of site role") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet,ACCESS_IN_CONTROL_PANEL:com.liferay.layout.seo,VIEW:com.liferay.portal.kernel.model.Group,ADD_LAYOUT,VIEW_SITE_ADMINISTRATION:com.liferay.depot.model.DepotEntry,VIEW_SITE_ADMINISTRATION:com.liferay.portal.kernel.model.Layout,UPDATE",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addPage(pageName = "Test Content Page Name");
		}

		task ("Add a Heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Publish the page") {
			PageEditor.publish();
		}
	}

	@description = "This is a test for LPS-137155. The page creator can change permissions of content page via header ellipsis icon at edit mode."
	@priority = 3
	test RemoveViewPermissionForGuestViaHeaderEllipsisIcon {
		task ("Given a page designer has content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.viewPageItemPresent(pageName = "Test Content Page Name");
		}

		task ("When the page designer removes view permission of guest role via header ellipsis icon at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Permissions");

			PermissionsInline.addOrRemoveAnyPermissionsFromSpecificRole(
				addOrRemoveViewPermission = "Remove",
				permissionsKeyList = "INLINE_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");

			IFrame.closeFrame();

			PageEditor.publish();
		}

		task ("Then a guest user cannot access to the content page") {
			User.logoutPG();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = 404);
		}
	}

	@description = "This is a test for LPS-103454. When one WC displayed in multiple fields in a content page, there should be one WC entry in Contents Panel list."
	@priority = 4
	test ViewDisplayedWebContentInContentsPanelWithWebContentArticleUpdatePermission {
		task ("Define the permissions of new user") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = ${randomRoleKey},
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = ${randomSiteName},
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = ${randomSiteName},
				title = "WC WebContent Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of the web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Add a Web Content Display below the Heading") {
			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Heading");
		}

		task ("Select the web content") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Add an Asset Publisher below the Web Content Display") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(
				portletName = "Asset Publisher",
				targetFragmentName = "Web Content Display");
		}

		task ("Select the web content in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("View the displayed web content in Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.gotoTab(tabName = "Page Content");

			AssertVisible(
				key_itemName = "WC WebContent Title",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM_POSITION");
		}
	}

}