@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-103454. Content author having permission to update blog entry could see edit icon in the content page displaying the blog and could edit blog in editmode. "
	@priority = 4
	test EditBlogsEntryWithBlogEntryUpdatePermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.blogs.model.BlogsEntry",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Test Site Name");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "Blogs Entry Title",
			assetType = "Blogs Entry");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Contents");

		LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
			menuItem = "Edit",
			rowEntry = "Blogs Entry Title");

		AssertTextEquals(
			locator1 = "ControlMenu#HEADING",
			value1 = "Blogs Entry Title");
	}

	@description = "This is a test for LPS-96795. Content author having permissions to create and update web content could see edit icon in the content page displaying the web contents and could edit web content in edit mode."
	@priority = 5
	test EditContentWithCreateAndUpdateWebContentPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "VIEW,UPDATE_LAYOUT_CONTENT") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "ADD_ARTICLE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.journal",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = ${webContentTitle});

			PortletEntry.publish();
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title 1",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Web Content Display",
			targetFragmentName = "Heading");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Asset Publisher",
			targetFragmentName = "Web Content Display");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title 3",
			assetType = "Basic Web Content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			PageEditor.gotoTab(tabName = "Contents");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = ${webContentTitle});

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Button#BACK");
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to update web content and Update Page Content could see edit icon in the content page displaying the web contents and could edit web content in editmode."
	@priority = 5
	test EditContentWithUpdateWebContentAndUpdatePageContentPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = ${webContentTitle});
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title 1",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Web Content Display",
			targetFragmentName = "Heading");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Asset Publisher",
			targetFragmentName = "Web Content Display");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title 3",
			assetType = "Basic Web Content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			PageEditor.gotoTab(tabName = "Contents");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = ${webContentTitle});

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Button#BACK");
		}
	}

	@description = "This is a test for LPS-103454. Content author having permission to update web content could see edit icon in the content page displaying the web contents and could edit web content in editmode, but could not edit editable field "
	@priority = 5
	test EditContentWithWebContentArticleUpdatePermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = ${webContentTitle});
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title 1",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Web Content Display",
			targetFragmentName = "Heading");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text",
			targetFragmentName = "Web Content Display");

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2") {
			PageEditor.gotoTab(tabName = "Contents");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = ${webContentTitle});

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Button#BACK");
		}

		AssertElementNotPresent(
			key_fragmentName = "Rich Text",
			locator1 = "Fragment#FRAGMENT_BODY");
	}

	@description = "This is a test for LPS-105109. Content author having permissions to update page content can introduce new inline content after clicking edit icon in content page."
	@priority = 5
	test EditInlineContentWithUpdatePageContentPermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditor.clickPublish();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		AssertElementNotPresent(
			key_fragmentName = "Rich Text",
			locator1 = "Fragment#FRAGMENT_HEADER");

		Click(locator1 = "//div[contains(@class,'fragment-rich-text')]/lfr-editable[contains(@id,'rich-text')]");

		DoubleClick(locator1 = "//div[contains(@class,'fragment-rich-text')]/lfr-editable[contains(@id,'rich-text')]");

		Type(
			locator1 = "//div[contains(@class,'fragment-rich-text')]/lfr-editable[contains(@id,'rich-text')]//div[contains(@class,'cke_editable_inline')]",
			value1 = "New editable fragment text");

		PageEditor.waitForAutoSave();

		PageEditor.clickPublish();

		AssertVisible(
			key_content = "New editable fragment text",
			key_fragmentClass = "rich-text",
			locator1 = "Fragment#FRAGMENT");
	}

	@description = "This is a test for LPS-105109. Content author having permissions to update page content can introduce new inline content after clicking edit icon in content page."
	@priority = 5
	test MapInlineContentWithUpdatePageContentPermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "Webcontent Content",
			groupName = "Test Site Name",
			title = "Webcontent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Rich Text");

		PageEditorMapping.gotoEditableFieldMapping(
			contributed = "false",
			fragmentName = "Rich Text",
			id = "rich-text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "Webcontent Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Content");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		PageEditor.clickPublish();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		AssertElementNotPresent(
			key_fragmentName = "Rich Text",
			locator1 = "Fragment#FRAGMENT_HEADER");

		Click(locator1 = "//div[contains(@class,'fragment-rich-text')]/lfr-editable[contains(@id,'rich-text')]");

		PageEditor.gotoTab(tabName = "Selection");

		var key_navItem = "Mapping";

		AssertClick(
			locator1 = "PageEditor#NAV_ITEM_BUTTON",
			value1 = "Mapping");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		PageEditor.clickPublish();

		AssertVisible(
			key_content = "Webcontent Title",
			key_fragmentClass = "rich-text",
			locator1 = "Fragment#FRAGMENT");
	}

	@description = "This is a test for LPS-103454. When one WC displayed in multiple fields in a content page, there should be one WC entry in Contents Panel list."
	@priority = 4
	test ViewContentViaContentPanelWithWebContentArticleUpdatePermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		JSONRole.assignSiteRoleToUser(
			groupName = "Test Site Name",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea@liferay.com");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Web Content Display",
			targetFragmentName = "Heading");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addWidget(
			portletName = "Asset Publisher",
			targetFragmentName = "Web Content Display");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		PageEditor.gotoTab(tabName = "Contents");

		AssertElementNotPresent(
			key_rowNumber = 2,
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_ENTRY_N");
	}

}