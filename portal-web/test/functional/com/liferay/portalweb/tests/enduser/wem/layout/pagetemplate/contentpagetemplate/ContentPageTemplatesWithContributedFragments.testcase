@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Page Templates";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection");

		JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection",
			layoutPageTemplateEntryName = "Page Template Name",
			layoutPageTemplateStatus = "Draft",
			layoutPageTemplateType = "Content Page Template");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-108463. Assert no Section fragment is outside when add a Row fragment to content page template."
	@priority = "4"
	test AddRowWithoutSection {
		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid");

		AssertElementNotPresent(
			key_elementType = "Container",
			key_position = "1",
			locator1 = "PageEditor#LAYOUT_ELEMENTS_HEADER");
	}

	@description = "This case ensures that a user can select content via content display in content page template editor."
	@priority = "4"
	test SelectWebContentViaContentDisplay {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WebContent Title");

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Content Display");

		PageEditor.editContentDisplay(
			fragmentName = "Content Display",
			webcontent = "true",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WebContent Title");

		PageEditor.clickPublish();

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		task ("Assert correct content is visible") {
			AssertTextEquals.assertPartialTextAceEditor(
				locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
				value1 = "WC WebContent Content");
		}
	}

}