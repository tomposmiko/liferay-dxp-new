@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-75936. The admin user should access to product menu on page with Full Page Application type."
	@priority = 5
	test AccessToProductMenuOnFullPageApplicationPageAsAdmin {
		property portal.acceptance = "true";

		task ("Given an admin user has a page with Full Page Application type") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "full_page_application");
		}

		task ("When the admin user signs out via URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");
		}

		task ("Then the admin user could access to product menu after sign in") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site name");

			User.signInPG(userEmailAddress = "test@liferay.com");

			ProductMenuHelper.openProductMenu();

			AssertElementNotPresent(
				locator1 = "Portlet#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "The user can add a blogs entry and message boards via collaboration panel page."
	@priority = 3
	@uitest
	test AddAssetsViaCollaborationPanel {
		task ("Add a panel page with collaboration component") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.addPage(
				componentName = "Collaboration",
				pageName = "Test Page Name",
				sitePageType = "Panel");
		}

		task ("View collaboration portlets are shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Page.viewPanelPortletListPG(
				componentName = "Collaboration",
				pageName = "Test Page Name",
				portletNameList = "Blogs,Blogs Aggregator,Invite Members,Message Boards,Questions,Recent Bloggers");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("View Blogs Entry is shown") {
			Page.gotoPagePanelPortlet(portletName = "Blogs");

			BlogsEntry.viewPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("Add a message boards via panel page") {
			Page.gotoPagePanelPortlet(portletName = "Message Boards");

			MessageboardsThread.addPG(
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject");
		}

		task ("View message boards is shown") {
			Page.gotoPagePanelPortlet(portletName = "Message Boards");

			MessageboardsThread.gotoPG(
				lastPostUserName = "Test Test",
				replyCount = 0,
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject");

			MessageboardsThread.viewPG(
				replyCount = 0,
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject",
				userName = "Test Test");
		}
	}

	@description = "The user can not delete the last public page on Liferay instance."
	@priority = 3
	test CannotDeleteLastPublicPageOnDefaultSite {
		task ("Delete the Search page in Liferay instance") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			PagesAdmin.deletePage(pageName = "Search");
		}

		task ("View the last public page can not be deleted") {
			PagesAdmin.openPageEllipsisMenu(pageName = "Home");

			MenuItem.viewNotPresent(menuItem = "Delete");
		}
	}

	@description = "The user can add an embedded and panel page via pages administration."
	@priority = 5
	@uitest
	test ConfigureEmbeddedAndPanelPage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add an embedded page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(
				pageName = "Test Page Name 1",
				pageTypeURL = "https://www.google.com",
				sitePageType = "Embedded");
		}

		task ("Change embedded type URL") {
			PagesAdmin.configurePage(
				pageName = "Test Page Name 1",
				pageTypeURL = "http://iscaliforniaonfire.com/",
				sitePageType = "Embedded");
		}

		task ("Add a panel page with community component") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(
				componentName = "Community",
				pageName = "Test Page Name 2",
				sitePageType = "Panel");
		}

		task ("View the community options are checked in page settings") {
			PagesAdmin.viewPanelPortletList(
				componentName = "Community",
				pageName = "Test Page Name 2",
				portletNameList = "My Sites,Page Comments,Page Flags,Page Ratings");
		}

		task ("View california page is shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#EMBEDDED_IFRAME");

			AssertVisible(
				key_title = "Yes",
				locator1 = "Header#H1_TITLE");
		}

		task ("View community portlets are shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			Page.viewPanelPortletListPG(
				componentName = "Community",
				pageName = "Test Page Name 2",
				portletNameList = "My Sites,Page Comments,Page Flags,Page Ratings");
		}
	}

	@description = "This is a test for LPS-172971. As a page admin, I can edit friendly URL of page sets."
	@priority = 4
	test EditFriendlyURLOfPageSet {
		task ("Given a page admin has a page set with child pages") {
			Site.openSitesAdmin();

			Site.addCustomCP(
				siteName = "Site Name",
				siteTemplateName = "Welcome");

			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			PagesAdmin.addPage(
				pageName = "Test Page Set",
				sitePageType = "Page Set");

			for (var pageName : list "Test Page Name 1,Test Page Name 2") {
				JSONLayout.addPublicLayout(
					groupName = "Site Name",
					layoutName = ${pageName},
					parentLayoutName = "Test Page Set",
					type = "content");
			}

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 1",
				siteName = "Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 2",
				siteName = "Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.publish();
		}

		task ("When the page admin navigates to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");
		}

		task ("Then the page admin could edit the friendly URL of page set") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Set");

			PagesAdmin.editFriendlyURL(friendlyURLEdit = "/presentation");
		}

		task ("When the page admin navigates to the page set via new friendly URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/site-name/presentation");
		}

		task ("Then the page admin is redirected to the first child page") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name 1");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("When the page admin navigates to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");
		}

		task ("Then the page admin could delete the new friendly URL of page set") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Set");

			PagesAdmin.gotoFriendlyURLHistory();

			MouseOver(
				key_oldFriendlyURL = "/test-page-set",
				locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");

			Click(locator1 = "Icon#FRIENDLY_URL_HISTORY_ITEM_RESTORE");

			PagesAdmin.removeOldFriendlyURL(oldFriendlyURL = "/presentation");

			IFrame.closeFrame();

			PortletEntry.save();
		}

		task ("When the page admin navigates to the page set via new friendly URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/site-name/presentation");
		}

		task ("Then the page admin is redirected to not found") {
			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "Page Not Found");
		}

		task ("When the page admin navigates to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");
		}

		task ("Then the page admin could delete the page set and child pages") {
			for (var pageName : list "Test Page Name 1,Test Page Name 2,Test Page Set") {
				JSONLayout.deletePublicLayout(
					groupName = "Site Name",
					layoutName = ${pageName});
			}
		}

		task ("When the page admin navigates to the page set via friendly URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/site-name/test-page-set");
		}

		task ("Then the page admin is redirected to not found") {
			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "Page Not Found");

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This is a use case for LPS-71160. Can edit the SEO settings in a widget page via control menu."
	@priority = 5
	test EditPageViaControlMenu {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Edit the page via control menu") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Navigator.gotoEditPageViaControlMenu(pageName = "Test Page Name");

			PagesAdmin.editName(pageNameEdit = "Test Page Name Edit");
		}

		task ("View the edited name in pages admin") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name Edit",
				siteName = "Test Site Name");

			PagesAdmin.viewPageItemPresent(pageName = "Test Page Name Edit");
		}

		task ("Edit the SEO settings") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name Edit",
				siteName = "Test Site Name");

			Navigator.gotoEditPageViaControlMenu(pageName = "Test Page Name Edit");

			PagesAdmin.editSeoMetadata(
				htmlTitle = "S.P.A.C.E.Home",
				metaTagsDescription = "Welcome to S.P.A.C.E., a graduate-level school for those passionate about expanding their horizons through science, research, and space travel",
				metaTagsKeywords = "space, education, space travel, graduateschool");
		}

		task ("View the SEO settings is shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name Edit",
				siteName = "Test Site Name");

			Navigator.gotoEditPageViaControlMenu(pageName = "Test Page Name Edit");

			PagesAdmin.viewSeoMetadata(
				htmlTitle = "S.P.A.C.E.Home",
				metaTagsDescription = "Welcome to S.P.A.C.E., a graduate-level school for those passionate about expanding their horizons through science, research, and space travel",
				metaTagsKeywords = "space, education, space travel, graduateschool");
		}
	}

	@description = "This is a test for LPS-145264. The changes on widget page template should be propagate to widget page when Inherit Changes is enabled."
	@priority = 4
	test PropagateChangesFromWidgetPageTemplate {
		property testray.component.names = "Site Pages Administration,Widget Page Templates";

		task ("Given a page creator has a widget page template") {
			task ("Add a widget page template") {
				JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
					groupName = "Test Site Name",
					layoutPageTemplateCollectionName = "Widget Template Collection");

				JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
					groupName = "Test Site Name",
					layoutPageTemplateCollectionName = "Widget Template Collection",
					layoutPageTemplateEntryName = "Widget Template Name",
					layoutPageTemplateStatus = "Approved",
					layoutPageTemplateType = "Widget Page Template");
			}

			task ("Add a Blogs widget to page template") {
				PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

				Navigator.gotoNavNested(navNested = "Widget Template Collection");

				PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Widget Template Name");

				Portlet.addPG(portletName = "Blogs");
			}
		}

		task ("When the page creator adds a widget page based on template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(
				collectionName = "Widget Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Widget Template Name");
		}

		task ("Then page creator can see Inherit Changes is enabled by default") {
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Inherit Changes",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Alert.viewWarningSpecific(warningMessage = "Some page settings are unavailable because Inherit Changes is enabled. To change these settings, disable Inherit Changes under the General section.");
		}

		task ("When the page creator adds an Asset Publisher on widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Widget Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Widget Template Name");

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("Then the page creator should see the Asset Publisher is propagated to widget page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site name");

			for (var widgetName : list "Blogs,Asset Publisher") {
				Portlet.viewSpecificPG(portletName = ${widgetName});
			}
		}
	}

	@description = "An error is thrown when the default language has an empty friendly url in widget page."
	@priority = 3
	test ViewNoExceptionWhenPageWithoutFriendlyURLInDefaultLanguage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a localized friendly url") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name");

			PagesAdmin.addLocalizedFriendlyURL(
				configureWithoutSave = "true",
				friendlyURLLocalizedList = "de-DE",
				localizedFriendlyURLList = "/german",
				localizedNameList = "-");
		}

		task ("Delete default friendly url") {
			PagesAdmin.deleteFriendlyURL(locale = "en-US");
		}

		task ("View no error thrown on console when navigating to page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertConsoleTextNotPresent(value1 = "java.lang.StringIndexOutOfBoundsException: String index out of range: -1");
		}

		task ("View default friendly url") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name");

			PagesAdmin.viewFriendlyURL(pageName = "test-page-name");
		}
	}

}