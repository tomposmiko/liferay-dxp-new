@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "This is a test for LPS-158744. The new fragment set will be appended to the bottom of fragment sets list with customized order in Fragments and Widgets panel."
	@priority = "4"
	test AppendNewFragmentSetToTheBottomOfCustomizedOrder {
		property custom.properties = "feature.flag.LPS-158737=true";

		task ("Given a page creator customized the order of fragment sets") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.reorderSets(
				action = "Move Down",
				navTab = "Fragments",
				setName = "Basic Components");
		}

		task ("When the page creator adds a new fragment set with a fragment") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Fragment Set Name");

			JSONFragment.addSection(
				collectionName = "Fragment Set Name",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				name = "Fragment Name");
		}

		task ("Then the page creator sees the new fragment set appended to the bottom of the customized order") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				index = "3",
				key_panel = "Basic Components",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");

			AssertVisible(
				index = "last()",
				key_panel = "Fragment Set Name",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");
		}
	}

	@description = "This is a test for LPS-130964 and LPS-76741. Change display style in Fragments and Widgets panel."
	@priority = "4"
	test ChangeDisplayStyle {
		task ("Navigate to the Pages admin in new site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Access to content page at edit mode") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Open the Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("View the tooltip when hover on the display style button") {
			MouseOver(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

			AssertVisible(
				key_content = "Switch to Card View",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("Change to card display style") {
			Click(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

			AssertVisible(
				key_switchTo = "list",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("View the tooltip when hover on the display style button") {
			MouseOver(
				key_switchTo = "list",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

			AssertVisible(
				key_content = "Switch to List View",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("Pubish the page") {
			PageEditor.publish();
		}

		task ("Access to content page at edit mode again") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("View the display style is card in Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			AssertVisible(
				key_switchTo = "list",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("Navigate Back to Site Pages") {
			Navigator.gotoBack();
		}

		task ("Access to content page can be edited at view mode") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Test Content Page Name");

			ContentPages.gotoPageEditor();
		}
	}

	@description = "This is a test for LPS-158744. The page creator could customize the order of fragment sets and widget categories in Fragments and Widgets panel."
	@priority = "4"
	test CustomizeOrderOfFragmentSetsAndWidgetCategories {
		property custom.properties = "feature.flag.LPS-158737=true";

		task ("Given a page creator navigates to the Fragments and Widgets panel in page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator customizes the order of fragment sets and widget categories") {
			PageEditor.reorderSets(
				action = "Move Down",
				navTab = "Fragments",
				setName = "Basic Components");

			PageEditor.reorderSets(
				action = "Move Up",
				navTab = "Widgets",
				setName = "Commerce");
		}

		task ("Then the page creator sees the customized order of fragment sets and widget categories on Fragments and Widgets panel") {
			AssertVisible(
				index = "3",
				key_panel = "Basic Components",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");

			Navigator.gotoNavTab(navTab = "Widgets");

			AssertVisible(
				index = "4",
				key_panel = "Commerce",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");
		}
	}

	@description = "This is a test for LPS-158744. Each user could customize order of fragment sets and widgets categories in Fragments and Widgets panel."
	@priority = "4"
	test CustomizeOrderOfFragmentSetsAndWidgetCategoriesByEachUser {
		property custom.properties = "feature.flag.LPS-158737=true${line.separator}jsonws.web.service.paths.excludes=";

		task ("Given a page creator customizes the order of fragment sets and widget categories in the Fragments and Widgets panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.reorderSets(
				action = "Move Down",
				navTab = "Fragments",
				setName = "Basic Components");

			PageEditor.reorderSets(
				action = "Move Up",
				navTab = "Widgets",
				setName = "Commerce");
		}

		task ("When a site administrator navigates to the Fragments and Widgets panel") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Site Administrator",
				userEmailAddress = "userea@liferay.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the site administrator sees the default order of fragment sets and widget categories on Fragments and Widgets panel") {
			AssertVisible(
				index = "2",
				key_panel = "Basic Components",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");

			Navigator.gotoNavTab(navTab = "Widgets");

			AssertVisible(
				index = "5",
				key_panel = "Commerce",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");
		}

		task ("When the site administrator customizes the order of fragment sets and widget categories") {
			PageEditor.reorderSets(
				action = "Move Down",
				navTab = "Fragments",
				setName = "Content Display");

			PageEditor.reorderSets(
				action = "Move Up",
				navTab = "Widgets",
				setName = "Collaboration");
		}

		task ("Then the site administrator sees the customized order of fragment sets and widget categories on Fragments and Widgets panel") {
			AssertVisible(
				index = "3",
				key_panel = "Collaboration",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");

			Navigator.gotoNavTab(navTab = "Fragments");

			AssertVisible(
				index = "4",
				key_panel = "Content Display",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");
		}
	}

	@description = "This is a test for LPS-158744. When move a fragment set to the place of a hidden fragment set, it should be placed bottom of the hidden fragment set in Fragments and Widgets panel."
	@priority = "4"
	test MoveFragmentSetToThePlaceOfHiddenOne {
		property custom.properties = "feature.flag.LPS-158737=true";

		task ("Given a page creator has a content page based on a custom master with disallowed fragment set") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			Click(locator1 = "Button#CONFIGURE_ALLOWED_FRAGMENTS");

			MastersPageTemplates.deselectAllowedFragments(fragmentNameList = "Basic Components");

			MastersPageTemplates.publishMaster();

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");
		}

		task ("When the page creator moves a fragment set to the place of the hidden one in content page") {
			PageEditor.reorderSets(
				action = "Move Up",
				navTab = "Fragments",
				setName = "Cookie Banner");

			AssertVisible(
				index = "2",
				key_panel = "Cookie Banner",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");
		}

		task ("Then the page creator sees the fragment set is placed bottom of the hidden fragment set in master page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			AssertVisible(
				index = "2",
				key_panel = "Basic Components",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");

			AssertVisible(
				index = "3",
				key_panel = "Cookie Banner",
				locator1 = "Panel#TAB_PANEL_BY_INDEX");
		}
	}

	@description = "This is a test for LPS-130964. The Fragments and Widgets panel should persist interaction states on content page."
	@priority = "4"
	test PersistInteractionStatesForRelease {
		property portal.upstream = "false";

		task ("Given a page creator accesses to the Fragments and Widgets panel") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Fragment Set Name");

			var htmlSnippet = '''
<div class="fragment-example">
	Fragment Example
</div>		''';

			JSONFragment.addSection(
				collectionName = "Fragment Set Name",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Fragment Name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator makes interactions with the Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			for (var sectionName : list "Layout Elements,Basic Components,Cookie Banner") {
				Panel.collapsePanel(panel = "${sectionName}");
			}

			for (var sectionName : list "Navigation Bars,Fragment Set Name") {
				Panel.expandPanel(panel = "${sectionName}");
			}

			Navigator.gotoNavTab(navTab = "Widgets");

			for (var sectionName : list "Highlighted,Accounts") {
				Panel.collapsePanel(panel = "${sectionName}");
			}

			Panel.expandPanel(panel = "Content Management");

			PageEditor.publish();
		}

		task ("Then the Fragments and Widgets panel persists the interaction states") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementPresent(
				key_tab = "Widgets",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			for (var sectionName : list "Highlighted,Accounts") {
				AssertElementPresent(
					key_panel = "${sectionName}",
					locator1 = "Panel#PANEL_COLLAPSED");
			}

			AssertElementPresent(
				key_panel = "Content Management",
				locator1 = "Panel#PANEL_EXPANDED");

			Navigator.gotoNavTab(navTab = "Fragments");

			for (var sectionName : list "Layout Elements,Basic Components,Cookie Banner") {
				AssertElementPresent(
					key_panel = "${sectionName}",
					locator1 = "Panel#PANEL_COLLAPSED");
			}

			for (var sectionName : list "Navigation Bars,Fragment Set Name") {
				AssertElementPresent(
					key_panel = "${sectionName}",
					locator1 = "Panel#PANEL_EXPANDED");
			}
		}
	}

	@description = "This is a test for LPS-130964. The Fragments and Widgets panel should persist interaction states on content page."
	@priority = "4"
	test PersistInteractionStatesForUpstream {
		property portal.release = "false";

		task ("Given a page creator accesses to the Fragments and Widgets panel") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Fragment Set Name");

			var htmlSnippet = '''
<div class="fragment-example">
	Fragment Example
</div>		''';

			JSONFragment.addSection(
				collectionName = "Fragment Set Name",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Fragment Name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator makes interactions with the Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			for (var sectionName : list "Layout Elements,Basic Components,Cookie Banner") {
				Panel.collapsePanel(panel = "${sectionName}");
			}

			for (var sectionName : list "Navigation Bars,Fragment Set Name") {
				Panel.expandPanel(panel = "${sectionName}");
			}

			Navigator.gotoNavTab(navTab = "Widgets");

			for (var sectionName : list "Highlighted,Accounts,Business Intelligence & Reporting") {
				Panel.collapsePanel(panel = "${sectionName}");
			}

			Panel.expandPanel(panel = "Content Management");

			PageEditor.publish();
		}

		task ("Then the Fragments and Widgets panel persists the interaction states") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			AssertElementPresent(
				key_tab = "Widgets",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			for (var sectionName : list "Highlighted,Accounts,Business Intelligence & Reporting") {
				AssertElementPresent(
					key_panel = "${sectionName}",
					locator1 = "Panel#PANEL_COLLAPSED");
			}

			AssertElementPresent(
				key_panel = "Content Management",
				locator1 = "Panel#PANEL_EXPANDED");

			Navigator.gotoNavTab(navTab = "Fragments");

			for (var sectionName : list "Layout Elements,Basic Components,Cookie Banner") {
				AssertElementPresent(
					key_panel = "${sectionName}",
					locator1 = "Panel#PANEL_COLLAPSED");
			}

			for (var sectionName : list "Navigation Bars,Fragment Set Name") {
				AssertElementPresent(
					key_panel = "${sectionName}",
					locator1 = "Panel#PANEL_EXPANDED");
			}
		}
	}

	@description = "This is a test for LPS-130964. View visual feedback when drag items in Fragments and Widgets panel."
	@priority = "4"
	test ViewVisualFeedbackWhenDragItems {
		task ("Navigate to content page at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Open the Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("View the display style is list") {
			AssertVisible(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("View the visual feedback when drag items") {
			DragOver(
				key_collectionName = "Layout Elements",
				key_fragmentName = "Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertVisible(locator1 = "//li[contains(@class,'page-editor__fragments-widgets__tab-list-item')][normalize-space()='Container'][contains(@class,'disabled')]");

			Refresh();

			Navigator.gotoNavTab(navTab = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = "Blogs");

			DragOver(
				key_indexItem = "1",
				key_portletName = "Blogs",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertVisible(locator1 = "//li[contains(@class,'page-editor__fragments-widgets__tab-list-item')][normalize-space()='Blogs'][contains(@class,'disabled')]");

			Refresh();

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Change to card display style") {
			Navigator.gotoNavTab(navTab = "Fragments");

			Click(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

			AssertVisible(
				key_switchTo = "list",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("View the visual feedback when drag items") {
			DragOver(
				key_collectionName = "Layout Elements",
				key_fragmentName = "Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
				locator2 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertVisible(locator1 = "//li[contains(@class,'page-editor__fragments-widgets__tab-card-item')][normalize-space()='Container'][contains(@class,'disabled')]");
		}
	}

	@description = "This is a test for LPS-130964 and LPS-132890. View visual feedback when hover on items in Fragments and Widgets panel."
	@priority = "4"
	test ViewVisualFeedbackWhenHoverOnItems {
		task ("Navigate to content page at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Open the Fragments and Widgets panel") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");
		}

		task ("View the display style is list") {
			AssertVisible(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("View the visual feedback when hover on items") {
			MouseOver(
				key_collectionName = "Layout Elements",
				key_fragmentName = "Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			AssertCssValue(
				key_collectionName = "Layout Elements",
				key_fragmentName = "Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "box-shadow",
				value1 = "rgb(128, 172, 255) 0px 0px 0px 2px, rgba(39, 40, 51, 0.1) 0px 4px 8px 0px");

			Navigator.gotoNavTab(navTab = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = "Blogs");

			MouseOver(
				key_indexItem = "1",
				key_portletName = "Blogs",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET");

			AssertCssValue(
				key_indexItem = "1",
				key_portletName = "Blogs",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "box-shadow",
				value1 = "rgb(128, 172, 255) 0px 0px 0px 2px, rgba(39, 40, 51, 0.1) 0px 4px 8px 0px");

			Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
		}

		task ("Change to card display style") {
			Navigator.gotoNavTab(navTab = "Fragments");

			Click(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

			AssertVisible(
				key_switchTo = "list",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("View the visual feedback when hover on items") {
			MouseOver(
				key_collectionName = "Layout Elements",
				key_fragmentName = "Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertCssValue(
				key_collectionName = "Layout Elements",
				key_fragmentName = "Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
				locator2 = "box-shadow",
				value1 = "rgba(39, 40, 51, 0.1) 0px 4px 8px 0px");
		}

		task ("View the tooltip when hover on the card title") {
			MouseOver(
				key_card = "Container",
				locator1 = "Card#CARD_TITLE");

			AssertVisible(
				key_content = "Container",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

}