@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONFragment.addFragmentCollection(
			groupName = "Test Site Name",
			name = "Collection Name");

		JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection");

		JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection",
			layoutPageTemplateEntryName = "Page Template Name",
			layoutPageTemplateStatus = "Draft",
			layoutPageTemplateType = "Content Page Template");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-99377. User can add a checkbox configuration fragment to a content page template."
	@priority = "5"
	test AddCheckboxConfigurationFragmentToContentPageTemplate {
		property portal.acceptance = "true";

		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.html");

			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Checkbox Fragment Example");
		}

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Checkbox Fragment Example");

		PageEditorConfiguration.checkConfigCheckbox(
			checkboxName = "Hide Body",
			fragmentName = "Checkbox Fragment Example");

		PageEditorConfiguration.checkConfigCheckbox(
			checkboxName = "Make Bold",
			fragmentName = "Checkbox Fragment Example");

		PageEditor.clickPublish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		task ("Assert body text is hidden") {
			AssertElementNotPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//h3[contains(.,'Body Present!!')]");
		}

		task ("Assert text is bolded") {
			AssertElementPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//b[contains(.,'Bold Words')]");
		}
	}

	@description = "This is a test for LPS-100545. An itemSelector fragment configuration can select an asset in a content page template"
	@priority = "4"
	test AddItemSelectorConfigurationFragmentToContentPageTemplate {
		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "itemSelector_configuration.html");

			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "itemSelector_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "itemSelector Fragment Example");
		}

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WebContent Title");

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "itemSelector Fragment Example");

		PageEditor.editContentDisplay(
			fragmentName = "itemSelector Fragment Example",
			webcontent = "true",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WebContent Title");

		PageEditor.clickPublish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		task ("Assert correct content is visible") {
			AssertVisible(
				key_content = "WC WebContent Content",
				key_fragmentClass = "configuration",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-96685. User can change select fragment configuration in a content page template."
	test AddSelectConfigurationFragmentToContentPageTemplate {
		property portal.acceptance = "true";

		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "select_configuration.html");

			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "select_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Text Fragment Example");
		}

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Text Fragment Example");

		PageEditorConfiguration.changeConfigSelection(
			fragmentName = "Text Fragment Example",
			optionValue = "dark");

		PageEditor.clickPublish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		task ("Assert dark text is visible") {
			AssertElementPresent(locator1 = "//div[contains(@class,'fragment-configuration')]/div[contains(@class,'dark')]");
		}
	}

	@description = "This is a test for LPS-99543. User can change text fragment configuration in a content page template."
	@priority = "5"
	test AddTextConfigurationFragmentToContentPageTemplate {
		property portal.acceptance = "true";

		task ("Add a section fragment to the fragment collection via JSON") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.html");

			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Text Fragment Example");
		}

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Text Fragment Example");

		PageEditorConfiguration.changeConfigText(
			editableText = "Updated fragment text",
			fragmentName = "Text Fragment Example",
			textConfigName = "buttonText");

		PageEditor.clickPublish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		task ("Assert text is changed") {
			AssertVisible(
				key_content = "Updated fragment text",
				key_fragmentClass = "configuration",
				locator1 = "Fragment#FRAGMENT");
		}
	}

}