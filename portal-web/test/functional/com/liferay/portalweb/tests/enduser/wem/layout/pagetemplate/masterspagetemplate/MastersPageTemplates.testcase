@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Page Templates";
	property testray.main.component.name = "Page Templates";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-102566. There's a custom masters page created in site, when add a new page, there's an option to select the created masters, and the common elements added in masters page are added in page"
	@priority = "5"
	test AddPageBasedOnCustomMastersAndInheritElementsFromCustomMasters {
		task ("Add a custom masters with Button fragment") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.clickPublish();
		}

		task ("Assert custom masters as an option when add a new page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");
		}

		task ("Assert the new page inherits elements from custom masters") {
			AssertVisible(
				key_fragmentName = "button",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");
		}
	}

	@description = "This is a test for LPS-102208. As a master pages administrator I can duplicate a masters template"
	@priority = "5"
	test CanDuplicateMastersPageTemplate {
		MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
			item = "Make a Copy",
			masterLayoutName = "Custom Masters Page Template");

		MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template (Copy)");
	}

	@description = "This is for LPS-103687. Validate if the Blank page template can not be deleted."
	@priority = "5"
	test CannotDeleteBlankPageTemplate {
		task ("Assert the Blank page template exist") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Blank");
		}

		task ("Assert the Blank page template without ellipsis icon button") {
			AssertElementNotPresent(
				key_card = "Blank",
				locator1 = "LexiconCard#CARD_ELLIPSIS");
		}

		task ("Assert the Blank page template without checkbox") {
			AssertElementNotPresent(
				key_card = "Blank",
				locator1 = "LexiconCard#CARD_CHECKBOX");
		}
	}

	@description = "This is for LPS-103687. Validate if the Blank page template can not be edited."
	@priority = "5"
	test CannotEditBlankPageTemplate {
		task ("Assert the Blank page template exist") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Blank");
		}

		task ("Assert the Blank page template without ellipsis icon button") {
			AssertElementNotPresent(
				key_card = "Blank",
				locator1 = "LexiconCard#CARD_ELLIPSIS");
		}
	}

	@description = "This is for LPS-102200. Can edit master page template elements from  "Look and Feel" of page editor."
	@priority = "5"
	test EditMasterPageTemplateViaPageEditorLookAndFeel {
		MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
			item = "Edit",
			masterLayoutName = "Custom Masters Page Template");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.addWidget(portletName = "Asset Publisher");

		PageEditor.clickPublish();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(
			masterLayoutName = "Custom Masters Page Template",
			pageName = "Test Content Page Name");

		PageEditor.gotoTab(tabName = "Look and Feel");

		Click(
			key_text = "Edit Master",
			locator1 = "Button#ANY");

		PageEditor.viewFragment(fragmentName = "Button");

		PageEditor.viewFragment(fragmentName = "Asset Publisher");

		PageEditor.addWidget(portletName = "Web Content Display");

		MastersPageTemplates.clickPublishMaster();

		WebContentDisplayPortlet.viewDefaultMessage();

		AssertVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR");
	}

	@description = "This is a test for LPS-102566. The new elements can only be added into Drop Zone in a page based on custom master and the elements inherited from the custom master are changless."
	@priority = "3"
	test OnlyAddElementsInDropZoneOfPageAndElementsInheritedAreChangeless {
		task ("Add a custom master with Heading fragment and Asset Publisher portlet") {
			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addWidget(portletName = "Asset Publisher");

			PageEditor.clickPublish();
		}

		task ("Assert elements inherited from custom masters are changeless") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");

			Click(
				key_position = "2",
				locator1 = "PageEditor#SECTION_CONTAINER");

			AssertElementNotPresent(locator1 = "FragmentEditor#FRAGMENTS_EDITOR_FLOATING_TOOLBAR");

			Click(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertElementNotPresent(locator1 = "FragmentEditor#FRAGMENTS_EDITOR_FLOATING_TOOLBAR");

			Click(
				key_fragmentName = "Heading",
				key_id = "element-text",
				locator1 = "Fragment#EDITABLE_FIELD");

			AssertElementNotPresent(locator1 = "FragmentEditor#FRAGMENTS_EDITOR_FLOATING_TOOLBAR");

			Click(
				key_position = "3",
				locator1 = "PageEditor#SECTION_CONTAINER");

			AssertElementNotPresent(locator1 = "FragmentEditor#FRAGMENTS_EDITOR_FLOATING_TOOLBAR");

			Click(
				key_portletName = "Asset Publisher",
				locator1 = "PageEditor#PORTLET_INHERITED_FROM_CUSTOM_MASTERS");

			AssertElementNotPresent(locator1 = "FragmentEditor#FRAGMENTS_EDITOR_FLOATING_TOOLBAR");

			AssertNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
		}

		task ("Add a Button fragment to drop zone") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Assert can not add a Paragraph fragment to outside of drop zone") {
			PageEditor.viewCannotAddFragmentToOutsideOfDropZone(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}
	}

	@description = "This is a test for LPS-102566. Master page can be used in page, page template and display page, changes in master page will be propagated to page, page template and display page"
	@priority = "5"
	test PropagateChangesFromCustomMastersToAllBasedOnCustomMasters {
		task ("Add a page based on custom masters") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name");

			PageEditor.clickPublish();
		}

		task ("Add a content page template based on custom masters") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				masterLayoutName = "Custom Masters Page Template",
				pageTemplateName = "Page Template Name");

			PageEditor.clickPublish();
		}

		task ("Add a display page template based on custom masters") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				displayPageName = "Display Page Name",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.clickPublish();
		}

		task ("Add a Heading fragment to custom masters") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			MastersPageTemplates.clickPublishMaster();
		}

		task ("Assert the Heading fragment exist in page based on custom masters") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-page-name");

			AssertVisible(
				key_fragmentName = "heading",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT");

			ContentPages.clickPencil();

			AssertVisible(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");
		}

		task ("Assert the Heading fragment exist in content page template based on custom masters") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Page Template Name");

			AssertVisible(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");
		}

		task ("Assert the Heading fragment exist in display page template based on custom masters") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Edit");

			AssertVisible(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");
		}
	}

}