@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Frontend Dataset";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given access Datasets admin page") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Datasets");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			FrontendDataSetAdmin.deleteAllDatasetEntries();
		}
	}

	@description = "Confirm that the user can change the pagination on the dataset admin page"
	@priority = 4
	test CanChangePaginationInAdminPage {
		task ("Given create 6 data sets") {
			FrontendDataSetAdmin.createDataSet(
				key_datasetNameList = "Test Dataset 1,Test Dataset 2,Test Dataset 3,Test Dataset 4,Test Dataset 5,Test Dataset 6",
				key_type = "/c/fdsentries");
		}

		task ("When changing the page to 4 entries") {
			FrontendDataSetAdmin.changePagination(itemsPerPage = "4 Items");
		}

		task ("Then confirm that only 4 entries are displayed") {
			FrontendDataSetAdmin.assertDataSetEntry(key_dataSetNameList = "Test Dataset 1,Test Dataset 2,Test Dataset 3,Test Dataset 4");

			Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
		}

		task ("When to switch to page 2") {
			Click(locator1 = "Pagination#NEXT_LINK");
		}

		task ("Then 2 entries are displayed") {
			FrontendDataSetAdmin.assertDataSetEntry(key_dataSetNameList = "Test Dataset 5,Test Dataset 6");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
		}
	}

	@description = "LPS-178773 Confirm that the user can create a data set entry"
	@priority = 5
	test CanCreateDataSet {
		task ("When Create a DataSet ") {
			FrontendDataSetAdmin.createDataSet(
				key_name = "Test Dataset",
				key_type = "/c/fdsentries");
		}

		task ("Then Confirm the name as expected") {
			AssertElementPresent(
				key_itemName = "Test Dataset",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}

		task ("And Confirm the Provider as expected") {
			AssertElementPresent(
				key_itemName = "/c/fdsentries",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}
	}

	@description = "LPS-179521. Confirm that the dataset can be delete"
	@priority = 5
	test CanDeleteDataSet {
		task ("When the user goes to add Datasets") {
			FrontendDataSetAdmin.createDataSet(
				key_name = "Test Dataset",
				key_type = "/c/fdsentries");
		}

		task ("And the user deletes a dataset") {
			FrontendDataSetAdmin.deleteDataSet(entry = "Test Dataset");
		}

		task ("Then The dataset is not present in the data set Admin page") {
			AssertElementPresent(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "LPS-178779. Confirm the error message that appears when the user tries to create a dataset entry with more than 280 characters in the name field"
	@priority = 3
	test CannotExceed280Characters {
		task ("When the user goes to add Datasets") {
			LexiconEntry.gotoAdd();
		}

		task ("When a user types a name that is more than 280 characters") {
			PortletEntry.inputName(name = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam fermentum, est sed varius porttitor, odio tortor commodo ligula, quis auctor nulla massa ut eros. Vestibulum in eros maximus quam gravida dapibus. Proin vitae mi diam. Duis iaculis, nisi quis pharetra varius, arcu eros bibendum turpis, nec posuere nibh arcu id orci.");
		}

		task ("And choose the provider named Channel") {
			FrontendDataSetAdmin.selectProvider(key_type = "/c/fdsentries");
		}

		task ("And clicking on the Save button") {
			Button.clickSave();
		}

		task ("Then Confirm that alert messages are present") {
			AssertTextPresent(
				locator1 = "Message#ERROR",
				value1 = "Your request failed to complete.");
		}
	}

	@description = "LPS-179768. Confirm that the options view and Delete is present and is visible after clicking the ellipsis button."
	@priority = 3
	test DeleteAndViewAreAvailable {
		task ("When The user goes to add a new Dataset") {
			FrontendDataSetAdmin.createDataSet(
				key_name = "Test Dataset",
				key_type = "/c/fdsentries");
		}

		task ("And opening the dropdown menu") {
			Click(
				key_entry = "Test Dataset",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");
		}

		task ("Then Confirm that the options view and Delete is present and is visible") {
			AssertElementPresent(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(locator1 = "FrontendDataSetAdmin#VIEW_ENTRY_BUTTON");
		}
	}

	@description = "LPS-178778. Confirm the error message that appears when the user tries to create a data set entry without the filled name"
	@priority = 3
	test ErrorAppearsWhenNameBlank {
		task ("When the user goes to add Datasets") {
			LexiconEntry.gotoAdd();
		}

		task ("And choose the Provider called /c/fdsentries") {
			FrontendDataSetAdmin.selectProvider(key_type = "/c/fdsentries");
		}

		task ("And clicking on the Save button") {
			Button.clickSave();
		}

		task ("Then Confirm that 'This field is required' alert messages are present in the provider field") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "This field is required.");
		}
	}

	@description = "LPS-178775. Confirm the error message that appears when the user tries to create a Data Set without the filled provider"
	@priority = 3
	test ErrorAppearsWhenProviderBlank {
		task ("When the user goes to add Datasets") {
			LexiconEntry.gotoAdd();
		}

		task ("And filling the field name with 'Test Dataset'") {
			PortletEntry.inputName(name = "Test Dataset");
		}

		task ("And clicking on the Save button") {
			PortletEntry.save();
		}

		task ("Then Confirm that 'This field is required' alert messages are present in the provider field") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "This field is required.");
		}
	}

	@description = "Confirm that the user can cancel the creation of a data set entry"
	@priority = 5
	test NotCreatedAfterCancel {
		task ("When The user goes to add Datasets") {
			LexiconEntry.gotoAdd();
		}

		task ("And fills the field name with name 'Test Dataset'") {
			PortletEntry.inputName(name = "Test Dataset");
		}

		task ("And choose the Provider called /c/fdsentries ") {
			FrontendDataSetAdmin.selectProvider(key_type = "/c/fdsentries");
		}

		task ("And clicking on the Cancel button ") {
			Click(
				key_text = "Cancel",
				locator1 = "Button#ANY_SECONDARY");
		}

		task ("Then Confirm that the dataset was not created") {
			AssertElementNotPresent(
				key_itemName = "Test Dataset",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}
	}

	@description = "LPS-179526. Confirm that the data set was not deleted after clicking CANCEL in the modal"
	@priority = 5
	test NotDeleteDatasetAfterCancel {
		task ("When the user goes to add Datasets") {
			FrontendDataSetAdmin.createDataSet(
				key_name = "Test Dataset",
				key_type = "/c/fdsentries");
		}

		task ("And the user deletes a dataset") {
			Click(
				key_entry = "Test Dataset",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(
				key_modalText = "Deleting a dataset is an action that cannot be reversed. The content will be deleted and some dataset fragments may not be displayed.",
				locator1 = "FrontendDataSetAdmin#DELETE_DATA_SET_MODAL_BODY");

			Button.clickCancel();
		}

		task ("Then The dataset is not present in the data set Admin page") {
			AssertElementPresent(
				key_itemName = "Test Dataset",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}
	}

	@description = "LPS-179527. Confirm that the data set was not deleted after clicking clicks on the 'X' button in the modal"
	@priority = 5
	test NotDeleteDatasetAfterCloseButton {
		task ("When The user goes to add a new Dataset") {
			FrontendDataSetAdmin.createDataSet(
				key_name = "Test Dataset",
				key_type = "/c/fdsentries");
		}

		task ("And When the user deletes a dataset") {
			Click(
				key_entry = "Test Dataset",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(
				key_modalText = "Deleting a dataset is an action that cannot be reversed. The content will be deleted and some dataset fragments may not be displayed.",
				locator1 = "FrontendDataSetAdmin#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And When the user clicks on the 'X' button in the modal") {
			Click(
				key_modalTitle = "Delete Dataset",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then The dataset is present in the data set Admin page") {
			AssertElementPresent(
				key_itemName = "Test Dataset",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}
	}

	@description = "LPS-179056. Confirm that the user can create a data set entry with special chatacters"
	@priority = 5
	test WithSpecialCharacters {
		task ("When Create a DataSet") {
			FrontendDataSetAdmin.createDataSet(
				key_name = "Data Set ~!@#$%^&*(){}[],.<>/? name",
				key_type = "/c/fdsentries");
		}

		task ("Then confirm that the dataset is created and if the name is provided as expected") {
			AssertElementPresent(
				key_itemName = "Data Set ~!@#$%^&*(){}[],.<>/? name",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}

		task ("And Then Confirm the Provider as expected") {
			AssertElementPresent(
				key_itemName = "/c/fdsentries",
				locator1 = "FrontendDataSetAdmin#TABLE_CELL");
		}
	}

}