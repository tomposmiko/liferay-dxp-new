@component-name = "portal-search"
definition {

	property osgi.app.includes = "portal-search-elasticsearch7";
	property osgi.module.configuration.file.names = "com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config";
	property osgi.module.configurations = "blacklistBundleSymbolicNames=&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.api,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise.test.data,com.liferay.portal.mobile.device.detection.fiftyonedegrees,com.liferay.portal.search.elasticsearch6.impl,com.liferay.portal.search.elasticsearch6.spi,com.liferay.portal.search.elasticsearch6.api,com.liferay.portal.search.elasticsearch6.xpack.security.impl,com.liferay.portal.search.elasticsearch6.xpack.monitoring.web&quot;";
	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			MessageboardsThread.tearDownCP();

			DMDocument.tearDownCP();

			Page.tearDownCP();
		}
	}

	test AssertSearchAdmin {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.assertEngineVendorAndVersions(
			clientVersion = "7.3.0",
			engineVendor = "Elasticsearch",
			serverVersion = "7.3.0");

		Navigator.gotoNavItem(navItem = "Field Mappings");

		Click(
			key_navNested = "liferay-0",
			locator1 = "NavNested#NAV_NESTED_LINK");

		AssertTextEquals.assertPartialText(
			indexName = "liferay-0",
			locator1 = "Search#FIELD_MAPPINGS_EDITOR",
			value1 = "liferay-0");

		var companyId = JSONCompany.getCompanyId();
		var liferayIndexName = "liferay-${companyId}";

		Click(
			key_navNested = "${liferayIndexName}",
			locator1 = "NavNested#NAV_NESTED_LINK");

		AssertTextEquals.assertPartialText(
			indexName = "${liferayIndexName}",
			locator1 = "Search#FIELD_MAPPINGS_EDITOR",
			value1 = "${liferayIndexName}");
	}

	@priority = "4"
	test AssertSearchInsightsExplain {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "apple");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search");

		Portlet.addPG(portletName = "Search Insights");

		Portlet.gotoPortletOptions(
			portletName = "Search Insights",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertChecked(
			checkboxName = "Enable Score Explanation",
			locator1 = "Checkbox#ANY_CHECKBOX");

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_STRING_QUERY",
			value1 = "&quot;explain&quot;:true");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY",
			value1 = "buckets");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY",
			value1 = "_explanation");

		Portlet.gotoPortletOptions(
			portletName = "Search Insights",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Uncheck(
			checkboxName = "Enable Score Explanation",
			locator1 = "Checkbox#ANY_CHECKBOX");

		PortletEntry.save();

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_STRING_QUERY",
			value1 = "&quot;explain&quot;:false");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY",
			value1 = "_explanation");
	}

	@ignore = "true"
	@priority = "3"
	test AssertSystemSettingsPropogateToModule {

		// Ignoring test until LPS-65459 is resolved

		property test.name.skip.portal.instance = "Elasticsearch7#AssertSystemSettingsPropogateToModule";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Elasticsearch 7",
			configurationScope = "System Scope");

		SystemSettings.editTextAreaSetting(
			settingName = "Cluster Name",
			settingValue = "LiferayElasticsearchCluster1");

		SystemSettings.saveConfiguration();

		Navigator.openSpecificURL(url = "http://localhost:9200");

		Elasticsearch.viewClusterStatus(clusterStatus = "&quot;cluster_name&quot; : &quot;LiferayElasticsearchCluster1&quot;");
	}

	@priority = "5"
	test ElasticsearchRemoteClusterSmokeTest {
		property portal.acceptance = "true";
		property remote.elasticsearch.cluster.size = "2";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "Elasticsearch7#ElasticsearchRemoteClusterSmokeTest";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(numberOfNodes = "2");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "Orange",
			threadSubject = "Apple");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "Orange",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@priority = "5"
	test OSGiConfigSmokeTest {
		property osgi.module.configuration.file.names = "com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config:com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration.config";
		property osgi.module.configurations = "clusterName=&quot;LiferayElasticsearchCluster1&quot;:blacklistBundleSymbolicNames=&quot;com.liferay.portal.mobile.device.detection.fiftyonedegrees.api,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise,com.liferay.portal.mobile.device.detection.fiftyonedegrees.enterprise.test.data,com.liferay.portal.mobile.device.detection.fiftyonedegrees,com.liferay.portal.search.elasticsearch6.impl,com.liferay.portal.search.elasticsearch6.spi,com.liferay.portal.search.elasticsearch6.api,com.liferay.portal.search.elasticsearch6.xpack.security.impl,com.liferay.portal.search.elasticsearch6.xpack.monitoring.web&quot;";
		property portal.acceptance = "true";

		Navigator.openSpecificURL(url = "http://localhost:9201");

		Elasticsearch.viewClusterStatus(clusterStatus = "&quot;cluster_name&quot; : &quot;LiferayElasticsearchCluster1&quot;");
	}

	test SearchWithNonLiferayIndex {
		property test.name.skip.portal.instance = "Elasticsearch7#SearchWithNonLiferayIndex";

		Navigator.openSpecificURL(url = "http://localhost:9201");

		if (IsTextEqual.isPartialText(locator1 = "//body", value1 = "&quot;number&quot; : &quot;7")) {
			AntCommand(
				locator1 = "build-test-elasticsearch7.xml",
				value1 = "add-boston-dataset-index -Dbackup.index=boston311 -Delasticsearch.port=9201");
		}
		else {
			Navigator.openSpecificURL(url = "http://localhost:9200");

			AntCommand(
				locator1 = "build-test-elasticsearch6.xml",
				value1 = "add-boston-dataset-index -Dbackup.index=boston311 -Delasticsearch.port=9200");
		}

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search-page");

		SearchPortlets.addWidgets(searchPortletList = "Custom Filter,Low Level Search Options,Search Results,Search Bar");

		SearchPortlets.configureCustomFilter(
			customParameterName = "q",
			federatedSearchKey = "s1",
			filterField = "case_title,closure_reason",
			filterQueryType = "Multi Match");

		SearchPortlets.configureLowLevelSearchOptions(
			federatedSearchKey = "s1",
			indexes = "boston311");

		SearchResultPortlet.configureSearchResults(
			federatedSearchKey = "s1",
			fieldsToDisplay = "case_title,closure_reason,case_enquiry_id");

		SearchPortlets.searchWidget(searchTerm = "bicycle");

		AssertTextEquals.assertPartialText(
			key_searchAssetTitle = "Abandoned Bicycle",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE",
			value1 = "Abandoned Bicycle");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#RESULTS_PORTLET_SEARCH_QUERY",
			value1 = "1 results for bicycle");
	}

}