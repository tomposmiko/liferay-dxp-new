@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "System Settings";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "5"
	test CanOverrideValueSetInConfigFile {
		property custom.properties = "configuration.override.com.liferay.journal.configuration.JournalServiceConfiguration_articleCommentsEnabled=B\"false\"";
		property osgi.module.configuration.file.names = "com.liferay.journal.configuration.JournalServiceConfiguration.config";
		property osgi.module.configurations = "articleCommentsEnabled=B\"true\"";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SystemSettings#CanOverrideValueSetInConfigFile";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "articleCommentsEnabled");

		FormFields.viewFieldText(
			fieldName = "articleCommentsEnabled",
			fieldText = "Set this to true to enable comments for journal articles. This field has been set by a portal property and cannot be changed here.");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Web Content Page Test");

		Navigator.gotoPage(pageName = "Web Content Page Test");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementNotPresent(
			key_fieldName = "Comments",
			locator1 = "Portlet#CONFIGURATION_CHECKBOX");
	}

	@priority = "4"
	test CanOverrideValueWithoutConfigFile {
		property custom.properties = "configuration.override.com.liferay.journal.configuration.JournalServiceConfiguration_articleCommentsEnabled=B\"false\"";
		property test.name.skip.portal.instance = "SystemSettings#CanOverrideValueWithoutConfigFile";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "articleCommentsEnabled");

		FormFields.viewFieldText(
			fieldName = "articleCommentsEnabled",
			fieldText = "Set this to true to enable comments for journal articles. This field has been set by a portal property and cannot be changed here.");
	}

	@priority = "4"
	test CanUpdateConfigValueViaUI {
		property osgi.module.configuration.file.names = "com.liferay.journal.configuration.JournalServiceConfiguration.config";
		property osgi.module.configurations = "articleCommentsEnabled=B\"true\"";
		property test.name.skip.portal.instance = "SystemSettings#CanUpdateConfigValueViaUI";

		task ("Given assert the Article Comments Enabled is checked for web content in System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Web Content",
				configurationScope = "Virtual Instance Scope");

			FormFields.viewCheckboxChecked(fieldName = "articleCommentsEnabled");

			task ("And assert user can add the comment for web content") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content",
					groupName = "Guest",
					title = "WC WebContent Title");

				JSONLayout.addPublicLayout(
					groupName = "Guest",
					layoutName = "Web Content Page Test");

				JSONLayout.addWidgetToPublicLayout(
					groupName = "Guest",
					layoutName = "Web Content Page Test",
					widgetName = "Web Content Display");

				Navigator.gotoPage(pageName = "Web Content Page Test");

				WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

				IFrame.closeFrame();

				Portlet.gotoPortletOptions(
					portletName = "Web Content Display",
					portletOption = "Configuration");

				WebContentDisplayPortlet.configureSetup(
					enableViewCountIncrement = "true",
					metadataNameList = "Comments");

				WebContentDisplayPortlet.saveConfiguration();

				IFrame.closeFrame();

				Comments.addPG(entryComment = "WC WebContent Content Comment");

				Comments.viewPG(
					commentCount = "1",
					entryComment = "WC WebContent Content Comment",
					userFullName = "Test Test (You)");
			}
		}

		task ("When disable the comment for web content in system settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Web Content",
				configurationScope = "Virtual Instance Scope");

			FormFields.viewCheckboxChecked(fieldName = "articleCommentsEnabled");

			FormFields.disableCheckbox(fieldName = "articleCommentsEnabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then assert the comment for web content not displays on UI") {
			Navigator.gotoPage(pageName = "Web Content Page Test");

			Comments.viewNoComments(entryComment = "WC WebContent Content Comment");

			var fileContent = SystemSettings.getConfigFileContent(configFileName = "com.liferay.journal.configuration.JournalServiceConfiguration.config");
			var expectedText = "articleCommentsEnabled=B\"false\"";

			if (contains("${fileContent}", "${expectedText}")) {
				echo("Config file shows updated value: ${expectedText}");
			}
			else {
				echo("Config file content: ${fileContent}");

				fail("Unable to find expected config value: ${expectedText}");
			}
		}
	}

	@description = "This test asserts that Site OSGi configurations can be used across different systems."
	@priority = "3"
	test CanUseSiteConfigurationAcrossDifferentSitesInSameCompany {
		property custom.properties = "feature.flag.LPS-155284=true";

		task ("Given change the Site OSGi configurations to export") {
			Site.openSiteSettingsAdmin(siteURLKey = "guest");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Accounts",
				configurationName = "Accounts",
				configurationScope = "Site Scope");

			Click(locator1 = "Button#REMOVE_BUTTON");

			Click(locator1 = "Button#SAVE");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Export");
		}

		task ("And a new site is created") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("When change groupKey to new instance site and copy it to the configs folder") {
			var exportConfigFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "com.liferay.account.internal.configuration.AccountEntryGroupConfiguration.scoped_*.config");
			var exportFileDirectory = selenium.getOutputDirName();

			OSGiConfig.editOSGiConfigFileFromTempFolder(
				newValue = "liferay.com--site name",
				oldValue = "liferay.com--Guest",
				osgiConfigFileName = "${exportConfigFileName}");

			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "${exportFileDirectory}",
				osgiConfigFileName = "${exportConfigFileName}");
		}

		task ("And go to Accounts in the new site settings") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/group/site-name/~/control_panel/manage/-/site/settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Accounts",
				configurationName = "Accounts",
				configurationScope = "Site Scope");
		}

		task ("Then new site config is changed and groupKey is changed to groupId in config file") {
			Refresh.pauseRefresh();

			AssertElementPresent(
				key_fieldName = "Allowed Account Types",
				key_fieldValue = "Business",
				locator1 = "FormFields#PREDEFINED_VALUE_AT_FORM_SELECT");

			AssertElementNotPresent(
				key_fieldName = "Allowed Account Types",
				key_fieldValue = "Person",
				locator1 = "FormFields#PREDEFINED_VALUE_AT_FORM_SELECT");

			OSGiConfig.assertTextNotInOSGiConfig(
				osgiConfigFileName = "${exportConfigFileName}",
				text = "groupKey");

			OSGiConfig.assertTextInOSGiConfig(
				osgiConfigFileName = "${exportConfigFileName}",
				text = "groupId");
		}
	}

	@description = "This test asserts that Site OSGi configurations can be used across different systems."
	@priority = "3"
	test CanUseSiteConfigurationAcrossDifferentSystems {
		property custom.properties = "feature.flag.LPS-155284=true";
		property test.name.skip.portal.instance = "SystemSettings#CanUseSiteConfigurationAcrossDifferentSystems";

		task ("Given change the Site OSGi configurations to export") {
			Site.openSiteSettingsAdmin(siteURLKey = "guest");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Accounts",
				configurationName = "Accounts",
				configurationScope = "Site Scope");

			Click(locator1 = "Button#REMOVE_BUTTON");

			Click(locator1 = "Button#SAVE");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Export");
		}

		task ("And a new Virtual Instance is created and login to add the new site") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.addCP(
				siteName = "Site Name",
				siteType = "Blank");
		}

		task ("When change groupKey to new instance site and copy it to the configs folder") {
			var exportConfigFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "com.liferay.account.internal.configuration.AccountEntryGroupConfiguration.scoped_*.config");
			var exportFileDirectory = selenium.getOutputDirName();

			OSGiConfig.editOSGiConfigFileFromTempFolder(
				newValue = "www.able.com--site name",
				oldValue = "liferay.com--Guest",
				osgiConfigFileName = "${exportConfigFileName}");

			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "${exportFileDirectory}",
				osgiConfigFileName = "${exportConfigFileName}");
		}

		task ("And go to Accounts in the site settings") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "http://www.able.com:8080/group/site-name/~/control_panel/manage/-/site/settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Accounts",
				configurationName = "Accounts",
				configurationScope = "Site Scope");
		}

		task ("Then new site config is changed and groupKey is changed to groupId in config file") {
			Refresh.pauseRefresh();

			AssertElementPresent(
				key_fieldName = "Allowed Account Types",
				key_fieldValue = "Business",
				locator1 = "FormFields#PREDEFINED_VALUE_AT_FORM_SELECT");

			AssertElementNotPresent(
				key_fieldName = "Allowed Account Types",
				key_fieldValue = "Person",
				locator1 = "FormFields#PREDEFINED_VALUE_AT_FORM_SELECT");

			OSGiConfig.assertTextNotInOSGiConfig(
				osgiConfigFileName = "${exportConfigFileName}",
				text = "groupKey");

			OSGiConfig.assertTextInOSGiConfig(
				osgiConfigFileName = "${exportConfigFileName}",
				text = "groupId");
		}
	}

	@description = "This is a use case for LPS-79394. This test check that system settings scope is corrected."
	@priority = "5"
	test CheckSystemSettingsScopeIsCorrected {
		property test.name.skip.portal.instance = "SystemSettings#CheckSystemSettingsScopeIsCorrected";

		task ("Naviagte to System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");
		}

		task ("Enable OpenSSO Configuration") {
			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Naviagte to Instance Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");
		}

		task ("Disable OpenSSO Configuration") {
			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Check System Settings scope is corrected") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "System Scope");

			FormFields.viewCheckboxChecked(fieldName = "Enabled");
		}
	}

}