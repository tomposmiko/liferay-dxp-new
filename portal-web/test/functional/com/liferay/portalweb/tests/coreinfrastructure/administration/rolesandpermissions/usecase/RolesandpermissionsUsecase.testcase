@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Roles";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.firstLoginPG();

			Role.tearDownCP();

			DDLList.tearDownCP();

			DDLDataDefinition.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			UserGroup.tearDownCP();

			Organization.tearDownCP();

			Team.tearDownCP();

			Site.tearDownCP();

			Bookmark.tearDownCP();

			DMDocument.tearDownCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-133818. Able to add Site Administration permissions for specific site."
	@priority = "4"
	test CanAddSitePermissionForSpecificSite {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRole.addRegularRole(
			roleKey = "Roles Regrole Name",
			roleTitle = "Roles Regrole Name");

		Role.openRolesAdmin();

		// The define permission via json macro is not able to change the permission scope

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_GENERAL_PERMISSIONS_ACCESS_IN_SITE_ADMINISTRATION_CHECKBOX",
			permissionDefinitionValue = "Access in Site and Asset Library Administration",
			roleTitle = "Roles Regrole Name",
			siteNameScope = "${siteName}");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Access in Site and Asset Library Administration",
			permissionNavigationValue = "Documents and Media",
			siteNameScope = "${siteName}");

		Role.viewPermissionCP(
			permissionDefinitionValue = "View",
			permissionNavigationValue = "Documents and Media > Documents",
			siteNameScope = "${siteName}");

		Role.viewPermissionCP(
			permissionDefinitionValue = "View Site and Asset Library Administration Menu",
			permissionNavigationValue = "Site Settings > Site",
			siteNameScope = "${siteName}");

		AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException");
	}

	@description = "This is a test for LPS-148855. The default site role shouldn't be inherited by Guest."
	@priority = "5"
	test DefaultSiteRoleIsNotInheritedByGuestUser {
		task ("Assign default site to a new regular Role") {
			JSONRole.addRegularRole(
				roleKey = "Document Viewer",
				roleTitle = "Document Viewer");

			JSONRole.assignRoleToGroup(
				groupName = "Guest",
				roleTitle = "Document Viewer");
		}

		task ("Add the DM portlet with a file to a public page on a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Public Widget Page");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "For Document Viewers Eyes Only",
				groupName = "Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_4.jpg");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Public Widget Page",
				widgetName = "Documents and Media");
		}

		task ("Define view permission for Guest and Document Viewer Roles on the DM portlet") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "Site Name");

			DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "For Document Viewers Eyes Only");

			PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
				addOrRemoveViewPermission = "Add",
				roleList = "Document Viewer");

			PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
				addOrRemoveViewPermission = "Remove",
				roleList = "Guest");
		}

		task ("Assert guest user cannot view the file") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Public Widget Page",
				siteName = "Site Name");

			DMDocument.cannotViewCP(dmDocumentTitle = "For Document Viewers Eyes Only");
		}
	}

	@priority = "4"
	test EditTeamPermissions {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "User");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_site_memberships_web_portlet_SiteMembershipsPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		for (var resourceActionIndex : list "ADD_COMMUNITY,ADD_LAYOUT,ADD_LAYOUT_BRANCH,ADD_LAYOUT_SET_BRANCH,ASSIGN_MEMBERS,ASSIGN_USER_ROLES,CONFIGURE_PORTLETS,DELETE,EXPORT_IMPORT_LAYOUTS,EXPORT_IMPORT_PORTLET_INFO,MANAGE_ANNOUNCEMENTS,MANAGE_ARCHIVED_SETUPS,MANAGE_LAYOUTS,MANAGE_STAGING,MANAGE_SUBGROUPS,MANAGE_TEAMS,PERMISSIONS,PREVIEW_IN_DEVICE,PUBLISH_PORTLET_INFO,PUBLISH_STAGING,UPDATE,VIEW,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION,VIEW_STAGING") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,DELETE,PERMISSIONS,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.Team",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		for (var resourceActionIndex : list "ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_journal_content_web_portlet_JournalContentPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Site Page Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "Site Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignSiteRoleCP(
			siteRoleName = "Roles Siterole Name",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Teams");

		Team.addCP(
			teamDescription = "Site Team Description",
			teamName = "Site Team Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Portlet.addPG(
			pageName = "Site Page Name",
			portletName = "Web Content Display");

		PermissionsInline.gotoConfigurationPG(portletName = "Web Content Display");

		var key_roleName = "Site Team Name";

		AssertTextEquals(
			locator1 = "Permissions#CONFIGURATION_PERMISSIONS_ROLE_NAME",
			value1 = "Team Site Team Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.openSiteURL(siteName = "Site Name");

		PermissionsInline.gotoConfigurationPG(portletName = "Web Content Display");

		var key_roleName = "Site Team Name";

		AssertTextEquals(
			locator1 = "Permissions#CONFIGURATION_PERMISSIONS_ROLE_NAME",
			value1 = "Team Site Team Name");

		Navigator.openURL();

		PermissionsInline.gotoSiteTeamsCP(
			portletName = "Teams",
			siteScopeName = "Site Name",
			teamName = "Site Team Name");

		for (var permissionDefinitionKey : list "ACTION_ASSIGN_MEMBERS,ACTION_DELETE,ACTION_PERMISSIONS,ACTION_UPDATE,ACTION_VIEW") {
			Team.definePermissionPG(
				permissionDefinitionKey = "${permissionDefinitionKey}",
				teamName = "Site Team Name");
		}

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Teams");

		Team.editCP(
			teamDescriptionEdit = "Site Team Description Edit",
			teamName = "Site Team Name",
			teamNameEdit = "Site Team Name Edit");

		Team.assignMembersCP(
			teamName = "Site Team Name Edit",
			userScreenName = "usersn");
	}

	@description = "This is a use case for LPS-124190."
	@priority = "3"
	test ExportRoleWithSiteAssignee {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONRole.addRegularRole(
			roleKey = "Web Content Comment Reviewer",
			roleTitle = "Web Content Comment Reviewer");

		for (var resourceActionIndex : list "UPDATE_DISCUSSION,DELETE_DISCUSSION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "Web Content Comment Reviewer");
		}

		JSONRole.assignRoleToGroup(
			groupName = "Site Name",
			roleTitle = "Web Content Comment Reviewer");

		Role.openRolesAdmin();

		LAR.exportPortlet(
			exportPermissions = "true",
			larFileName = "Roles_And_Assignees.lar");

		JSONRole.deleteRole(roleTitle = "Web Content Comment Reviewer");

		Role.openRolesAdmin();

		LAR.importPortlet(
			importPermissions = "true",
			larFileName = "Roles_And_Assignees.lar");

		Role.viewCP(roleTitle = "Web Content Comment Reviewer");

		Navigator.gotoNavItem(navItem = "Define Permissions");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Delete Discussion",
			permissionNavigationValue = "Web Content > Web Content Article");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Update Discussion",
			permissionNavigationValue = "Web Content > Web Content Article");

		Role.openRolesAdmin();

		Role.viewAssignee(
			assigneeName = "Site Name",
			assigneeType = "Sites",
			roleTitle = "Web Content Comment Reviewer");

		Role.openRolesAdmin();

		LAR.deleteCurrentAndPreviousProcess(
			deleteFromPortlet = "true",
			larFileName = "Roles_And_Assignees.lar");

		AssertElementNotPresent(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1");
	}

	@priority = "4"
	test GroupScopePermissionCheck {
		property osgi.app.includes = "bookmarks";
		property portal.release = "false";
		property test.name.skip.portal.instance = "RolesandpermissionsUsecase#GroupScopePermissionCheck";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Role.openRolesAdmin();

		Role.add(roleTitle = "Group Scope Role Name");

		Role.openRolesAdmin();

		// The define permission via json macro is not able to change the permission scope

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_BOOKMARKS_RESOURCE_PERMISSIONS_BOOKMARKS_ENTRY_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "Group Scope Role Name",
			siteNameScope = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages",
			site = "${siteName}");

		PagesAdmin.addPage(pageName = "Bookmarks Page");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		Portlet.addPG(portletName = "Bookmarks");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		Bookmark.addPG(
			bookmarkName = "Test Bookmark1 Name",
			bookmarkURL = "https://www.liferay.com",
			bookmarkViewableBy = "Owner");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addCP(
			siteName = "google.com Name",
			siteType = "Blank");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Bookmarks Page");

		Navigator.gotoSitePage(
			pageName = "Bookmarks Page",
			siteName = "google.com Name");

		Portlet.addPG(portletName = "Bookmarks");

		Navigator.gotoSitePage(
			pageName = "Bookmarks Page",
			siteName = "google.com Name");

		Bookmark.addPG(
			bookmarkName = "Test Bookmark2 Name",
			bookmarkURL = "https://www.google.com",
			bookmarkViewableBy = "Owner");

		Navigator.gotoSitePage(
			pageName = "Bookmarks Page",
			siteName = "google.com Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "google.com Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Group Scope Role Name",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		Bookmark.gotoPG(
			bookmarkName = "Test Bookmark1 Name",
			bookmarkURL = "https://www.liferay.com");

		Bookmark.viewEntry(
			bookmarkName = "Test Bookmark1 Name",
			bookmarkURL = "https://www.liferay.com");

		Navigator.gotoSitePage(
			pageName = "Bookmarks Page",
			siteName = "google.com Name");

		Bookmark.viewNoPG(
			bookmarkName = "Test Bookmark2 Name",
			bookmarkURL = "https://www.google.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "3"
	test NoGuestRolePermissionsFromPrivateLayout {
		property custom.properties = "permissions.check.guest.enabled=false";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPrivatePage(pageName = "Private Blogs Page");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PermissionsInline.gotoSitePageCP(
			pageName = "Private Blogs Page",
			privacy = "Private Pages");

		AssertElementNotPresent(
			key_roleTitle = "Guest",
			locator1 = "Permissions#CONTENT_PERMISSIONS_ROLE_NAME");

		Navigator.openPrivateSitePageURL(
			pageName = "Private Blogs Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		PermissionsInline.gotoConfigurationPG(portletName = "Blogs");

		AssertElementNotPresent(
			key_roleTitle = "Guest",
			locator1 = "Permissions#CONTENT_PERMISSIONS_ROLE_NAME");
	}

	@priority = "4"
	test SiteRoleBookmarksInlinePermissions {
		property osgi.app.includes = "bookmarks";
		property portal.release = "false";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Role.openRolesAdmin();

		RoleNavigator.gotoRoleType(roleType = "Site");

		Role.add(roleTitle = "Roles Siterole Name");

		Role.openRolesAdmin();

		// The define permission via json macro is not able to change the permission scope

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_BOOKMARKS_RESOURCE_PERMISSIONS_BOOKMARKS_ENTRY_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "Roles Siterole Name",
			roleType = "Site");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages",
			site = "${siteName}");

		PagesAdmin.addPage(pageName = "Bookmarks Page");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		Portlet.addPG(portletName = "Bookmarks");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		Bookmark.addPG(
			bookmarkName = "Test Bookmark Name",
			bookmarkURL = "https://www.liferay.com",
			bookmarkViewableBy = "Owner");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Bookmark.viewNoPG(
			bookmarkName = "Test Bookmark Name",
			bookmarkURL = "https://www.liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignSiteRoleCP(
			siteRoleName = "Roles Siterole Name",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		Bookmark.viewBookmark(
			bookmarkName = "Test Bookmark Name",
			bookmarkURL = "https://www.liferay.com");

		Navigator.gotoPage(pageName = "Bookmarks Page");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test TeamPermissionsSite {
		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		for (var userNumber : list "1,2") {
			JSONUser.addUser(
				userEmailAddress = "userea${userNumber}@liferay.com",
				userFirstName = "userfn${userNumber}",
				userLastName = "userln${userNumber}",
				userScreenName = "usersn${userNumber}");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editPasswordCP(
				userEmailAddress = "userea${userNumber}@liferay.com",
				userScreenName = "usersn${userNumber}");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editUserSiteCP(
				siteName = "Site Name",
				userScreenName = "usersn${userNumber}");
		}

		Navigator.openURL();

		PagesAdmin.openPagesAdmin(siteURLKey = "Site Name");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Teams");

		PortletEntry.viewEmptyMessage(entity = "Teams");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Teams");

		Team.addCP(
			teamDescription = "Site Team Description",
			teamName = "Site Team Name");

		Team.assignMembersCP(
			teamName = "Site Team Name",
			userScreenName = "usersn1");

		PagesAdmin.openPagesAdmin(siteURLKey = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "USA Ice Hockey Team Search",
			pageTemplateName = "Search");

		PermissionsInline.gotoPagePG(
			pageName = "USA Ice Hockey Team Search",
			site = "Site Name");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "guest");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX",
			roleTitle = "site-member");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "site-member");

		for (var permissionDefinitionKey : list "ACTION_ADD_DISCUSSION,ACTION_ADD_LAYOUT,ACTION_CONFIGURE_PORTLETS,ACTION_CUSTOMIZE,ACTION_DELETE,ACTION_DELETE_DISCUSSION,ACTION_PERMISSIONS,ACTION_UPDATE,ACTION_UPDATE_DISCUSSION,ACTION_VIEW") {
			Team.definePermissionPG(
				permissionDefinitionKey = "${permissionDefinitionKey}",
				teamName = "Site Team Name");
		}

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea1@liferay.com");

		Navigator.gotoSitePage(
			pageName = "USA Ice Hockey Team Search",
			siteName = "Site Name");

		for (var portletName : list "SearchBar,Suggestions,SiteFacet,TypeFacet,TagFacet,CategoryFacet,FolderFacet,UserFacet,ModifiedFacet,SearchResults,SearchOptions") {
			AssertVisible(
				key_decorator = "barebone",
				key_portletTitleName = "${portletName}",
				locator1 = "Portlet#SPECIFIC_PORTLET_BORDER_DECORATOR");
		}

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		AssertElementNotPresent(
			key_pageName = "USA Ice Hockey Team Search",
			locator1 = "Home#PAGE");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test ViewAssetViaOrgRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONRole.addOrganizationRole(roleTitle = "Roles Orgrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.blogs.model.BlogsEntry",
			roleTitle = "Roles Orgrole Name",
			roleType = "organization");

		JSONOrganization.addOrganization(
			organizationName = "Organization Name",
			organizationSite = "true");

		for (var userNum : list "1,2") {
			JSONUser.addUser(
				userEmailAddress = "userea${userNum}@liferay.com",
				userFirstName = "userfn${userNum}",
				userLastName = "userln${userNum}",
				userScreenName = "usersn${userNum}");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea${userNum}@liferay.com");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea${userNum}@liferay.com");
		}

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignOrgRoleCP(
			roleTitle = "Roles Orgrole Name",
			userScreenName = "usersn2");

		JSONLayout.addPublicLayout(
			groupName = "Organization Name",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Organization Name",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.openSiteURL(siteName = "Organization Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Search Page",
			pageTemplateName = "Search");

		Navigator.gotoSitePage(
			pageName = "Blogs Page",
			siteName = "Organization Name");

		Blogs.addEntry(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsNavigator.gotoBlogsEntryPermissionsCP(entryTitle = "Test Blog");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,Owner,Site Member,Organization User");

		Navigator.gotoSitePage(
			pageName = "Search Page",
			siteName = "Organization Name");

		SearchPortlets.searchWidget(searchTerm = "Test Blog");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blog Entry Content.",
			searchAssetTitle = "Test Blog",
			searchAssetType = "Blogs Entry");

		Search.gotoResultAssetViaTitle(searchAssetTitle = "Test Blog");

		BlogsEntry.viewPG(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		BlogsEntry.viewNoAddPermissions();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea1@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Blogs Page",
			siteName = "Organization Name");

		Blogs.viewNoEntryCP();

		Navigator.gotoSitePage(
			pageName = "Search Page",
			siteName = "Organization Name");

		SearchPortlets.searchWidget(searchTerm = "\"Test Blog\"");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "\"Test Blog\"");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Blogs Page",
			siteName = "Organization Name");

		BlogsEntry.viewPG(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		Navigator.gotoSitePage(
			pageName = "Search Page",
			siteName = "Organization Name");

		SearchPortlets.searchWidget(searchTerm = "Test Blog");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blog Entry Content.",
			searchAssetTitle = "Test Blog",
			searchAssetType = "Blogs Entry");

		Search.gotoResultAssetViaTitle(searchAssetTitle = "Test Blog");

		BlogsEntry.viewPG(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		BlogsEntry.viewNoAddPermissions();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test ViewAssetViaSiteRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONRole.addSiteRole(roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.blogs.model.BlogsEntry",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var userNum : list "1,2") {
			JSONUser.addUser(
				userEmailAddress = "userea${userNum}@liferay.com",
				userFirstName = "userfn${userNum}",
				userLastName = "userln${userNum}",
				userScreenName = "usersn${userNum}");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea${userNum}@liferay.com");

			JSONGroup.assignUserToGroup(
				groupName = "Guest",
				userEmailAddress = "userea${userNum}@liferay.com");
		}

		JSONGroup.assignGroupRoleToUser(
			groupName = "Guest",
			roleTitle = "Roles Siterole Name",
			userEmailAddress = "userea2@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsNavigator.gotoBlogsEntryPermissionsCP(entryTitle = "Test Blog");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,Owner,Site Member");

		Navigator.gotoPage(pageName = "Blogs Page");

		SearchPortlets.searchEmbedded(searchTerm = "Test Blog");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Blog",
			searchAssetType = "Blogs Entry");

		Search.gotoResultAssetViaTitle(searchAssetTitle = "Test Blog");

		BlogsEntry.viewPG(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		BlogsEntry.viewNoAddPermissions();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea1@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.viewNoEntryCP();

		SearchPortlets.searchEmbedded(searchTerm = "Test Blog");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Test Blog",
			searchAssetType = "Blogs Entry");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea2@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewPG(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		SearchPortlets.searchEmbedded(searchTerm = "Test Blog");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Blog",
			searchAssetType = "Blogs Entry");

		Search.gotoResultAssetViaTitle(searchAssetTitle = "Test Blog");

		BlogsEntry.viewPG(
			entryContent = "Blog Entry Content.",
			entryTitle = "Test Blog");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		BlogsEntry.viewNoAddPermissions();
	}

	@priority = "4"
	test ViewAutomaticAssignedRoles {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.add(roleTitle = "Roles Regrole Name");

		Role.openRolesAdmin();

		// This macro can not be replaced by the one define permission via json, since no additional role automatically added when using json api

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_USERS_USERS_AND_ORGANIZATIONS_GENERAL_PERMISSIONS_ACCESS_IN_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "Access in Control Panel",
			permissionNavigationKey = "CONTROL_PANEL_USERS_USERS_AND_ORGANIZATIONS",
			permissionNavigationValue = "Users and Organizations",
			roleTitle = "Roles Regrole Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "View Control Panel Menu",
			permissionNavigationValue = "Portal");

		Role.openRolesAdmin();

		Role.definePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_GENERAL_PERMISSIONS_ACCESS_IN_SITE_ADMINISTRATION_CHECKBOX",
			permissionDefinitionValue = "Access in Site and Asset Library Administration",
			permissionNavigationKey = "SITE_ADMIN_PAGES_SITE_PAGES",
			permissionNavigationValue = "Pages",
			roleTitle = "Roles Regrole Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "View Site and Asset Library Administration Menu",
			permissionNavigationValue = "Settings > Site");
	}

	@priority = "4"
	test ViewDocumentsAndMediaAddRepositoryPermissionSiteMemberRole {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_REPOSITORY",
			resourceName = "com.liferay.document.library",
			roleTitle = "Site Member");

		Role.openRolesAdmin();

		AssertTextNotPresent(value1 = "action.ADD_REPOSITORY");

		Role.openRolesAdmin();

		Role.removePermissionCP(
			permissionDefinitionKey = "SITE_ADMIN_APPLICATIONS_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENTS_ADD_REPOSITORY_CHECKBOX",
			permissionDefinitionValue = "Add Repository",
			roleTitle = "Site Member",
			roleType = "Site");

		var key_permissionDefinitionValue = "Add Repository";
		var key_permissionNavigationValue = "SITE_ADMIN_APPLICATIONS_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENTS_ADD_REPOSITORY_CHECKBOX";

		AssertElementNotPresent(locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");

		AssertElementNotPresent(locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_REMOVE");
	}

	@priority = "4"
	test ViewPrivatePageSiteMemberRole {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		UserGroup.assignMemberCP(
			userGroupName = "UG UserGroup Name",
			userScreenName = "usersn");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Memberships",
			site = "${siteName}");

		Site.assignUserGroupAsMemberCP(userGroupName = "UG UserGroup Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPrivatePage(pageName = "Private Page");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openPrivateURL(pageName = "Private Page");

		Page.viewSpecificPG(pageNameList = "Private Page");
	}

	@priority = "4"
	test ViewRegRolePermissionsDefaultView {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		JSONRole.addRegularRole(
			roleKey = "Roles Regrole Name",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_ARTICLE",
			resourceName = "com.liferay.journal",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.dynamic.data.mapping.model.DDMStructure-com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Regrole Name");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPublicPage(pageName = "Site Page Name");

		PagesAdmin.addPrivatePage(pageName = "Site Page Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "Site Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignRegularRoleCP(
			roleTitle = "Roles Regrole Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertVisible(locator1 = "Button#PLUS");

		LexiconEntry.gotoAdd();

		WebContent.viewWCViewableByPermissions();
	}

	@description = "This is a use case for LPS-115692."
	@priority = "4"
	test ViewTeamUserOnStagingSite {
		task ("Add new Site Role") {
			JSONRole.addSiteRole(
				roleKey = "Roles Siterole Name",
				roleTitle = "Roles Siterole Name");
		}

		task ("Define permission to new Site Role") {
			for (var resourceActionIndex : list "VIEW_SITE_ADMINISTRATION,VIEW_STAGING") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Group",
					roleTitle = "Roles Siterole Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.journal",
				roleTitle = "Roles Siterole Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Add new User") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		task ("Assgin Default Site to new user") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editUserSiteCP(
				siteName = "${siteName}",
				userScreenName = "usersn");
		}

		task ("Assgin New Site Role to new user") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.assignSiteRoleCP(
				siteRoleName = "Roles Siterole Name",
				userScreenName = "usersn");
		}

		task ("Add New team and assign new user to team") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Teams");

			PortletEntry.viewEmptyMessage(entity = "Teams");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Teams");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "usersn");
		}

		task ("Add a new web content folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Guest");
		}

		task ("Add a permission for new site role") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Click.waitForMenuToggleJSClick(
				key_webContentTitle = "WC Folder Name",
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

			MenuItem.click(menuItem = "Permissions");

			Role.definePermissionPG(
				permissionDefinitionKey = "INLINE_PERMISSIONS_ADD_WEB_CONTENT_CHECKBOX",
				roleTitle = "Roles Siterole Name");

			Refresh();
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		task ("Activate Staging of Default site") {
			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Staging",
				site = "Guest");

			Staging.activateStagingCP(siteName = "${siteName}");
		}

		task ("Assert team user on staging site") {
			ProductMenu.gotoStagingSite(site = "${siteName}");

			ProductMenu.gotoPortlet(
				category = "People",
				portlet = "Teams");

			Team.viewMemberCP(
				membershipType = "User",
				teamName = "Site Team Name",
				userFirstName = "userfn",
				userLastName = "userln");
		}
	}

}