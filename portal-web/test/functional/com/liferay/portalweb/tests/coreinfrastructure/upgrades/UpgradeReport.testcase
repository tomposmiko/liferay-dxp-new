@component-name = "portal-upgrades"
definition {

	property app.server.types = "tomcat";
	property ci.retries.disabled = "true";
	property data.archive.type = "data-archive-portal";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property portal.version = "7.4.13";
	property skip.start.app.server = "true";
	property testcase.url = "http://www.example.com";
	property testray.main.component.name = "Database Upgrade Tool";
	property upgrade.reports.enabled = "true";

	@description = "LPS-158741: Upgrade Report provides the initial, final, and expected portal build number"
	@priority = 3
	test BuildNumberLogged {
		property test.name.skip.portal.instance = "UpgradeReport#BuildNumberLogged";

		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the intial portal build number") {
			if (!(contains(${upgradeReportContent}, "Portal initial build number: 7413"))) {
				echo(${upgradeReportContent});

				fail("Inital portal build number is not present in upgrade report.");
			}
		}

		task ("Read the final portal build number") {
			var finalBuildVersion = ValidateSmokeUpgrade.getBuildNumber();

			if (!(contains(${upgradeReportContent}, "Portal final build number: ${finalBuildVersion}"))) {
				echo(${upgradeReportContent});

				fail("Final portal build number is not present in upgrade report.");
			}
		}

		task ("Read the expected portal build number") {
			var expectedBuildVersion = ValidateSmokeUpgrade.getBuildNumber();

			if (!(contains(${upgradeReportContent}, "Portal expected build number: ${expectedBuildVersion}"))) {
				echo(${upgradeReportContent});

				fail("Expected portal build number is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report provides the type and version of the database"
	@priority = 3
	test DatabaseLogged {
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver";
		property test.name.skip.portal.instance = "UpgradeReport#DatabaseLogged";

		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the type and version is correct in the report") {
			var databaseType = PropsUtil.get("database.type");

			var databaseVersion = PropsUtil.get("database.${databaseType}.version");

			if (!(contains(${upgradeReportContent}, "Database version: ${databaseType} ${databaseVersion}"))) {
				echo(${upgradeReportContent});

				fail("Database type and version is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report Document Library Store and storage size."
	@priority = 4
	test DocumentLibraryLogged {
		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read which Document Library Store is being used") {
			if (!(contains(${upgradeReportContent}, "Property dl.store.impl: com.liferay.portal.store.file.system.FileSystemStore"))) {
				echo(${upgradeReportContent});

				fail("Document library store is not present in upgrade report.");
			}
		}

		task ("Read the size of document library storage") {
			if (!(contains(${upgradeReportContent}, "Document library storage size: 750 KB"))) {
				echo(${upgradeReportContent});

				fail("Size of document library storage is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report shows errors"
	@priority = 4
	test ErrorsLogged {
		property custom.mysql.sql.statement = "ALTER TABLE Release_ DROP servletContextName;";
		property test.name.skip.portal.instance = "UpgradeReport#ErrorsLogged";

		task ("Given upgrade.report is enabled When the portal gets upgraded and an error was captured during the upgrade") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Then the user can read the class and error event message in the upgrade report") {
			if (!(contains(${upgradeReportContent}, "Errors"))) {
				echo(${upgradeReportContent});

				fail("Upgrade report does not contain expected errors.");
			}

			if (!(contains(${upgradeReportContent}, "Class name: com.liferay.portal.tools.DBUpgrader"))) {
				echo(${upgradeReportContent});

				fail("Upgrade report does not contain the error class name.");
			}

			if (!(contains(${upgradeReportContent}, "1 occurrences of the following event: Unknown column 'servletContextName' in 'where clause'"))) {
				echo(${upgradeReportContent});

				fail("Upgrade report does not contain the error message.");
			}
		}

		task ("And the user can check the upgrade result as failure and the expected status") {
			if (!(contains(${upgradeReportContent}, "Result: failure"))) {
				echo(${upgradeReportContent});

				fail("Failed upgrade result not present in upgrade report");
			}

			if (!(contains(${upgradeReportContent}, "Status: Upgrade failed to complete"))) {
				echo(${upgradeReportContent});

				fail("Expected status not present in the upgrade report");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report logs the longest running upgrade processes."
	@priority = 4
	test LongestProcessesLogged {
		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the processes list message") {
			if (!(contains(${upgradeReportContent}, "Longest upgrade processes"))) {
				echo(${upgradeReportContent});

				fail("List with the 20 longest upgrade processes not found.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report is created when property is set to true"
	@priority = 4
	test ReportGeneratedWhenEnabled {
		property test.name.skip.portal.instance = "UpgradeReport#ReportGeneratedWhenEnabled";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Check if file exists") {
			if (${reportFileExists} != "true") {
				fail("Upgrade report not found in ${liferayHome}/tools/portal-tools-db-upgrade-client/reports/");
			}
		}
	}

	@description = "LPS-158740: Upgrade Report is created and populated when using auto-upgrade"
	@priority = 4
	test ReportGeneratedWithAutoUpgrade {
		property custom.properties = "upgrade.database.auto.run=true${line.separator}upgrade.report.enabled=true";
		property skip.start.app.server = "false";
		property skip.upgrade-legacy-database = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ReportGeneratedWithAutoUpgrade";
		property upgrade.reports.enabled = "false";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/reports/upgrade_report.info");
			var reportFileContent = UpgradeReport.getAutoUpgradeReportFileContent();
		}

		task ("Check if file exists") {
			if (${reportFileExists} != "true") {
				fail("Upgrade report not found in ${liferayHome}/reports");
			}
		}

		task ("Check the total runtime is present") {
			if (!(contains(${reportFileContent}, "Execution time: "))) {
				echo(${reportFileContent});

				fail("Total runtime is not present in upgrade report.");
			}
		}

		task ("Check the intial portal build number") {
			if (!(contains(${reportFileContent}, "Portal initial build number:"))) {
				echo(${reportFileContent});

				fail("Inital portal build number is not present in upgrade report.");
			}
		}

		task ("Check the final portal build number") {
			if (!(contains(${reportFileContent}, "Portal final build number:"))) {
				echo(${reportFileContent});

				fail("Final portal build number is not present in upgrade report.");
			}
		}

		task ("Check the expected portal build number") {
			if (!(contains(${reportFileContent}, "Portal expected build number:"))) {
				echo(${reportFileContent});

				fail("Expected portal build number is not present in upgrade report.");
			}
		}

		task ("Check the intial schema version") {
			if (!(contains(${reportFileContent}, "Portal initial schema version:"))) {
				echo(${reportFileContent});

				fail("Inital schema version is not present in upgrade report.");
			}
		}

		task ("check the final schema version") {
			if (!(contains(${reportFileContent}, "Portal final schema version:"))) {
				echo(${reportFileContent});

				fail("Final schema version is not present in upgrade report.");
			}
		}

		task ("Check the expected schema version") {
			if (!(contains(${reportFileContent}, "Portal expected schema version:"))) {
				echo(${reportFileContent});

				fail("Expected schema version is not present in upgrade report.");
			}
		}

		task ("Read the type and version is correct in the report") {
			var databaseType = PropsUtil.get("database.type");

			var databaseVersion = PropsUtil.get("database.${databaseType}.version");

			if (!(contains(${reportFileContent}, "Database version: ${databaseType} ${databaseVersion}"))) {
				echo(${reportFileContent});

				fail("Database type and version is not present in upgrade report.");
			}
		}

		task ("Check the Document Library Store is present") {
			if (!(contains(${reportFileContent}, "Property dl.store.impl: com.liferay.portal.store.file.system.FileSystemStore"))) {
				echo(${reportFileContent});

				fail("Document library store is not present in upgrade report.");
			}
		}

		task ("Check the size of document library storage is present") {
			if (!(contains(${reportFileContent}, "Document library storage size:"))) {
				echo(${reportFileContent});

				fail("Size of document library storage is not present in upgrade report.");
			}
		}

		task ("Check the row counts references") {
			if (!(contains(${reportFileContent}, "Initial Rows"))) {
				echo(${reportFileContent});

				fail("Initial rows numbers column not present in upgrade report.");
			}

			if (!(contains(${reportFileContent}, "Final Rows"))) {
				echo(${reportFileContent});

				fail("Final rows numbers column not present in upgrade report.");
			}
		}

		task ("Check the longest processes list is present") {
			if (!(contains(${reportFileContent}, "Longest upgrade processes"))) {
				echo(${reportFileContent});

				fail("List with the 20 longest upgrade processes not found.");
			}
		}

		task ("Check no errors are thrown") {
			if (!(contains(${reportFileContent}, "Errors: Nothing registered"))) {
				fail("Upgrade report contains unexpected errors.");
			}
		}

		task ("Check no warnings are thrown") {
			if (!(contains(${reportFileContent}, "Warnings: Nothing registered"))) {
				fail("Upgrade report contains unexpected warnings.");
			}
		}

		task ("Shutdown server and execute upgrade again") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Look for the new upgrade report") {
			var upgradeReportNew = UpgradeReport.getAutoUpgradeReportFileContent();
		}

		task ("Read the new report. No upgrade processes and type defined as 'no upgrade' are expected ") {
			if (!(contains(${upgradeReportNew}, "Type: no upgrade"))) {
				echo(${upgradeReportNew});

				fail("Expected upgrade type not present in upgrade report");
			}

			if (!(contains(${upgradeReportNew}, "Longest upgrade processes: Nothing registered"))) {
				echo(${upgradeReportNew});

				fail("New upgrade report contains unexpected upgrades.");
			}
		}

		task ("Verify upgrade report is not generated in console output in log context format") {
			var logContent = Log.getLogFileContent();

			if (contains(${logContent}, "upgrade.component=")) {
				fail("Upgrade report is present in portal log.");
			}
		}
	}

	@description = "LPS-158743: Upgrade report is generated in the console using log context format"
	@priority = 4
	test ReportGeneratedWithLogContext {
		property custom.properties = "upgrade.database.auto.run=true${line.separator}upgrade.report.enabled=true${line.separator}upgrade.log.context.enabled=true";
		property log.context.enabled = "true";
		property skip.start.app.server = "false";
		property skip.upgrade-legacy-database = "true";
		property upgrade.reports.enabled = "false";

		task ("Check report is generated console") {
			var logContent = Log.getLogFileContent();

			if (!(contains(${logContent}, "upgrade.report.execution.time="))) {
				fail("upgrade.report.execution.time is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.database.version=mysql"))) {
				fail("upgrade.report.database.version is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.portal.expected.build.number=7413"))) {
				fail("upgrade.report.portal.expected.build.number is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.portal.expected.schema.version="))) {
				fail("upgrade.report.portal.expected.schema.version is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.portal.final.build.number=7413"))) {
				fail("upgrade.report.portal.final.build.number is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.portal.final.schema.version="))) {
				fail("upgrade.report.portal.final.schema.version is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.portal.initial.build.number=7413"))) {
				fail("upgrade.report.portal.initial.build.number is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.portal.initial.schema.version="))) {
				fail("upgrade.report.portal.initial.schema.version is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.document.library.storage.size="))) {
				fail("upgrade.report.document.library.storage.size is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.property.dl.store.impl=com.liferay.portal.store.file.system.FileSystemStore"))) {
				fail("upgrade.report.property.dl.store.impl is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.longest.upgrade.processes=["))) {
				fail("upgrade.report.longest.upgrade.processes is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.tables.initial.final.rows=["))) {
				fail("upgrade.report.tables.initial.final.rows is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.errors=[]"))) {
				fail("upgrade.report.errors is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.warnings=[]"))) {
				fail("upgrade.report.warnings is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.status="))) {
				fail("upgrade.report.status is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.type="))) {
				fail("upgrade.report.type is not present in portal log.");
			}

			if (!(contains(${logContent}, "upgrade.report.result="))) {
				fail("upgrade.report.result is not present in portal log.");
			}
		}

		task ("Check report file is generated") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/reports/upgrade_report.info");

			if (${reportFileExists} != "true") {
				fail("Upgrade report not found in ${liferayHome}/reports");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report is not created when property is not set to true"
	@priority = 4
	test ReportNotGenerated {
		property test.name.skip.portal.instance = "UpgradeReport#ReportNotGenerated";
		property upgrade.reports.enabled = "false";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Check file doesn't exist") {
			if (${reportFileExists} == "true") {
				fail("Upgrade report found in ${liferayHome}/tools/portal-tools-db-upgrade-client/reports/");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report should not be deleted on additional upgrade runs."
	@priority = 4
	test ReportPersistThroughAdditionalUpgradeRuns {
		property test.name.skip.portal.instance = "UpgradeReport#ReportPersistThroughAdditionalUpgradeRuns";

		task ("Look for the upgrade report") {
			var upgradeReportOriginal = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the report. All upgrade processes and type defined as 'major' are expected") {
			if (!(contains(${upgradeReportOriginal}, "Type: major"))) {
				echo(${upgradeReportOriginal});

				fail("Expected upgrade type not present in upgrade report");
			}

			if (contains(${upgradeReportOriginal}, "Longest upgrade processes: Nothing registered")) {
				echo(${upgradeReportOriginal});

				fail("Upgrade report does not contains expected upgrades.");
			}
		}

		task ("Shutdown server and execute upgrade again") {
			Portlet.shutdownServer();

			AntCommand(
				locator1 = "build-test.xml",
				value1 = "upgrade-legacy-database");
		}

		task ("Look for the upgrade report") {
			var upgradeReportNew = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the new report. No upgrade processes and type defined as 'no upgrade' are expected ") {
			if (!(contains(${upgradeReportNew}, "Type: no upgrade"))) {
				echo(${upgradeReportNew});

				fail("Expected upgrade type not present in upgrade report");
			}

			if (!(contains(${upgradeReportNew}, "Longest upgrade processes: Nothing registered"))) {
				echo(${upgradeReportNew});

				fail("New upgrade report contains unexpected upgrades.");
			}
		}

		task ("Look for the original upgrade report that has been renamed") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");
			var upgradeReportFilePattern = StringUtil.split("**/upgrade_report.info.[0-9]*");

			var upgradeReportRenamedFilePath = FileUtil.getIncludedResourceURLs(${upgradeReportFilePattern}, "${liferayHome}/tools/portal-tools-db-upgrade-client/reports");

			var upgradeReportRenamedFilePath = StringUtil.valueOf(${upgradeReportRenamedFilePath});

			var upgradeReportRenamedFilePath = RegexUtil.replace(${upgradeReportRenamedFilePath}, "\[(.*)\]", 1);

			var upgradeReportRenamedFilePath = StringUtil.replace(${upgradeReportRenamedFilePath}, "file:", "");

			var upgradeReportRenamed = FileUtil.read(${upgradeReportRenamedFilePath});
		}

		task ("Compare original and renamed upgrade reports") {
			if (${upgradeReportRenamed} != ${upgradeReportOriginal}) {
				echo("Original upgrade report content: ${upgradeReportOriginal}");

				echo("Renamed upgrade report content: ${upgradeReportRenamed}");

				fail("Renamed upgrade report does not match original upgrade report.");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report logs the row counts for each table."
	@priority = 3
	test RowCountsLogged {
		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the row counts references") {
			if (!(contains(${upgradeReportContent}, "Initial Rows"))) {
				echo(${upgradeReportContent});

				fail("Initial rows numbers column not present in upgrade report.");
			}

			if (!(contains(${upgradeReportContent}, "Final Rows"))) {
				echo(${upgradeReportContent});

				fail("Final rows numbers column not present in upgrade report.");
			}
		}
	}

	@description = "LPS-158741: The Upgrade Report should list the initial, expected, and final schema versions."
	@priority = 4
	test SchemaVersionsLogged {
		property test.name.skip.portal.instance = "UpgradeReport#SchemaVersionsLogged";

		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Read the intial schema version") {
			if (!(contains(${upgradeReportContent}, "Portal initial schema version: 13.1.1"))) {
				echo(${upgradeReportContent});

				fail("Inital schema version is not present in upgrade report.");
			}
		}

		task ("Read the final schema version") {
			var finalSchemaVersion = ValidateSmokeUpgrade.getSchemaVersion(mysqlStatement = "SELECT schemaVersion FROM Release_ WHERE servletContextName='portal';");

			if (!(contains(${upgradeReportContent}, "Portal final schema version: ${finalSchemaVersion}"))) {
				echo(${upgradeReportContent});

				fail("Final schema version is not present in upgrade report.");
			}
		}

		task ("Read the expected schema version") {
			var expectedSchemaVersion = ValidateSmokeUpgrade.getSchemaVersion(mysqlStatement = "SELECT schemaVersion FROM Release_ WHERE servletContextName='portal';");

			if (!(contains(${upgradeReportContent}, "Portal expected schema version: ${expectedSchemaVersion}"))) {
				echo(${upgradeReportContent});

				fail("Expected schema version is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report logs total upgrade runtime."
	@priority = 4
	test TotalRuntimeLogged {
		property test.name.skip.portal.instance = "UpgradeReport#TotalRuntimeLogged";

		task ("Look for the upgrade logs") {
			var upgradeLogContent = Log.getUpgradeLogFileContent();
		}

		task ("Look for the upgrade report") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Capture the upgrade runtime in upgrade logs") {
			var upgradeRunTimeLog = RegexUtil.replace(${upgradeLogContent}, "Completed Liferay upgrade process i\"?n \"?(.*[0-9])", 1);

			echo("Upgrade runtime reported by upgrade.log is ${upgradeRunTimeLog}");
		}

		task ("Capture the upgrade runtime in upgrade Report") {
			var upgradeRunTimeReport = UpgradeReport.getUpgradeExecutionTime(reportFileContent = ${upgradeReportContent});

			echo("Upgrade runtime reported by upgrade_report.info is ${upgradeRunTimeReport}");
		}

		task ("Read the total runtime to see if it's present") {
			if (!(contains(${upgradeReportContent}, "Execution time: ${upgradeRunTimeReport}"))) {
				echo(${upgradeReportContent});

				fail("Total runtime is not present in upgrade report.");
			}
		}

		task ("Read the total runtime comparing with the one got in the logs") {
			if (!(contains(${upgradeReportContent}, "Execution time: ${upgradeRunTimeLog}"))) {
				echo(${upgradeReportContent});

				fail("Total runtime in upgrade report does not match the runtime in upgrade.log file.");
			}
		}
	}

	@description = "LPS-171387: Upgrade Report shows upgrade result"
	@priority = 4
	test UpgradeResultLogged {
		property test.name.skip.portal.instance = "UpgradeReport#UpgradeResultLogged";

		task ("Given upgrade.report is set When the portal gets successfully upgraded") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Then the user can check the upgrade result as success") {
			if (!(contains(${upgradeReportContent}, "Result: success"))) {
				echo(${upgradeReportContent});

				fail("Successful upgrade result not present in upgrade report");
			}
		}
	}

	@description = "LPS-171387: Upgrade Report shows upgrade status"
	@priority = 4
	test UpgradeStatusLogged {
		property test.name.skip.portal.instance = "UpgradeReport#UpgradeStatusLogged";

		task ("Given upgrade.report When the portal gets successfully upgraded") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Then the user can verify in the upgrade report the upgrade status message") {
			if (!(contains(${upgradeReportContent}, "Status: There are no pending upgrades"))) {
				echo(${upgradeReportContent});

				fail("Expected status not present in the upgrade report");
			}
		}

		task ("And then the user can verify in the upgrade logs that the upgrade type is defined as 'major'") {
			var upgradeLogContent = Log.getUpgradeLogFileContent();

			if (!(contains(${upgradeLogContent}, "Major upgrade finished with result success"))) {
				fail("Expected upgrade type not present in the upgrades logs");
			}
		}
	}

	@description = "LPS-171387: Upgrade Report shows upgrade type"
	@priority = 4
	test UpgradeTypeLogged {
		property test.name.skip.portal.instance = "UpgradeReport#UpgradeTypeLogged";

		task ("Given upgrade.report is set and given a user views the upgrade log file When the portal gets successfully upgraded") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
			var upgradeLogContent = Log.getUpgradeLogFileContent();
		}

		task ("Then the user can verify in the upgrade report that the upgrade type is defined as 'major'") {
			if (!(contains(${upgradeReportContent}, "Type: major"))) {
				echo(${upgradeReportContent});

				fail("Expected upgrade type not present in upgrade report");
			}
		}
	}

	@description = "LPS-158743: Upgrade report trace line is generated in the console"
	@priority = 3
	test UserNotifiedWhereToFindUpgradeReportAfterAutoUpgrade {
		property custom.properties = "upgrade.database.auto.run=true${line.separator}upgrade.report.enabled=true${line.separator}upgrade.log.context.enabled=true";
		property log.context.enabled = "true";
		property skip.start.app.server = "false";
		property skip.upgrade-legacy-database = "true";
		property upgrade.reports.enabled = "false";

		task ("When the upgrade report is finished generating, Then the user is notified in the Portal log file where to find the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			AssertConsoleTextPresent(value1 = "Upgrade report generated in ${liferayHome}/reports/upgrade_report.info");
		}
	}

	@description = "LPS-181594: The message with the upgrade report file path is printed in the logs"
	@priority = 4
	test UserNotifiedWhereToFindUpgradeReportInUpgradeTool {
		task ("Given a user views the upgrade log file") {
			var upgradeLogContent = Log.getUpgradeLogFileContent();
		}

		task ("When the upgrade finishes, Then the user is notified in the upgrade log file that the upgrade report is being generated") {
			if (!(contains(${upgradeLogContent}, "Starting upgrade report generation"))) {
				fail("Starting upgrade report generation message not present in the logs");
			}
		}

		task ("When the upgrade report is finished generating, Then the user is notified in the upgrade log file where to find the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			if (!(contains(${upgradeLogContent}, "Upgrade report generated in ${liferayHome}/tools/portal-tools-db-upgrade-client/./reports/upgrade_report.info"))) {
				fail("Upgrade report file path message not present");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report shows warnings"
	@priority = 3
	test WarningsLogged {
		property skip.get.testcase.database.properties = "true";
		property skip.upgrade-legacy-database = "true";
		property test.assert.warning.exceptions = "false";
		property test.name.skip.portal.instance = "UpgradeReport#WarningsLogged";

		task ("Delete indexes.sql file from portal-impl.jar") {
			AntCommand(
				locator1 = "modules/util/portal-tools-db-upgrade-client/src/testFunctional/ant/build-test-db-upgrade-client.xml",
				value1 = "delete-indexes-sql");
		}

		task ("Execute upgrade") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "upgrade-legacy-database");
		}

		task ("Wait for upgrade to complete") {
			AntCommand(
				locator1 = "modules/util/portal-tools-db-upgrade-client/src/testFunctional/ant/build-test-db-upgrade-client.xml",
				value1 = "check-passed-upgrade-log");
		}

		task ("Given upgrade.report is set When the portal gets upgraded and an warn was captured during the upgrade") {
			var upgradeReportContent = UpgradeReport.getUpgradeReportFileContent();
		}

		task ("Then the user can read the class and warn event message in the upgrade report") {
			if (!(contains(${upgradeReportContent}, "Warnings"))) {
				echo(${upgradeReportContent});

				fail("Upgrade report does not contain expected warnings.");
			}

			if (!(contains(${upgradeReportContent}, "Class name:"))) {
				echo(${upgradeReportContent});

				fail("Upgrade report does not contain the warning class name.");
			}

			if (!(contains(${upgradeReportContent}, "1 occurrences of the following event: null"))) {
				echo(${upgradeReportContent});

				fail("Upgrade report does not contain the warning message.");
			}
		}

		task ("and the user can check the upgrade result as Warning") {
			if (!(contains(${upgradeReportContent}, "Result: warning"))) {
				echo(${upgradeReportContent});

				fail("Warning upgrade result not present in upgrade report");
			}
		}
	}

}