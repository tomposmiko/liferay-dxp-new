@component-name = "core-infrastructure"
definition {

	property ci.retries.disabled = "true";
	property license.required = "true";
	property portal.release = "false";
	property portal.upstream = "false";
	property test.run.environment = "EE";
	property testray.main.component.name = "License";

	setUp {
		TestCase.setUpPortalInstance();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test DeleteLiferayDXPLicense {
		property commerce.enabled = "false";
		property test.name.skip.portal.instance = "DXPLicense#DeleteLiferayDXPLicense";

		SignIn.signInTestSetup();

		ApplicationsMenuHelper.openApplicationsMenu();

		AssertElementPresent(
			key_panel = "Applications",
			locator1 = "ApplicationsMenu#PANEL");

		Portlet.shutdownServer();

		License.deleteLicenseFile(licenseFileName = "license.xml");

		Portlet.startServer(noLicense = "true");

		Navigator.openURL();

		Alert.viewErrorMessage(errorMessage = "This instance is not registered.");
	}

	@priority = 4
	test LiferayDXPLicenseExpire {
		property dxp.license.file = "portal-dxp-license-custom-expiration-48-hours.xml";

		SignIn.signInTestSetup(licenseExpired = "true");

		// Pausing 300 seconds due to LRQA-64640

		Pause(locator1 = 300000);

		Navigator.openURL();

		Alert.viewErrorMessage(errorMessage = "This instance is not registered.");
	}

	@description = "This is a use case for LPS-150970. Verify Terms Of Use not reappear after dismissed once with non root context."
	@priority = 5
	test TermsOfUseNotShownAfterDimissedWithNonRootContext {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property portal.acceptance = "true";
		property portal.context = "liferay";
		property skip.clean-app-server-deploy-dir = "true";
		property test.name.skip.portal.instance = "DXPLicense#TermsOfUseNotShownAfterDimissedWithNonRootContext";

		User.firstLoginPG();

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Terms of Use");

		Click(locator1 = "Button#DONE");

		AssertElementNotPresent(locator1 = "Modal#MODAL");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = 4
	test TermsOfUseNotShownToNonAdminUser {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "DXPLicense#TermsOfUseNotShownToNonAdminUser";

		User.firstLoginPG();

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Button#DONE");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignSiteRoleToUser(
			groupName = "Guest",
			roleTitle = "Site Administrator",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = 4
	test TermsOfUseShownToNewAdmin {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "DXPLicense#TermsOfUseShownToNewAdmin";

		User.firstLoginPG();

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Button#DONE");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Terms of Use");

		Click(locator1 = "Button#DONE");

		AssertElementNotPresent(locator1 = "Modal#MODAL");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

}