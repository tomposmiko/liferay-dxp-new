@component-name = "portal-security"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Security";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalSettings.tearDownAuthenticationCP();

			Page.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-69372."
	@priority = "5"
	test EscapeUrlRedirectWithGroovyScript {
		property test.name.skip.portal.instance = "SecurityUsecase#EscapeUrlRedirectWithGroovyScript";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration"
		);

		ServerAdministration.executeScript(
			language = "Groovy",
			script = '''
import com.liferay.portal.kernel.util.PortalUtil;

out.println(PortalUtil.escapeRedirect("/"));
'''
		);

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "/"
		);
	}

	@priority = "5"
	test NoGuestRoleFromWCDArticleHistoryURL {
		property portal.acceptance = "true";
		var portalURL = PropsUtil.get("portal.url");
		var url = "${portalURL}/web/guest/home?&amp;p_p_id=com_liferay_journal_web_portlet_JournalPortlet&amp;p_p_lifecycle=0&amp;p_p_state=maximized&amp;p_p_mode=view&amp;_com_liferay_journal_web_portlet_JournalPortlet_struts_action=%2Fjournal%2Fview_article_history&amp;_com_liferay_journal_web_portlet_JournalPortlet_groupId=10180&amp;_com_liferay_journal_web_portlet_JournalPortlet_articleId=";

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Web Content Display Page");

		Navigator.gotoPage(pageName = "Web Content Display Page");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title"
		);

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentNavigator.gotoEditPGViaWCD(
			menuItem = "Edit Web Content",
			webContentTitle = "WC WebContent Title"
		);

		var articleID = selenium.getText("WCEditWebContent#ARTICLE_ID");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${url}${articleID}");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "You do not have the roles required to access this portlet."
		);
	}

	@description = "This is a use case for LPS-87768."
	@ignore = "true"
	@priority = "5"
	test NoPermissionFromUnauthorizedURLAsPowerUser {
		property test.name.skip.portal.instance = "SecurityUsecase#NoPermissionFromUnauthorizedURLAsPowerUser";

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.assignRegularRoleCP(roleTitle = "Power User", userScreenName = "usersn");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln"
		);

		UserBar.gotoProfile();

		WaitForSPARefresh();

		var authToken = Page.getAuthTokenFromHtmlSource();
		var plid = Page.getPlidFromHtmlSource();
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(
			url = '''${portalURL}/c/portal/update_layout?cmd=add&p_p_col_id=column-1&p_p_col_pos=0&p_p_id=com_liferay_marketplace_store_web_portlet_MarketplacePurchasedPortlet&p_auth=${authToken}&p_l_id=${plid}'''
		);

		UserBar.gotoProfile();

		AssertElementNotPresent(
			locator1 = "Portlet#BODY",
			key_portletName = "Purchased"
		);
	}

	@priority = "5"
	test ValidateCannotOverwriteOSGiServiceIdentifier {
		property portal.acceptance = "true";
		var portalURL = PropsUtil.get("portal.url");
		var url = "${portalURL}/c/portal/json_service?serviceClassName=com.liferay.portal.kernel.service.AccountServiceUtil&amp;serviceMethodName=getOSGiServiceIdentifier&amp;p_auth=";

		Api.gotoPAuthURL(url = "${url}");

		AssertElementPresent(locator1 = "JSONWS#SECURITY_EMPTY_PAGE");
	}

	@priority = "4"
	test ValidateCannotStealAdminAccount {
		property test.name.skip.portal.instance = "SecurityUsecase#ValidateCannotStealAdminAccount";
		var pAuth = Api.getPAuth();
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn"
		);

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn"
		);


		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln"
		);

		Navigator.openSpecificURL(
			url = "${portalURL}/api/jsonws/group/get-group/group-id/20126?p_auth=${pAuth}"
		);

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Forbidden"
		);
	}

	@priority = "5"
	test ValidateForwardURLPG {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,${ip.address}";
		property portal.acceptance = "true";
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(
			url = "${portalURL}/html/common/forward_jsp.jsp?FORWARD_URL=http://www.msn.com"
		);

		Pause(locator1 = "3000");

		AssertElementPresent(locator1 = "Home#PAGE", key_pageName = "Welcome");

		AssertTextEquals.assertTextCaseInsensitive(
			locator1 = "HelloWorld#PORTLET_TITLE",
			value1 = "Hello World"
		);

		AssertElementPresent(locator1 = "HelloWorld#PORTLET_CONTENT");

		ProductMenu.gotoPortlet(
			category = "Build",
			panel = "Site Administration",
			portlet = "Pages"
		);

		SitePages.addPublicPage(pageName = "Test");

		Navigator.openSpecificURL(
			url = '''${portalURL}/html/common/forward_jsp.jsp?FORWARD_URL=${portalURL}/web/guest/test'''
		);

		AssertElementPresent(locator1 = "Home#PAGE", key_pageName = "Test");
	}

	@description = "This is a use case for LPS-73595."
	@priority = "5"
	test ViewJSLoaderModulesURLNoWiki {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/o/js_loader_modules");

		AssertConsoleTextPresent(value1 = "com.liferay.wiki.engine.html");

		AssertConsoleTextPresent(value1 = "com.liferay.wiki.engine.text");

		AssertTextNotPresent(value1 = "com.liferay.wiki.engine.html");

		AssertTextNotPresent(value1 = "com.liferay.wiki.engine.text");
	}

	@description = "This is a use case for LPS-55622."
	@ignore = "true"
	@priority = "5"
	test ViewNoInvokedPortletViaURL {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(
			url = "${portalURL}/web/guest/home/?p_p_id=asdf&amp;p_p_lifecycle=0&amp;p_p_state=maximized&amp;_asdf_mvcPath=/html/portlet/portal_settings/edit_company.jsp"
		);

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "This portlet has been undeployed. Please redeploy it or remove it from the page."
		);
	}
}