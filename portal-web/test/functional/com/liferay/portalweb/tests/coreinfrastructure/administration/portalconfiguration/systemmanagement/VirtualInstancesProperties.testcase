@component-name = "portal-portal-configuration"
definition {

	property app.server.types = "tomcat";
	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Virtual Instances";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a usecase for LPS-168123. Verify properties which are supported for overriding via hook can be overriden by environment variable."
	@priority = 3
	test CanOverrideHookProperties {
		property custom.system.properties = "company-id-properties=true";
		property test.name.skip.portal.instance = "VirtualInstancesProperties#CanOverrideHookProperties";

		task ("Given the default theme is set to Classic") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			Panel.expandPanel(panel = "Look and Feel");

			AssertElementPresent(
				key_card = "Classic",
				locator1 = "Card#CARD");
		}

		task ("When the default theme is set to the Minimum theme via environment variable") {
			Tomcat.addCompanyProperties(properties = "default.regular.theme.id=minium_WAR_miniumtheme");
		}

		task ("And the portal is restarted") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then the default theme for a new site should be Minium theme") {
			JSONGroup.addGroup(groupName = "Test Site");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			Panel.expandPanel(panel = "Look and Feel");

			AssertElementPresent(
				key_card = "Minium",
				locator1 = "Card#CARD");
		}
	}

	@description = "Verify portal-ext properties can be set with environment variables after setting company-id-properties=true via system-ext.properties"
	@priority = 5
	test CanSetPortalPropertyViaEnvironmentVariable {
		property custom.system.properties = "company-id-properties=true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "VirtualInstancesProperties#CanSetPortalPropertyViaEnvironmentVariable";

		task ("Given a feature flag is disabled") {
			ApplicationsMenuHelper.openApplicationsMenu();

			AssertElementNotPresent(
				key_category = "Import / Export",
				key_portlet = "Import/Export Center",
				locator1 = "ApplicationsMenu#PORTLET");

			Refresh();
		}

		task ("When the feature flag is enabled via environment variable") {
			Tomcat.addCompanyProperties(properties = "feature.flag.COMMERCE-8087=true");
		}

		task ("And the portal is restarted") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then the feature flag is enabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Import / Export",
				panel = "Applications",
				portlet = "Import/Export Center");

			ImportExport.gotoImport();
		}
	}

	@description = "Verify portal-ext properties can be set with environment variables after setting company-id-properties=true via jvm argument."
	@priority = 5
	test CanSetPortalPropertyViaJVM {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "VirtualInstancesProperties#CanSetPortalPropertyViaJVM";

		task ("Given a feature flag is disabled") {
			ApplicationsMenuHelper.openApplicationsMenu();

			AssertElementNotPresent(
				key_category = "Import / Export",
				key_portlet = "Import/Export Center",
				locator1 = "ApplicationsMenu#PORTLET");

			Refresh();
		}

		task ("When the feature flag is enabled via environment variable") {
			Tomcat.addCompanyProperties(properties = "feature.flag.COMMERCE-8087=true");
		}

		task ("And company-id-properties=true is set via jvm argument") {
			Tomcat.addJVMArguments(arguments = "company-id-properties=true");
		}

		task ("And the portal is restarted") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then the feature flag is enabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Import / Export",
				panel = "Applications",
				portlet = "Import/Export Center");

			ImportExport.gotoImport();
		}
	}

}