@component-name = "core-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Deployment";

	@description = "LPS-173157 Verify a file is not consumed by auto deploy before it's listener is ready."
	@ignore = "true"
	@priority = 3
	test FragmentAutoDeploy {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "AutoDeploy#FragmentAutoDeploy";

		task ("Given a file is deployed before startup") {
			var dependencyFilePath = TestCase.getDependenciesDirPath(fileName = "title.zip");

			File.regexReplace(
				content = "liferay.com",
				fileName = "${dependencyFilePath}/title/liferay-deploy-fragments.json",
				regex = "www.able.com");

			FragmentsDeploy.deployZipOnLiferayPortal(fragmentsZip = "title.zip");
		}

		task ("When the portal starts up") {
			Portlet.startServer(keepOSGiState = "true");

			// Pausing 120 seconds due to POSHI-489

			Pause(locator1 = 120000);

			User.firstLoginPG();
		}

		task ("Then the file is deployed correctly") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoSpecificScopeCollection(
				collectionName = "Imported",
				scope = "Global");

			FragmentsAdmin.viewEntryPresent(entry = "Title");
		}
	}

}