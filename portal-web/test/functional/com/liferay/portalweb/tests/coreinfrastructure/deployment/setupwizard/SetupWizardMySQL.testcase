@component-name = "portal-deployment-mysql"
definition {

	property ci.retries.disabled = "true";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property setup.wizard.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Setup Wizard";

	@priority = 3
	test MySQLtoEmptyMySQL {
		property databases.size = "1";
		property test.name.skip.portal.instance = "SetupWizardMySQL#MySQLtoEmptyMySQL";

		SetupWizard.configurePG(
			administratorEmail = "test@liferay.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databaseName = "lportal1",
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		Smoke.viewWelcomeContentPage();

		Smoke.runSmoke();
	}

	@priority = 3
	test MySQLtoHSQL {
		property database.types = "hypersonic";
		property test.name.skip.portal.instance = "SetupWizardMySQL#MySQLtoHSQL";

		SetupWizard.configurePG(
			administratorEmail = "test@liferay.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databasePassword = PropsUtil.get("database.hypersonic.password"),
			databaseType = "Hypersonic",
			databaseUserName = PropsUtil.get("database.hypersonic.username"),
			jdbcDriverClassName = PropsUtil.get("database.hypersonic.driver"),
			jdbcURL = PropsUtil.get("database.hypersonic.url"));

		Smoke.viewWelcomeContentPage();

		Smoke.runSmoke();
	}

	@priority = 3
	test MySQLtoHSQLDeleteLiferayHome {
		property database.types = "hypersonic";
		property test.name.skip.portal.instance = "SetupWizardMySQL#MySQLtoHSQLDeleteLiferayHome";

		Portlet.shutdownServer();

		Portlet.startServer(
			base_branch = ${base_branch},
			deleteLiferayHome = "true");

		SetupWizard.configurePG(
			administratorEmail = "test@liferay.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databasePassword = PropsUtil.get("database.hypersonic.password"),
			databaseType = "Hypersonic",
			databaseUserName = PropsUtil.get("database.hypersonic.username"),
			jdbcDriverClassName = PropsUtil.get("database.hypersonic.driver"),
			jdbcURL = PropsUtil.get("database.hypersonic.url"));

		Smoke.viewWelcomeContentPage();

		Smoke.runSmoke();
	}

	@priority = 4
	test MySQLtoMySQLEditedAdministratorUser {
		property test.name.skip.portal.instance = "SetupWizardMySQL#MySQLtoMySQLEditAdministratorUser";

		SetupWizard.viewDefaultPortalNamePG();

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "testsetupwizard@liferay.com",
			administratorFirstName = "TestSetupWizardFN",
			administratorLastName = "TestSetupWizardLN");

		SetupWizard.configureDatabasePG(
			databaseName = "lportal",
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		SetupWizard.finishConfigurationPG();

		SetupWizard.viewConfigurationSavedPG();

		Portlet.shutdownServer();

		Portlet.startServer(
			base_branch = ${base_branch},
			deleteLiferayHome = "false");

		SetupWizard.viewConfiguredDatabaseInConsole(databaseType = ${databaseType});

		if (isSet(virtualHostsURL)) {
			Navigator.openSpecificURL(url = ${virtualHostsURL});
		}
		else {
			Navigator.openURL();
		}

		User.acceptEndUserLicenseAgreement();

		User.resetPassword();

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		User.viewLoggedInPG();

		Navigator.openURL();

		Navigator.gotoAccountSettings();

		AssertTextEquals(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "testsetupwizard@liferay.com");

		AssertTextEquals(
			locator1 = "TextInput#FIRST_NAME",
			value1 = "TestSetupWizardFN");

		AssertTextEquals(
			locator1 = "TextInput#LAST_NAME",
			value1 = "TestSetupWizardLN");

		AssertTextEquals(
			locator1 = "TextInput#SCREEN_NAME",
			value1 = "testsetupwizard");
	}

}