@component-name = "portal-logging"
definition {

	property database.partition.enabled = "true";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Logging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Any logs that would appear in specifically company A should never appear in the logs of company B"
	@ignore = "true"
	@priority = "5"
	test AssertCompanyLogsIsolated {
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#AssertCompanyLogsIsolated";

		task ("Given all company logs output unique logs") {
			ServerAdministration.openServerAdmin();

			ServerAdministration.addCategoryLogLevels(
				categoryLevel = "INFO",
				categoryName = "com.liferay.portal.background.task.internal.messaging.RemoveOnCompletionBackgroundTaskStatusMessageListener");
		}

		task ("Then the logs of one company should not appear in the logs of the other") {
			for (var portalInstanceName : list "www.able.com,www.baker.com") {
				HeadlessPortalInstanceAPI.addPortalInstance(
					domain = "${portalInstanceName}",
					portalInstanceId = "${portalInstanceName}",
					virtualHost = "${portalInstanceName}");

				Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log");

				CompanyLogging.assertCompanyLogIsolated(portalInstanceName = "${portalInstanceName}");
			}
		}
	}

	@description = "If company.log.enabled=false, there should not be additional logging files created for each company and the UI access point should be unavailable"
	@ignore = "true"
	@priority = "4"
	test CompanyLoggingDisabled {
		property custom.properties = "company.log.enabled=false";

		task ("When the user tries navigating to the company logging UI access point with company logs disabled") {
			Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log");
		}

		task ("Then the page cannot be accessed") {
			AssertElementNotPresent(
				key_virtualHost = "liferay.com",
				locator1 = "CompanyLogging#COMPANY_LOG_TITLE");

			AssertLocation.assertPartialLocation(value1 = "web/guest");
		}

		task ("When the user adds a virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Then additional company logging files should not be created") {
			var homeDir = PropsUtil.get("liferay.home.dir.name");

			var companiesFolderExists = FileUtil.exists("${homeDir}/logs/companies");

			if ("${companiesFolderExists}" == "true") {
				fail("logs/companies folder exists");
			}
		}
	}

	@description = "An Omniadmin can get log names from all companies and download logs from all companies though the UI"
	@ignore = "true"
	@priority = "4"
	test GetAllCompanyLogs {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#GetAllCompanyLogs";

		task ("Given all company logs output unique logs") {
			ServerAdministration.openServerAdmin();

			ServerAdministration.addCategoryLogLevels(
				categoryLevel = "INFO",
				categoryName = "com.liferay.portal.background.task.internal.messaging.RemoveOnCompletionBackgroundTaskStatusMessageListener");
		}

		task ("And given two new virtual instances are created") {
			for (var portalInstanceName : list "www.able.com,www.baker.com") {
				HeadlessPortalInstanceAPI.addPortalInstance(
					domain = "${portalInstanceName}",
					portalInstanceId = "${portalInstanceName}",
					virtualHost = "${portalInstanceName}");
			}
		}

		task ("When the Omniadmin navigates to the company logging UI access point") {
			Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log");
		}

		task ("Then log files are present for all companies") {
			var portalInstanceNames = JSONCompany.getAllCompanyNames();

			for (var portalInstanceName : list "${portalInstanceNames}") {
				AssertElementPresent(
					key_virtualHost = "${portalInstanceName}",
					locator1 = "CompanyLogging#COMPANY_LOG_TITLE");
			}
		}

		task ("And the log files can be downloaded and viewed for each company") {
			for (var portalInstanceName : list "${portalInstanceNames}") {
				var logContent = CompanyLogging.downloadCompanyLog(portalInstanceName = "${portalInstanceName}");

				CompanyLogging.assertCompanyLogContent(
					logContent = "${logContent}",
					portalInstanceName = "${portalInstanceName}");
			}
		}
	}

	@description = "A company admin should only be able to see the logs from the company they are an admin of"
	@ignore = "true"
	@priority = "5"
	test GetCompanyAdminLogs {
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#GetCompanyAdminLogs";

		task ("Given a new instance is created") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("And given a company admin user is added for that virtual instance") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			JSONUser.addUser(
				creatorEmailAddress = "test@www.able.com",
				creatorPassword = "test",
				portalInstanceName = "www.able.com",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "userea@www.able.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			User.openUsersAdmin(baseURL = "http://www.able.com:8080");

			User.assignRegularRoleCP(
				roleTitle = "Administrator",
				userScreenName = "usersn");

			User.editPassword(newPassword = "test");
		}

		task ("And given the company admin logs in to the virtual instance") {
			User.logoutPG();

			SignIn._signIn(
				userEmailAddress = "userea@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");
		}

		task ("When the company admin navigates to the company logging UI access point") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/o/company-log");
		}

		task ("Then only logs for that instance are shown") {
			AssertElementPresent(
				key_virtualHost = "www.able.com",
				locator1 = "CompanyLogging#COMPANY_LOG_TITLE");

			AssertElementNotPresent(
				key_virtualHost = "liferay.com",
				locator1 = "CompanyLogging#COMPANY_LOG_TITLE");
		}
	}

	@description = "A company admin that tries to directly download the logs of a company they do not have access to should get a permissions error"
	@ignore = "true"
	@priority = "4"
	test GetCompanyAdminLogsFromDifferentCompany {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#GetCompanyAdminLogsFromDifferentCompany";

		task ("Given a new instance is created") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("And given a company admin user is added for that virtual instance") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			JSONUser.addUser(
				creatorEmailAddress = "test@www.able.com",
				creatorPassword = "test",
				portalInstanceName = "www.able.com",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "userea@www.able.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			User.openUsersAdmin(baseURL = "http://www.able.com:8080");

			User.assignRegularRoleCP(
				roleTitle = "Administrator",
				userScreenName = "usersn");

			User.editPassword(newPassword = "test");
		}

		task ("And given the company admin logs in to the virtual instance") {
			User.logoutPG();

			SignIn._signIn(
				userEmailAddress = "userea@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");
		}

		task ("When the company admin tries accessing the company logging UI to download a specific company log from a different company") {
			var companyId = JSONCompany.getCompanyId();
			var logName = CompanyLogging.getCompanyLogName(portalInstanceName = "liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log/${companyId}/${logName}?download=true");
		}

		task ("Then a permissions error is shown and no log is downloaded") {
			AssertTextPresent(
				locator1 = "//body",
				value1 = "You don't have authorization to view this page.");

			CompanyLogging.assertNoLogDownloaded(logName = "${logName}");
		}
	}

	@description = "A non-administrative user should get a permissions denied error when trying to access the UI to get company logging information"
	@ignore = "true"
	@priority = "4"
	test GetCompanyLogsAsGuest {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
		property test.assert.warning.exceptions = "true";

		task ("Given a non-administrative company user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the user tries accessing the company logging UI to download a specific company log") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			var companyId = JSONCompany.getCompanyId();
			var logName = CompanyLogging.getCompanyLogName(portalInstanceName = "liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log/${companyId}/${logName}?download=true");
		}

		task ("Then a permissions error is shown and no log is downloaded") {
			AssertTextPresent(
				locator1 = "//body",
				value1 = "You don't have authorization to view this page.");

			AssertTextPresent(
				locator1 = "//body",
				value1 = "HTTP ERROR 403");

			CompanyLogging.assertNoLogDownloaded(logName = "${logName}");
		}
	}

	@description = "If there are no logs available for a company, there should be some kind of message to notify the user when they try to check the available log names"
	@ignore = "true"
	@priority = "4"
	test GetEmptyCompanyLogs {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#GetEmptyCompanyLogs";

		task ("Given all company logs are deleted") {
			var homeDir = PropsUtil.get("liferay.home.dir.name");

			FileUtil.delete("${homeDir}/logs/companies");
		}

		task ("When the user navigates to the company logging UI access point") {
			Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log");
		}

		task ("Then a message is shown that indicates no logs are available") {
			AssertTextPresent(
				locator1 = "//body",
				value1 = "No log is available");
		}
	}

	@description = "If a user tries to download a logging file or company that doesn’t exist it should fail and throw a suitable error message"
	@ignore = "true"
	@priority = "4"
	test GetInvalidCompanyLogs {
		task ("When the user tries to download a log via an http request where the log name is invalid") {
			var companyId = JSONCompany.getCompanyId();
			var baseURL = PropsUtil.get("portal.url");

			Open.openNoError(locator1 = "${baseURL}/o/company-log/${companyId}/invalidLog.log");
		}

		task ("Then an error message is shown which indicates the log was not found and no log is downloaded") {
			AssertTextPresent(
				locator1 = "//body",
				value1 = "No webpage was found for the web address");

			AssertConsoleTextPresent(value1 = "java.io.FileNotFoundException: Unable to find log file invalidLog.log for company ${companyId}");

			CompanyLogging.assertNoLogDownloaded(logName = "invalidLog.log");
		}
	}

}