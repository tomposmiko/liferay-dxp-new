@component-name = "portal-database-partitioning"
definition {

	property app.server.types = "tomcat";
	property ci.retries.disabled = "true";
	property database.partition.enabled = "true";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Database Partitioning";
	property timeout.explicit.wait = "180";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		PortalInstances.tearDownCP();
	}

	@priority = 5
	test CanAddCompanyWithCluster {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property minimum.slave.ram = "24";
		property portal.acceptance = "true";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#CanAddCompanyWithCluster";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		User.logoutPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 8080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@www.able.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		SQL.assertDatabaseCount(
			databaseFilter = "lpartition%",
			databaseSubstring = "lpartition",
			expectedCount = 1);
	}

	@priority = 5
	test CanAddCompanyWithClusterSecondNode {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property minimum.slave.ram = "24";
		property portal.acceptance = "true";
		property remote.elasticsearch.enabled = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#CanAddCompanyWithClusterSecondNode";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		PortalInstances.openVirtualInstancesAdmin(baseURL = "http://localhost:9080");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@www.able.com");

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		SQL.assertDatabaseCount(
			databaseFilter = "lpartition%",
			databaseSubstring = "lpartition",
			expectedCount = 1);
	}

	@description = "This is a use case for LPS-160064."
	@priority = 4
	test CanAddCompanyWithHeadlessAPI {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.baker.com";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#CanAddCompanyWithHeadlessAPI";

		HeadlessPortalInstanceAPI.addPortalInstance(
			domain = "www.baker.com",
			portalInstanceId = "www.baker.com",
			virtualHost = "www.baker.com");

		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.baker.com:8080",
			userEmailAddress = "test@www.baker.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		SQL.assertDatabaseCount(
			databaseFilter = "lpartition%",
			databaseSubstring = "lpartition",
			expectedCount = 1);
	}

	@priority = 5
	test CanAddCompanyWithPortalInstancesAdminUI {
		property custom.properties = "database.partition.schema.name.prefix=testPartition${line.separator}virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#CanAddCompanyWithPortalInstancesAdminUI";

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		SQL.assertDatabaseCount(
			databaseFilter = "testPartition%",
			databaseSubstring = "testPartition",
			expectedCount = 1);
	}

	@priority = 5
	test CanDeleteCompany {
		property custom.properties = "database.partition.schema.name.prefix=testPartition${line.separator}virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#CanDeleteCompany";

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		User.loginPG();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.deleteCP(virtualHost = "www.able.com");

		SQL.assertDatabaseCount(
			databaseFilter = "testPartition%",
			databaseSubstring = "testPartition",
			expectedCount = 0);
	}

	@priority = 4
	test CanSetVirtualHostViaPages {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#CanSetVirtualHostViaPages";

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Site Settings");

		Site.addVirtualHostsURLCP(
			pageVirtualHosts = "true",
			pageVirtualHostURL = "www.baker.com");

		Navigator.gotoPage(
			baseURL = "http://www.baker.com:8080",
			pageName = "Home");

		AssertLocation(value1 = "http://www.baker.com:8080/web/guest/home");

		SignOut.signOut();

		User.firstLoginPG();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.executeServerResourcesActions(actionsDescription = "Clear the database cache.");

		Navigator.gotoPage(
			baseURL = "http://www.baker.com:8080",
			pageName = "Home");

		AssertLocation(value1 = "http://www.baker.com:8080/web/guest/home");
	}

	@priority = 4
	test ExecuteSchemaValidator {
		property custom.properties = "database.partition.schema.name.prefix=testPartition${line.separator}virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com,www.baker.com";
		property test.name.skip.portal.instance = "DatabasePartitioning#ExecuteSchemaValidator";

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.baker.com",
			virtualHost = "www.baker.com",
			webId = "www.baker.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.baker.com:8080",
			userEmailAddress = "test@www.baker.com");

		Navigator.openSpecificURL(url = "http://www.baker.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		SQL.assertDatabaseCount(
			databaseFilter = "testPartition%",
			databaseSubstring = "testPartition",
			expectedCount = 2);

		DBPartition.validateSchemas(schemaNamePrefix = "testPartition");
	}

	@priority = 3
	test NewCompanyStillAccessibleAfterRestart {
		property custom.properties = "database.partition.schema.name.prefix=testPartition${line.separator}virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#NewCompanyStillAccessibleAfterRestart";

		HeadlessPortalInstanceAPI.addPortalInstance(
			domain = "www.able.com",
			portalInstanceId = "www.able.com",
			virtualHost = "www.able.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "LPS-163671 - Scenario to cover creation of Virtual Instances with case insensitive DB and DB partitioning enabled"
	@priority = 3
	test NewCompanyStillAccessibleAfterRestartWithCaseInsensitiveDatabase {
		property database.lowercase.enabled = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "DatabasePartitioning#NewCompanyStillAccessibleAfterRestartWithCaseInsensitiveDatabase";

		task ("Verify if the lower_case_table_names is enabled") {
			var variableQueryResult = SQL.executeMySQLStatement(mysqlStatement = "show variables where Variable_name='lower_case_table_names';");

			if (!(contains(${variableQueryResult}, "lower_case_table_names,1"))) {
				echo(${variableQueryResult});

				fail("lower_case_table_names variable not set to 1, case insensitive not enabled.");
			}
		}

		task ("Add new company") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Go to Control Panel > Virtual Instances and verify that the virtual instance is present in the UI") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Virtual Instances");

			PortalInstances.viewCP(virtualHost = "www.able.com");
		}

		task ("Access the Virtual Instance and verify that the host name is available") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			AssertConsoleTextNotPresent(value1 = "Invalid host name www.able.com");
		}

		task ("Restart server") {
			Portlet.shutdownServer();

			Portlet.startServer(keepOsGiState = "true");
		}

		task ("Access Virtual Instance and verify that is visible in the UI") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Smoke.viewWelcomeContentPage();
		}
	}

	@priority = 3
	test ScheduleWebContentChangesWithDBPartitioningActivatedAcrossVariousCompanies {
		property osgi.module.configuration.file.names = "com.liferay.journal.configuration.JournalServiceConfiguration.config";
		property osgi.module.configurations = "checkInterval=I\"1\"";
		property test.name.skip.portal.instance = "DatabasePartitioning#ScheduleWebContentChangesWithDBPartitioningActivatedAcrossVariousCompanies";

		task ("Add a new Company") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add a WebContent article on new Company") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content New Company",
				webContentTitle = "WC WebContent Title New Company");

			WebContent.increaseDisplayDate(minuteIncrease = 4);

			PortletEntry.publish();

			AssertTextEquals(
				key_webContentTitle = "WC WebContent Title New Company",
				locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
				value1 = "SCHEDULED");
		}

		task ("Add a WebContent article on default Company") {
			User.firstLoginPG();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content Default Company",
				webContentTitle = "WC WebContent Title Default Company");

			WebContent.increaseDisplayDate(minuteIncrease = 2);

			PortletEntry.publish();

			AssertTextEquals(
				key_webContentTitle = "WC WebContent Title Default Company",
				locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
				value1 = "SCHEDULED");
		}

		task ("View WebContent Article Publish on default Company") {

			// Pausing 120 seconds due to LRQA-75909

			Pause(locator1 = 120000);

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			AssertTextEquals(
				key_webContentTitle = "WC WebContent Title Default Company",
				locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
				value1 = "APPROVED");
		}

		task ("New Company publish it's WebContent Article") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			// Pausing 120 seconds due to LRQA-75909

			Pause(locator1 = 120000);

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			AssertTextEquals(
				key_webContentTitle = "WC WebContent Title New Company",
				locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
				value1 = "APPROVED");
		}

		task ("WebContent Article not repulish on default Company") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			AssertTextEquals(
				key_webContentTitle = "WC WebContent Title Default Company",
				locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
				value1 = "APPROVED");
		}
	}

}