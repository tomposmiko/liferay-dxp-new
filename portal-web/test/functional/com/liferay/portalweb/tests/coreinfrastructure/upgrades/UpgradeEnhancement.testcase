@component-name = "portal-database-upgrade-framework"
definition {

	property app.server.types = "tomcat";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Database Upgrade Framework";

	@priority = "4"
	test DecrementCoreSchemaMajorVersion {
		property test.name.skip.portal.instance = "UpgradeEnhancement#DecrementCoreSchemaMajorVersion";

		var script = '''
			import com.liferay.portal.kernel.model.*;
			import com.liferay.portal.kernel.service.ReleaseLocalServiceUtil;
			import com.liferay.portal.kernel.version.Version;

			Release release = ReleaseLocalServiceUtil.fetchRelease(ReleaseConstants.DEFAULT_SERVLET_CONTEXT_NAME);

			String originalSchemaVersion = release.getSchemaVersion();

			Version version = Version.parseVersion(originalSchemaVersion);

			version = new Version(version.getMajor() - 1, version.getMinor(), version.getMicro());

			out.println("Version decremented to: " + version.toString());

			ReleaseLocalServiceUtil.updateRelease(
				ReleaseConstants.DEFAULT_SERVLET_CONTEXT_NAME, version.toString(), originalSchemaVersion);
		''';

		User.firstLoginPG();

		ServerAdministration.openServerAdmin();

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		AssertConsoleTextPresent(value1 = "You must first upgrade the portal to the required schema version");
	}

	@priority = "4"
	test DecrementCoreSchemaMicroVersion {
		property test.name.skip.portal.instance = "UpgradeEnhancement#DecrementCoreSchemaMicroVersion";

		var script = '''
			import com.liferay.portal.kernel.model.*;
			import com.liferay.portal.kernel.service.ReleaseLocalServiceUtil;
			import com.liferay.portal.kernel.version.Version;

			Release release = ReleaseLocalServiceUtil.fetchRelease(ReleaseConstants.DEFAULT_SERVLET_CONTEXT_NAME);

			String originalSchemaVersion = release.getSchemaVersion();

			Version version = Version.parseVersion(originalSchemaVersion);

			if (version.getMicro() != 0) {
				version = new Version(version.getMajor(), version.getMinor(), version.getMicro() - 1);

				out.println("Version decremented to: " + version.toString());
			} else {
				out.println("Cannot decrement micro version, it is already at the minimum value");
			}

			ReleaseLocalServiceUtil.updateRelease(
				ReleaseConstants.DEFAULT_SERVLET_CONTEXT_NAME, version.toString(), originalSchemaVersion);
		''';

		User.firstLoginPG();

		ServerAdministration.openServerAdmin();

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		var output = selenium.getText("ServerAdministrationScript#OUTPUT_FIELD");

		if ("${output}" == "Cannot decrement micro version, it is already at the minimum value") {
			echo("This testcase is currently not testable.");
		}
		else {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");

			User.firstLoginPG();
		}
	}

	@priority = "3"
	test DecrementCoreSchemaMinorVersion {
		property test.name.skip.portal.instance = "UpgradeEnhancement#DecrementCoreSchemaMinorVersion";

		var script = '''
			import com.liferay.portal.kernel.model.*;
			import com.liferay.portal.kernel.service.ReleaseLocalServiceUtil;
			import com.liferay.portal.kernel.version.Version;

			Release release = ReleaseLocalServiceUtil.fetchRelease(ReleaseConstants.DEFAULT_SERVLET_CONTEXT_NAME);

			String originalSchemaVersion = release.getSchemaVersion();

			Version version = Version.parseVersion(originalSchemaVersion);

			if (version.getMinor() != 0) {
				version = new Version(version.getMajor(), version.getMinor() - 1, version.getMicro());

				out.println("Version decremented to: " + version.toString());
			} else {
				out.println("Cannot decrement minor version, it is already at the minimum value");
			}

			ReleaseLocalServiceUtil.updateRelease(
				ReleaseConstants.DEFAULT_SERVLET_CONTEXT_NAME, version.toString(), originalSchemaVersion);
		''';

		User.firstLoginPG();

		ServerAdministration.openServerAdmin();

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		var output = selenium.getText("ServerAdministrationScript#OUTPUT_FIELD");

		if ("${output}" != "Cannot decrement minor version, it is already at the minimum value") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");

			AssertConsoleTextPresent(value1 = "You must first upgrade the portal to the required schema version");
		}
		else {
			echo("This testcase is currently not testable.");
		}
	}

	@priority = "4"
	test DirectUpgradeFromArchive6012 {
		property data.archive.type = "data-archive-portal";
		property portal.upgrades = "false";
		property portal.version = "6.0.12";
		property skip.start.app.server = "true";
		property test.assert.warning.exceptions = "true";

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/logs/upgrade.log");

		if (contains("${fileContent}", "You must first upgrade to Liferay Portal 6200")) {
			echo("You must first upgrade to Liferay Portal 6200.");
		}
		else {
			fail("FAIL! Cannot find the warning message.");
		}
	}

	@priority = "4"
	test DirectUpgradeFromArchive6130 {
		property data.archive.type = "data-archive-portal";
		property portal.upgrades = "false";
		property portal.version = "6.1.30";
		property skip.start.app.server = "true";
		property test.assert.warning.exceptions = "true";

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/logs/upgrade.log");

		if (contains("${fileContent}", "You must first upgrade to Liferay Portal 6200")) {
			echo("You must first upgrade to Liferay Portal 6200.");
		}
		else {
			fail("FAIL! Cannot find the warning message.");
		}
	}

	@priority = "4"
	test RemoveModulesWithSchemaVersionChange {
		property osgi.modules.includes = "revert-schema-version-api,revert-schema-version-service";

		User.firstLoginPG();

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "dm wtf");

		GogoShell.viewOutput(outputContent = "No unregistered components found");

		// Change schema version from 2.1.1 to 2.1.0.

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "redeploy-osgi-module -Dmodule.base.dir=modules/test/upgrade/revert-schema-version-service -Dupdate.properties=2.1.0 -Dupdate.properties.original=2.1.1");

		Pause(locator1 = "15000");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "dm wtf");

		GogoShell.viewOutput(outputContent = "No unregistered components found");

		// Change schema version from 2.1.0 to 2.0.0.

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "redeploy-osgi-module -Dmodule.base.dir=modules/test/upgrade/revert-schema-version-service -Dupdate.properties=2.0.0 -Dupdate.properties.original=2.1.0");

		Pause(locator1 = "15000");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "dm wtf");

		GogoShell.viewOutput(outputContent = "No unregistered components found");

		// Change schema version from 2.0.0 to 1.0.0.

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "redeploy-osgi-module -Dmodule.base.dir=modules/test/upgrade/revert-schema-version-service -Dupdate.properties=1.0.0 -Dupdate.properties.original=2.0.0");

		Pause(locator1 = "15000");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "dm wtf");

		GogoShell.viewOutput(outputContent = "com.liferay.portal.kernel.model.Release (&(release.bundle.symbolic.name=com.liferay.revert.schema.version.service)(&(release.schema.version>=1.0.0)(!(release.schema.version>=2.0.0)))(|(!(release.state=*))(release.state=0))) for bundle com.liferay.revert.schema.version.service");
	}

}