@component-name = "portal-security"
definition {
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "LDAP";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalSettings.tearDownAuthenticationCP();

			Page.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-65498."
	@priority = "5"
	test ImportLDAPUserWithBlankPassword {
		property apacheds.blank.user.password.enabled = "true";
		property apacheds.enabled = "true";
		property environment.acceptance = "false";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "LDAP#ImportLDAPUserWithBlankPassword";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.addLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.editLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.testLDAPConnection();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		var enableSettingList = "enabled,ldapImportEnabled,importOnStartup";

		PortalSettings.configureLDAPSetting(enableSettingList = "${enableSettingList}");

		PortalSettings.viewEnabledLDAPSetting(
			enableSettingList = "${enableSettingList}"
		);

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.viewCP(
			userEmailAddress = "ldapuseremail@liferay.com",
			userFirstName = "ldapusergivenname",
			userLastName = "ldapusersn",
			userScreenName = "ldapusercn"
		);

		AssertConsoleTextNotPresent(value1 = "Unable to encrypt blank password");
	}

	@description = "This is a use case for LPS-30529."
	@priority = "4"
	test ResetFieldsValueForImportedLDAPUser {
		property apacheds.enabled = "true";
		property test.name.skip.portal.instance = "LDAP#ResetFieldsValueForImportedLDAPUser";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.addLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.editLDAPServer(LDAPServerName = "ApacheDS Server");

		PortalSettings.testLDAPConnection();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		var enableSettingList = "enabled,ldapExportEnabled,ldapImportEnabled,importOnStartup";

		PortalSettings.configureLDAPSetting(enableSettingList = "${enableSettingList}");

		PortalSettings.viewEnabledLDAPSetting(
			enableSettingList = "${enableSettingList}"
		);

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations"
		);

		User.viewCP(
			userEmailAddress = "ldapuseremail@liferay.com",
			userFirstName = "ldapusergivenname",
			userLastName = "ldapusersn",
			userScreenName = "ldapusercn"
		);

		Navigator.gotoBack();

		User.editUserGenderCP(
			userGender = "Female",
			userName = "ldapusergivenname ldapusersn"
		);

		Navigator.gotoBack();

		User.editUserJobTitleCP(
			userJobTitle = "QA",
			userName = "ldapusergivenname ldapusersn"
		);

		Navigator.gotoBack();

		User.editUserSuffixCP(
			userName = "ldapusergivenname ldapusersn",
			userSuffix = "Phd"
		);

		Navigator.gotoBack();

		User.editPasswordCP(
			userEmailAddress = "ldapuseremail@liferay.com",
			userScreenName = "ldapusercn"
		);

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ldapuseremail@liferay.com",
			userLoginFullName = "ldapusergivenname ldapusersn"
		);

		ProductMenu.gotoPortlet(
			category = "My Account",
			panel = "User",
			portlet = "Account Settings"
		);

		AssertTextEquals(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_GENDER_SELECTED",
			value1 = "Female",
			key_userGender = "Female"
		);

		AssertTextEquals(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_JOB_TITLE_FIELD",
			value1 = "QA"
		);

		AssertTextEquals(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_SUFFIX_SELECTED",
			value1 = "Phd",
			key_userSuffix = "Phd"
		);
	}

	@description = "This is a use case for LPS-73381."
	@priority = "4"
	test ViewHiddenSecurityCredential {
		property test.name.skip.portal.instance = "LDAP#ViewHiddenSecurityCredential";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Servers",
			configurationScope = "Virtual Instance Scope"
		);

		SystemSettings.editSecurityCredential(securityCredential = "123456");
	}

	@priority = "3"
	test ViewLDAPInstanceSettingsDoNotAffectSystemSettings {
		property test.name.skip.portal.instance = "LDAP#ViewInstanceSettingsEnableLDAPAuthNotAffectSystemSetting";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Authentication",
			configurationScope = "Virtual Instance Scope"
		);

		FormFields.viewCheckboxNotChecked(fieldName = "enabled");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettings.configureLDAPSetting(enableSettingList = "enabled");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings"
		);

		SystemSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Authentication",
			configurationScope = "Virtual Instance Scope"
		);

		FormFields.viewCheckboxNotChecked(fieldName = "enabled");
	}
}