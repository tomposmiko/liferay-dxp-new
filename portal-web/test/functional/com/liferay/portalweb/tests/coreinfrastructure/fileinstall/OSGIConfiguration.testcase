@component-name = "portal-file-install"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "File Install";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Verify if no osgi config file exists, when a config is updated via UI, then the config is added to the database and a config file is not created."
	@priority = "3"
	test ConfigAddedViaUIDoesNotCreateNewConfigFile {
		property test.name.skip.portal.instance = "OSGIConfiguration#ConfigAddedViaUIDoesNotCreateNewConfigFile";

		task ("Given no osgi config file exists for a specific config") {
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";

			OSGiConfig.assertOSGiConfigDoesNotExist(osgiConfigFileName = "${configName}.config");
		}

		task ("When the config is updated via UI") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Catalog",
				configurationName = "SKUs",
				configurationScope = "System Scope");

			Type(
				key_text = "Check Interval",
				locator1 = "TextInput#ANY",
				value1 = "44");

			Button.clickSave();

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config is added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"44\"");
		}

		task ("And a new config file is not created") {
			OSGiConfig.assertOSGiConfigDoesNotExist(osgiConfigFileName = "${configName}.config");
		}
	}

	@description = "Verify if an osgi config file exists, when a config is updated via UI, then the config file is updated with the new values."
	@priority = "3"
	test ConfigAddedViaUIUpdatesExistingOSGIConfigFile {
		property osgi.module.configuration.file.names = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration.config";
		property osgi.module.configurations = "checkInterval=I\"33\"";
		property test.name.skip.portal.instance = "OSGIConfiguration#ConfigAddedViaUIUpdatesExistingOSGIConfigFile";

		task ("Given an osgi config file exists for a specific config") {
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";

			OSGiConfig.assertTextInOSGiConfig(
				osgiConfigFileName = "${configName}.config",
				text = "checkInterval=I\"33\"");
		}

		task ("When the config is updated via UI") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Catalog",
				configurationName = "SKUs",
				configurationScope = "System Scope");

			Type(
				key_text = "Check Interval",
				locator1 = "TextInput#ANY",
				value1 = "44");

			Button.clickUpdate();

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config is updated in the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"44\"");
		}

		task ("And a second config entry is not added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "1");
		}

		task ("And the OSGI config file is updated to match the database entry") {
			OSGiConfig.assertTextInOSGiConfig(
				osgiConfigFileName = "${configName}.config",
				text = "checkInterval=I\"44\"");
		}
	}

	@description = "Verify OSGI config files added to auto deploy directories other than osgi/configs are not read."
	@ignore = "true"
	@priority = "3"
	test ConfigFilesReadOnlyFromOSGIConfigs {
		property test.name.skip.portal.instance = "OSGIConfiguration#ConfigFilesReadOnlyFromOSGIConfigs";

		// TODO Un-ignore test when LPS-167572 is fixed

		task ("When an OSGI config file is added to an auto deploy directory other than osgi/configs") {
			var config = "checkInterval=I\"44\"";

			var config = '''${config}''';
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			FileUtil.write("${liferayHome}/osgi/modules/${configName}.config", "${config}");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config should not be added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "0");
		}
	}

	@description = "Verify if a config exists only in the database, when a OSGI config file is added, the databse entry is updated."
	@priority = "3"
	test OSGIConfigFileUpdatesExistingConfigInDatabase {
		property test.name.skip.portal.instance = "OSGIConfiguration#OSGIConfigFileUpdatesExistingConfigInDatabase";

		task ("Given no osgi config file exists for a specific config") {
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";

			OSGiConfig.assertOSGiConfigDoesNotExist(osgiConfigFileName = "${configName}.config");
		}

		task ("And given a config is added to the database via UI") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Catalog",
				configurationName = "SKUs",
				configurationScope = "System Scope");

			Type(
				key_text = "Check Interval",
				locator1 = "TextInput#ANY",
				value1 = "33");

			Button.clickSave();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"33\"");
		}

		task ("When an OSGI config file is added") {
			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "${configName}.config",
				osgiConfigs = "checkInterval=I\"44\"");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config is updated in the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"44\"");
		}

		task ("And a second config entry is not added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "1");
		}
	}

}