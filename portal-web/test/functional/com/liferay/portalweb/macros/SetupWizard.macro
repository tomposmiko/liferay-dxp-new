definition {
	macro configureAdministratorUserPG {
		Type(locator1 = "TextInput#FIRST_NAME", value1 = "${administratorFirstName}");

		Type(locator1 = "TextInput#LAST_NAME", value1 = "${administratorLastName}");

		Type(locator1 = "TextInput#EMAIL", value1 = "${administratorEmail}");
	}

	macro configureDatabasePG {
		if (IsElementNotPresent(locator1 = "SetupWizard#DATABASE_CHANGE_USE_CONFIGURED_DATABASE_LINK")) {
			AssertClick(locator1 = "SetupWizard#DATABASE_CHANGE_LINK", value1 = "(Change)");
		}

		if (isSet(databaseName)) {
			var jdbcURL = StringUtil.replace("${jdbcURL}", "lportal", "${databaseName}");
		}

		Select(
			locator1 = "SetupWizard#DATABASE_CHANGE_DATABASE_TYPE_SELECT",
			value1 = "${databaseType}"
		);

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_URL_FIELD",
			value1 = "${jdbcURL}"
		);

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_DRIVER_CLASS_NAME_FIELD",
			value1 = "${jdbcDriverClassName}"
		);

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_USER_NAME_FIELD",
			value1 = "${databaseUserName}"
		);

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_PASSWORD_FIELD",
			value1 = "${databasePassword}"
		);
	}

	macro configureDefaultPG {
		SetupWizard.viewDefaultPortalNamePG();

		SetupWizard.configureSampleDataPG(addSampleData = "${addSampleData}");

		SetupWizard.viewDefaultAdministratorUserPG();

		SetupWizard.viewDefaultDatabasePG();

		SetupWizard.finishConfigurationPG();

		SetupWizard.viewConfigurationSavedPG();

		Portlet.shutdownServer();

		Portlet.startServer(base_branch = "${base_branch}", deleteLiferayHome = "false");

		if (isSet(virtualHostsURL)) {
			Navigator.openSpecificURL(url = "${virtualHostsURL}");
		}
		else {
			Navigator.openURL();
		}

		User.acceptEndUserLicenseAgreement();

		User.resetPassword(
			resetPassword = "${resetPassword}",
			setupWizardEnabled = "${setupWizardEnabled}",
			syntaxCheckingEnabled = "${syntaxCheckingEnabled}"
		);

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		User.viewLoggedInPG(userFirstName = "Test");
	}

	@summary = "Configure JDBC to ${databaseType} for Liferay with the Setup Wizard"
	macro configurePG {
		SetupWizard.configureSampleDataPG(addSampleData = "${addSampleData}");

		if (isSet(portalName)) {
			SetupWizard.configurePortalNamePG(portalName = "${portalName}");
		}
		else {
			SetupWizard.viewDefaultPortalNamePG();
		}

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "${administratorEmail}",
			administratorFirstName = "${administratorFirstName}",
			administratorLastName = "${administratorLastName}"
		);

		SetupWizard.configureDatabasePG(
			databaseName = "${databaseName}",
			databasePassword = "${databasePassword}",
			databaseType = "${databaseType}",
			databaseUserName = "${databaseUserName}",
			jdbcDriverClassName = "${jdbcDriverClassName}",
			jdbcURL = "${jdbcURL}"
		);

		SetupWizard.finishConfigurationPG();

		SetupWizard.viewConfigurationSavedPG();

		Portlet.shutdownServer();

		Portlet.startServer(base_branch = "${base_branch}", deleteLiferayHome = "false");

		SetupWizard.viewConfiguredDatabaseInConsole(databaseType = "${databaseType}");

		if (isSet(virtualHostsURL)) {
			Navigator.openSpecificURL(url = "${virtualHostsURL}");
		}
		else {
			Navigator.openURL();
		}

		User.acceptEndUserLicenseAgreement();

		User.resetPassword(
			resetPassword = "${resetPassword}",
			setupWizardEnabled = "${setupWizardEnabled}",
			syntaxCheckingEnabled = "${syntaxCheckingEnabled}"
		);

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		User.viewLoggedInPG(userFirstName = "${administratorFirstName}");
	}

	macro configurePortalNamePG {
		Type(locator1 = "TextInput#PORTAL_NAME", value1 = "${portalName}");
	}

	macro configureSampleDataPG {
		if ("${addSampleData}" == "false") {
			Uncheck(locator1 = "Checkbox#ADD_SAMPLE_DATA");
		}
	}

	macro finishConfigurationPG {
		AssertClick(
			locator1 = "Button#FINISH_CONFIGURATION",
			value1 = "Finish Configuration"
		);
	}

	macro viewConfigurationSavedPG {
		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertTextEquals.assertPartialText(
			locator1 = "SetupWizard#CONFIGURATION_SAVE_MESSAGE",
			value1 = "The configuration was saved in"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "SetupWizard#CONFIGURATION_SAVE_LOCATION",
			value1 = "portal-setup-wizard.properties"
		);

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Changes will take effect once the portal is restarted. Please restart the portal now."
		);
	}

	macro viewConfiguredDatabaseInConsole {
		if ("${databaseType}" == "DB2") {
			AssertConsoleTextPresent(
				value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.DB2Dialect for DB2"
			);
		}
		else if ("${databaseType}" == "HSQL") {
			AssertConsoleTextPresent(
				value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.HSQLDialect for HSQL Database Engine"
			);
		}
		else if ("${databaseType}" == "MariaDB") {
			AssertConsoleTextPresent(
				value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.MariaDBDialect for MySQL"
			);
		}
		else if ("${databaseType}" == "MySQL") {
			AssertConsoleTextPresent(
				value1 = "Using dialect org.hibernate.dialect.MySQLDialect for MySQL"
			);
		}
		else if ("${databaseType}" == "Oracle") {
			AssertConsoleTextPresent(
				value1 = "Using dialect org.hibernate.dialect.Oracle10gDialect for Oracle"
			);
		}
		else if ("${databaseType}" == "PostgreSQL") {
			AssertConsoleTextPresent(
				value1 = "Using dialect org.hibernate.dialect.PostgreSQLDialect for PostgreSQL"
			);
		}
		else if ("${databaseType}" == "Sybase") {
			AssertConsoleTextPresent(
				value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.SybaseASE157Dialect for Adaptive Server Enterprise"
			);
		}
	}

	macro viewDefaultAdministratorUserPG {
		AssertSelectedLabel(
			locator1 = "Select#DEFAULT_LANGUAGE",
			value1 = "English (United States)"
		);

		AssertTextEquals.assertValue(locator1 = "TextInput#FIRST_NAME", value1 = "Test");

		AssertTextEquals.assertValue(locator1 = "TextInput#LAST_NAME", value1 = "Test");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#EMAIL",
			value1 = "test@liferay.com"
		);
	}

	macro viewDefaultDatabasePG {
		if (IsElementPresent(locator1 = "SetupWizard#DATABASE_DEFAULT_LABEL")) {
			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_DEFAULT_LABEL",
				value1 = "Default Database (Hypersonic)"
			);

			AssertTextEquals.assertPartialText(
				locator1 = "SetupWizard#DATABASE_DEFAULT_DESCRIPTION",
				value1 = "This database is useful for development and demo'ing purposes, but it is not recommended for production use."
			);

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_LINK",
				value1 = "(Change)"
			);
		}
		else {
			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CONFIGURED_JDBC_DRIVER_CLASS_NAME_LABEL",
				value1 = "Configured Database"
			);

			AssertClick(locator1 = "SetupWizard#DATABASE_CHANGE_LINK", value1 = "(Change)");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_DATABASE_TYPE_LABEL",
				value1 = "Database Type"
			);

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_URL_LABEL",
				value1 = "JDBC URL asterisk Required"
			);

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_DRIVER_CLASS_NAME_LABEL",
				value1 = "JDBC Driver Class Name asterisk Required"
			);

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_USER_NAME_LABEL",
				value1 = "User Name"
			);

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_PASSWORD_LABEL",
				value1 = "Password"
			);
		}
	}

	macro viewDefaultPortalNamePG {
		var testRunEnvironment = PropsUtil.get("test.run.environment");

		if ("${testRunEnvironment}" == "EE") {
			AssertTextEquals.assertValue(
				locator1 = "TextInput#PORTAL_NAME",
				value1 = "Liferay DXP"
			);
		}
		else {
			AssertTextEquals.assertValue(
				locator1 = "TextInput#PORTAL_NAME",
				value1 = "Liferay"
			);
		}
	}
}