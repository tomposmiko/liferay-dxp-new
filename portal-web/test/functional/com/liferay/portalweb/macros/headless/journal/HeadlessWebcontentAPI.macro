definition {

	@summary = "Helper function to add a web content article via Headless"
	macro _addWebContent {
		Variables.assertDefined(parameterList = "${content},${title}");

		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(userEmailAddress))) {
			var userEmailAddress = "test@liferay.com";
		}

		if (!(isSet(userPassword))) {
			var userPassword = "test";
		}

		if (!(isSet(description))) {
			var description = "";
		}

		if (isSet(assetTagNames)) {
			var list = ListUtil.newList();

			for (var assetTagName : list "${assetTagNames}") {
				var assetTagName = '''"${assetTagName}"''';

				ListUtil.add("${list}", "${assetTagName}");
			}

			var assetTagNames = ListUtil.toString("${list}");
		}
		else {
			var assetTagNames = "";
		}

		if (!(isSet(assetCategoryIds))) {
			var assetCategoryIds = "0";
		}

		if (!(isSet(viewableBy))) {
			var viewableBy = "Anyone";
		}

		if (isSet(folderId)) {
			var api = "structured-content-folders/${folderId}/structured-contents";
		}
		else {
			var api = "sites/${groupId}/structured-contents";
		}

		var os = OSDetector.isWindows();

		if ("${os}" == "true") {
			var content = StringUtil.replace("${content}", ">", "^>");

			var content = StringUtil.replace("${content}", "<", "^<");
		}

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/${api} \
				-u ${userEmailAddress}:${userPassword} \
				-H accept: application/json \
				-H Content-Type: application/json \
				-d {
					"contentFields": [
						{
							"contentFieldValue": {
								"data": "${content}"
							},
							"name": "content"
						}
					],
					"contentStructureId": ${structureId},
					"description": "${description}",
					"keywords": [${assetTagNames}],
					"taxonomyCategoryIds": [${assetCategoryIds}],
					"title": "${title}",
					"viewableBy": "${viewableBy}"
				}
		''';

		var articleId = JSONCurlUtil.post("${curl}", "$.id");

		if ("${articleId}" == "") {
			fail("FAIL. Cannot add journal article.");
		}

		return "${articleId}";
	}

	macro _createStructuredContent {
		Variables.assertDefined(parameterList = "${data},${label},${name},${ddmStructureId},${title},${priority}");

		var portalURL = JSONCompany.getPortalURL();
		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/sites/${siteId}/structured-contents/ \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{
    "contentFields": [{
        "contentFieldValue": {
            "data": "${data}"
        },
        "dataType": "string",
        "label": "${label}",
        "name": "${name}",
        "nestedContentFields": [],
        "repeatable": false
    }],
    "contentStructureId": "${ddmStructureId}",
    "title": "${title}",
	"priority": "${priority}"
	}
		''';

		var curl = JSONCurlUtil.post("${curl}");

		return "${curl}";
	}

	macro _createStructuredContentDraft {
		Variables.assertDefined(parameterList = "${data},${label},${name},${ddmStructureId},${priority},${title}");

		var portalURL = JSONCompany.getPortalURL();
		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		var curl = '''
			${portalURL}/o/headless-admin-content/v1.0/sites/${siteId}/structured-contents/draft \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{
    "contentFields": [{
        "contentFieldValue": {
            "data": "${data}"
        },
        "dataType": "string",
        "label": "${label}",
        "name": "${name}",
        "nestedContentFields": [],
        "repeatable": false
    }],
    "contentStructureId": "${ddmStructureId}",
	"priority": "${priority}",
    "title": "${title}"
	}
		''';

		var curl = JSONCurlUtil.post("${curl}");

		return "${curl}";
	}

	macro _editStructuredContent {
		Variables.assertDefined(parameterList = "${data},${label},${name},${ddmStructureId},${title},${priority},${structuredContentId}");

		var portalURL = JSONCompany.getPortalURL();
		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");
		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/structured-contents/${structuredContentId} \
			-u test@liferay.com:test \
			-H Content-Type: application/json \
			-H accept: application/json \
			-d
					{
    "contentFields": [{
        "contentFieldValue": {
            "data": "${data}"
        },
        "dataType": "string",
        "label": "${label}",
        "name": "${name}",
        "nestedContentFields": [],
        "repeatable": false
    }],
    "contentStructureId": "${ddmStructureId}",
    "title": "${title}",
	"priority": "${priority}"
	}
		''';

		var curl = JSONCurlUtil.put("${curl}");

		return "${curl}";
	}

	macro _filterStructuredContent {
		Variables.assertDefined(parameterList = "${filtervalue}");

		var portalURL = JSONCompany.getPortalURL();
		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/sites/${siteId}/structured-contents?filter=${filtervalue} \
			-u test@liferay.com:test \
			-H accept: application/json
		''';

		var curl = JSONCurlUtil.get("${curl}");

		return "${curl}";
	}

	macro _sortStructureContent {
		Variables.assertDefined(parameterList = "${sortvalue}");

		var portalURL = JSONCompany.getPortalURL();
		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/sites/${siteId}/structured-contents?sort=${sortvalue} \
			-u test@liferay.com:test \
			-H accept: application/json
		''';

		var curl = JSONCurlUtil.get("${curl}");

		return "${curl}";
	}

	macro _versionStructureContent {
		Variables.assertDefined(parameterList = "${versionvalue},${responseToParse}");

		var structuredContentId = JSONUtil.getWithJSONPath("${responseToParse}", "$.['id']");
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/headless-admin-content/v1.0/structured-contents/${structuredContentId}/by-version/${versionvalue} \
			-u test@liferay.com:test \
			-H accept: application/json
		''';

		var curl = JSONCurlUtil.get("${curl}");

		return "${curl}";
	}

	macro assertPriorityFieldWithCorrectValue {
		var actualPriorityValue = JSONUtil.getWithJSONPath("${responseToParse}", "$..priority");

		TestUtils.assertEquals(
			actual = "${actualPriorityValue}",
			expected = "${expectedPriorityValue}");
	}

	macro assertProperNumberOfItems {
		var actualTotalElement = JSONUtil.getWithJSONPath("${responseToParse}", "$..['totalCount']");

		TestUtils.assertEquals(
			actual = "${actualTotalElement}",
			expected = "${expectedTotalElement}");
	}

	macro assertStructuredContentIdIsFilteredWithCorrectValue {
		var editStructuredContentId = JSONUtil.getWithJSONPath("${editStructuredContentId}", "$.['id']");
		var filterStructuredContentId = JSONUtil.getWithJSONPath("${responseToParse}", "$..['items'][0].id");

		TestUtils.assertEquals(
			actual = "${filterStructuredContentId}",
			expected = "${editStructuredContentId}");
	}

	macro createStructuredContent {
		if (!(isSet(priority))) {
			var priority = "";
		}

		var response = HeadlessWebcontentAPI._createStructuredContent(
			data = "${data}",
			ddmStructureId = "${ddmStructureId}",
			label = "${label}",
			name = "${name}",
			priority = "${priority}",
			title = "${title}");

		return "${response}";
	}

	macro createStructuredContentDraft {
		if (!(isSet(priority))) {
			var priority = "";
		}

		var response = HeadlessWebcontentAPI._createStructuredContentDraft(
			data = "${data}",
			ddmStructureId = "${ddmStructureId}",
			label = "${label}",
			name = "${name}",
			priority = "${priority}",
			title = "${title}");

		return "${response}";
	}

	macro editStructuredContent {
		Variables.assertDefined(parameterList = "${responseToParse},${data},${ddmStructureId},${label},${name},${priority},${title}");

		var structuredContentId = JSONUtil.getWithJSONPath("${responseToParse}", "$.['id']");

		if (!(isSet(priority))) {
			var priority = "";
		}

		var response = HeadlessWebcontentAPI._editStructuredContent(
			data = "${data}",
			ddmStructureId = "${ddmStructureId}",
			label = "${label}",
			name = "${name}",
			priority = "${priority}",
			structuredContentId = "${structuredContentId}",
			title = "${title}");

		return "${response}";
	}

	macro filterStructuredContent {
		var response = HeadlessWebcontentAPI._filterStructuredContent(filtervalue = "${filtervalue}");

		return "${response}";
	}

	macro sortStructureContent {
		var response = HeadlessWebcontentAPI._sortStructureContent(sortvalue = "${sortvalue}");

		return "${response}";
	}

	macro versionStructureContent {
		var response = HeadlessWebcontentAPI._versionStructureContent(
			responseToParse = "${responseToParse}",
			versionvalue = "${versionvalue}");

		return "${response}";
	}

}