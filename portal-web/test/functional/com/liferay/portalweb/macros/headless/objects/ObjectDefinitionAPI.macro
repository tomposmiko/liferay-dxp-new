definition {

	macro _assertEmployeeFirstnameCorrect {
		var actualEmployeeFirstname = ObjectDefinitionAPI._getObjectFirstnameById(
			objectId = "${objectId}",
			responseToParse = "${responseToParse}");

		TestUtils.assertEquals(
			actual = "${actualEmployeeFirstname}",
			expected = "${expectedEmployeeFirstname}");
	}

	macro _assertManagerFirstnameCorrect {
		var actualManagerFirstname = ObjectDefinitionAPI._getNestedObjectFirstnameByObjectId(
			nestedField = "${nestedField}",
			objectId = "${objectId}",
			relationshipName = "${relationshipName}",
			responseToParse = "${responseToParse}");

		TestUtils.assertEquals(
			actual = "${actualManagerFirstname}",
			expected = "${expectedManagerFirstname}");
	}

	macro _assertManagerIdCorrect {
		var actualManagerId = ObjectDefinitionAPI._getNestedObjectIdByObjectId(
			nestedField = "${nestedField}",
			objectId = "${objectId}",
			relationshipName = "${relationshipName}",
			responseToParse = "${responseToParse}");

		TestUtils.assertEquals(
			actual = "${actualManagerId}",
			expected = "${expectedManagerId}");
	}

	macro _createEmployee {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/employees \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{	                 
	"firstname": "${firstname}",
	"r_supervisor_c_managerId": "${managerId}"
	}
		''';

		var employeeId = JSONCurlUtil.post("${curl}", "$.id");

		return "${employeeId}";
	}

	macro _createManager {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/managers \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{	                 
	"firstname": "${firstname}"
	}
		''';

		var managerId = JSONCurlUtil.post("${curl}", "$.id");

		return "${managerId}";
	}

	macro _createObjectDefinition {
		Variables.assertDefined(parameterList = "${en_US_label},${name},${requiredStringFieldName},${en_US_plural_label}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{	                 
	"active": true,
	"label": {
		"en_US": "${en_US_label}"
	},
	"name": "${name}",
	"objectFields": [{
		"DBType": "String",
		"businessType": "Text",
		"indexed": true,
		"indexedAsKeyword": true,
		"label": {
			"en_US": "${requiredStringFieldName}"
		},
		"name": "${requiredStringFieldName}",
		"required": true,
		"dbtype": "String"
	}],
	"pluralLabel": {
		"en_US": "${en_US_plural_label}"
	},
	"portlet": true,
	"scope": "company"
					}
		''';

		var objectDefinitionId = JSONCurlUtil.post("${curl}", "$.id");

		return "${objectDefinitionId}";
	}

	macro _createObjectEntryWithName {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${name}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase("${en_US_plural_label}");
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase} \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{	                 
	"name": "${name}"
	}
		''';

		var objectId = JSONCurlUtil.post("${curl}", "$.id");

		return "${objectId}";
	}

	macro _createRelationship {
		Variables.assertDefined(parameterList = "${deletionType},${en_US_label},${name},${objectDefinitionId1},${objectDefinitionId2},${type}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId1}/object-relationships \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{	                 
	"deletionType": "${deletionType}",
  	"label": {
    	"en_US": "${en_US_label}"
    },
  	"name": "${name}",
  	"objectDefinitionId2": "${objectDefinitionId2}",
  	"type": "${type}"
					}
		''';

		var relationshipId = JSONCurlUtil.post("${curl}", "$.id");

		return "${relationshipId}";
	}

	macro _deleteEmployee {
		Variables.assertDefined(parameterList = "${employeeId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/employees/${employeeId} \
			-u test@liferay.com:test \
			-H accept: application/json
		''';

		var response = JSONCurlUtil.delete("${curl}");

		return "${response}";
	}

	macro _deleteObjectEntry {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectEntryId}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase("${en_US_plural_label}");
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectEntryId} \
			-u test@liferay.com:test \
			-H accept: application/json
		''';

		var response = JSONCurlUtil.delete("${curl}");

		return "${response}";
	}

	macro _getEmployeeFirstnameById {
		Variables.assertDefined(parameterList = "${employeeId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/c/employees/${employeeId} \
			-u test@liferay.com:test
		''';

		var employeeFirstname = JSONCurlUtil.get("${curl}", "$.firstname");

		return "${employeeFirstname}";
	}

	macro _getManagerFirstnameById {
		Variables.assertDefined(parameterList = "${managerId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/c/managers/${managerId} \
			-u test@liferay.com:test
		''';

		var managerFirstname = JSONCurlUtil.get("${curl}", "$.firstname");

		return "${managerFirstname}";
	}

	macro _getNestedObjectFirstnameByObjectId {
		var nestedObjectFirstname = JSONUtil.getWithJSONPath("${responseToParse}", "$.items[?(@.id==${objectId})].r_${relationshipName}_c_${nestedField}.firstname");

		return "${nestedObjectFirstname}";
	}

	macro _getNestedObjectIdByObjectId {
		var nestedObjectId = JSONUtil.getWithJSONPath("${responseToParse}", "$.items[?(@.id==${objectId})].r_${relationshipName}_c_${nestedField}.id");

		return "${nestedObjectId}";
	}

	macro _getObjectDefinitionStatusById {
		Variables.assertDefined(parameterList = "${objectDefinitionId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId} \
			-u test@liferay.com:test
		''';

		var objectDefinitionStatus = JSONCurlUtil.get("${curl}", "$.active");

		return "${objectDefinitionStatus}";
	}

	macro _getObjectEntryNameById {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectId}");

		var en_US_plural_label_lowercase = StringUtil.lowerCase("${en_US_plural_label}");
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectId} \
			-u test@liferay.com:test
		''';

		var objectName = JSONCurlUtil.get("${curl}", "$.name");

		return "${objectName}";
	}

	macro _getObjectFirstnameById {
		var objectFirstname = JSONUtil.getWithJSONPath("${responseToParse}", "$.items[?(@.id==${objectId})].firstname");

		return "${objectFirstname}";
	}

	macro _getObjectsWithAggregationTerms {
		Variables.assertDefined(parameterList = "${aggregationTermsValue}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/${objects}?aggregationTerms=${aggregationTermsValue} \
			-u test@liferay.com:test
		''';

		var json = JSONCurlUtil.get("${curl}");

		return "${json}";
	}

	macro _getObjectsWithNestedField {
		Variables.assertDefined(parameterList = "${nestedField}, ${objects}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/c/${objects}?nestedFields=${nestedField} \
			-u test@liferay.com:test
		''';

		var json = JSONCurlUtil.get("${curl}");

		return "${json}";
	}

	macro _getRelationshipNameById {
		Variables.assertDefined(parameterList = "${relationshipId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/object-admin/v1.0/object-relationships/${relationshipId} \
			-u test@liferay.com:test
		''';

		var relationshipName = JSONCurlUtil.get("${curl}", "$.name");

		return "${relationshipName}";
	}

	macro _publishObjectDefinition {
		Variables.assertDefined(parameterList = "${objectDefinitionId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
        	${portalURL}/o/object-admin/v1.0/object-definitions/${objectDefinitionId}/publish \
			-u test@liferay.com:test
		''';

		var json = JSONCurlUtil.post("${curl}");

		return "${json}";
	}

	macro _relateObjectEntries {
		Variables.assertDefined(parameterList = "${en_US_plural_label},${objectEntry1},${objectEntry2},${relationshipName}");

		var portalURL = JSONCompany.getPortalURL();
		var en_US_plural_label_lowercase = StringUtil.lowerCase("${en_US_plural_label}");

		var curl = '''
        	${portalURL}/o/c/${en_US_plural_label_lowercase}/${objectEntry1}/${relationshipName}/${objectEntry2} \
			-u test@liferay.com:test
		''';

		var response = JSONCurlUtil.put("${curl}");

		return "${response}";
	}

	macro _updateEmployee {
		Variables.assertDefined(parameterList = "${employeeId},${firstname},${managerId}");

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/c/employees/${employeeId} \
			-u test@liferay.com:test \
			-H Content-Type: application/json

			-d
					{	                 
	"firstname": "${firstname}",
	"r_supervisor_c_managerId": "${managerId}"
					}
	''';

		var response = JSONCurlUtil.put("${curl}");

		return "${response}";
	}

	macro assertEmployeeHasNestedFieldManager {
		ObjectDefinitionAPI._assertEmployeeFirstnameCorrect(
			expectedEmployeeFirstname = "${expectedEmployeeFirstname}",
			objectId = "${objectId}",
			responseToParse = "${responseToParse}");

		ObjectDefinitionAPI._assertManagerFirstnameCorrect(
			expectedManagerFirstname = "${expectedManagerFirstname}",
			nestedField = "${nestedField}",
			objectId = "${objectId}",
			relationshipName = "${relationshipName}",
			responseToParse = "${responseToParse}");

		ObjectDefinitionAPI._assertManagerIdCorrect(
			expectedManagerFirstname = "${expectedManagerFirstname}",
			expectedManagerId = "${expectedManagerId}",
			nestedField = "${nestedField}",
			objectId = "${objectId}",
			relationshipName = "${relationshipName}",
			responseToParse = "${responseToParse}");
	}

	macro assertInFacetsWithCorrectValue {
		var actualValue = JSONUtil.getWithJSONPath("${responseToParse}", "$..facetValues[?(@.term=='${managerId}' && @.numberOfOccurrences==${expectedValue})].numberOfOccurrences");

		TestUtils.assertEquals(
			actual = "${actualValue}",
			expected = "${expectedValue}");
	}

	macro assertNestedFieldDetail {
		Variables.assertDefined(parameterList = "${getObjectsWithNestedFieldReponse},${nestedField},${objectField},${objectEntryId}, ${expectedValue}");

		var actualValue = JSONUtil.getWithJSONPath("${getObjectsWithNestedFieldReponse}", "$.items[?(@.id==${objectEntryId})].${nestedField}[*].${objectField}");

		TestUtils.assertEquals(
			actual = "${actualValue}",
			expected = "${expectedValue}");
	}

	macro assertResponseIncludeCorrectDetailsOfNotDeletedObject {
		var actual = JSONUtil.getWithJSONPath("${responseToParse}", "$..universitiesSubjects[?(@.id==${objectEntryId})].name");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "${expectedValue}");
	}

	macro assertResponseIncludesDetailsOfNotDeletedEmployee {
		var actual = JSONUtil.getWithJSONPath("${responseToParse}", "$..items[?(@.id==${employeeId2} && @.r_supervisor_c_managerId==${managerId2})].r_supervisor_c_managerId");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "${managerId2}");
	}

	macro assertResponseNotIncludeDetailsOfDeletedObject {
		var actual = JSONUtil.getWithJSONPath("${responseToParse}", "$..universitiesSubjects");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "${expectedValue}");
	}

	macro assertResponseNotIncludesDetailsOfDeletedEmployee {
		var actual = JSONUtil.getWithJSONPath("${responseToParse}", "$..items[?(@.id==${employeeId1} && @.r_supervisor_c_managerId==${managerId1})].r_supervisor_c_managerId");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "");
	}

	macro assertResponseOnlyIncludesDetailsOfNotDeletedEmployee {
		ObjectDefinitionAPI.assertResponseNotIncludesDetailsOfDeletedEmployee(
			employeeId1 = "${employeeId1}",
			managerId1 = "${managerId1}",
			responseToParse = "${responseToParse}");

		ObjectDefinitionAPI.assertResponseIncludesDetailsOfNotDeletedEmployee(
			employeeId2 = "${employeeId2}",
			managerId2 = "${managerId2}",
			responseToParse = "${responseToParse}");
	}

	macro createAndPublishObjectDefinition {
		var objectDefinitionId = ObjectDefinitionAPI._createObjectDefinition(
			en_US_label = "${en_US_label}",
			en_US_plural_label = "${en_US_plural_label}",
			name = "${name}",
			requiredStringFieldName = "${requiredStringFieldName}");

		ObjectDefinitionAPI._publishObjectDefinition(objectDefinitionId = "${objectDefinitionId}");

		var objectDefinitionStatus = ObjectDefinitionAPI._getObjectDefinitionStatusById(objectDefinitionId = "${objectDefinitionId}");

		TestUtils.assertEquals(
			actual = "${objectDefinitionStatus}",
			expected = "true");

		return "${objectDefinitionId}";
	}

	macro createEmployee {
		var employeeId = ObjectDefinitionAPI._createEmployee(
			firstname = "${employeeFirstname}",
			managerId = "${managerId}");

		var firstname = ObjectDefinitionAPI._getEmployeeFirstnameById(employeeId = "${employeeId}");

		TestUtils.assertEquals(
			actual = "${firstname}",
			expected = "${employeeFirstname}");

		return "${employeeId}";
	}

	macro createManager {
		var managerId = ObjectDefinitionAPI._createManager(firstname = "${managerFirstname}");

		var firstname = ObjectDefinitionAPI._getManagerFirstnameById(managerId = "${managerId}");

		TestUtils.assertEquals(
			actual = "${firstname}",
			expected = "${managerFirstname}");

		return "${managerId}";
	}

	macro createObjectEntryWithName {
		var objectId = ObjectDefinitionAPI._createObjectEntryWithName(
			en_US_plural_label = "${en_US_plural_label}",
			name = "${name}");

		var actualName = ObjectDefinitionAPI._getObjectEntryNameById(
			en_US_plural_label = "${en_US_plural_label}",
			objectId = "${objectId}");

		TestUtils.assertEquals(
			actual = "${actualName}",
			expected = "${name}");

		return "${objectId}";
	}

	macro createRelationship {
		var relationshipId = ObjectDefinitionAPI._createRelationship(
			deletionType = "${deletionType}",
			en_US_label = "${en_US_label}",
			name = "${name}",
			objectDefinitionId1 = "${objectDefinitionId1}",
			objectDefinitionId2 = "${objectDefinitionId2}",
			type = "${type}");

		var relationshipName = ObjectDefinitionAPI._getRelationshipNameById(relationshipId = "${relationshipId}");

		TestUtils.assertEquals(
			actual = "${relationshipName}",
			expected = "${name}");

		return "${relationshipName}";
	}

	macro deleteEmployee {
		ObjectDefinitionAPI._deleteEmployee(employeeId = "${employeeId}");
	}

	macro deleteObjectEntry {
		ObjectDefinitionAPI._deleteObjectEntry(
			en_US_plural_label = "${en_US_plural_label}",
			objectEntryId = "${objectEntryId}");
	}

	macro getObjectsWithAggregationTerms {
		var getObjectsWithAggregationTermsJSON = ObjectDefinitionAPI._getObjectsWithAggregationTerms(
			aggregationTermsValue = "${aggregationTermsValue}",
			objects = "${objects}");

		return "${getObjectsWithAggregationTermsJSON}";
	}

	macro getObjectsWithNestedField {
		var getObjectsWithNestedFieldJSON = ObjectDefinitionAPI._getObjectsWithNestedField(
			nestedField = "${nestedField}",
			objects = "${objects}");

		return "${getObjectsWithNestedFieldJSON}";
	}

	macro relateObjectEntries {
		var response = ObjectDefinitionAPI._relateObjectEntries(
			en_US_plural_label = "${en_US_plural_label}",
			objectEntry1 = "${objectEntry1}",
			objectEntry2 = "${objectEntry2}",
			relationshipName = "${relationshipName}");

		return "${response}";
	}

	macro updateEmployee {
		ObjectDefinitionAPI._updateEmployee(
			employeeId = "${employeeId}",
			firstname = "${employeeFirstname}",
			managerId = "${managerId}");

		var firstname = ObjectDefinitionAPI._getEmployeeFirstnameById(employeeId = "${employeeId}");

		TestUtils.assertEquals(
			actual = "${firstname}",
			expected = "${employeeFirstname}");

		return "${employeeId}";
	}

}