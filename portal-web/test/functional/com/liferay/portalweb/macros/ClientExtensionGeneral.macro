definition {

	macro _deleteRemoteAppAPI {
		var currentURL = Navigator.getCurrentURL();

		var findWhereIdBegins = StringUtil.extractLast(${currentURL}, "externalReferenceCode=");

		var externalReferenceCodeValue = StringUtil.extractFirst(${findWhereIdBegins}, "&_com_liferay_client_extension_web_internal_portlet_ClientExtensionAdminPortlet_redirect");

		JSONClientExtension.deleteIFrameRemoteAppEntry(externalReferenceCode = ${externalReferenceCodeValue});
	}

	macro addApp {
		ClientExtensionEntry.addEntry(
			entryHTMLElementName = ${entryHTMLElementName},
			entryName = ${entryName},
			entryURL = ${entryURL},
			mainURL = ${mainURL});

		PortletEntry.publish();
	}

	macro addCustomElement {
		ClientExtensionGeneral.addType(type = "Custom Element");

		ClientExtensionEntry.addCustomElement(
			entryHtmlName = ${entryHtmlName},
			entryName = ${entryName},
			entryURL = ${entryURL});

		PortletEntry.publish();
	}

	macro addCustomElementAllFields {
		ClientExtensionGeneral.addType(type = "Custom Element");

		ClientExtensionEntry.addCustomElementAllFields(
			entryCssurl = ${entryCssurl},
			entryHtmlName = ${entryHtmlName},
			entryName = ${entryName},
			entryProperties = ${entryProperties},
			entryURL = ${entryURL});

		Click(locator1 = "ClientExtensionEntry#USE_ES_MODULES");

		Click(locator1 = "ClientExtensionEntry#REMOTE_APPS_INSTANCEABLE");

		PortletEntry.publish();
	}

	macro addCustomElementMultipleURLs {
		ClientExtensionGeneral.addType(type = "Custom Element");

		ClientExtensionEntry.addCustomElementMultipleURLs(
			entryCssurl1 = "https://liferay.github.io/liferay-frontend-projects/index1.css",
			entryCssurl2 = "https://liferay.github.io/liferay-frontend-projects/index2.css",
			entryHtmlName = "vanilla-counter",
			entryName = "Vanilla Counter",
			entryUrl1 = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index1.js",
			entryUrl2 = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index2.js");

		PortletEntry.publish();
	}

	macro addEntryWithPortletCategory {
		ClientExtensionGeneral.addType(type = "IFrame");

		ClientExtensionEntry.addEntry(
			entryName = "Test Remote App",
			entryURL = "http://www.liferay.com");

		ClientExtensionEntry.addPortletCategory(categoryName = "Collaboration");

		PortletEntry.publish();
	}

	macro addThemeSvgSpritemap {
		ClientExtensionGeneral.addType(type = "Add Theme SVG Spritemap");

		ClientExtensionGeneral.addThemeSvgSpritemapElement(
			entryName = ${entryName},
			entryURL = ${entryURL});

		if (${entryName} == "external_url_theme") {
			Check.checkToggleSwitch(locator1 = "ClientExtension#ENABLE_SVG_CROSS_DOMAIN_SUPPORT");
		}

		PortletEntry.publish();
	}

	macro addThemeSvgSpritemapElement {
		Type(
			key_text = "Name",
			locator1 = "TextInput#ANY",
			value1 = ${entryName});

		Type(
			key_id = "ClientExtensionAdminPortlet_url",
			locator1 = "ClientExtensionEntry#URL",
			value1 = ${entryURL});
	}

	macro addType {
		LexiconEntry.gotoAdd();

		Click(
			key_itemName = ${type},
			locator1 = "FormFields#FIELD_DROPDOWN_ITEM");
	}

	macro assertContentField {
		AssertTextEquals(
			key_text = ${entryField},
			locator1 = "ClientExtension#REMOTE_APPS_FIELDS",
			value1 = ${entryInformation});
	}

	macro assertCustomElementFields {
		AssertTextEquals(
			custom_entryName = ${entryName},
			key_text = "Name",
			locator1 = "TextInput#ANY",
			value1 = ${entryName});

		AssertTextEquals(
			custom_entryHtmlName = ${entryHtmlName},
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY",
			value1 = ${entryHtmlName});

		AssertTextEquals(
			custom_entryURL = ${entryURL},
			key_id = "ClientExtensionAdminPortlet_url",
			locator1 = "ClientExtensionEntry#URL",
			value1 = ${entryURL});

		AssertTextEquals(
			custom_entryCssurl = ${entryCssurl},
			key_text = "CSS URL",
			locator1 = "TextInput#ANY",
			value1 = ${entryCssurl});

		AssertTextEquals(
			custom_entryProperties = ${entryProperties},
			key_text = "Properties",
			locator1 = "ClientExtensionEntry#REMOTE_APPS_PROPERTIES",
			value1 = ${entryProperties});
	}

	macro assertCustomElementMultipleURLFields {
		AssertTextEquals(
			custom_entryName = "Vanilla Counter",
			key_text = "Name",
			locator1 = "TextInput#ANY",
			value1 = "Vanilla Counter");

		AssertTextEquals(
			custom_entryHtmlName = "vanilla-counter",
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY",
			value1 = "vanilla-counter");

		AssertTextEquals(
			key_id = "ClientExtensionAdminPortlet_url",
			key_index = 1,
			locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
			value1 = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index1.js");

		AssertTextEquals(
			key_id = "ClientExtensionAdminPortlet_url",
			key_index = 2,
			locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
			value1 = "https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index2.js");

		AssertTextEquals(
			key_id = "cssURLs",
			key_index = 1,
			locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
			value1 = "https://liferay.github.io/liferay-frontend-projects/index1.css");

		AssertTextEquals(
			key_id = "cssURLs",
			key_index = 2,
			locator1 = "ClientExtensionEntry#URL_ROW_INDEX",
			value1 = "https://liferay.github.io/liferay-frontend-projects/index2.css");
	}

	macro assertFieldDisable {
		for (var entryField : list ${entryFieldList}) {
			AssertNotEditable(
				key_text = ${entryField},
				locator1 = "ClientExtension#REMOTE_APPS_FIELDS");
		}
	}

	macro assertMultipleFields {
		ClientExtensionGeneral.assertContentField(
			entryField = "Name",
			entryInformation = ${entryName});

		ClientExtensionGeneral.assertContentField(
			entryField = "Source Code URL",
			entryInformation = ${entrySourceCodeURL});

		ClientExtensionGeneral.assertContentField(
			entryField = "Type",
			entryInformation = ${entryType});

		ClientExtensionGeneral.assertContentField(
			entryField = "Friendly URL Mapping",
			entryInformation = ${entryFriendlyURLMapping});

		ClientExtensionGeneral.assertContentField(
			entryField = "HTML Element Name",
			entryInformation = ${entryHTMLElementName});

		ClientExtensionGeneral.assertContentField(
			entryField = "Portlet Category Name",
			entryInformation = ${entryPortletCategoryName});

		ClientExtensionGeneral.assertContentField(
			entryField = "description",
			entryInformation = ${entrydescription});

		ClientExtensionGeneral.assertContentField(
			entryField = "CSS URLs",
			entryInformation = ${entryCSSURLs});

		ClientExtensionGeneral.assertContentField(
			entryField = "_URLs",
			entryInformation = ${entry_URLs});

		ClientExtensionGeneral.assertContentField(
			entryField = "properties",
			entryInformation = ${entryproperties});
	}

	macro assertTableEntryNameNotPresent {
		AssertElementNotPresent(
			key_tableEntryName = ${entryName},
			locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE",
			value1 = ${entryName});
	}

	macro changeSiteCurrentThemeSvgSpritemap {
		WaitForPageLoad();

		Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

		if (IsElementPresent(key_menuItem = "Configuration", locator1 = "MenuItem#DROPDOWN_MENU_ITEM")) {
			DropdownMenuItem.click(menuItem = "Configuration");
		}
		else {
			PagesAdmin.togglePrivacy(privacy = ${privacy});

			Click(
				key_pageName = ${privacy},
				locator1 = "Icon#COG_PAGE");
		}

		Navigator.gotoNavTab(navTab = "Design");

		Click(locator1 = "ClientExtension#THEME_SPRITEMAP_CLIENT_EXTENSION_INPUT");

		WaitForVisible(locator1 = "IFrame#IFRAME");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(
			key_text = ${entryName},
			locator1 = "ClientExtension#SELECT_THEME_SPRITEMAP_CLIENT_EXTENSION");

		SelectFrame(value1 = "relative=top");

		PortletEntry.save();
	}

	macro deleteRemoteApp {
		Click(locator1 = "ClientExtension#REMOTE_TABLE_ELLIPSIS");

		ClickNoError(locator1 = "ClientExtension#REMOTE_TABLE_DELETE");

		var remoteAppNameToBeRemoved = ${tableEntry};

		if (isSet(remoteAppNameToBeRemoved)) {
			AssertConfirm(value1 = "Are you sure you want to delete ${remoteAppNameToBeRemoved}? Client extension will be removed immediately. Sites using this client extension will be affected. This action can not be undone.");
		}
		else {
			AssertConfirm.assertPartialConfirmation(value1 = "Client extension will be removed immediately. Sites using this client extension will be affected. This action can not be undone.");
		}
	}

	macro deleteRemoteAppAPI {
		Click(locator1 = "xPath=(//div[@class='table-list-title']//a)");

		var remoteAppNameToBeRemoved = ClientExtensionGeneral.getRemoteAppEntryName();

		ClientExtensionGeneral._deleteRemoteAppAPI();

		ClientExtensionGeneral.goToRemoteAppsPortlet();

		ClientExtensionGeneral.assertTableEntryNameNotPresent(entryName = ${remoteAppNameToBeRemoved});
	}

	macro editCustomElement {
		Type(
			key_text = "Name",
			locator1 = "TextInput#ANY",
			value1 = ${entryName});

		Type(
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY",
			value1 = ${entryHtmlName});

		Type(
			key_text = "CSS URL",
			locator1 = "TextInput#ANY",
			value1 = ${entryCssurl});

		Type(
			key_text = "Properties",
			locator1 = "ClientExtensionEntry#REMOTE_APPS_PROPERTIES",
			value1 = ${entryProperties});

		PortletEntry.publish();
	}

	macro getExternalReferenceCodeValue {
		WaitForSPARefresh();

		ClientExtensionGeneral.goToRemoteAppsPortlet();

		Click(
			key_tableEntryName = "Vanilla Counter",
			locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE");

		var currentURL = Navigator.getCurrentURL();

		var findWhereIdBegins = StringUtil.extractLast(${currentURL}, "externalReferenceCode=");

		var externalReferenceCodeValue = StringUtil.extractFirst(${findWhereIdBegins}, "&_com_liferay_client_extension_web_internal_portlet_ClientExtensionAdminPortlet_redirect");

		var externalReferenceCodeValue = StringUtil.replace(${externalReferenceCodeValue}, "-", "_");

		return ${externalReferenceCodeValue};
	}

	macro getRemoteAppEntryId {
		var companyId = JSONCompany.getCompanyId();
		var externalReferenceCodeValue = ClientExtensionGeneral.getExternalReferenceCodeValue();

		return "${companyId}_${externalReferenceCodeValue}";
	}

	macro getRemoteAppEntryName {
		WaitForSPARefresh();

		var remoteAppEntryValue = selenium.getAttribute("//input[contains(@id , '_com_liferay_client_extension_web_internal_portlet_ClientExtensionAdminPortlet_name')]@value");

		return ${remoteAppEntryValue};
	}

	macro goToRemoteAppsPortlet {
		if (IsElementNotPresent(locator1 = "ClientExtension#REMOTE_APPS_HEADER")) {
			ApplicationsMenu.gotoPortlet(
				category = "Custom Apps",
				panel = "Applications",
				portlet = "Client Extensions");
		}
	}

	macro tearDown {
		ClientExtensionGeneral.goToRemoteAppsPortlet();

		while (IsElementNotPresent(locator1 = "ClientExtension#EMPTY_REMOTE_TABLE_MESSAGE")) {
			ClientExtensionGeneral.deleteRemoteApp();
		}

		ClientExtensionGeneral.viewEmptyRemoteTable();
	}

	macro viewEmptyRemoteTable {
		AssertElementPresent(locator1 = "ClientExtension#EMPTY_REMOTE_TABLE_MESSAGE");
	}

	macro viewTableEntries {
		AssertTextEquals(
			key_tableEntryName = ${entryName},
			locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE",
			value1 = ${entryName});

		AssertTextEquals(
			key_tableEntryType = ${entryType},
			locator1 = "ClientExtension#TABLE_ENTRY_TYPE_REMOTE_TABLE",
			value1 = ${entryType});
	}

	macro viewTableEntryName {
		AssertTextEquals(
			key_tableEntryName = ${entryName},
			locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE",
			value1 = ${entryName});
	}

	macro viewTableEntryType {
		AssertTextEquals(
			key_tableEntryType = ${entryType},
			locator1 = "ClientExtension#TABLE_ENTRY_TYPE_REMOTE_TABLE",
			value1 = ${entryType});
	}

	macro viewTableEntryURL {
		AssertTextEquals(
			key_tableEntryURL = ${entryURL},
			locator1 = "ClientExtension#TABLE_ENTRY_URL_REMOTE_TABLE",
			value1 = ${entryURL});
	}

}