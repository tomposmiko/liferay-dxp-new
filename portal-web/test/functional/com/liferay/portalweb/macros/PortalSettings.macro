definition {
	macro _saveDisplaySettings {
		PortletEntry.save();
	}

	macro addLDAPServer {
		PortalSettingsNavigator.gotoLDAP();

		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_LDAP_ADD_BUTTON",
			value1 = "Add"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_SERVER_NAME",
			value1 = "${LDAPServerName}"
		);

		Click(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_DEFAULT_VALUES_APACHE_DIRECTORY_SERVER_RADIO"
		);

		Button.clickSave();
	}

	macro configureAudienceTargetingAnalytics {
		Panel.expandPanel(panel = "Audience Targeting Analytics");

		if (isSet(enableAnalyticsList)) {
			for (var enableAnalytics : list "${enableAnalyticsList}") {
				Check.checkToggleSwitch(
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
					key_toggleSwitchLabel = "${enableAnalytics}"
				);
			}
		}

		if (isSet(disableAnalyticsList)) {
			for (var disableAnalytics : list "${disableAnalyticsList}") {
				Uncheck.uncheckToggleSwitch(
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH",
					key_toggleSwitchLabel = "${disableAnalytics}"
				);
			}
		}

		PortletEntry.save();
	}

	macro configureBlogsRatingType {
		Select(locator1 = "Select#BLOGS_RATING", value1 = "${ratingType}");

		AssertClickNoError(locator1 = "Button#SAVE", value1 = "Save");

		AssertConfirm(
			value1 = "Existing ratings data values will be adapted to match the new ratings type even though it may not be accurate. Do you want to continue?"
		);

		AssertSelectedLabel(locator1 = "Select#BLOGS_RATING", value1 = "${ratingType}");
	}

	macro configureContentSharingAcrossSitesCP {
		Panel.expandPanel(panel = "Content Sharing");

		if ("${enableAcrossSite}" == "true") {
			Check(locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX");

			PortletEntry.save();

			Panel.expandPanel(panel = "Content Sharing");

			AssertChecked(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX"
			);
		}
		else if ("${enableAcrossSite}" == "false") {
			Uncheck(locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX");

			PortletEntry.save();

			Panel.expandPanel(panel = "Content Sharing");

			AssertNotChecked(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX"
			);
		}
	}

	macro configureContentSharingSubSitesCP {
		Panel.expandPanel(panel = "Content Sharing");

		if ("${subSites}" == "enabledByDefault") {
			Select(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Enabled by Default"
			);

			PortletEntry.save();

			Panel.expandPanel(panel = "Content Sharing");

			AssertSelectedLabel(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Enabled by Default"
			);
		}
		else if ("${subSites}" == "disabledByDefault") {
			Select(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled by Default"
			);

			PortletEntry.save();

			Panel.expandPanel(panel = "Content Sharing");

			AssertSelectedLabel(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled by Default"
			);
		}
		else if ("${subSites}" == "disabled") {
			Select(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled"
			);

			PortletEntry.save();

			Panel.expandPanel(panel = "Content Sharing");

			AssertSelectedLabel(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled"
			);
		}
	}

	macro configureCurrentLanguagesCP {
		Navigator.gotoNavTab(navTab = "Miscellaneous");

		if (isSet(defaultPortalLanguage)) {
			var defaultPortalLanguage = "${defaultPortalLanguage}";

			Select(
				locator1 = "Select#DEFAULT_LANGUAGE_2",
				value1 = "${defaultPortalLanguage}"
			);
		}

		if (isSet(currentPortalLanguages)) {
			while (IsElementPresent(locator1 = "LanguageConfiguration#LANGUAGES_CURRENT_SELECT")) {
				AddSelection(
					locator1 = "LanguageConfiguration#LANGUAGES_CURRENT",
					value1 = "index=0"
				);

				Click(locator1 = "Button#MOVE_CURRENT_TO_AVAILABLE");
			}

			for (var currentPortalLanguage : list "${currentPortalLanguages}") {
				var currentPortalLanguage = "${currentPortalLanguage}";

				AddSelection(
					locator1 = "LanguageConfiguration#LANGUAGES_AVAILABLE",
					value1 = "${currentPortalLanguage}"
				);

				Click(locator1 = "Button#MOVE_AVAILABLE_TO_CURRENT");

				AssertTextEquals.assertPartialText(
					locator1 = "LanguageConfiguration#LANGUAGES_CURRENT",
					value1 = "${currentPortalLanguage}"
				);
			}
		}

		if ("${failExpected}" == "true") {
			Button.clickSave();

			Alert.viewErrorMessage(errorMessage = "${errorMessage}");
		}
		else {
			PortletEntry.save();
		}
	}

	macro configureGoogleApps {
		Panel.expandPanel(panel = "Google Apps");

		Type(locator1 = "TextInput#GOOGLE_APPS_API_KEY", value1 = "${googleAppsAPIKey}");

		Type(locator1 = "TextInput#GOOGLE_CLIENT_ID", value1 = "${googleClientID}");

		PortletEntry.save();
	}

	macro configureLDAPSetting {
		PortalSettingsNavigator.gotoLDAP();

		for (var enableSetting : list "${enableSettingList}") {
			var enableSetting = "PortalSettingsPortlet_${enableSetting}";

			FormFields.enableCheckbox(fieldName = "${enableSetting}");
		}

		PortletEntry.save();
	}

	macro configureOpenSSO {
		Check(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_ENABLED_CHECKBOX"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGIN_URL_FIELD",
			value1 = "${OpenSSOLoginURL}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGOUT_URL_FIELD",
			value1 = "${OpenSSOLogoutURL}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SERVICE_URL_FIELD",
			value1 = "${OpenSSOServiceURL}"
		);

		PortletEntry.save();
	}

	macro configureTimeZone {
		Navigator.gotoNavTab(navTab = "Miscellaneous");

		Select(locator1 = "Select#TIME_ZONE", value1 = "${timeZone}");

		PortalSettings._saveDisplaySettings();
	}

	macro configureWikiService {
		var key_counter = "${counter}";

		Type(locator1 = "TextArea#CONFIGURATION", value1 = "${editor}");
	}

	macro editConfigurationAuthenticationCAS {
		Check(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_ENABLED_CHECKBOX"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGIN_URL_FIELD",
			value1 = "${casLoginURL}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGOUT_URL_FIELD",
			value1 = "${casLogoutURL}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVER_URL_FIELD",
			value1 = "${casServerURL}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVICE_URL_FIELD",
			value1 = "${casServiceURL}"
		);

		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_TEST_CAS_CONFIGURATION_BUTTON",
			value1 = "Test CAS Configuration"
		);

		AssertElementNotPresent(locator1 = "//span[.='Unreachable']");

		Click(locator1 = "Icon#CLOSE");

		PortletEntry.save();
	}

	macro editConfigurationAuthenticationFacebook {
		Check(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_ENABLED_CHECKBOX"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_APPLICATION_ID",
			value1 = "${facebookApplicationID}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_APPLICATION_SECRET",
			value1 = "${facebookApplicationSecret}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_GRAPH_URL",
			value1 = "https://graph.facebook.com"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_OAUTH_AUTHENTICATION_URL",
			value1 = "https://graph.facebook.com/oauth/authorize"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_OAUTH_TOKEN_URL",
			value1 = "https://graph.facebook.com/oauth/access_token"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_REDIRECT_URL",
			value1 = "http://localhost:8080/c/portal/facebook_connect_oauth"
		);

		PortletEntry.save();
	}

	macro editConfigurationAuthenticationGeneral {
		PortalSettingsNavigator.expandAuthenticationPanel();

		if ("${enableRequireStrangers}" == "true") {
			Check(
				locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_REQUIRE_STRANGERS_TO_VERIFY_THEIR_EMAIL_ADDRESS_CHECKBOX"
			);
		}
		else {
			Select(
				locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
				value1 = "${authenticationMethod}"
			);
		}

		PortletEntry.save();
	}

	macro editConfigurationUsersDefaultUserAssociationsOrganizationSitesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_HEADER",
			value1 = "Organization Sites"
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = "${orgName}"
		);

		PortletEntry.save();

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = "${orgName}"
		);
	}

	macro editConfigurationUsersDefaultUserAssociationsRolesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_HEADER",
			value1 = "Roles"
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "${roleTitle}"
		);

		PortletEntry.save();

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		Type.clickAtType(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "${roleTitle}"
		);
	}

	macro editConfigurationUsersDefaultUserAssociationsSitesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_HEADER",
			value1 = "Sites"
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = "${siteName}"
		);

		PortletEntry.save();

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = "${siteName}"
		);
	}

	macro editConfigurationUsersDefaultUserAssociationsUserGroupsCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_HEADER",
			value1 = "User Groups"
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = "${userGroupName}"
		);

		PortletEntry.save();

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = "${userGroupName}"
		);
	}

	macro editConfigurationUsersEmailNotificationsCP {
		Panel.expandPanel(panel = "Email Notifications");

		AssertClick(
			locator1 = "NavTab#ACCOUNT_CREATED_NOTIFICATION",
			value1 = "Account Created Notification"
		);

		Type.typeCKEditor(
			locator1 = "CKEditor#BODY_FIELD",
			value1 = "[$USER_PASSWORD$]"
		);

		PortletEntry.save();
	}

	macro editConfigurationUsersEmailVerificationNotificationsCP {
		Panel.expandPanel(panel = "Email Notifications");

		AssertClick(
			locator1 = "NavTab#EMAIL_VERIFICATION_NOTIFICATION",
			value1 = "Email Verification Notification"
		);

		if ("${emailVerificationURL}" == "true") {
			Type.typeEditor(
				locator1 = "PortalSettingsEmailNotifications#NAVIGATION_EMAIL_VERIFICATION_NOTIFICATION_BODY",
				value1 = "[$EMAIL_VERIFICATION_URL$]"
			);
		}
		else {
			Type.typeEditor(
				locator1 = "PortalSettingsEmailNotifications#NAVIGATION_EMAIL_VERIFICATION_NOTIFICATION_BODY",
				value1 = "[$EMAIL_VERIFICATION_CODE$]"
			);
		}

		PortletEntry.save();
	}

	macro editDefaultLandingPageCP {
		Type(
			locator1 = "PortalSettings#DEFAULT_LANDING_PAGE_FIELD",
			value1 = "${defaultLandingPage}"
		);

		PortletEntry.save();
	}

	macro editLDAPServer {
		PortalSettingsNavigator.gotoLDAP();

		var key_LDAPServerName = "${LDAPServerName}";

		Click(locator1 = "PortalSettingsAuthentication#LDAP_SERVERS_TABLE_EDIT");
	}

	macro editVirtualHostCP {
		Type(
			locator1 = "PortalSettings#VIRTUAL_HOST_FIELD",
			value1 = "${virtualHostName}"
		);

		PortletEntry.save();

		AssertTextEquals(
			locator1 = "PortalSettings#VIRTUAL_HOST_FIELD",
			value1 = "${virtualHostName}"
		);
	}

	macro enableGoogleSSOCP {
		Check(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GOOGLE_ENABLED_CHECKBOX"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GOOGLE_CLIENT_ID",
			value1 = "${googleClientID}"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GOOGLE_CLIENT_SECRET",
			value1 = "${googleClientSecret}"
		);

		PortletEntry.save();
	}

	macro enableOpenIDConnectCP {
		Check(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_CONNECT_ENABLED_CHECKBOX"
		);

		PortletEntry.save();

		PortalSettingsNavigator.gotoOpenIDConnect();

		AssertChecked(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_CONNECT_ENABLED_CHECKBOX"
		);
	}

	macro enableOpenIDCP {
		Check(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_ENABLED_CHECKBOX"
		);

		PortletEntry.save();

		PortalSettingsNavigator.gotoOpenID();

		AssertChecked(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_ENABLED_CHECKBOX"
		);
	}

	macro enterReservedEmailAddressCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#RESERVED_CREDENTIALS",
			value1 = "Reserved Credentials"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_HEADER",
			value1 = "Email Addresses"
		);

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = "${userEmailAddress}"
		);

		PortletEntry.save();

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#RESERVED_CREDENTIALS",
			value1 = "Reserved Credentials"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = "${userEmailAddress}"
		);
	}

	macro enterReservedScreenNameCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#RESERVED_CREDENTIALS",
			value1 = "Reserved Credentials"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_HEADER",
			value1 = "Screen Names"
		);

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = "${userScreenName}"
		);

		PortletEntry.save();

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#RESERVED_CREDENTIALS",
			value1 = "Reserved Credentials"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = "${userScreenName}"
		);
	}

	macro openInstanceSettingsAdmin {
		Navigator.openWithAppendToBaseURL(
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_portal_settings_web_portlet_PortalSettingsPortlet"
		);
	}

	macro tearDownAuthenticationCP {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		PortalSettingsNavigator.expandAuthenticationPanel();

		Select(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
			value1 = "By Email Address"
		);

		PortletEntry.save();

		PortalSettingsNavigator.gotoCAS();

		Uncheck(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_ENABLED_CHECKBOX"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGIN_URL_FIELD",
			value1 = "https://localhost:8443/cas-web/login"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGOUT_URL_FIELD",
			value1 = "https://localhost:8443/cas-web/logout"
		);

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVER_URL_FIELD",
			value1 = "https://localhost:8443/cas-web"
		);

		PortletEntry.save();
	}

	macro tearDownCP {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings"
		);

		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = ""
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "Power User\nUser"
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = ""
		);

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = ""
		);

		AssertClick(
			locator1 = "NavTab#RESERVED_CREDENTIALS",
			value1 = "Reserved Credentials"
		);

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = ""
		);

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = ""
		);

		PortletEntry.save();

		PortalSettings.configureContentSharingAcrossSitesCP(enableAcrossSite = "true");
	}

	macro testLDAPConnection {
		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_CONNECTION_BUTTON",
			value1 = "Test LDAP Connection"
		);

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Liferay has successfully connected to the LDAP server."
		);

		var key_modalTitle = "LDAP";

		Click(locator1 = "Button#CLOSE_MODAL");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_USERS_BUTTON",
			value1 = "Test LDAP Users"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "A subset of users has been displayed for you to review."
		);

		Click(locator1 = "Button#CLOSE_MODAL");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_GROUPS_BUTTON",
			value1 = "Test LDAP Groups"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "A subset of groups has been displayed for you to review."
		);

		Click(locator1 = "Button#CLOSE_MODAL");
	}

	macro testOpenSSOConnection {
		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_TEST_OPEN_SSO_CONFIGURATION_BUTTON",
			value1 = "Test OpenSSO Configuration"
		);

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Liferay has successfully connected to the OpenSSO server."
		);

		var key_modalTitle = "OpenSSO";

		Click(locator1 = "Button#CLOSE_MODAL");
	}

	macro viewAuthenticationCASCP {
		PortalSettingsNavigator.gotoCAS();

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_ENABLED_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_IMPORT_FROM_LDAP_CHECKBOX"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGIN_URL_HEADER",
			value1 = "Login URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGIN_URL_FIELD",
			value1 = "https://localhost:8443/cas-web/login"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGOUT_URL_HEADER",
			value1 = "Logout URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_LOGOUT_URL_FIELD",
			value1 = "https://localhost:8443/cas-web/logout"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVER_NAME_HEADER",
			value1 = "Server Name"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVER_NAME_FIELD",
			value1 = "http://localhost:8080"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVER_URL_HEADER",
			value1 = "Server URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVER_URL_FIELD",
			value1 = "https://localhost:8443/cas-web"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVICE_URL_HEADER",
			value1 = "Service URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_SERVICE_URL_FIELD",
			value1 = ""
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_NO_SUCH_USER_REDIRECT_URL_HEADER",
			value1 = "No Such User Redirect URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_NO_SUCH_USER_REDIRECT_URL_FIELD",
			value1 = "http://localhost:8080"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_CAS_TEST_CAS_CONFIGURATION_BUTTON"
		);
	}

	macro viewAuthenticationGeneralCP {
		PortalSettingsNavigator.expandAuthenticationPanel();

		AssertSelectedLabel(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
			value1 = "By Email Address"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_USERS_TO_AUTOMATICALLY_LOGIN_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_USERS_TO_REQUEST_FORGOTTEN_PASSWORDS_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_USERS_TO_REQUEST_PASSWORD_RESET_LINKS_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_STRANGERS_TO_CREATE_ACCOUNTS_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_STRANGERS_TO_CREATE_ACCOUNTS_WITH_A_COMPANY_EMAIL_ADDRESS_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_REQUIRE_STRANGERS_TO_VERIFY_THEIR_EMAIL_ADDRESS_CHECKBOX"
		);
	}

	macro viewAuthenticationLDAPCP {
		PortalSettingsNavigator.gotoLDAP();

		for (var fieldName : list "enabled,required,ldapImportEnabled,ldapExportEnabled,passwordPolicyEnabled") {
			var fieldName = "PortalSettingsPortlet_${fieldName}";

			FormFields.viewCheckboxNotChecked(fieldName = "${fieldName}");
		}

		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_LDAP_ADD_BUTTON",
			value1 = "Add"
		);

		Click(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_DEFAULT_VALUES_MICROSOFT_ACTIVE_DIRECTORY_SERVER_RADIO"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_PROVIDER_URL_HEADER",
			value1 = "Base Provider URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_PROVIDER_URL_FIELD",
			value1 = "ldap://localhost:389"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_DN_HEADER",
			value1 = "Base DN"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_DN_FIELD",
			value1 = "dc=example,dc=com"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_PRINCIPAL_HEADER",
			value1 = "Principal"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_PRINCIPAL_FIELD",
			value1 = "admin"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_CREDENTIALS_HEADER",
			value1 = "Credentials"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_CREDENTIALS_FIELD",
			value1 = "secret"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_CONNECTION_BUTTON"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_USERS_BUTTON"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_GROUPS_BUTTON"
		);
	}

	macro viewAuthenticationNTLMCP {
		PortalSettingsNavigator.gotoNTLM();

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_ENABLED_CHECKBOX"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_DOMAIN_CONTROLLER_HEADER",
			value1 = "Domain Controller"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_DOMAIN_CONTROLLER_FIELD",
			value1 = "127.0.0.1"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_DOMAIN_CONTROLLER_NAME_HEADER",
			value1 = "Domain Controller Name"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_DOMAIN_CONTROLLER_NAME_FIELD",
			value1 = "EXAMPLE"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_DOMAIN_HEADER",
			value1 = "Domain"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_DOMAIN_FIELD",
			value1 = "EXAMPLE"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_SERVICE_ACCOUNT_HEADER",
			value1 = "Service Account"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_SERVICE_ACCOUNT_FIELD",
			value1 = "LIFERAY$@EXAMPLE.COM"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_SERVICE_PASSWORD_HEADER",
			value1 = "Service Password"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_NTLM_SERVICE_PASSWORD_FIELD",
			value1 = "TEMP_OBFUSCATION_VALUE"
		);
	}

	macro viewAuthenticationOpenIDCP {
		PortalSettingsNavigator.gotoOpenID();

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_ENABLED_CHECKBOX"
		);
	}

	macro viewAuthenticationOpenSSOCP {
		PortalSettingsNavigator.gotoOpenSSO();

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_ENABLED_CHECKBOX"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_IMPORT_FROM_LDAP_CHECKBOX"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGIN_URL_HEADER",
			value1 = "Login URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGIN_URL_FIELD",
			value1 = "http://openssohost.example.com:8080/opensso/UI/Login?goto=http://portalhost.example.com:8080/c/portal/login"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGOUT_URL_HEADER",
			value1 = "Logout URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGOUT_URL_FIELD",
			value1 = "http://openssohost.example.com:8080/opensso/UI/Logout?goto=http://portalhost.example.com:8080/web/guest/home"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SERVICE_URL_HEADER",
			value1 = "Service URL"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SERVICE_URL_FIELD",
			value1 = "http://openssohost.example.com:8080/opensso"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SCREEN_NAME_ATTRIBUTE_HEADER",
			value1 = "Screen Name Attribute"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SCREEN_NAME_ATTRIBUTE_FIELD",
			value1 = "uid"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_EMAIL_ADDRESS_ATTRIBUTE_HEADER",
			value1 = "Email Address Attribute"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_EMAIL_ADDRESS_ATTRIBUTE_FIELD",
			value1 = "mail"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_FIRST_NAME_ATTRIBUTE_HEADER",
			value1 = "First Name Attribute"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_FIRST_NAME_ATTRIBUTE_FIELD",
			value1 = "givenName"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LAST_NAME_ATTRIBUTE_HEADER",
			value1 = "Last Name Attribute"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LAST_NAME_ATTRIBUTE_FIELD",
			value1 = "sn"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_TEST_OPEN_SSO_CONFIGURATION_BUTTON"
		);
	}

	macro viewConfigurationUsersDefaultUserAssociationsOrganizationSitesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = "${orgName}"
		);
	}

	macro viewConfigurationUsersDefaultUserAssociationsRolesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		Type.clickAtType(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "${roleTitle}"
		);
	}

	macro viewConfigurationUsersDefaultUserAssociationsSitesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = "${siteName}"
		);
	}

	macro viewConfigurationUsersDefaultUserAssociationsUserGroupsCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = "${userGroupName}"
		);
	}

	macro viewCurrentDefaultPortalLanguageCP {
		var navTab = "Miscellaneous";

		if (isSet(miscellaneousTranslation)) {
			var navTab = "${miscellaneousTranslation}";
		}

		Navigator.gotoNavTab(navTab = "${navTab}");

		AssertSelectedLabel(
			locator1 = "Select#DEFAULT_LANGUAGE_2",
			value1 = "${defaultPortalLanguage}"
		);
	}

	macro viewDefaultLanguageCP {
		Navigator.gotoNavTab(navTab = "Miscellaneous");

		AssertSelectedLabel(
			locator1 = "Select#DEFAULT_LANGUAGE_2",
			value1 = "${defaultPortalLanguage}"
		);
	}

	macro viewDefaultUserAssociationsCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#DEFAULT_USER_ASSOCIATIONS",
			value1 = "Default User Associations"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsUsers#APPLY_TO_EXISTING_USERS_CHECKBOX"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_HEADER",
			value1 = "Sites"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = ""
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_HEADER",
			value1 = "Organization Sites"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = ""
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_HEADER",
			value1 = "Roles"
		);

		Type.clickAtType(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "Power User\nUser"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_HEADER",
			value1 = "User Groups"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = ""
		);
	}

	macro viewEmailNotificationsAccountCreatedNotificationCP {
		Panel.expandPanel(panel = "Email Notifications");

		AssertClick(
			locator1 = "NavTab#ACCOUNT_CREATED_NOTIFICATION",
			value1 = "Account Created Notification"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_ENABLED_CHECKBOX"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_SUBJECT_HEADER",
			value1 = "Subject"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_SUBJECT_FIELD",
			value1 = "[$PORTAL_URL$]: Your New Account"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITH_PASSWORD_HEADER",
			value1 = "Body with Password"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITH_PASSWORD_FIELD"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITHOUT_PASSWORD_HEADER",
			value1 = "Body without Password"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITHOUT_PASSWORD_FIELD"
		);
	}

	macro viewEmailNotificationsPasswordChangedNotificationCP {
		Panel.expandPanel(panel = "Email Notifications");

		AssertClick(
			locator1 = "NavTab#PASSWORD_CHANGED_NOTIFICATION",
			value1 = "Password Changed Notification"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_SUBJECT_HEADER"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_SUBJECT_FIELD",
			value1 = "[$PORTAL_URL$]: Your New Password"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_BODY_HEADER",
			value1 = "Body"
		);

		AssertElementPresent(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_BODY_FIELD"
		);
	}

	macro viewEmailNotificationsSenderCP {
		Panel.expandPanel(panel = "Email Notifications");

		AssertClick(locator1 = "NavTab#SENDER", value1 = "Sender");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_NAME_HEADER",
			value1 = "Name"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_NAME_FIELD",
			value1 = "Joe Bloggs"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_ADDRESS_HEADER",
			value1 = "Address"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_ADDRESS_FIELD",
			value1 = "test@liferay.com"
		);
	}

	macro viewEnabledLDAPSetting {
		PortalSettingsNavigator.gotoLDAP();

		for (var enableSetting : list "${enableSettingList}") {
			var enableSetting = "PortalSettingsPortlet_${enableSetting}";

			FormFields.viewCheckboxChecked(fieldName = "${enableSetting}");
		}
	}

	macro viewReservedCredentialsScreenNamesCP {
		Panel.expandPanel(panel = "Users");

		AssertClick(
			locator1 = "NavTab#RESERVED_CREDENTIALS",
			value1 = "Reserved Credentials"
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_HEADER",
			value1 = "Screen Names"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = ""
		);

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_HEADER",
			value1 = "Email Addresses"
		);

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = ""
		);
	}
}