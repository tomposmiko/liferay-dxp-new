definition {

	macro _deleteAllSegments {
		while (IsElementPresent(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS")) {
			LexiconEntry.gotoEllipsisMenuItemNoError(menuItem = "Delete");

			AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}
	}

	macro addProperties {
		var key_propertyOption = "${propertyOption}";

		Click(locator1 = "Segmentation#PROPERTIES_SEARCH");

		DragAndDrop.javaScriptDragAndDropToObject(
			locator1 = "Segmentation#ADD_FIELD_TYPE",
			locator2 = "Segmentation#ADD_FIELD_POSITION",
			value1 = "${propertyOption}");
	}

	macro assignSiteRoles {
		Click.waitForMenuToggleJSClick(
			key_tableEntry = "${segmentName}",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Assign Site Roles");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Check(
			key_checkboxName = "${roleName}",
			locator1 = "Checkbox#ENABLE_CHECKBOX");

		SelectFrame(value1 = "relative=top");

		Button.clickAdd();

		Alert.viewSuccessMessage();
	}

	macro changeCriterionConjunction {
		Click(locator1 = "Segmentation#CRITERION_CONJUNCTION");

		MenuItem.click(menuItem = "${criterionConjunctionItem}");
	}

	macro changeCriterionInput {
		var key_criterionInputOption = "${criterionInputOption}";

		Select(
			locator1 = "Segmentation#CRITERION_OPERATOR",
			value1 = "${criterionInputOption}");
	}

	macro changeLocale {
		Click(locator1 = "Segmentation#TRANSLATION_BUTTON");

		Click(
			key_locale = StringUtil.replace("${locale}", "_", "-"),
			locator1 = "Segmentation#TRANSLATION_STATUS_TITLE");
	}

	macro checkSegmentationDisabledWarning {
		if (!(isSet(textValue))) {
			var textValue = "Segmentation is disabled";
		}

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_3",
			value1 = "${textValue}");
	}

	macro clickToReEnableSegmentsWarningLink {
		Click(locator1 = "Segmentation#ENABLE_SEGMENTS_INSTANCE_SETTINGS");
	}

	macro closeSegmentationDisabledWarning {
		Click(locator1 = "Icon#CLOSE");
	}

	macro createExperienceWithSegment {
		Click(locator1 = "PageEditor#EXPERIENCE_DEFAULT_BUTTON_NAME");

		Click(
			key_text = "New Experience",
			locator1 = "Button#ANY");

		Click(locator1 = "PageEditor#EXPERIENCE_CREATE_SEGMENT");

		Segmentation.fillTitle(titleField = "${newSegment}");

		Segmentation.addProperties(propertyOption = "Screen Name");

		Segmentation.changeCriterionInput(criterionInputOption = "Contains");

		Segmentation.fillProperty(propertyField = "test");

		Button.clickSave();

		Type.type(
			locator1 = "PageEditor#EXPERIENCE_NAME",
			value1 = "${newExperience}");

		Click(locator1 = "Button#SAVE");
	}

	macro deleteProperty {
		Click(locator1 = "Icon#REMOVE");
	}

	macro deletePropertyElementNotExisting {
		Click(locator1 = "Segmentation#DELETE_SEGMENT_PROPERTY_BUTTON");
	}

	macro deleteSegment {
		Click.waitForMenuToggleJSClick(
			key_tableEntry = "${entry}",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();
	}

	macro disableAssingRolesBySegmentsCheckbox {
		if (IsChecked(locator1 = "Segmentation#ENABLE_ASSIGN_ROLES_SEGMENTS_CHECKBOX")) {
			Click.javaScriptClick(locator1 = "Segmentation#ENABLE_ASSIGN_ROLES_SEGMENTS_CHECKBOX");
		}

		if (IsElementPresent(locator1 = "Button#SAVE")) {
			Click(locator1 = "Button#SAVE");
		}

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Click(locator1 = "Button#UPDATE");
		}

		Alert.viewSuccessMessage();

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Segmentation#ENABLE_ASSIGN_ROLES_SEGMENTS_CHECKBOX");
	}

	macro disableCheckbox {
		FormFields.disableCheckbox(fieldName = "${key_checkLabel}");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}

		Alert.viewSuccessMessage();

		Navigator.openURL();
	}

	macro disableConfigurationAtSystemSettings {
		Segmentation.gotoSegmeentsService(key_portlet = "System Settings");

		if (!(isSet(checkLabel))) {
			var checkLabel = "Enable Segmentation,Enable Assign Roles by Segment";
		}

		for (var label : list "${checkLabel}") {
			FormFields.disableCheckbox(fieldName = "${label}");
		}

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}

		Alert.viewSuccessMessage();
	}

	macro disableSegmentationAtInstanceSettings {
		Segmentation.gotoSegmeentsService(key_portlet = "Instance Settings");

		if (!(isSet(checkLabel))) {
			var checkLabel = "Enable Segmentation";
		}

		Segmentation.disableCheckbox(key_checkLabel = "${checkLabel}");
	}

	macro disableSegmentationAtSystemSettings {
		Segmentation.gotoSegmeentsService(key_portlet = "System Settings");

		FormFields.disableCheckbox(fieldName = "Enable Segmentation");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}

		Alert.viewSuccessMessage();
	}

	macro duplicateCriteria {
		Click(locator1 = "Segmentation#DUPLICATE_BUTTON");
	}

	macro editSegment {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${entry}");
	}

	macro enableAssingRolesBySegmentsCheckbox {
		if (IsNotChecked.isNotCheckedNotVisible(locator1 = "Segmentation#ENABLE_ASSIGN_ROLES_SEGMENTS_CHECKBOX")) {
			Click.javaScriptClick(locator1 = "Segmentation#ENABLE_ASSIGN_ROLES_SEGMENTS_CHECKBOX");
		}

		if (IsElementPresent(locator1 = "Button#SAVE")) {
			Click(locator1 = "Button#SAVE");
		}

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Click(locator1 = "Button#UPDATE");
		}

		Alert.viewSuccessMessage();

		AssertChecked.assertCheckedNotVisible(locator1 = "Segmentation#ENABLE_ASSIGN_ROLES_SEGMENTS_CHECKBOX");
	}

	macro fillProperty {
		if (isSet(criterionKey)) {
			Type(
				locator1 = "Segmentation#CRITERION_KEY_ANY",
				value1 = "${criterionKey}");
		}

		if (isSet(selectCheckbox)) {
			Button.clickSelect();

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Check(
				key_checkboxName = "${selectCheckbox}",
				locator1 = "Checkbox#ENABLE_CHECKBOX");

			SelectFrame(value1 = "relative=top");

			Click(locator1 = "Modal#SELECT_BUTTON");
		}
		else if (isSet(chooseItem)) {
			Button.clickSelect();

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertClick(
				key_rowEntry = "${chooseItem}",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHOOSE",
				value1 = "Choose");

			SelectFrame(value1 = "relative=top");
		}
		else if (isSet(selectLink)) {
			if (isSet(indexNumber)) {
				Click(
					key_indexNumber = "${indexNumber}",
					key_text = "Select",
					locator1 = "Button#ANY_N");
			}
			else {
				Button.clickSelect();
			}

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertClick(
				key_rowEntry = "${selectLink}",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME_LINK",
				value1 = "${selectLink}");

			SelectFrame(value1 = "relative=top");
		}
		else if (isSet(dateValue)) {
			Type.sendKeys(
				locator1 = "Segmentation#CRITERION_INPUT_ANY",
				value1 = "${dateValue}");
		}
		else if (isSet(optionsValue)) {
			Select(
				locator1 = "Segmentation#CRITERION_INPUT_ANY",
				value1 = "${optionsValue}");
		}
		else if (isSet(indexNumber)) {
			Type.type(
				indexNumber = "${indexNumber}",
				locator1 = "Segmentation#CRITERION_INPUT_INDEX",
				value1 = "${criterionValue}");
		}
		else {
			Type.type(
				locator1 = "Segmentation#CRITERION_INPUT_ANY",
				value1 = "${criterionValue}");
		}
	}

	macro fillTitle {
		Click(locator1 = "Segmentation#TITLE_FIELD");

		Type.type(
			locator1 = "Segmentation#TITLE_FIELD",
			value1 = "${titleField}");
	}

	macro getPortalInstanceDefaultLanguageId {
		var portalURL = PropsUtil.get("portal.url");
		var companyId = JSONCompany.getCompanyId(portalInstanceName = "${portalInstanceName}");

		var curl = '''
			${portalURL}/api/jsonws/country/get-company-countries \
			-u test@liferay.com:test \
			-d companyId=${companyId} \
			-d start=0 \
			-d end=1 \
			-d -orderByComparator=
		''';

		var languageId = JSONCurlUtil.post("${curl}", "$..defaultLanguageId");

		return "${languageId}";
	}

	macro gotoRoleAssigneeSegments {
		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role._goToRoleAssigneeType(
			assigneeType = "Segments",
			roleTitle = "${roleName}");
	}

	macro gotoSegmeentsService {
		if ("${key_portlet}" == "Instance Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "Virtual Instance Scope");
		}
		else if ("${key_portlet}" == "System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Segments",
				configurationName = "Segments Service",
				configurationScope = "System Scope");
		}
	}

	macro gotoSidebar {
		Click(
			key_typeName = "${fieldType}",
			locator1 = "Segmentation#SEGMENT_FIELDS_TYPE");
	}

	macro openSegmentOptions {
		Click(locator1 = "Segmentation#SEARCH_FIELD");

		Type.type(
			locator1 = "Segmentation#SEARCH_FIELD",
			value1 = "${segmentName}");

		KeyPress(
			locator1 = "Segmentation#SEARCH_FIELD",
			value1 = "\ENTER");

		if (IsElementPresent(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS")) {
			Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");
		}
	}

	macro openSegmentsAdmin {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_segments_web_internal_portlet_SegmentsPortlet");
	}

	macro resetDefaultValues {
		Click(locator1 = "Icon#HISTORY_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Reset Default Values");

		Alert.viewSuccessMessage();
	}

	macro resetSegmentationAtInstanceSettings {
		Navigator.openURL();

		Segmentation.gotoSegmeentsService(key_portlet = "Instance Settings");

		Segmentation.resetDefaultValues();
	}

	macro resetSegmentationAtSystemSettings {
		Navigator.openURL();

		Segmentation.gotoSegmeentsService(key_portlet = "System Settings");

		Segmentation.resetDefaultValues();
	}

	macro setVocabularySessionProperty {
		PortalSettings.openInstanceSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Segments",
			configurationName = "Session Property Vocabularies",
			configurationScope = "Virtual Instance Scope");

		Button.clickAdd();

		FormFields.selectSelectOption(
			fieldName = "Session Property Name",
			selectOption = "${propertyName}");

		FormFields.selectSelectOption(
			fieldName = "Vocabulary Name",
			selectOption = "${vocabularyName}");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	macro updateSegmentsInterval {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Segments",
			configurationName = "Analytics Cloud Segments",
			configurationScope = "System Scope");

		if (isSet(interval)) {
			Type(
				key_text = "Update Interval",
				locator1 = "TextInput#ANY",
				value1 = "${interval}");
		}

		SystemSettings.saveConfiguration();
	}

	macro viewEntryNotPresent {
		LexiconEntry.viewNoEntry(rowEntry = "${segmentName}");
	}

	macro viewMembers {
		var key_memberName = "${memberName}";

		Click(
			key_text = "View Members",
			locator1 = "Button#ANY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		if (!(isSet(memberNameList))) {
			var memberNameList = "${memberName}";
		}

		for (var key_memberName : list "${memberNameList}") {
			AssertVisible(
				key_tableEntry = "${key_memberName}",
				locator1 = "LexiconTable#TABLE_ENTRY");
		}

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Icon#CLOSE");

		SelectFrame(value1 = "relative=top");
	}

}