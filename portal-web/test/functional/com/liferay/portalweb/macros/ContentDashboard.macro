definition {

	macro addMimeType {
		Click(
			ariaLabel = "Add Duplicate Field Code File MIME types",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		Type(
			key_indexNumber = "2",
			key_label = "Code File MIME types",
			locator1 = "TextArea#ANY_LABELED_N",
			value1 = "${typeName}");

		Button.clickSave();
	}

	macro applySelectedFilter {
		SelectFrame(value1 = "relative=top");

		AssertClickNoError(
			locator1 = "Button#SELECT",
			value1 = "Select");

		SelectFrame(value1 = "relative=top");

		WaitForElementPresent(locator1 = "ContentDashboard#ROW_PANEL");
	}

	macro cancelSelectFilterTreeview {
		Portlet.expandTree();

		for (var optionName : list "${optionsList}") {
			Check.checkNotVisible(
				key_nodeName = "${optionName}",
				locator1 = "Treeview#NODE_CHECKBOX_2");
		}

		ClickNoError(
			key_text = "Clear All",
			locator1 = "Link#ANY");

		AssertElementNotPresent(
			key_text = "Clear All",
			locator1 = "Link#ANY");

		SelectFrame(value1 = "relative=top");

		Button.clickCancel();
	}

	macro checkMimeExtensionDisplayed {
		if (isSet(typeName)) {
			AssertVisible(
				key_nodeName = "${typeName}",
				locator1 = "Treeview#NODE_ITEM_2");
		}
		else {
			for (var typeName : list "${typeNameList}") {
				AssertVisible(
					key_nodeName = "${typeName}",
					locator1 = "Treeview#NODE_ITEM_2");
			}
		}

		SelectFrame(value1 = "relative=top");

		Button.clickCancel();
	}

	macro clearFilters {
		Click(
			key_text = "Clear",
			locator1 = "Link#ANY");
	}

	macro clickMenuOfVersion {
		Click.waitForMenuToggleJSClick(
			key_version = "${versionName}",
			locator1 = "ContentDashboard#VERSION_ELLIPSIS");

		if (IsVisible(locator1 = "ContentDashboard#INFO_PANEL")) {
			MenuItem.clickNoError(menuItem = "${menuItem}");
		}
		else {
			ClickNoError(
				key_menuItem = "${menuItem}",
				locator1 = "ContentDashboard#VERSION_HISTORY_ELLIPSIS");
		}
	}

	macro clickOnFirstBar {
		if (!(isSet(fillColor))) {
			var fillColor = "4B9FFF";
		}

		Click(
			fillColor = "${fillColor}",
			locator1 = "ContentDashboard#BAR_FROM_NO_VOCABULARY_SPECIFIED");
	}

	macro clickQuickActionIcon {
		if (isSet(assetName)) {
			Click.clickNoMouseOver(
				key_assetName = "${assetName}",
				locator1 = "ContentDashboard#ROW_PANEL_ASSET_NAME");
		}
		else {
			Click.clickNoMouseOver(locator1 = "ContentDashboard#ROW_PANEL");
		}

		Click.javaScriptClick(
			locator1 = "ContentDashboard#QUICK_ACTION_ICON",
			title = "${iconName}");
	}

	macro clickViewMore {
		Button.click(button = "View More");
	}

	macro createVersionsForDocument {
		var count = "0";

		while ("${count}" != "${versionsCreated}") {
			JSONDocument.checkOutFile(
				dmDocumentTitle = "${dmDocumentTitle}",
				groupName = "${groupName}");

			JSONDocument.checkInFile(
				dmDocumentTitle = "${dmDocumentTitle}",
				groupName = "${groupName}");

			var count = ${count} + 1;
		}
	}

	macro deleteSecondCategoryFilter {
		Click(locator1 = "ContentDashboard#DELETE_SECOND_FILTER_SELECTED");
	}

	macro downloadVersion {
		Click.waitForMenuToggleJSClick(
			key_tableEntry = "${version}",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

		ClickNoError(
			key_text = "download",
			locator1 = "MenuItem#ANY_ICON");
	}

	macro editAsset {
		LexiconTable.clickEllipsisItem(
			item = "Edit",
			tableEntry = "${assetTitle}");

		if (isSet(assetNewTitle)) {
			if (IsElementPresent(locator1 = "TextInput#TITLE")) {
				Click(locator1 = "TextInput#TITLE");

				PortletEntry.inputTitle(title = "${assetNewTitle}");
			}
			else {
				BlogsEntry.addTitle(entryTitle = "${assetNewTitle}");
			}
		}

		if (isSet(saveAsDraft)) {
			PortletEntry.saveAsDraft();

			Click(locator1 = "Icon#BACK");
		}
		else {
			Button.clickPublish();
		}
	}

	macro filterByAuthor {
		ContentDashboard.openFilterModal(filterOption = "Author");

		if (!(isSet(authorNameList))) {
			var authorNameList = "Test Test";
		}

		if (!(isSet(viewOption))) {
			for (var authorName : list "${authorNameList}") {
				LexiconTable.checkTableCheckbox(tableEntry = "${authorName}");
			}
		}
		else if ("${viewOption}" == "Cards") {
			LexiconEntry.changeExportDisplayStyle(displayStyle = "${viewOption}");

			for (var authorName : list "${authorNameList}") {
				LexiconCard.checkCardCheckbox(card = "${authorName}");
			}
		}
		else if ("${viewOption}" == "List") {
			LexiconEntry.changeExportDisplayStyle(displayStyle = "${viewOption}");

			for (var authorName : list "${authorNameList}") {
				Check(
					key_listEntry = "${authorName}",
					locator1 = "LexiconList#LIST_ENTRY_CHECKBOX");
			}
		}

		ContentDashboard.applySelectedFilter();
	}

	macro filterByAuthorAll {
		ContentDashboard.openFilterAndOrder();

		Click(locator1 = "ContentDashboard#FILTER_BY_OPTION");
	}

	macro filterByAuthorMe {
		ContentDashboard.openFilterAndOrder();

		Click(locator1 = "ContentDashboard#FILTER_BY_OPTION");
	}

	macro filterByCategory {
		ContentDashboard.openFilterModal(filterOption = "Categories");

		ContentDashboard.useTreeviewFilter(optionsList = "${categoryNameList}");

		ContentDashboard.applySelectedFilter();
	}

	macro filterByExtension {
		ContentDashboard.openFilterModal(filterOption = "Extension");

		if (!(isSet(extensionNameList))) {
			var extensionNameList = "${extensionName}";
		}

		ContentDashboard.useTreeviewFilter(optionsList = "${extensionNameList}");

		ContentDashboard.applySelectedFilter();
	}

	macro filterByMimeParent {
		ContentDashboard.openFilterModal(filterOption = "Extension");

		ContentDashboard.useTreeviewFilter(optionsList = "${parentExtension}");

		ContentDashboard.applySelectedFilter();
	}

	macro filterBySite {
		ContentDashboard.openFilterModal(filterOption = "Site or Asset Library");

		AssertClick(
			locator1 = "NavBar#MY_SITES",
			value1 = "My Sites");

		LexiconCard.clickCardTitle(card = "${siteName}");

		SelectFrame(value1 = "relative=top");
	}

	macro filterByStatus {
		ContentDashboard.openFilterAndOrder();

		Click(locator1 = "ContentDashboard#FILTER_BY_OPTION");
	}

	macro filterByTag {
		ContentDashboard.openFilterModal(filterOption = "Tag");

		if (!(isSet(tagNameList))) {
			var tagNameList = "${tagName}";
		}

		for (var tableEntry : list "${tagNameList}") {
			LexiconTable.checkTableCheckbox(tableEntry = "${tableEntry}");
		}

		ContentDashboard.applySelectedFilter();
	}

	macro filterByType {
		ContentDashboard.openFilterModal(filterOption = "Type");

		if (!(isSet(typeNameList))) {
			var typeNameList = "${typeName}";
		}

		ContentDashboard.useTreeviewFilter(optionsList = "${typeNameList}");

		ContentDashboard.applySelectedFilter();
	}

	macro flipGraphAxes {
		Click(
			key_text = "change",
			locator1 = "Icon#ANY");
	}

	macro goToContentDashboard {
		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Content Dashboard");

		WaitForPageLoad();

		WaitForElementPresent(locator1 = "ContentDashboard#CONTENT_CHART_SVG");
	}

	macro goToVersionHistoryPage {
		ContentDashboard.goToContentDashboard();

		LexiconTable.clickEllipsisItem(
			item = "Info",
			tableEntry = "${assetName}");

		ContentDashboard.openVersionsTab();

		ContentDashboard.clickViewMore();
	}

	macro moveToPage {
		Click(locator1 = "ContentDashboard#PAGINATION_MOVE_TO_PAGE");
	}

	macro moveVocabularyDisplayConfiguration {
		ContentDashboard.openAuditGraphConfiguration();

		for (var key_vocabularyName : list "${vocabularyName}") {
			if (IsElementPresent(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_VOCABULARY_IN_USE")) {
				Click.clickNoMouseOver(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_VOCABULARY_IN_USE");

				Click(
					ariaLabel = "Transfer Item Right to Left",
					locator1 = "Button#ANY_WITH_ARIA_LABEL");
			}
			else if (IsElementPresent(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_VOCABULARY_AVAILABLE")) {
				Click.clickNoMouseOver(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_VOCABULARY_AVAILABLE");

				Click(
					ariaLabel = "Transfer Item Left to Right",
					locator1 = "Button#ANY_WITH_ARIA_LABEL");
			}

			AssertClick(
				locator1 = "Button#SAVE",
				value1 = "Save");
		}

		if (isSet(warningMessage)) {
			Alert.viewWarningSpecific(warningMessage = "${warningMessage}");
		}
		else {
			Alert.viewSuccessMessage();
		}

		IFrame.closeFrame();
	}

	macro navigateToDocumentVersionHistoryPage {
		var fileEntryId = JSONDocument.getFileEntryId(
			dmDocumentTitle = "${dmDocumentTitle}",
			groupName = "${groupName}");

		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_document_library_web_portlet_DLAdminPortlet&_com_liferay_document_library_web_portlet_DLAdminPortlet_mvcRenderCommandName=%2Fdocument_library%2Fview_file_entry_history&_com_liferay_document_library_web_portlet_DLAdminPortlet_fileEntryId=${fileEntryId}");
	}

	macro openAuditGraphConfiguration {
		Click(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");
	}

	macro openFilterAndOrder {
		if (IsElementPresent(locator1 = "ContentDashboard#FILTER_AND_ORDER_DROPDOWN")) {
			AssertClickNoError(
				locator1 = "ContentDashboard#FILTER_AND_ORDER_DROPDOWN",
				value1 = "Filter and Order");
		}
	}

	macro openFilterModal {
		ContentDashboard.openFilterAndOrder();

		Click(locator1 = "ContentDashboard#FILTER_BY_OPTION");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		WaitForLiferayEvent.initializeLiferayEventLog();
	}

	macro openVersionsTab {
		Click(locator1 = "ContentDashboard#INFO_PANEL_VERSIONS_TAB");
	}

	macro orderByModificationDate {
		ContentDashboard.openFilterAndOrder();

		Click(locator1 = "ContentDashboard#FILTER_BY_OPTION");
	}

	macro orderByTitle {
		ContentDashboard.openFilterAndOrder();

		Click(locator1 = "ContentDashboard#FILTER_BY_OPTION");
	}

	macro searchValue {
		Click(locator1 = "ContentDashboard#SEARCH_FIELD");

		Type(
			locator1 = "ContentDashboard#SEARCH_FIELD",
			value1 = "${webContentTitle}");

		KeyPress(
			locator1 = "ContentDashboard#SEARCH_FIELD",
			value1 = "\ENTER");
	}

	macro setUpGlobalCategories {
		var audienceCategory = JSONCategory.addCategory(
			groupName = "Global",
			title = "Audience 1",
			vocabularyName = "Audience");
		var stageCategory = JSONCategory.addCategory(
			groupName = "Global",
			title = "Stage 1",
			vocabularyName = "Stage");
		static var audienceId1 = "${audienceCategory}";
		static var stageId1 = "${stageCategory}";

		return "${audienceId1}";

		return "${stageId1}";
	}

	macro setVocabularyInUseSecondPosition {
		ContentDashboard.openAuditGraphConfiguration();

		var secondVocabulary = selenium.getText("ContentDashboard#AUDIT_GRAPH_CONFIGURATION_SECOND_VOCABULARY_IN_USE");

		if (contains("${secondVocabulary}", "${key_vocabularyName}")) {
			Click(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_VOCABULARY_IN_USE");

			Click(
				ariaLabel = "Reorder Up",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		IFrame.closeFrame();
	}

	macro setVocabularyInUseTopPosition {
		ContentDashboard.openAuditGraphConfiguration();

		var firstVocabulary = selenium.getText("ContentDashboard#AUDIT_GRAPH_CONFIGURATION_FIRST_VOCABULARY_IN_USE");

		if (contains("${key_vocabularyName}", "${firstVocabulary}")) {
			Click(locator1 = "ContentDashboard#AUDIT_GRAPH_CONFIGURATION_VOCABULARY_IN_USE");

			Click(
				ariaLabel = "Reorder Up",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		IFrame.closeFrame();
	}

	macro swapVocabularies {
		Click(locator1 = "ContentDashboard#SWAP_VOCABULARIES_BUTTON");
	}

	macro useTreeviewFilter {
		Portlet.expandTree();

		for (var optionName : list "${optionsList}") {
			Check.checkNotVisible(
				key_nodeName = "${optionName}",
				locator1 = "Treeview#NODE_CHECKBOX_2");
		}
	}

	macro viewAppliedFilters {
		for (var filterLabel : list "${filterLabelList}") {
			AssertElementPresent(
				filterLabel = "${filterLabel}",
				locator1 = "ContentDashboard#FILTER_LABEL");
		}
	}

	macro viewAssetsTranslatedVersion {
		Panel.expandPanel(panel = "Details");

		ClickNoError(
			key_language = "${language}",
			locator1 = "ContentDashboard#VIEW_TRANSLATED_ASSET_ICON");
	}

	macro viewHistoryVersionOrder {
		var count = "1";
		var list1 = ListUtil.newListFromString("${assetVersionList}");

		var size = ListUtil.size("${list1}");

		while ("${count}" != "${size}") {
			var versionName = ListUtil.get("${list1}", "${count}");

			AssertVisible(
				index = "${count}",
				key_tableEntry = "${versionName}",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");

			var count = ${count} + 1;

			var count = StringUtil.valueOf("${count}");
		}
	}

}