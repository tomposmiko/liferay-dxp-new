definition {

	macro _addPage {
		PagesAdmin._selectPageType(
			collectionName = "${collectionName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PagesAdmin._addPageToNavigationMenu(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			navigationMenus = "${navigationMenus}");

		PortletEntry.inputName(name = "${pageName}");

		if (isSet(categoryName)) {
			AssetCategorization.addCategory(
				categoryName = "${categoryName}",
				vocabularyName = "${vocabularyName}");
		}

		Button.clickAdd();

		SelectFrame.selectFrameTop();

		Alert.viewSuccessMessage();

		if ("${sitePageType}" == "Embedded") {
			Page._addPageTypeEmbedded(pageTypeURL = "${pageTypeURL}");
		}
		else if ("${sitePageType}" == "Full Page Application") {
			if (isSet(portlet)) {
				Page._addPageTypeFullPageApplication(portlet = "${portlet}");
			}
		}
		else if ("${sitePageType}" == "Link to a Page of This Site") {
			if (isSet(linkPageName)) {
				Click(locator1 = "SitePagesEditPage#LINK_TO_PAGE_SELECT_BUTTON");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Pause(locator1 = "3000");

				AssertClick.assertPartialTextClickAt(
					key_nodeName = "${linkPageName}",
					locator1 = "Treeview#NODE_UNSELECTED",
					value1 = "${linkPageName}");

				SelectFrameTop();
			}
		}
		else if ("${sitePageType}" == "Link to URL") {
			Type(
				locator1 = "TextInput#URL",
				value1 = "${pageTypeURL}");
		}
		else if ("${sitePageType}" == "Panel") {
			if (isSet(componentName)) {
				Page._addPageTypePanel(componentName = "${componentName}");
			}
		}

		if (isSet(inheritChanges)) {
			Page.togglePageTemplateInheritChanges(toggleValue = "${inheritChanges}");
		}

		AssertVisible(locator1 = "TextInput#NAME");

		if (isSet(openGraph)) {
			PagesAdmin._configureOpenGraph(
				customDescription = "${customDescription}",
				customTitle = "${customTitle}");
		}

		Button.click(button = "Save");
	}

	@summary = "Add newly created pages to specified navigation menus or assert that the option to add the pages to navigation menus is missing."
	macro _addPageToNavigationMenu {
		if (isSet(navigationMenus)) {
			Pause(locator1 = "5000");

			for (var navigationMenu : list "${navigationMenus}") {
				if ("${assertCheckboxMissing}" == "true") {
					AssertElementNotPresent(
						checkboxName = "${navigationMenu}",
						locator1 = "Checkbox#ANY_CHECKBOX");
				}
				else {
					Check(
						checkboxName = "${navigationMenu}",
						locator1 = "Checkbox#ANY_CHECKBOX");

					AssertChecked(
						checkboxName = "${navigationMenu}",
						locator1 = "Checkbox#ANY_CHECKBOX");
				}
			}
		}
	}

	@summary = "Configures openGraph for a site page. This should be moved outside of _addPage for stability."
	macro _configureOpenGraph {
		Navigator.gotoNavTab(navTab = "Open Graph");

		var checkboxName = "Use Custom Title";

		if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
			Click(locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Type(
			locator1 = "TextInput#OPEN_GRAPH_CUSTOM_TITLE",
			value1 = "${customTitle}");

		var checkboxName = "Use Custom Description";

		if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
			Click(locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Type(
			key_text = "openGraphDescription",
			locator1 = "TextArea#ANY",
			value1 = "${customDescription}");
	}

	macro _selectPageType {
		if (!(contains("${pageTemplateName}", "{pageTemplateName}"))) {
			var sitePageType = "${pageTemplateName}";

			if (isSet(collectionName)) {
				Navigator.gotoNavNested(navNested = "${collectionName}");
			}
			else {
				Navigator.gotoNavNested(navNested = "Global Templates");
			}
		}
		else if (isSet(sitePageType)) {
			var sitePageType = "${sitePageType}";
		}
		else {
			var sitePageType = "Widget Page";
		}

		LexiconCard.viewCardPresent(card = "${sitePageType}");

		Pause(locator1 = "3000");

		LexiconCard.clickCard(card = "${sitePageType}");
	}

	macro addChildPage {
		MouseOver(
			key_itemName = "${parentPageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM");

		Click(
			key_pageName = "${parentPageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM_PLUS_ICON");

		DropdownMenuItem.click(menuItem = "Add Page");

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			navigationMenus = "${navigationMenus}",
			pageName = "${childPageName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");
	}

	macro addJavaScript {
		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Advanced");

		Panel.expandPanel(panel = "JavaScript");

		AssertTextEquals(
			locator1 = "SitePages#JAVASCRIPT_LABEL",
			value1 = "Paste JavaScript code that is executed at the bottom of the page.");

		Type(
			locator1 = "SitePages#JAVASCRIPT_TEXTAREA",
			value1 = "${javaScript}");

		AssertClickNoError(
			locator1 = "Button#SAVE",
			value1 = "Save");
	}

	macro addLocalizedFriendlyURL {
		var list1 = ListUtil.newListFromString("${friendlyUrlLocalizedList}");
		var list2 = ListUtil.newListFromString("${localizedFriendlyURLList}");
		var list3 = ListUtil.newListFromString("${localizedNameList}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		while ("${i}" != "${size}") {
			var friendlyUrlLocalized = ListUtil.get("${list1}", "${i}");
			var localizedFriendlyURL = ListUtil.get("${list2}", "${i}");
			var localizedName = ListUtil.get("${list3}", "${i}");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "${friendlyUrlLocalized}");

			Type(
				locator1 = "TextInput#FRIENDLY_URL",
				value1 = "${localizedFriendlyURL}");

			if ("${localizedName}" != "-") {
				PortletEntry.inputName(name = "${localizedName}");
			}

			if (!(isSet(configureWithoutSave))) {
				PortletEntry.save();
			}

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}
	}

	macro addPrivateChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "Private Pages");

		PagesAdmin.addChildPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			childPageName = "${childPageName}",
			navigationMenus = "${navigationMenus}",
			pageTemplateName = "${pageTemplateName}",
			parentPageName = "${parentPageName}",
			sitePageType = "${sitePageType}");
	}

	macro addPrivatePage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if ("${siteTemplate}" == "true") {
			LexiconEntry.gotoAddMenuItem(menuItem = "Add Site Template Page");
		}
		else if (IsElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB")) {
			PagesAdmin.gotoAddFirstPage(pageType = "Private Page");
		}
		else {
			AssertClick(
				key_breadcrumbName = "Pages",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
				value1 = "Pages");

			LexiconEntry.gotoAddMenuItem(menuItem = "Private Page");
		}

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			navigationMenus = "${navigationMenus}",
			pageName = "${pageName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");
	}

	macro addPublicChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "Public Pages");

		PagesAdmin.addChildPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			childPageName = "${childPageName}",
			navigationMenus = "${navigationMenus}",
			pageTemplateName = "${pageTemplateName}",
			parentPageName = "${parentPageName}",
			sitePageType = "${sitePageType}");
	}

	macro addPublicPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (IsElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB")) {
			PagesAdmin.gotoAddFirstPage(pageType = "Public Page");
		}
		else {
			AssertClick(
				key_breadcrumbName = "Pages",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_EXACT_MATCH",
				value1 = "Pages");

			LexiconEntry.gotoAddMenuItem(menuItem = "Public Page");
		}

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			categoryName = "${categoryName}",
			collectionName = "${collectionName}",
			componentName = "${componentName}",
			customDescription = "${customDescription}",
			customTitle = "${customTitle}",
			inheritChanges = "${inheritChanges}",
			linkPageName = "${linkPageName}",
			navigationMenus = "${navigationMenus}",
			openGraph = "${openGraph}",
			pageName = "${pageName}",
			pageTemplateName = "${pageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}",
			vocabularyName = "${vocabularyName}");
	}

	macro addPublicPageUnderSitePagesVariation {
		LexiconEntry.gotoAddMenuItem(menuItem = "Public Page");

		PagesAdmin._selectPageType(
			collectionName = "${collectionName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.inputName(name = "${pageName}");

		Button.clickAdd();

		SelectFrame.selectFrameTop();

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		AssertVisible(locator1 = "TextInput#NAME");

		Button.click(button = "Save");

		WaitForSPARefresh();
	}

	macro changeLogo {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Advanced");

		Page.uploadFileForLogo(logoFile = "${logoFile}");
	}

	macro changeSiteCurrentTheme {
		PagesAdmin.togglePrivacy(privacy = "${privacy}");

		Click(
			key_pageName = "${privacy}",
			locator1 = "Icon#COG_PAGE");

		Navigator.gotoNavTab(navTab = "Look and Feel");

		Theme.changeCurrentTheme(themeName = "${themeName}");

		PortletEntry.save();
	}

	macro changeWidgetPageCurrentTheme {
		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Look and Feel");

		Theme.configureLookAndFeelSpecificLook();

		Theme.changeCurrentTheme(themeName = "${themeName}");

		PortletEntry.save();
	}

	macro configureChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}",
			parentPagesHierarchy = "${parentPagesHierarchy}");

		Page._configurePage(
			columnName = "${columnName}",
			componentName = "${componentName}",
			layoutPageTemplateName = "${layoutPageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}");

		PortletEntry.save();
	}

	macro configurePage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "${privacy}");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Page._configurePage(
			columnName = "${columnName}",
			componentName = "${componentName}",
			layoutPageTemplateName = "${layoutPageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}");

		PortletEntry.save();
	}

	macro deleteLogo {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (isSet(pageName)) {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "${pageName}");

			Navigator.gotoNavTab(navTab = "Advanced");
		}
		else {
			LexiconEntry.gotoHeaderMenuItem(menuItem = "Configure");

			Panel.expandPanel(panel = "Logo");
		}

		AssertClick(
			key_text = "Delete",
			locator1 = "Button#ANY",
			value1 = "Delete");

		PortletEntry.save();
	}

	macro deletePage {
		WaitForPageLoad();

		Click(
			key_pageName = "${pageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		MenuItem.clickNoError(menuItem = "Delete");

		if (isSet(hasChildren)) {
			AssertConfirm(value1 = "This page has child pages that will also be removed. Are you sure you want to delete this page?");
		}
		else {
			AssertConfirm(value1 = "Are you sure you want to delete this page?");
		}

		if (isSet(failure)) {
			if (IsElementPresent(locator1 = "Message#ERROR_2")) {
				Alert.viewRequestFailedToComplete();

				AssertTextEquals(
					locator1 = "Message#ERROR_2",
					value1 = "${failure}");
			}
			else {
				AssertTextEquals(
					locator1 = "Message#ERROR",
					value1 = "${failure}");
			}
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	macro expandPageTree {
		if (!(isSet(depth))) {
			var depth = "1";
		}

		var count = "0";

		while ("${count}" != "${depth}") {
			var index = ${count} + 1;

			Click(
				key_depth = "${index}",
				locator1 = "SitePages#LIST_GROUP_ITEM_DEPTH");

			var count = ${count} + 1;
		}
	}

	macro getFriendlyURL {
		var baseURL = "${baseURL}";

		if (contains("${baseURL}", "{baseURL}")) {
			var baseURL = PropsUtil.get("portal.url");
		}

		var key_friendlyURL = "";
		var friendlyURL = selenium.getElementValue("SitePages#FRIENDLY_URL");

		return "${baseURL}/web/guest${friendlyURL}";
	}

	@summary = "Go to the page creation form through the empty-result-message taglib"
	macro gotoAddFirstPage {
		var key_menuItem = "${pageType}";

		AssertVisible(locator1 = "Message#EMPTY_INFO_TAGLIB");

		Click.waitForMenuToggleJSClick(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

		Click(locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
	}

	@summary = "Go to the ellipsis menu item of a page. Parent pages hierarchy is required to navigate to child pages."
	macro gotoPageEllipsisMenuItem {
		PagesAdmin.openPageEllipsisMenu(
			pageName = "${pageName}",
			parentPage = "${parentPage}",
			parentPagesHierarchy = "${parentPagesHierarchy}");

		MenuItem.click(menuItem = "${menuItem}");
	}

	macro movePageItemUp {
		var key_pageName = "${pageName}";
		var key_pageNameTo = "${pageNameTo}";

		DragAndDrop.javaScriptDragAndDropToUp(
			locator1 = "SitePages#LIST_GROUP_ITEM_DRAG_HANDLER",
			locator2 = "SitePages#LIST_GROUP_ITEM_DROP_TARGET",
			value1 = "");
	}

	@summary = "Open the ellipsis menu of a page. Parent pages hierarchy is required to navigate to child pages."
	macro openPageEllipsisMenu {
		WaitForPageLoad();

		if (isSet(parentPagesHierarchy)) {
			for (var parentPage : list "${parentPagesHierarchy}") {
				Click(
					key_itemName = "${parentPage}",
					locator1 = "SitePages#LIST_GROUP_ITEM");
			}
		}

		Click(
			key_pageName = "${pageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");
	}

	macro openPagesAdmin {
		var siteURLKey = StringUtil.replace("${siteURLKey}", " ", "-");
		var siteURLKey = StringUtil.lowerCase("${siteURLKey}");

		Navigator.openWithAppendToBaseURL(
			baseURL = "${baseURL}",
			urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_layout_admin_web_portlet_GroupPagesPortlet");
	}

	macro selectPageItem {
		var key_pageName = "${pageName}";

		Check.checkNotVisible(locator1 = "SitePages#LIST_GROUP_ITEM_CHECKBOX");
	}

	@summary = "Delete all pages except the Welcome and Search Page"
	macro tearDownCP {
		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Pause(locator1 = "5000");

		while (IsElementPresent(key_index = "4", locator1 = "SitePages#LIST_GROUP_ITEM_ROW_ELLIPSIS")) {
			Click.waitForMenuToggleJSClick(
				key_index = "4",
				locator1 = "SitePages#LIST_GROUP_ITEM_ROW_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this page?");
		}

		AssertElementNotPresent(
			key_index = "4",
			locator1 = "SitePages#LIST_GROUP_ITEM_ROW_ELLIPSIS");

		while (IsElementPresent(key_pageName = "Home", locator1 = "SitePages#LIST_GROUP_ITEM_CHILD_INDICATOR")) {
			PagesAdmin.expandPageTree(depth = "2");

			Click.waitForMenuToggleJSClick(
				key_index = "4",
				locator1 = "SitePages#LIST_GROUP_ITEM_ROW_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			AssertElementNotPresent(
				key_index = "4",
				locator1 = "SitePages#LIST_GROUP_ITEM_ROW_ELLIPSIS");
		}
	}

	macro togglePrivacy {
		WaitForPageLoad();

		if (IsElementNotPresent(key_breadcrumbName = "${privacy}", locator1 = "Breadcrumb#BREADCRUMB_ENTRY_EXACT_MATCH")) {
			Click(
				key_itemName = "${privacy}",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}
	}

	macro viewPageItemNotPresent {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "${privacy}");

		AssertElementNotPresent(
			key_pageName = "${pageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM");
	}

	macro viewPageItemPresent {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "${privacy}");

		if (isSet(depth)) {
			PagesAdmin.expandPageTree(depth = "${depth}");
		}

		AssertElementPresent(
			key_itemName = "${pageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM");
	}

	macro viewPagesOrder {
		var index = "1";

		for (var pageName : list "${pageNameList}") {
			AssertTextEquals(
				key_depth = "${depth}",
				key_index = "${index}",
				locator1 = "SitePages#LIST_GROUP_ITEM_ROW_ENTRY",
				value1 = "${pageName}");

			var index = ${index} + 1;
		}
	}

	macro viewPageStatus {
		if (!(isSet(index))) {
			var index = "1";
		}

		AssertTextEquals(
			index = "${index}",
			key_itemName = "${pageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_STATUS",
			value1 = "${status}");
	}

	macro viewPageTemplate {
		Click(locator1 = "ControlMenu#INFO");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#CUSTOMIZED_PAGE_INFO",
			value1 = "This page is linked to a page template. Disable the automatic propagation of changes to this page to be able to make modifications.");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		AssertTextEquals(
			locator1 = "Message#ERROR_3",
			value1 = "Some page settings are unavailable because Inherit Changes is enabled. To change these settings, disable Inherit Changes under the General section.");

		AssertChecked.assertCheckedNotVisible(locator1 = "SitePagesEditPage#PAGE_TYPE_TEMPLATE_AUTOMATICALLY_APPLY_CHANGES_CHECKBOX_GENERIC");
	}

	macro viewPageType {
		AssertElementPresent(
			key_pageName = "${pageName}",
			key_pageType = "${pageType}",
			locator1 = "SitePages#LIST_GROUP_ITEM_PAGE_TYPE");
	}

	macro viewPanelPortletList {
		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		var key_componentName = "${componentName}";

		if (IsElementPresent(locator1 = "SitePages#DETAILS_PAGE_TYPE_PANEL_COMPONENT_TREE_ARROW")) {
			Click(locator1 = "SitePages#DETAILS_PAGE_TYPE_PANEL_COMPONENT_TREE_ARROW");
		}

		AssertElementPresent(locator1 = "SitePages#DETAILS_PAGE_TYPE_PANEL_COMPONENT_TREE_EXPANDED");

		for (var portletName : list "${portletNameList}") {
			if ("${portletName}" == "Portal Directory") {
				var key_componentOrPortletName = "Directory";
			}
			else {
				var key_componentOrPortletName = StringUtil.extractChars("${portletName}");
			}

			AssertElementPresent(locator1 = "SitePagesEditPage#PAGE_TYPE_PANEL_CHECKBOX_INPUT");
		}
	}

	macro viewSelectedPageItem {
		AssertChecked.assertCheckedNotVisible(
			key_pageName = "${pageName}",
			locator1 = "SitePages#LIST_GROUP_ITEM_CHECKBOX");
	}

	macro viewWidgetPageCurrentTheme {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Look and Feel");

		if (isSet(themeName)) {
			AssertTextPresent(
				locator1 = "SitePagesEditPage#VIEW_THEME",
				value1 = "${themeName}");
		}

		if (isSet(checkThemeSettingList)) {
			for (var themeSetting : list "${checkThemeSettingList}") {
				AssertChecked.assertCheckedNotVisible(
					key_toggleSwitchLabel = "${themeSetting}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(uncheckThemeSettingList)) {
			for (var themeSetting : list "${uncheckThemeSettingList}") {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_toggleSwitchLabel = "${themeSetting}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}
	}

}