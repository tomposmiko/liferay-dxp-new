definition {

	macro _addPageTypeEmbedded {
		Type(
			locator1 = "TextInput#URL",
			value1 = "${pageTypeURL}");

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesEditPage#PAGE_TYPE_DESCRIPTION",
			value1 = "Show content from another website.");
	}

	macro _addPageTypeFullPageApplication {
		Select(
			locator1 = "SitePagesEditPage#PAGE_TYPE_FULL_PAGE_APPLICATION_SELECT",
			value1 = "${portlet}");
	}

	macro _addPageTypePanel {
		var key_componentOrPortletName = "${componentName}";

		Click(locator1 = "SitePagesEditPage#PAGE_TYPE_PANEL_CHECKBOX");

		var key_componentOrPortletName = StringUtil.lowerCase("${componentName}");

		AssertElementPresent(locator1 = "SitePagesEditPage#PAGE_TYPE_PANEL_CHECKBOX_INPUT");
	}

	macro _configurePage {
		if ("${sitePageType}" == "Embedded") {
			Page._addPageTypeEmbedded(pageTypeURL = "${pageTypeURL}");
		}
		else if ("${sitePageType}" == "Panel") {
			Page._addPageTypePanel(componentName = "${componentName}");
		}
		else if ("${sitePageType}" == "Widget Page") {
			var key_columnName = "${columnName}";

			Click(locator1 = "SitePagesEditPage#LAYOUT_CARD");
		}
		else if ("${sitePageType}" == "Content Page") {
			Select(
				locator1 = "SitePagesEditPage#LAYOUT_PAGE_TEMPLATE_SELECT",
				value1 = "${layoutPageTemplateName}");
		}
		else if ("${sitePageType}" == "Full Page Application") {
			Page._addPageTypeFullPageApplication(portlet = "${portlet}");
		}
	}

	macro addCategory {
		AssetCategorization.addCategory(
			categoryName = "${categoryName}",
			vocabularyName = "${vocabularyName}");
	}

	macro addPageTranslations {
		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "${pageTranslation}");

		PortletEntry.inputName(name = "${pageTranslationName}");

		Button.clickSave();
	}

	macro assertAlternateURL {
		var HTML = '''<link data-senna-track="temporary" href="''';

		if ("${locale}" == "zh") {
			var zhAlternate = '''" hreflang="zh-CN" rel="alternate">''';
			var pageSource = StringUtil.add("${HTML}", "${portalURL}/zh/web/guest${zhAlternate}", "");
		}
		else if ("${locale}" == "es") {
			var esAlternate = '''" hreflang="es-ES" rel="alternate">''';
			var pageSource = StringUtil.add("${HTML}", "${portalURL}/es/web/guest${esAlternate}", "");
		}

		AssertHTMLSourceTextPresent(value1 = "${pageSource}");
	}

	macro assertCanonicalURL {
		var HTML = '''<link data-senna-track="temporary" href="''';

		var HTML2 = '''" rel="canonical">''';

		if (isSet(customCanonicalURL)) {
			var portalURL = "${customCanonicalURL}";
		}
		else if (isSet(locale)) {
			var portalURL = "${portalURL}/${locale}/web/guest";
		}
		else {
			var portalURL = "${portalURL}/web/guest";
		}

		if (isSet(pageName)) {
			var pageName = StringUtil.lowerCase("${pageName}");
			var pageNameURL = StringUtil.replace("${pageName}", " ", "-");
			var pageSource = StringUtil.add("${HTML}", "${portalURL}/${pageNameURL}${HTML2}", "");
		}
		else {
			var pageSource = StringUtil.add("${HTML}", "${portalURL}${HTML2}", "");
		}

		AssertHTMLSourceTextPresent(value1 = "${pageSource}");
	}

	macro assertDefaultAlternateURL {
		var HTML = '''<link data-senna-track="temporary" href="''';

		var HTML2 = '''" hreflang="x-default" rel="alternate">''';
		var pageSource = StringUtil.add("${HTML}", "${portalURL}${HTML2}", "");

		AssertHTMLSourceTextPresent(value1 = "${pageSource}");
	}

	macro assertNodePortPG {
		var key_nodePort = "${nodePort}";

		AssertTextEquals.assertPartialText(
			locator1 = "Home#NODE_NAME",
			value1 = "${nodePort}");
	}

	macro changeSinglePageTheme {
		ContentPages.gotoPageEditor();

		PageEditor.gotoTab(tabName = "Page Design Options");

		Click(locator1 = "PageEditor#MORE_LINK");

		Click(locator1 = "SitePagesEditPage#REGULAR_UNIQUE_LOOK_AND_FEEL");

		Click(locator1 = "SitePagesEditPage#CHANGE_CURRENT_THEME_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		LexiconCard.viewCardTitle(card = "${themeName}");

		LexiconCard.clickCardTitle(card = "${themeName}");

		SelectFrameTop(value1 = "relative=top");

		PortletEntry.save();
	}

	macro clearFiltersInAppliedFilters {
		Click(
			button = "Clear Filters",
			locator1 = "PageEditor#APPLIED_FILTERS_INNER_BUTTON");

		AssertElementNotPresent(locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER");
	}

	macro configureCanonicalURL {
		var checkboxName = "Use Custom Canonical URL";

		if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
			Click(locator1 = "Checkbox#ANY_CHECKBOX");

			AssertVisible(
				key_infoMessage = "Info:Due to the customization of the canonical URL, depending on the platform this page is shared, the Open Graph metadata shown might not be the one configured in this page.",
				locator1 = "Message#INFO_SPECIFIC",
				value1 = "Info:Due to the customization of the canonical URL, depending on the platform this page is shared, the Open Graph metadata shown might not be the one configured in this page.");
		}

		if (isSet(locale)) {
			PortletEntry.changeLocale(locale = "${locale}");
		}

		Type(
			locator1 = "TextInput#CUSTOM_CANONICAL_URL",
			value1 = "${customCanonicalURL}");

		PortletEntry.save();
	}

	macro deleteFriendlyURLPG {
		Navigator.gotoNavTab(navTab = "General");

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "${friendlyUrlLocalized}");

		Type(
			locator1 = "TextInput#FRIENDLY_URL",
			value1 = " ");

		Button.clickSave();
	}

	macro disableMobileDeviceRulesAreInheritedFromPublicPages {
		Uncheck.uncheckHiddenToggleSwitch(locator1 = "ToggleSwitch#INHERIT_MOBILE_DEVICE_RULES_FROM_PAGE");
	}

	macro editFriendlyURL {
		Type(
			locator1 = "TextInput#FRIENDLY_URL",
			value1 = "${friendlyURLEdit}");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Alert.closeMessage(messageType = "SUCCESS");
	}

	macro editName {
		Alert.closeMessage(messageType = "SUCCESS");

		PortletEntry.inputName(name = "${pageNameEdit}");

		Button.clickSave();
	}

	macro editPageMetadata {
		Navigator.gotoNavTab(navTab = "SEO");

		Type.typeClickAt(
			key_text = "Title",
			locator1 = "TextInput#ANY",
			value1 = "${htmlTitle}");

		Type.typeClickAt(
			key_text = "Description",
			locator1 = "TextInput#ANY",
			value1 = "${metaTagsDescription}");

		Type.typeClickAt(
			key_text = "keywords",
			locator1 = "TextArea#ANY",
			value1 = "${metaTagsKeywords}");

		Button.clickSave();
	}

	macro getAuthTokenFromHtmlSource {
		var javaScript = '''
		var authToken = Liferay.authToken;

		return authToken;
		''';
		var authToken = selenium.getEval("${javaScript}");

		echo("## * Auth Token: ${authToken}");

		return "${authToken}";
	}

	macro getPlidFromHtmlSource {
		var javaScript = '''
		var plid = Liferay.ThemeDisplay.getPlid();

		return plid;
		''';
		var plid = selenium.getEval("${javaScript}");

		echo("## * p_l_id: ${plid}");

		return "${plid}";
	}

	macro getTextCountFromHtmlSource {
		var pageSource = selenium.getHtmlSource();

		echo("## * Page Source: ${pageSource}");

		return "${pageSource}";

		var count = StringUtil.count("${pageSource}", "${text}");

		echo("## * Count: ${count}");

		return "${count}";
	}

	macro gotoChildPagePG {
		var key_pageName = "${pageName}";

		ClickNoError(locator1 = "Home#PAGE");

		MouseOver(locator1 = "Home#SITE_NAME");

		MouseOver(locator1 = "NavigationMenusWidget#CHILD_TOGGLE");

		AssertVisible(
			key_childPageName = "${childPageName}",
			locator1 = "Home#PAGE_CHILD_PAGE");

		Click(
			key_childPageName = "${childPageName}",
			locator1 = "Home#PAGE_CHILD_PAGE");
	}

	macro gotoCollectionEntryEllipsisItem {
		LexiconTable.clickEllipsisItem(
			item = "${item}",
			tableEntry = "${tableEntry}");
	}

	macro gotoFriendlyURLHistory {
		Click(locator1 = "Icon#FRIENDLY_URL_HISTORY");
	}

	macro gotoPagePanelPortlet {
		var key_portletName = "${portletName}";

		AssertClick(
			locator1 = "Panel#MENU_ITEM",
			value1 = "${portletName}");
	}

	macro localizedPG {
		Click(
			key_pageLocale = "${pageLocale}",
			locator1 = "Home#PORTAL_LOCALIZATION_DEFAULT_LANGUAGE_MESSAGE");
	}

	macro manageDeviceFamilyActions {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage Actions",
			rowEntry = "${deviceFamilyName}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "Button#ADD_ACTION");

		PortletEntry.inputName(name = "${actionName}");

		Select(
			locator1 = "MobileDevice#ADD_ACTION_TYPE_SELECT",
			value1 = "${actionType}");

		if ("${actionType}" == "Redirect to URL") {
			Type(
				locator1 = "TextInput#URL",
				value1 = "${actionURL}");
		}
		else if ("${actionType}" == "Redirect to Site") {
			Select(
				locator1 = "MobileDevice#ADD_ACTION_SITE_SELECT",
				value1 = "${siteName}");

			Select(
				locator1 = "MobileDevice#ADD_ACTION_PAGE_SELECT",
				value1 = "${pageName}");
		}

		PortletEntry.save();

		SelectFrame(value1 = "relative=top");

		var key_modalTitle = "Actions";

		Click(locator1 = "Button#CLOSE_MODAL");
	}

	macro openURLLocale {
		Navigator.openSpecificURL(url = "${localizationPageURL}");

		AssertLocation(value1 = "${localizationPageURL}");
	}

	macro removeOldFriendlyURL {
		AssertVisible(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");

		MouseOver(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");

		Click(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "Icon#FRIENDLY_URL_HISTORY_ITEM_DELETE");

		AssertElementNotPresent(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");
	}

	macro restoreOldFriendlyURL {
		MouseOver(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");

		Click(locator1 = "Icon#FRIENDLY_URL_HISTORY_ITEM_RESTORE");

		AssertVisible(
			key_activeURL = "${restoredURL}",
			locator1 = "SitePages#FRIENDLY_URL_ACTIVE_URL");

		AssertVisible(
			key_oldFriendlyURL = "${activeURL}",
			locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		AssertVisible(
			locator1 = "TextInput#FRIENDLY_URL",
			value1 = "${friendlyURLEdit}");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Alert.closeMessage(messageType = "SUCCESS");
	}

	macro searchInCollectionFilter {
		if (!(isSet(index))) {
			var index = "1";
		}

		Type(
			index = "${index}",
			locator1 = "PageEditor#COLLECTION_FILTER_SEARCH_FIELD",
			value1 = "${searchTerm}");

		KeyPress(
			index = "${index}",
			locator1 = "PageEditor#COLLECTION_FILTER_SEARCH_FIELD",
			value1 = "\RETURN");
	}

	macro selectFilterInCollectionFilter {
		if (isSet(columnNumber)) {
			Click.clickNoWaitForVisible(
				key_columnNumber = "${columnNumber}",
				key_elementHeader = "//label[normalize-space(text())='${title}']//following-sibling::div//button[contains(@class,'dropdown-toggle')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
		else {
			Click(
				key_title = "${title}",
				locator1 = "PageEditor#COLLECTION_FILTER_DROPDOWN_TOGGLE");
		}

		if (isSet(searchTerm)) {
			Type(
				locator1 = "MenuItem#SEARCH_FIELD",
				value1 = "${searchTerm}");
		}

		if (isSet(multipleSelection)) {
			for (var categoryName : list "${categoryNameList}") {
				Check.checkNotVisible(
					key_checkboxName = "${categoryName}",
					locator1 = "MenuItem#ANY_CHECKBOX");

				Pause(locator1 = "3000");

				AssertChecked.assertCheckedNotVisible(
					key_checkboxName = "${categoryName}",
					locator1 = "MenuItem#ANY_CHECKBOX");
			}

			DropdownMenuItem.click(menuItem = "Apply");
		}
		else {
			Click.clickAtNotVisible(
				key_radioName = "${filterName}",
				locator1 = "MenuItem#ANY_RADIO");
		}

		if (isSet(columnNumber)) {
			AssertTextEquals(
				key_columnNumber = "${columnNumber}",
				key_elementHeader = "//label[normalize-space(text())='${title}']//following-sibling::div//button[contains(@class,'dropdown-toggle')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "${selectedName}");
		}
		else {
			AssertTextEquals(
				key_title = "${title}",
				locator1 = "PageEditor#COLLECTION_FILTER_DROPDOWN_TOGGLE",
				value1 = "${selectedName}");
		}
	}

	macro selectMobileDeviceFamily {
		WaitForLiferayEvent.initializeLiferayEventLog();

		AssertClick(
			locator1 = "Button#SELECT_MOBILE_DEVICE_RULES",
			value1 = "Select");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		var key_deviceFamilyName = "${deviceFamilyName}";

		AssertClick(
			locator1 = "MobileDevice#DEVICE_FAMILY_TABLE_NAME_LINK",
			value1 = "${deviceFamilyName}");

		SelectFrame(value1 = "relative=top");
	}

	macro toggleHiddenFromNavigationMenuWidget {
		if ("${toggleValue}" == "enable") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Hidden from Navigation Menu Widget",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${toggleValue}" == "disable") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Hidden from Navigation Menu Widget",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else {
			fail("Failed. Please set ${toggleValue} to enable or disable.");
		}
	}

	macro togglePageTemplateInheritChanges {
		if ("${toggleValue}" == "enable") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Inherit Changes",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${toggleValue}" == "disable") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Inherit Changes",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro uploadFileForLogo {
		AssertClick(
			locator1 = "Button#CHANGE_LOGO",
			value1 = "Change");

		SelectFrame(locator1 = "SitePages#LOGO_UPLOAD_IMAGE_IFRAME");

		AssertElementPresent(locator1 = "SitePages#LOGO_UPLOAD_IMAGE_BUTTON");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "${logoFile}");

		Pause(locator1 = "10000");

		Button.clickDone();

		Pause(locator1 = "5000");

		SelectFrameTop();

		PortletEntry.save();
	}

	macro viewActiveURL {
		AssertVisible(
			key_activeURL = "${activeURL}",
			locator1 = "SitePages#FRIENDLY_URL_ACTIVE_URL");
	}

	macro viewChildPageDropdown {
		ClickNoError(locator1 = "Home#${viewChildPageDropdown}");

		if (isSet(javaScriptPage)) {
			AssertConfirm.waitForConfirmation(value1 = "${javaScriptPage}");
		}

		Click.clickAtNotVisible(locator1 = "//div[@id='navigationCollapse']");

		WaitForElementPresent(locator1 = "//script[contains(@src,'/o/frontend-js-aui-web/liferay/menu_toggle.js')]");

		MouseOver(locator1 = "Home#PAGE_2");

		var key_childPageName = "${childPageName}";

		AssertTextEquals(
			locator1 = "Home#PAGE_CHILD_PAGE",
			value1 = "${childPageName}");
	}

	macro viewCollectionItem {
		if (isSet(key_rowNumber)) {
			AssertTextEquals.assertPartialText(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "${itemName}");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_1",
				value1 = "${itemName}");
		}
	}

	macro viewCurrentPage {
		AssertVisible(
			key_pageName = "${pageName}",
			locator1 = "Home#PAGE_ACTIVE");
	}

	macro viewCustomLogoPG {
		AssertElementPresent(locator1 = "Home#CUSTOM_LOGO");

		AssertElementNotPresent(locator1 = "Home#DEFAULT_LOGO");
	}

	macro viewDefaultLogoPG {
		AssertElementPresent(locator1 = "Home#DEFAULT_LOGO");

		AssertElementNotPresent(locator1 = "Home#CUSTOM_LOGO");
	}

	macro viewDefaultSiteTemplatePagesPG {
		Click(locator1 = "Home#PAGE_NAVIGATION_BAR");

		var key_pageName = "${pageName}";

		AssertTextEquals(
			locator1 = "Home#PAGE_TEMPLATE_1",
			value1 = "${pageName}");

		AssertVisible(
			key_siteName = "${siteName}",
			locator1 = "NavBar#GO_TO_HOME_PAGE_LINK");
	}

	macro viewFriendlyURL {
		AssertTextEquals(
			locator1 = "SitePages#DETAILS_FRIENDLY_BASE_URL",
			value1 = "${siteFriendlyURL}");
	}

	macro viewFriendlyURLLanguageOptionsPG {
		Pause(locator1 = "3000");

		Click(
			key_fieldName = "${fieldName}",
			locator1 = "Button#LOCALIZATION");

		for (var locale : list "${currentLanguageList}") {
			AssertElementPresent(
				key_locale = "${locale}",
				locator1 = "Translation#LOCALIZATION_NAME");
		}

		if ("${assertUnavailableLanguages}" == "true") {
			for (var locale : list "${unavailableLanguageList}") {
				AssertElementNotPresent(
					key_locale = "${locale}",
					locator1 = "Translation#LOCALIZATION_NAME");
			}
		}

		Click(
			key_fieldName = "${fieldName}",
			locator1 = "Button#LOCALIZATION");
	}

	macro viewInactiveRequestMessage {
		AssertTextEquals(
			key_resource = "${resource}",
			locator1 = "Home#STATUS_MESSAGE",
			value1 = "This ${resource} is inactive. Please contact the administrator.");
	}

	macro viewLayoutLogoPG {
		if ("${assertLayoutLogoPresent}" == "true") {
			AssertElementPresent(locator1 = "Home#LAYOUT_LOGO");
		}
		else {
			AssertElementNotPresent(locator1 = "Home#LAYOUT_LOGO");
		}
	}

	macro viewNoDeletePagesAssociatedWithSiteTemplate {
		if (isSet(pageName)) {
			Click(
				key_itemName = "${pageName}",
				locator1 = "SitePages#LIST_GROUP_ITEM");
		}

		Click.waitForMenuToggleJSClick(
			key_pageName = "${page}",
			locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		MenuItem.viewNotPresent(menuItem = "Delete");

		Click.waitForMenuToggleJSClick(
			key_pageName = "${page}",
			locator1 = "SitePages#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		PortletEntry.selectAll();

		AssertElementPresent(
			key_text = "times-circle",
			locator1 = "Icon#ANY_DISABLED");
	}

	macro viewNoOldFriendlyURL {
		for (var oldFriendlyURL : list "${oldFriendlyURLs}") {
			AssertElementNotPresent(
				key_oldFriendlyURL = "${oldFriendlyURL}",
				locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");
		}
	}

	macro viewNoPG {
		var key_pageName = "${pageName}";

		AssertElementNotPresent(locator1 = "Home#PAGE");
	}

	macro viewNoSelectCategory {
		Navigator.gotoNavTab(navTab = "SEO");

		AssertElementNotPresent(
			key_vocabularyName = "${vocabularyName}",
			locator1 = "AssetCategorization#CATEGORY_SELECT");
	}

	macro viewOldFriendlyURL {
		if (isSet(lastOldFriendlyURL)) {
			AssertVisible(
				key_oldFriendlyURL = "${lastOldFriendlyURL}",
				locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM_LAST");
		}

		AssertVisible(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "SitePages#FRIENDLY_URL_HISTORY_ITEM");
	}

	macro viewPageFriendlyURLPG {
		if (isSet(friendlyUrlLocalized)) {
			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "${friendlyUrlLocalized}");
		}

		AssertTextEquals(
			locator1 = "TextInput#FRIENDLY_URL",
			value1 = "/${pageName}");
	}

	macro viewPageLayoutColumn {
		AssertElementPresent(
			key_columnName = "${columnName}",
			locator1 = "SitePagesEditPage#LAYOUT_CARD");
	}

	macro viewPageLockCheck {
		Click(locator1 = "ControlMenu#INFO");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#CUSTOMIZED_PAGE_INFO",
			value1 = "This page is linked to a site template which does not allow modifications to it.");
	}

	macro viewPageMetadata {
		Navigator.gotoNavTab(navTab = "SEO");

		AssertTextEquals(
			key_text = "Title",
			locator1 = "TextInput#ANY",
			value1 = "${htmlTitle}");

		AssertTextEquals(
			key_text = "Description",
			locator1 = "TextInput#ANY",
			value1 = "${metaTagsDescription}");

		AssertTextEquals(
			key_text = "keywords",
			locator1 = "TextArea#ANY",
			value1 = "${metaTagsKeywords}");
	}

	macro viewPageTemplateTypeNotPresent {
		LexiconCard.viewCardNotPresent(card = "${pageTemplateName}");
	}

	macro viewPageTemplateTypePresent {
		LexiconCard.viewCardPresent(card = "${pageTemplateName}");
	}

	macro viewPanelPortletListPG {
		var key_componentName = "${componentName}";

		AssertTextEquals(
			locator1 = "Panel#PANEL_TITLE",
			value1 = "${componentName}");

		var key_pageName = "${pageName}";

		AssertTextEquals(
			locator1 = "Panel#PANEL_PAGE_TITLE",
			value1 = "${pageName}");

		AssertTextEquals(
			locator1 = "Panel#PANEL_PAGE_DEFAULT_INFORMATION",
			value1 = "Please select a tool from the left menu.");

		for (var portletName : list "${portletNameList}") {
			var key_portletName = "${portletName}";

			AssertTextEquals(
				locator1 = "Panel#MENU_ITEM",
				value1 = "${portletName}");
		}
	}

	macro viewPreview {
		if (isSet(key_imageName)) {
			AssertVisible(locator1 = "SitePagesEditPage#PREVIEW_IMAGE");
		}

		AssertTextEquals(
			locator1 = "SitePagesEditPage#PREVIEW_TITLE",
			value1 = "${htmlTitle}");

		var pageNameURL = StringUtil.lowerCase("${pageName}");
		var pageNameURL = StringUtil.replace("${pageNameURL}", " ", "-");
		var url = "${portalURL}/web/guest/${pageNameURL}";

		if (isSet(siteNameURL)) {
			if (isSet(pageName)) {
				var url = "${portalURL}/web/${siteNameURL}/${pageNameURL}";
			}
			else {
				var url = "${portalURL}/web/${siteNameURL}";
			}
		}

		if (isSet(openGraph)) {
			var url = StringUtil.upperCase("${url}");
		}

		if (isSet(locale)) {
			var languageName = StringUtil.extractFirst("${locale}", "-");

			if (isSet(openGraph)) {
				var languageName = StringUtil.upperCase("${languageName}");
				var portalURL = StringUtil.upperCase("${portalURL}");
			}

			var url = StringUtil.replace("${url}", "${portalURL}", "${portalURL}/${languageName}");
		}

		AssertTextEquals(
			locator1 = "SitePagesEditPage#PREVIEW_URL",
			value1 = "${url}");

		if (isSet(description)) {
			AssertTextEquals(
				locator1 = "SitePagesEditPage#PREVIEW_DESCRIPTION",
				value1 = "${description}");
		}

		if (isSet(truncatedHTMLTitle)) {
			ProductMenuHelper.closeProductMenu();

			takeScreenshot();

			if (isSet(openGraph)) {
				ScrollWebElementIntoView(locator1 = "Button#SAVE");

				SikuliAssertElementPresent(locator1 = "SitePagesEditPage#PREVIEW_TITLE_ELLIPSES_OG");
			}
			else {
				ScrollWebElementIntoView(locator1 = "//label[contains(.,'Change Frequency')]");

				SikuliAssertElementPresent(locator1 = "SitePagesEditPage#PREVIEW_TITLE_ELLIPSES");
			}
		}

		if (isSet(truncatedURL)) {
			if (isSet(openGraph)) {
				SikuliAssertElementPresent(locator1 = "SitePagesEditPage#PREVIEW_URL_ELLIPSES_OG");
			}
			else {
				ScrollWebElementIntoView(locator1 = "//label[contains(.,'Change Frequency')]");

				ProductMenuHelper.closeProductMenu();

				SikuliAssertElementPresent(locator1 = "SitePagesEditPage#PREVIEW_URL_ELLIPSES");
			}
		}
	}

	macro viewRTLLayout {
		AssertCssValue(
			locator1 = "Home#SITE_NAME",
			locator2 = "direction",
			value1 = "rtl");

		AssertCssValue(
			locator1 = "ProductMenu#PRODUCT_MENU_OPENED",
			locator2 = "text-align",
			value1 = "right");

		AssertCssValue(
			locator1 = "ProductMenu#PRODUCT_MENU_OPENED",
			locator2 = "right",
			value1 = "0px");

		var sideNavWidth = Css.getCssValue(
			attribute = "width",
			element = "//div[contains(@class,'product-menu-open')]");

		AssertCssValue(
			locator1 = "Home#SITE_WRAPPER",
			locator2 = "padding-right",
			value1 = "${sideNavWidth}");
	}

	macro viewSelectedLayoutColumn {
		AssertElementPresent(
			key_columnName = "${columnName}",
			locator1 = "SitePagesEditPage#LAYOUT_CARD_SELECTED");
	}

	macro viewSiteNameTranslationsPG {
		var list1 = ListUtil.newListFromString("${localeList}");
		var list2 = ListUtil.newListFromString("${siteNameList}");
		var list3 = ListUtil.newListFromString("${textIconList}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		while ("${i}" != "${size}") {
			var locale = ListUtil.get("${list1}", "${i}");
			var siteName = ListUtil.get("${list2}", "${i}");
			var textIcon = ListUtil.get("${list3}", "${i}");

			LanguagePortlet.selectLanguagePG(
				locale = "${locale}",
				textIcon = "${textIcon}");

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = "${siteName}");

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}
	}

	macro viewSpecificPG {
		for (var pageName : list "${pageNameList}") {
			var key_pageName = "${pageName}";

			AssertTextEquals(
				locator1 = "Home#PAGE",
				value1 = "${pageName}");
		}
	}

	macro viewTranslationsPG {
		Navigator.openSpecificURL(url = "${sitePageURL}");

		AssertLocation(value1 = "${sitePageURL}");

		Alert.viewLocalizationMessage(
			defaultLanguageLocalizationMessage = "${defaultLanguageLocalizationMessage}",
			key_pageLocale = "${defaultLanguageLocalizationMessage}",
			preferredLanguageLocalizationMessage = "${preferredLanguageLocalizationMessage}",
			translationLanguageLocalizationMessage = "${translationLanguageLocalizationMessage}");
	}

	macro viewURLLocale {
		if (isSet(localizationOption)) {
			AssertClick(
				key_pageLocale = "${localizationOption}",
				locator1 = "Home#PORTAL_LOCALIZATION_DEFAULT_LANGUAGE_MESSAGE",
				value1 = "${localizationOption}");
		}

		AssertLocation(value1 = "${localizationPageURL}");
	}

	macro viewWithWorkflowPG {
		Pause(locator1 = "5000");

		if ("${workflowStatus}" == "Ready for Publication") {
			AssertElementPresent(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION");
		}
		else {
			AssertTextEquals(
				locator1 = "Message#WORKFLOW_STATUS",
				value1 = "${workflowStatus}");
		}

		if ("${livePage}" == "true") {
			AssertClick.assertPartialTextClickAt(
				locator1 = "Staging#LIVE_BUTTON",
				value1 = "Live");

			var key_pageName = "${pageName}";

			AssertElementNotPresent(locator1 = "Home#PAGE");
		}
	}

}