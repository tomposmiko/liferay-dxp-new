definition {
	macro addCP {
		var key_navItem = "Password Policies";

		AssertElementPresent(locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK");

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "${passwordPolicyName}");

		if ("${enableLockout}" == "true") {
			var key_panel = "Lockout";

			if (IsElementPresent(locator1 = "Panel#PANEL_COLLAPSED")) {
				Panel.expandPanel(panel = "Lockout");
			}

			Check.checkToggleSwitch(locator1 = "Checkbox#ENABLE_LOCKOUT");

			if (isSet(maximumFailure)) {
				Type(locator1 = "TextInput#MAXIMUM_FAILURE", value1 = "${maximumFailure}");

				AssertTextEquals(
					locator1 = "TextInput#MAXIMUM_FAILURE",
					value1 = "${maximumFailure}"
				);
			}
		}

		PortletEntry.save();
	}

	macro assignOrgCP {
		var key_passwordPolicyName = "${passwordPolicyName}";

		LexiconEntry.viewEntryName(rowEntry = "${passwordPolicyName}");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Assign Members",
			rowEntry = "${passwordPolicyName}"
		);

		Navigator.gotoNavItem(navItem = "Organizations");

		LexiconEntry.gotoAdd();

		SelectFrame(locator1 = "IFrame#DIALOG");

		var key_orgName = "${orgName}";

		AssertTextEquals(
			locator1 = "ContentRow#ORGANIZATION_TABLE_NAME_SECOND_COLUMN",
			value1 = "${orgName}"
		);

		Check(locator1 = "PasswordPolicies#ASSIGN_ORGANIZATIONS_TABLE_CHECKBOX");

		SelectFrameTop();

		AssertClick(locator1 = "Button#ADD", value1 = "Add");

		Alert.viewSuccessMessage();
	}

	macro editSyntaxChecking {
		PasswordPoliciesNavigator.gotoPolicy(
			passwordPolicyName = "${passwordPolicyName}"
		);

		Panel.expandPanel(panel = "Password Syntax Checking");

		if (isSet(minimumAlphaNumeric)) {
			Type(
				locator1 = "TextInput#MINIMUM_ALPHA_NUMERIC",
				value1 = "${minimumAlphaNumeric}"
			);
		}

		if (isSet(minimumLength)) {
			Type(locator1 = "TextInput#MINIMUM_LENGTH", value1 = "${minimumLength}");
		}

		if (isSet(minimumLowerCase)) {
			Type(locator1 = "TextInput#MINIMUM_LOWER_CASE", value1 = "${minimumLowerCase}");
		}

		if (isSet(minimumNumbers)) {
			Type(locator1 = "TextInput#MINIMUM_NUMBERS", value1 = "${minimumNumbers}");
		}

		if (isSet(minimumSymbols)) {
			Type(locator1 = "TextInput#MINIMUM_SYMBOLS", value1 = "${minimumSymbols}");
		}

		if (isSet(minimumUpperCase)) {
			Type(locator1 = "TextInput#MINIMUM_UPPER_CASE", value1 = "${minimumUpperCase}");
		}

		if (isSet(regularExpression)) {
			Type(locator1 = "TextInput#REGULAR_EXPRESSION", value1 = "${regularExpression}");
		}

		PortletEntry.save();
	}

	macro enableDefaultPasswordPolicyLockout {
		Panel.expandPanel(panel = "Lockout");

		Check.checkToggleSwitch(locator1 = "Checkbox#ENABLE_LOCKOUT");

		AssertTextEquals(locator1 = "TextInput#MAXIMUM_FAILURE", value1 = "3");

		PortletEntry.save();
	}

	macro enableSyntaxChecking {
		PasswordPoliciesNavigator.gotoPolicy(
			passwordPolicyName = "${passwordPolicyName}"
		);

		Panel.expandPanel(panel = "Password Syntax Checking");

		Check.checkToggleSwitch(locator1 = "Checkbox#ENABLE_SYNTAX_CHECKING");

		if ("${allowDictionaryWords}" == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "Checkbox#ALLOW_DICTIONARY_WORDS");
		}

		PortletEntry.save();
	}

	macro tearDownCP {
		var passwordPolicyName = "Default Password Policy";

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Password Policies"
		);

		var key_passwordPolicyName = "${passwordPolicyName}";

		LexiconEntry.openEntryMenu(rowEntry = "${passwordPolicyName}");

		MenuItem.click(menuItem = "Edit");

		Uncheck(locator1 = "Checkbox#ENABLE_LOCKOUT");

		PortletEntry.save();
	}

	macro togglePasswordChangeable {
		PasswordPoliciesNavigator.gotoPolicyPanel(
			passwordPolicyName = "${passwordPolicyName}",
			passwordPolicyPanel = "${passwordPolicyPanel}"
		);

		if ("${enableChangeable}" == "true") {
			Check.checkToggleSwitch(locator1 = "Checkbox#CHANGEABLE");
		}
		else {
			Uncheck.uncheckToggleSwitch(locator1 = "Checkbox#CHANGEABLE");
		}

		PortletEntry.save();
	}

	macro togglePasswordChangeRequired {
		PasswordPoliciesNavigator.gotoPolicyPanel(
			passwordPolicyName = "${passwordPolicyName}",
			passwordPolicyPanel = "${passwordPolicyPanel}"
		);

		if ("${enableChangeRequired}" == "true") {
			Check.checkToggleSwitch(locator1 = "Checkbox#CHANGE_REQUIRED");
		}
		else {
			Uncheck.uncheckToggleSwitch(locator1 = "Checkbox#CHANGE_REQUIRED");
		}

		PortletEntry.save();
	}

	macro viewPasswordPolicyLockout {
		var key_panel = "Lockout";

		if (IsElementPresent(locator1 = "Panel#PANEL_COLLAPSED")) {
			Panel.expandPanel(panel = "Lockout");
		}

		if ("${lockoutToggle}" == "disabled") {
			AssertNotChecked.assertNotCheckedNotVisible(
				locator1 = "Checkbox#ENABLE_LOCKOUT"
			);
		}
		else {
			AssertChecked.assertCheckedNotVisible(locator1 = "Checkbox#ENABLE_LOCKOUT");

			if (isSet(maximumFailure)) {
				AssertTextEquals(
					locator1 = "TextInput#MAXIMUM_FAILURE",
					value1 = "${maximumFailure}"
				);
			}
			else {
				AssertTextEquals(locator1 = "TextInput#MAXIMUM_FAILURE", value1 = "3");
			}
		}
	}
}