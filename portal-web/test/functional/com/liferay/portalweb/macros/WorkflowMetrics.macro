definition {

	macro _deleteAllSLAs {
		while (IsElementPresent(locator1 = "WorkflowMetricsSLA#SLA_ELLIPSIS_BUTTON")) {
			Click(locator1 = "WorkflowMetricsSLA#SLA_ELLIPSIS_BUTTON");

			Click(locator1 = "WorkflowMetricsSLA#DELETE_SLA_BUTTON");

			Click(locator1 = "WorkflowMetricsSLA#SLA_REMOVE_CONFIRMATION_BUTTON");

		}
	}

	macro allItemPageFilterCheck {
		var key_allItemsFilterName = "${allItemsFilterName}";

		Click(locator1 = "WorkflowAllItems#WORKFLOW_ALL_ITEMS_FILTER_BY");

		for (var assigneeName : list "${assigneeName}") {
			Click(locator1 = "WorkflowAllItems#WORKFLOW_ALL_ITEMS_FILTER_BY_ASSIGNEE_VALUE");
		}

		Click(locator1 = "WorkflowAllItems#WORKFLOW_ALL_ITEMS_FILTER_TITLE");
	}

	macro assertAllItemsValues {

		var key_assigneeName = "${assigneeName}";
		var key_taskName = "${taskName}";

		for (var isInstancePresent : list "${isPresent}") {
			var key_instanceInfo = "${isInstancePresent}";

			AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_ALL_ITEMS_TABLE_NAME");

			AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_ALL_ITEMS_TABLE_INSTANCE");

			AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_ALL_ITEMS_TABLE_TASK");
		}

		for (var isAssigneeNotPresent : list "${isNotPresent}") {
			var key_assigneeName = "${isAssigneeNotPresent}";

			AssertElementNotPresent(locator1 = "WorkflowMetrics#METRICS_ALL_ITEMS_TABLE_NAME");
		}
	}

	macro assertChartIsPresent {
		MouseOver(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART");

		AssertTextPresent(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_TOOLTIP_UNIT_VALUE",
			value1 = "${chartVelocityUnit}");
	}

	macro assertChartTotalValue {
		var key_completionVelocityUnitTotal = "${velocityUnitTotal}";
		var key_completionVelocityValueTotal = "${velocityValueTotal}";

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_ITEMS_UNIT",
			value1 = "${velocityUnitTotal}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_ITEMS_VALUE",
			value1 = "${velocityValueTotal}");
	}

	macro assertChartTotalValuePerformanceByStep {
		var key_SLABreachedValue = "${slaBreachedValue}";
		var key_rowName = "${rowName}";

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_SLA_BREACHED_VALUE",
			rowName = "${key_rowName}",
			value1 = "${key_SLABreachedValue}");
	}

	macro assertDefaultChartRangesAndUnits {
		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_COMPLETED_ITEMS_DATE_RANGE_DROPDOWN",
			value1 = "Last 30 Days");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN",
			value1 = "Last 30 Days");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN",
			value1 = "Inst / Day");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_UNIT_LABEL",
			value1 = "inst / day");
	}

	macro assertWorkloadByAssigneeCardEmptyMessage {
		var key_tabName = "${tabName}";
		var key_emptyMessage = "${emptyMessage}";

		Click(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_TAB",
			value1 = "${tabName}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_EMPTY_MESSAGE",
			value1 = "${emptyMessage}");
	}

	macro checkPendingWorkflowValues {
		AssertTextEquals(
			locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_OVERDUE_ITEMS_VALUE",
			value1 = "${key_overdue}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_ONTIME_ITEMS_VALUE",
			value1 = "${key_ontime}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_VALUE",
			value1 = "${key_pending}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_UNTRACKED_ITEMS_VALUE",
			value1 = "${key_untracked}");
	}

	macro clearAllFilter {
		Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_FILTER_CLEAR_ALL");
	}

	macro createUsersAndAssignInstances {
		var iterator = "1";
		var numberOfBlogInstances = MathUtil.sum("${numberOfBlogInstances}", "1");

		WorkflowMetrics.createUsersGroovy(numberOfUsers = "${numberOfUsers}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		while ("${iterator}" != "${numberOfBlogInstances}") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry ${iterator} Content",
				entryTitle = "Blogs Entry Title ${iterator}");

			var iterator = MathUtil.sum("${iterator}", "1");
		}

		Workflow.assignBlogEntriesToUsers(
			numberOfBlogInstances = MathUtil.sum("${numberOfBlogInstances}", "-1"),
			numberOfUsers = "${numberOfUsers}");
	}

	macro createUsersAndAssignInstancesWithGroovy {
		var iterator = "1";
		var numberOfBlogInstances = MathUtil.sum("${numberOfBlogInstances}", "1");

		WorkflowMetrics.createUsersGroovy(numberOfUsers = "${numberOfUsers}");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		while ("${iterator}" != "${numberOfBlogInstances}") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry ${iterator} Content",
				entryTitle = "Blogs Entry Title ${iterator}");

			var iterator = MathUtil.sum("${iterator}", "1");
		}

		WorkflowMetrics.executeWorkflowScript(scriptName = "assignOpenTasksToUsers.groovy");
	}

	macro createUsersGroovy {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration");

		var scriptContent = TestCase.getFileContent(fileName = "addUsersWithRoles.groovy");

		var scriptContent = StringUtil.regexReplaceFirst("${scriptContent}","numberOfUsers = 0","numberOfUsers = ${numberOfUsers}");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${scriptContent}");
	}

	macro executeWorkflowScript {
		var key_scriptName = "${scriptName}";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Server Administration");

		var scriptContent = TestCase.getFileContent(fileName = "${key_scriptName}");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${scriptContent}");
	}

	macro fillSLAForm {
		var key_slaDefinitionDays = "${slaDefinitionDays}";
		var key_slaDefinitionHours = "${slaDefinitionHours}";
		var key_slaDefinitionDescription = "${slaDefinitionDescription}";
		var key_slaDefinitionEnd = "${slaDefinitionEnd}";
		var key_slaDefinitionName = "${slaDefinitionName}";
		var key_slaDefinitionStart = "${slaDefinitionStart}";

		Type(
			locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_NAME",
			value1 = "${key_slaDefinitionName}");

		Type(
			locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_DESCRIPTION",
			value1 = "${key_slaDefinitionDescription}");

		Click(locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_START");

		AssertClick(
			locator1 = "WorkflowMetricsSLA#SLA_DROPDOWN_START_OPTION",
			value1 = "${key_slaDefinitionStart}");

		Click(locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_STOP");

		AssertClick(
			locator1 = "WorkflowMetricsSLA#SLA_DROPDOWN_STOP_OPTION",
			value1 = "${key_slaDefinitionEnd}");

		Type(
			locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_DAYS",
			value1 = "${key_slaDefinitionDays}");

		Type(
			locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_HOURS",
			value1 = "${key_slaDefinitionHours}");
	}

	macro goToCreatedSLAForm {
		var key_workflowSLAName = "${workflowSLAName}";

		Click(
			locator1 = "WorkflowMetricsSLA#SLA_CREATED_FORM",
			value1 = "${workflowSLAName}");
	}

	macro goToDashboardAllItemsWithFilter {
		var key_workflowProcess = "${workflowProcess}";
		var key_workflowMetricsTab = "${workflowMetricsTab}";
		var key_workflowFilterOption = "${workflowFilterOption}";

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "${key_workflowProcess}");

		if ("${workflowMetricsTab}" == "PERFORMANCE") {
			Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_TAB");
		}

		if ("${workflowMetricsTab}" == "DASHBOARD") {
			Click(locator1 = "WorkflowMetrics#METRICS_DASHBOARD_TAB");
		}

		Click(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_${key_workflowFilterOption}_ITEMS_TITLE");
	}

	macro goToWorkflowProcessMetrics {
		var key_workflowProcessName = "${workflowProcessName}";

		ProductMenu.gotoPortlet(
			category = "Workflow",
			panel = "Control Panel",
			portlet = "Metrics");

		Click(
			locator1 = "WorkflowMetrics#METRICS_WORKFLOW_PROCESS_NAME",
			value1 = "${workflowProcessName}");
	}

	macro goToWorkflowSLASettings {
		var key_workflowProcessName = "${workflowProcessName}";

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "${workflowProcessName}");

		Click(locator1 = "WorkflowMetricsSLA#METRICS_MENU_SLA");

		Click(locator1 = "WorkflowMetricsSLA#METRICS_SLA_SETTINGS");
	}

	macro searchForAssigneeName {
		var key_assigneeName = "${assigneeName}";

		Click(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_SEARCH_ASSIGNEE_NAME",
			value1 = "${assigneeName}");

		Type(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_SEARCH_ASSIGNEE_NAME",
			value1 = "${assigneeName}");

		KeyPress(
			locator1 = "TextInput#SEARCH",
			value1 = "\RETURN");
	}

	macro selectDateRange {
		var key_completionVelocityDateRange = "${selectVelocityDateRange}";
		var key_endDateRange = "${endDateRange}";
		var key_startDateRange = "${startDateRange}";

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN_OPTION");

		Type(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_FROM",
			value1 = "${startDateRange}");

		Type(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_TO",
			value1 = "${endDateRange}");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_APPLY");
	}

	macro selectDateRangePerformanceByAssignee {
		var key_completionVelocityDateRange = "${selectVelocityDateRange}";
		var key_endDateRange = "${endDateRange}";
		var key_startDateRange = "${startDateRange}";

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_DATE_RANGE_DROPDOWN");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN_OPTION");

		Type(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_FROM",
			value1 = "${startDateRange}");

		Type(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_TO",
			value1 = "${endDateRange}");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_APPLY");
	}

	macro selectDateRangePerformanceByStep {
		var key_completionVelocityDateRange = "${selectVelocityDateRange}";
		var key_endDateRange = "${endDateRange}";
		var key_startDateRange = "${startDateRange}";

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_STEP_RANGE_DROPDOWN");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN_OPTION");

		Type(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_FROM",
			value1 = "${startDateRange}");

		Type(
			locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_TO",
			value1 = "${endDateRange}");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CUSTOM_RANGE_APPLY");
	}

	macro selectStepFilterPerformaceByAssignee {
		var key_velocityUnit = "${velocityUnit}";

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_VIEW_STEPS_DROPDOWN");

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_DROPDOWN_STEP_${velocityUnit}");
	}

	macro selectVelocityUnit {
		var key_velocityUnit = "${velocityUnit}";

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN");

		Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${velocityUnit}");
	}

	macro selectWorkloadByAssigneeCardFilterValue {

		for (var key_workflowStep : list "${workflowStep}") {
			Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_FILTER");

			Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_FILTER_OPTION");

			if (IsElementPresent(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_SEARCH_ASSIGNEE_NAME")) {
				Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_SEARCH_ASSIGNEE_NAME");
			}
		}
	}

	macro selectWorkloadByAssigneeCardFilterValueProcessStep {
		var key_workflowStep = "${workflowStep}";

		Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_FILTER_PROCESS_STEP");

		Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_FILTER_OPTION");

		if (IsElementPresent(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_SEARCH_ASSIGNEE_NAME")) {
			Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_SEARCH_ASSIGNEE_NAME");
		}
	}

	macro tearDown {
		WorkflowMetrics.goToWorkflowSLASettings(workflowProcessName = "Single Approver");

		if (IsElementPresent(locator1 = "WorkflowMetricsSLA#SLA_TABLE")) {
			WorkflowMetrics._deleteAllSLAs();

		}
	}

	macro validateInstanceDetails {
		var key_instanceId = "${instanceId}";
		var key_slaMessage = "${slaMessage}";
		var key_processStatus = "${processStatus}";
		var key_createdBy = "${createdBy}";
		var key_assetType = "${assetType}";
		var key_assetTitle = "${assetTitle}";
		var key_currentStep = "${currentStep}";
		var key_currentAssignee = "${currentAssignee}";
		var key_currentDateDay = DateUtil.getFormattedDate("0", "dd");
		var key_currentDateMonth = DateUtil.getCurrentMonthName();
		var key_currentDateMonthShort = StringUtil.substring("${key_currentDateMonth}", "0", "3");
		var key_currentDateYear = DateUtil.getCurrentYear();
		var key_currentDate = "${key_currentDateMonthShort} ${key_currentDateDay}, ${key_currentDateYear}";

		Click(locator1 = "WorkflowAllItems#WORKFLOW_INSTANCE_ID");

		if ("${processStatus}" == "Pending") {
			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_TITLE",
				value1 = "Item #${key_instanceId}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_SLA_MESSAGE",
				value1 = "${key_slaMessage}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_PROCESS_STATUS",
				value1 = "${key_processStatus}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_CREATED_BY",
				value1 = "${key_createdBy}");

			AssertTextEquals.assertPartialText(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_CREATION_DATE",
				value1 = "${key_currentDate}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_ASSET_TYPE",
				value1 = "${key_assetType}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_ASSET_TITLE",
				value1 = "${key_assetTitle}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_CURRENT_STEP",
				value1 = "${key_currentStep}");

			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_CURRENT_ASSIGNEE",
				value1 = "${key_currentAssignee}");

			Click(locator1 = "WorkflowAllItems#DETAIL_PAGE_CLOSE");
		}
		else if ("${processStatus}" == "Completed") {
			AssertTextEquals(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_PROCESS_STATUS",
				value1 = "Completed");

			AssertTextEquals.assertPartialText(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_END_DATE",
				value1 = "${key_currentDate}");

			AssertTextNotPresent(value1 = "Current Step");

			AssertTextNotPresent(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_CURRENT_STEP",
				value1 = "Review");

			AssertTextNotPresent(value1 = "Current Assignee");

			AssertTextNotPresent(
				locator1 = "WorkflowAllItems#DETAIL_PAGE_CURRENT_ASSIGNEE",
				value1 = "Unassigned");
		}
	}

	macro verifyDefaultUnitsForEachDateRange {
		var key_completionVelocityDateRange = "${completionVelocityDateRange}";

		for (var isUnitPresent : list "${isPresent}") {

			Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN");

			Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN_OPTION");

			Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN");

			AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitPresent}");

			if ("${isUnitPresent}" == "INST_HOUR") {
				Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitPresent}");

				AssertTextEquals(
					locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_UNIT_LABEL",
					value1 = "inst / hour");

				WorkflowMetrics.assertChartIsPresent(chartVelocityUnit = "Inst / Hour");
			}

			if ("${isUnitPresent}" == "INST_DAY") {
				Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitPresent}");

				AssertTextEquals(
					locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_UNIT_LABEL",
					value1 = "inst / day");

				WorkflowMetrics.assertChartIsPresent(chartVelocityUnit = "Inst / Day");
			}

			if ("${isUnitPresent}" == "INST_WEEK") {
				Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitPresent}");

				AssertTextEquals(
					locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_UNIT_LABEL",
					value1 = "inst / week");

				WorkflowMetrics.assertChartIsPresent(chartVelocityUnit = "Inst / Week");
			}

			if ("${isUnitPresent}" == "INST_MONTH") {
				Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitPresent}");

				AssertTextEquals(
					locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_UNIT_LABEL",
					value1 = "inst / month");

				WorkflowMetrics.assertChartIsPresent(chartVelocityUnit = "Inst / Month");
			}

			if ("${isUnitPresent}" == "INST_YEAR") {
				Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitPresent}");

				AssertTextEquals(
					locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_CHART_UNIT_LABEL",
					value1 = "inst / year");

				WorkflowMetrics.assertChartIsPresent(chartVelocityUnit = "Inst / Year");
			}
		}

		for (var isUnitNotPresent : list "${isNotPresent}") {
			Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN");

			Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_DATE_RANGE_DROPDOWN_OPTION");

			Click(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN");

			AssertElementNotPresent(locator1 = "WorkflowMetrics#METRICS_COMPLETION_VELOCITY_UNIT_DROPDOWN_OPTION_${isUnitNotPresent}");
		}
	}

	macro verifyFiltersFromDashboard {
		for (var key_workflowFilterValue : list "${isFilterOptionPresent}") {
			AssertElementPresent(locator1 = "WorkflowAllItems#WORKFLOW_ALL_ITEMS_FILTER_VALUE");
		}
	}

	macro viewItemFilterByOnAllItemsPage {
		var key_allItemsFilterName = "${allItemsFilterName}";
		var key_assigneeName = "${assigneeName}";
		var key_taskName = "${taskName}";

		if (isSet(filterValueName)) {
			WorkflowMetrics.allItemPageFilterCheck(
				allItemsFilterName = "${key_allItemsFilterName}",
				assigneeName = "${filterValueName}");
		}

		else {
			WorkflowMetrics.allItemPageFilterCheck(
				allItemsFilterName = "${key_allItemsFilterName}",
				assigneeName = "${key_assigneeName}");
		}

		WorkflowMetrics.assertAllItemsValues(
			assigneeName = "${key_assigneeName}",
			isNotPresent = "${isNotPresent}",
			isPresent = "${isPresent}",
			taskName = "${key_taskName}");

		if (isSet(filterValueName)) {
			WorkflowMetrics.allItemPageFilterCheck(
				allItemsFilterName = "${key_allItemsFilterName}",
				assigneeName = "${filterValueName}");
		}

		else {
			WorkflowMetrics.allItemPageFilterCheck(
				allItemsFilterName = "${key_allItemsFilterName}",
				assigneeName = "${key_assigneeName}");
		}
	}

	macro viewPerformanceByAssignee {
		var key_assignee = "${assignee}";
		var key_avgCompletionTime = "${avgCompletionTime}";
		var key_taskCount = "${taskCount}";

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_NAME",
			value1 = "${assignee}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_TASK_COUNT",
			value1 = "${taskCount}");

		AssertTextNotEquals(
			locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_AVG_COMPLETION_TIME",
			value1 = "0min");

		for (var isAssigneeNotPresent : list "${isNotPresent}") {
			var key_assignee = "${isAssigneeNotPresent}";

			AssertElementNotPresent(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_NAME_TABLE");
		}
	}

	macro viewUserWorkloadByStepOnAllItems {
		var key_assigneeName = "${assigneeName}";
		var key_taskName = "${taskName}";

		if ("${callingFrom}" == "CARD") {
			Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_NAME");
		}

		if ("${callingFrom}" == "PAGE") {
			Click(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_PAGE_NAME");
		}

		WorkflowMetrics.assertAllItemsValues(
			assigneeName = "${key_assigneeName}",
			isNotPresent = "${isNotPresent}",
			isPresent = "${isPresent}",
			taskName = "${key_taskName}");
	}

	macro viewWorkloadByAssignee {
		var key_assigneeName = "${assigneeName}";
		var key_overdueTaskCount = "${overdueTaskCount}";
		var key_onTimeTaskCount = "${onTimeTaskCount}";
		var key_totalPendingTaskCount = "${totalPendingTaskCount}";

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_NAME_TABLE",
			value1 = "${assigneeName}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_TASKCOUNT_OVERDUE",
			value1 = "${overdueTaskCount}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_TASKCOUNT_ON_TIME",
			value1 = "${onTimeTaskCount}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_TASKCOUNT_TOTAL_PENDING",
			value1 = "${totalPendingTaskCount}");

		for (var isAssigneeNotPresent : list "${isNotPresent}") {
			var key_assigneeName = "${isAssigneeNotPresent}";

			AssertElementNotPresent(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_NAME_TABLE");
		}
	}

	macro viewWorkloadByAssigneeCard {
		var key_tabName = "${tabName}";
		var key_taskCount = "${taskCount}";
		var key_assigneeName = "${assigneeName}";

		Click(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_TAB",
			value1 = "${tabName}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_NAME",
			value1 = "${assigneeName}");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_CARD_TASKCOUNT",
			value1 = "${taskCount}");
	}

	macro viewWorkloadByAssigneePage {
		var key_taskCount = "${taskCount}";
		var key_assigneeName = "${assigneeName}";

		AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_PAGE_NAME");

		AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_WORKLOAD_BY_ASSIGNEE_PAGE_TASKCOUNT");
	}

	macro waitForCompletedSLAtoBecomeOverdue {
		var count = "0";

		while (IsElementPresent(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_OVERDUE_ITEMS_VALUE_NONE") && ("${count}" != "${timesToRun}")) {

			echo("Waiting 5 seconds, until the Completed SLA shows up as overdue");

			Pause(locator1 = "5000");

			WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

			Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_TAB");

			count = MathUtil.sum("${count}", "1");
		}

		if ("${count}" == "${timesToRun}") {
			echo("timeout exceeded");
		}
	}

	macro waitForSLAtoBecomeOverdue {
		var count = "0";

		while (IsElementPresent(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_OVERDUE_ITEMS_VALUE_NONE") && ("${count}" != "${timesToRun}")) {

			echo("Waiting 5 seconds, until the SLA becomes overdue");

			Pause(locator1 = "5000");

			WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		}

		if ("${count}" == "${timesToRun}") {
			echo("timeout exceeded");
		}
	}

}