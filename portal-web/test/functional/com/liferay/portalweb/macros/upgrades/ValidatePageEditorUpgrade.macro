definition {

	macro configurePageEditor {
		task ("View fragment persists and could add another fragment in page editor") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.viewEntryPresent(entry = "Fragment Name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "Fragment Name");
		}

		task ("Assert could edit fragment upgrading from 7.2") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			FragmentsEditor.assertFragmentPreview(
				fragmentLocator = "//div[@class='fragment-title']/h1[@class='title']",
				text = "LOREM IPSUM DOLOR SIT AMET");

			Button.clickPublish();

			Alert.viewSuccessMessageText(successMessage = "Your request completed successfully.");

			AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException:");
		}

		task ("Assert could delete fragment upgrading from 7.2") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Fragment Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Fragment Name");
		}

		task ("Assert the experience survived and could edit") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.changeExperience(newExperience = "New Experience Name");

			PageEditor.addComment(
				fragmentComment = "This is a fragment comment.",
				fragmentName = "Title");

			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.removeFragment(fragmentName = "Title");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_CENTER_TEXT",
				value1 = "There are no comments yet.");

			PageEditor.changeExperience(newExperience = "New Experience Name");

			PageEditor.viewCommentList(
				commentCount = "1 Comment",
				fragmentName = "Title",
				openComment = "true");
		}

		task ("Assert layout has been converted to a section with columns inside") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Layout Content Page",
				siteName = "Test Site Name");

			for (var fragmentName : list "Container,Grid") {
				PageEditor.viewFragment(fragmentName = ${fragmentName});
			}
		}

		task ("Assert translation is working after migration") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Translation Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "New editable fragment en-US text",
				fragmentName = "Rich Text");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "zh-CN");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "New editable fragment zh-CN text",
				fragmentName = "Rich Text");
		}

		task ("Assert mapped content is working after migration") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Webcontent Title");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Webcontent Content");

			DisplayPageTemplate.clickPencilItem(item = "Edit Webcontent Title");

			WebContent.addWithStructureCP(
				webContentRichText = "Webcontent Content Edit",
				webContentRichTextFieldLabel = "content",
				webContentTitle = "Webcontent Title Edit");

			PortletEntry.publish();

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Webcontent Title Edit");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Webcontent Content Edit");
		}

		task ("Assert could add fragment added to display page after upgrading") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Edit");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Rich Text");
		}
	}

	macro viewConfigurationChecked {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.gotoAdvanced(fragmentName = "Button");

		AssertChecked.assertCheckedNotVisible(
			checkboxName = "Hide from Site Search Results",
			locator1 = "Checkbox#ANY_CHECKBOX");
	}

	macro viewContributedFragmentStyle {
		task ("Navigate to page in view mode") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			Navigator._gotoPage(pageName = "Test Fragment Content Page");

			Refresh();

			WaitForPageLoad();
		}

		task ("Assert styles of Container in view mode") {
			SetWindowSize(value1 = "1800,1040");

			var screenWidth = selenium.getElementWidth("//body");
			var containerWidth = selenium.getElementWidth("xpath=(//div[contains(@class,'lfr-layout-structure-item-container')])[2]");

			TestUtils.assertNotEquals(
				actual = ${containerWidth},
				expected = ${screenWidth});

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "Container",
				styleName = "backgroundColor",
				styleValue = "rgb(46, 90, 172)");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = 2,
				styleName = "paddingBottom",
				styleValue = 3);

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = 2,
				styleName = "paddingTop",
				styleValue = 3);

			AssertCssValue(
				locator1 = "xpath=(//div[contains(@class,'lfr-layout-structure-item-container')])[2]",
				locator2 = "max-width",
				value1 = "${containerWidth}px");
		}

		task ("Assert styles of Button in view mode") {
			ContentPages.viewFragmentCommonStyle(
				fragmentName = "button",
				styleName = "textAlign",
				styleValue = "center");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "button",
				styleName = "marginBottom",
				styleValue = 1);

			PageEditor.viewFragmentStyle(
				fragmentName = "Button",
				size = "lg",
				type = "link");
		}

		task ("Assert styles of Card in view mode") {
			ContentPages.viewFragmentCommonStyle(
				fragmentName = "card",
				styleName = "textAlign",
				styleValue = "center");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "card",
				styleName = "borderRadius",
				styleValue = "0.375rem");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "card",
				styleName = "boxShadow",
				styleValue = "rgba(0, 0, 0, 0.176) 0px 1rem 3rem");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "card",
				styleName = "marginBottom",
				styleValue = 1);

			PageEditor.viewFragmentStyle(
				fragmentName = "Card",
				imageSize = 0);
		}

		task ("Assert styles of Heading in view mode") {
			ContentPages.viewFragmentCommonStyle(
				fragmentName = "heading",
				styleName = "textAlign",
				styleValue = "center");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "heading",
				styleName = "color",
				styleValue = "rgb(40, 125, 60)");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "heading",
				styleName = "marginBottom",
				styleValue = 1);

			PageEditor.viewFragmentStyle(
				fragmentName = "Heading",
				headingLevel = "h2");
		}

		task ("Assert styles of HTML in view mode") {
			ContentPages.viewFragmentCommonStyle(
				fragmentName = "html",
				styleName = "marginBottom",
				styleValue = 1);
		}

		task ("Assert styles of Image in view mode") {
			ContentPages.viewFragmentCommonStyle(
				fragmentName = "image",
				styleName = "textAlign",
				styleValue = "center");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "image",
				styleName = "marginBottom",
				styleValue = 1);

			PageEditor.viewFragmentStyle(
				fragmentName = "Image",
				imageSize = 0);
		}

		task ("Assert styles of Paragraph in view mode") {
			ContentPages.viewFragmentCommonStyle(
				fragmentName = "image",
				styleName = "textAlign",
				styleValue = "center");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "image",
				styleName = "marginBottom",
				styleValue = 1);

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "paragraph",
				styleName = "color",
				styleValue = "rgb(185, 80, 0)");
		}

		task ("Assert styles of Separator in view mode") {
			PageEditor.viewFragmentStyle(
				bottomSpacing = 1,
				separatorColor = "dark");
		}

		task ("Assert styles of Spacer in view mode") {
			PageEditor.viewFragmentStyle(height = 5);
		}

		task ("Assert styles of Video in view mode") {
			AssertElementPresent(
				key_alignment = "center",
				locator1 = "Fragment#ALIGN");

			AssertElementPresent(
				key_height = "300px",
				locator1 = "Fragment#VIDEO_HEIGHT");

			AssertElementPresent(
				key_width = "300px",
				locator1 = "Fragment#VIDEO_WIDTH");

			ContentPages.viewFragmentCommonStyle(
				fragmentName = "video",
				styleName = "marginBottom",
				styleValue = 1);
		}

		task ("Navigate to page in edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");
		}

		task ("Assert styles of Container in edit mode") {
			PageEditor.viewContainerStyle(
				containerWidth = "Fixed Width",
				paddingBottom = 3,
				paddingTop = 3,
				position = 2);

			PageEditor.viewContainerStyle(backgroundColor = "rgb(46, 90, 172)");
		}

		task ("Assert styles of Button in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Button",
				marginBottom = 1,
				size = "lg",
				type = "link");
		}

		task ("Assert styles of Card in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				borderRadius = "0.375rem",
				boxShadow = "rgba(0, 0, 0, 0.176) 0px 1rem 3rem",
				fragmentName = "Card",
				imageSize = 0,
				marginBottom = 1);
		}

		task ("Assert styles of Heading in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Heading",
				headingLevel = "h2",
				marginBottom = 1,
				textColor = "rgb(40, 125, 60)");
		}

		task ("Assert styles of HTML in edit mode") {
			PageEditor.viewFragmentStyle(
				fragmentName = "HTML",
				marginBottom = 1);
		}

		task ("Assert styles of Image in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Image",
				imageSize = 0,
				marginBottom = 1);
		}

		task ("Assert styles of Paragraph in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Paragraph",
				marginBottom = 1,
				textColor = "rgb(185, 80, 0)");
		}

		task ("Assert styles of Separator in edit mode") {
			PageEditor.viewFragmentStyle(
				bottomSpacing = 1,
				separatorColor = "dark");
		}

		task ("Assert styles of Spacer in edit mode") {
			PageEditor.viewFragmentStyle(height = 5);
		}

		task ("Assert styles of Video in edit mode") {
			AssertElementPresent(
				key_alignment = "center",
				locator1 = "Fragment#ALIGN");

			AssertElementPresent(
				key_height = "300px",
				locator1 = "Fragment#VIDEO_HEIGHT");

			AssertElementPresent(
				key_width = "300px",
				locator1 = "Fragment#VIDEO_WIDTH");

			PageEditor.viewFragmentStyle(
				fragmentName = "Video URL",
				marginBottom = 1);
		}
	}

	macro viewDefaultPage {
		Navigator.openURL();

		// Assert the Home/Welcome page is a widget page in the default site when upgrade from 7.2/7.1/7.0

		AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");

		AssertVisible(locator1 = "ControlMenu#ADD");
	}

	macro viewNoSearchResults {
		ApplicationsMenu.gotoSite(site = "Test Site Name");

		AssertClick(
			key_navItem = "Content Page Name",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Content Page Name");

		SearchPortlets.searchEmbedded(searchTerm = "Awesome Button");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Awesome Button");
	}

}