definition {

	macro assertGenericJSONPathResponse {
		var actual = JSONUtil.getWithJSONPath("${apiResponse}", "$..${apiPath}");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "${expected}");
	}

	macro assertSearchKeywordNotPresent {
		if (!(isSet(keywordPosition))) {
			var keywordPosition = "0";
		}

		var actual = JSONUtil.getWithJSONPath("${apiResponse}", "$..search-keywords[${keywordPosition}].keywords");

		TestUtils.assertNotEquals(
			actual = "${actual}",
			expected = "${expected}");
	}

	macro assertSearchResponse {
		if (!(isSet(keywordPosition))) {
			var keywordPosition = "0";
		}

		var actual = JSONUtil.getWithJSONPath("${apiResponse}", "$..search-keywords[${keywordPosition}].keywords");

		TestUtils.assertEquals(
			actual = "${actual}",
			expected = "${expected}");
	}

	macro createNewExportSchedule {
		var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

		var curl = '''
			${analyticsCloudURL}/api/reports/export/${type}\?fromDate=${startDate}T${startTime}Z\&toDate=${endDate}T${endTime}Z
				-H "Authorization: Bearer ${token}"
		''';

		static var apiResponse = JSONCurlUtil.get("${curl}", "$");

		return "${apiResponse}";
	}

	macro createQueryData {
		var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

		var curl = '''
			${analyticsCloudURL}/api/reports -H "Authorization: Bearer ${token}"
		''';

		static var apiResponse = JSONCurlUtil.get("${curl}", "$");

		return "${apiResponse}";
	}

	macro getAnalyticsConfiguration {
		ServerAdministration.openServerAdmin();

		ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendURL");

		static var faroBackendURL = "${scriptValue}";

		ACApi.getSearchHeaderValues(header = "liferayAnalyticsFaroBackendSecuritySignature");

		static var osbAsahFaroBackendSS = "${scriptValue}";

		ACApi.getSearchHeaderValues(header = "liferayAnalyticsProjectId");

		static var osbAsahProjectId = "${scriptValue}";
	}

	macro getSearchHeaderValues {
		var script = '''
			    out.println(com.liferay.portal.kernel.util.PrefsPropsUtil.getPreferences(com.liferay.portal.kernel.service.CompanyServiceUtil.getCompanies()[0].getCompanyId()).getMap().get("${header}")[0]);
		    ''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "${script}");

		static var scriptValue = selenium.getText("ServerAdministrationScript#OUTPUT_FIELD");
	}

	macro getSearchKeywords {

		// The pause is necessary because it takes some time for the keywords to appear during curl see LRAC-12141

		Pause(locator1 = "10000");

		if (isSet(parameters)) {
			var curl = '''
				${faroBackendURL}/api/1.0/pages/search-keywords?${parameters} \
					-H "OSB-Asah-Faro-Backend-Security-Signature: ${osbAsahFaroBackendSS}" \
					-H "OSB-Asah-Project-ID: ${osbAsahProjectId}"
			''';
		}
		else {
			var curl = '''
				${faroBackendURL}/api/1.0/pages/search-keywords \
					-H "OSB-Asah-Faro-Backend-Security-Signature: ${osbAsahFaroBackendSS}" \
					-H "OSB-Asah-Project-ID: ${osbAsahProjectId}"
			''';
		}

		static var apiResponse = JSONCurlUtil.get("${curl}");

		return "${apiResponse}";
	}

	macro getTokenValue {
		if (IsElementNotPresent(locator1 = "ACSettings#COPY_TOKEN_BUTTON")) {
			ACUtils.clickAnyButton(button = "Generate Token");
		}

		WaitForElementPresent(locator1 = "ACSettings#COPY_TOKEN_BUTTON");

		// Use getAttribute to get the token value from the page's HTML

		var token = selenium.getAttribute("//button[@aria-label='Click to Copy']@data-clipboard-text");

		return "${token}";
	}

	macro sendEmailReport {
		var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

		var curl = '''
			${analyticsCloudURL}/o/faro/main/${groupId}/preferences/send_email_report
				-u 'test@liferay.com:test'
				-F 'channelId="${channelId}"'
				-F 'userId="${userID}"'
				-F 'frequency="${frequency}"'
		''';

		JSONCurlUtil.post("${curl}");
	}

	macro viewApiResponseForError {

		// Checks if the API response message explains the reason for the error

		if (contains("${apiResponse}", "${message}")) {
			echo("Correct error message - PASSED");
		}
		else {
			fail("Wrong error message - ${apiResponse}");
		}

		// Checks if the status value is ERROR

		if (contains("${apiResponse}", "status=ERROR")) {
			echo("Correct status - PASSED");
		}
		else {
			fail("Wrong status - ${apiResponse}");
		}
	}

	macro viewApiResponseForExportProcess {

		// Checks if the API response message is correct

		if (contains("${apiResponse}", "${message}")) {
			echo("Correct message - PASSED");
		}
		else {
			fail("New export schedule was not created: Wrong message - ${apiResponse}");
		}

		// Checks if the fromDate value is the same as the one used to create the schedule

		if (contains("${apiResponse}", "fromDate=${startDate}T${startTime}Z")) {
			echo("Correct fromDate - PASSED");
		}
		else {
			fail("New export schedule was not created: Wrong fromDate - ${apiResponse}");
		}

		// Checks if the toDate value is the same as the one used to create the schedule

		if (contains("${apiResponse}", "toDate=${endDate}T${endTime}Z")) {
			echo("Correct toDate - PASSED");
		}
		else {
			fail("New export schedule was not created: Wrong toDate - ${apiResponse}");
		}

		// Checks if the type value is the same as the one used to create the schedule

		if (contains("${apiResponse}", "type=${upperCaseType}")) {
			echo("Correct type - PASSED");
		}
		else {
			fail("New export schedule was not created: Wrong type - ${apiResponse}");
		}

		// Checks if the status value is the same as the one used to create the schedule

		if (contains("${apiResponse}", "status=${status}")) {
			echo("Correct status - PASSED");
		}
		else {
			fail("New export schedule was not created: Wrong status - ${apiResponse}");
		}
	}

	macro viewApiResponseForQueryData {
		for (var type : list "${typeList}") {
			if (contains("${apiResponse}", "${type}={href=http://osbasahbackend:8080/api/reports/${type}")) {
				echo("${type} - PASSED");
			}
			else {
				fail("${apiResponse}");
			}
		}
	}

}