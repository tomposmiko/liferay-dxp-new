definition {
	var formDescription = "Created Form Description";
	var formName = "Created Form Name";
	var rowNumber = "1";

	macro _addField {
		if (IsElementNotPresent(locator1 = "Form#SIDEBAR_ELEMENTS_TAB")) {
			MouseOver.mouseOverNotVisible(locator1 = "Form#ADD_FIELD");

			Click(locator1 = "Form#ADD_FIELD");
		}
	}

	macro addPage {
		Click(locator1 = "Form#PAGE_CONTROLS_ELLIPSIS_ICON");

		AssertClick(
			locator1 = "Form#PAGE_CONTROLS_ADD_NEW_PAGE",
			value1 = "Add New Page"
		);
	}

	macro addSuccessPage {
		Click(locator1 = "Form#PAGE_CONTROLS_ELLIPSIS_ICON");

		AssertClick(
			locator1 = "Form#PAGE_CONTROLS_ADD_SUCCESS_PAGE",
			value1 = "Add Success Page"
		);
	}

	macro addTranslation {
		Click(locator1 = "Translation#ADD");

		var key_localizedLanguage = "${localizedLanguage}";

		AssertClick(
			locator1 = "Translation#ADD_MENULIST_LANGUAGE",
			value1 = "${localizedLanguage}"
		);
	}

	macro closeSidebar {
		Pause(locator1 = "1000");

		Click(locator1 = "Form#SIDEBAR_CLOSE");

		Pause(locator1 = "1000");

		AssertElementNotPresent(locator1 = "Form#SIDEBAR_CLOSE");
	}

	macro configureEmailNotifications {
		AssertClick(
			locator1 = "Form#SETTINGS_TAB_EMAIL_NOTIFICATIONS",
			value1 = "Email Notifications"
		);

		FormFields.enableSwitcher(fieldName = "sendEmailNotification");

		FormFields.editText(fieldName = "emailFromName", fieldValue = "${fromName}");

		FormFields.editText(
			fieldName = "emailFromAddress",
			fieldValue = "${fromAddress}"
		);

		FormFields.editText(fieldName = "emailToAddress", fieldValue = "${toAddress}");

		FormFields.editText(fieldName = "emailSubject", fieldValue = "${subject}");

		Button.clickDone();
	}

	macro configureRequireCaptcha {
		FormFields.enableSwitcher(fieldName = "requireCaptcha");

		Button.clickDone();
	}

	macro configureWorkflow {
		Click(locator1 = "Form#SETTINGS_TAB_WORKFLOW_CONFIGURATION_FIELD");

		var key_workflowDefinition = "${workflowDefinition}";

		AssertClick(
			locator1 = "Form#SETTINGS_TAB_WORKFLOW_CONFIGURATION",
			value1 = "${workflowDefinition}"
		);

		Button.clickDone();
	}

	macro deleteCurrentPage {
		var key_formPageName = "${formPageName}";

		AssertElementPresent(locator1 = "FormPortlet#FORM_PAGE_ACTIVE");

		Click(locator1 = "Form#PAGE_CONTROLS_ELLIPSIS_ICON");

		AssertClick(
			locator1 = "Form#PAGE_CONTROLS_DELETE_CURRENT_PAGE",
			value1 = "Delete Current Page"
		);

		AssertElementNotPresent(locator1 = "FormPortlet#FORM_PAGE");
	}

	macro disableAutocompleteConfiguration {
		FormFields.disableSwitcher(fieldName = "autocomplete");
	}

	macro duplicate {
		LexiconEntry.gotoEntryMenuItem(menuItem = "Duplicate", rowEntry = "${formName}");
	}

	macro editDescription {
		Click(locator1 = "Form#DESCRIPTION_FIELD");

		Type.typeAceEditor(
			locator1 = "Form#DESCRIPTION_FIELD",
			value1 = "${formDescription}"
		);
	}

	macro editFieldDataProvider {
		FormFields.selectRadioOption(
			fieldName = "dataSourceType",
			radioOption = "From Data Provider"
		);

		FormFields.selectSelectOption(
			fieldName = "ddmDataProviderInstanceId",
			selectOption = "${dataProvider}"
		);

		FormFields.selectSelectOption(
			fieldName = "ddmDataProviderInstanceOutput",
			selectOption = "${dataProviderOutput}"
		);
	}

	macro editFieldLabel {
		FormFields.editText(fieldName = "label", fieldValue = "${fieldValue}");

		if (!(isSet(fieldName))) {
			var fieldName = StringUtil.replace("${fieldValue}", " ", "");
		}

		FormFields.viewFieldName(fieldName = "${fieldName}");

		var key_fieldName = "${fieldName}";

		AssertTextEquals(locator1 = "Form#FIELD_LABEL", value1 = "${fieldValue}");
	}

	macro editName {
		AssertVisible(locator1 = "Form#ADD_FIELD");

		AssertVisible(locator1 = "Form#NAME_FIELD");

		AssertVisible(locator1 = "Form#DESCRIPTION_FIELD");

		Click(locator1 = "Form#NAME_FIELD");

		AlloyEditor.typeEditor(content = "${formName}", editor = "name");
	}

	macro editNameLocalized {
		AssertVisible(locator1 = "Form#ADD_FIELD");

		AssertVisible(locator1 = "Form#NAME_FIELD");

		AssertVisible(locator1 = "Form#DESCRIPTION_FIELD");

		Click(locator1 = "Form#NAME_FIELD");

		AlloyEditor.typeEditor(content = "${formName}", editor = "name");
	}

	macro editPageTitle {
		Type(locator1 = "Form#PAGE_TITLE_FIELD", value1 = "${formPageName}");
	}

	macro editSuccessPage {
		Type(locator1 = "Form#SUCCESS_PAGE_TITLE_FIELD", value1 = "${successPageTitle}");

		Type(
			locator1 = "Form#SUCCESS_PAGE_DESCRIPTION_FIELD",
			value1 = "${successPageDescription}"
		);
	}

	macro enableAutocompleteConfiguration {
		FormFields.enableSwitcher(fieldName = "autocomplete");
	}

	macro getPublishedFormPublicURL {
		var publicURL = selenium.getElementValue("Form#PUBLISH_FORM_PUBLIC_URL");

		return "${publicURL}";
	}

	macro gotoAddElementSet {
		Form._addField();

		Form.gotoElementSetsTab();

		var key_fieldType = "${elementSetTitle}";

		DragAndDrop(
			locator1 = "Form#ADD_FIELD_TYPE",
			locator2 = "Form#ADD_FIELD_POSITION",
			value1 = "${elementSetTitle}"
		);
	}

	macro gotoAddField {
		Form._addField();

		Form.gotoElementsTab();

		var key_fieldType = "${fieldType}";

		DragAndDrop(
			locator1 = "Form#ADD_FIELD_TYPE",
			locator2 = "Form#ADD_FIELD_POSITION",
			value1 = "${fieldType}"
		);

		AssertElementPresent(locator1 = "Form#SIDEBAR_BASIC_TAB");
	}

	macro gotoAdvancedTab {
		AssertClick(locator1 = "Form#SIDEBAR_PROPERTIES_TAB", value1 = "Properties");
	}

	macro gotoElementSetsTab {
		AssertClick(locator1 = "Form#SIDEBAR_ELEMENT_SETS_TAB", value1 = "Element Sets");
	}

	macro gotoElementsTab {
		AssertClick(locator1 = "Form#SIDEBAR_ELEMENTS_TAB", value1 = "Elements");
	}

	macro gotoFormPage {
		var key_formPageName = "${formPageName}";

		Click(locator1 = "Form#FORM_PAGE");
	}

	macro gotoPageAltPagination {
		var key_page = "${page}";

		Click(locator1 = "Form#ALT_PAGINATION_PAGE");
	}

	macro previewForm {
		Navigator.selectSpecificWindow(windowTitle = "Form - Forms");

		var key_formName = "${formName}";

		AssertTextEquals(
			locator1 = "Form#PUBLISH_FORM_NAME_FIELD",
			value1 = "${formName}"
		);

		FormFields.viewTextLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);

		FormFields.editText(fieldName = "${fieldName}", fieldValue = "${fieldValue}");

		FormFields.viewTextValue(
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}"
		);

		AssertElementNotPresent(locator1 = "Button#SUBMIT");
	}

	macro publishForm {
		AssertElementPresent(locator1 = "Form#NAME_FIELD");

		Click(locator1 = "Button#PUBLISH");

		Form.viewPublishFormSuccessMessage();
	}

	macro save {
		AssertClick(locator1 = "Form#SAVE_FORM_BUTTON", value1 = "Save Form");

		Alert.viewSuccessMessage();
	}

	macro saveElementSet {
		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	macro saveLocalized {
		var key_saveButton = "${saveButton}";

		AssertClick(
			locator1 = "Form#SAVE_FORM_BUTTON_LOCALIZED",
			value1 = "${saveButton}"
		);

		Alert.viewSuccessMessage();
	}

	macro selectTranslation {
		var key_localizedLanguage = "${localizedLanguage}";

		Click(locator1 = "Translation#UNSELECTED_LOCALE_ICON");
	}

	macro submitFormPublish {
		Form.viewFormPublish(fieldLabel = "${fieldLabel}", fieldName = "${fieldName}");

		FormFields.editText(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}",
			fieldValue = "${fieldValue}"
		);

		AssertClick(locator1 = "Button#MAIN_CONTENT_SUBMIT", value1 = "Submit");

		Alert.viewSuccessMessage();
	}

	macro switchPaginationMode {
		Click(locator1 = "Form#PAGE_CONTROLS_ELLIPSIS_ICON");

		AssertClick(
			locator1 = "Form#PAGE_CONTROLS_SWITCH_PAGINATION_MODE",
			value1 = "Switch Pagination Mode"
		);
	}

	macro unpublishForm {
		AssertElementPresent(locator1 = "Form#NAME_FIELD");

		Click(locator1 = "Button#UNPUBLISH");

		var key_uniqueSuccess = "The form was unpublished successfully!";

		AssertElementPresent(locator1 = "Message#UNIQUE_SUCCESS");
	}

	macro viewAltPagePagination {
		var key_page = "${page}";

		AssertElementPresent(locator1 = "Form#ALT_PAGINATION_PAGE");
	}

	macro viewAltSuccessPagePagination {
		AssertElementPresent(locator1 = "Form#ALT_PAGINATION_SUCCESS_PAGE");
	}

	macro viewFormName {
		AssertTextEquals(locator1 = "Form#NAME_FIELD", value1 = "${formName}");
	}

	macro viewFormNotPublished {
		Click(locator1 = "Form#PUBLISH_ICON");

		var publishFormURL = selenium.getElementValue("Form#PUBLISH_FORM_PUBLIC_URL");

		Form.unpublishForm();

		Navigator.openSpecificURL(url = "${publishFormURL}");

		AssertTextEquals(
			locator1 = "Message#ERROR_3_ALT",
			value1 = "This form is not available or it was not published."
		);
	}

	macro viewFormPublish {
		FormsAdminNavigator.openPublishURL();

		var key_formName = "${formName}";

		AssertTextEquals(
			locator1 = "Form#PUBLISH_FORM_NAME_FIELD",
			value1 = "${formName}"
		);

		FormFields.viewTextLabel(
			fieldLabel = "${fieldLabel}",
			fieldName = "${fieldName}"
		);
	}

	macro viewPublishFormSuccessMessage {
		var key_alertMessage = "The form was published successfully! Access it with this URL";

		AssertNotVisible(locator1 = "Form#PUBLISH_UNPUBLISH_ICON_CLOSE");
	}

	macro viewSaveNotification {
		AssertTextEquals.assertPartialText(
			locator1 = "Form#SAVE_NOTIFICATION",
			value1 = "Draft"
		);
	}
}