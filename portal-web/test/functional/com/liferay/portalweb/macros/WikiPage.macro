definition {
	var assetType = "Wiki Page";

	macro _checkForRSSTitleCP {
		if (IsElementNotPresent(locator1 = "RSS#FEED_TITLE")) {
			ProductMenu.gotoPortlet(
				category = "Content",
				panel = "Site Administration",
				portlet = "Wiki"
			);

			WikiNavigator.gotoNode(wikiNodeName = "${wikiNodeName}");

			WikiNavigator.gotoEntryViaPGTable(wikiPageTitle = "${wikiPageTitle}");

			WikiEntry.viewPageContentBody(wikiPageContent = "${wikiPageContent}");

			Click(locator1 = "Icon#INFO");

			AssertClick.assertPartialTextClickAt(locator1 = "Link#FEED", value1 = "Feed");

			Pause(locator1 = "3000");
		}
	}

	macro _editEmptyFrontPage {
		AssertClick(
			locator1 = "Wiki#FRONTPAGE_DEFAULT_MESSAGE",
			value1 = "This page is empty. Edit it to add some text."
		);

		AssertElementPresent(locator1 = "AlloyEditor#EDITOR", key_editor = "content");

		AlloyEditor.addContent(content = "${wikiPageContent}");
	}

	macro addAttachmentViaPageEdit {
		AssertClick(locator1 = "Link#WIKI_EDIT", value1 = "Edit");

		Panel.expandPanel(panel = "Attachments");

		AssertVisible(locator1 = "Button#SELECT_FILES");

		Click(locator1 = "Button#SELECT_FILES");

		var key_attachmentFileName = "${attachmentFileName}";

		SikuliUploadCommonFile(
			locator1 = "OS#FILE_DIALOG_BOX_FILE_NAME_FIELD_PNG",
			value1 = "${attachmentFileName}"
		);

		PortletEntry.publish();
	}

	macro addChildPagePG {
		AssertClick(locator1 = "Link#ADD_CHILD_PAGE", value1 = "Add Child Page");

		var key_wikiChildPageTitle = "${wikiChildPageTitle}";

		AlloyEditor.addTitleAndContent(
			content = "${wikiChildPageContent}",
			title = "${wikiChildPageTitle}"
		);

		Click(locator1 = "Button#PUBLISH", value1 = "Publish");

		Alert.viewSuccessMessage();
	}

	macro addChildPagePGViaWD {
		AssertClick(locator1 = "Link#ADD_CHILD_PAGE", value1 = "Add Child Page");

		var key_wikiChildPageTitle = "${wikiChildPageTitle}";

		AlloyEditor.addTitleAndContent(
			content = "${wikiChildPageContent}",
			title = "${wikiChildPageTitle}"
		);

		Click(locator1 = "Button#PUBLISH", value1 = "Publish");

		Alert.viewSuccessMessage();
	}

	macro addComment {
		Click.clickAt(locator1 = "Comments#COMMENT_FIELD");

		Type.typeEditor(locator1 = "Comments#COMMENT_FIELD", value1 = "${entryComment}");

		AssertClick.assertTextClickAt(locator1 = "Button#REPLY", value1 = "Reply");

		Alert.viewSuccessMessage();
	}

	macro addCP {
		LexiconEntry.gotoAdd();

		var key_wikiPageTitle = "${wikiPageTitle}";

		AlloyEditor.addTitleAndContent(
			content = "${wikiPageContent}",
			title = "${wikiPageTitle}"
		);

		PortletEntry.publish();
	}

	macro addFrontPageChildPageInvalidTitle {
		AssertClick(locator1 = "Link#ADD_CHILD_PAGE", value1 = "Add Child Page");

		var key_wikiChildPageTitle = "${wikiChildPageTitle}";

		AlloyEditor.addTitleAndContent(
			content = "${wikiChildPageContent}",
			title = "${wikiChildPageTitle}"
		);

		AssertClick(locator1 = "Button#PUBLISH", value1 = "Publish");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "Please enter a valid title."
		);
	}

	macro addFrontPageChildPageInvalidTitleViaWD {
		AssertClick(locator1 = "Link#ADD_CHILD_PAGE", value1 = "Add Child Page");

		var key_wikiChildPageTitle = "${wikiChildPageTitle}";

		AlloyEditor.addTitleAndContent(
			content = "${wikiChildPageContent}",
			title = "${wikiChildPageTitle}"
		);

		AssertClick(locator1 = "Button#PUBLISH", value1 = "Publish");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_ENTER_A_VALID_TITLE",
			value1 = "Please enter a valid title."
		);
	}

	macro addFrontPageCP {
		AssertClick(
			locator1 = "Message#INFO_LINK",
			value1 = "This page is empty. Edit it to add some text."
		);

		AssertElementPresent(locator1 = "AlloyEditor#EDITOR", key_editor = "content");

		AlloyEditor.addContent(content = "${wikiFrontPageContent}");

		PortletEntry.publish();
	}

	macro addFrontPagePG {
		var key_wikiNodeName = "${wikiNodeName}";

		if (isSet(addFrontPagetoNode)) {
			AssertClick(locator1 = "Wiki#NODE_NAME", value1 = "${wikiNodeName}");
		}

		AssertClick.assertTextClickAtAndPause(
			locator1 = "Wiki#FRONTPAGE_DEFAULT_MESSAGE",
			value1 = "This page is empty. Edit it to add some text."
		);

		AssertElementPresent(locator1 = "AlloyEditor#EDITOR", key_editor = "content");

		if ("${creoleSource}" == "true") {
			Panel.expandPanel(panel = "Configuration");

			Select.pauseSelect(
				locator1 = "Wiki#ADD_PAGE_FORMAT_DROPDOWN",
				value1 = "Creole"
			);

			AlloyEditor.addContent(content = "${wikiPageContent}");
		}
		else if ("${htmlSource}" == "true") {
			Panel.expandPanel(panel = "Configuration");

			SelectNoError(locator1 = "Wiki#ADD_PAGE_FORMAT_DROPDOWN", value1 = "HTML");

			AssertConfirm(
				value1 = "You may lose some formatting when switching from Creole to HTML. Do you want to continue?"
			);

			AlloyEditor.addContent(content = "${wikiPageContent}");
		}
		else {
			AlloyEditor.addContent(content = "${wikiPageContent}");
		}

		if ("${pageAddTag}" == "true") {
			WikiPage.addTagPGCmd(
				tagName = "${tagName}",
				tagNameList = "${tagNameList}",
				wikiPageTitle = "${wikiPageTitle}"
			);

			WikiPage.viewTagViaAddPG(tagName = "${tagName}");
		}

		PortletEntry.publish();
	}

	macro addFrontPageWithWorkflowPG {
		WikiPage._editEmptyFrontPage(wikiPageContent = "${wikiPageContent}");

		WikiPage.submitForPublication();
	}

	macro addInlineImageViaEdit {
		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.uploadFile(
			navTab = "${navTab}",
			uploadFileName = "${uploadFileName}"
		);
	}

	macro addLocalizedFrontPagePG {
		AssertClick(
			locator1 = "Wiki#FRONTPAGE_DEFAULT_MESSAGE",
			value1 = "${emptyPageMessage}"
		);

		Type.typeEditor(
			locator1 = "//div[contains(@class,'alloy-editor') and contains(@class,'cke_editable_inline')]",
			value1 = "${wikiPageContent}"
		);

		if ("${rtl}" == "true") {
			var textDirection = "rtl";
		}
		else {
			var textDirection = "ltr";
		}

		AssertElementPresent(
			locator1 = "//div[contains(@class,'cke_contents_${textDirection}')]"
		);

		Click(locator1 = "Button#PUBLISH_LOCALIZED");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "${successMessage}"
		);

		AssertElementPresent(locator1 = "//html[@dir='${textDirection}']");

		var key_htmlTags = "p";

		AssertTextEquals(
			locator1 = "WikiEntry#BODY_HTML",
			value1 = "${wikiPageContent}"
		);
	}

	macro addPageWithWorkflowPG {
		WikiNavigator.gotoAddPageViaPG();

		AlloyEditor.addTitleAndContent(
			content = "${wikiPageContent}",
			title = "${wikiPageTitle}"
		);

		AssertClick(
			locator1 = "Button#SUBMIT_FOR_PUBLICATION",
			value1 = "Submit for Publication"
		);

		Alert.viewSuccessMessage();
	}

	macro addPermissionsPGCmd {
		if (isSet(viewableBy)) {
			Select(
				locator1 = "AssetPermissions#VIEWABLE_AS_SELECT",
				value1 = "${viewableBy}"
			);
		}

		if (isSet(permissionsDefinitionKey)) {
			if (IsNotVisible(locator1 = "AssetPermissions#HIDE_OPTIONS_LINK")) {
				AssertClick.assertPartialTextClickAt(
					locator1 = "AssetPermissions#MORE_OPTIONS_LINK",
					value1 = "More Options"
				);
			}

			var key_permissionsDefinitionKey = "${permissionsDefinitionKey}";
			var key_roleTitle = "${roleTitle}";

			Check(locator1 = "AssetPermissions#PERMISSIONS_CHECKBOX");
		}
	}

	macro addPG {
		WikiNavigator.gotoAddPageViaPG();

		AssertElementPresent(locator1 = "AlloyEditor#EDITOR", key_editor = "title");

		AlloyEditor.addTitle(title = "${wikiPageTitle}");

		var key_wikiPageTitle = "${wikiPageTitle}";

		if ("${viewFormat}" == "true") {
			AssertSelectedLabel(
				locator1 = "Wiki#ADD_PAGE_FORMAT_DROPDOWN",
				value1 = "${wikiFormat}"
			);
		}

		AlloyEditor.addContent(content = "${wikiPageContent}");

		if ("${viewCKEditorResizer}" == "true") {
			AssertVisible(locator1 = "CKEditor#RESIZER");

			MouseDown(locator1 = "CKEditor#RESIZER");

			MouseUp(locator1 = "CKEditor#RESIZER");
		}

		if ("${pageAddPermissions}" == "true") {
			WikiPage.addPermissionsPGCmd();
		}

		if ("${pageAddTag}" == "true") {
			WikiPage.addTagPGCmd(
				tagName = "${tagName}",
				tagNameList = "${tagNameList}",
				wikiPageTitle = "${wikiPageTitle}"
			);

			WikiPage.viewTagViaAddPG(tagName = "${tagName}");
		}

		if (isSet(customFieldText)) {
			Panel.expandPanel(panel = "Custom Fields");

			Type(locator1 = "TextInput#CUSTOM_FIELD", value1 = "${customFieldText}");
		}

		AssertClick(locator1 = "Button#PUBLISH", value1 = "Publish");

		Alert.viewSuccessMessage();
	}

	macro addTagPGCmd {
		Panel.expandPanel(panel = "Categorization");

		if (isSet(tagNameList)) {
			for (var tagName : list "${tagNameList}") {
				Type(locator1 = "AssetCategorization#TAGS_FIELD", value1 = "${tagName}");

				AssertClick(locator1 = "Button#ADD_TAGS", value1 = "Add");
			}
		}
		else {
			var key_tagName = "${tagName}";

			Type(locator1 = "AssetCategorization#TAGS_FIELD", value1 = "${tagName}");

			AssertClick(locator1 = "Button#ADD_TAGS", value1 = "Add");

			AssertElementPresent(locator1 = "AssetCategorization#TAG");
		}
	}

	macro cannotViewRedirectLinkPG {
		AssertElementNotPresent(locator1 = "Link#REDIRECT");
	}

	macro changeParentWikipagetoWikipagePG {
		var key_wikiPageTitle = "${wikiPage2Title}";

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPage2Title}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPage2Content}");

		AssertClick(locator1 = "Link#DETAILS", value1 = "Details");

		AssertClick(locator1 = "Link#MOVE", value1 = "Move");

		AssertClick(locator1 = "Wiki#PAGE_TABS_CHANGE_PARENT", value1 = "Change Parent");

		var key_wikiPageTitle = "${wikiPage1Title}";

		Select(locator1 = "Select#NEW_PARENT", value1 = "- ${wikiPage1Title}");

		AssertClick(locator1 = "Button#CHANGE", value1 = "Change Parent");

		Alert.viewSuccessMessage();
	}

	macro compareVersionsCP {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertClick(
			locator1 = "Wiki#DESCRIPTIVE_VIEW_ENTRY_TITLE",
			value1 = "${wikiPageTitle}"
		);

		Click(locator1 = "Icon#INFO");

		AssertClick(locator1 = "NavBar#DETAILS", value1 = "Details");

		MenuItem.click(menuItem = "Versions");

		var key_wikiPageVersion = "${wikiPageVersionNew}";

		Click.waitForMenuToggleJSClick(
			locator1 = "Wiki#COMPARE_VERSIONS_VERSION_ACTIONS",
			key_wikiPageVersion = "${wikiPageVersionNew}"
		);

		AssertClick(
			locator1 = "Wiki#HISTORY_ACTIVITIES_TABLE_COMPARE_TO_LINK",
			value1 = "Compare to..."
		);

		SelectFrame(locator1 = "Wiki#COMPARE_VERSIONS_IFRAME");

		var key_wikiPageVersion = "${wikiPageVersionNew}";

		AssertTextEquals(
			locator1 = "Wiki#COMPARE_VERSIONS_VERSION",
			value1 = "${wikiPageVersionNew}"
		);

		AssertElementPresent(locator1 = "Wiki#COMPARE_VERSIONS_DATE");

		var key_wikiPageVersion = "${wikiPageVersionOld}";

		AssertTextEquals(
			locator1 = "Wiki#COMPARE_VERSIONS_VERSION",
			value1 = "${wikiPageVersionOld}"
		);

		AssertElementPresent(locator1 = "Wiki#COMPARE_VERSIONS_DATE");

		AssertClick(
			locator1 = "Wiki#COMPARE_VERSIONS_VERSION_LINK",
			value1 = "${wikiPageVersionOld}"
		);

		SelectFrame(value1 = "relative=top");

		var key_wikiPageVersionDiff = "${wikiPageVersionDiff}";

		AssertTextEquals(
			locator1 = "Wiki#COMPARE_VERSIONS_DIFF",
			value1 = "${wikiPageVersionDiff}"
		);
	}

	macro compareVersionsPG {
		var key_wikiNodeName = "${wikiNodeName}";

		AssertClick(locator1 = "Link#DETAILS", value1 = "Details");

		AssertClick(locator1 = "Wiki#PAGE_TABS_HISTORY", value1 = "History");

		AssertClick(locator1 = "Wiki#HISTORY_VERSIONS_TAB", value1 = "Versions");

		var key_wikiPageVersionNew = "${wikiPageVersionNew}";

		Check(
			locator1 = "WikiTable#SELECT_VERSION_NEW_VERSION_CHECKBOX",
			value1 = "${wikiPageVersionNew}"
		);

		var key_wikiPageVersionOld = "${wikiPageVersionOld}";

		Check(
			locator1 = "WikiTable#SELECT_VERSION_OLD_VERSION_CHECKBOX",
			value1 = "${wikiPageVersionOld}"
		);

		AssertClick(locator1 = "Button#COMPARE_VERSIONS", value1 = "Compare Versions");

		SelectFrame(value1 = "relative=top");

		if ("${wikiPageCompareContentDetails}" == "true") {
			var key_wikiPageContentCompareAdded = "${wikiPageContentCompareAdded}";
			var key_wikiPageContentCompareFull = "${wikiPageContentCompareFull}";
			var key_wikiPageContentCompareRemoved = "${wikiPageContentCompareRemoved}";

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_DIFF_ADDED",
				value1 = "${wikiPageContentCompareAdded}"
			);

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_DIFF_REMOVED",
				value1 = "${wikiPageContentCompareRemoved}"
			);

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_PARAGRAPH_FULL",
				value1 = "${wikiPageContentCompareFull}"
			);

			AssertClick(
				locator1 = "Wiki#COMPARE_ACTIVITIES_NAVIGATION_TEXT_MODE_LINK",
				value1 = "Text Mode"
			);

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_TITLE_VERSION_OLD",
				value1 = "${wikiPageTitle} ${wikiPageVersionOld}"
			);

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_TITLE_VERSION_NEW",
				value1 = "${wikiPageTitle} ${wikiPageVersionNew}"
			);

			if (isSet(compareLineNumberOld)) {
				AssertTextEquals(
					locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_LINE_NUMBER_OLD_1",
					value1 = "Line ${compareLineNumberOld}"
				);
			}
			else {
				AssertTextEquals(
					locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_LINE_NUMBER_OLD_1",
					value1 = "Line 1"
				);
			}

			if (isSet(compareLineNumberNew)) {
				AssertTextEquals(
					locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_LINE_NUMBER_NEW_1",
					value1 = "Line ${compareLineNumberNew}"
				);
			}
			else {
				AssertTextEquals(
					locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_LINE_NUMBER_NEW_1",
					value1 = "Line 1"
				);
			}

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_CONTENT_OLD_1",
				value1 = "${wikiPageContentCompareOld}"
			);

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_TEXT_MODE_TABLE_CONTENT_NEW_1",
				value1 = "${wikiPageContentCompareNew}"
			);
		}
		else {
			var key_wikiPageVersionDiff = "${wikiPageVersionDiff}";

			AssertTextEquals(
				locator1 = "Wiki#COMPARE_VERSIONS_DIFF",
				value1 = "${wikiPageVersionDiff}"
			);
		}
	}

	macro deleteCP {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(
			locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE",
			value1 = "${wikiPageTitle}"
		);

		Click(locator1 = "WikiTable#ALL_PAGES_VERTICAL_ELLIPSIS");

		PortletEntry.clickMoveToRecycleBin();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	macro deleteFrontPagePGViaWD {
		var key_wikiPageTitle = "${wikiPageTitle}";

		Click(locator1 = "WikiTable#ALL_PAGES_VERTICAL_ELLIPSIS");

		PortletEntry.clickMoveToRecycleBin();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertTextEquals.assertPartialText(
			locator1 = "WikiTable#ALL_PAGES_REVISION",
			value1 = "1.0"
		);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.emptyCP();
	}

	macro deletePG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		Click(locator1 = "WikiTable#ALL_PAGES_VERTICAL_ELLIPSIS");

		PortletEntry.clickMoveToRecycleBin();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		if ("${wikiPageTitle}" == "FrontPage") {
			AssertTextEquals(
				locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE",
				value1 = "FrontPage"
			);

			AssertTextEquals(
				locator1 = "WikiTable#ALL_PAGES_REVISION",
				value1 = "1.0 (Minor Edit)"
			);
		}
		else {
			AssertElementNotPresent(locator1 = "WikiTable#ALL_PAGES_PAGE_2");
		}
	}

	macro editComment {
		var key_entryComment = "${entryComment}";

		AssertTextEquals(
			locator1 = "Comments#COMMENT_BODY_SPECIFIC",
			value1 = "${entryComment}"
		);

		Click.waitForMenuToggleJSClick(
			locator1 = "Comments#COMMENT_ACTIONS",
			key_entryComment = "${entryComment}"
		);

		MenuItem.click(menuItem = "Edit");

		Type.typeEditor(
			locator1 = "Comments#EDIT_COMMENT_FIELD",
			value1 = "${entryCommentEdit}"
		);

		PortletEntry.publish();
	}

	macro editFrontPagePG {
		AssertClick(locator1 = "Link#WIKI_EDIT", value1 = "Edit");

		Pause(locator1 = "3000");

		AlloyEditor.addContent(content = "${wikiPageContentEdit}");

		AssertClick(locator1 = "Button#PUBLISH", value1 = "Publish");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContentEdit}");

		Alert.viewSuccessMessage();
	}

	macro editPageCP {
		LexiconEntry.openEntryMenu(rowEntry = "${wikiPageTitle}");

		MenuItem.click(menuItem = "Edit");

		Click(locator1 = "AlloyEditor#EDITOR", key_editor = "content");

		AssertElementPresent(locator1 = "AlloyEditor#CONTENT_ADD_BUTTON");

		AlloyEditor.addContent(content = "${wikiPageContentEdit}");

		PortletEntry.publish();
	}

	macro editPagePG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		Click(locator1 = "WikiTable#ALL_PAGES_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		AlloyEditor.addContent(content = "${wikiPageContentEdit}");

		if ("${minorEdit}" == "true") {
			Check(locator1 = "Checkbox#THIS_IS_A_MINOR_EDIT");
		}

		if (isSet(customFieldTextEdit)) {
			Panel.expandPanel(panel = "Custom Fields");

			Type(locator1 = "TextInput#CUSTOM_FIELD", value1 = "${customFieldTextEdit}");
		}

		PortletEntry.publish();

		WikiNavigator.gotoPG(wikiPageTitle = "Wiki Page Title");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContentEdit}");
	}

	macro linkPG {
		var key_wikiPageTitle = "${wikiPage2Title}";

		AssertTextNotPresent(
			locator1 = "Portlet#H3_HEADER",
			value1 = "${wikiPage2Title}"
		);

		AssertTextNotPresent(
			locator1 = "WikiEntry#BODY",
			value1 = "${wikiPage2Content}"
		);

		AssertClick(locator1 = "Link#EDIT", value1 = "Edit");

		AlloyEditor.clickContentField();

		Panel.expandPanel(panel = "Configuration");

		Select(locator1 = "Wiki#ADD_PAGE_FORMAT_DROPDOWN", value1 = "Creole");

		AlloyEditor.addContent(content = "${wikiPage2Link}");

		PortletEntry.publish();

		AssertClick(locator1 = "WikiEntry#BODY_LINK", value1 = "${wikiPage2Title}");

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPage2Title}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPage2Content}");
	}

	macro markAsSpamCP {
		AssertClick(locator1 = "Link#MARK_AS_SPAM", value1 = "Mark as Spam");

		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "This version has been flagged as spam. An administrator will review your version as soon as possible."
		);
	}

	macro moveToRecycleBinCP {
		LexiconEntry.openEntryMenu(rowEntry = "${wikiPageTitle}");

		PortletEntry.clickMoveToRecycleBin();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	macro rate4StarsPG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		Click.clickNoMouseOver(locator1 = "Ratings#YOUR_RATING_STAR_EMPTY_4");

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR_4");
	}

	macro rateCommentAsGood {
		Click(locator1 = "Ratings#THUMB_UP");
	}

	macro removeAttachmentViaPageEdit {
		AssertClick(locator1 = "Link#EDIT", value1 = "Edit");

		Panel.expandPanel(panel = "Attachments");

		var key_attachmentFileName = "${attachmentFileName}";

		AssertVisible(
			locator1 = "Wiki#ATTACHMENT_TABLE_MOVE_TO_RECYCLE_BIN",
			value1 = "Move to Recycle Bin"
		);

		Click(locator1 = "Wiki#ATTACHMENT_TABLE_MOVE_TO_RECYCLE_BIN");

		PortletEntry.publish();
	}

	macro removeRedirectWikiPagePG {
		AssertClick(
			locator1 = "Link#REDIRECT",
			value1 = "(Redirected from ${wikiPageTitle})"
		);

		AssertTextEquals(
			locator1 = "Message#INFO_1",
			value1 = "This page is currently redirected to ${wikiPageTitleRename}."
		);

		AssertClick(locator1 = "Button#REMOVE_REDIRECT", value1 = "Remove Redirect");

		AlloyEditor.addContent(content = "${wikiPage2Content}");

		PortletEntry.publish();
	}

	macro renameWikiPageCP {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Move");

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		Type(locator1 = "TextInput#NEW_TITLE", value1 = "${wikiPageTitleRename}");

		AssertClick(locator1 = "Button#RENAME", value1 = "Rename");

		Alert.viewSuccessMessage();
	}

	macro renameWikiPagePG {
		AssertClick(locator1 = "Link#DETAILS", value1 = "Details");

		AssertClick(locator1 = "Link#MOVE", value1 = "Move");

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		Type(locator1 = "TextInput#NEW_TITLE", value1 = "${wikiPageTitleRename}");

		AssertClick(locator1 = "Button#RENAME", value1 = "Rename");

		Alert.viewSuccessMessage();
	}

	macro revertChangeParentWikipagetoWikipagePG {
		var key_wikiPageTitle = "${wikiPage2Title}";

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPage2Title}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPage2Content}");

		AssertClick(locator1 = "Link#DETAILS", value1 = "Details");

		AssertClick(locator1 = "Wiki#PAGE_TABS_HISTORY", value1 = "History");

		AssertClick(locator1 = "Wiki#HISTORY_VERSIONS_TAB", value1 = "Versions");

		var key_wikiPageRevision = "1.1";
		var key_wikiPageTitle = "${wikiPage2Title}";
		var key_wikiVersionSummary = "${wikiVersion1Summary}";

		AssertTextEquals.assertPartialText(
			locator1 = "Wiki#HISTORY_VERSIONS_SUMMARY",
			value1 = "${wikiVersion1Summary}"
		);

		var key_wikiPageRevision = "1.0";

		Click.waitForMenuToggleJSClick(
			locator1 = "Wiki#HISTORY_VERSIONS_ACTIONS",
			key_wikiPageRevision = "${wikiPageRevision}"
		);

		MenuItem.click(menuItem = "Revert");

		Alert.viewSuccessMessage();

		var key_wikiPageRevision = "1.2";
		var key_wikiVersionSummary = "${wikiVersion2Summary}";

		AssertTextEquals(
			locator1 = "Wiki#HISTORY_VERSIONS_SUMMARY",
			value1 = "${wikiVersion2Summary}"
		);
	}

	macro revertEditPG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		AssertClick(locator1 = "Link#DETAILS", value1 = "Details");

		AssertClick(locator1 = "Wiki#PAGE_TABS_HISTORY", value1 = "History");

		AssertClick(locator1 = "Wiki#HISTORY_VERSIONS_TAB", value1 = "Versions");

		var key_wikiPageRevision = "${wikiPageRevisionOld}";

		Click.waitForMenuToggleJSClick(
			locator1 = "Wiki#HISTORY_VERSIONS_ACTIONS",
			key_wikiPageRevision = "${wikiPageRevision}"
		);

		MenuItem.click(menuItem = "Revert");

		Alert.viewSuccessMessage();

		var key_wikiPageRevision = "${wikiPageRevisionNew}";
		var key_wikiVersionSummary = "${wikiVersionSummary}";

		AssertTextEquals(
			locator1 = "Wiki#HISTORY_VERSIONS_SUMMARY",
			value1 = "${wikiVersionSummary}"
		);
	}

	macro searchPG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		Search.searchPG(portletName = "Wiki", searchTerm = "${searchTerm}");
	}

	macro selectNewParent {
		Select(locator1 = "Select#NEW_PARENT", value1 = "- ${wikiParentName}");

		AssertClick(locator1 = "Button#CHANGE_PARENT", value1 = "Change Parent");
	}

	macro submitForPublication {
		AssertClick(
			locator1 = "Button#SUBMIT_FOR_PUBLICATION",
			value1 = "Submit for Publication"
		);

		Alert.viewSuccessMessage();
	}

	macro tearDownCP {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Wiki"
		);

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		var key_wikiPageTitle = "FrontPage";

		while (IsTextNotEqual(locator1 = "WikiTable#ALL_PAGES_REVISION", value1 = "1.0 (Minor Edit)")) {
			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Move to Recycle Bin");

			AssertElementPresent(locator1 = "Message#SUCCESS");
		}

		while (IsElementPresent(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS_2")) {
			Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS_2");

			PortletEntry.clickMoveToRecycleBin();

			AssertElementPresent(locator1 = "Message#SUCCESS");
		}

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			panel = "Site Administration",
			portlet = "Recycle Bin"
		);

		RecycleBin.emptyCP();
	}

	macro viewAttachmentPGViaEdit {
		var key_attachmentFileName = "${attachmentFileName}";
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertVisible(locator1 = "Link#EDIT", value1 = "Edit");

		AssertClick(locator1 = "Link#EDIT", value1 = "Edit");

		Panel.expandPanel(panel = "Attachments");

		AssertTextEquals(
			locator1 = "Wiki#ATTACHMENT_TABLE_FILE_NAME",
			value1 = "${attachmentFileName}"
		);

		if (isSet(attachmentFileSize)) {
			AssertTextEquals(
				locator1 = "Wiki#ATTACHMENT_TABLE_SIZE",
				value1 = "${attachmentFileSize}"
			);
		}
		else {
			AssertElementPresent(locator1 = "Wiki#ATTACHMENT_TABLE_SIZE");
		}

		AssertTextEquals(
			locator1 = "Wiki#ATTACHMENT_TABLE_MOVE_TO_RECYCLE_BIN",
			value1 = "Move to Recycle Bin"
		);
	}

	macro viewChildPagePG {
		AssertTextEquals(
			locator1 = "Portlet#H3_HEADER",
			value1 = "${wikiChildPageTitle}"
		);

		AssertTextEquals(
			locator1 = "WikiEntry#BODY",
			value1 = "${wikiChildPageContent}"
		);
	}

	macro viewChildPagePGViaWD {
		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		AssertTextEquals.assertPartialText(
			locator1 = "Wiki#CHILD_PAGE_HEADER",
			value1 = "Child Page"
		);

		var key_wikiChildPageTitle = "${wikiChildPageTitle}";

		AssertTextEquals(
			locator1 = "Wiki#CHILD_PAGE_TITLE",
			value1 = "${wikiChildPageTitle}"
		);
	}

	macro viewCommentPG {
		var key_entryComment = "${entryComment}";
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(
			locator1 = "Comments#COMMENT_BODY_SPECIFIC",
			value1 = "${entryComment}"
		);
	}

	macro viewCommentRatingGood {
		AssertTextEquals(locator1 = "Ratings#THUMB_UP", value1 = "1");

		AssertTextEquals(locator1 = "Ratings#THUMB_DOWN", value1 = "0");
	}

	macro viewCP {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(locator1 = "Portlet#H2_HEADER", value1 = "${wikiPageTitle}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		if ("${akismetEnabled}" == "true") {
			AssertTextNotPresent(
				locator1 = "Message#SUCCESS",
				value1 = "Version ${wikiPageRevision} was marked as spam."
			);

			AssertTextNotPresent(
				locator1 = "Message#ERROR",
				value1 = "This version has been flagged as spam. An administrator will review your version as soon as possible."
			);
		}
	}

	macro viewCustomADTSocialPG {
		AssertClick(locator1 = "WikiTable#NAVIGATION_FRONTPAGE", value1 = "FrontPage");

		AssertTextEquals(locator1 = "Portlet#H1_HEADER", value1 = "FrontPage");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		AssertElementPresent(locator1 = "Link#ADD_CHILD_PAGE");

		AssertElementPresent(locator1 = "Comments#SUBSCRIBE_TO_COMMENTS_LINK");

		AssertElementPresent(locator1 = "Link#ATTACHMENTS");

		AssertElementPresent(locator1 = "Wiki#ADT_SOCIAL_LAST_MODIFIED_MESSAGE");

		AssertElementPresent(locator1 = "Icon#DETAILS");

		AssertElementPresent(locator1 = "Icon#PRINT");

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_LABEL");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_LABEL");
	}

	macro viewDefaultPGViaWD {
		AssertTextEquals(
			locator1 = "Wiki#FRONTPAGE_DEFAULT_MESSAGE",
			value1 = "This page is empty. Edit it to add some text."
		);

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "FrontPage");

		AssertTextNotPresent(value1 = "${wikiPageContent}");

		AssertElementNotPresent(locator1 = "WikiEntry#BODY");
	}

	macro viewFrontPageCP {
		var key_wikiPageTitle = "FrontPage";

		AssertTextEquals.assertPartialText(
			locator1 = "Wiki#PAGE_HEADER",
			value1 = "FrontPage"
		);

		AssertTextEquals(
			locator1 = "WikiEntry#BODY",
			value1 = "${wikiFrontPageContent}"
		);

		AssertElementNotPresent(locator1 = "Wiki#FRONTPAGE_DEFAULT_MESSAGE");

		AssertTextNotPresent(value1 = "This page is empty. Edit it to add some text.");
	}

	macro viewFrontPageDefaultADTPG {
		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "FrontPage");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		AssertElementPresent(locator1 = "Link#ADD_CHILD_PAGE");

		AssertTextEquals(locator1 = "Link#EDIT", value1 = "Edit");

		AssertTextEquals(locator1 = "Link#DETAILS", value1 = "Details");

		AssertTextEquals(locator1 = "Link#PRINT", value1 = "Print");

		AssertElementPresent(locator1 = "Comments#PANEL_TOGGLE");

		AssertElementPresent(locator1 = "Comments#SUBSCRIBE_TO_COMMENTS_LINK");

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_LABEL");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_LABEL");
	}

	macro viewFrontPageDefaultCP {
		AssertTextEquals(
			locator1 = "Wiki#FRONTPAGE_DEFAULT_MESSAGE",
			value1 = "This page is empty. Edit it to add some text."
		);

		AssertTextNotPresent(value1 = "${wikiFrontPageContent}");
	}

	macro viewFrontPagePG {
		var key_wikiNodeName = "${wikiNodeName}";

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "FrontPage");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		AssertTextNotPresent(value1 = "This page is empty. Edit it to add some text.");
	}

	macro viewLocalizedFrontPagePG {
		if ("${rightToLeft}" == "true") {
			var textDirection = "rtl";
		}
		else {
			var textDirection = "ltr";
		}

		AssertElementPresent(locator1 = "//html[@dir='${textDirection}']");

		var key_htmlTags = "p";

		AssertTextEquals(
			locator1 = "WikiEntry#BODY_HTML",
			value1 = "${wikiPageContent}"
		);
	}

	macro viewNoChildPagePG {
		var key_wikiChildPageTitle = "${wikiChildPageTitle}";

		AssertTextNotPresent(
			locator1 = "Wiki#CHILD_PAGE_HEADER",
			value1 = "Children Pages"
		);

		AssertTextNotPresent(
			locator1 = "Wiki#CHILD_PAGE_TITLE",
			value1 = "${wikiChildPageTitle}"
		);
	}

	macro viewNoChildPagePGViaAllPages {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(
			locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE",
			value1 = "${wikiPageTitle}"
		);

		AssertTextEquals(locator1 = "WikiTable#ALL_PAGES_STATUS", value1 = "Approved");

		AssertTextEquals(
			locator1 = "WikiTable#ALL_PAGES_REVISION",
			value1 = "${wikiPageRevision}"
		);

		AssertTextEquals(
			locator1 = "WikiTable#ALL_PAGES_USER",
			value1 = "${wikiPageUsername}"
		);

		AssertElementPresent(locator1 = "WikiTable#ALL_PAGES_DATE");

		var key_wikiPageTitle = "${wikiChildPageTitle}";

		AssertElementNotPresent(locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE");
	}

	macro viewNoChildPagePGViaWD {
		AssertElementNotPresent(locator1 = "Wiki#CHILD_PAGE_HEADER");

		AssertElementNotPresent(locator1 = "Wiki#CHILD_PAGE_GENERIC");
	}

	macro viewNoPagePG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertElementNotPresent(locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE");
	}

	macro viewPageNoAttachment {
		WikiPage.viewPG(
			wikiPageContent = "${wikiPageContent}",
			wikiPageTitle = "${wikiPageTitle}"
		);

		AssertElementNotPresent(locator1 = "WikiEntry#ATTACHMENTS_LABEL");

		AssertElementNotPresent(
			locator1 = "WikiEntry#ATTACHMENT_FILE_NAME",
			key_attachmentFileName = "${attachmentFileName}"
		);
	}

	macro viewPagePG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		if (isSet(customFieldText)) {
			var key_customFieldContent = "${customFieldText}";

			AssertTextEquals(
				locator1 = "Wiki#CUSTOM_FIELD_CONTENT",
				value1 = "${customFieldText}"
			);
		}
	}

	macro viewPageWithAttachment {
		var key_attachmentFileName = "${attachmentFileName}";
		var key_wikiPageContent = "${wikiPageContent}";
		var key_wikiPageTitle = "${wikiPageTitle}";

		WikiPage.viewPG(
			wikiPageContent = "${wikiPageContent}",
			wikiPageTitle = "${wikiPageTitle}"
		);

		AssertElementPresent(locator1 = "WikiEntry#ATTACHMENTS_LABEL");

		AssertTextEquals(
			locator1 = "WikiEntry#ATTACHMENT_FILE_NAME",
			value1 = "${attachmentFileName}"
		);
	}

	macro viewPageWithWorkflowPG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertTextEquals(locator1 = "Portlet#H2_HEADER_2", value1 = "Pending Approval");

		AssertTextEquals(
			locator1 = "WikiTable#DRAFT_PAGES_WIKI_PAGE_NAME",
			value1 = "${wikiPageTitle}"
		);

		AssertTextEquals(
			locator1 = "WikiTable#DRAFT_PAGES_STATUS",
			value1 = "${wikiPageStatus}"
		);

		AssertTextEquals(locator1 = "WikiTable#DRAFT_PAGES_REVISION", value1 = "1.0");

		AssertTextEquals(
			locator1 = "WikiTable#DRAFT_PAGES_USER",
			value1 = "${wikiPageUsername}"
		);

		AssertElementPresent(locator1 = "WikiTable#DRAFT_PAGES_DATE");
	}

	macro viewPG {
		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		if ("${wikiPageContentGeneric}" == "true") {
			AssertTextEquals(
				locator1 = "WikiEntry#BODY_GENERIC",
				value1 = "${wikiPageContent}"
			);
		}
		else if ("${wikiPageContentLink}" == "true") {
			AssertTextEquals(
				locator1 = "WikiEntry#BODY_LINK",
				value1 = "${wikiPageContent}"
			);
		}
		else {
			AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");
		}

		if ("viewViewCount" == "true") {
			if ("${viewCountNumber}" == "1") {
				AssertTextEquals(
					locator1 = "Wiki#VIEW_COUNT",
					value1 = "${viewCountNumber} View"
				);
			}
			else if ("${viewCountNumber}" == "0") {
				AssertTextEquals(locator1 = "Wiki#VIEW_COUNT", value1 = "");
			}
			else {
				AssertTextEquals(
					locator1 = "Wiki#VIEW_COUNT",
					value1 = "${viewCountNumber} Views"
				);
			}
		}

		if ("${viewIncomingLinks}" == "true") {
			AssertClick(locator1 = "Link#DETAILS", value1 = "Details");

			AssertClick(
				locator1 = "Wiki#PAGE_TABS_INCOMING_LINKS",
				value1 = "Incoming Links"
			);

			var key_wikiPageTitle = "${wikiPageTitleIncomingLink}";

			AssertTextEquals(
				locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE",
				value1 = "${wikiPageTitleIncomingLink}"
			);

			AssertTextEquals(locator1 = "WikiTable#ALL_PAGES_STATUS", value1 = "Approved");

			AssertTextEquals(
				locator1 = "WikiTable#ALL_PAGES_REVISION",
				value1 = "${wikiPageRevisionIncomingLink}"
			);

			AssertTextEquals(
				locator1 = "WikiTable#ALL_PAGES_USER",
				value1 = "${wikiPageUsernameIncomingLink}"
			);

			AssertElementPresent(locator1 = "WikiTable#ALL_PAGES_DATE");

			AssertClick(
				locator1 = "WikiTable#ALL_PAGES_WIKI_PAGE_TITLE",
				value1 = "${wikiPageTitleIncomingLink}"
			);

			AssertTextEquals(
				locator1 = "Portlet#H3_HEADER_2",
				value1 = "${wikiPageTitleIncomingLink}"
			);

			AssertTextEquals(
				locator1 = "WikiEntry#BODY",
				value1 = "${wikiPageContentIncomingLink}"
			);
		}
	}

	macro viewPGViaWD {
		AssertTextEquals(locator1 = "Portlet#H3_HEADER", value1 = "${wikiPageTitle}");

		AssertTextEquals(locator1 = "WikiEntry#BODY", value1 = "${wikiPageContent}");

		AssertTextNotPresent(
			value1 = "Please configure this portlet to make it visible to all users."
		);

		AssertElementNotPresent(locator1 = "Message#INFO_1");
	}

	macro viewRate4StarsPG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR_1");

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR_2");

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR_3");

		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR_4");

		AssertElementNotPresent(locator1 = "Ratings#YOUR_RATING_STAR_5");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_STAR_1");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_STAR_2");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_STAR_3");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_STAR_4");

		AssertElementNotPresent(locator1 = "Ratings#AVERAGE_STAR_5");

		AssertTextEquals(
			locator1 = "Ratings#AVERAGE_LABEL",
			value1 = "Average (1 Vote)"
		);
	}

	macro viewRedirectLinkPG {
		AssertTextEquals(locator1 = "Link#REDIRECT", value1 = "${wikiPageRedirectLink}");
	}

	macro viewRSS {
		var wikiNodeName = "${wikiNodeName}";
		var wikiPageContent = "${wikiPageContent}";
		var wikiPageTitle = "${wikiPageTitle}";

		Click(locator1 = "Icon#INFO");

		AssertClick.assertPartialTextClickAt(locator1 = "Link#FEED", value1 = "Feed");

		Pause(locator1 = "3000");

		WikiPage._checkForRSSTitleCP(
			wikiNodeName = "${wikiNodeName}",
			wikiPageContent = "${wikiPageContent}",
			wikiPageTitle = "${wikiPageTitle}"
		);

		SelectWindow(locator1 = "title=${wikiPageTitle}");

		var key_entryContent = "${wikiPageContent}";
		var key_entryTitle = "${wikiPageTitle}";

		AssertTextEquals(locator1 = "RSS#FEED_TITLE", value1 = "${wikiPageTitle}");

		AssertTextEquals(locator1 = "RSS#FEED_SUBTITLE", value1 = "${wikiPageTitle}");

		AssertTextEquals(locator1 = "RSS#ENTRY_CONTENT", value1 = "${wikiPageContent}");

		AssertClick(
			locator1 = "RSS#ENTRY_TITLE",
			value1 = "${wikiPageTitle} ${version}"
		);
	}

	macro viewSearchResultsPG {
		var key_wikiPageTitle = "${wikiPageTitle}";

		if ("${searchNoResults}" == "true") {
			AssertTextEquals(
				locator1 = "Message#INFO_1",
				value1 = "No pages were found that matched the keywords: ${searchTerm}."
			);

			AssertTextEquals(
				locator1 = "Wiki#SEARCH_CREATE_NEW_PAGE_LINK",
				value1 = "Create a new page on this topic."
			);
		}
		else if ("${wikiComment}" == "true") {
			AssertTextEquals(
				locator1 = "Wiki#SEARCH_RESULT_COMMENT_BODY",
				value1 = "${commentBody}"
			);
		}
		else if ("${wikiAttachment}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Wiki#SEARCH_RESULT_ATTACHMENT_BODY",
				value1 = "${wikiAttachmentBody}"
			);
		}
		else {
			AssertTextEquals(
				locator1 = "Wiki#SEARCH_RESULT_TITLE",
				value1 = "${wikiPageTitle}"
			);

			AssertTextEquals(
				locator1 = "Wiki#SEARCH_RESULT_DESCRIPTION",
				value1 = "${wikiPageContent}"
			);

			if (isSet(wikiNodeName)) {
				AssertTextEquals(
					locator1 = "Wiki#SEARCH_RESULT_NODE",
					value1 = "${wikiNodeName}"
				);
			}
			else {
				AssertTextEquals(locator1 = "Wiki#SEARCH_RESULT_NODE", value1 = "Main");
			}
		}
	}

	macro viewTagViaAddPG {
		AssertElementPresent(
			locator1 = "AssetCategorization#TAG",
			key_tagName = StringUtil.lowerCase("${tagName}")
		);
	}

	macro viewViewCount {
		if ("${viewCountNumber}" == "1") {
			AssertTextEquals(
				locator1 = "Wiki#VIEW_COUNT",
				value1 = "${viewCountNumber} View"
			);
		}
		else if ("${viewCountNumber}" == "0") {
			AssertTextEquals(locator1 = "Wiki#VIEW_COUNT", value1 = "");
		}
		else {
			AssertTextEquals(
				locator1 = "Wiki#VIEW_COUNT",
				value1 = "${viewCountNumber} Views"
			);
		}
	}
}